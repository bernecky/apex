⌷sis←
<array><shape>16879</shape><string>inline int barBBI(bool x, bool y)£%A;{ return(BtoI(x)-BtoI(y));£%A;}£%A;£%A;inline int[+] mpyIII(int x, int[+] y)£%A;{ /* SxA scalar function */£%A;  xel = toI(x);£%A;  z = with {£%A;     ( . &lt;= iv &lt;= .) {£%A;              yel = toI(y[iv]);£%A;                    } : mpyIII(xel,yel);£%A;  } : genarray(shape(y), 0);£%A;  return(z);£%A;}£%A;£%A;£%A;inline bool[.] comaXBB(bool y)£%A;{ /* Ravel of scalar */£%A;        return([y]);£%A;}£%A;£%A;inline int[+] rot1III(int x, int[+] y)£%A;{ /* Scalar rotate first axis non-scalar */£%A; ix = toi(x);£%A; rows = shape(y)[0];£%A; cellshape = drop([1], shape(y));£%A; defcell = genarray(cellshape, 0);£%A; k = VectorRotateAmount(ix,rows); /* Normalize rotate count */£%A; z = drop( [k], y) ++ take( [k], y);£%A; return(z);£%A;}£%A;£%A;£%A;inline int[*] rhoIII(int[.] x, int[*] y)£%A;{  /* APEX vector x reshape, with potential item reuse */£%A;   z = with {£%A;         ( . &lt;= iv &lt;= .) {£%A;           offset = V2O( toi( x), iv);£%A;           offset = _mod_SxS_( offset, prod( shape(y)));£%A;           el = y[ O2V( shape( y), offset)];£%A;          } : el;£%A;       } : genarray( toi(x), 0);£%A;   return( z);£%A;}£%A;£%A;£%A;£%A;inline int[.] rhoIII(int x, int[*] y)£%A;{ /* Scalar reshape non-scalar (to vector) */£%A; z = rhoIII( [toi(x)],y);£%A; return(z);£%A;}£%A;£%A;£%A;inline int[.] iotaXBI(bool y, int QUADio)£%A;{ /* Index generator on scalar */£%A;/* HELP! Needs domain check for negative shp */£%A;  z = QUADio+iota(toi(y));£%A;  return( z);£%A;}£%A;£%A;inline int[.] iotaXII(int y, int QUADio)£%A;{ /* Index generator on scalar */£%A;/* HELP! Needs domain check for negative shp */£%A;  z = QUADio+iota(toi(y));£%A;  return( z);£%A;}£%A;£%A;inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)£%A;{ /* {quad}{&lt;-} anything */£%A;        show(y);£%A;        return(y);£%A;}£%A;inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)£%A;{ /* {quad}{&lt;-} anything */£%A;        show(y);£%A;        return(y);£%A;}£%A;inline bool[2] comaBBB(bool x, bool y)£%A;{/* SxS catenate first (or last) axis */£%A; return([toB(x)]++[toB(y)]);£%A;}£%A;£%A;inline int[.] comaBII(bool x, int[.] y)£%A;{/* SxV catenate first (or last) axis */£%A; return([toI(x)]++toI(y));£%A;}£%A;£%A;inline int[.] comaIBI(int[.] x, bool y)£%A;{/* VxS catenate first (or last) axis */£%A; return(toI(x)++[toI(y)]);£%A;}£%A;£%A;inline bool[.] comaBBB(bool[.] x, bool y)£%A;{/* VxS catenate first (or last) axis */£%A; return(toB(x)++[toB(y)]);£%A;}£%A;£%A;inline bool[.] comaBBB(bool x, bool[.] y)£%A;{/* SxV catenate first (or last) axis */£%A; return([toB(x)]++toB(y));£%A;}£%A;£%A;inline bool[.] comaBBB(bool[.] x, bool[.] y)£%A;{ /* VxV catenate first or last axis */£%A; return(toB(x)++toB(y));£%A;}£%A;£%A;inline int[.] comaIII(int[.] x, int[.] y)£%A;{ /* VxV catenate first or last axis */£%A; return(toI(x)++toI(y));£%A;}£%A;£%A;inline int[.] comaBII(bool[.] x, int y)£%A;{/* VxS catenate first (or last) axis */£%A; return(toI(x)++[toI(y)]);£%A;}£%A;£%A;inline int[.] comaIBI(int x, bool[.] y)£%A;{/* SxV catenate first (or last) axis */£%A; return([toI(x)]++toI(y));£%A;}£%A;£%A;inline int[+] comaIII(int[+] x, int[+] y)£%A;{/* AxA last axis catenate. Ranks match */£%A; cellshape = (take([-1],shape(x)))+take([-1],shape(y));£%A; cell = genarray(cellshape, 0);£%A; z = with {£%A;         (. &lt;= iv &lt;= .)£%A;                : toI(x[iv])++toI(y[iv]);£%A;        } : genarray(drop([-1], shape(x)), cell);£%A; return(z);£%A;}£%A;£%A;£%A;inline int[+] comaIBI(int[+] x, bool y)£%A;{ /* A,S last-axis catenate */£%A; frame = drop([-1],shape(x));£%A; cell = genarray([1+shape(x)[dim(x)-1]],0);£%A; z = with {£%A;        (. &lt;= iv &lt;= .)£%A;                : toI(x[iv])++[toI(y)];£%A;        }: genarray(frame, cell);£%A; return(z);£%A;}£%A;£%A;£%A;inline int[+] comaIIILG(int[+] x, int[+] y)£%A;{/* AxA last axis catenate. Left rank greater */£%A; frameshape = drop([-1],shape(x));£%A; cellshape  = take([-1],shape(x)) + [1];£%A; cell = genarray(cellshape, 0);£%A; z = with {£%A;        (. &lt;= iv &lt;= .)£%A;                : toI(x[iv])++toI([y[iv]]);£%A;        }: genarray(frameshape, cell);£%A; return(z);£%A;}£%A;£%A;inline bool[2] combBBB(bool x, bool y)£%A;{/* SxS catenate first (or last) axis */£%A; return([toB(x)]++[toB(y)]);£%A;}£%A;£%A;inline int[.] combBII(bool x, int[.] y)£%A;{/* SxV catenate first (or last) axis */£%A; return([toI(x)]++toI(y));£%A;}£%A;£%A;inline int[.] combIBI(int[.] x, bool y)£%A;{/* VxS catenate first (or last) axis */£%A; return(toI(x)++[toI(y)]);£%A;}£%A;£%A;inline bool[.] combBBB(bool x, bool[.] y)£%A;{/* SxV catenate first (or last) axis */£%A; return([toB(x)]++toB(y));£%A;}£%A;£%A;inline bool[.] combBBB(bool[.] x, bool y)£%A;{/* VxS catenate first (or last) axis */£%A; return(toB(x)++[toB(y)]);£%A;}£%A;£%A;inline bool[.] combBBB(bool[.] x, bool[.] y)£%A;{ /* VxV catenate first or last axis */£%A; return(toB(x)++toB(y));£%A;}£%A;£%A;inline int[.] combIII(int[.] x, int[.] y)£%A;{ /* VxV catenate first or last axis */£%A; return(toI(x)++toI(y));£%A;}£%A;£%A;inline int[.] combBII(bool[.] x, int y)£%A;{/* VxS catenate first (or last) axis */£%A; return(toI(x)++[toI(y)]);£%A;}£%A;£%A;inline int[.] combIBI(int x, bool[.] y)£%A;{/* SxV catenate first (or last) axis */£%A; return([toI(x)]++toI(y));£%A;}£%A;£%A;inline int[+] combIII(int[+] x, int[+] y)£%A;{/* AxA first axis catenate. Ranks match */£%A; return(toI(x)++toI(y));£%A;}£%A;£%A;inline int[+] combIII(int[+] x, int y)£%A;{ /* AxS first-axis catenate */£%A;  cell = genarray([1]++drop([1],shape(x)),toI(y));£%A;  return(toI(x)++cell);£%A;}£%A;£%A;inline int[+] combIII(int x, int[+] y)£%A;{ /* SxA first-axis catenate */£%A;  cell = genarray([1]++drop([1],shape(y)),toI(x));£%A;  return(cell++toI(y));£%A;}£%A;£%A;inline int[+] combIIILG(int[+] x, int[+] y)£%A;{/* AxA first axis catenate. Left rank greater */£%A; return(toI(x)++toI([y]));£%A;}£%A;inline int[+] combIIIRG(int[+] x, int[+] y)£%A;{/* AxA first axis catenate. Right rank greater */£%A; return(toI([x])++toI(y));£%A;}£%A;inline bool sameBBB(bool[+] x, bool[+] y)£%A;{ /* Non-scalar match non-scalar */£%A;   z = (( _dim_A_( x) == _dim_A_( y))          &amp;&amp;£%A;       ( all( _shape_A_( x) == _shape_A_( y))) &amp;&amp;£%A;       ( all( eqBBB(toB( x),  toB( y)))));£%A;  return(z);£%A;}£%A;£%A;£%A;£%A;inline bool sameIBB(int[+] x, bool[+] y)£%A;{ /* Non-scalar match non-scalar */£%A;   z = (( _dim_A_( x) == _dim_A_( y))          &amp;&amp;£%A;       ( all( _shape_A_( x) == _shape_A_( y))) &amp;&amp;£%A;       ( all( eqIIB(toI( x),  toI( y)))));£%A;  return(z);£%A;}£%A;£%A;£%A;£%A;inline bool sameIIB(int[+] x, int[+] y)£%A;{ /* Non-scalar match non-scalar */£%A;   z = (( _dim_A_( x) == _dim_A_( y))          &amp;&amp;£%A;       ( all( _shape_A_( x) == _shape_A_( y))) &amp;&amp;£%A;       ( all( eqIIB(toI( x),  toI( y)))));£%A;  return(z);£%A;}£%A;£%A;£%A;£%A;inline int[*] indr(int[+] X)£%A;{ /* X[;;;] */£%A;  /* Used only in conjunction with other indexing, e.g.,£%A;   * X[;;j;]£%A;   */£%A; return(X);£%A;}£%A;£%A;£%A;£%A;£%A;inline int[+] indsxx0(int[+] X, int  I2, bool Yin)£%A;{ /* X[;;nonscalarI;;;]&lt;- scalarY */£%A; £%A; z = ItoI(X);£%A; Y = Yin;£%A;£%A; for(i0=0; i0&lt;shape(X)[[0]]; i0++){£%A; for(i1=0; i1&lt;shape(X)[[1]]; i1++){£%A;£%A; z[[i0,i1,I2]]=BtoI((Y));£%A;£%A; }£%A; }£%A;£%A; return(z);£%A;}£%A;£%A;£%A;£%A;inline int[+] indsxx0(int[+] X, int  I2, int[+] Y)£%A;{ /* X[;;nonscalarI;;;]&lt;- nonscalarY */£%A;  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */£%A; £%A; z = ItoI(X);£%A; for(i0=0; i0&lt;shape(X)[[0]]; i0++){£%A; for(i1=0; i1&lt;shape(X)[[1]]; i1++){£%A;£%A; z[[i0,i1,I2]]=ItoI((Y[[i0,i1]]));£%A;£%A; }£%A; }£%A;£%A; return(z);£%A;}£%A;£%A;£%A;£%A;inline int[+] inds0xx(int[+] X, int  I0, int Yin)£%A;{ /* X[;;nonscalarI;;;]&lt;- scalarY */£%A; £%A; z = ItoI(X);£%A; Y = genarray(take([-2],shape(X)),Yin);£%A;£%A; £%A; z[[I0]]=ItoI((Y));£%A;£%A; £%A; return(z);£%A;}£%A;£%A;£%A;£%A;inline int[*] jotdotplusIII(int [+] x, int [+] y)£%A;{ /* AxA outer product */£%A; cell = genarray(shape(y), 0);£%A; z = with {£%A;        (. &lt;= iv &lt;= .) {£%A;         xitem = toI(x[iv]);£%A;        } : plusIII(xitem, toI(y));£%A;        } : genarray(shape(x), cell);£%A; return(z);£%A;}£%A;£%A;inline bool andslXBBQUICKSTOP(bool[.] y)£%A;{ /* First/last axis reduction of vector with quick stop*/£%A;  z = with {£%A;         (0*shape(y) &lt;= iv &lt; shape(y))£%A;                : BtoB(y[iv]);£%A;        } : foldfix( andBBB, ItoB(1), ItoB(0));£%A;  return(z);£%A;}£%A;£%A;£%A;inline int mpyIII(int x, int y)£%A;{ return(ItoI(x)*ItoI(y));£%A;}£%A;£%A;inline bool andBBB(bool x, bool y)£%A;{ return(BtoB(x)&amp;BtoB(y));£%A;}£%A;£%A;inline bool[+] eqBBB(bool[+] x, bool[+] y)£%A;{ /* AxA Dyadic scalar fn, shapes may or may not match */£%A;         sx = shape(y);£%A;         z = with {£%A;             ( . &lt;= iv &lt;= .) {£%A;                      xel = x[iv];£%A;                   yel = y[iv];£%A;           } : eqBBB(xel,yel);£%A;        } : genarray(sx, false);£%A;  return(z);£%A;}£%A;£%A;£%A;£%A;£%A;£%A;£%A;inline bool[+] eqIIB(int[+] x, int[+] y)£%A;{ /* AxA Dyadic scalar fn, shapes may or may not match */£%A;         sx = shape(y);£%A;         z = with {£%A;             ( . &lt;= iv &lt;= .) {£%A;                      xel = x[iv];£%A;                   yel = y[iv];£%A;           } : eqIIB(xel,yel);£%A;        } : genarray(sx, false);£%A;  return(z);£%A;}£%A;£%A;£%A;£%A;£%A;£%A;£%A;inline int[+] plusIII(int x, int[+] y)£%A;{ /* SxA scalar function */£%A;  xel = toI(x);£%A;  z = with {£%A;     ( . &lt;= iv &lt;= .) {£%A;              yel = toI(y[iv]);£%A;                    } : plusIII(xel,yel);£%A;  } : genarray(shape(y), 0);£%A;  return(z);£%A;}£%A;£%A;£%A;inline int[*] indrfr(int fr, int[+] X, int[+] I)£%A;{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */£%A;  /* This is actually "I from"fr X" */£%A;  frameshape = take([fr], shape(X));£%A;  cellshape =  shape(I)++drop([fr+1], shape(X));£%A;  cell = genarray(cellshape, 0);£%A; z = with {£%A;        (. &lt;= iv &lt;= .)£%A;                : indrfr0(X[iv], I);£%A;        } : genarray(frameshape, cell);£%A; return(z);£%A;}£%A;£%A;inline int[*] indrfr0(int[+] X, int[+] I)£%A;{ /* X[I;;;] or    I from X */£%A;  cellshape =  drop([1], shape(X));£%A;  cell = genarray(cellshape, 0);£%A; z = with {£%A;        (. &lt;= iv &lt;= .)£%A;                : sel( I[iv], X);£%A;        } : genarray(shape(I), cell);£%A; return(z);£%A;}£%A;£%A;£%A;£%A;inline int[*] indrfr(int fr, int[+] X, int I)£%A;{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */£%A;  /* This is actually "I from"fr X" */£%A; frameshape = take([fr], shape(X));£%A; cellshape = drop([1+fr],shape(X));£%A; cell = genarray(cellshape,0);£%A; z = with {£%A;        (. &lt;= iv &lt;= .)£%A;                : sel( I, X[iv]);£%A;        } : genarray(frameshape, cell);£%A; return(z);£%A;}£%A;£%A;£%A;inline int VectorRotateAmount(int x, int y)£%A;{ /* Normalize x rotate for array of shape y on selected axis */£%A; /* normalize rotation count */£%A;£%A;if ((0==x) || (0==y))£%A;  z = 0;£%A;else if (x&gt;0)£%A;        z = _mod_SxS_(x,y);£%A;     else£%A;        z = y - _mod_SxS_(abs(x),y);£%A; return(z);£%A;}£%A;£%A;inline int V2O( int[.] shp, int[.] iv)£%A;{ /* Vector iv to offset into array of shape shp */£%A;  /* See V2O.dws workspace */£%A;  offset = 0;£%A;  wt = 1;£%A;  for( i=shape(shp)[0]-1; i&gt;=0; i--) {£%A;    offset = offset + ( wt * iv[i]);£%A;    wt = wt * shp[i];£%A;  }£%A;  return( offset);£%A;}£%A;£%A;inline int[.] O2V( int[.] shp, int offset)£%A;{ /* Offset into array of shape shp to index vector */£%A;  /* See V2O.dws workspace */£%A;  iv = genarray( shape(shp), 1);£%A;  wts = iv;£%A;  for( i=shape(shp)[0]-2; i&gt;=0; i--) {£%A;    wts[i] = wts[i+1] * shp[i+1];£%A;  }£%A;£%A;  for( i=shape(shp)[0]-1; i&gt;=0; i--) {£%A;    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);£%A;    offset = offset - (iv[i]*wts[i]);£%A;  }£%A;  return( iv);£%A;}£%A;£%A;inline bool APEXFUZZEQ(double x, double y, double QUADct)£%A;{ /* ISO APL Tolerant equality predicate */£%A; absx = abs(x);£%A; absy = abs(y);£%A; tolerance = QUADct * max(absx,absy);£%A; z = abs(x-y) &lt;= tolerance;£%A; return(z);£%A;}£%A;£%A;inline int ABC(int I, int Xshape)£%A;{ /* (OLD) Array bounds check for indexed ref X[scalarI] &amp; indexed assign */£%A; z = I;£%A; return(z);£%A;}£%A;£%A;inline int[+] ABC(int[+] I, int Xshape)£%A;{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] &amp; indexed assign */£%A; z = I;£%A; return(z);£%A;}£%A;£%A;inline bool eqBBB(bool x, bool y)£%A;{ /* A=B on non-doubles */£%A; return(BtoB(x) == BtoB(y));£%A;}£%A;£%A;inline bool eqIIB(int x, int y)£%A;{ /* A=B on non-doubles */£%A; return(ItoI(x) == ItoI(y));£%A;}£%A;£%A;inline int plusIII(int x, int y)£%A;{ return(ItoI(x)+ItoI(y));£%A;}£%A;£%A;inline bool[+] eqBBB(bool x, bool[+] y)£%A;{ /* SxA scalar function */£%A;  xel = toB(x);£%A;  z = with {£%A;     ( . &lt;= iv &lt;= .) {£%A;              yel = toB(y[iv]);£%A;                    } : eqBBB(xel,yel);£%A;  } : genarray(shape(y), false);£%A;  return(z);£%A;}£%A;£%A;£%A;inline bool[+] eqBBB(bool[+] x, bool y)£%A;{ /* AxS scalar function */£%A;  z = with {£%A;  ( . &lt;= iv &lt;= .) {£%A;              xel = x[iv];£%A;   } : eqBBB(xel,y);£%A;  } : genarray( shape(x), false);£%A;  return(z);£%A;}£%A;£%A;£%A;inline bool[+] eqIIB(int x, int[+] y)£%A;{ /* SxA scalar function */£%A;  xel = toI(x);£%A;  z = with {£%A;     ( . &lt;= iv &lt;= .) {£%A;              yel = toI(y[iv]);£%A;                    } : eqIIB(xel,yel);£%A;  } : genarray(shape(y), false);£%A;  return(z);£%A;}£%A;£%A;£%A;inline bool[+] eqIIB(int[+] x, int y)£%A;{ /* AxS scalar function */£%A;  z = with {£%A;  ( . &lt;= iv &lt;= .) {£%A;              xel = x[iv];£%A;   } : eqIIB(xel,y);£%A;  } : genarray( shape(x), false);£%A;  return(z);£%A;}£%A;£%A;£%A;inline bool[.] comaXBB(bool[+] y)£%A;{ /* Ravel of anything with rank&gt;1 */£%A;  z = reshape([prod(shape(y))],y);£%A;  return(z);£%A;}£%A;£%A;inline int[.] comaXII(int[+] y)£%A;{ /* Ravel of anything with rank&gt;1 */£%A;  z = reshape([prod(shape(y))],y);£%A;  return(z);£%A;}£%A;£%A;int main()£%A;{ £%A;/*£%A; ?£%A;*/£%A;QUADio_0=toI(( false));£%A; QUADct_0=( 1.0e-13);£%A; QUADpp_0=( 10);£%A; QUADpw_0=( 80);£%A; QUADrl_0=( 16807);£%A; S0_0=( false);£%A; S1_0=( true);£%A; A_122=comaXBB( true);£%A; V1_0=( A_122);£%A; A_124=comaXBB( false);£%A; V0_0=( A_124);£%A; A_127=iotaXBI( false,QUADio_0);£%A; Vn_0=( A_127);£%A; V10100_0=( [true,false,true,false,false]);£%A; V101011_0=( [true,false,true,false,true,true]);£%A; A_132=iotaXII( 24,QUADio_0);£%A; A_133=rhoIII([2, 3, 4],A_132);£%A; M234_0=( A_133);£%A; A_135=comaBBB(S0_0,S1_0);£%A; A_137=sameBBB(A_135,[false,true]);£%A; r_0=( A_137);£%A; A_139=comaXBB( S1_0);£%A; A_140=comaBII(S1_0,Vn_0);£%A; A_142=sameIBB(A_140,A_139);£%A; A_143=comaBBB(r_0,A_142);£%A; r_1=( A_143);£%A; A_145=comaXBB( S1_0);£%A; A_146=comaIBI(Vn_0,S1_0);£%A; A_148=sameIBB(A_146,A_145);£%A; A_149=comaBBB(r_1,A_148);£%A; r_2=( A_149);£%A; A_151=comaBBB(S0_0,V1_0);£%A; A_153=sameBBB(A_151,[false,true]);£%A; A_154=comaBBB(r_2,A_153);£%A; r_3=( A_154);£%A; A_156=comaBBB(V1_0,S0_0);£%A; A_158=sameBBB(A_156,[true,false]);£%A; A_159=comaBBB(r_3,A_158);£%A; r_4=( A_159);£%A; A_161=comaBBB(V0_0,V1_0);£%A; A_162=comaBBB(V1_0,A_161);£%A; A_164=sameBBB(A_162,[true,false,true]);£%A; A_165=comaBBB(r_4,A_164);£%A; r_5=( A_165);£%A; A_167=comaIII(Vn_0,Vn_0);£%A; A_169=sameIIB(A_167,Vn_0);£%A; A_170=comaBBB(r_5,A_169);£%A; r_6=( A_170);£%A; A_172=comaBII(V10100_0,23);£%A; A_174=sameIIB(A_172,[1, 0, 1, 0, 0, 23]);£%A; A_175=comaBBB(r_6,A_174);£%A; r_7=( A_175);£%A; A_177=comaIBI(23,V10100_0);£%A; A_179=sameIIB(A_177,[23, 1, 0, 1, 0, 0]);£%A; A_180=comaBBB(r_7,A_179);£%A; r_8=( A_180);£%A; A_183=iotaXII( 4,QUADio_0);£%A; A_184=rhoIII(8,A_183);£%A; A_186=iotaXII( 6,QUADio_0);£%A; /* dsf scalar(s) */£%A;A_187=mpyIII(4,A_186);£%A; A_188=rhoIII([2, 3],A_187);£%A; A_189=jotdotplusIII(A_188,A_184);£%A; A_196=comaIII(M234_0,M234_0);£%A; A_198=sameIIB(A_196,A_189);£%A; A_199=comaBBB(r_8,A_198);£%A; r_9=( A_199);£%A; A_205=iotaXII( 4,QUADio_0);£%A; A_207=iotaXII( 6,QUADio_0);£%A; /* dsf scalar(s) */£%A;A_208=mpyIII(4,A_207);£%A; A_209=rhoIII([2, 3],A_208);£%A; A_210=jotdotplusIII(A_209,A_205);£%A; A_201= ABC(toi([0, 1, 2, 3, 0])-QUADio_0,shape(A_210)[2]);£%A;A_218=indrfr(2,A_210,A_201);£%A;z_0=( A_218);£%A; A_220= ABC(toi(4)-QUADio_0,shape(z_0)[2]);£%A;A_224=indsxx0(z_0,A_220,false);£%A; z_1=( A_224);£%A; A_226=comaIBI(M234_0,false);£%A; A_228=sameIIB(A_226,z_1);£%A; A_229=comaBBB(r_9,A_228);£%A; r_10=( A_229);£%A; A_231=rhoIII([2, 3],[10, 20, 30, 40, 50, 60]);£%A; A_232= ABC(toi(4)-QUADio_0,shape(z_1)[2]);£%A;A_236=indsxx0(z_1,A_232,A_231);£%A; z_2=( A_236);£%A; A_238=rhoIII([2, 3],[10, 20, 30, 40, 50, 60]);£%A; A_239=comaIIILG(M234_0,A_238);£%A; A_241=sameIIB(A_239,z_2);£%A; A_242=comaBBB(r_10,A_241);£%A; r_11=( A_242);£%A; A_244=combBBB(S0_0,S0_0);£%A; A_246=sameBBB(A_244,[false,false]);£%A; A_247=comaBBB(r_11,A_246);£%A; r_12=( A_247);£%A; A_249=comaXBB( S1_0);£%A; A_250=combBII(S1_0,Vn_0);£%A; A_252=sameIBB(A_250,A_249);£%A; A_253=comaBBB(r_12,A_252);£%A; r_13=( A_253);£%A; A_255=comaXBB( S1_0);£%A; A_256=combIBI(Vn_0,S1_0);£%A; A_258=sameIBB(A_256,A_255);£%A; A_259=comaBBB(r_13,A_258);£%A; r_14=( A_259);£%A; A_261=combBBB(S0_0,V1_0);£%A; A_263=sameBBB(A_261,[false,true]);£%A; A_264=comaBBB(r_14,A_263);£%A; r_15=( A_264);£%A; A_266=combBBB(V1_0,S0_0);£%A; A_268=sameBBB(A_266,[true,false]);£%A; A_269=comaBBB(r_15,A_268);£%A; r_16=( A_269);£%A; A_271=combBBB(V0_0,V1_0);£%A; A_272=combBBB(V1_0,A_271);£%A; A_274=sameBBB(A_272,[true,false,true]);£%A; A_275=comaBBB(r_16,A_274);£%A; r_17=( A_275);£%A; A_277=combIII(Vn_0,Vn_0);£%A; A_279=sameIIB(A_277,Vn_0);£%A; A_280=comaBBB(r_17,A_279);£%A; r_18=( A_280);£%A; A_282=combBII(V10100_0,23);£%A; A_284=sameIIB(A_282,[1, 0, 1, 0, 0, 23]);£%A; A_285=comaBBB(r_18,A_284);£%A; r_19=( A_285);£%A; A_287=combIBI(23,V10100_0);£%A; A_289=sameIIB(A_287,[23, 1, 0, 1, 0, 0]);£%A; A_290=comaBBB(r_19,A_289);£%A; r_20=( A_290);£%A; A_293=iotaXII( 24,QUADio_0);£%A; A_294=rhoIII([4, 3, 4],A_293);£%A; A_295=combIII(M234_0,M234_0);£%A; A_297=sameIIB(A_295,A_294);£%A; A_298=comaBBB(r_20,A_297);£%A; r_21=( A_298);£%A; A_301=iotaXII( 24,QUADio_0);£%A; A_302=rhoIII([3, 3, 4],A_301);£%A; z_3=( A_302);£%A; A_306= ABC(toi(2)-QUADio_0,shape(z_3)[0]);£%A;A_308=inds0xx(z_3,A_306,5);£%A; z_4=( A_308);£%A; A_310=combIII(M234_0,5);£%A; A_312=sameIIB(A_310,z_4);£%A; A_313=comaBBB(r_21,A_312);£%A; r_22=( A_313);£%A; A_315=rot1III(-1,z_4);£%A; A_316=combIII(5,M234_0);£%A; A_318=sameIIB(A_316,A_315);£%A; A_319=comaBBB(r_22,A_318);£%A; r_23=( A_319);£%A; A_321=rhoIII([3, 4],5);£%A; A_322=combIIILG(M234_0,A_321);£%A; A_324=sameIIB(A_322,z_4);£%A; A_325=comaBBB(r_23,A_324);£%A; r_24=( A_325);£%A; A_327=rot1III(-1,z_4);£%A; A_328=rhoIII([3, 4],5);£%A; A_329=combIIIRG(A_328,M234_0);£%A; A_331=sameIIB(A_329,A_327);£%A; A_332=comaBBB(r_24,A_331);£%A; r_25=( A_332);£%A; A_336=quadXBB( r_25,QUADpp_0,QUADpw_0);£%A; A_337=andslXBBQUICKSTOP( r_25);£%A; /* dsf scalar(s) */£%A;A_341=barBBI(true,A_337);£%A; r_26=( A_341);£%A; A_345=quadXII( A_341,QUADpp_0,QUADpw_0);£%A; return(r_26);£%A;}£%A;£%A;</string></array>

'% Monadic Scalar Function code fragments',(⎕UCS 10),'% Converted to SAC 2005-11-03 R. Bernecky',(⎕UCS 10),'%',(⎕UCS 10),'% All code fragments presume that the argument has already been',(⎕UCS 10),'% converted to the correct compute type.',(⎕UCS 10),'%         jsym  ranks   lt rt   zt',(⎕UCS 10 10),'% IF you''re seeking query, it lives in query.frg, because',(⎕UCS 10),'% it is NOT a scalar function on parallel machines!',(⎕UCS 10 10),'%Fragment mod   x00 x  b    b .',(⎕UCS 10),'inline bool $FNAME($YTYPE y)',(⎕UCS 10),'{ /* Absolute value Boolean (NOP) */',(⎕UCS 10),' return(toB(y));',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment mod   x00 x  id    id .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y)',(⎕UCS 10),'{ return(abs(to$CT(y)));',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment bar   x00 x  b    b .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y)',(⎕UCS 10),'{ return(!y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment bar   x00 x  id    id  .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y)',(⎕UCS 10),'{ return(-y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment plus  x00 x  bid  bid .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y)',(⎕UCS 10),'{ return(y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment min   x00 x bi bi .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y)',(⎕UCS 10),'{ return(y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment min   x00 x d  i .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y,double QUADct)',(⎕UCS 10),'{ return(DFLOOR(y,QUADct));',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , DFLOOR, X$YT$ZT, X00, ., $CT',(⎕UCS 10 10 10),'%Fragment max   x00 x bi bi .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y)',(⎕UCS 10),'{ /* Boolean/integer ceiling (NOP) */',(⎕UCS 10),'  return(y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment max   x00 x d  i .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y, double QUADct)',(⎕UCS 10),'{ /* Ceiling */',(⎕UCS 10),' return(-DFLOOR(-y, QUADct));',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , DFLOOR, X$YT$ZT, X00, ., $CT',(⎕UCS 10 10),'%Fragment mpy   x00 x b  b .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y)',(⎕UCS 10),'{ /* Boolean signum (NOP) */',(⎕UCS 10),' return(y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment mpy   x00 x id id id',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y)',(⎕UCS 10),'{ /* signum int/double */',(⎕UCS 10),'   if( to$CT(0) == y) {',(⎕UCS 10),'    z = 0;',(⎕UCS 10),'  } else {',(⎕UCS 10),'    if( to$CT(0) < y) {',(⎕UCS 10),'      z = 1;',(⎕UCS 10),'    } else {',(⎕UCS 10),'      z = -1;',(⎕UCS 10),'    }',(⎕UCS 10),'  }',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment not   x00 x bid b .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y)',(⎕UCS 10),'{ /* Boolean NOT */',(⎕UCS 10),'  return(!toB(y));',(⎕UCS 10),'}',(⎕UCS 10),' ',(⎕UCS 10),'%Fragment div   x00 x bid d .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y)',(⎕UCS 10),'{ return(1.0/tod(y));',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment star  x00 x bid d .',(⎕UCS 10),'inline $ZTYPE $FNAME ($YTYPE y)',(⎕UCS 10),'{ return(pow(2.718281828459046,tod(y)));',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment log   x00 x bid d .',(⎕UCS 10),'inline $ZTYPE $FNAME ($YTYPE y)',(⎕UCS 10),'{ return(log(tod(y)));',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment circ  x00 x bid d .',(⎕UCS 10),'inline $ZTYPE $FNAME ($YTYPE y)',(⎕UCS 10),'{ return(3.1415926535897632*tod(y));',(⎕UCS 10),'}',(⎕UCS 10)

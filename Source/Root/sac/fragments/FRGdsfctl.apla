'% APEX code fragments for dyadic scalar functions.',(⎕UCS 10),'% R. Bernecky 2005-10-07 ',(⎕UCS 10),'%  ',(⎕UCS 10),'%  We can not, in general, provide full support for singleton',(⎕UCS 10),'%  extension. Consider the (1 1 1 rho 2)+ iota n.',(⎕UCS 10),'%  If n>1 then the result is a vector. ',(⎕UCS 10),'%  If n=1, the result is a tensor!',(⎕UCS 10),'%  Hence, we should forbid ALL singletons of rank>1. ',(⎕UCS 10 10),'%  We SHOULD forbid',(⎕UCS 10),'%  vector singletons as well (things would run faster), but ',(⎕UCS 10),'%  there is too much code that depends on this behavior. 1996-05-04',(⎕UCS 10 10),'% There is some redundancy in the code fragments below, because,',(⎕UCS 10),'% e.g., we may mark a SxS operation as sx, sy, or neither...',(⎕UCS 10),'%',(⎕UCS 10),'% $FNAME: Name of the scalar function iterator we are building,',(⎕UCS 10),'%      e.g., plusBII',(⎕UCS 10),'% $FN: Name of the scalar-scalar function itself,',(⎕UCS 10),'%       e.g., dplus',(⎕UCS 10),'%      This will have types appended to it, to give complete name,',(⎕UCS 10),'%       e.g., dplusBII',(⎕UCS 10),'% $SYSVARIN: string appended to function header for input system vars.',(⎕UCS 10),'% $SYSVARG: string appended to scalar fn kernel call for system vars.',(⎕UCS 10),'% $SYSVAROUT: string appended to function header for output system vars.',(⎕UCS 10),'% $XT: type of x as BIDC.',(⎕UCS 10),'% $YT: type of y as BIDC.',(⎕UCS 10),'% $CT: compute type as BIDC.',(⎕UCS 10),'% $ZT: result type as BIDC.',(⎕UCS 10),'% $XTYPE: type of x as SAC name, e.g., bool, int, double, char',(⎕UCS 10),'% $YTYPE: type of y as SAC name, e.g., bool, int, double, char',(⎕UCS 10),'% $ZTYPE: result type as SAC name, e.g., bool, int, double, char ',(⎕UCS 10 10),'%Fragment dsfctl   0**  bidc bidc bidc .',(⎕UCS 10),'%Fragment dsfctlsx 0**  bidc bidc bidc . ',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE x, $YTYPE[+] y$SYSVARGDECL)',(⎕UCS 10),'{ /* SxA scalar function */',(⎕UCS 10),'  xel = to$CT(x);',(⎕UCS 10),'  z = with {',(⎕UCS 10),'     ( . <= iv <= .) {',(⎕UCS 10),'              yel = to$CT(y[iv]);',(⎕UCS 10),'                    } : $FN$CT$CT$ZT(xel,yel$SYSVARGKER);',(⎕UCS 10),'  } : genarray(shape(y), $OTFILL);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $CT$CT$ZT, 000, ., $CT',(⎕UCS 10 10),'%Fragment dsfctl   *0* bidc bidc bidc .',(⎕UCS 10),'%Fragment dsfctlsy *0* bidc bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[+] x, $YTYPE y$SYSVARGDECL)',(⎕UCS 10),'{ /* AxS scalar function */',(⎕UCS 10),'  z = with { ',(⎕UCS 10),'  ( . <= iv <= .) {',(⎕UCS 10),'              xel = x[iv];',(⎕UCS 10),'   } : $FNAME(xel,y$SYSVARGKER);',(⎕UCS 10),'  } : genarray( shape(x), $OTFILL);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $XT$YT$ZT, 000, ., $CT',(⎕UCS 10 10),'%Fragment dsfctlsl *** bidc bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAMEsl($XTYPE[+] x, $YTYPE[+] y$SYSVARGDECL)',(⎕UCS 10),'{ /* AxA Dyadic scalar fn, shapes unknown, but known to match */',(⎕UCS 10),'  z = with {',(⎕UCS 10),'        ( . <= iv <= .) {',(⎕UCS 10),'              xel = x[iv];',(⎕UCS 10),'           yel = y[iv];',(⎕UCS 10),'   }:      $FNAME(xel,yel$SYSVARGKER);',(⎕UCS 10),'        genarray(shape(y), $OTFILL);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $XT$YT$ZT, 000, ., $CT',(⎕UCS 10 10),'%Fragment dsfctl *** bidc bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[+] x, $YTYPE[+] y$SYSVARGDECL)',(⎕UCS 10),'{ /* AxA Dyadic scalar fn, shapes may or may not match */',(⎕UCS 10),'         sy = shape(y);',(⎕UCS 10),'         z = with {',(⎕UCS 10),'             ( . <= iv <= .) {',(⎕UCS 10),'                      xel = x[iv];',(⎕UCS 10),'                   yel = y[iv];',(⎕UCS 10),'           } : $FNAME(xel,yel$SYSVARGKER);',(⎕UCS 10),'        } : genarray(sy, $OTFILL);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $XT$YT$ZT, 000, ., $CT',(⎕UCS 10),'%Generate , $FN, $XT$YT$ZT, 0**, ., $CT',(⎕UCS 10),'%Generate , $FN, $XT$YT$ZT, *0*, ., $CT',(⎕UCS 10),'%Generate , coma, X$XT$XT, X*1, ., $XT ',(⎕UCS 10),'%Generate , coma, X$YT$YT, X*1, ., $YT ',(⎕UCS 10 10)

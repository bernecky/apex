('% SAC Code fragments for indexed assign',(⎕UCS 10),'% R. Bernecky 2006-01-16',(⎕UCS 10),'% ',(⎕UCS 10),'% All fragments are {QUAD}io=0; callers must subtract {QUAD}io from indices.',(⎕UCS 10 10),'% Also, as of 2005-11-02, support for removing 1''s from the shape',(⎕UCS 10),'% vectors involved in the operation has not been implemented yet.',(⎕UCS 10 10),'% Related to that is FIXME: in X[i;j;k...]<-Y, we need validation',(⎕UCS 10),'% that the array shapes are conformable. ',(⎕UCS 10 10),'% Cases of indexed assign:',(⎕UCS 10),'% 1. x[scalar;;]<- scalar          NB. Leading axis ',(⎕UCS 10),'% 2. x[non-scalar;;]<- scalar      NB. Leading axis',(⎕UCS 10),'% 3. x[scalar;;]<- non-scalar      NB. Leading axis, cell shapes must match',(⎕UCS 10),'% 4. x[non-scalar;;]<- non-scalar  NB. Leading axis,',(⎕UCS 10),'%                                  NB.  frame and cell shapes must match',(⎕UCS 10),'% 5. x[;scalar;;]<- scalar         NB. Non-Leading axis ',(⎕UCS 10),'% 6. x[;non-scalar;;]<- scalar     NB. Non-Leading axis',(⎕UCS 10),'% 7. x[;scalar;;]<- non-scalar     NB. Non-Leading axis, cell shapes must match',(⎕UCS 10),'% 8. x[;non-scalar;;]<- non-scalar NB. Non-Leading axis,',(⎕UCS 10),'%                                  NB.  frame and cell shapes must match',(⎕UCS 10),'% 9. x[;;]<- scalar                NB. All elements change here',(⎕UCS 10),'% 10.x[;;]<- y                     NB. All elements change here',(⎕UCS 10),'%                                  NB.  frame and cell shapes must match',(⎕UCS 10 10),'%Fragment inds *0* bidc bidc bidc . nonscalarX[;;nonscalarI;;]<- scalarY ',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[+] X, $INDICES $YTYPE Yin)',(⎕UCS 10),'{ /* X[;;nonscalarI;;;]<- scalarY */',(⎕UCS 10),' $RAVELS ',(⎕UCS 10),' z = $XTto$ZT(X);',(⎕UCS 10),' $RESH',(⎕UCS 10),' $FORLOOPSPROLOG',(⎕UCS 10),' $BODY',(⎕UCS 10),' $FORLOOPSEPILOG',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , ABC, III, ***, ., I',(⎕UCS 10),'%Generate , ABC, III, *00, ., I',(⎕UCS 10 10),'%Fragment inds *** bidc bidc bidc . nonscalarX[;;nonscalarI;;]<- nonscalarY ',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[+] X, $INDICES $YTYPE[+] Y)',(⎕UCS 10),'{ /* X[;;nonscalarI;;;]<- nonscalarY */',(⎕UCS 10),'  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */',(⎕UCS 10),' $RAVELS ',(⎕UCS 10),' z = $XTto$ZT(X);',(⎕UCS 10),' $FORLOOPSPROLOG',(⎕UCS 10),' $BODY',(⎕UCS 10),' $FORLOOPSEPILOG',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , ABC, III, ***, ., I',(⎕UCS 10),'%Generate , ABC, III, *00, ., I',(⎕UCS 10 10),'%Fragment inds *0* bidc bidc bidc AllChange. nonscalarX[;;;;]<- scalarY ',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[+] X, $INDICES $YTYPE Y)',(⎕UCS 10),'{/*  Case  9. X[;...;]<- scalarY                NB. All elements change here',(⎕UCS 10),'  *  In some interpreters, this is used as a coercion, but I''m not sure',(⎕UCS 10),'  *  how to do that here. For example: BooleanVector[] <- 2 - 2 1 1 2 ',(⎕UCS 10),'  *  tries to keep the type of BooleanVector as Boolean. We don''t even try that here.',(⎕UCS 10),' */',(⎕UCS 10),' z = genarray(shape(X), Y);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , ABC, III, ***, ., I',(⎕UCS 10),'%Generate , ABC, III, *00, ., I',(⎕UCS 10 10),'%Fragment inds *** bidc bidc bidc AllChange. nonscalarX[;;;;]<- nonscalarY ',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[+] X, $INDICES $YTYPE[+] Y)',(⎕UCS 10),'{/*  Case 10. X[;...;]<- nonscalarY      NB. All elements change here',(⎕UCS 10),'  *  In some interpreters, this is used as a coercion, but I''m not sure',(⎕UCS 10),'  *  how to do that here. For example: BooleanVector[] <- 2 - 2 1 1 2 ',(⎕UCS 10),'  *  tries to keep the type of BooleanVector as Boolean. We don''t even try that here.',(⎕UCS 10),'  */',(⎕UCS 10),' if (!all (shape(X) == shape(Y))',(⎕UCS 10),'  /* This should be a fancier check that ignores 1s in the shape vectors... */',(⎕UCS 10 9),'APEXERROR (tochar("length error"));',(⎕UCS 10),' return(Y);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , ABC, III, ***, ., I',(⎕UCS 10),'%Generate , ABC, III, *00, ., I',(⎕UCS 10))

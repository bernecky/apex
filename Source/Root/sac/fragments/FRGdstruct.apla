('% Code fragments for dyadic structural functions',(⎕UCS 10),'%',(⎕UCS 10),'% Robert Bernecky 2005-12-03',(⎕UCS 10),'%',(⎕UCS 10),'%Fragment rotr 000  bid bidc bidc .',(⎕UCS 10),'%Fragment rot1 000  bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE $FNAME($XTYPE x, $YTYPE y)',(⎕UCS 10),'{ /* Scalar rotate scalar, any axis */',(⎕UCS 10),' return(y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment rotr 011  bid bidc bidc .',(⎕UCS 10),'%Fragment rot1 011  bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE x, $YTYPE[.] y)',(⎕UCS 10),'{ /* Scalar rotate first/last axis vector */',(⎕UCS 10),' ix = toi(x);',(⎕UCS 10),' rows = shape(y)[0];',(⎕UCS 10),' k = VectorRotateAmount(ix,rows); /* Normalize rotate count */',(⎕UCS 10),' z = drop( [k], y) ++ take( [k], y);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , VECTORROTATEAMOUNT, III, 000, ., I ',(⎕UCS 10 10),'%Fragment rot1 0**  bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE x, $YTYPE[+] y)',(⎕UCS 10),'{ /* Scalar rotate first axis non-scalar */',(⎕UCS 10),' ix = toi(x);',(⎕UCS 10),' rows = shape(y)[0];',(⎕UCS 10),' cellshape = drop([1], shape(y));',(⎕UCS 10),' defcell = genarray(cellshape, $OTFILL);',(⎕UCS 10),' k = VectorRotateAmount(ix,rows); /* Normalize rotate count */',(⎕UCS 10),' z = drop( [k], y) ++ take( [k], y);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , VECTORROTATEAMOUNT, III, 000, ., I ',(⎕UCS 10),'   ',(⎕UCS 10),'%Fragment rotr 0**  bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE x, $YTYPE[+] y)',(⎕UCS 10),'{ /* Scalar rotate matrix last axis */',(⎕UCS 10),' cols = shape(y)[[dim(y)-1]];',(⎕UCS 10),' ix = toi(x);',(⎕UCS 10),' k = VectorRotateAmount(ix,cols); /* Normalize rotate count */',(⎕UCS 10),' y2d = reshape([prod(drop([-1],shape(y))), cols], y);',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= [i,j] <= .)',(⎕UCS 10),'         { idx = (j+k) < cols ? (j+k) : (j+k) - cols;',(⎕UCS 10),'         } : y2d[[ i, idx]];',(⎕UCS 10),'        } : genarray(shape(y2d), $OTFILL);',(⎕UCS 10),' z = reshape(shape(y),z);       ',(⎕UCS 10),' return (z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , VECTORROTATEAMOUNT, III, 000, ., I ',(⎕UCS 10 10),'%Fragment rotr ***  bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE [+] x, $YTYPE[+] y)',(⎕UCS 10),'{ /* Non-scalar rotate matrix last axis */',(⎕UCS 10),'/* FIXME - needs validation of left rank vs right rank,',(⎕UCS 10),' * etc. rbe 2004-09-18 ',(⎕UCS 10),' */',(⎕UCS 10),' cols = shape(y)[[dim(y)-1]];',(⎕UCS 10),' cell= genarray([cols],$OTFILL);',(⎕UCS 10),' ix = toi(x);',(⎕UCS 10),' k = VectorRotateAmount(ix,cols); /* Normalize rotate count */',(⎕UCS 10),' y2d = reshape([prod(drop([-1],shape(y))), cols], y);',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= [i,j] <= .)',(⎕UCS 10),'         { idx = (j+k[[i]]) < cols ? (j+k[[i]]) : (j+k[[i]]) - cols;',(⎕UCS 10),'         } : y2d[[ i, idx]];',(⎕UCS 10),'        } : genarray(shape(y2d), $OTFILL);',(⎕UCS 10),' z = reshape(shape(y),z);       ',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , VECTORROTATEAMOUNT, III, *0*, ., I ',(⎕UCS 10 10),'%Fragment tran 100  bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE $FNAME($XTYPE[0] x,  $YTYPE y)',(⎕UCS 10),'{ /* Dyadic transpose of scalar */',(⎕UCS 10),'  return(y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment tran 111  bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE $FNAME($XTYPE[1] x, $YTYPE y)',(⎕UCS 10),'/* Left argument must be index origin */',(⎕UCS 10),'/* FIXME */',(⎕UCS 10),'{ /* dyadic tranpose of vector */',(⎕UCS 10),' return(y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment tran 122 bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[2] x, $YTYPE[.,.] y)',(⎕UCS 10),'{ /* Vector (no dups!) transpose rank-2 matrix */',(⎕UCS 10),' ix=toi(x);',(⎕UCS 10),' if ((0 == x[[0]]) && (1 == x[[1]]))',(⎕UCS 10),'        z = y;',(⎕UCS 10),' else if ((1 == x[[0]]) && (0 == x[[1]]))',(⎕UCS 10),'        z = TRANSPOSE(y);',(⎕UCS 10),' else ',(⎕UCS 10),'        z= (reshape(shape(y)/0,y); /* Domain error */',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate ,   TRANSPOSE, X$YT$YT, X**, ., $YT',(⎕UCS 10 10),'%Fragment tran 1** bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[*] $FNAME($XTYPE[.] x, $YTYPE[*] y, int QUADio)',(⎕UCS 10),'{ /* General case of dyadic transpose  */',(⎕UCS 10),'/* Someone has to validate x here! FIXME */',(⎕UCS 10),' nx = toi(x) - QUADio;',(⎕UCS 10),' shpy = shape(y);',(⎕UCS 10),' wts = drop([1],shpy)++[1];',(⎕UCS 10),' rankz = (take([-1], nx))[0];',(⎕UCS 10 10),' /* times scan the hard way */',(⎕UCS 10),' for(i=shape(shpy)[0] - 2; i>=0; i--) { ',(⎕UCS 10),'  wts[i] = wts[i+1]*wts[i];',(⎕UCS 10),'  rankz = max(rankz,nx[i]);',(⎕UCS 10),' }',(⎕UCS 10),' rankz = rankz + 1;',(⎕UCS 10 10),' shpz = genarray([rankz], 1 + prod(shape(y)));  /* all overwritten */',(⎕UCS 10),' cwts = shpz * 0;',(⎕UCS 10 10),' for(i=dim(y)-1; i>=0; i--){',(⎕UCS 10),'   j = nx[i];',(⎕UCS 10),'   shpz[j] = min( shpy[i], shpz[j]);',(⎕UCS 10),'   cwts[j] = cwts[j]+wts[i];',(⎕UCS 10),' }',(⎕UCS 10 10),' cp = CartProdPlus(cwts, shpz);',(⎕UCS 10),' ry = comaX$YT$ZT(y);',(⎕UCS 10),' z = with {',(⎕UCS 10),'   (. <= iv <= .)',(⎕UCS 10),'     : ry[[cp[iv]]];',(⎕UCS 10),'   } : genarray(shape(cp), $OTFILL);',(⎕UCS 10),' z = reshape(shpz,z);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10 10),'inline int[.] CartProdPlus(int[.] weights, int[.] lengths)',(⎕UCS 10),'{ /* Cartesian product, sum-like, for weights+each iota each lengths */',(⎕UCS 10),'  /* Weight and length vectors must be same length, and non-empty */',(⎕UCS 10),' s = shape(weights)[[0]];',(⎕UCS 10),' z = (0 == s) ?  s :  weights[[0]] * iotaXII(lengths[[0]],0);',(⎕UCS 10),'  for(i=1; i<s; i++){',(⎕UCS 10),'   t = weights[[i]] * iotaXII(lengths[[i]],0);',(⎕UCS 10),'   z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : z[iv] + t;',(⎕UCS 10),'        } : genarray(shape(z), t);',(⎕UCS 10),'   z = comaXII(z);',(⎕UCS 10),'  }',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , iota, XII, X01, ., I',(⎕UCS 10),'%Generate , coma, X$YT$YT, X*1, ., $CT ',(⎕UCS 10),'%Generate , coma, XII, X*1, ., I ',(⎕UCS 10))

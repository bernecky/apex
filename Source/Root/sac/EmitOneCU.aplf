 r←fldr EmitOneCU asts;fnmexe;fnmso
 ;ismn;astsmod;astsm;m;ismod;junk
 ⍝ Emit compiled APL code for one Compilation Unit(CU), asts
 ⍝ r is genned filenames
 ⎕←Trace(fts ⎕TS),': Starting code gen for: ',fldr
 InitializeFns   ⍝ and cal
 asts←SACNames¨asts ⍝ Map names to avoid SAC keyword conflicts, etc
 ismn←isDfnMain¨asts ⍝ Mark main() in asts
 fnmexe←fnmso←''
 (astsmod m)←fldr SACModuleRenameMain asts
 ismod←0∊ismn
 :If ismod ⍝ Non-main() present, gen .so
     txt←((E fldr),E ismod)GenCode astsmod
     fnmso←txt WriteCode(E fldr),E ismod
     junk←((E fldr),E ismod)InvokeCompiler fnmso
 :EndIf
 :If 1∊ismn ⍝ if main() is present, gen .exe
     ismod←0
     :If 1≠≢ismn ⍝ Naked main()?
         txt←(PathFileName fldr)GenTestCaller m ⍝ non-naked
         txt2←((E fldr),E ismod)GenCode ismn/asts ⍝ naked
     :Else
         txt←((E fldr),E ismod)GenCode ismn/asts ⍝ naked
     :EndIf
     fnmexe←txt WriteCode(E fldr),E ismod
     junk←((E fldr),E ismod)InvokeCompiler fnmexe
 :EndIf
 GenAPLCoverFn fnmexe ⍝ for calling module

 r←(E fnmexe),(E fnmso)

 r←(×≢¨r)/r
 ⎕←Trace(fts ⎕TS),': Code gen done for: ',fldr

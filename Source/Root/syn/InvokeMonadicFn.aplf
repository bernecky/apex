 InvokeMonadicFn;astr;i;j;cls;row;nms;stke;subfn
 ⍝ Invoke stacked fn monadically, maybe
 :If 1 isStrand stk ⍝ If rarg is strand, destrand it
     nms←')'StrandItems 2
     ⍝ What follows is inadequate. It works for defined fns,
     ⍝ but fails for primitives. E.g., this expression fails:
     ⍝ te_img TestZhang⍤2⊢ (k1 b1 k2 b2 fc b)
     subfn←D Stkvalue⌷,1 StackCopy stk ⍝ subfn1 or ⊢
     ⍝ Sheep vs goats. Skip destranding if subfn is primitive.
     :If isnum subfn
         subfn←D ast[subfn;dfnname]
         (ast astr stk)←nms BuildStrandAssigns(ast 0 'i'stk subfn)
         stke←StackPop 3+⍴nms ⍝ Pop nms, ( ) and the fn
         stke[0;Stkstate]←Stx ⍝ No longer a strand
         stk←stk StackPush stke[2 0;] ⍝ Push (fn dummyarg)
         ast←ast append2Ast astr
         InvokeMonadicFn ⍝ Recurse to emit vanilla fncall
     :Else ⍝ ⊢ strand
         ('Verb ',subfn,' does not support strands')assert subfn∊'⊢,⊣'
         j←StackPop 1 ⍝ Pop the verb; it is an identity
         state←StS ⍝ State is back to strand
     :EndIf
 :Else
     :If (D stk[stkp-2;Stktokcl])∊clsadverb
         InvokeMonadicAdverb
     :ElseIf (D stk[stkp-2;Stktokcl])∊clsconj
         InvokeMonadicConjunction
     :Else
    ⍝ Bog-standard function: foo ⍵
         i←StackPop 2 ⍝Pop two stack elements
         astr←,astNewRows 1        ⍝ Build new ast entry
         row←≢ast
         astr[asttarget]←E row
         astr[astfn]←i[0;Stkvalue]
         astr[astrarg]←i[1;Stkvalue]
         astr[astclass]←astclassVARB
         ast←ast append2Ast astr
         state←Stx
         stk←stk StackPush(E state),(E row),E clsexpn
     :EndIf
 :EndIf

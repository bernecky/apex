⌷wif←
<array><shape>9</shape>
<array><shape>74</shape><string>z{&lt;-}Singular y;j@ We expect a Boolean scalar yj{&lt;-}1{divide}yz{&lt;-}j=1</string></array>
<array><shape>122</shape><string>r{&lt;-}x divrk10 y@r{&lt;-}x{divide}{transpose}({reverse}{rho}x){rho}y @ x{divide}rank 1 0 yr{&lt;-}x{divide}{jotdieresis}1 0 y</string></array>
<array><shape>126</shape><string>z{&lt;-}b dmdr a;v;m;n@ Dyadic matrix divide using Householder@ triangularization.b{&lt;-}(2{take}({rho}b),1){rho}bz{&lt;-}b lsr a</string></array>
<array><shape>1755</shape><string>z{&lt;-}b lsr a;i;j;sigma;alfa;aii;pp;pi;np;factor;eps;mv;m;n;u;ta;tb;tc;td;p;sink;t1;tc1;tc2;td1;td2;newta;newtb;tmp@ M.A. Jenkins.@ IBM Tech Report 320-2989@ Modified for formatting and@ to avoid use of globals, glueing.@ Modified further to run a wee bit faster 1996-03-20 /rbe@ Householder triangularization@ of m{times}n matrix for linear@ systems and least squares.@ Does row, column interchanges,@ scales columns near unity.@ assumes ({rho}{rho}a)=({rho}{rho}b)=2@ Modified 1995-05-22 to be origin 0/rbep{&lt;-}1{drop}{rho}bm{&lt;-}1{take}{rho}an{&lt;-}{neg}1{take}{rho}app{&lt;-}0.0+{iota}n @ KLUDGE to avoid typeproblems in dfafactor{&lt;-}{divide}{max}{slashbar}|a divrk10 mv{&lt;-}{max}/|a @ FUNCTION RANK!a{&lt;-}a mpyrk11 factor @ Function rank!np{&lt;-}n+peps{&lt;-}(16*{neg}13){times}{max}/mv:for i :in {iota}nmv{&lt;-}{max}{slashbar}|(i,i){drop}asink{&lt;-}Singular eps{&lt;=}{max}/mvpi{&lt;-}i+mv{iota}{max}/mvtmp{&lt;-}pp[i]pp[i]{&lt;-}pp[pi]pp[pi]{&lt;-}tmptmp{&lt;-}a[;i]a[;i]{&lt;-}a[;pi]a[;pi]{&lt;-}tmppi{&lt;-}i+(|i{drop}a[;i]){iota}{max}/|i{drop}a[;i]tmp{&lt;-}a[i;]a[i;]{&lt;-}a[pi;]a[pi;]{&lt;-}tmptmp{&lt;-}b[i;]b[i;]{&lt;-}b[pi;]b[pi;]{&lt;-}tmpsigma{&lt;-}+/(i{drop}a[;i])*2aii{&lt;-}a[i;i]alfa{&lt;-}(1-2{times}0{&lt;=}aii){times}sigma*0.5tmp{&lt;-}i{drop}a[;i]tmp[0]{&lt;-}tmp[0]-alfanewta{&lt;-}tmp+.{times}(i+0 1){drop}anewtb{&lt;-}tmp+.{times}(i,0){drop}btb{&lt;-}{divide}sigma-aii{times}alfatc1{&lt;-}tmp{jot}.{times}tb{times}newtatc2{&lt;-}tmp{jot}.{times}tb{times}newtbtd1{&lt;-}((i+0 1){drop}a)-tc1td2{&lt;-}((i,0){drop}b)-tc2a[i{drop}{iota}m;(i+1){drop}{iota}n]{&lt;-}td1b[i{drop}{iota}m;]{&lt;-}td2a[i;i]{&lt;-}alfa:endfor@z{&lt;-}(n,p){rho}0.0@:for i :in {reverse}{iota}nt1{&lt;-}b[i;]-a[i;]+.{times}zz[i;]{&lt;-}t1{divide}a[i;i]:endfor@z[pp;]{&lt;-}zz{&lt;-}z mpyrk10 factor @ Function rank!</string></array>
<array><shape>134</shape><string>r{&lt;-}main;#io;#rl;n;#pp;#pw;#ct#io{&lt;-}0#pp{&lt;-}16#pw{&lt;-}80n{&lt;-}300#rl{&lt;-}16807#ct{&lt;-}1E{neg}13#{&lt;-}r{&lt;-}mdivr n#{&lt;-}r{&lt;-}1+r=n</string></array>
<array><shape>259</shape><string>r{&lt;-}mdivr n;x@ Mdivr goes beyond mdiv2 in these ways:@   Better id matrix gen in mmd3.@   Floating point id matrix in mmd3.@   Use of fn rank@   Replacement of n{drop}{iota}m by ???@x{&lt;-}((2{rho}n){rho}(n+1){take}1.5-.5) @ Id nr{&lt;-}mmdr xr{&lt;-}+/,|r</string></array>
<array><shape>167</shape><string>z{&lt;-}mmdr a;sz;id@Computes inverse by calling dmd with an@ identity matrix as left argument.sz{&lt;-}({rho}a)[0]id{&lt;-}(2{rho}sz){rho}(1+sz){take}1.0E0z{&lt;-}id dmdr a</string></array>
<array><shape>98</shape><string>r{&lt;-}x mpyrk10 y@r{&lt;-}x{times}{transpose}({reverse}{rho}x){rho}yr{&lt;-}x{times}{jotdieresis}1 0 y</string></array>
<array><shape>79</shape><string>r{&lt;-}x mpyrk11 y@r{&lt;-}x{times}({rho}x){rho}yr{&lt;-}x{times}{jotdieresis} 1 1 y</string></array></array>

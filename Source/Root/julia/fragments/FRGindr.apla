'% Code fragments for indexed ref',(⎕UCS 10),'% 2005-10-17',(⎕UCS 10),'% Rewritten for SAC. rbe',(⎕UCS 10),'% And again, 2005-10-24 /rbe',(⎕UCS 10),'% And again, 2006-08-11 /rbe, after discovering how REALLY slow (1000X!) indrfr calls are.',(⎕UCS 10),'% $XTYPE: The type of lhs, e.g., double_real',(⎕UCS 10),'% $ZTYPE: The type of result, e.g., int',(⎕UCS 10),'% $OTFILL: The lhs fill element. Not used by indr; needed for SAC with-loop.',(⎕UCS 10 10),'% The idea here is an index reference of the form:',(⎕UCS 10),'%   X[i;j;k;l;m]        where index arrays (i,j,k,l,m...) may or',(⎕UCS 10),'%                       not exist (E.g., X[i;k]),',(⎕UCS 10),'% can be written as compositions of indexing functions:',(⎕UCS 10),'%',(⎕UCS 10),'% indrfr(fr,i,X)        Perform XX[i;...], where XX is the set of cells',(⎕UCS 10),'%                       formed by splitting XX on "Frame Rank" fr.',(⎕UCS 10),'%                       fr elements are numbered by the rank of the resulting',(⎕UCS 10),'%                       frame, e.g.,:',(⎕UCS 10),'%       X[i;j;k;l;m...]',(⎕UCS 10),'%         0 1 2 3 4...',(⎕UCS 10),'% Result shape is ((i drop shape(X)),(shape(i)),(i+1)drop shape(x)).',(⎕UCS 10),'%',(⎕UCS 10),'% The key is to perform index operations from right to left, so that ',(⎕UCS 10),'% axes inserted or deleted due to index array shapes. Hence, ',(⎕UCS 10),'%       z = X[i;;k;;m] ',(⎕UCS 10),'%             0  2  4  fr values',(⎕UCS 10),'% can be written as:',(⎕UCS 10),'%       TMP1 = indrfr(4,m,X);',(⎕UCS 10),'%       TMP2 = indrfr(2,k,TMP1);',(⎕UCS 10),'%       z    = indrfr(0,i,TMP2);',(⎕UCS 10),'% or:   z    = indrfr(0,i,indrfr(2,k,indrfr(4,m,X)));',(⎕UCS 10),'% with suitable coercions and QUADio subtractions for i,j,m.',(⎕UCS 10 10),'% rank indicators for Z<- X[i;j;k] are  XxZijk. ',(⎕UCS 10),'% Elided axes get x, e.g.:  X[;k2;] is  XxZx2x',(⎕UCS 10 10),'%Fragment indr *0*           nonscalarX[scalarI;;] ',(⎕UCS 10),'%              XIZ after fns2 gets made ',(⎕UCS 10),'inline $ZTYPE[*] indr($XTYPE[+] X, int I)',(⎕UCS 10),'{ /* X[scalarI;;;] */',(⎕UCS 10),'  /* Used only in conjunction with other indexing, e.g.,',(⎕UCS 10),'   * X[scalarI;;j;]',(⎕UCS 10),'   */',(⎕UCS 10),' z = X[[I]];',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , ABC,    III,           *00, ., I ',(⎕UCS 10),'%Generate , indrfr, $XTI$XT, ****, ., I',(⎕UCS 10),'%Generate , indrfr, $XTI$XT, *0*0, ., I',(⎕UCS 10 10),'%Fragment indr *x*           nonscalarX[;;;] ',(⎕UCS 10),'%              XIZ after fns2 gets made ',(⎕UCS 10),'inline $ZTYPE[*] indr($XTYPE[+] X)',(⎕UCS 10),'{ /* X[;;;] */',(⎕UCS 10),'  /* Used only in conjunction with other indexing, e.g.,',(⎕UCS 10),'   * X[;;j;]',(⎕UCS 10),'   */',(⎕UCS 10),' return(X);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , ABC,    III,           *00, ., I ',(⎕UCS 10),'%Generate , indrfr, $XTI$XT, ****, ., I',(⎕UCS 10),'%Generate , indrfr, $XTI$XT, *0*0, ., I',(⎕UCS 10 10),'%Fragment indr ***           nonscalarX[nonscalarI;;] ',(⎕UCS 10),'inline $ZTYPE[*] indr($XTYPE[+] X, int[+] I)',(⎕UCS 10),'{ /* X[nonscalarI;;;] */',(⎕UCS 10),' defcell = genarray(drop([1],shape(X)),$OTFILL);',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : X[[I[iv]]];',(⎕UCS 10),'        } : genarray(shape(I), defcell);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , ABC, III, ***, ., I ',(⎕UCS 10),'%Generate , ABC, III, *00, ., I ',(⎕UCS 10),'%Generate , indrfr, $XTI$XT, ****, ., I',(⎕UCS 10),'%Generate , indrfr, $XTI$XT, *0*0, ., I',(⎕UCS 10 10),'%Fragment indrfr *0*0           nonscalarX[;;scalarI;;] ',(⎕UCS 10),'%                XIZ after fns2 gets made ',(⎕UCS 10),'inline $ZTYPE[*] indrfr(int fr, $XTYPE[+] X, int I)',(⎕UCS 10),'{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */',(⎕UCS 10),'  /* This is actually "I from"fr X" */',(⎕UCS 10),' frameshape = take([fr], shape(X)); ',(⎕UCS 10),' cellshape = drop([1+fr],shape(X));',(⎕UCS 10),' cell = genarray(cellshape,$OTFILL);',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : sel( I, X[iv]);',(⎕UCS 10),'        } : genarray(frameshape, cell);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , ABC, III, ***, ., I ',(⎕UCS 10 10),'%Fragment indrfr ****           nonscalarX[;;nonscalarI;;] ',(⎕UCS 10),'%                XIZ after fns2 gets made ',(⎕UCS 10),'inline $ZTYPE[*] indrfr(int fr, $XTYPE[+] X, int[+] I)',(⎕UCS 10),'{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */',(⎕UCS 10),'  /* This is actually "I from"fr X" */',(⎕UCS 10),'  frameshape = take([fr], shape(X));',(⎕UCS 10),'  cellshape =  shape(I)++drop([fr+1], shape(X));',(⎕UCS 10),'  cell = genarray(cellshape, $OTFILL);',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : indrfr0(X[iv], I);',(⎕UCS 10),'        } : genarray(frameshape, cell);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10 10),'inline $ZTYPE[*] indrfr0($XTYPE[+] X, int[+] I)',(⎕UCS 10),'{ /* X[I;;;] or    I from X */',(⎕UCS 10),'  cellshape =  drop([1], shape(X));',(⎕UCS 10),'  cell = genarray(cellshape, $OTFILL);',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : sel( I[iv], X);',(⎕UCS 10),'        } : genarray(shape(I), cell);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , ABC, III, ***, ., I ',(⎕UCS 10),'%Generate , ABC, III, *00, ., I ',(⎕UCS 10 10)

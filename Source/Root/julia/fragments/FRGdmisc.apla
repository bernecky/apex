('% Dyadic Miscellaneous function code fragments',(⎕UCS 10),'% Handles matrix divide, deal, base value, ',(⎕UCS 10),'% representation, dyadic thorn, match',(⎕UCS 10),'%',(⎕UCS 10),'% Robert Bernecky 2006-02-10',(⎕UCS 10),'% SAC code generator',(⎕UCS 10),'%',(⎕UCS 10),'% --------------- Base value fragments ----------------------------',(⎕UCS 10),'%Fragment dtak 000  bid bid bid .',(⎕UCS 10),'% There has to be a',(⎕UCS 10),'inline $ZTYPE $FNAME($XTYPE x, $YTYPE y)',(⎕UCS 10),'{ /* Scalar basevalue Scalar */',(⎕UCS 10),' return(y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment dtak 010 bid bid bid .',(⎕UCS 10),'inline $ZTYPE $FNAME($XTYPE x, $YTYPE[.] y)',(⎕UCS 10),'{ /* Scalar basevalue vector */',(⎕UCS 10),' ycols=shape(y);',(⎕UCS 10),' weights = genarray(ycols, to$CT(1));',(⎕UCS 10),' for (i=ycols[[0]]-2; i>=0; i--)',(⎕UCS 10),'        weights[[i]] = weights[[i+1]]*to$CT(x);',(⎕UCS 10),' /* Now, we just do weights +.* y */',(⎕UCS 10),' z = with {',(⎕UCS 10),'        ([0] <= iv < ycols)',(⎕UCS 10),'                : weights[iv] * to$CT(y[iv]);',(⎕UCS 10),'        } : fold(+, $OTFILL);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment dtak 0** bid bid bid .',(⎕UCS 10),'inline $ZTYPE[*] $FNAME($XTYPE x, $YTYPE[+] y)',(⎕UCS 10),'{ /* Scalar basevalue rank>1 */',(⎕UCS 10),' yt = TRANSPOSE(y); /* Dumb, but easy */',(⎕UCS 10),' frameshape = drop([-1],shape(yt));',(⎕UCS 10),' z = with { ',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FNAME(x, yt[iv]);',(⎕UCS 10),'        } : genarray(frameshape, $OTFILL);',(⎕UCS 10),' return(TRANSPOSE(z));',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $XT$YT$ZT, 010, ., $CT',(⎕UCS 10),'%Generate ,   TRANSPOSE, X$YT$YT, X**, ., $YT',(⎕UCS 10 10),'%Fragment dtak 110 bid bid bid .',(⎕UCS 10),'inline $ZTYPE $FNAME($XTYPE[.] x, $YTYPE[.] y)',(⎕UCS 10),'{ /* Vector basevalue vector */',(⎕UCS 10),'  /* 3 cases - all give 22200:',(⎕UCS 10),'   *    10 10 10 basevalue 200 200 200 ',(⎕UCS 10),'   *    10 10 10 basevalue 200',(⎕UCS 10),'   *    (,10) basevalue 200 200 200 ',(⎕UCS 10),'   */',(⎕UCS 10),' ycols = (shape(y))[[0]];',(⎕UCS 10),' if (1 == ycols){       /* Maybe extend y */',(⎕UCS 10),'        ycols = shape(x)[[0]];',(⎕UCS 10),'        y = genarray([ycols],y[[0]]);',(⎕UCS 10),' }',(⎕UCS 10),' if (1 == shape(x)[[0]]){       /* Maybe extend x */',(⎕UCS 10),'        x = genarray([ycols], x[[0]]);',(⎕UCS 10),' }',(⎕UCS 10),' weights = genarray([ycols], to$CT(1));',(⎕UCS 10),' for (i=ycols-2; i>=0; i--)',(⎕UCS 10),'        weights[[i]]= weights[[i+1]]*to$CT(x[[i+1]]);',(⎕UCS 10),' z = with { ',(⎕UCS 10),'        ([0] <= iv < [ycols])',(⎕UCS 10),'                : weights[iv] * to$CT(y[iv]);',(⎕UCS 10),'        } : fold(+, $OTFILL);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment dtak 1** bid bid bid .',(⎕UCS 10),'inline $ZTYPE[*] $FNAME($XTYPE[.] x, $YTYPE[+] y)',(⎕UCS 10),'{ /* Vector basevalue rank>1 */',(⎕UCS 10),' yt = TRANSPOSE(y); /* Dumb, but easy */',(⎕UCS 10),' frameshape = drop([-1],shape(yt));',(⎕UCS 10),' z = with { ',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FNAME(x, yt[iv]);',(⎕UCS 10),'        } : genarray(frameshape, $OTFILL); ',(⎕UCS 10),' return(TRANSPOSE(z));',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $XT$YT$ZT, 110, ., $CT',(⎕UCS 10),'%Generate ,   TRANSPOSE, X$YT$YT, X**, ., $YT',(⎕UCS 10 10),'% --------------- Represent fragments ----------------------------',(⎕UCS 10),'% These cases of Boolean result are detected by dfa; code',(⎕UCS 10),'% generator picks then up by result type(ctl FindType fns).',(⎕UCS 10 10),'%Fragment utak 101 bid bid b .',(⎕UCS 10),'inline bool[.] $FNAME($XTYPE[.] x, $YTYPE y)',(⎕UCS 10),'{ /* Vector-of-twos represent scalar */',(⎕UCS 10),'/*   ',(⎕UCS 10),'% This could be any mix of powers-of-two with a bit of work.',(⎕UCS 10),'% The guts of represent on Booleans',(⎕UCS 10),'*/',(⎕UCS 10),'   cell = 0;',(⎕UCS 10),'   k = shape(x)[[0]]-1;',(⎕UCS 10),'   z = with { ',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : BitAND(1,BitShiftRight(k-iv[0],toi(y)));',(⎕UCS 10),'        } : genarray(shape(x), cell);',(⎕UCS 10),'  return(toB(z));',(⎕UCS 10),'}               ',(⎕UCS 10 10),'%Fragment utak 1**  bid bid b .',(⎕UCS 10),'inline bool[+] $FNAME($XTYPE[.] x, $YTYPE[+] y)',(⎕UCS 10),'{ /* Vector-of-twos represent non-scalar */',(⎕UCS 10),'/*   ',(⎕UCS 10),'   % This could be any mix of powers-of-two with a bit of work.',(⎕UCS 10),'   % The guts of represent on Booleans',(⎕UCS 10),'*/',(⎕UCS 10),' cell = genarray(shape(x),false);',(⎕UCS 10),' yt = TRANSPOSE(y);',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FNAME(x, yt[iv]);',(⎕UCS 10),'        } : genarray(shape(yt), cell);',(⎕UCS 10),' return(TRANSPOSE(z));',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $CT$CT$ZT, 101, ., $CT',(⎕UCS 10),'%Generate ,   TRANSPOSE, X$YT$YT, X**, ., $YT',(⎕UCS 10),'%Generate ,   TRANSPOSE, X$ZT$ZT, X**, ., $ZT',(⎕UCS 10 10 10),'%Fragment utak 101 bi bi bi .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE[.] x, $YTYPE y)',(⎕UCS 10),'{ /* Non-floating Vector represent scalar */',(⎕UCS 10),'  /* Taken from ISO Extended APL standard Draft N93.03, page 155 */',(⎕UCS 10),'  wts = genarray(shape(x),to$CT(1));',(⎕UCS 10),'  for(i=shape(x)[[0]]-2; i>=0; i--)',(⎕UCS 10),'        wts[[i]] = wts[[i+1]] * to$CT(x[[i+1]]);',(⎕UCS 10),'  z = genarray(shape(x),$OTFILL);',(⎕UCS 10),'  cy = to$CT(y);',(⎕UCS 10),'  for(i=shape(x)[[0]]-1; i>=0; i--){',(⎕UCS 10),'        z[[i]] = mod$CT$CT$ZT(to$CT(x[[i]]),cy/wts[[i]]);',(⎕UCS 10),'        /* Must use fuzz-less call to mod!! */',(⎕UCS 10),'        /* Represent is NOT fuzzy (SAPL Ref Man p.6-47, 1991 */',(⎕UCS 10),'        cy = cy - z[[i]] * wts[[i]];',(⎕UCS 10),'  }',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , mod, $CT$CT$ZT, 000, ., $CT',(⎕UCS 10 10 10),'%Fragment utak 101 bid bid bid .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE[.] x, $YTYPE y)',(⎕UCS 10),'{ /* Floating Vector represent scalar */',(⎕UCS 10),'  /* Taken from ISO Extended APL standard Draft N93.03, page 155 */',(⎕UCS 10),'  wts = genarray(shape(x),to$CT(1));',(⎕UCS 10),'  for(i=shape(x)[[0]]-2; i>=0; i--)',(⎕UCS 10),'        wts[[i]] = wts[[i+1]] * to$CT(x[[i+1]]);',(⎕UCS 10),'  z = genarray(shape(x),$OTFILL);',(⎕UCS 10),'  cy = to$CT(y);',(⎕UCS 10),'  for(i=shape(x)[[0]]-1; i>=0; i--){',(⎕UCS 10),'        z[[i]] = mod$CT$CT$ZT(to$CT(x[[i]]),cy/wts[[i]],0.0);',(⎕UCS 10),'        /* Must use zero-fuzz call to mod!! */',(⎕UCS 10),'        /* Represent is NOT fuzzy (SAPL Ref Man p.6-47, 1991 */',(⎕UCS 10),'        cy = cy - z[[i]] * wts[[i]];',(⎕UCS 10),'  }',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , mod, $CT$CT$ZT, 000, ., $CT',(⎕UCS 10 10),'%Fragment utak 1** bid  bid bid .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[.] x, $YTYPE[+] y)',(⎕UCS 10),'{ /* Vector represent non-scalar */',(⎕UCS 10),' yt = TRANSPOSE(y);',(⎕UCS 10),' cell = genarray(shape(x),$OTFILL);',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FNAME(x,yt[iv]);',(⎕UCS 10),'        } : genarray(shape(yt), cell);',(⎕UCS 10),' return(TRANSPOSE(z));',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $XT$YT$ZT, 101, ., $CT',(⎕UCS 10),'%Generate ,   TRANSPOSE, X$YT$YT, X**, ., $YT',(⎕UCS 10),'%Generate ,   TRANSPOSE, X$ZT$ZT, X**, ., $ZT',(⎕UCS 10 10),'% --------------- MATCH fragments ----------------------------',(⎕UCS 10 10),'%Fragment same 000 bidc bidc b .',(⎕UCS 10),'inline $ZTYPE $FNAME($XTYPE x, $YTYPE y$SYSVARGDECL)',(⎕UCS 10),'{ /* Scalar match scalar */',(⎕UCS 10),'  z = eq$CT$CTB(to$CT(x), to$CT(y)$SYSVARGKER);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , APEXFUZZEQ, $XT$YTB, 000, ., D',(⎕UCS 10),'%Generate , eq, $CT$CTB, 000, ., $CT',(⎕UCS 10 10),'%Fragment same 0*0  bidc bidc b .',(⎕UCS 10),'inline $ZTYPE $FNAME($XTYPE x, $YTYPE[+] y$SYSVARGDECL)',(⎕UCS 10),'{ /* Scalar match non-scalar */',(⎕UCS 10),' return(false);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment same *00  bidc bidc b .',(⎕UCS 10),'inline $ZTYPE $FNAME($XTYPE[+] x, $YTYPE y$SYSVARGDECL)',(⎕UCS 10),'{ /* Non-scalar match scalar */',(⎕UCS 10),' return(false);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment same **0 bidc bidc b .',(⎕UCS 10),'inline $ZTYPE $FNAME($XTYPE[+] x, $YTYPE[+] y$SYSVARGDECL)',(⎕UCS 10),'{ /* Non-scalar match non-scalar */',(⎕UCS 10),'   z = (( _dim_A_( x) == _dim_A_( y))          &&',(⎕UCS 10),'       ( all( _shape_A_( x) == _shape_A_( y))) &&',(⎕UCS 10),'       ( all( eq$CT$CTB(to$CT( x),  to$CT( y)$SYSVARGKER)))); ',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , APEXFUZZEQ, $XT$YTB, 000, ., D',(⎕UCS 10),'%Generate , eq, $CT$CTB, ***, ., $CT',(⎕UCS 10 10))

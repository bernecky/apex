('% Code fragments for replicate and expand',(⎕UCS 10),'% Rewritten for SAC 2004-08-02 rbe',(⎕UCS 10 10),'% Fragment header:',(⎕UCS 10),'%  jsymbol xyz-ranks lefttypes righttypes resulttypes specialcasename',(⎕UCS 10),'%  1       2         3         4          5           6 ',(⎕UCS 10 10),'%Fragment sl  001 bid bidc bidc ONEEL',(⎕UCS 10),'%Fragment sl1 001 bid bidc bidc ONEEL',(⎕UCS 10),'%Fragment sl  001 bid bidc bidc .',(⎕UCS 10),'%Fragment sl1 001 bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE x, $YTYPE y)',(⎕UCS 10),'{ /* Scalar replicate scalar */',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : y;',(⎕UCS 10),'        } : genarray([toi(x)]);',(⎕UCS 10),' return(z);',(⎕UCS 10),'} ',(⎕UCS 10 10),'%Fragment sl  101 b bidc bidc .',(⎕UCS 10),'%Fragment sl1 101 b bidc bidc .',(⎕UCS 10),'%Fragment sl  101 bid bidc bidc .',(⎕UCS 10),'%Fragment sl1 101 bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE[.] x, $YTYPE y)',(⎕UCS 10),'{ /* Vector compress/replicate scalar */',(⎕UCS 10),' shpz = sum(toi(x));',(⎕UCS 10),' z = genarray([shpz],y);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment sl  111 b bidc bidc . ',(⎕UCS 10),'%Fragment sl1 111 b bidc bidc .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE[.] x, $YTYPE[.] y)',(⎕UCS 10),'{/* Boolean vector compress vector */',(⎕UCS 10),'  zxrho = sum(toi(x));',(⎕UCS 10),'  z = genarray([zxrho], $OTFILL);',(⎕UCS 10),'  zi = 0;',(⎕UCS 10),'  for(i=0; i<shape(x)[0]; i++)',(⎕UCS 10),'    if ( x[i]) {',(⎕UCS 10),'      z[[zi]] = y[[i]];',(⎕UCS 10),'      zi++;',(⎕UCS 10),'    }',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment sl  111 id bidc bidc . ',(⎕UCS 10),'%Fragment sl1 111 id bidc bidc .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE[.] x, $YTYPE[.] y)',(⎕UCS 10),'{/* Non-Boolean vector compress/replicate vector */',(⎕UCS 10),' /* HELP! non-boolean left argument needs a range check */      ',(⎕UCS 10),'  intx = toi(x);',(⎕UCS 10),'  zxrho = sum(intx);',(⎕UCS 10),'  z = genarray([zxrho], $OTFILL);',(⎕UCS 10),'  zi = 0;',(⎕UCS 10),'  for(i=0; i<shape(x)[0]; i++)',(⎕UCS 10),'    for(k=0; k<intx[[i]]; k++){',(⎕UCS 10),'     z[[zi]] = y[[i]];',(⎕UCS 10),'     zi++;',(⎕UCS 10),'    }',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10 10 10),'%Fragment sl  011 bid bidc bidc .',(⎕UCS 10),'%Fragment sl1 011 bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE x, $YTYPE[.] y)',(⎕UCS 10),'{ /* Scalar replicate vector */',(⎕UCS 10),' cell = genarray([toi(x)], $OTFILL);',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : genarray([toi(x)], y[iv]);',(⎕UCS 10),'        } : genarray(shape(y), cell);',(⎕UCS 10),' return(comaX$ZT$ZT(z));',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , coma, X$ZT$ZT, X*1, ., $ZT',(⎕UCS 10 10),'%Fragment sl 0** b bidc bidc .',(⎕UCS 10),'%Fragment sl 0** b bidc bidc ONEEL',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE x, $YTYPE[+] y)',(⎕UCS 10),'{ /* Boolean scalar compress non-scalar */',(⎕UCS 10),'  sy = shape(y);',(⎕UCS 10),'  z = (true == toB(x)) ?  y  : genarray(drop([-1],sy)++[0],$OTFILL);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}       ',(⎕UCS 10 10),'%Fragment sl 0** id bidc bidc .',(⎕UCS 10),'%Fragment sl 0** id bidc bidc ONEEL',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE x, $YTYPE[+] y)',(⎕UCS 10),'{/* Non-Boolean scalar replicate non-scalar */',(⎕UCS 10),' /* FIXME : domain check needed on x */',(⎕UCS 10),' ix = [toi(x)];',(⎕UCS 10),' frameshape = drop([-1],shape(y));  ',(⎕UCS 10),' cellshape = $XTtoI( x) * take([-1], shape(y));',(⎕UCS 10),' defcell = genarray( cellshape, $OTFILL);',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FN$XT$YT$ZT(x, y[iv]);',(⎕UCS 10),'        }: genarray(frameshape, defcell);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $XT$YT$ZT, 011, ., $CT',(⎕UCS 10 10),'%Fragment sl 1** bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[.] x, $YTYPE[+] y)',(⎕UCS 10),'{ /* last-axis vector compress/replicate matrix */',(⎕UCS 10),'  /* This needs conformability check FIXME */',(⎕UCS 10),'  /* Also, x may be one-element vector */',(⎕UCS 10),' frameshape = drop([-1],shape(y));',(⎕UCS 10),' cellshape = sum($XTtoI( x));',(⎕UCS 10),' defcell = genarray([cellshape],$OTFILL);',(⎕UCS 10 10),' z = with {',(⎕UCS 10),'   (. <= iv <= .) : $FN$XT$YT$ZT( x, y[iv]);',(⎕UCS 10),'   } : genarray( frameshape, defcell);',(⎕UCS 10 10),'return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate ,   TRANSPOSE, X$YT$ZT, X**, ., $YT',(⎕UCS 10),'%Generate ,   $FN,  $XT$YT$ZT, 111, ., $YT',(⎕UCS 10 10),'% ------------------ Code fragments for first axis replicate -----------',(⎕UCS 10 10 10),'%Fragment sl1 0** b bidc bidc .',(⎕UCS 10),'%Fragment sl1 0** b bidc bidc ONEEL',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE x, $YTYPE[+] y)',(⎕UCS 10),'{ /* Boolean scalar compress non-scalar, first axis */',(⎕UCS 10),'  sy = shape(y);',(⎕UCS 10),'  z = (true == toB(x)) ?  y  : genarray([0]++drop([1],sy),$OTFILL);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment sl1 0** id bidc bidc .',(⎕UCS 10),'%Fragment sl1 0** id bidc bidc ONEEL',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE x, $YTYPE[+] y)',(⎕UCS 10),'{ /* Scalar replicate non-scalar, first axis */',(⎕UCS 10),' xi = [toi(x)];',(⎕UCS 10),' cellshape = xi++drop([1],shape(y));',(⎕UCS 10),' defcell = genarray(cellshape,$OTFILL);',(⎕UCS 10),' frameshape = take([1],shape(y));',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : genarray(xi,y[iv]);',(⎕UCS 10),'        } : genarray(frameshape, defcell);',(⎕UCS 10 10),' zshape = [prod(take([2],shape(z)))]++drop([2],shape(z));',(⎕UCS 10),' z = reshape(zshape,z);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment sl1 1** bid bidc bidc  .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[.] x, $YTYPE[+] y)',(⎕UCS 10),'{ /* Vector compress/replicate-first-axis matrix */',(⎕UCS 10),'  /* FIXME: needs conformability and domain checks on x */',(⎕UCS 10 10),'  z = TRANSPOSE( sl$XT$YT$ZT(x, TRANSPOSE( y)));',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate ,   sl,  $XT$YT$ZT, 111, ., $YT',(⎕UCS 10 10),'% ------------------------ Expand code fragments ----------------------',(⎕UCS 10 10),'%Fragment bsl  001 bid bidc bidc ONEEL',(⎕UCS 10),'%Fragment bsl1 001 bid bidc bidc ONEEL',(⎕UCS 10),'%Fragment bsl  001 bid bidc bidc .',(⎕UCS 10),'%Fragment bsl1 001 bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE x, $YTYPE y)',(⎕UCS 10),'{/* Scalar expand scalar (first or last axis) */',(⎕UCS 10),' /* In practice, one-element left arguments to expand',(⎕UCS 10),'  * are nearly useless... ',(⎕UCS 10),'  */',(⎕UCS 10),'  z = (true == toB(x))  ?  [y]  :  [$OTFILL];',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment bsl  011 bid bidc bidc ONEEL',(⎕UCS 10),'%Fragment bsl1 011 bid bidc bidc ONEEL',(⎕UCS 10),'%Fragment bsl  011 bid bidc bidc .',(⎕UCS 10),'%Fragment bsl1 011 bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE x, $YTYPE[.] y)',(⎕UCS 10),'{/* Scalar expand scalar (first or last axis) */',(⎕UCS 10),' /* In practice, one-element left arguments to expand',(⎕UCS 10),'  * are nearly useless... ',(⎕UCS 10),'  */',(⎕UCS 10),'  z = (true == toB(x))  ?  y  :  [$OTFILL];',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10 10 10),'%Fragment bsl  101 bid bidc bidc .',(⎕UCS 10),'%Fragment bsl1 101 bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE[.] x, $YTYPE y)',(⎕UCS 10),'{/* Vector expand scalar (first or last axis) */',(⎕UCS 10),' v = [$OTFILL,y];',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : v[[toi(x[iv])]];',(⎕UCS 10),'        } : genarray( shape(x), false );',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment bsl 111 bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($XTYPE[.] x, $YTYPE[.] y)',(⎕UCS 10),'{ /* Vector-vector expand */',(⎕UCS 10),' /* Stupid with-loops won''t work here. */',(⎕UCS 10),' /* FIXME: Needs check that (+/x)= shape(y)[0] and x^.GE 0 */',(⎕UCS 10),' yi=0;',(⎕UCS 10),' z= genarray(shape(x),$OTFILL);',(⎕UCS 10),' for (xi=0; xi<shape(x)[[0]]; xi++){',(⎕UCS 10),'   if (toB(x[[xi]])) {',(⎕UCS 10),'        z[[xi]]=y[[yi]];',(⎕UCS 10),'        yi++;',(⎕UCS 10),'   }',(⎕UCS 10),' }',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10 10 10),'%Fragment bsl 1** bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[.] x, $YTYPE[+] y)',(⎕UCS 10),'{ /* vector expand matrix last axis */',(⎕UCS 10),' yt = TRANSPOSE(y);',(⎕UCS 10),' bx = toB(x);',(⎕UCS 10),' bx = (1 == shape(bx)[[0]]) ?   genarray(take([1],shape(yt)), bx[[0]]) :  bx;',(⎕UCS 10),' z = genarray(shape(bx)++drop([1],shape(yt)),$OTFILL);',(⎕UCS 10),' yi = 0;',(⎕UCS 10),' for(i=0; i<shape(bx)[[0]]; i++)',(⎕UCS 10),'        if (bx[[i]]){',(⎕UCS 10),'                z[[i]] = yt[[yi]];',(⎕UCS 10),'                yi++;',(⎕UCS 10),'        }',(⎕UCS 10),' z = TRANSPOSE(z);',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate ,   TRANSPOSE, X$YT$YT, X**, ., $YT',(⎕UCS 10 10),'%Fragment bsl 1** bid bidc bidc  .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[.] x, $YTYPE[+] y)',(⎕UCS 10),'{ /* vector expand matrix last axis */',(⎕UCS 10),' bx = toB(x);',(⎕UCS 10),' bx = (1 == shape(bx)[[0]])  ?   genarray(shape(yt)[[0]], bx[[0]]) : bx;',(⎕UCS 10),' z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FNAME(bx, y[iv]));',(⎕UCS 10),'        } : genarray(drop([-1],shape(y)));',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $XT$YT$ZT, 111, ., $CT',(⎕UCS 10 10),'%Fragment bsl1 1** bid bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($XTYPE[.] x, $YTYPE[+] y)',(⎕UCS 10),'{ /* vector expand matrix first axis */',(⎕UCS 10),' bx = toB(x);',(⎕UCS 10),' bx = (1 == shape(bx)[[0]]) ?  genarray(take([1],shape(y)), bx[[0]]) : bx;',(⎕UCS 10),' shpz = shape(y);',(⎕UCS 10),' shpz[[0]] = shape(bx)[[0]];',(⎕UCS 10),' z = genarray(shpz,$OTFILL);',(⎕UCS 10),' yi = 0;',(⎕UCS 10),' for(i=0; i<shape(bx)[[0]]; i++)',(⎕UCS 10),'        if (bx[[i]]){',(⎕UCS 10),'                z[[i]] = y[[yi]];',(⎕UCS 10),'                yi++;',(⎕UCS 10),'        }',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10))

('$ SAC 2006-08-09 rbernecky',(⎕UCS 10),'% Code fragments for monadic adverbs: reduce, scan, and cut.',(⎕UCS 10),'%',(⎕UCS 10),'% NB. Replicate and expand are located in replicat.frg',(⎕UCS 10 10 10),'%%%%%%%%%%%%%%%%%%%%% reduce on scalars %%%%%%%%%%%%%%%%%%%%555',(⎕UCS 10 10),'%Fragment sl  x00 bidc bidc bidc .',(⎕UCS 10),'%Fragment sl1 x00 bidc bidc bidc .',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE y)',(⎕UCS 10),'{ /* Reduction of scalar */',(⎕UCS 10),'        return(y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment sl  x00 bidc bidc bidc QUICKSTOP ',(⎕UCS 10),'%Fragment sl1 x00 bidc bidc bidc QUICKSTOP ',(⎕UCS 10),'inline $ZTYPE $FNAMEQUICKSTOP($YTYPE y)',(⎕UCS 10),'{ /* Reduction of scalar */',(⎕UCS 10),'        return(y);',(⎕UCS 10),'}',(⎕UCS 10 10),'%Fragment sl  x00 bidc bidc bidc FOLD ',(⎕UCS 10),'%Fragment sl1 x00 bidc bidc bidc FOLD ',(⎕UCS 10),'inline $ZTYPE $FNAMEFOLD($YTYPE y)',(⎕UCS 10),'{ /* Reduction of scalar */',(⎕UCS 10),'        return(y);',(⎕UCS 10),'}',(⎕UCS 10 10),'% The identity elements for vector reductions are not exactly right.',(⎕UCS 10),'% We use maxint() and minint() for integer min/max reduce, whereas',(⎕UCS 10),'% APL uses maxdouble() and mindouble(). If we did this, we would',(⎕UCS 10),'% end up with reduce ALWAYS having to produce a double result. ',(⎕UCS 10),'% Bummer, Hal. ',(⎕UCS 10),'% Purists can rewrite their integer reductions as:',(⎕UCS 10),'%      min/maxdouble(), Y',(⎕UCS 10),'% and get that double result they yearn for.',(⎕UCS 10 10),'%%%%%%%%%%%%%%%%%%%%% reduce on vectors %%%%%%%%%%%%%%%%%%%%555',(⎕UCS 10 10),'%Fragment sl  x10 bidc bidc bidc FOLD ',(⎕UCS 10),'%Fragment sl1 x10 bidc bidc bidc FOLD ',(⎕UCS 10),'inline $ZTYPE $FNAMEFOLD($YTYPE[.] y)',(⎕UCS 10),'{ /* First/last axis fold-based reduction of vector */ ',(⎕UCS 10),'  lim = shape(y)[0]-1;',(⎕UCS 10),'  z = with {',(⎕UCS 10),'        (0*shape(y) <= iv < shape(y)) ',(⎕UCS 10),'                : $YTto$ZT(y[lim-iv]);',(⎕UCS 10),'       } :  fold( $FN$ZT$ZT$ZT, Ito$ZT($FRID));',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $ZT$ZT$ZT, 000, ., $ZT',(⎕UCS 10 10),'%Fragment sl  x10 bidc bidc bidc QUICKSTOP ',(⎕UCS 10),'%Fragment sl1 x10 bidc bidc bidc QUICKSTOP ',(⎕UCS 10),'inline $ZTYPE $FNAMEQUICKSTOP($YTYPE[.] y)',(⎕UCS 10),'{ /* First/last axis reduction of vector with quick stop*/ ',(⎕UCS 10),'  z = with {',(⎕UCS 10),'         (0*shape(y) <= iv < shape(y)) ',(⎕UCS 10),'                : $YTto$CT(y[iv]);',(⎕UCS 10),'        } : foldfix( $FN$ZT$CT$ZT, Ito$ZT($FRID), Ito$ZT($STOPONVALUE));',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $ZT$ZT$ZT, 000, ., $ZT',(⎕UCS 10 10),'%Fragment sl  x10 bidc bidc bidc . ',(⎕UCS 10),'%Fragment sl1 x10 bidc bidc bidc . ',(⎕UCS 10),'inline $ZTYPE $FNAME($YTYPE[.] y)',(⎕UCS 10),'{ /* First/last axis slow reduction of vector. Can''t use fold or quickstop */ ',(⎕UCS 10),' shp = shape(y)[[0]];',(⎕UCS 10),' if (0 == shp) {',(⎕UCS 10),'   z = Ito$ZT($FRID); ',(⎕UCS 10),' } else {',(⎕UCS 10),'   z = $YTto$ZT(y[[shp-1]]);',(⎕UCS 10),'   for (i=shp-2; i>=0; i--) {',(⎕UCS 10),'     z = $FN$ZT$CT$ZT($YTto$CT(y[[i]]),$YTto$CT(z));',(⎕UCS 10),'   }',(⎕UCS 10),' }',(⎕UCS 10),' return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate , $FN, $ZT$ZT$ZT, 000, ., $ZT',(⎕UCS 10 10),'%%%%%%%%%%%%%%%%%%%%% last-axis reduce on rank>1 arrays  %%%%%%%%%%%%%%%%%%%%555',(⎕UCS 10 10),'%Fragment  sl  x** bidc bidc bidc QUICKSTOP',(⎕UCS 10),'inline $ZTYPE[+] $FNAMEQUICKSTOP($YTYPE[+] y)',(⎕UCS 10),'{ /* last axis reduce rank-2 or greater matrix w/quickstop */',(⎕UCS 10),'  sy = shape(y);',(⎕UCS 10),'  zrho = drop([-1], sy);',(⎕UCS 10),'  z = with {',(⎕UCS 10),'         (. <= iv <= .) ',(⎕UCS 10),'                : $FNAMEQUICKSTOP(y[iv]);',(⎕UCS 10),'        } : genarray(zrho, $OTFILL); ',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate $FN, sl, X$YT$ZT, X10, QUICKSTOP, $ZT',(⎕UCS 10 10),'%Fragment  sl  x** bidc bidc bidc FOLD',(⎕UCS 10),'inline $ZTYPE[+] $FNAMEFOLD($YTYPE[+] y)',(⎕UCS 10),'{ /* last axis reduce rank-2 or greater matrix w/folding */',(⎕UCS 10),'  sy = shape(y);',(⎕UCS 10),'  zrho = drop([-1], sy);',(⎕UCS 10),'  z = with {',(⎕UCS 10),'         (. <= iv <= .) ',(⎕UCS 10),'                : $FNAMEFOLD(y[iv]);',(⎕UCS 10),'        } : genarray(zrho, $OTFILL); ',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate $FN, sl, X$YT$ZT, X10, FOLD, $ZT',(⎕UCS 10 10),'%Fragment  sl  x** bidc bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($YTYPE[+] y)',(⎕UCS 10),'{ /* last axis reduce rank-2 or greater matrix w/no smarts */',(⎕UCS 10),'  sy = shape(y);',(⎕UCS 10),'  zrho = drop([-1], sy);',(⎕UCS 10),'  z = with {',(⎕UCS 10),'         (. <= iv <= .) ',(⎕UCS 10),'                : $FNAME(y[iv]);',(⎕UCS 10),'        } : genarray(zrho, $OTFILL); ',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate $FN, sl, X$YT$ZT, X10, ., $ZT',(⎕UCS 10 10 10),'%%%%%%%%%%%%%%%%%%%%% first-axis reduce on rank-2 arrays  %%%%%%%%%%%%%%%%%%',(⎕UCS 10 10),'%Fragment  sl1  x21 bidc bidc bidc QUICKSTOP',(⎕UCS 10),'inline $ZTYPE[.] $FNAMEQUICKSTOP($YTYPE[.,.] y)',(⎕UCS 10),'{ /* first-axis reduce rank-2 matrix with quickstop */',(⎕UCS 10),'  yt = TRANSPOSE(y);',(⎕UCS 10),'  zrho = drop([-1], shape(yt));',(⎕UCS 10),'  z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FNslX$YT$ZTQUICKSTOP(yt[iv]);',(⎕UCS 10),'        } : genarray(zrho, $OTFILL);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate $FN,  sl,             X$YT$ZT, X10,   QUICKSTOP, $ZT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$YT$YT, X**,   ., $YT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$ZT$ZT, X**,   ., $ZT',(⎕UCS 10 10 10),'%Fragment  sl1  x21 bidc bidc bidc FOLD',(⎕UCS 10),'inline $ZTYPE[.] $FNAMEFOLD($YTYPE[.,.] y)',(⎕UCS 10),'{ /* first-axis reduce rank-2 matrix */',(⎕UCS 10),'  yt = TRANSPOSE(y);',(⎕UCS 10),'  zrho = drop([-1], shape(yt));',(⎕UCS 10),'  z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FNslX$YT$ZTFOLD(yt[iv]);',(⎕UCS 10),'        } : genarray(zrho, $OTFILL);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate $FN,  sl,             X$YT$ZT, X10,   FOLD, $ZT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$YT$YT, X**,   ., $YT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$ZT$ZT, X**,   ., $ZT',(⎕UCS 10 10),'%Fragment  sl1  x21 bidc bidc bidc .',(⎕UCS 10),'inline $ZTYPE[.] $FNAME($YTYPE[.,.] y)',(⎕UCS 10),'{ /* first-axis reduce rank-2 matrix */',(⎕UCS 10),'  yt = TRANSPOSE(y);',(⎕UCS 10),'  zrho = drop([-1], shape(yt));',(⎕UCS 10),'  z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FNslX$YT$ZT(yt[iv]);',(⎕UCS 10),'        } : genarray(zrho, $OTFILL);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate $FN,  sl,             X$YT$ZT, X10,   ., $ZT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$YT$YT, X**,   ., $YT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$ZT$ZT, X**,   ., $ZT',(⎕UCS 10 10 10),'%%%%%%%%%%%%%%%%%%%%% first-axis reduce on rank>2 arrays  %%%%%%%%%%%%%%%%%%',(⎕UCS 10 10),'%Fragment  sl1  x** bidc bidc bidc QUICKSTOP',(⎕UCS 10),'inline $ZTYPE[+] $FNAMEQUICKSTOP($YTYPE[+] y)',(⎕UCS 10),'{ /* first-axis reduce rank-3 or greater matrix with quickstop */',(⎕UCS 10),'  yt = TRANSPOSE(y);',(⎕UCS 10),'  zrho = drop([-1], shape(yt));',(⎕UCS 10),'  z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FNslX$YT$ZTQUICKSTOP(yt[iv]);',(⎕UCS 10),'        } : genarray(zrho, $OTFILL);',(⎕UCS 10),'  z = TRANSPOSE(z);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate $FN,  sl,             X$YT$ZT, X10,   QUICKSTOP, $ZT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$YT$YT, X**,   ., $YT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$ZT$ZT, X**,   ., $ZT',(⎕UCS 10),'% We distinguish rank-2 from rank-3 and up reductions, because',(⎕UCS 10),'% the former doesn''t want the trailing TRANSPOSE.',(⎕UCS 10 10 10),'%Fragment  sl1  x** bidc bidc bidc FOLD',(⎕UCS 10),'inline $ZTYPE[+] $FNAMEFOLD($YTYPE[+] y)',(⎕UCS 10),'{ /* first-axis reduce rank-3 or greater matrix */',(⎕UCS 10),'  yt = TRANSPOSE(y);',(⎕UCS 10),'  zrho = drop([-1], shape(yt));',(⎕UCS 10),'  z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FNslX$YT$ZTFOLD(yt[iv]);',(⎕UCS 10),'        } : genarray(zrho, $OTFILL);',(⎕UCS 10),'  z = TRANSPOSE(z);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate $FN,  sl,             X$YT$ZT, X10,   FOLD, $ZT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$YT$YT, X**,   ., $YT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$ZT$ZT, X**,   ., $ZT',(⎕UCS 10 10),'%Fragment  sl1  x** bidc bidc bidc .',(⎕UCS 10),'inline $ZTYPE[+] $FNAME($YTYPE[+] y)',(⎕UCS 10),'{ /* first-axis reduce rank-3 or greater matrix */',(⎕UCS 10),'  yt = TRANSPOSE(y);',(⎕UCS 10),'  zrho = drop([-1], shape(yt));',(⎕UCS 10),'  z = with {',(⎕UCS 10),'        (. <= iv <= .)',(⎕UCS 10),'                : $FNslX$YT$ZT(yt[iv]);',(⎕UCS 10),'        } : genarray(zrho, $OTFILL);',(⎕UCS 10),'  z = TRANSPOSE(z);',(⎕UCS 10),'  return(z);',(⎕UCS 10),'}',(⎕UCS 10),'%Generate $FN,  sl,             X$YT$ZT, X10,   ., $ZT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$YT$YT, X**,   ., $YT',(⎕UCS 10),'%Generate ,     TRANSPOSE,      X$ZT$ZT, X**,   ., $ZT',(⎕UCS 10 10))

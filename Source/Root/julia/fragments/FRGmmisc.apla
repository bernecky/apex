'#=',(⎕UCS 10),'Monadic miscfns',(⎕UCS 10),'Will eventually handle:',(⎕UCS 10),'     shape, index generator, matrix inverse,',(⎕UCS 10),'     dex, nubsieve, thorn',(⎕UCS 10),'Robert Bernecky 2007-05-13',(⎕UCS 10),'=#',(⎕UCS 10 10),'%Fragment iota x01 x bidc i .',(⎕UCS 10),'function $FNAME($YTYPE y, int QUADio)',(⎕UCS 10),'    # Index generator on scalar',(⎕UCS 10),'    # HELP! Needs domain check for negative shp',(⎕UCS 10),'    z = QUADio+iota(toi(y))',(⎕UCS 10),'    return z;',(⎕UCS 10),'end',(⎕UCS 10 10),'%Fragment iota x01 x bidc i NonNeg',(⎕UCS 10),'function $FNAMENonNeg($YTYPE y, int QUADio)',(⎕UCS 10),'    # Index generator on ScalarN when N is non-negative integer',(⎕UCS 10),'    z = QUADio+iota(toi(y))',(⎕UCS 10),'    return z;',(⎕UCS 10),'end',(⎕UCS 10 10),'%Fragment iota x11 x bidc i .',(⎕UCS 10),'function $FNAME($YTYPE[1] y, int QUADio)',(⎕UCS 10),'    # Index generator on 1-element vector */',(⎕UCS 10),'    # HELP! Needs length error check */',(⎕UCS 10),'    # HELP! Needs domain check for negative shp */',(⎕UCS 10),'    z = QUADio+iota(toi(y[[0]]));',(⎕UCS 10),'    return z;',(⎕UCS 10),'end',(⎕UCS 10 10),'%Fragment iota x11 x bidc i NonNeg',(⎕UCS 10),'function $FNAMENonNeg($YTYPE[1] y, int QUADio)',(⎕UCS 10),'    # Index generator on 1-element vector, known to be non-negative integer',(⎕UCS 10),'    z = QUADio+iota(toi(y[[0]]));',(⎕UCS 10),'    return z;',(⎕UCS 10),'end',(⎕UCS 10 10),'%Fragment ltak *** x bidc bidc .',(⎕UCS 10),'function $YTYPE[*] $FNAME($YTYPE[*] y) ',(⎕UCS 10),'    # Dex on anything',(⎕UCS 10),'    return y;',(⎕UCS 10),'end',(⎕UCS 10 10),'%Fragment rho x01 x bidc i . ',(⎕UCS 10),'function $FNAME($YTYPE y) ',(⎕UCS 10),'    # Shape of scalar ',(⎕UCS 10),'    return shape(y);',(⎕UCS 10),'end',(⎕UCS 10 10),'%Fragment rho x** x bidc i .',(⎕UCS 10),'function $FNAME($YTYPE[+] y) ',(⎕UCS 10),'    # Shape of non-scalar */',(⎕UCS 10),'    return shape(y);',(⎕UCS 10),'end',(⎕UCS 10 10),'%Fragment quad x** x bidc bidc .',(⎕UCS 10),'function $FNAME($YTYPE[*] y, int QUADpp, int QUADpw)',(⎕UCS 10),'    # {quad}{<-} anything',(⎕UCS 10),'    # show(y);',(⎕UCS 10),'    # return(y);',(⎕UCS 10),'    return "TODO: Fragment quad";',(⎕UCS 10),'end',(⎕UCS 10)

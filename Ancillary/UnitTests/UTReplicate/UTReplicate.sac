use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3014.dws2012-11-15 11:08:48.651 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] plusIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[.] comaXII(int y)
{ /* Ravel of scalar */
  return([y]);
}

inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[.] rhoIII(int x, int[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIII( [toi(x)],y);
 return(z);
}


inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline int[*] indr(int[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),0);
 z = with {
        (. <= iv <= .)
                : X[[I[iv]]];
        } : genarray(shape(I), defcell);
 return(z);
}





inline int[.] slIII(int x, int y)
{ /* Scalar replicate scalar */
 z = with {
        (. <= iv <= .)
                : y;
        } : genarray([toi(x)]);
 return(z);
}

inline int[.] slIII(int[.] x, int y)
{ /* Vector compress/replicate scalar */
 shpz = sum(toi(x));
 z = genarray([shpz],y);
 return(z);
}

inline int[.] slIII(int x, int[.] y)
{ /* Scalar replicate vector */
 cell = genarray([toi(x)], 0);
 z = with {
        (. <= iv <= .)
                : genarray([toi(x)], y[iv]);
        } : genarray(shape(y), cell);
 return(comaXII(z));
}


inline int[.] slIII(int[.] x, int[.] y)
{/* Non-Boolean vector compress/replicate vector */
 /* HELP! non-boolean left argument needs a range check */
  intx = toi(x);
  zxrho = sum(intx);
  z = genarray([zxrho], 0);
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    for(k=0; k<intx[[i]]; k++){
     z[[zi]] = y[[i]];
     zi++;
    }
  return(z);
}


inline int[+] slIII(int x, int[+] y)
{/* Non-Boolean scalar replicate non-scalar */
 /* FIXME : domain check needed on x */
 ix = [toi(x)];
 frameshape = drop([-1],shape(y));
 cellshape = ItoI( x) * take([-1], shape(y));
 defcell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : slIII(x, y[iv]);
        }: genarray(frameshape, defcell);
 return(z);
}


inline int[+] slIII(int[.] x, int[+] y)
{ /* last-axis vector compress/replicate matrix */
  /* This needs conformability check FIXME */
  /* Also, x may be one-element vector */
 frameshape = drop([-1],shape(y));
 cellshape = sum(ItoI( x));
 defcell = genarray([cellshape],0);

 z = with {
   (. <= iv <= .) : slIII( x, y[iv]);
   } : genarray( frameshape, defcell);

return(z);
}





inline int[.] sl1III(int x, int y)
{ /* Scalar replicate scalar */
 z = with {
        (. <= iv <= .)
                : y;
        } : genarray([toi(x)]);
 return(z);
}

inline int[.] sl1III(int[.] x, int y)
{ /* Vector compress/replicate scalar */
 shpz = sum(toi(x));
 z = genarray([shpz],y);
 return(z);
}

inline int[.] sl1III(int x, int[.] y)
{ /* Scalar replicate vector */
 cell = genarray([toi(x)], 0);
 z = with {
        (. <= iv <= .)
                : genarray([toi(x)], y[iv]);
        } : genarray(shape(y), cell);
 return(comaXII(z));
}


inline int[.] sl1III(int[.] x, int[.] y)
{/* Non-Boolean vector compress/replicate vector */
 /* HELP! non-boolean left argument needs a range check */
  intx = toi(x);
  zxrho = sum(intx);
  z = genarray([zxrho], 0);
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    for(k=0; k<intx[[i]]; k++){
     z[[zi]] = y[[i]];
     zi++;
    }
  return(z);
}


inline int[+] sl1III(int[.] x, int[+] y)
{ /* Vector compress/replicate-first-axis matrix */
  /* FIXME: needs conformability and domain checks on x */

  z = TRANSPOSE( slIII(x, TRANSPOSE( y)));
  return(z);
}



inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sx, false);
  return(z);
}






inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] TRANSPOSE(int[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), 0);
  return(z);
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 S3_0=( 3);
 S2_0=( 2);
 A_95=comaXII( 5);
 V5_0=( A_95);
 V2013_0=( [2, 0, 1, 3]);
 A_99=iotaXII( 24,QUADio_0);
 A_100=rhoIII([2, 3, 4],A_99);
 M234_0=( A_100);
 A_102=slIII(S3_0,S3_0);
 A_104=sameIIB(A_102,[3, 3, 3]);
 r_0=( A_104);
 A_106=slIII(S3_0,S2_0);
 A_108=sameIIB(A_106,[2, 2, 2]);
 A_109=comaBBB(r_0,A_108);
 r_1=( A_109);
 A_111=slIII(V5_0,S2_0);
 A_113=sameIIB(A_111,[2, 2, 2, 2, 2]);
 A_114=comaBBB(r_1,A_113);
 r_2=( A_114);
 A_116=slIII(S2_0,V5_0);
 A_118=sameIIB(A_116,[5, 5]);
 A_119=comaBBB(r_2,A_118);
 r_3=( A_119);
 A_122=iotaXII( 24,QUADio_0);
 A_123=rhoIII(24,3);
 A_124=slIII(A_123,A_122);
 A_125=rhoIII([2, 3, 12],A_124);
 A_126=slIII(S3_0,M234_0);
 A_128=sameIIB(A_126,A_125);
 A_129=comaBBB(r_3,A_128);
 r_4=( A_129);
 A_131=slIII(V2013_0,V2013_0);
 A_133=sameIIB(A_131,[2, 2, 1, 3, 3, 3]);
 A_134=comaBBB(r_4,A_133);
 r_5=( A_134);
 z_0=( [0, 0, 2, 3, 3, 3, 4, 4, 6, 7, 7, 7, 8, 8, 10, 11, 11, 11]);
 /* dsf scalar(s) */
A_137=plusIII(z_0,12);
 A_138=comaIII(z_0,A_137);
 A_139=rhoIII([2, 3, 6],A_138);
 z_1=( A_139);
 A_141=slIII(V2013_0,M234_0);
 A_143=sameIIB(A_141,z_1);
 A_144=comaBBB(r_5,A_143);
 r_6=( A_144);
 A_146=slIII(V2013_0,S2_0);
 A_148=sameIIB(A_146,[2, 2, 2, 2, 2, 2]);
 A_149=comaBBB(r_6,A_148);
 r_7=( A_149);
 A_151=sl1III(S3_0,S3_0);
 A_153=sameIIB(A_151,[3, 3, 3]);
 A_154=comaBBB(r_7,A_153);
 r_8=( A_154);
 A_156=sl1III(S3_0,S2_0);
 A_158=sameIIB(A_156,[2, 2, 2]);
 A_159=comaBBB(r_8,A_158);
 r_9=( A_159);
 A_161=sl1III(V5_0,S2_0);
 A_163=sameIIB(A_161,[2, 2, 2, 2, 2]);
 A_164=comaBBB(r_9,A_163);
 r_10=( A_164);
 A_166=sl1III(S2_0,V5_0);
 A_168=sameIIB(A_166,[5, 5]);
 A_169=comaBBB(r_10,A_168);
 r_11=( A_169);
 A_171=sl1III(V2013_0,V2013_0);
 A_173=sameIIB(A_171,[2, 2, 1, 3, 3, 3]);
 A_174=comaBBB(r_11,A_173);
 r_12=( A_174);
 A_177=iotaXII( 24,QUADio_0);
 A_178=rhoIII([4, 3, 2],A_177);
 z_2=( A_178);
 A_182= ABC(toi([0, 0, 2, 3, 3, 3])-QUADio_0,shape(z_2)[0]);
A_184=indr(z_2,A_182);
A_185=sl1III(V2013_0,z_2);
 A_187=sameIIB(A_185,A_184);
 A_188=comaBBB(r_12,A_187);
 r_13=( A_188);
 A_192=quadXBB( r_13,QUADpp_0,QUADpw_0);
 A_193=andslXBBQUICKSTOP( r_13);
 /* dsf scalar(s) */
A_197=barBBI(true,A_193);
 r_14=( A_197);
 A_201=quadXII( A_197,QUADpp_0,QUADpw_0);
 return(r_14);
}


use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac30142015-08-21 15:09:29.686 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int[+] modXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : modXII(toI(y[iv]));
        } : genarray(shape(y), 0);
  return(z);
}

inline int[+] barXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : barXII(toI(y[iv]));
        } : genarray(shape(y), 0);
  return(z);
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] mpyBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[+] ltIBB(int[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : ltIBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[+] mpyBII(bool[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : mpyBII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[+] maxIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : maxIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[+] barIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : barIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[+] maxBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : maxIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] minIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : minIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[+] plusIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline bool[.] comaXBB(bool y)
{ /* Ravel of scalar */
  return([y]);
}

inline bool[.] comaXBB(bool[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline int[.] comaXII(int[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline int[.] comaXII(int y)
{ /* Ravel of scalar */
  return([y]);
}

inline char[.] comaXCC(char[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[.] rhoBBB(bool x, bool[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIBB( [toi(x)],y);
 return(z);
}


inline bool[*] rhoCBB(char[.] x, bool[*] y)
{  /* Character-vector reshape anything. */
   /* Left argument must be empty vector! */
  if( 0 != shape(x)[[0]]) {
    show(tochar("reshape domain error in rhoCBB"));
  }
  z = y[ 0 * shape(y)];
  return(z);
}

inline bool[.] rhoIBB(int x, bool[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIBB( [toi(x)],y);
 return(z);
}


inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[.] rhoIII(int x, int[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIII( [toi(x)],y);
 return(z);
}


inline char[.] rhoICC(int x, char[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoICC( [toi(x)],y);
 return(z);
}


inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline int[.] rhoBII(bool x, int[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIII( [toi(x)],y);
 return(z);
}


inline int[*] rhoCII(char[.] x, int[*] y)
{  /* Character-vector reshape anything. */
   /* Left argument must be empty vector! */
  if( 0 != shape(x)[[0]]) {
    show(tochar("reshape domain error in rhoCII"));
  }
  z = y[ 0 * shape(y)];
  return(z);
}

inline char[.] rhoBCC(bool x, char[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoICC( [toi(x)],y);
 return(z);
}


inline char[*] rhoCCC(char[.] x, char[*] y)
{  /* Character-vector reshape anything. */
   /* Left argument must be empty vector! */
  if( 0 != shape(x)[[0]]) {
    show(tochar("reshape domain error in rhoCCC"));
  }
  z = y[ 0 * shape(y)];
  return(z);
}

inline int[*] dropIII(int[.] x, int[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}


inline bool[.] takeBBB(bool x, bool y)
{ /* Scalar take scalar */
  return(take([toi(x)],[y]));
}

inline int[.] takeBII(bool x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}


inline int[.] takeIII(int x, int y)
{ /* Scalar take scalar */
  return(take([toi(x)],[y]));
}

inline char[.] takeICC(int x, char[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.] takeIII(int x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline bool[*] dropBBB(bool x, bool[*] y)
{ /* Scalar drop scalar */
  return(drop([toi(x)], [y]));
}

inline int[*] dropIII(int x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.,.] takeIII(int[.] x, int[.,.] y)
{ /* vector take matrix */
  return(take(toi(x),y));
}

inline int[.]  rhoXBI(bool[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.] iotaXBI(bool y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.]  rhoXCI(char[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] comaBII(bool[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline int[.] comaIBI(int[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] utakIII(int[.] x, int y)
{ /* Non-floating Vector represent scalar */
  /* Taken from ISO Extended APL standard Draft N93.03, page 155 */
  wts = genarray(shape(x),toI(1));
  for(i=shape(x)[[0]]-2; i>=0; i--)
        wts[[i]] = wts[[i+1]] * toI(x[[i+1]]);
  z = genarray(shape(x),0);
  cy = toI(y);
  for(i=shape(x)[[0]]-1; i>=0; i--){
        z[[i]] = modIII(toI(x[[i]]),cy/wts[[i]]);
        /* Must use fuzz-less call to mod!! */
        /* Represent is NOT fuzzy (SAPL Ref Man p.6-47, 1991 */
        cy = cy - z[[i]] * wts[[i]];
  }
 return(z);
}



inline int dtakIII(int[.] x, int[.] y)
{ /* Vector basevalue vector */
  /* 3 cases - all give 22200:
   *    10 10 10 basevalue 200 200 200
   *    10 10 10 basevalue 200
   *    (,10) basevalue 200 200 200
   */
 ycols = (shape(y))[[0]];
 if (1 == ycols){       /* Maybe extend y */
        ycols = shape(x)[[0]];
        y = genarray([ycols],y[[0]]);
 }
 if (1 == shape(x)[[0]]){       /* Maybe extend x */
        x = genarray([ycols], x[[0]]);
 }
 weights = genarray([ycols], toI(1));
 for (i=ycols-2; i>=0; i--)
        weights[[i]]= weights[[i+1]]*toI(x[[i+1]]);
 z = with {
        ([0] <= iv < [ycols])
                : weights[iv] * toI(y[iv]);
        } : fold(+, 0);
 return(z);
}

inline bool sameBIB(bool[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameBBB(bool[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqBBB(toB( x),  toB( y)))));
  return(z);
}



inline bool sameIBB(int[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameCCB(char[+] x, char[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqCCB(toC( x),  toC( y)))));
  return(z);
}



inline bool[*] indr(bool[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline char[*] indr(char[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline bool[+] inds0(bool[+] X, int  I0, bool Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = BtoB(X);
 Y = Yin;

 
 z[[I0]]=BtoB((Y));

 
 return(z);
}



inline int[+] inds0(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline char[+] inds0(char[+] X, int  I0, char Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = CtoC(X);
 Y = Yin;

 
 z[[I0]]=CtoC((Y));

 
 return(z);
}



inline bool[.] bslBBB(bool x, bool[.] y)
{/* Scalar expand scalar (first or last axis) */
 /* In practice, one-element left arguments to expand
  * are nearly useless...
  */
  z = (true == toB(x))  ?  y  :  [false];
  return(z);
}


inline bool[.] slBBB(bool x, bool y)
{ /* Scalar replicate scalar */
 z = with {
        (. <= iv <= .)
                : y;
        } : genarray([toi(x)]);
 return(z);
}

inline int[.] slBII(bool x, int[.] y)
{ /* Scalar replicate vector */
 cell = genarray([toi(x)], 0);
 z = with {
        (. <= iv <= .)
                : genarray([toi(x)], y[iv]);
        } : genarray(shape(y), cell);
 return(comaXII(z));
}


inline int[.] slBII(bool x, int y)
{ /* Scalar replicate scalar */
 z = with {
        (. <= iv <= .)
                : y;
        } : genarray([toi(x)]);
 return(z);
}

inline char[.] slBCC(bool x, char[.] y)
{ /* Scalar replicate vector */
 cell = genarray([toi(x)], ' ');
 z = with {
        (. <= iv <= .)
                : genarray([toi(x)], y[iv]);
        } : genarray(shape(y), cell);
 return(comaXCC(z));
}


inline int[+] slBII(bool x, int[+] y)
{ /* Boolean scalar compress non-scalar */
  sy = shape(y);
  z = (true == toB(x)) ?  y  : genarray(drop([-1],sy)++[0],0);
  return(z);
}

inline int[.] bslBII(bool x, int[.] y)
{/* Scalar expand scalar (first or last axis) */
 /* In practice, one-element left arguments to expand
  * are nearly useless...
  */
  z = (true == toB(x))  ?  y  :  [0];
  return(z);
}


inline char[.] bslBCC(bool x, char[.] y)
{/* Scalar expand scalar (first or last axis) */
 /* In practice, one-element left arguments to expand
  * are nearly useless...
  */
  z = (true == toB(x))  ?  y  :  [' '];
  return(z);
}


inline int mpyslXIIQUICKSTOP(int[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : ItoI(y[iv]);
        } : foldfix( mpyIII, ItoI(1), ItoI(0));
  return(z);
}


inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int modXII(int y)
{ return(abs(toI(y)));
}

inline int barXII(int y)
{ return(-y);
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline bool ltIBB(int x, bool y)
{ /* A<B on Boot/Int/Char */
  return(ItoI(x)<BtoI(y));
}

inline int mpyBII(bool x, int y)
{ return(BtoI(x)*ItoI(y));
}

inline int maxIII(int x, int y)
{ /* x max y */
 return (max(ItoI(x),ItoI(y)));
}

inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline int minIII(int x, int y)
{ /* x min y */
 return (min(ItoI(x),ItoI(y)));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline int modIII(int x, int y)
{ /* SxS residue (aka modulo) */
  /* (x residue y) <-->   y-x times floor y divide x + 0 = x  */
  /* See model residueI in workspace UTDScalarI.dws */
  x = ItoI(x);
  y = ItoI(y);
  if( 0 != x) {
    q = y / x;
    z = y - ( x * q);
  } else {
    z = y;
  }

  if( z != 0) {
    if( mpyXII( x) != mpyXII( y)) {
      z = z + x;
    }
  }
 return(z);
}


inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline int[+] mpyBII(bool[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : mpyBII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] maxIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : maxIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] maxIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : maxIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] barIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : barIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] barIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] minIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : minIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] minIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : minIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqCCB(char[+] x, char[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqCCB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] comaXCC(char[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[*] indrfr(int fr, bool[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline bool[*] indrfr0(bool[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline bool[*] indrfr(int fr, bool[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,false);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int mpyXII(int y)
{ /* signum int/double */
   if( toI(0) == y) {
    z = 0;
  } else {
    if( toI(0) < y) {
      z = 1;
    } else {
      z = -1;
    }
  }
  return(z);
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool eqBBB(bool x, bool y)
{ /* A=B on non-doubles */
 return(BtoB(x) == BtoB(y));
}

inline bool eqCCB(char x, char y)
{ /* A=B on non-doubles */
 return(CtoC(x) == CtoC(y));
}

inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : eqBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
     ( . <= iv <= .) {
              yel = toC(y[iv]);
                    } : eqCCB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqCCB(char[+] x, char y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqCCB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool FillXBB(bool[.] y )
{ 
/*
 ?
*/
A_20=rhoBBB(false,y);
 A_21=bslBBB(false,A_20);
 A_22=rhoCBB([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline bool[.] DropBBB(bool x, bool y,int QUADio)
{ 
/*
 ?
*/
A_55=slBBB(true,y);
 y_0=( A_55);
 A_57=comaXBB( x);
 x_0=( A_57);
 A_59=rhoXBI( y_0);
 shpy_0=( A_59);
 /* dsf scalar(s) */
A_61=mpyBII(false,shpy_0);
 zr_0=( A_61);
 A_63=rhoXBI( x_0);
 A_64=dropIII(A_63,zr_0);
 A_65=comaBII(x_0,A_64);
 vext_0=( A_65);
 /* dsf scalar(s) */
A_68=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_69=mpyBII(A_68,zr_0);
 /* dsf scalar(s) */
A_70=maxIII(vext_0,A_69);
 ylb_0=( A_70);
 A_72=modXII( vext_0);
 /* dsf scalar(s) */
A_73=barIII(shpy_0,A_72);
 /* dsf scalar(s) */
A_74=maxBII(false,A_73);
 shpz_0=( A_74);
 /* dsf scalar(s) */
A_76=minIII(shpz_0,shpy_0);
 ub_0=( A_76);
 A_78=FillXBB( y_0);
 A_79=mpyslXIIQUICKSTOP( shpz_0);
 A_83=rhoIBB(A_79,A_78);
 r_0=( A_83);
 A_85=mpyslXIIQUICKSTOP( ub_0);
 A_90=iotaXII( A_85,QUADio);
 A_CTR91_= 0;
A_CTR91z_ = (shape(A_90)[[0]])-1;
r_2=toB(r_0);
for(; A_CTR91_ <= A_CTR91z_; A_CTR91_++){
i_0 = A_90[[A_CTR91_]];
 A_93=utakIII(ub_0,i_0);
 iv_0=( A_93);
 /* dsf scalar(s) */
A_95=plusIII(ylb_0,iv_0);
 A_96=dtakIII(shpy_0,A_95);
 A_98=comaXBB( y_0);
 A_97= ABC(toi(A_96)-QUADio,shape(A_98)[0]);
A_100=A_98[[A_97]];
 el_0=( A_100);
 A_102=dtakIII(shpz_0,iv_0);
 A_103= ABC(toi(A_102)-QUADio,shape(r_2)[0]);
A_105=inds0(r_2,A_103,el_0);
 r_2=( A_105);
 }
 A_108=rhoIBB(shpz_0,r_2);
 r_3=( A_108);
 return(r_3);
}

inline bool[.] TakeBBB(bool x, bool y,int QUADio)
{ 
/*
 ?
*/
A_58=slBBB(true,y);
 y_0=( A_58);
 A_60=comaXBB( x);
 x_0=( A_60);
 A_62=rhoXBI( y_0);
 shpy_0=( A_62);
 /* dsf scalar(s) */
A_64=mpyBII(false,shpy_0);
 zr_0=( A_64);
 A_66=rhoXBI( y_0);
 A_67=rhoXBI( x_0);
 A_68=dropIII(A_67,A_66);
 A_69=comaBII(x_0,A_68);
 vext_0=( A_69);
 A_71=barXII( vext_0);
 /* dsf scalar(s) */
A_72=barIII(A_71,shpy_0);
 /* dsf scalar(s) */
A_74=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_75=mpyBII(A_74,A_72);
 /* dsf scalar(s) */
A_76=maxIII(zr_0,A_75);
 lb_0=( A_76);
 /* dsf scalar(s) */
A_78=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_79=maxBII(false,A_78);
 /* dsf scalar(s) */
A_81=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_82=mpyBII(A_81,A_79);
 /* dsf scalar(s) */
A_83=maxIII(zr_0,A_82);
 ylb_0=( A_83);
 A_85=modXII( vext_0);
 shpz_0=( A_85);
 /* dsf scalar(s) */
A_87=minIII(shpz_0,shpy_0);
 ub_0=( A_87);
 A_89=FillXBB( y_0);
 A_90=mpyslXIIQUICKSTOP( shpz_0);
 A_94=rhoIBB(A_90,A_89);
 r_0=( A_94);
 A_96=mpyslXIIQUICKSTOP( ub_0);
 A_101=iotaXII( A_96,QUADio);
 A_CTR102_= 0;
A_CTR102z_ = (shape(A_101)[[0]])-1;
r_2=toB(r_0);
for(; A_CTR102_ <= A_CTR102z_; A_CTR102_++){
i_0 = A_101[[A_CTR102_]];
 A_104=utakIII(ub_0,i_0);
 iv_0=( A_104);
 /* dsf scalar(s) */
A_106=plusIII(ylb_0,iv_0);
 A_107=dtakIII(shpy_0,A_106);
 A_109=comaXBB( y_0);
 A_108= ABC(toi(A_107)-QUADio,shape(A_109)[0]);
A_111=A_109[[A_108]];
 el_0=( A_111);
 /* dsf scalar(s) */
A_113=plusIII(lb_0,iv_0);
 A_114=dtakIII(shpz_0,A_113);
 A_115= ABC(toi(A_114)-QUADio,shape(r_2)[0]);
A_117=inds0(r_2,A_115,el_0);
 r_2=( A_117);
 }
 A_120=rhoIBB(shpz_0,r_2);
 r_3=( A_120);
 return(r_3);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 S0_0=( false);
 S1_0=( true);
 A_220=comaXBB( true);
 V1_0=( A_220);
 A_222=comaXBB( false);
 V0_0=( A_222);
 A_225=iotaXBI( false,QUADio_0);
 Vn_0=( A_225);
 V10100_0=( [true,false,true,false,false]);
 V101011_0=( [true,false,true,false,true,true]);
 A_230=iotaXII( 24,QUADio_0);
 A_231=rhoIII([2, 3, 4],A_230);
 M234_0=( A_231);
 A_234=iotaXBI( false,QUADio_0);
 A_235=takeBBB(false,true);
 A_237=sameBIB(A_235,A_234);
 r_0=( A_237);
 A_240=TakeBBB(false,true,QUADio_0);
 A_241=takeBBB(false,true);
 A_243=sameBBB(A_241,A_240);
 r_1=( A_243);
 A_245=comaXBB( false);
 A_247=iotaXBI( false,QUADio_0);
 A_248=takeBII(true,A_247);
 A_250=sameIBB(A_248,A_245);
 A_251=comaBBB(r_1,A_250);
 r_2=( A_251);
 A_254=iotaXBI( false,QUADio_0);
 A_256=TakeCLONE4BII(true,A_254,QUADio_0);
 A_258=iotaXBI( false,QUADio_0);
 A_259=takeBII(true,A_258);
 A_261=sameIIB(A_259,A_256);
 A_262=comaBBB(r_2,A_261);
 r_3=( A_262);
 A_264=takeIII(3,2);
 A_266=sameIIB(A_264,[2, 0, 0]);
 A_267=comaBBB(r_3,A_266);
 r_4=( A_267);
 A_270=TakeCLONE5III(3,2,QUADio_0);
 A_271=takeIII(3,2);
 A_273=sameIIB(A_271,A_270);
 A_274=comaBBB(r_4,A_273);
 r_5=( A_274);
 A_276=takeIII(-3,5);
 A_278=sameIIB(A_276,[0, 0, 5]);
 A_279=comaBBB(r_5,A_278);
 r_6=( A_279);
 A_282=TakeCLONE6III(-3,5,QUADio_0);
 A_283=takeIII(-3,5);
 A_285=sameIIB(A_283,A_282);
 A_286=comaBBB(r_6,A_285);
 r_7=( A_286);
 A_288=takeICC(4,['x','y']);
 A_290=sameCCB(A_288,['x','y',' ',' ']);
 A_291=comaBBB(r_7,A_290);
 r_8=( A_291);
 A_294=TakeCLONE7ICC(4,['x','y'],QUADio_0);
 A_295=takeICC(4,['x','y']);
 A_297=sameCCB(A_295,A_294);
 A_298=comaBBB(r_8,A_297);
 r_9=( A_298);
 A_300=takeICC(-4,['x','y']);
 A_302=sameCCB(A_300,[' ',' ','x','y']);
 A_303=comaBBB(r_9,A_302);
 r_10=( A_303);
 A_306=TakeCLONE8ICC(-4,['x','y'],QUADio_0);
 A_307=takeICC(-4,['x','y']);
 A_309=sameCCB(A_307,A_306);
 A_310=comaBBB(r_10,A_309);
 r_11=( A_310);
 A_312=takeICC(3,['a','b','c','d']);
 A_314=sameCCB(A_312,['a','b','c']);
 A_315=comaBBB(r_11,A_314);
 r_12=( A_315);
 A_318=TakeCLONE9ICC(3,['a','b','c','d'],QUADio_0);
 A_319=takeICC(3,['a','b','c','d']);
 A_321=sameCCB(A_319,A_318);
 A_322=comaBBB(r_12,A_321);
 r_13=( A_322);
 A_324=takeIII(-3,[1, 3, 8, 9]);
 A_326=sameIIB(A_324,[3, 8, 9]);
 A_327=comaBBB(r_13,A_326);
 r_14=( A_327);
 A_330=TakeCLONE10III(-3,[1, 3, 8, 9],QUADio_0);
 A_331=takeIII(-3,[1, 3, 8, 9]);
 A_333=sameIIB(A_331,A_330);
 A_334=comaBBB(r_14,A_333);
 r_15=( A_334);
 A_336=comaXBB( false);
 A_337=dropBBB(false,false);
 A_339=sameBBB(A_337,A_336);
 A_340=comaBBB(r_15,A_339);
 r_16=( A_340);
 A_342=comaXBB( false);
 A_344=DropBBB(false,false,QUADio_0);
 A_346=sameBBB(A_344,A_342);
 A_347=comaBBB(r_16,A_346);
 r_17=( A_347);
 A_350=iotaXII( 4,QUADio_0);
 A_351=dropIII(2,A_350);
 A_353=sameIIB(A_351,[2, 3]);
 A_354=comaBBB(r_17,A_353);
 r_18=( A_354);
 A_357=iotaXII( 4,QUADio_0);
 A_359=DropCLONE11III(2,A_357,QUADio_0);
 A_361=sameIIB(A_359,[2, 3]);
 A_362=comaBBB(r_18,A_361);
 r_19=( A_362);
 A_365=iotaXII( 4,QUADio_0);
 A_366=dropIII(-1,A_365);
 A_368=sameIIB(A_366,[0, 1, 2]);
 A_369=comaBBB(r_19,A_368);
 r_20=( A_369);
 A_372=iotaXII( 4,QUADio_0);
 A_374=DropCLONE12III(-1,A_372,QUADio_0);
 A_376=sameIIB(A_374,[0, 1, 2]);
 A_377=comaBBB(r_20,A_376);
 r_21=( A_377);
 A_380=iotaXBI( false,QUADio_0);
 A_382=iotaXII( 5,QUADio_0);
 A_383=dropIII(6,A_382);
 A_385=sameIIB(A_383,A_380);
 A_386=comaBBB(r_21,A_385);
 r_22=( A_386);
 A_389=iotaXBI( false,QUADio_0);
 A_391=iotaXII( 5,QUADio_0);
 A_393=DropCLONE13III(6,A_391,QUADio_0);
 A_395=sameIIB(A_393,A_389);
 A_396=comaBBB(r_22,A_395);
 r_23=( A_396);
 A_399=iotaXBI( false,QUADio_0);
 A_401=iotaXII( 5,QUADio_0);
 A_402=dropIII(-6,A_401);
 A_404=sameIIB(A_402,A_399);
 A_405=comaBBB(r_23,A_404);
 r_24=( A_405);
 A_408=iotaXBI( false,QUADio_0);
 A_410=iotaXII( 5,QUADio_0);
 A_411=dropIII(-6,A_410);
 A_413=sameIIB(A_411,A_408);
 A_414=comaBBB(r_24,A_413);
 r_25=( A_414);
 A_416=comaIBI([0, 0, 2, 3],[false,false,false,false]);
A_417=comaBII([false,false,false,true],A_416);
 A_418=rhoIII([3, 4],A_417);
 A_420=iotaXII( 4,QUADio_0);
 A_421=rhoIII([2, 2],A_420);
 A_422=takeIII([3, -4],A_421);
 A_424=sameIIB(A_422,A_418);
 A_425=comaBBB(r_25,A_424);
 r_26=( A_425);
 A_428=iotaXII( 4,QUADio_0);
 A_429=rhoIII([2, 2],A_428);
 A_431=TakeCLONE14III([3, -4],A_429,QUADio_0);
 A_433=iotaXII( 4,QUADio_0);
 A_434=rhoIII([2, 2],A_433);
 A_435=takeIII([3, -4],A_434);
 A_437=sameIIB(A_435,A_431);
 A_438=comaBBB(r_26,A_437);
 r_27=( A_438);
 A_441=iotaXII( 4,QUADio_0);
 A_442=rhoIII([2, 2],A_441);
 A_444=TakeCLONE15III([3, 4],A_442,QUADio_0);
 A_446=iotaXII( 4,QUADio_0);
 A_447=rhoIII([2, 2],A_446);
 A_448=takeIII([3, 4],A_447);
 A_450=sameIIB(A_448,A_444);
 A_451=comaBBB(r_27,A_450);
 r_28=( A_451);
 A_454=iotaXII( 4,QUADio_0);
 A_455=rhoIII([2, 2],A_454);
 A_457=TakeCLONE16III([-3, 4],A_455,QUADio_0);
 A_459=iotaXII( 4,QUADio_0);
 A_460=rhoIII([2, 2],A_459);
 A_461=takeIII([-3, 4],A_460);
 A_463=sameIIB(A_461,A_457);
 A_464=comaBBB(r_28,A_463);
 r_29=( A_464);
 A_467=iotaXII( 4,QUADio_0);
 A_468=rhoIII([2, 2],A_467);
 A_470=TakeCLONE17III([-3, -4],A_468,QUADio_0);
 A_472=iotaXII( 4,QUADio_0);
 A_473=rhoIII([2, 2],A_472);
 A_474=takeIII([-3, -4],A_473);
 A_476=sameIIB(A_474,A_470);
 A_477=comaBBB(r_29,A_476);
 r_30=( A_477);
 A_480=iotaXII( 20,QUADio_0);
 A_481=rhoIII([4, 5],A_480);
 A_483=TakeCLONE18III([2, 3],A_481,QUADio_0);
 A_485=iotaXII( 20,QUADio_0);
 A_486=rhoIII([4, 5],A_485);
 A_487=takeIII([2, 3],A_486);
 A_489=sameIIB(A_487,A_483);
 A_490=comaBBB(r_30,A_489);
 r_31=( A_490);
 A_493=iotaXII( 20,QUADio_0);
 A_494=rhoIII([4, 5],A_493);
 A_496=TakeCLONE19III([2, -3],A_494,QUADio_0);
 A_498=iotaXII( 20,QUADio_0);
 A_499=rhoIII([4, 5],A_498);
 A_500=takeIII([2, -3],A_499);
 A_502=sameIIB(A_500,A_496);
 A_503=comaBBB(r_31,A_502);
 r_32=( A_503);
 A_506=iotaXII( 20,QUADio_0);
 A_507=rhoIII([4, 5],A_506);
 A_509=TakeCLONE20III([-2, 3],A_507,QUADio_0);
 A_511=iotaXII( 20,QUADio_0);
 A_512=rhoIII([4, 5],A_511);
 A_513=takeIII([-2, 3],A_512);
 A_515=sameIIB(A_513,A_509);
 A_516=comaBBB(r_32,A_515);
 r_33=( A_516);
 A_519=iotaXII( 20,QUADio_0);
 A_520=rhoIII([4, 5],A_519);
 A_522=TakeCLONE21III([-2, -3],A_520,QUADio_0);
 A_524=iotaXII( 20,QUADio_0);
 A_525=rhoIII([4, 5],A_524);
 A_526=takeIII([-2, -3],A_525);
 A_528=sameIIB(A_526,A_522);
 A_529=comaBBB(r_33,A_528);
 r_34=( A_529);
 A_532=iotaXII( 12,QUADio_0);
 A_533=rhoIII([3, 4],A_532);
 A_535=DropCLONE22III([2, 2],A_533,QUADio_0);
 A_537=iotaXII( 12,QUADio_0);
 A_538=rhoIII([3, 4],A_537);
 A_539=dropIII([2, 2],A_538);
 A_541=sameIIB(A_539,A_535);
 A_542=comaBBB(r_34,A_541);
 r_35=( A_542);
 A_545=iotaXII( 12,QUADio_0);
 A_546=rhoIII([3, 4],A_545);
 A_548=DropCLONE23III([2, -2],A_546,QUADio_0);
 A_550=iotaXII( 12,QUADio_0);
 A_551=rhoIII([3, 4],A_550);
 A_552=dropIII([2, -2],A_551);
 A_554=sameIIB(A_552,A_548);
 A_555=comaBBB(r_35,A_554);
 r_36=( A_555);
 A_558=iotaXII( 12,QUADio_0);
 A_559=rhoIII([3, 4],A_558);
 A_561=DropCLONE24III([-2, 2],A_559,QUADio_0);
 A_563=iotaXII( 12,QUADio_0);
 A_564=rhoIII([3, 4],A_563);
 A_565=dropIII([-2, 2],A_564);
 A_567=sameIIB(A_565,A_561);
 A_568=comaBBB(r_36,A_567);
 r_37=( A_568);
 A_571=iotaXII( 12,QUADio_0);
 A_572=rhoIII([3, 4],A_571);
 A_574=DropCLONE25III([-2, -2],A_572,QUADio_0);
 A_576=iotaXII( 12,QUADio_0);
 A_577=rhoIII([3, 4],A_576);
 A_578=dropIII([-2, -2],A_577);
 A_580=sameIIB(A_578,A_574);
 A_581=comaBBB(r_37,A_580);
 r_38=( A_581);
 A_584=iotaXII( 12,QUADio_0);
 A_585=rhoIII([3, 4],A_584);
 A_587=DropCLONE26III(2,A_585,QUADio_0);
 A_589=iotaXII( 12,QUADio_0);
 A_590=rhoIII([3, 4],A_589);
 A_591=dropIII(2,A_590);
 A_593=sameIIB(A_591,A_587);
 A_594=comaBBB(r_38,A_593);
 r_39=( A_594);
 A_597=iotaXII( 12,QUADio_0);
 A_598=rhoIII([3, 4],A_597);
 A_600=DropCLONE27III(-2,A_598,QUADio_0);
 A_602=iotaXII( 12,QUADio_0);
 A_603=rhoIII([3, 4],A_602);
 A_604=dropIII(-2,A_603);
 A_606=sameIIB(A_604,A_600);
 A_607=comaBBB(r_39,A_606);
 r_40=( A_607);
 A_610=iotaXII( 12,QUADio_0);
 A_611=rhoIII([3, 4],A_610);
 A_613=DropCLONE28III([3, 2],A_611,QUADio_0);
 A_615=iotaXII( 12,QUADio_0);
 A_616=rhoIII([3, 4],A_615);
 A_617=dropIII([3, 2],A_616);
 A_619=sameIIB(A_617,A_613);
 A_620=comaBBB(r_40,A_619);
 r_41=( A_620);
 A_623=iotaXII( 12,QUADio_0);
 A_624=rhoIII([3, 4],A_623);
 A_626=DropCLONE29III([2, 4],A_624,QUADio_0);
 A_628=iotaXII( 12,QUADio_0);
 A_629=rhoIII([3, 4],A_628);
 A_630=dropIII([2, 5],A_629);
 A_632=sameIIB(A_630,A_626);
 A_633=comaBBB(r_41,A_632);
 r_42=( A_633);
 A_636=iotaXII( 12,QUADio_0);
 A_637=rhoIII([3, 4],A_636);
 A_639=DropCLONE30III([-3, 2],A_637,QUADio_0);
 A_641=iotaXII( 12,QUADio_0);
 A_642=rhoIII([3, 4],A_641);
 A_643=dropIII([-3, 2],A_642);
 A_645=sameIIB(A_643,A_639);
 A_646=comaBBB(r_42,A_645);
 r_43=( A_646);
 A_649=iotaXII( 12,QUADio_0);
 A_650=rhoIII([3, 4],A_649);
 A_652=DropCLONE31III([2, -5],A_650,QUADio_0);
 A_654=iotaXII( 12,QUADio_0);
 A_655=rhoIII([3, 4],A_654);
 A_656=dropIII([2, -5],A_655);
 A_658=sameIIB(A_656,A_652);
 A_659=comaBBB(r_43,A_658);
 r_44=( A_659);
 A_663=quadXBB( r_44,QUADpp_0,QUADpw_0);
 A_664=andslXBBQUICKSTOP( r_44);
 /* dsf scalar(s) */
A_668=barBBI(true,A_664);
 r_45=( A_668);
 A_672=quadXII( A_668,QUADpp_0,QUADpw_0);
 return(r_45);
}

inline int[.] TakeCLONE4BII(bool x, int[.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXBB( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXBI( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaBII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf scalar(s) */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_76=mpyBII(A_75,A_73);
 /* dsf scalar(s) */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf scalar(s) */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_83=mpyBII(A_82,A_80);
 /* dsf scalar(s) */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf scalar(s) */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE32XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf scalar(s) */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf scalar(s) */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.] TakeCLONE5III(int x, int y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf scalar(s) */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_76=mpyBII(A_75,A_73);
 /* dsf scalar(s) */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf scalar(s) */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_83=mpyBII(A_82,A_80);
 /* dsf scalar(s) */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf scalar(s) */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE33XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf scalar(s) */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf scalar(s) */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.] TakeCLONE6III(int x, int y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf scalar(s) */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_76=mpyBII(A_75,A_73);
 /* dsf scalar(s) */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf scalar(s) */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_83=mpyBII(A_82,A_80);
 /* dsf scalar(s) */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf scalar(s) */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE34XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf scalar(s) */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf scalar(s) */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline char[.] TakeCLONE7ICC(int x, char[.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBCC(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXCI( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXCI( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf scalar(s) */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_76=mpyBII(A_75,A_73);
 /* dsf scalar(s) */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf scalar(s) */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_83=mpyBII(A_82,A_80);
 /* dsf scalar(s) */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf scalar(s) */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE35XCC( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoICC(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toC(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf scalar(s) */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXCC( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf scalar(s) */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoICC(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline char[.] TakeCLONE8ICC(int x, char[.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBCC(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXCI( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXCI( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf scalar(s) */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_76=mpyBII(A_75,A_73);
 /* dsf scalar(s) */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf scalar(s) */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_83=mpyBII(A_82,A_80);
 /* dsf scalar(s) */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf scalar(s) */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE36XCC( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoICC(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toC(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf scalar(s) */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXCC( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf scalar(s) */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoICC(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline char[.] TakeCLONE9ICC(int x, char[.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBCC(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXCI( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXCI( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf scalar(s) */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_76=mpyBII(A_75,A_73);
 /* dsf scalar(s) */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf scalar(s) */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_83=mpyBII(A_82,A_80);
 /* dsf scalar(s) */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf scalar(s) */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE37XCC( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoICC(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toC(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf scalar(s) */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXCC( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf scalar(s) */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoICC(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.] TakeCLONE10III(int x, int[.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf scalar(s) */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_76=mpyBII(A_75,A_73);
 /* dsf scalar(s) */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf scalar(s) */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_83=mpyBII(A_82,A_80);
 /* dsf scalar(s) */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf scalar(s) */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE38XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf scalar(s) */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf scalar(s) */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.] DropCLONE11III(int x, int[.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_70=mpyBII(A_69,zr_0);
 /* dsf scalar(s) */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf scalar(s) */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf scalar(s) */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE39XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf scalar(s) */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.] DropCLONE12III(int x, int[.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_70=mpyBII(A_69,zr_0);
 /* dsf scalar(s) */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf scalar(s) */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf scalar(s) */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE40XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf scalar(s) */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.] DropCLONE13III(int x, int[.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf scalar(s) */
A_70=mpyBII(A_69,zr_0);
 /* dsf scalar(s) */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf scalar(s) */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf scalar(s) */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE41XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf scalar(s) */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.,.] TakeCLONE14III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf Check needed */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf Check needed */
A_76=mpyBII(A_75,A_73);
 /* dsf Check needed */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf Check needed */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf Check needed */
A_83=mpyBII(A_82,A_80);
 /* dsf Check needed */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf Check needed */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE42XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf Check needed */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf Check needed */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.,.] TakeCLONE15III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf Check needed */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf Check needed */
A_76=mpyBII(A_75,A_73);
 /* dsf Check needed */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf Check needed */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf Check needed */
A_83=mpyBII(A_82,A_80);
 /* dsf Check needed */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf Check needed */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE43XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf Check needed */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf Check needed */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.,.] TakeCLONE16III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf Check needed */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf Check needed */
A_76=mpyBII(A_75,A_73);
 /* dsf Check needed */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf Check needed */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf Check needed */
A_83=mpyBII(A_82,A_80);
 /* dsf Check needed */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf Check needed */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE44XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf Check needed */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf Check needed */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.,.] TakeCLONE17III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf Check needed */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf Check needed */
A_76=mpyBII(A_75,A_73);
 /* dsf Check needed */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf Check needed */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf Check needed */
A_83=mpyBII(A_82,A_80);
 /* dsf Check needed */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf Check needed */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE45XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf Check needed */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf Check needed */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.,.] TakeCLONE18III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf Check needed */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf Check needed */
A_76=mpyBII(A_75,A_73);
 /* dsf Check needed */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf Check needed */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf Check needed */
A_83=mpyBII(A_82,A_80);
 /* dsf Check needed */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf Check needed */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE46XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf Check needed */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf Check needed */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.,.] TakeCLONE19III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf Check needed */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf Check needed */
A_76=mpyBII(A_75,A_73);
 /* dsf Check needed */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf Check needed */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf Check needed */
A_83=mpyBII(A_82,A_80);
 /* dsf Check needed */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf Check needed */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE47XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf Check needed */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf Check needed */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.,.] TakeCLONE20III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf Check needed */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf Check needed */
A_76=mpyBII(A_75,A_73);
 /* dsf Check needed */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf Check needed */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf Check needed */
A_83=mpyBII(A_82,A_80);
 /* dsf Check needed */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf Check needed */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE48XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf Check needed */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf Check needed */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.,.] TakeCLONE21III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_59=slBII(true,y);
 y_0=( A_59);
 A_61=comaXII( x);
 x_0=( A_61);
 A_63=rhoXII( y_0);
 shpy_0=( A_63);
 /* dsf scalar(s) */
A_65=mpyBII(false,shpy_0);
 zr_0=( A_65);
 A_67=rhoXII( y_0);
 A_68=rhoXII( x_0);
 A_69=dropIII(A_68,A_67);
 A_70=comaIII(x_0,A_69);
 vext_0=( A_70);
 A_72=barXII( vext_0);
 /* dsf Check needed */
A_73=barIII(A_72,shpy_0);
 /* dsf scalar(s) */
A_75=ltIBB(vext_0,false);
 /* dsf Check needed */
A_76=mpyBII(A_75,A_73);
 /* dsf Check needed */
A_77=maxIII(zr_0,A_76);
 lb_0=( A_77);
 /* dsf Check needed */
A_79=plusIII(shpy_0,vext_0);
 /* dsf scalar(s) */
A_80=maxBII(false,A_79);
 /* dsf scalar(s) */
A_82=ltIBB(vext_0,false);
 /* dsf Check needed */
A_83=mpyBII(A_82,A_80);
 /* dsf Check needed */
A_84=maxIII(zr_0,A_83);
 ylb_0=( A_84);
 A_86=modXII( vext_0);
 shpz_0=( A_86);
 /* dsf Check needed */
A_88=minIII(shpz_0,shpy_0);
 ub_0=( A_88);
 A_90=FillCLONE49XII( y_0);
 A_91=mpyslXIIQUICKSTOP( shpz_0);
 A_95=rhoIII(A_91,A_90);
 r_0=( A_95);
 A_97=mpyslXIIQUICKSTOP( ub_0);
 A_102=iotaXII( A_97,QUADio);
 A_CTR103_= 0;
A_CTR103z_ = (shape(A_102)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR103_ <= A_CTR103z_; A_CTR103_++){
i_0 = A_102[[A_CTR103_]];
 A_105=utakIII(ub_0,i_0);
 iv_0=( A_105);
 /* dsf Check needed */
A_107=plusIII(ylb_0,iv_0);
 A_108=dtakIII(shpy_0,A_107);
 A_110=comaXII( y_0);
 A_109= ABC(toi(A_108)-QUADio,shape(A_110)[0]);
A_112=A_110[[A_109]];
 el_0=( A_112);
 /* dsf Check needed */
A_114=plusIII(lb_0,iv_0);
 A_115=dtakIII(shpz_0,A_114);
 A_116= ABC(toi(A_115)-QUADio,shape(r_2)[0]);
A_118=inds0(r_2,A_116,el_0);
 r_2=( A_118);
 }
 A_121=rhoIII(shpz_0,r_2);
 r_3=( A_121);
 return(r_3);
}

inline int[.,.] DropCLONE22III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf Check needed */
A_70=mpyBII(A_69,zr_0);
 /* dsf Check needed */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf Check needed */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf Check needed */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE50XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf Check needed */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.,.] DropCLONE23III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf Check needed */
A_70=mpyBII(A_69,zr_0);
 /* dsf Check needed */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf Check needed */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf Check needed */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE51XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf Check needed */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.,.] DropCLONE24III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf Check needed */
A_70=mpyBII(A_69,zr_0);
 /* dsf Check needed */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf Check needed */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf Check needed */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE52XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf Check needed */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.,.] DropCLONE25III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf Check needed */
A_70=mpyBII(A_69,zr_0);
 /* dsf Check needed */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf Check needed */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf Check needed */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE53XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf Check needed */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.,.] DropCLONE26III(int x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf Check needed */
A_70=mpyBII(A_69,zr_0);
 /* dsf Check needed */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf Check needed */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf Check needed */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE54XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf Check needed */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.,.] DropCLONE27III(int x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf Check needed */
A_70=mpyBII(A_69,zr_0);
 /* dsf Check needed */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf Check needed */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf Check needed */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE55XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf Check needed */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.,.] DropCLONE28III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf Check needed */
A_70=mpyBII(A_69,zr_0);
 /* dsf Check needed */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf Check needed */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf Check needed */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE56XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf Check needed */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.,.] DropCLONE29III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf Check needed */
A_70=mpyBII(A_69,zr_0);
 /* dsf Check needed */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf Check needed */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf Check needed */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE57XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf Check needed */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.,.] DropCLONE30III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf Check needed */
A_70=mpyBII(A_69,zr_0);
 /* dsf Check needed */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf Check needed */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf Check needed */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE58XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf Check needed */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int[.,.] DropCLONE31III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_56=slBII(true,y);
 y_0=( A_56);
 A_58=comaXII( x);
 x_0=( A_58);
 A_60=rhoXII( y_0);
 shpy_0=( A_60);
 /* dsf scalar(s) */
A_62=mpyBII(false,shpy_0);
 zr_0=( A_62);
 A_64=rhoXII( x_0);
 A_65=dropIII(A_64,zr_0);
 A_66=comaIII(x_0,A_65);
 vext_0=( A_66);
 /* dsf scalar(s) */
A_69=ltIBB(vext_0,false);
 /* dsf Check needed */
A_70=mpyBII(A_69,zr_0);
 /* dsf Check needed */
A_71=maxIII(vext_0,A_70);
 ylb_0=( A_71);
 A_73=modXII( vext_0);
 /* dsf Check needed */
A_74=barIII(shpy_0,A_73);
 /* dsf scalar(s) */
A_75=maxBII(false,A_74);
 shpz_0=( A_75);
 /* dsf Check needed */
A_77=minIII(shpz_0,shpy_0);
 ub_0=( A_77);
 A_79=FillCLONE59XII( y_0);
 A_80=mpyslXIIQUICKSTOP( shpz_0);
 A_84=rhoIII(A_80,A_79);
 r_0=( A_84);
 A_86=mpyslXIIQUICKSTOP( ub_0);
 A_91=iotaXII( A_86,QUADio);
 A_CTR92_= 0;
A_CTR92z_ = (shape(A_91)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR92_ <= A_CTR92z_; A_CTR92_++){
i_0 = A_91[[A_CTR92_]];
 A_94=utakIII(ub_0,i_0);
 iv_0=( A_94);
 /* dsf Check needed */
A_96=plusIII(ylb_0,iv_0);
 A_97=dtakIII(shpy_0,A_96);
 A_99=comaXII( y_0);
 A_98= ABC(toi(A_97)-QUADio,shape(A_99)[0]);
A_101=A_99[[A_98]];
 el_0=( A_101);
 A_103=dtakIII(shpz_0,iv_0);
 A_104= ABC(toi(A_103)-QUADio,shape(r_2)[0]);
A_106=inds0(r_2,A_104,el_0);
 r_2=( A_106);
 }
 A_109=rhoIII(shpz_0,r_2);
 r_3=( A_109);
 return(r_3);
}

inline int FillCLONE32XII(int[.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE33XII(int[.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE34XII(int[.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline char FillCLONE35XCC(char[.] y )
{ 
/*
 ?
*/
A_20=rhoBCC(false,y);
 A_21=bslBCC(false,A_20);
 A_22=rhoCCC([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline char FillCLONE36XCC(char[.] y )
{ 
/*
 ?
*/
A_20=rhoBCC(false,y);
 A_21=bslBCC(false,A_20);
 A_22=rhoCCC([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline char FillCLONE37XCC(char[.] y )
{ 
/*
 ?
*/
A_20=rhoBCC(false,y);
 A_21=bslBCC(false,A_20);
 A_22=rhoCCC([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE38XII(int[.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE39XII(int[.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE40XII(int[.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE41XII(int[.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE42XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE43XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE44XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE45XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE46XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE47XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE48XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE49XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE50XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE51XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE52XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE53XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE54XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE55XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE56XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE57XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE58XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}

inline int FillCLONE59XII(int[.,.] y )
{ 
/*
 ?
*/
A_20=rhoBII(false,y);
 A_21=bslBII(false,A_20);
 A_22=rhoCII([:char],A_21);
r_0=( A_22);
 return(r_0);
}


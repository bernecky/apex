use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3013.dws2012-11-07 10:35:22.059 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline double[+] starXID(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : starXDD(toD(y[iv]));
        } : genarray(shape(y), 0.0d);
  return(z);
}

inline double[+] logXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : logXDD(toD(y[iv]));
        } : genarray(shape(y), 0.0d);
  return(z);
}

inline int[+] plusXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : plusXII(toI(y[iv]));
        } : genarray(shape(y), 0);
  return(z);
}

inline int[+] barXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : barXII(toI(y[iv]));
        } : genarray(shape(y), 0);
  return(z);
}

inline int[+] mpyXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : mpyXII(toI(y[iv]));
        } : genarray(shape(y), 0);
  return(z);
}

inline bool[+] notXBB(bool[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : notXBB(toB(y[iv]));
        } : genarray(shape(y), false);
  return(z);
}

inline bool[+] notXIB(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : notXBB(toB(y[iv]));
        } : genarray(shape(y), false);
  return(z);
}

inline double[+] divXID(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : divXDD(toD(y[iv]));
        } : genarray(shape(y), 0.0d);
  return(z);
}

inline double[+] divXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : divXDD(toD(y[iv]));
        } : genarray(shape(y), 0.0d);
  return(z);
}

inline int[+] minXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : minXII(toI(y[iv]));
        } : genarray(shape(y), 0);
  return(z);
}

inline int[+] maxXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : maxXII(toI(y[iv]));
        } : genarray(shape(y), 0);
  return(z);
}

inline double[+] divXBD(bool[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : divXDD(toD(y[iv]));
        } : genarray(shape(y), 0.0d);
  return(z);
}

inline double[+] circXID(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : circXDD(toD(y[iv]));
        } : genarray(shape(y), 0.0d);
  return(z);
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] modBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : modIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] barIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : barIII(xel,yel);
        } : genarray(sx, 0);
  return(z);
}






inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] barIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : barIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] mpyIDD(int[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : mpyIDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline bool[.] rhoIBB(int x, bool[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIBB( [toi(x)],y);
 return(z);
}


inline int[.] rhoIII(int x, int[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIII( [toi(x)],y);
 return(z);
}


inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.] iotaXBI(bool y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline bool[.] comaBBB(bool x, bool[.] y)
{/* SxV catenate first (or last) axis */
 return([toB(x)]++toB(y));
}

inline int[.] comaIBI(int[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline bool sameDDB(double[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline bool sameIDB(int[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameBBB(bool[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqBBB(toB( x),  toB( y)))));
  return(z);
}



inline bool sameBDB(bool[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline double starXDD (double y)
{ return(pow(2.718281828459046,tod(y)));
}

inline double logXDD (double y)
{ return(log(tod(y)));
}

inline int plusXII(int y)
{ return(y);
}

inline int barXII(int y)
{ return(-y);
}

inline int mpyXII(int y)
{ /* signum int/double */
   if( toI(0) == y) {
    z = 0;
  } else {
    if( toI(0) < y) {
      z = 1;
    } else {
      z = -1;
    }
  }
  return(z);
}

inline bool notXBB(bool y)
{ /* Boolean NOT */
  return(!toB(y));
}

inline double divXDD(double y)
{ return(1.0/tod(y));
}

inline int minXII(int y)
{ return(y);
}

inline int maxXII(int y)
{ /* Boolean/integer ceiling (NOP) */
  return(y);
}

inline double circXDD (double y)
{ return(3.1415926535897632*tod(y));
}
inline int modIII(int x, int y)
{ /* SxS residue (aka modulo) */
  /* (x residue y) <-->   y-x times floor y divide x + 0 = x  */
  /* See model residueI in workspace UTDScalarI.dws */
  x = ItoI(x);
  y = ItoI(y);
  if( 0 != x) {
    q = y / x;
    z = y - ( x * q);
  } else {
    z = y;
  }

  if( z != 0) {
    if( mpyXII( x) != mpyXII( y)) {
      z = z + x;
    }
  }
 return(z);
}


inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline double mpyIDD(int x, double y)
{ return(ItoD(x)*DtoD(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline int[+] barIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline bool[+] eqDDB(double[+] x, double[+] y,double QUADct)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqDDB(xel,yel, QUADct);
        } : genarray(sx, false);
  return(z);
}






inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sx, false);
  return(z);
}






inline bool[+] eqBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqBBB(xel,yel);
        } : genarray(sx, false);
  return(z);
}






inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((DtoD(x) == DtoD(y)) || APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool eqBBB(bool x, bool y)
{ /* A=B on non-doubles */
 return(BtoB(x) == BtoB(y));
}

inline bool[+] eqDDB(double x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : eqDDB(xel,yel, QUADct);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqDDB(double[+] x, double y,double QUADct)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqDDB(xel,y, QUADct);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : eqBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[.] floorXII(int[.] y )
{ 
/*
 ?
*/
/* dsf scalar(s) */
A_20=modBII(true,y);
/* dsf clique */
A_21=barIII(y,A_20);
 r_0=( A_21);
 return(r_0);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADct_1=( 1.0e-14);
 QUADpp_1=( 17);
 p_0=( [1.0, 2.7182818284590455, 7.389056098930651, 20.085536923187668, 54.59815003314424]);
 A_76=iotaXII( 5,QUADio_0);
 A_77=starXID( A_76);
 A_79=sameDDB(A_77,p_0,QUADct_1);
 r_0=( A_79);
 A_81=logXDD( p_0);
 A_83=iotaXII( 5,QUADio_0);
 A_85=sameIDB(A_83,A_81,QUADct_1);
 A_86=comaBBB(r_0,A_85);
 r_1=( A_86);
 A_89=iotaXII( 20,QUADio_0);
 /* dsf scalar(s) */
A_90=plusIII(-10,A_89);
 A_91=plusXII( A_90);
 A_93=iotaXII( 20,QUADio_0);
 /* dsf scalar(s) */
A_94=plusIII(-10,A_93);
 A_96=sameIIB(A_94,A_91);
 A_97=comaBBB(r_1,A_96);
 r_2=( A_97);
 A_100=iotaXII( 20,QUADio_0);
 /* dsf scalar(s) */
A_101=plusIII(-10,A_100);
 A_102=barXII( A_101);
 A_104=iotaXII( 20,QUADio_0);
 /* dsf scalar(s) */
A_105=barIII(10,A_104);
 A_107=sameIIB(A_105,A_102);
 A_108=comaBBB(r_2,A_107);
 r_3=( A_108);
 A_111=iotaXII( 20,QUADio_0);
 /* dsf scalar(s) */
A_112=plusIII(-10,A_111);
 A_113=mpyXII( A_112);
 A_114=rhoIBB(9,true);
 A_115=comaBBB(false,A_114);
 A_116=rhoIII(10,-1);
 A_117=comaIBI(A_116,A_115);
 A_119=sameIIB(A_117,A_113);
 A_120=comaBBB(r_3,A_119);
 r_4=( A_120);
 A_122=notXBB( [true,false,true]);
 A_124=sameBBB([false,true,false],A_122);
 A_125=comaBBB(r_4,A_124);
 r_5=( A_125);
 /* dsf scalar(s) */
A_127=barIII(2,[1, 2, 1]);
 A_128=notXIB( A_127);
 A_130=sameBBB([false,true,false],A_128);
 A_131=comaBBB(r_5,A_130);
 r_6=( A_131);
 A_134=iotaXII( 5,QUADio_0);
 /* dsf scalar(s) */
A_135=plusBII(true,A_134);
 A_136=divXID( A_135);
 A_137=divXDD( A_136);
 A_139=iotaXII( 5,QUADio_0);
 /* dsf scalar(s) */
A_140=plusBII(true,A_139);
 A_142=sameIDB(A_140,A_137,QUADct_1);
 A_143=comaBBB(r_6,A_142);
 r_7=( A_143);
 A_146=iotaXII( 20,QUADio_0);
 /* dsf scalar(s) */
A_147=plusIII(-10,A_146);
 A_149=minXII( A_147);
 A_151=iotaXII( 20,QUADio_0);
 /* dsf scalar(s) */
A_152=plusIII(-10,A_151);
 A_153=floorXII( A_152);
 A_155=sameIIB(A_153,A_149);
 A_156=comaBBB(r_7,A_155);
 r_8=( A_156);
 A_159=iotaXII( 20,QUADio_0);
 /* dsf scalar(s) */
A_160=plusIII(-10,A_159);
 A_162=maxXII( A_160);
 A_164=iotaXII( 20,QUADio_0);
 /* dsf scalar(s) */
A_165=plusIII(-10,A_164);
 A_166=barXII( A_165);
 A_167=floorXII( A_166);
 A_168=barXII( A_167);
 A_170=sameIIB(A_168,A_162);
 A_171=comaBBB(r_8,A_170);
 r_9=( A_171);
 A_174=iotaXBI( false,QUADio_0);
 A_175=mpyXII( A_174);
 A_177=iotaXBI( false,QUADio_0);
 A_179=sameIIB(A_177,A_175);
 A_180=comaBBB(r_9,A_179);
 r_10=( A_180);
 A_182=rhoIBB([2, 3, 0],false);
 A_183=divXBD( A_182);
 A_184=rhoIBB([2, 3, 0],false);
 A_186=sameBDB(A_184,A_183,QUADct_1);
 A_187=comaBBB(r_10,A_186);
 r_11=( A_187);
 A_190=iotaXII( 5,QUADio_0);
 A_191=circXID( A_190);
 A_193=iotaXII( 5,QUADio_0);
 /* dsf scalar(s) */
A_194=mpyIDD(A_193,3.141592653589793);
 A_196=sameDDB(A_194,A_191,QUADct_1);
 A_197=comaBBB(r_11,A_196);
 r_12=( A_197);
 A_201=quadXBB( r_12,QUADpp_1,QUADpw_0);
 A_202=andslXBBQUICKSTOP( r_12);
 /* dsf scalar(s) */
A_206=barBBI(true,A_202);
 r_13=( A_206);
 A_210=quadXII( A_206,QUADpp_1,QUADpw_0);
 return(r_13);
}


use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3013.dws2012-11-15 09:56:06.548 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] mpyIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[.] comaXBB(bool y)
{ /* Ravel of scalar */
        return([y]);
}

inline int[+] rot1III(int x, int[+] y)
{ /* Scalar rotate first axis non-scalar */
 ix = toi(x);
 rows = shape(y)[0];
 cellshape = drop([1], shape(y));
 defcell = genarray(cellshape, 0);
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[.] rhoIII(int x, int[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIII( [toi(x)],y);
 return(z);
}


inline int[.] iotaXBI(bool y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline int[.] comaBII(bool x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[.] comaIBI(int[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline bool[.] comaBBB(bool x, bool[.] y)
{/* SxV catenate first (or last) axis */
 return([toB(x)]++toB(y));
}

inline bool[.] comaBBB(bool[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toB(x)++toB(y));
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] comaBII(bool[.] x, int y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline int[.] comaIBI(int x, bool[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[+] comaIII(int[+] x, int[+] y)
{/* AxA last axis catenate. Ranks match */
 cellshape = (take([-1],shape(x)))+take([-1],shape(y));
 cell = genarray(cellshape, 0);
 z = with {
         (. <= iv <= .)
                : toI(x[iv])++toI(y[iv]);
        } : genarray(drop([-1], shape(x)), cell);
 return(z);
}


inline int[+] comaIBI(int[+] x, bool y)
{ /* A,S last-axis catenate */
 frame = drop([-1],shape(x));
 cell = genarray([1+shape(x)[dim(x)-1]],0);
 z = with {
        (. <= iv <= .)
                : toI(x[iv])++[toI(y)];
        }: genarray(frame, cell);
 return(z);
}


inline int[+] comaIIILG(int[+] x, int[+] y)
{/* AxA last axis catenate. Left rank greater */
 frameshape = drop([-1],shape(x));
 cellshape  = take([-1],shape(x)) + [1];
 cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : toI(x[iv])++toI([y[iv]]);
        }: genarray(frameshape, cell);
 return(z);
}

inline bool[2] combBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline int[.] combBII(bool x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[.] combIBI(int[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline bool[.] combBBB(bool x, bool[.] y)
{/* SxV catenate first (or last) axis */
 return([toB(x)]++toB(y));
}

inline bool[.] combBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline bool[.] combBBB(bool[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toB(x)++toB(y));
}

inline int[.] combIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] combBII(bool[.] x, int y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline int[.] combIBI(int x, bool[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[+] combIII(int[+] x, int[+] y)
{/* AxA first axis catenate. Ranks match */
 return(toI(x)++toI(y));
}

inline int[+] combIII(int[+] x, int y)
{ /* AxS first-axis catenate */
  cell = genarray([1]++drop([1],shape(x)),toI(y));
  return(toI(x)++cell);
}

inline int[+] combIII(int x, int[+] y)
{ /* SxA first-axis catenate */
  cell = genarray([1]++drop([1],shape(y)),toI(x));
  return(cell++toI(y));
}

inline int[+] combIIILG(int[+] x, int[+] y)
{/* AxA first axis catenate. Left rank greater */
 return(toI(x)++toI([y]));
}
inline int[+] combIIIRG(int[+] x, int[+] y)
{/* AxA first axis catenate. Right rank greater */
 return(toI([x])++toI(y));
}
inline bool sameBBB(bool[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqBBB(toB( x),  toB( y)))));
  return(z);
}



inline bool sameIBB(int[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline int[*] indr(int[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}




inline int[+] indsxx0(int[+] X, int  I2, bool Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 for(i0=0; i0<shape(X)[[0]]; i0++){
 for(i1=0; i1<shape(X)[[1]]; i1++){

 z[[i0,i1,I2]]=BtoI((Y));

 }
 }

 return(z);
}



inline int[+] indsxx0(int[+] X, int  I2, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){
 for(i1=0; i1<shape(X)[[1]]; i1++){

 z[[i0,i1,I2]]=ItoI((Y[[i0,i1]]));

 }
 }

 return(z);
}



inline int[+] inds0xx(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-2],shape(X)),Yin);

 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline int[*] jotdotplusIII(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0);
 z = with {
        (. <= iv <= .) {
         xitem = toI(x[iv]);
        } : plusIII(xitem, toI(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqBBB(xel,yel);
        } : genarray(sx, false);
  return(z);
}






inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sx, false);
  return(z);
}






inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int VectorRotateAmount(int x, int y)
{ /* Normalize x rotate for array of shape y on selected axis */
 /* normalize rotation count */

if ((0==x) || (0==y))
  z = 0;
else if (x>0)
        z = _mod_SxS_(x,y);
     else
        z = y - _mod_SxS_(abs(x),y);
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline bool eqBBB(bool x, bool y)
{ /* A=B on non-doubles */
 return(BtoB(x) == BtoB(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool[+] eqBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : eqBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 S0_0=( false);
 S1_0=( true);
 A_122=comaXBB( true);
 V1_0=( A_122);
 A_124=comaXBB( false);
 V0_0=( A_124);
 A_127=iotaXBI( false,QUADio_0);
 Vn_0=( A_127);
 V10100_0=( [true,false,true,false,false]);
 V101011_0=( [true,false,true,false,true,true]);
 A_132=iotaXII( 24,QUADio_0);
 A_133=rhoIII([2, 3, 4],A_132);
 M234_0=( A_133);
 A_135=comaBBB(S0_0,S1_0);
 A_137=sameBBB(A_135,[false,true]);
 r_0=( A_137);
 A_139=comaXBB( S1_0);
 A_140=comaBII(S1_0,Vn_0);
 A_142=sameIBB(A_140,A_139);
 A_143=comaBBB(r_0,A_142);
 r_1=( A_143);
 A_145=comaXBB( S1_0);
 A_146=comaIBI(Vn_0,S1_0);
 A_148=sameIBB(A_146,A_145);
 A_149=comaBBB(r_1,A_148);
 r_2=( A_149);
 A_151=comaBBB(S0_0,V1_0);
 A_153=sameBBB(A_151,[false,true]);
 A_154=comaBBB(r_2,A_153);
 r_3=( A_154);
 A_156=comaBBB(V1_0,S0_0);
 A_158=sameBBB(A_156,[true,false]);
 A_159=comaBBB(r_3,A_158);
 r_4=( A_159);
 A_161=comaBBB(V0_0,V1_0);
 A_162=comaBBB(V1_0,A_161);
 A_164=sameBBB(A_162,[true,false,true]);
 A_165=comaBBB(r_4,A_164);
 r_5=( A_165);
 A_167=comaIII(Vn_0,Vn_0);
 A_169=sameIIB(A_167,Vn_0);
 A_170=comaBBB(r_5,A_169);
 r_6=( A_170);
 A_172=comaBII(V10100_0,23);
 A_174=sameIIB(A_172,[1, 0, 1, 0, 0, 23]);
 A_175=comaBBB(r_6,A_174);
 r_7=( A_175);
 A_177=comaIBI(23,V10100_0);
 A_179=sameIIB(A_177,[23, 1, 0, 1, 0, 0]);
 A_180=comaBBB(r_7,A_179);
 r_8=( A_180);
 A_183=iotaXII( 4,QUADio_0);
 A_184=rhoIII(8,A_183);
 A_186=iotaXII( 6,QUADio_0);
 /* dsf scalar(s) */
A_187=mpyIII(4,A_186);
 A_188=rhoIII([2, 3],A_187);
 A_189=jotdotplusIII(A_188,A_184);
 A_196=comaIII(M234_0,M234_0);
 A_198=sameIIB(A_196,A_189);
 A_199=comaBBB(r_8,A_198);
 r_9=( A_199);
 A_205=iotaXII( 4,QUADio_0);
 A_207=iotaXII( 6,QUADio_0);
 /* dsf scalar(s) */
A_208=mpyIII(4,A_207);
 A_209=rhoIII([2, 3],A_208);
 A_210=jotdotplusIII(A_209,A_205);
 A_201= ABC(toi([0, 1, 2, 3, 0])-QUADio_0,shape(A_210)[2]);
A_218=indrfr(2,A_210,A_201);
z_0=( A_218);
 A_220= ABC(toi(4)-QUADio_0,shape(z_0)[2]);
A_224=indsxx0(z_0,A_220,false);
 z_1=( A_224);
 A_226=comaIBI(M234_0,false);
 A_228=sameIIB(A_226,z_1);
 A_229=comaBBB(r_9,A_228);
 r_10=( A_229);
 A_231=rhoIII([2, 3],[10, 20, 30, 40, 50, 60]);
 A_232= ABC(toi(4)-QUADio_0,shape(z_1)[2]);
A_236=indsxx0(z_1,A_232,A_231);
 z_2=( A_236);
 A_238=rhoIII([2, 3],[10, 20, 30, 40, 50, 60]);
 A_239=comaIIILG(M234_0,A_238);
 A_241=sameIIB(A_239,z_2);
 A_242=comaBBB(r_10,A_241);
 r_11=( A_242);
 A_244=combBBB(S0_0,S0_0);
 A_246=sameBBB(A_244,[false,false]);
 A_247=comaBBB(r_11,A_246);
 r_12=( A_247);
 A_249=comaXBB( S1_0);
 A_250=combBII(S1_0,Vn_0);
 A_252=sameIBB(A_250,A_249);
 A_253=comaBBB(r_12,A_252);
 r_13=( A_253);
 A_255=comaXBB( S1_0);
 A_256=combIBI(Vn_0,S1_0);
 A_258=sameIBB(A_256,A_255);
 A_259=comaBBB(r_13,A_258);
 r_14=( A_259);
 A_261=combBBB(S0_0,V1_0);
 A_263=sameBBB(A_261,[false,true]);
 A_264=comaBBB(r_14,A_263);
 r_15=( A_264);
 A_266=combBBB(V1_0,S0_0);
 A_268=sameBBB(A_266,[true,false]);
 A_269=comaBBB(r_15,A_268);
 r_16=( A_269);
 A_271=combBBB(V0_0,V1_0);
 A_272=combBBB(V1_0,A_271);
 A_274=sameBBB(A_272,[true,false,true]);
 A_275=comaBBB(r_16,A_274);
 r_17=( A_275);
 A_277=combIII(Vn_0,Vn_0);
 A_279=sameIIB(A_277,Vn_0);
 A_280=comaBBB(r_17,A_279);
 r_18=( A_280);
 A_282=combBII(V10100_0,23);
 A_284=sameIIB(A_282,[1, 0, 1, 0, 0, 23]);
 A_285=comaBBB(r_18,A_284);
 r_19=( A_285);
 A_287=combIBI(23,V10100_0);
 A_289=sameIIB(A_287,[23, 1, 0, 1, 0, 0]);
 A_290=comaBBB(r_19,A_289);
 r_20=( A_290);
 A_293=iotaXII( 24,QUADio_0);
 A_294=rhoIII([4, 3, 4],A_293);
 A_295=combIII(M234_0,M234_0);
 A_297=sameIIB(A_295,A_294);
 A_298=comaBBB(r_20,A_297);
 r_21=( A_298);
 A_301=iotaXII( 24,QUADio_0);
 A_302=rhoIII([3, 3, 4],A_301);
 z_3=( A_302);
 A_306= ABC(toi(2)-QUADio_0,shape(z_3)[0]);
A_308=inds0xx(z_3,A_306,5);
 z_4=( A_308);
 A_310=combIII(M234_0,5);
 A_312=sameIIB(A_310,z_4);
 A_313=comaBBB(r_21,A_312);
 r_22=( A_313);
 A_315=rot1III(-1,z_4);
 A_316=combIII(5,M234_0);
 A_318=sameIIB(A_316,A_315);
 A_319=comaBBB(r_22,A_318);
 r_23=( A_319);
 A_321=rhoIII([3, 4],5);
 A_322=combIIILG(M234_0,A_321);
 A_324=sameIIB(A_322,z_4);
 A_325=comaBBB(r_23,A_324);
 r_24=( A_325);
 A_327=rot1III(-1,z_4);
 A_328=rhoIII([3, 4],5);
 A_329=combIIIRG(A_328,M234_0);
 A_331=sameIIB(A_329,A_327);
 A_332=comaBBB(r_24,A_331);
 r_25=( A_332);
 A_336=quadXBB( r_25,QUADpp_0,QUADpw_0);
 A_337=andslXBBQUICKSTOP( r_25);
 /* dsf scalar(s) */
A_341=barBBI(true,A_337);
 r_26=( A_341);
 A_345=quadXII( A_341,QUADpp_0,QUADpw_0);
 return(r_26);
}


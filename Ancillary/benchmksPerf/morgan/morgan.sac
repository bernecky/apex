use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac30142019-07-06 11:36:47.922 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barXII(int y)
{ return(-y);
}

inline double[+] modXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : modXDD(toD(y[iv]));
        } : genarray(shape(y), 0.0d);
  return(z);
}

inline int barIBI(int x, bool y)
{ return(ItoI(x)-BtoI(y));
}

inline int starIII(int x, int y)
{  /* number to integer power */
  z = ItoI( 1);
  for( i=0; i<ItoI( y); i++) {
    z = z * ItoI(x);
  }
  return( z);
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double[+] plusDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] barDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : barDDD(xel,yel);
        } : genarray(sy, 0.0d);
  return(z);
}






inline double[+] starDID(double[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : starDID(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] mpyDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : mpyDDD(xel,yel);
        } : genarray(sy, 0.0d);
  return(z);
}






inline double[+] divDID(double[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : divDID(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] starDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : starDDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] plusDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusDDD(xel,yel);
        } : genarray(sy, 0.0d);
  return(z);
}






inline double[+] divDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : divDDD(xel,yel);
        } : genarray(sy, 0.0d);
  return(z);
}






inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double[*] rhoIDD(int[.] x, double[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0.0d);
   return( z);
}



inline double[*] dropIDD(int[.] x, double[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[2] comaBII(bool x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline double[+] comaBDD(bool x, double[+] y)
{ /* S,A last-axis catenate */
 frame = drop([-1],shape(y));
 cell = genarray([1+shape(y)[dim(y)-1]],0.0d);
 z = with {
        (. <= iv <= .)
                : [toD(x)]++toD(y[iv]);
        }: genarray ( frame, cell);
 return(z);
}

inline double[*] indr(double[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline double[.,.] plusbslXDD(double[.,.] y)
{ /* Scan of matrix along last axis */
defcell = genarray(take([-1], shape(y)), 0.0d);
z = with{
        (. <= iv <= .) :  plusbslXDD(y[iv]);
        } : genarray(drop([-1],shape(y)), defcell);
 return(z);
}


inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : DtoD(y[lim-iv]);
       } :  fold( plusDDD, ItoD(0));
  return(z);
}


inline double modXDD(double y)
{ return(abs(toD(y)));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline double starDID(double x, int y)
{  /* number to integer power */
  z = ItoD( 1);
  for( i=0; i<ItoI( y); i++) {
    z = z * DtoD(x);
  }
  return( z);
}

inline double mpyDDD(double x, double y)
{ return(DtoD(x)*DtoD(y));
}

inline double divDID(double x, int y)
{ dx = DtoD(x);
  dy = ItoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline double starDDD(double x, double y)
{ return(pow(DtoD(x),DtoD(y)));
}

inline double divDDD(double x, double y)
{ dx = DtoD(x);
  dy = DtoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline double[+] barDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : barDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] barDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barDDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] mpyDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : mpyDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] mpyDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : mpyDDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] plusDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] plusDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusDDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] divDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : divDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] divDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : divDDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[*] indrfr(int fr, double[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline double[*] indrfr0(double[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline double[*] indrfr(int fr, double[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0.0d);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline double[.] plusbslXDD(double[.] y)
{ /* Scan of vector */
/* This does the scan in the wrong direction, but since
 * we assume associative functions only, it should be ok.
 */
 size = shape(y);
 z = genarray(size,ItoD(0));
 if (0 != size[[0]]) {
        /* real work to do */
        z[[0]] = DtoD(y[[0]]); /* Not sure about the coercion... */
        for ( i=1; i<size[[0]]; i++) {
                z[[i]] = plusDDD(DtoD(z[[i-1]]),DtoD(y[[i]]));
        }
  }
 return(z);
}


inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline double[.,.,.] GenArgXID(int[.] siz,int QUADio)
{ 
/*
 ?
*/
A_21=iotaXII( 100,QUADio);
 /* dsf scalar(s) */
A_22=plusDID(0.5,A_21);
A_23=rhoIDD(siz,A_22);
 r_0=( A_23);
 return(r_0);
}

inline double[.,.] MSUMIDD(int N, double[.,.] A)
{ 
/*
 ?
*/
A_23=plusbslXDD( A);
 T_0=( A_23);
 A_28=barXII( N);
 A_29=comaBII(false,A_28);
 A_30=dropIDD(A_29,T_0);
 A_31=comaBDD(false,A_30);
 /* dsf scalar(s) */
A_32=barIBI(N,true);
 A_33=comaBII(false,A_32);
 A_34=dropIDD(A_33,T_0);
 /* dsf Check needed */
A_35=barDDD(A_34,A_31);
R_0=( A_35);
 return(R_0);
}

inline double[.,.] morganIDD(int N, double[.,.,.] A,int QUADio)
{ 
/*
 ?
*/
A_46= ABC(toi(false)-QUADio,shape(A)[0]);
A_48=A[[A_46]];
X_0=( A_48);
 A_52= ABC(toi(true)-QUADio,shape(A)[0]);
A_54=A[[A_52]];
 Y_0=( A_54);
 A_56=MSUMIDD(N,X_0);
 SX_0=( A_56);
 A_58=MSUMIDD(N,Y_0);
 SY_0=( A_58);
 /* dsf scalar(s) */
A_60=starDID(X_0,2);
 A_61=MSUMIDD(N,A_60);
 SX2_0=( A_61);
 /* dsf scalar(s) */
A_63=starDID(Y_0,2);
 A_64=MSUMIDD(N,A_63);
 SY2_0=( A_64);
 /* dsf Check needed */
A_66=mpyDDD(X_0,Y_0);
 A_67=MSUMIDD(N,A_66);
 SXY_0=( A_67);
 /* dsf scalar(s) */
A_69=divDID(SY_0,N);
 /* dsf scalar(s) */
A_70=starDID(A_69,2);
 /* dsf scalar(s) */
A_71=divDID(SY2_0,N);
 /* dsf clique */
A_72=barDDD(A_71,A_70);
 A_73=modXDD( A_72);
 /* dsf scalar(s) */
A_74=starDDD(A_73,0.5);
 /* dsf scalar(s) */
A_75=divDID(SX_0,N);
 /* dsf scalar(s) */
A_76=starDID(A_75,2);
 /* dsf scalar(s) */
A_77=divDID(SX2_0,N);
 /* dsf clique */
A_78=plusDDD(A_77,A_76);
 /* dsf scalar(s) */
A_79=starDDD(A_78,0.5);
 A_80=modXDD( A_79);
 /* dsf clique */
A_81=mpyDDD(A_80,A_74);
 /* dsf scalar(s) */
A_82=starIII(N,2);
 /* dsf clique */
A_83=mpyDDD(SX_0,SY_0);
 /* dsf scalar(s) */
A_84=divDID(A_83,A_82);
 /* dsf scalar(s) */
A_85=divDID(SXY_0,N);
 /* dsf clique */
A_86=barDDD(A_85,A_84);
 /* dsf clique */
A_87=divDDD(A_86,A_81);
 R_0=( A_87);
 return(R_0);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADpp_1=( 16);
 A_53=GenArgXID( [2, 700, 700],QUADio_0);
 d_0=( A_53);
 A_56=morganIDD(2,d_0,QUADio_0);
 r_0=( A_56);
 A_58=comaXDD( r_0);
 A_59=plusslXDDFOLD( A_58);
 r_1=( A_59);
 A_66=quadXDD( A_59,QUADpp_1,QUADpw_0);
 /* dsf scalar(s) */
A_68=eqDDB(11257.38883178426,r_1,QUADct_0);
/* dsf scalar(s) */
A_69=barBBI(A_68,true);
 r_2=( A_69);
 A_73=quadXII( A_69,QUADpp_1,QUADpw_0);
 return(r_2);
}


APEX is archaic, and it should be cleaned and burned, IMO.

However, until then, here are some things that should be done:

1. The syntax analyzer should have a stake driven through
   its heart before being burned. It needs a complete redesign.

2. APEX converts simple Dfns into Tradfns for compilation,
   when it should do the opposite. However, Dfns didn't exist
   back when APEX was designed, so I have a good excuse.

3. This integer intentionally left blank.

4. It would be great to have nested array support, but
   it is not an easy problem, IMO.

5. The APEX implementation of strands (AKA Vector Notation)
   is crude. It is limited to strands as arguments to defined
   verbs, e.g.,
                 
          foo (a b c d)

   and result of same:

    (a' b' c') ← foo x

6. The ONLY "nested array" function that is supported is the
   monadic idiom dislose-iota (↑⍳). This arises from a typical APL expression
   such as foo¨⍳⍴mat, but which we can often convert into
   an equivalent expression using the rank conjunction, e.g.,

      filter foo⍤99 1⊢ ↑⍳⍴mat

  as might be done in a convolution application.
  This is due to Dyalog APL's definition of the index generator, ⍳⍵,
  which produces a nested array if the argument has more than
  one element.

  The above idiom will be translated directly into "iota(⍵)" in SaC,
  so life is good.

7. Handling of temp names is crude and sloppy.

8. Dfns do not yet support guards or ∇ for recursion.


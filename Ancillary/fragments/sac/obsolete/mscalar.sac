/*  Monadic Scalar Function kernels on scalars */

inline int,int queryXII(int y, int QUADrl)
{return(42,QUADrl+1);
}

inline bool modXBB(bool y)
{ return(y);
}

inline int modXII(int y)
{ return(abs(y));
}

inline double modXDD(double y)
{ return(abs(y));
}

inline bool barXBB(bool y)
{ return(!y);
}

inline int barXII(int y)
{ return(-y);
}

inline double barXDD(double y)
{ return(-y);
}

inline bool plusXBB(bool y)
{ return(y);
}
 
inline int plusXII(int y)
{ return(y);
}

inline double plusXDD(double y)
{ return(y);
}

inline bool minXBB(bool y)
{ return(y);
}

inline int minXII(int y)
{ return(y);
}
 
inline int minXDI(double y,double QUADct)
{ return(Dfloor(y,QUADct));
}

inline bool maxXBB(bool y)
{ return(y);
}

inline int maxXII(int y)
{ return(y);
}
 
inline int maxXDI(double y, double QUADct)
{ return(-Dfloor(-y, QUADct));
}

inline bool mpyXBB(bool y)
{ return(y);
}

inline int mpyXII(int y)
{ return(Isignum(y));
}

inline int mpyXDD(double y)
{ return(Dsignum(y));
}

inline bool notXBB(bool y)
{ return(!y);
}
 
inline bool notXII(int y)
{ return(!tob(y));
}

inline bool notXDD(double y)
{ return(!tob(y));
}

inline double divXBB(bool y)
{ return(1.0/tod(y));
}

inline double divXII(int y)
{ return(1.0/tod(y));
}

inline double divXDD(double y)
{ return(1.0/y);
}

inline double starXBD(bool y)
{ return(pow(APEXE,tod(y)));
}

inline double starXID(int y)
{ return(pow(APEXE,tod(y)));
}

inline double starXDD(double y)
{ return(pow(APEXE,y));
}

inline double logXBB(bool y)
{ return(log(tod(y)));
}

inline double logXII(int y)
{ return(log(tod(y)));
}

inline double logXDD(double y)
{ return(log(y));
}

inline double circXBD(bool y)
{ return(APEXPI*tod(y));
}

inline double circXID(int y)
{ return(APEXPI*tod(y));
}

inline double circXDD(double y)
{ return(APEXPI*y);
}

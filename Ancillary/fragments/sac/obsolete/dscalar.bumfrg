% Function attribute table for dyadic scalar functions.
% See comments at top of pfat.tbl comments if you're as confused as
% I was when I looked at this after a long time..
% Robert Bernecky 2003-08-04
%
% Header contes:
%    percentFragment  marks the beginning of each entry
%    Fields are delimited by blanks.
%    Field 1: primitive function jsymbol
%    Field 2: acceptable left argument types
%    Field 3: acceptable right argument types
%    Field 4: Left compute type for this fragment
%             (i.e., left argument will be coerced to this type
%             by EmitDyadicScalarFns
%             "-" if none
%    Field 5: Right compute type for this fragment
%             (i.e., right argument will be coerced to this type)
%             by EmitDyadicScalarFns
%    Field 6: Result type for fragment
%    Field 7: Left identity element for reduction ("-" if none)
%    Field 8: The left argument value that will make this 
%             function return a 0 on all right arguments ("-" if none)
%    Field 9: The left argument value that will make this 
              function return a 1 on all right arguments ("-" if none)
%    Field 10: Comments
%
% Header ordering may be critical in the case where two 
% fragments would both work (e.g., Integer+Integer can be handled
% by Double+Integer, but will give wrong type result). We'll
% try to fancy up EmitDyadicScalarFn to make this less fussy.
%
%Fragment plus b b i i i  0 - - Boolean + Boolean
%Fragment plus i b i i i  0 - - Integer + Boolean
%Fragment plus b i i i i  0 - - Boolean + Integer 
%Fragment plus i i i i i  0 - - Integer + Integer 

%Fragment plus b d d d d 0.0d0 - - Boolean  + Double
%Fragment plus i d d d d 0.0d0 - - Integer  + Double
%Fragment plus d d d d d 0.0d0 - - Double  + Double
%Fragment plus d b d d d 0.0d0 - - Double  + Boolean
%Fragment plus d i d d d 0.0d0 - - Double  + Integer

%Fragment bar b b i i i    0 - - Boolean - Boolean
%Fragment bar i b i i i    0 - - Integer - Boolean
%Fragment bar b i i i i    0 - - Boolean - Integer
%Fragment bar i i i i i    0 - - Integer - Integer

%Fragment bar b d d d d  0.0d0 - - Boolean  - Double
%Fragment bar i d d d d  0.0d0 - - Integer  - Double
%Fragment bar d d d d d  0.0d0 - - Double  - Double
%Fragment bar d b d d d  0.0d0 - - Double  - Boolean
%Fragment bar d i d d d  0.0d0 - - Double  - Integer

%Fragment mpy b b b b b      1 0 - Boolean times Boolean
%Fragment mpy b i i i i    1 0 - Boolean times Integer
%Fragment mpy i i i i i    1 0 - Integer times Integer
%Fragment mpy i b i i i    1 0 - Integer times Boolean

%Fragment mpy b d d d d  1.0d0 0 - Boolean times Double
%Fragment mpy i d d d d  1.0d0 0 - Integer times Double
%Fragment mpy d d d d d  1.0d0 0 - Double times Double
%Fragment mpy d b d d d  1.0d0 0 - Double times Boolean
%Fragment mpy d i d d d  1.0d0 0 - Double times Integer

%Fragment div b b d d d  - - - Boolean divide Boolean
%Fragment div b i d d d  - - - Boolean divide Integer
%Fragment div b d d d d  - - - Boolean divide Double
%Fragment div i b d d d  - - - Integer divide Boolean
%Fragment div i i d d d  - - - Integer divide Integer
%Fragment div i d d d d  - - - Integer divide Double
%Fragment div d b d d d  - - - Double divide Boolean
%Fragment div d i d d d  - - - Double divide Integer
%Fragment div d d d d d  - - - Double divide Double

%Fragment min b b b b b  true false - Boolean min Boolean

%Fragment min b b i i i PINFINITYI - - Boolean min Boolean
%Fragment min b i i i i PINFINITYI - - Boolean min Integer
%Fragment min i b i i i PINFINITYI - - Integer min Boolean
%Fragment min i i i i i PINFINITYI - - Integer min Integer

%Fragment min b b d d d PINFINITYD - - Boolean min Boolean
%Fragment min b i d d d PINFINITYD - - Boolean min Integer
%Fragment min b d d d d PINFINITYD - - Boolean min Double
%Fragment min i b d d d PINFINITYD - - Integer min Boolean
%Fragment min i i d d d PINFINITYD - - Integer min Integer
%Fragment min i d d d d PINFINITYD - - Integer min Double
%Fragment min d b d d d PINFINITYD - - Double min Boolean
%Fragment min d i d d d PINFINITYD - - Double min Integer
%Fragment min d d d d d PINFINITYD - - Double min Double

%Fragment max b b b b b     false - true Boolean max Boolean

%Fragment max b b i i i   MINFINITYI - -  Boolean max Boolean
%Fragment max b i i i i   MINFINITYI - -  Boolean max Integer
%Fragment max b d d d d  MINFINITYD - -  Boolean max Double 
%Fragment max i b i i i   MINFINITYI - -  Integer max Boolean
%Fragment max i i i i i   MINFINITYI - -  Integer max Integer
%Fragment max i d d d d  MINFINITYD - -  Integer max Double 
%Fragment max d b d d d  MINFINITYD - -  Double max Boolean 
%Fragment max d i d d d  MINFINITYD - -  Double max Integer 
%Fragment max d d d d d  MINFINITYD - -  Double max Double 

%Fragment mod b b b b b   false  true - Boolean mod Boolean

%Fragment mod b b i i i  0 1 - Boolean mod Boolean
%Fragment mod b i i i i  0 1 - Boolean mod Integer
%Fragment mod b d i i i  0 1 - Boolean mod Double
%Fragment mod i b i i i  0 1 - Integer mod Boolean
%Fragment mod i i i i i  0 1 - Integer mod Integer
%Fragment mod i d i i i  0 1 - Integer mod Double
%Fragment mod d b i i i  0 1 - Double mod Boolean
%Fragment mod d i i i i  0 1 - Double mod Integer
%Fragment mod d d i i i  0 1 - Double mod Integer


%Fragment star b b b b b  - - true Boolean exp Boolean 
%Fragment star b i d d d - 1.0d0 Boolean exp Integer
%Fragment star b d d d d - 1.0d0 Boolean exp Double
%Fragment star i b d d d - 1.0d0 Integer exp Boolean
%Fragment star i i d d d - 1.0d0 Integer exp Integer
%Fragment star i d d d d - 1.0d0 Integer exp Double
%Fragment star d b d d d - 1.0d0 Double exp Boolean
%Fragment star d i d d d - 1.0d0 Double exp Integer
%Fragment star d d d d d - 1.0d0 Double exp Double

%% Following fragment won't work because EmitDyadicScalarFns

%% (and everyone else!) uses lhtype,rhtype to compute fragment 

%% type. This fails for general star because we don't know that
%% the result type is going to be double_real, as we can't
%% ascertain that the right argument is positive.
%% Do it the slow way for now... 1995-11-18
%
%%%%%Fragment star bi bi i i i - - 1 Integer exp NON-negative Integer
%%%%%%%                            Boolean exp Integer
%%%%%%                            Integer exp Boolean
%%%%%exp($XV,$YV)
%%%%%

%Fragment log  bid bid d d d - 1.0d0 Double log Integer

%Fragment lt b b b b b     false - true Boolean < Boolean

%Fragment lt bi bi i i b    0 - PINFINITYI Integer < Integer

%Fragment lt bid bid d d b  0.0d0 - PINFINITYD Double < Double

%Fragment lt c c c c b     0  - - Character < Character

%Fragment le b b b b b     true  - false Boolean <= Boolean

%Fragment le bi bi i i b   1  - MINFINITYI  Integer <= Integer

%Fragment le bid bid d d b true  - MINFINITYD Double <= Double

%Fragment le c c c c b      - - - Character <= Character

%Fragment eq b b b b b     true  - - Boolean = Boolean

%Fragment eq bi bi i i b   true - - Integer = Integer

%Fragment eq bid bid d d b true  - - Double = Double

%Fragment eq c c c c b     -  - - Character = Character

%Fragment ne b b b b b     false  - - Boolean not = Boolean

%Fragment ne bi bi i i b   false  - - Integer not = Integer

%Fragment ne bid bid d d b false  - - Double not = Double

%Fragment ne c c c c b     -  - - Character not = Character

%Fragment gt b b b b b     false  false - Boolean > Boolean

%Fragment gt bi bi i i b   0  MINFINITYI - Integer > Integer

%Fragment gt bid bid d d b 0.0d0  MINFINITYD - Double > Double

%Fragment gt c c c c b     0  - - Character > Character

%Fragment ge b b b b b     true  - true Boolean >=  Boolean

%Fragment ge bi bi i i b   true  - PINFINITYI Integer >= Integer

%Fragment ge bid bid d d b true  - PINFINITYD Double >= Double

%Fragment ge c c c c b     -  - - Character >= Character

%Fragment and b b b b b     true false - Boolean and Boolean

%Fragment or b b b b b    false -  true Boolean or Boolean

%Fragment nand bidz bidz b b b  - - false Boolean nand Boolean

%Fragment nor bidz bidz b b b   - true - Boolean nor Boolean

%Fragment and i i i i i    1 0 - Integer and Integer (LCM)

%Fragment and b i i i i    1 0 - Integer and Integer (LCM)

%Fragment and i b i i i    1 0 - Integer and Integer (LCM)

%Fragment or  i i i i i    0 1 - Integer or Integer (GCD)

%Fragment or  b i i i i    0 1 - Integer or Integer (GCD)

%Fragment or  i b i i i    0 1 - Integer or Integer (GCD)

%Fragment and d d d d d   1.0d0 0.0d0 - Double and Double(LCM)

%Fragment and b d d d d   1.0d0 0.0d0 - Boolean and Double (LCM)

%Fragment and d b d d d   1.0d0 0.0d0 - Double and Boolean (LCM)

%Fragment or  d d d d d   0.0d0 1.0d0 - Double or Double (GCD)

%Fragment or  b d d d d   0.0d0 1.0d0 - Boolean or Double (GCD)

%Fragment or  d b d d d   0.0d0 1.0d0 - Double or Boolean (GCD)

%Fragment circ bid bid i d d - - -  Number circle number

%Fragment circ4 bid bid i d d - - -  4 circle number

%% FragmentCode needs at least one blank line after each %Fragment!


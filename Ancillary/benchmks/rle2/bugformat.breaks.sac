use Array: all;

int main()
{
 v = [ 9.884995e+06, 1.031330e+14, 9.885003e+06, 1.082900e+14 ];
 StdIO::print(v);
 z = format(v, 7);
 StdIO::print(z);
 return(0);
}


char[+] format(double[+] y, int precision)
{ /* precision-significant digit format on double non-scalar */
   /* Refer to UTThorn.dws <threal> for APL model of this */
  rows = prod(drop([-1], shape(y)));
  cols = take([-1],[1]++shape(y))[0];
  ravely = reshape([prod(shape(y))], y);
  /* formatted results and their shapes */
  /* See ScalarFormatter for why the value 7 appears in next line */
  wid = precision + 7;
  defcell = genarray([wid], ' ');
  fry = with {          /* Format each array element */
        (. <= iv <= .) {
                el = ScalarFormatter( ravely[iv], precision);
                el = take([wid], el);
        } : el;
        } : genarray( shape( ravely), defcell);

  /* Determine width of each result column */
  /* First, chars left of decimal point */
  lodp  = with{
        (. <= iv <= .) : thcharsto([' ','.'], fry[iv]);
        } : genarray(take([1], shape(fry)), 0);
  /* decimal point and # non-blankchars to right of decimal point */
  rodp  = with{
        (. <= iv <= .) : thcharsto([' '], reverse(drop([lodp[iv]], fry[iv])));
        } : genarray(take([1], shape(fry)), 0);
  lodpmax = maxsl1(reshape([rows,cols], lodp));
  rodpmax = maxsl1(reshape([rows,cols], rodp));
  widths = lodpmax + rodpmax;
  zcols = sum(widths+1)-1;
  shpz = drop([-1], shape(y)) ++ [zcols];
  defcell = genarray([zcols], ' ');

  z = with{
        (. <= iv <= .) : alignrow(fry, iv, widths, lodp, lodpmax, zcols);
        } : genarray([rows], defcell);
  z = reshape(shpz, z);
 return(z);
}

char[.] ScalarFormatter(double y, int precision)
{ /* Primitive double scalar formatter, because sprintf
   * gives wrong answers. */
/* FIXME - write proper formatter, using Steele/Burger formatting */
 z = String::tochar(String::sprintf("%.*g", precision, y));
 z = KillPlusSign(z);
 return(z);
}

char[.] KillPlusSign(char[.] y)
{ /* Kill "+" in sprintf result for a formatted scalar */
  /* This is "(y != '+')compress y", the hard way */
 z = y;
 for( sink=1, src=1; src<(shape(y))[0]; src++) {
        z[sink] = y[src];
        sink =  (z[sink] != '+') ? sink + 1 : sink;
        }
 z = take([sink], z);
 return(z);
}


int thcharsto(char[.] ch, char[.] fry)
{ /* Find chars left of decimal point (or end) */
StdIO::print(shape(ch));
StdIO::print(shape(fry));
  /* I.e.,  (fry member ch) iota 1 */
 lim = (shape(fry))[0];
 z = lim;
 for(i=0; i<lim; i++) {
        if ((fry[[i]] == ch[[0]]) || (fry[[i]] == ch[[1]])) {
                z = i;
                i = lim;
        }
 }
 return(z);
}

int[.] maxsl1(int[.,.] y)
{ /* first-axis max-reduce rank-2 matrix */
  z = with {
      ([0] <= iv < take([1], shape(y))) : sel( iv, y);
        } : fold(max, minint());
  return(z);
}

int[.] minsl1(int[.,.] y)
{ /* first-axis min-reduce rank-2 matrix */
  z = with {
      ([0] <= iv < take([1], shape(y))) : sel( iv, y);
        } : fold(min, maxint());
  return(z);
}

char[.] alignrow(char[.,.] fry, int[1] iv, int[.] widths, int[.] lodp,
                        int[.] lodpmax, int zcols)
{ /* Align one row of a floating-point matrix */

 cols = shape(widths)[0];
 z = genarray([zcols], ' ');
 zci = 0;
 for( ci=0; ci<cols; ci++) {
        fi = ci+cols*iv[0];             /* Source item index */
        sc = lodp[[fi]] -lodpmax[[ci]]; /* Shift count to align decimal */
        sefe = thcharsto([' '], fry[[fi]]);
        sz = sefe + abs(sc);
        zit = take([sz],rotate([-sc],fry[[fi]]));
        z, junk = thrnAppend(z, zci, zit);
        zci = zci + widths[ci] + 1;
        }
 return(z);
}

char[.], int thrnAppend(char[.] vec, int sink, char[.] el)
{ /* Indexed assign el into vec for next result element */
  z = vec;
  count = shape(el)[0];
  for( src=0; src<count; src++) {
        z[[sink]] = el[[src]];
        sink++;
  }
 return(z,sink);
}


/* Unit test for wlf
 * 
 * This should fold into a single WL with vanilla WLF enabled.
 * This is taken from Bodo's:
 *  "WLF in SAC - Condensing Consecutive Array Operations"
 *
 */

/* RESULT: with 1 1  */

use Array:{rotate,+,-,drop,shape,genarray,take,++,tod,iota,*,==,sel};

inline double[.,.] cat( double[.,.] x, double[.,.] y)
{ /* Row catenation */
 defcell = genarray( drop([1], _shape_A_(x) + _shape_A_(y)), 0.0);
 z = with {
      (. <= iv <= .) : x[iv] ++ y[iv];
     } : genarray(take([1], _shape_A_(x)), defcell);
 return(z);
}

int main()
{
 m = 20;
 n = 10; 
 A = _reshape_VxA_([m,n], 0.5 + tod( iota( m*n)));
 t = relax (A);
 z =  29.5 == t[1,3];
 return(_toi_S_(z));
}

double[.,.] relax( double[.,.] A)
{
  m = shape(A)[0];
  n = shape(A)[1];
  B = rotate( 0, 1, A) + rotate( 0, -1, A)
  + rotate( 1, 1, A) + rotate( 1, -1, A);
  upper_A = take( [1,n], A);
  lower_A = drop( [m-1,0], A);
  left_A = drop( [1,0], take( [m-1,1], A));
  right_A = take( [m-2,1], drop( [1,n-1], A));
  inner_B = take( [m-2,n-2], drop( [1,1], B));
  middle = cat( left_A, cat( inner_B, right_A));
  result = upper_A ++ middle ++ lower_A;
  return( result);
}

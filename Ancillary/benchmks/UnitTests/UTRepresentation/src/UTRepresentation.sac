module UTRepresentation;
export {UTRepresentation_testXXI};

// Compiled by APEX Version: FIXME!! 2021-07-29 17:06:34.947
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline double divDID(double x, int y)
{ dx = DtoD(x);
  dy = ItoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline double modIDD(int x, double y, double QUADct)
{ /* Double residue double */
  /* This definition is taken from SHARP APL Refman May 1991, p.6-26.
   * It extends the definition of residue to fractional right arguments
   * and to zero, negative and fractional left arguments.
   * r= y-x times floor y divide x+0=x
   * See also APL model in workspace 43 UTDScalarI.
   */
  nx = (0.0 == ItoD(x))  ?  1.0  : ItoD(x);
  z = DtoD(y) - ItoD(x) * tod(DFLOOR(DtoD(y)/nx, QUADct));
  return(z);
}


inline double mpyDID(double x, int y)
{ return(DtoD(x)*ItoD(y));
}

inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double divDBD(double x, bool y)
{ dx = DtoD(x);
  dy = BtoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline double modBDD(bool x, double y, double QUADct)
{ /* Double residue double */
  /* This definition is taken from SHARP APL Refman May 1991, p.6-26.
   * It extends the definition of residue to fractional right arguments
   * and to zero, negative and fractional left arguments.
   * r= y-x times floor y divide x+0=x
   * See also APL model in workspace 43 UTDScalarI.
   */
  nx = (0.0 == BtoD(x))  ?  1.0  : BtoD(x);
  z = DtoD(y) - BtoD(x) * tod(DFLOOR(DtoD(y)/nx, QUADct));
  return(z);
}


inline double mpyDBD(double x, bool y)
{ return(DtoD(x)*BtoD(y));
}

inline int[.] comaXII(int[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[.] comaXII(int y)
{ /* Ravel of scalar */
  return([y]);
}

inline double[.] comaXDD(double y)
{ /* Ravel of scalar */
  return([y]);
}

inline bool[.] comaXBB(bool[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline bool[.] rotrXBB(bool[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline int[.] rhoIII(int x, int y)
{ // [Scalar reshape scalar]
  z = genarray( [toi(x)],y);
  return(z);
}

inline double[*] rhoIDD(int[.] x, double[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0.0d);
   return( z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[*] iotaCCIQUADAV(char[256] x, char[+] y,int QUADio)
{ /* QUADav iota character non-scalar */
 z = with {
        (. <= iv <= .)
                : toi(y[iv]);
        } : genarray(shape(y), 0);
 return(z+QUADio);
}

inline int[*] dropBII(bool x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline bool[*] dropBBB(bool x, bool[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[0] rhoXII(int y)
{ /* Shape of scalar */
 return(shape(y));
}

inline int[0] rhoXDI(double y)
{ /* Shape of scalar */
 return(shape(y));
}

inline int[.]  rhoXBI(bool[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline char[256] quadavXXC()
{ /* QUADav - system character set */
 z = with{
        ([0] <= [i] < [256]) : _toc_S_(i);
        } : genarray( [256], ' ');
 return(z);
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] comaIBI(int[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline int[+] utakIII(int[.] x, int[+] y)
{ /* Vector represent non-scalar */
 yt = TRANSPOSE(y);
 cell = genarray(shape(x),0);
 z = with {
        (. <= iv <= .)
                : utakIII(x,yt[iv]);
        } : genarray(shape(yt), cell);
 return(TRANSPOSE(z));
}





inline bool sameIDB(int[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline bool[+] utakIIB(int[.] x, int[+] y)
{ /* Vector-of-twos represent non-scalar */
/*
   % This could be any mix of powers-of-two with a bit of work.
   % The guts of represent on Booleans
*/
 cell = genarray(shape(x),false);
 yt = TRANSPOSE(y);
 z = with {
        (. <= iv <= .)
                : utakIIB(x, yt[iv]);
        } : genarray(shape(yt), cell);
 return(TRANSPOSE(z));
}





inline bool sameBDB(bool[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline int[.] utakIII(int[.] x, int y)
{ /* Non-floating Vector represent scalar */
  /* Taken from ISO Extended APL standard Draft N93.03, page 155 */
  wts = genarray(shape(x),toI(1));
  for(i=shape(x)[[0]]-2; i>=0; i--)
        wts[[i]] = wts[[i+1]] * toI(x[[i+1]]);
  z = genarray(shape(x),0);
  cy = toI(y);
  for(i=shape(x)[[0]]-1; i>=0; i--){
        z[[i]] = modIII(toI(x[[i]]),cy/wts[[i]]);
        /* Must use fuzz-less call to mod!! */
        /* Represent is NOT fuzzy (SAPL Ref Man p.6-47, 1991 */
        cy = cy - z[[i]] * wts[[i]];
  }
 return(z);
}



inline double[.] utakIDD(int[.] x, double y)
{ /* Floating Vector represent scalar */
  /* Taken from ISO Extended APL standard Draft N93.03, page 155 */
  wts = genarray(shape(x),toD(1));
  for(i=shape(x)[[0]]-2; i>=0; i--)
        wts[[i]] = wts[[i+1]] * toD(x[[i+1]]);
  z = genarray(shape(x),0.0d);
  cy = toD(y);
  for(i=shape(x)[[0]]-1; i>=0; i--){
        z[[i]] = modDDD(toD(x[[i]]),cy/wts[[i]],0.0);
        /* Must use zero-fuzz call to mod!! */
        /* Represent is NOT fuzzy (SAPL Ref Man p.6-47, 1991 */
        cy = cy - z[[i]] * wts[[i]];
  }
 return(z);
}


inline bool sameDDB(double[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline double[.] utakBDD(bool[.] x, double y)
{ /* Floating Vector represent scalar */
  /* Taken from ISO Extended APL standard Draft N93.03, page 155 */
  wts = genarray(shape(x),toD(1));
  for(i=shape(x)[[0]]-2; i>=0; i--)
        wts[[i]] = wts[[i+1]] * toD(x[[i+1]]);
  z = genarray(shape(x),0.0d);
  cy = toD(y);
  for(i=shape(x)[[0]]-1; i>=0; i--){
        z[[i]] = modDDD(toD(x[[i]]),cy/wts[[i]],0.0);
        /* Must use zero-fuzz call to mod!! */
        /* Represent is NOT fuzzy (SAPL Ref Man p.6-47, 1991 */
        cy = cy - z[[i]] * wts[[i]];
  }
 return(z);
}


inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline double[*] indr(double[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline bool[*] indr(bool[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline double[+] inds0(double[+] X, int  I0, double Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = DtoD(X);
 Y = Yin;

 
 z[[I0]]=DtoD((Y));

 
 return(z);
}



inline int[.] mpybslXII(int[.] y)
{ // Scan of vector
 shp = shape(y)[0];
 z = genarray([shp],ItoI(1));
 if (0 != shp) { // real work to do
        z[[0]] = ItoI(y[[0]]); // Not sure about coercion
        for ( i=1; i<shp; i++) {
           z[[i]] = mpyIII(ItoI(z[[i-1]]),ItoI(y[[i]]));
        }
  }
 return(z);
}


inline int mpyslXIIQUICKSTOP(int[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : ItoI(y[iv]);
        } : foldfix( mpyIII, ItoI(1), ItoI(0));
  return(z);
}


inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline bool[.] mpybslXBB(bool[.] y)
{ // Scan of vector
 shp = shape(y)[0];
 z = genarray([shp],ItoB(1));
 if (0 != shp) { // real work to do
        z[[0]] = BtoB(y[[0]]); // Not sure about coercion
        for ( i=1; i<shp; i++) {
           z[[i]] = mpyBBB(BtoB(z[[i-1]]),BtoB(y[[i]]));
        }
  }
 return(z);
}


inline int modIII(int x, int y)
{ /* SxS residue (aka modulo) */
  /* (x residue y) <-->   y-x times floor y divide x + 0 = x  */
  /* See model residueI in workspace UTDScalarI.dws */
  x = ItoI(x);
  y = ItoI(y);
  if( 0 != x) {
    q = y / x;
    z = y - ( x * q);
  } else {
    z = y;
  }

  if( z != 0) {
    if( mpyXII( x) != mpyXII( y)) {
      z = z + x;
    }
  }
 return(z);
}


inline double modDDD(double x, double y, double QUADct)
{ /* Double residue double */
  /* This definition is taken from SHARP APL Refman May 1991, p.6-26.
   * It extends the definition of residue to fractional right arguments
   * and to zero, negative and fractional left arguments.
   * r= y-x times floor y divide x+0=x
   * See also APL model in workspace 43 UTDScalarI.
   */
  nx = (0.0 == DtoD(x))  ?  1.0  : DtoD(x);
  z = DtoD(y) - DtoD(x) * tod(DFLOOR(DtoD(y)/nx, QUADct));
  return(z);
}


inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool mpyBBB(bool x, bool y)
{ return(BtoB(x) & BtoB(y));
}

inline bool[+] eqDDB(double[+] x, double[+] y,double QUADct)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqDDB(xel,yel, QUADct);
        } : genarray(sy, false);
  return(z);
}






inline bool[.] utakIIB(int[.] x, int y)
{ /* Vector-of-twos represent scalar */
/*
*/
   cell = 0;
   k = shape(x)[[0]]-1;
   z = with {
        (. <= iv <= .)
                : BitAND(1,BitShiftRight(k-iv[0],toi(y)));
        } : genarray(shape(x), cell);
  return(toB(z));
}

inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline double[*] indrfr(int fr, double[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline double[*] indrfr0(double[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline double[*] indrfr(int fr, double[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0.0d);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline bool[*] indrfr(int fr, bool[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline bool[*] indrfr0(bool[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline bool[*] indrfr(int fr, bool[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,false);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int DFLOOR(double y, double QUADct)
{ /* Fuzzy floor */
  /* Definition taken from SHARP APL Refman May 1991, p.6-23
   * floor:  n <- (signum y) times nofuzzfloor 0.5+abs y)
   *         z <- n-(QUADct times 1 max abs y)<(n-y)
   * If you want a double result,  write: "y - 1| y".
   */
   n = tod(floor(0.5+fabs(y)));
   if (y < 0.0)
        n = -n;
   else if (0.0 == y)
        n = 0.0;
   range = fabs(y);
   if (1.0 > range)
        range = 1.0;
   fuzzlim = QUADct*range;
   ny = n-y;
   if (fuzzlim < ny)
        z = n - 1.0;
   else
        z = n;
   return(toi(z));
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline int[+] TRANSPOSE(int[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), 0);
  return(z);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline bool[+] TRANSPOSE(bool[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), false);
  return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int mpyXII(int y)
{ /* signum int/double */
   if( toI(0) == y) {
    z = 0;
  } else {
    if( toI(0) < y) {
      z = 1;
    } else {
      z = -1;
    }
  }
  return(z);
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline bool[+] eqDDB(double x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : eqDDB(xel,yel, QUADct);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqDDB(double[+] x, double y,double QUADct)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqDDB(xel,y, QUADct);
  } : genarray( shape(x), false);
  return(z);
}


inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double[.,.] RepresentIID(int[.] x, int[.] y,int QUADio)
{ 
/*
 ?
*/
QUADct_0=toD(( false));
 A_56=rhoXII( y);
 A_57=rhoXII( x);
 A_58=comaIII(A_57,A_56);
 shpz_0=( A_58);
 A_60=comaXII( x);
 x_0=( A_60);
 A_62=comaIBI(x_0,true);
 A_63=rotrXII( A_62);
 A_64=mpybslXII( A_63);
 A_68=rotrXII( A_64);
 A_69=dropBII(true,A_68);
 weights_0=( A_69);
 A_71=rhoXII( y);
 shpy_0=( A_71);
 A_73=comaXII( y);
 y_0=( A_73);
 A_75=mpyslXIIQUICKSTOP( shpz_0);
 A_79=rhoIII(A_75,-1);
 z_0=( A_79);
 A_81=mpyslXIIQUICKSTOP( shpy_0);
 A_86=iotaXII( A_81,QUADio);
 A_CTR87_= 0;
A_CTR87z_ = (shape(A_86)[[0]])-1;
z_3=toD(z_0);
for(; A_CTR87_ <= A_CTR87z_; A_CTR87_++){
yi_0 = A_86[[A_CTR87_]];
 A_90= ABC(toi(yi_0)-QUADio,shape(y_0)[0]);
A_92=y_0[[A_90]];
 cy_1=( A_92);
 A_94=rhoXII( x_0);
 A_96=iotaXII( A_94,QUADio);
 A_97=rotrXII( A_96);
 A_CTR98_= 0;
A_CTR98z_ = (shape(A_97)[[0]])-1;
z_3=toD(z_3);
cy_3=toD(cy_1);
for(; A_CTR98_ <= A_CTR98z_; A_CTR98_++){
i_0 = A_97[[A_CTR98_]];
 A_101=mpyslXIIQUICKSTOP( shpy_0);
 // dsf scalar(s)
A_105=mpyIII(i_0,A_101);
 // dsf scalar(s)
A_106=plusIII(A_105,yi_0);
 zi_0=( A_106);
 A_108= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_110=weights_0[[A_108]];
 // dsf scalar(s)
A_111=divDID(cy_3,A_110);
 A_112= ABC(toi(i_0)-QUADio,shape(x_0)[0]);
A_114=x_0[[A_112]];
 // dsf scalar(s)
A_116=modIDD(A_114,A_111,QUADct_0);
 A_117= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_119=inds0(z_3,A_117,A_116);
 z_3=( A_119);
 A_121= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_123=weights_0[[A_121]];
 A_124= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_126=z_3[[A_124]];
 // dsf scalar(s)
A_127=mpyDID(A_126,A_123);
 // dsf scalar(s)
A_128=barDDD(cy_3,A_127);
 cy_3=( A_128);
 }
 }
 A_132=rhoIDD(shpz_0,z_3);
 z_4=( A_132);
 return(z_4);
}

inline int UTRepresentation_testXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 S_0=( 2);
 BV_0=( [true,true,false,true,true,false,true,true]);
 A_96=iotaXII( 999,QUADio_0);
 A_97=rhoIII([2, 3, 4, 5],A_96);
 M4_0=( A_97);
 Hex_0=( [16, 16]);
 Byte_0=( [256, 256, 256, 256]);
 A_101=quadavXXC( );
 A_102=quadavXXC( );
 A_105=iotaCCIQUADAV(A_102,A_101,QUADio_0);
 A_107=RepresentIID(Hex_0,A_105,QUADio_0);
 A_108=quadavXXC( );
 A_109=quadavXXC( );
 A_112=iotaCCIQUADAV(A_109,A_108,QUADio_0);
 A_113=utakIII(Hex_0,A_112);
 A_115=sameIDB(A_113,A_107,QUADct_0);
 r_0=( A_115);
 A_117=quadavXXC( );
 A_118=quadavXXC( );
 A_121=iotaCCIQUADAV(A_118,A_117,QUADio_0);
 A_122=rhoIII(8,2);
 A_124=RepresentIID(A_122,A_121,QUADio_0);
 A_125=quadavXXC( );
 A_126=quadavXXC( );
 A_129=iotaCCIQUADAV(A_126,A_125,QUADio_0);
 A_130=rhoIII(8,2);
 A_131=utakIIB(A_130,A_129);
 A_133=sameBDB(A_131,A_124,QUADct_0);
 A_134=comaBBB(r_0,A_133);
 r_1=( A_134);
 A_137=iotaXII( 256,QUADio_0);
 A_138=rhoIII([16, 16],A_137);
 A_139=rhoIII(8,2);
 A_141=RepresentCLONE2IID(A_139,A_138,QUADio_0);
 A_143=iotaXII( 256,QUADio_0);
 A_144=rhoIII([16, 16],A_143);
 A_145=rhoIII(8,2);
 A_146=utakIIB(A_145,A_144);
 A_148=sameBDB(A_146,A_141,QUADct_0);
 A_149=comaBBB(r_1,A_148);
 r_2=( A_149);
 A_152=RepresentCLONE3IID([2, 3],M4_0,QUADio_0);
 A_153=utakIII([2, 3],M4_0);
 A_155=sameIDB(A_153,A_152,QUADct_0);
 A_156=comaBBB(r_2,A_155);
 r_3=( A_156);
 A_159=RepresentCLONE4IID([10, 10, 10],3247,QUADio_0);
 A_160=utakIII([10, 10, 10],3247);
 A_162=sameIDB(A_160,A_159,QUADct_0);
 A_163=comaBBB(r_3,A_162);
 r_4=( A_163);
 A_166=RepresentCLONE5IID([0, 10, 10],3247,QUADio_0);
 A_167=utakIII([0, 10, 10],3247);
 A_169=sameIDB(A_167,A_166,QUADct_0);
 A_170=comaBBB(r_4,A_169);
 r_5=( A_170);
 A_173=RepresentCLONE6IDD([10, 10, 10],247.33,QUADio_0);
 A_174=utakIDD([10, 10, 10],247.33);
 A_176=sameDDB(A_174,A_173,QUADct_0);
 A_177=comaBBB(r_5,A_176);
 r_6=( A_177);
 A_180=RepresentCLONE7BDD([false,true],247.33,QUADio_0);
 A_181=utakBDD([false,true],247.33);
 A_183=sameDDB(A_181,A_180,QUADct_0);
 A_184=comaBBB(r_6,A_183);
 r_7=( A_184);
 A_186=rhoIII(4,10);
 A_188=RepresentCLONE8IID(A_186,-1,QUADio_0);
 A_189=rhoIII(4,10);
 A_190=utakIII(A_189,-1);
 A_192=sameIDB(A_190,A_188,QUADct_0);
 A_193=comaBBB(r_7,A_192);
 r_8=( A_193);
 A_196=RepresentCLONE9BDD([false,true],-247.33,QUADio_0);
A_197=utakBDD([false,true],-247.33);
 A_199=sameDDB(A_197,A_196,QUADct_0);
 A_200=comaBBB(r_8,A_199);
 r_9=( A_200);
 A_202=rhoIII(4,10);
 A_204=RepresentIID(A_202,[1984, 2001, -44],QUADio_0);
 A_205=rhoIII(4,10);
 A_206=utakIII(A_205,[1984, 2001, -44]);
 A_208=sameIDB(A_206,A_204,QUADct_0);
 A_209=comaBBB(r_9,A_208);
 r_10=( A_209);
 A_213=quadXBB( r_10,QUADpp_0,QUADpw_0);
 A_214=andslXBBQUICKSTOP( r_10);
 // dsf scalar(s)
A_218=barBBI(true,A_214);
 A_221=quadXII( A_218,QUADpp_0,QUADpw_0);
 r_11=( A_221);
 return(r_11);
}

inline double[.,.,.] RepresentCLONE2IID(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
QUADct_0=toD(( false));
 A_56=rhoXII( y);
 A_57=rhoXII( x);
 A_58=comaIII(A_57,A_56);
 shpz_0=( A_58);
 A_60=comaXII( x);
 x_0=( A_60);
 A_62=comaIBI(x_0,true);
 A_63=rotrXII( A_62);
 A_64=mpybslXII( A_63);
 A_68=rotrXII( A_64);
 A_69=dropBII(true,A_68);
 weights_0=( A_69);
 A_71=rhoXII( y);
 shpy_0=( A_71);
 A_73=comaXII( y);
 y_0=( A_73);
 A_75=mpyslXIIQUICKSTOP( shpz_0);
 A_79=rhoIII(A_75,-1);
 z_0=( A_79);
 A_81=mpyslXIIQUICKSTOP( shpy_0);
 A_86=iotaXII( A_81,QUADio);
 A_CTR87_= 0;
A_CTR87z_ = (shape(A_86)[[0]])-1;
z_3=toD(z_0);
for(; A_CTR87_ <= A_CTR87z_; A_CTR87_++){
yi_0 = A_86[[A_CTR87_]];
 A_90= ABC(toi(yi_0)-QUADio,shape(y_0)[0]);
A_92=y_0[[A_90]];
 cy_1=( A_92);
 A_94=rhoXII( x_0);
 A_96=iotaXII( A_94,QUADio);
 A_97=rotrXII( A_96);
 A_CTR98_= 0;
A_CTR98z_ = (shape(A_97)[[0]])-1;
z_3=toD(z_3);
cy_3=toD(cy_1);
for(; A_CTR98_ <= A_CTR98z_; A_CTR98_++){
i_0 = A_97[[A_CTR98_]];
 A_101=mpyslXIIQUICKSTOP( shpy_0);
 // dsf scalar(s)
A_105=mpyIII(i_0,A_101);
 // dsf scalar(s)
A_106=plusIII(A_105,yi_0);
 zi_0=( A_106);
 A_108= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_110=weights_0[[A_108]];
 // dsf scalar(s)
A_111=divDID(cy_3,A_110);
 A_112= ABC(toi(i_0)-QUADio,shape(x_0)[0]);
A_114=x_0[[A_112]];
 // dsf scalar(s)
A_116=modIDD(A_114,A_111,QUADct_0);
 A_117= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_119=inds0(z_3,A_117,A_116);
 z_3=( A_119);
 A_121= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_123=weights_0[[A_121]];
 A_124= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_126=z_3[[A_124]];
 // dsf scalar(s)
A_127=mpyDID(A_126,A_123);
 // dsf scalar(s)
A_128=barDDD(cy_3,A_127);
 cy_3=( A_128);
 }
 }
 A_132=rhoIDD(shpz_0,z_3);
 z_4=( A_132);
 return(z_4);
}

inline double[.,.,.,.,.] RepresentCLONE3IID(int[.] x, int[.,.,.,.] y,int QUADio)
{ 
/*
 ?
*/
QUADct_0=toD(( false));
 A_56=rhoXII( y);
 A_57=rhoXII( x);
 A_58=comaIII(A_57,A_56);
 shpz_0=( A_58);
 A_60=comaXII( x);
 x_0=( A_60);
 A_62=comaIBI(x_0,true);
 A_63=rotrXII( A_62);
 A_64=mpybslXII( A_63);
 A_68=rotrXII( A_64);
 A_69=dropBII(true,A_68);
 weights_0=( A_69);
 A_71=rhoXII( y);
 shpy_0=( A_71);
 A_73=comaXII( y);
 y_0=( A_73);
 A_75=mpyslXIIQUICKSTOP( shpz_0);
 A_79=rhoIII(A_75,-1);
 z_0=( A_79);
 A_81=mpyslXIIQUICKSTOP( shpy_0);
 A_86=iotaXII( A_81,QUADio);
 A_CTR87_= 0;
A_CTR87z_ = (shape(A_86)[[0]])-1;
z_3=toD(z_0);
for(; A_CTR87_ <= A_CTR87z_; A_CTR87_++){
yi_0 = A_86[[A_CTR87_]];
 A_90= ABC(toi(yi_0)-QUADio,shape(y_0)[0]);
A_92=y_0[[A_90]];
 cy_1=( A_92);
 A_94=rhoXII( x_0);
 A_96=iotaXII( A_94,QUADio);
 A_97=rotrXII( A_96);
 A_CTR98_= 0;
A_CTR98z_ = (shape(A_97)[[0]])-1;
z_3=toD(z_3);
cy_3=toD(cy_1);
for(; A_CTR98_ <= A_CTR98z_; A_CTR98_++){
i_0 = A_97[[A_CTR98_]];
 A_101=mpyslXIIQUICKSTOP( shpy_0);
 // dsf scalar(s)
A_105=mpyIII(i_0,A_101);
 // dsf scalar(s)
A_106=plusIII(A_105,yi_0);
 zi_0=( A_106);
 A_108= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_110=weights_0[[A_108]];
 // dsf scalar(s)
A_111=divDID(cy_3,A_110);
 A_112= ABC(toi(i_0)-QUADio,shape(x_0)[0]);
A_114=x_0[[A_112]];
 // dsf scalar(s)
A_116=modIDD(A_114,A_111,QUADct_0);
 A_117= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_119=inds0(z_3,A_117,A_116);
 z_3=( A_119);
 A_121= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_123=weights_0[[A_121]];
 A_124= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_126=z_3[[A_124]];
 // dsf scalar(s)
A_127=mpyDID(A_126,A_123);
 // dsf scalar(s)
A_128=barDDD(cy_3,A_127);
 cy_3=( A_128);
 }
 }
 A_132=rhoIDD(shpz_0,z_3);
 z_4=( A_132);
 return(z_4);
}

inline double[.] RepresentCLONE4IID(int[.] x, int y,int QUADio)
{ 
/*
 ?
*/
QUADct_0=toD(( false));
 A_56=rhoXII( y);
 A_57=rhoXII( x);
 A_58=comaIII(A_57,A_56);
 shpz_0=( A_58);
 A_60=comaXII( x);
 x_0=( A_60);
 A_62=comaIBI(x_0,true);
 A_63=rotrXII( A_62);
 A_64=mpybslXII( A_63);
 A_68=rotrXII( A_64);
 A_69=dropBII(true,A_68);
 weights_0=( A_69);
 A_71=rhoXII( y);
 shpy_0=( A_71);
 A_73=comaXII( y);
 y_0=( A_73);
 A_75=mpyslXIIQUICKSTOP( shpz_0);
 A_79=rhoIII(A_75,-1);
 z_0=( A_79);
 A_81=mpyslXIIQUICKSTOP( shpy_0);
 A_86=iotaXII( A_81,QUADio);
 A_CTR87_= 0;
A_CTR87z_ = (shape(A_86)[[0]])-1;
z_3=toD(z_0);
for(; A_CTR87_ <= A_CTR87z_; A_CTR87_++){
yi_0 = A_86[[A_CTR87_]];
 A_90= ABC(toi(yi_0)-QUADio,shape(y_0)[0]);
A_92=y_0[[A_90]];
 cy_1=( A_92);
 A_94=rhoXII( x_0);
 A_96=iotaXII( A_94,QUADio);
 A_97=rotrXII( A_96);
 A_CTR98_= 0;
A_CTR98z_ = (shape(A_97)[[0]])-1;
z_3=toD(z_3);
cy_3=toD(cy_1);
for(; A_CTR98_ <= A_CTR98z_; A_CTR98_++){
i_0 = A_97[[A_CTR98_]];
 A_101=mpyslXIIQUICKSTOP( shpy_0);
 // dsf scalar(s)
A_105=mpyIII(i_0,A_101);
 // dsf scalar(s)
A_106=plusIII(A_105,yi_0);
 zi_0=( A_106);
 A_108= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_110=weights_0[[A_108]];
 // dsf scalar(s)
A_111=divDID(cy_3,A_110);
 A_112= ABC(toi(i_0)-QUADio,shape(x_0)[0]);
A_114=x_0[[A_112]];
 // dsf scalar(s)
A_116=modIDD(A_114,A_111,QUADct_0);
 A_117= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_119=inds0(z_3,A_117,A_116);
 z_3=( A_119);
 A_121= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_123=weights_0[[A_121]];
 A_124= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_126=z_3[[A_124]];
 // dsf scalar(s)
A_127=mpyDID(A_126,A_123);
 // dsf scalar(s)
A_128=barDDD(cy_3,A_127);
 cy_3=( A_128);
 }
 }
 A_132=rhoIDD(shpz_0,z_3);
 z_4=( A_132);
 return(z_4);
}

inline double[.] RepresentCLONE5IID(int[.] x, int y,int QUADio)
{ 
/*
 ?
*/
QUADct_0=toD(( false));
 A_56=rhoXII( y);
 A_57=rhoXII( x);
 A_58=comaIII(A_57,A_56);
 shpz_0=( A_58);
 A_60=comaXII( x);
 x_0=( A_60);
 A_62=comaIBI(x_0,true);
 A_63=rotrXII( A_62);
 A_64=mpybslXII( A_63);
 A_68=rotrXII( A_64);
 A_69=dropBII(true,A_68);
 weights_0=( A_69);
 A_71=rhoXII( y);
 shpy_0=( A_71);
 A_73=comaXII( y);
 y_0=( A_73);
 A_75=mpyslXIIQUICKSTOP( shpz_0);
 A_79=rhoIII(A_75,-1);
 z_0=( A_79);
 A_81=mpyslXIIQUICKSTOP( shpy_0);
 A_86=iotaXII( A_81,QUADio);
 A_CTR87_= 0;
A_CTR87z_ = (shape(A_86)[[0]])-1;
z_3=toD(z_0);
for(; A_CTR87_ <= A_CTR87z_; A_CTR87_++){
yi_0 = A_86[[A_CTR87_]];
 A_90= ABC(toi(yi_0)-QUADio,shape(y_0)[0]);
A_92=y_0[[A_90]];
 cy_1=( A_92);
 A_94=rhoXII( x_0);
 A_96=iotaXII( A_94,QUADio);
 A_97=rotrXII( A_96);
 A_CTR98_= 0;
A_CTR98z_ = (shape(A_97)[[0]])-1;
z_3=toD(z_3);
cy_3=toD(cy_1);
for(; A_CTR98_ <= A_CTR98z_; A_CTR98_++){
i_0 = A_97[[A_CTR98_]];
 A_101=mpyslXIIQUICKSTOP( shpy_0);
 // dsf scalar(s)
A_105=mpyIII(i_0,A_101);
 // dsf scalar(s)
A_106=plusIII(A_105,yi_0);
 zi_0=( A_106);
 A_108= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_110=weights_0[[A_108]];
 // dsf scalar(s)
A_111=divDID(cy_3,A_110);
 A_112= ABC(toi(i_0)-QUADio,shape(x_0)[0]);
A_114=x_0[[A_112]];
 // dsf scalar(s)
A_116=modIDD(A_114,A_111,QUADct_0);
 A_117= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_119=inds0(z_3,A_117,A_116);
 z_3=( A_119);
 A_121= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_123=weights_0[[A_121]];
 A_124= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_126=z_3[[A_124]];
 // dsf scalar(s)
A_127=mpyDID(A_126,A_123);
 // dsf scalar(s)
A_128=barDDD(cy_3,A_127);
 cy_3=( A_128);
 }
 }
 A_132=rhoIDD(shpz_0,z_3);
 z_4=( A_132);
 return(z_4);
}

inline double[.] RepresentCLONE6IDD(int[.] x, double y,int QUADio)
{ 
/*
 ?
*/
QUADct_0=toD(( false));
 A_56=rhoXDI( y);
 A_57=rhoXII( x);
 A_58=comaIII(A_57,A_56);
 shpz_0=( A_58);
 A_60=comaXII( x);
 x_0=( A_60);
 A_62=comaIBI(x_0,true);
 A_63=rotrXII( A_62);
 A_64=mpybslXII( A_63);
 A_68=rotrXII( A_64);
 A_69=dropBII(true,A_68);
 weights_0=( A_69);
 A_71=rhoXDI( y);
 shpy_0=( A_71);
 A_73=comaXDD( y);
 y_0=( A_73);
 A_75=mpyslXIIQUICKSTOP( shpz_0);
 A_79=rhoIII(A_75,-1);
 z_0=( A_79);
 A_81=mpyslXIIQUICKSTOP( shpy_0);
 A_86=iotaXII( A_81,QUADio);
 A_CTR87_= 0;
A_CTR87z_ = (shape(A_86)[[0]])-1;
z_3=toD(z_0);
for(; A_CTR87_ <= A_CTR87z_; A_CTR87_++){
yi_0 = A_86[[A_CTR87_]];
 A_90= ABC(toi(yi_0)-QUADio,shape(y_0)[0]);
A_92=y_0[[A_90]];
 cy_1=( A_92);
 A_94=rhoXII( x_0);
 A_96=iotaXII( A_94,QUADio);
 A_97=rotrXII( A_96);
 A_CTR98_= 0;
A_CTR98z_ = (shape(A_97)[[0]])-1;
z_3=toD(z_3);
cy_3=toD(cy_1);
for(; A_CTR98_ <= A_CTR98z_; A_CTR98_++){
i_0 = A_97[[A_CTR98_]];
 A_101=mpyslXIIQUICKSTOP( shpy_0);
 // dsf scalar(s)
A_105=mpyIII(i_0,A_101);
 // dsf scalar(s)
A_106=plusIII(A_105,yi_0);
 zi_0=( A_106);
 A_108= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_110=weights_0[[A_108]];
 // dsf scalar(s)
A_111=divDID(cy_3,A_110);
 A_112= ABC(toi(i_0)-QUADio,shape(x_0)[0]);
A_114=x_0[[A_112]];
 // dsf scalar(s)
A_116=modIDD(A_114,A_111,QUADct_0);
 A_117= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_119=inds0(z_3,A_117,A_116);
 z_3=( A_119);
 A_121= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_123=weights_0[[A_121]];
 A_124= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_126=z_3[[A_124]];
 // dsf scalar(s)
A_127=mpyDID(A_126,A_123);
 // dsf scalar(s)
A_128=barDDD(cy_3,A_127);
 cy_3=( A_128);
 }
 }
 A_132=rhoIDD(shpz_0,z_3);
 z_4=( A_132);
 return(z_4);
}

inline double[.] RepresentCLONE7BDD(bool[.] x, double y,int QUADio)
{ 
/*
 ?
*/
QUADct_0=toD(( false));
 A_56=rhoXDI( y);
 A_57=rhoXBI( x);
 A_58=comaIII(A_57,A_56);
 shpz_0=( A_58);
 A_60=comaXBB( x);
 x_0=( A_60);
 A_62=comaBBB(x_0,true);
 A_63=rotrXBB( A_62);
 A_64=mpybslXBB( A_63);
 A_68=rotrXBB( A_64);
 A_69=dropBBB(true,A_68);
 weights_0=( A_69);
 A_71=rhoXDI( y);
 shpy_0=( A_71);
 A_73=comaXDD( y);
 y_0=( A_73);
 A_75=mpyslXIIQUICKSTOP( shpz_0);
 A_79=rhoIII(A_75,-1);
 z_0=( A_79);
 A_81=mpyslXIIQUICKSTOP( shpy_0);
 A_86=iotaXII( A_81,QUADio);
 A_CTR87_= 0;
A_CTR87z_ = (shape(A_86)[[0]])-1;
z_3=toD(z_0);
for(; A_CTR87_ <= A_CTR87z_; A_CTR87_++){
yi_0 = A_86[[A_CTR87_]];
 A_90= ABC(toi(yi_0)-QUADio,shape(y_0)[0]);
A_92=y_0[[A_90]];
 cy_1=( A_92);
 A_94=rhoXBI( x_0);
 A_96=iotaXII( A_94,QUADio);
 A_97=rotrXII( A_96);
 A_CTR98_= 0;
A_CTR98z_ = (shape(A_97)[[0]])-1;
z_3=toD(z_3);
cy_3=toD(cy_1);
for(; A_CTR98_ <= A_CTR98z_; A_CTR98_++){
i_0 = A_97[[A_CTR98_]];
 A_101=mpyslXIIQUICKSTOP( shpy_0);
 // dsf scalar(s)
A_105=mpyIII(i_0,A_101);
 // dsf scalar(s)
A_106=plusIII(A_105,yi_0);
 zi_0=( A_106);
 A_108= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_110=weights_0[[A_108]];
 // dsf scalar(s)
A_111=divDBD(cy_3,A_110);
 A_112= ABC(toi(i_0)-QUADio,shape(x_0)[0]);
A_114=x_0[[A_112]];
 // dsf scalar(s)
A_116=modBDD(A_114,A_111,QUADct_0);
 A_117= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_119=inds0(z_3,A_117,A_116);
 z_3=( A_119);
 A_121= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_123=weights_0[[A_121]];
 A_124= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_126=z_3[[A_124]];
 // dsf scalar(s)
A_127=mpyDBD(A_126,A_123);
 // dsf scalar(s)
A_128=barDDD(cy_3,A_127);
 cy_3=( A_128);
 }
 }
 A_132=rhoIDD(shpz_0,z_3);
 z_4=( A_132);
 return(z_4);
}

inline double[.] RepresentCLONE8IID(int[.] x, int y,int QUADio)
{ 
/*
 ?
*/
QUADct_0=toD(( false));
 A_56=rhoXII( y);
 A_57=rhoXII( x);
 A_58=comaIII(A_57,A_56);
 shpz_0=( A_58);
 A_60=comaXII( x);
 x_0=( A_60);
 A_62=comaIBI(x_0,true);
 A_63=rotrXII( A_62);
 A_64=mpybslXII( A_63);
 A_68=rotrXII( A_64);
 A_69=dropBII(true,A_68);
 weights_0=( A_69);
 A_71=rhoXII( y);
 shpy_0=( A_71);
 A_73=comaXII( y);
 y_0=( A_73);
 A_75=mpyslXIIQUICKSTOP( shpz_0);
 A_79=rhoIII(A_75,-1);
 z_0=( A_79);
 A_81=mpyslXIIQUICKSTOP( shpy_0);
 A_86=iotaXII( A_81,QUADio);
 A_CTR87_= 0;
A_CTR87z_ = (shape(A_86)[[0]])-1;
z_3=toD(z_0);
for(; A_CTR87_ <= A_CTR87z_; A_CTR87_++){
yi_0 = A_86[[A_CTR87_]];
 A_90= ABC(toi(yi_0)-QUADio,shape(y_0)[0]);
A_92=y_0[[A_90]];
 cy_1=( A_92);
 A_94=rhoXII( x_0);
 A_96=iotaXII( A_94,QUADio);
 A_97=rotrXII( A_96);
 A_CTR98_= 0;
A_CTR98z_ = (shape(A_97)[[0]])-1;
z_3=toD(z_3);
cy_3=toD(cy_1);
for(; A_CTR98_ <= A_CTR98z_; A_CTR98_++){
i_0 = A_97[[A_CTR98_]];
 A_101=mpyslXIIQUICKSTOP( shpy_0);
 // dsf scalar(s)
A_105=mpyIII(i_0,A_101);
 // dsf scalar(s)
A_106=plusIII(A_105,yi_0);
 zi_0=( A_106);
 A_108= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_110=weights_0[[A_108]];
 // dsf scalar(s)
A_111=divDID(cy_3,A_110);
 A_112= ABC(toi(i_0)-QUADio,shape(x_0)[0]);
A_114=x_0[[A_112]];
 // dsf scalar(s)
A_116=modIDD(A_114,A_111,QUADct_0);
 A_117= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_119=inds0(z_3,A_117,A_116);
 z_3=( A_119);
 A_121= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_123=weights_0[[A_121]];
 A_124= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_126=z_3[[A_124]];
 // dsf scalar(s)
A_127=mpyDID(A_126,A_123);
 // dsf scalar(s)
A_128=barDDD(cy_3,A_127);
 cy_3=( A_128);
 }
 }
 A_132=rhoIDD(shpz_0,z_3);
 z_4=( A_132);
 return(z_4);
}

inline double[.] RepresentCLONE9BDD(bool[.] x, double y,int QUADio)
{ 
/*
 ?
*/
QUADct_0=toD(( false));
 A_56=rhoXDI( y);
 A_57=rhoXBI( x);
 A_58=comaIII(A_57,A_56);
 shpz_0=( A_58);
 A_60=comaXBB( x);
 x_0=( A_60);
 A_62=comaBBB(x_0,true);
 A_63=rotrXBB( A_62);
 A_64=mpybslXBB( A_63);
 A_68=rotrXBB( A_64);
 A_69=dropBBB(true,A_68);
 weights_0=( A_69);
 A_71=rhoXDI( y);
 shpy_0=( A_71);
 A_73=comaXDD( y);
 y_0=( A_73);
 A_75=mpyslXIIQUICKSTOP( shpz_0);
 A_79=rhoIII(A_75,-1);
 z_0=( A_79);
 A_81=mpyslXIIQUICKSTOP( shpy_0);
 A_86=iotaXII( A_81,QUADio);
 A_CTR87_= 0;
A_CTR87z_ = (shape(A_86)[[0]])-1;
z_3=toD(z_0);
for(; A_CTR87_ <= A_CTR87z_; A_CTR87_++){
yi_0 = A_86[[A_CTR87_]];
 A_90= ABC(toi(yi_0)-QUADio,shape(y_0)[0]);
A_92=y_0[[A_90]];
 cy_1=( A_92);
 A_94=rhoXBI( x_0);
 A_96=iotaXII( A_94,QUADio);
 A_97=rotrXII( A_96);
 A_CTR98_= 0;
A_CTR98z_ = (shape(A_97)[[0]])-1;
z_3=toD(z_3);
cy_3=toD(cy_1);
for(; A_CTR98_ <= A_CTR98z_; A_CTR98_++){
i_0 = A_97[[A_CTR98_]];
 A_101=mpyslXIIQUICKSTOP( shpy_0);
 // dsf scalar(s)
A_105=mpyIII(i_0,A_101);
 // dsf scalar(s)
A_106=plusIII(A_105,yi_0);
 zi_0=( A_106);
 A_108= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_110=weights_0[[A_108]];
 // dsf scalar(s)
A_111=divDBD(cy_3,A_110);
 A_112= ABC(toi(i_0)-QUADio,shape(x_0)[0]);
A_114=x_0[[A_112]];
 // dsf scalar(s)
A_116=modBDD(A_114,A_111,QUADct_0);
 A_117= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_119=inds0(z_3,A_117,A_116);
 z_3=( A_119);
 A_121= ABC(toi(i_0)-QUADio,shape(weights_0)[0]);
A_123=weights_0[[A_121]];
 A_124= ABC(toi(zi_0)-QUADio,shape(z_3)[0]);
A_126=z_3[[A_124]];
 // dsf scalar(s)
A_127=mpyDBD(A_126,A_123);
 // dsf scalar(s)
A_128=barDDD(cy_3,A_127);
 cy_3=( A_128);
 }
 }
 A_132=rhoIDD(shpz_0,z_3);
 z_4=( A_132);
 return(z_4);
}


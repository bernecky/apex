module testlcvAKD;
export {testlcvAKD_testXII};

// Compiled by APEX Version: FIXME!! 2021-08-03 09:18:16.757
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline double plusDID(double x, int y)
{ return(DtoD(x)+ItoD(y));
}

inline double plusDBD(double x, bool y)
{ return(DtoD(x)+BtoD(y));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int CommandLineArgvXBI(bool y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline double testlcvXID(int n ,int QUADio)
{ 
/*
 ?
*/
r_0=toD(( false));
 j_0=( 9);
 A_34=iotaXII( n,QUADio);
 A_CTR35_= 0;
A_CTR35z_ = (shape(A_34)[[0]])-1;
r_2=toD(r_0);
j_2=toD(j_0);
for(; A_CTR35_ <= A_CTR35z_; A_CTR35_++){
i_0 = A_34[[A_CTR35_]];
 // dsf scalar(s)
A_38=plusDID(r_2,i_0);
 r_2=( A_38);
 // dsf scalar(s)
A_40=plusDBD(r_2,true);
 j_2=( A_40);
 }
 // dsf scalar(s)
A_43=plusDDD(r_2,j_2);
 r_3=( A_43);
 return(r_3);
}

inline int testlcvAKD_testXII()
{ 
/*
 ?
*/
n=CommandLineArgvXBI( true);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_52=testlcvXID( n,QUADio_1);
 r_0=( A_52);
 A_56=quadXDD( r_0,QUADpp_1,QUADpw_1);
 // dsf scalar(s)
A_57=barDDD(999999000001.5,0.5);
 // dsf scalar(s)
A_59=eqDDB(r_0,A_57,QUADct_0);
 // dsf scalar(s)
A_60=barBBI(true,A_59);
 r_1=( A_60);
 A_64=quadXII( A_60,QUADpp_1,QUADpw_1);
 return(r_1);
}


module UTCompress;
export {UTCompress_testXXI};

// Compiled by APEX Version: FIXME!! 2021-08-05 14:43:09.933
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[.] comaXBB(bool y)
{ /* Ravel of scalar */
  return([y]);
}

inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.] iotaXBI(bool y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline bool sameBIB(bool[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameBBB(bool[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqBBB(toB( x),  toB( y)))));
  return(z);
}



inline bool sameIBB(int[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool[.] slBBB(bool x, bool y)
{ // Scalar replicate scalar
  z = genarray([toi(x)], y);
  return(z);
}

inline bool[.] slBBB(bool x, bool[.] y)
{ // Scalar replicate vector
 cell = genarray([toi(x)], false);
 z = with {
        (. <= iv <= .)
                : genarray([toi(x)], y[iv]);
        } : genarray(shape(y), cell);
 z = comaXBB(z);
 return(z);
}


inline int[+] slBII(bool x, int[+] y)
{ // Boolean scalar compress non-scalar
  sy = shape(y);
  z = (true == toB(x)) ?  y  : genarray(drop([-1],sy)++[0],0);
  return(z);
}

inline bool[.] slBBBONEEL(bool[1] x, bool y)
{ // Vector[1] compress/replicate scalar
  z = genarray(toi(x),y);
  return(z);
}

inline bool[+] slBBBONEEL(bool[1] x, bool[+] y)
{ // last-axis vector[1] compress/replicate matrix
  // This needs conformability check FIXME
 frameshape = drop([-1],shape(y));
 cellshape = BtoI( x);
 defcell = genarray(cellshape,false);
 z = with {
   (. <= iv <= .) : slBBB( x, y[iv]);
   } : genarray( frameshape, defcell);
 return(z);
}



inline int[+] slBIIONEEL(bool[1] x, int[+] y)
{ // last-axis vector[1] compress/replicate matrix
  // This needs conformability check FIXME
show("x"); print(x);
show("y"); print(y);
 frameshape = drop([-1],shape(y));
 cellshape = BtoI( x);
 defcell = genarray(cellshape,0);
show("frameshape"); print(frameshape);
show("cellshape"); print(cellshape);
show("defcell"); print(defcell);
 z = with {
   (. <= iv <= .) : slBII( x, y[iv]);
   } : genarray( frameshape, defcell);
show("z"); print(z);
 return(z);
}



inline int[+] slBII(bool[.] x, int[+] y)
{ // last-axis vector compress/replicate matrix
  // This needs conformability check FIXME
  // Also, x may be one-element vector
 frameshape = drop([-1],shape(y));
 cellshape = sum(BtoI( x));
 defcell = genarray([cellshape],0);
 z = with {
   (. <= iv <= .) : slBII( x, y[iv]);
   } : genarray( frameshape, defcell);
 return(z);
}






inline int[.] slBII(bool[.] x, int[.] y)
{ // Boolean vector compress vector
  zxrho = sum(toi(x));
  z = genarray([zxrho], 0);
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    if ( x[i]) {
      z[[zi]] = y[[i]];
      zi++;
    }
  return(z);
}

inline bool[.] sl1BBB(bool x, bool y)
{ // Scalar replicate scalar
  z = genarray([toi(x)], y);
  return(z);
}

inline bool[.] sl1BBB(bool x, bool[.] y)
{ // Scalar replicate vector
 cell = genarray([toi(x)], false);
 z = with {
        (. <= iv <= .)
                : genarray([toi(x)], y[iv]);
        } : genarray(shape(y), cell);
 z = comaXBB(z);
 return(z);
}


inline int[+] sl1BII(bool x, int[+] y)
{ /* Boolean scalar compress non-scalar, first axis */
  z = (true == toB(x)) ? y : genarray([0]++drop([1],shape(y)),0);
  return(z);
}

inline bool[.] sl1BBBONEEL(bool[1] x, bool y)
{ // Vector[1] compress/replicate scalar
  z = genarray(toi(x),y);
  return(z);
}

inline bool[+] sl1BBBONEEL(bool[1] x, bool[+] y)
{ // Vector[1] compress/replicate-first-axis matrix
  // FIXME: needs conformability check on x
  z = (true == toB(x[0])) ? y : genarray([0]++drop([1],shape(y)),false);
  return(z);
}

inline int[+] sl1BIIONEEL(bool[1] x, int[+] y)
{ // Vector[1] compress/replicate-first-axis matrix
  // FIXME: needs conformability check on x
  z = (true == toB(x[0])) ? y : genarray([0]++drop([1],shape(y)),0);
  return(z);
}

inline int[+] sl1BII(bool[.] x, int[+] y)
{ /* Vector compress/replicate-first-axis matrix */
  /* FIXME: needs conformability and domain checks on x */
  z = TRANSPOSE( slBII(x, TRANSPOSE( y)));
  return(z);
}



inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : fold( andBBB, ItoB(1) );
        // FIXME mt_pth crashes on foldfix } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline bool[+] TRANSPOSE(bool[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), false);
  return(z);
}

inline int[+] TRANSPOSE(int[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), 0);
  return(z);
}

inline bool[.] slBBB(bool[.] x, bool[.] y)
{ // Boolean vector compress vector
  zxrho = sum(toi(x));
  z = genarray([zxrho], false);
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    if ( x[i]) {
      z[[zi]] = y[[i]];
      zi++;
    }
  return(z);
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool eqBBB(bool x, bool y)
{ /* A=B on non-doubles */
 return(BtoB(x) == BtoB(y));
}

inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : eqBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int UTCompress_testXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 S0_0=( false);
 S1_0=( true);
 A_102=comaXBB( true);
 V1_0=( A_102);
 A_104=comaXBB( false);
 V0_0=( A_104);
 V1011_0=( [true,false,true,true]);
 A_108=iotaXII( 24,QUADio_0);
 A_109=rhoIII([2, 3, 4],A_108);
 M234_0=( A_109);

#ifdef CRUD
#endif // CRUD
 r_11 = [true];
 A_183=slBIIONEEL(V1_0,M234_0);
 A_185=sameIIB(A_183,M234_0);
 A_186=comaBBB(r_11,A_185);
 r_12=( A_186);
#ifdef CRUD
#endif // CRUD
  r_29 = r_12;

 A_303=quadXBB( r_29,QUADpp_0,QUADpw_0);
 A_304=andslXBBQUICKSTOP( r_29);
 // dsf scalar(s)
A_308=barBBI(true,A_304);
r_30=( A_308);
 A_312=quadXII( A_308,QUADpp_0,QUADpw_0);
 return(r_30);
}


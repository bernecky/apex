module UTIndexRef;
export {UTIndexRef_testXXI};

// Compiled by APEX Version: FIXME!! 2021-08-06 11:34:35.492
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] mpyIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[*] dropIII(int[.] x, int[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameIIB(int x, int y)
{ /* Scalar match scalar */
  z = eqIIB(toI(x), toI(y));
 return(z);
}



inline char[*] indr(char[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[*] indr(int[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}




inline int[*] indr(int[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),0);
 z = with {
        (. <= iv <= .)
                : X[[I[iv]]];
        } : genarray(shape(I), defcell);
 return(z);
}





inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[*] jotdotplusIII(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0);
 z = with {
        (. <= iv <= .) {
         xitem = toI(x[iv]);
        } : plusIII(xitem, toI(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : fold( andBBB, ItoB(1) );
        // FIXME mt_pth crashes on foldfix } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] okCBC(char[.] msg, bool k ,int QUADio)
{ 
/*
 ?
*/
A_21=rhoICC([2, 3],['U','G','H','O','K',' ']);
 A_20= ABC(toi(k)-QUADio,shape(A_21)[0]);
A_23=A_21[[A_20]];
r_0=( A_23);
 return(r_0);
}

inline bool[.] testirXXB(int QUADio)
{ 
/*
 ?
*/
A_132=iotaXII( 6,QUADio);
 A_133=rhoIII([2, 3],A_132);
 M2_0=( A_133);
 A_138=M2_0;
 A_140=sameIIB(M2_0,A_138);
 k_0=( A_140);
 r_0=( A_140);
 A_144=okCBC(['Z','[',';',']',':',' '],k_0,QUADio);
 A_146=iotaXII( 4,QUADio);
 v_0=( A_146);
 A_150=v_0;
 A_152=sameIIB(v_0,A_150);
 k_1=( A_152);
 A_154=comaBBB(r_0,A_152);
 r_1=( A_154);
 A_157=okCBC(['V','[',']',':',' '],k_1,QUADio);
 A_158= ABC(toi([3, 2, 1, 0])-QUADio,shape(v_0)[0]);
A_160=indr(v_0,A_158);
 A_161=rotrXII( v_0);
 A_163=sameIIB(A_161,A_160);
 k_2=( A_163);
 A_165=comaBBB(r_1,A_163);
 r_2=( A_165);
 A_168=okCBC(['V','[','3',' ','2',' ','1',' ','0',']',':',' '],k_2,QUADio);
 A_172=M2_0;
 A_174=sameIIB(M2_0,A_172);
 k_3=( A_174);
 A_176=comaBBB(r_2,A_174);
 r_3=( A_176);
 A_179=okCBC(['M','2','[',';',']',':'],k_3,QUADio);
 A_181= ABC(toi(false)-QUADio,shape(M2_0)[0]);
A_183=M2_0[[A_181]];
 A_185=sameIIB(A_183,[0, 1, 2]);
 k_4=( A_185);
 A_187=comaBBB(r_3,A_185);
 r_4=( A_187);
 A_190=okCBC(['M','2','[','0',';',']',':',' '],k_4,QUADio);
 A_191= ABC(toi(true)-QUADio,shape(M2_0)[1]);
A_194=indrfr(1,M2_0,A_191);
 A_196=sameIIB(A_194,[1, 4]);
 k_5=( A_196);
 A_198=comaBBB(r_4,A_196);
 r_5=( A_198);
 A_201=okCBC(['M','2','[',';','1',']',':',' '],k_5,QUADio);
 A_202=rhoIII([2, 3],[3, 4, 5, 0, 1, 2]);
 A_204= ABC(toi([true,false])-QUADio,shape(M2_0)[0]);
A_206=indr(M2_0,A_204);
 A_208=sameIIB(A_206,A_202);
 k_6=( A_208);
 A_210=comaBBB(r_5,A_208);
 r_6=( A_210);
 A_213=okCBC(['M','2','[','1',' ','0',';',']',':',' '],k_6,QUADio);
 A_214=rhoIII([2, 3],[2, 0, 1, 5, 3, 4]);
 A_215= ABC(toi([2, 0, 1])-QUADio,shape(M2_0)[1]);
A_218=indrfr(1,M2_0,A_215);
 A_220=sameIIB(A_218,A_214);
 k_7=( A_220);
 A_222=comaBBB(r_6,A_220);
 r_7=( A_222);
 A_225=okCBC(['M','2','[',';','2',' ','0',' ','1',']',':',' '],k_7,QUADio);
 A_227= ABC(toi(false)-QUADio,shape(M2_0)[0]);
A_226= ABC(toi(2)-QUADio,shape(M2_0)[1]);
A_229=M2_0[[A_227,A_226]];
 A_231=sameIIB(A_229,2);
 k_8=( A_231);
 A_233=comaBBB(r_7,A_231);
 r_8=( A_233);
 A_236=okCBC(['M','2','[','0',';','2',']',':',' '],k_8,QUADio);
 A_238= ABC(toi([true,false])-QUADio,shape(M2_0)[0]);
A_237= ABC(toi(2)-QUADio,shape(M2_0)[1]);
A_240=indr(indrfr(1,M2_0,A_237),A_238);
 A_242=sameIIB(A_240,[5, 2]);
 k_9=( A_242);
 A_244=comaBBB(r_8,A_242);
 r_9=( A_244);
 A_247=okCBC(['M','2','[','1',' ','0',';','2',']',':',' '],k_9,QUADio);
 A_249= ABC(toi(true)-QUADio,shape(M2_0)[0]);
A_248= ABC(toi([2, 0])-QUADio,shape(M2_0)[1]);
A_251=indr(indrfr(1,M2_0,A_248),A_249);
 A_253=sameIIB(A_251,[5, 3]);
 k_10=( A_253);
 A_255=comaBBB(r_9,A_253);
 r_10=( A_255);
 A_258=okCBC(['M','2','[','1',';','2',' ','0',']',':'],k_10,QUADio);
 A_259=rhoIII([2, 2],[5, 4, 2, 1]);
 A_261= ABC(toi([true,false])-QUADio,shape(M2_0)[0]);
A_260= ABC(toi([2, 1])-QUADio,shape(M2_0)[1]);
A_263=indr(indrfr(1,M2_0,A_260),A_261);
 A_265=sameIIB(A_263,A_259);
 k_11=( A_265);
 A_267=comaBBB(r_10,A_265);
 r_11=( A_267);
 A_270=okCBC(['M','2','[','1',' ','0',';','2',' ','1',']',':',' '],k_11,QUADio);
 A_272=iotaXII( 120,QUADio);
 A_273=rhoIII([3, 4, 5],A_272);
 M3_0=( A_273);
 A_276=iotaXII( 5,QUADio);
 A_277=jotdotplusIII([10, 30, 50],A_276);
 A_285= ABC(toi(2)-QUADio,shape(M3_0)[1]);
A_288=indrfr(1,M3_0,A_285);
 A_290=sameIIB(A_288,A_277);
 k_12=( A_290);
 A_292=comaBBB(r_11,A_290);
 r_12=( A_292);
 A_295=okCBC(['M','3','[',';','2',';',']',':',' '],k_12,QUADio);
 A_298= ABC(toi(false)-QUADio,shape(M3_0)[0]);
A_297= ABC(toi(true)-QUADio,shape(M3_0)[1]);
A_296= ABC(toi(2)-QUADio,shape(M3_0)[2]);
A_300=M3_0[[A_298,A_297,A_296]];
 A_302=sameIIB(A_300,7);
 k_13=( A_302);
 A_304=comaBBB(r_12,A_302);
 r_13=( A_304);
 A_307=okCBC(['M','3','[','0',';','1',';','2',']',':',' '],k_13,QUADio);
 A_310= ABC(toi(false)-QUADio,shape(M3_0)[0]);
A_309= ABC(toi(true)-QUADio,shape(M3_0)[1]);
A_312=M3_0[[A_310,A_309]];
 A_314=sameIIB(A_312,[5, 6, 7, 8, 9]);
 k_14=( A_314);
 A_316=comaBBB(r_13,A_314);
 r_14=( A_316);
 A_319=okCBC(['M','3','[','0',';','1',';',']',':',' '],k_14,QUADio);
 A_321= ABC(toi(false)-QUADio,shape(M3_0)[1]);
A_320= ABC(toi(true)-QUADio,shape(M3_0)[2]);
A_324=indrfr(1,indrfr(2,M3_0,A_320),A_321);
 A_326=sameIIB(A_324,[1, 21, 41]);
 k_15=( A_326);
 A_328=comaBBB(r_14,A_326);
 r_15=( A_328);
 A_331=okCBC(['M','3','[',';','0',';','1',']',':',' '],k_15,QUADio);
 A_334= ABC(toi([2, 1])-QUADio,shape(M3_0)[0]);
A_333= ABC(toi(false)-QUADio,shape(M3_0)[1]);
A_332= ABC(toi(3)-QUADio,shape(M3_0)[2]);
A_336=indr(indrfr(1,indrfr(2,M3_0,A_332),A_333),A_334);
 A_338=sameIIB(A_336,[43, 23]);
 k_16=( A_338);
 A_340=comaBBB(r_15,A_338);
 r_16=( A_340);
 A_343=okCBC(['M','3','[','2',' ','1',';','4',';','3',']',':',' '],k_16,QUADio);
 A_345=iotaXII( 5,QUADio);
 A_347=iotaXII( 4,QUADio);
 // dsf scalar(s)
A_348=mpyIII(5,A_347);
 // dsf scalar(s)
A_349=plusIII(40,A_348);
 A_350=jotdotplusIII(A_349,A_345);
 A_359= ABC(toi(2)-QUADio,shape(M3_0)[0]);
A_361=M3_0[[A_359]];
 A_363=sameIIB(A_361,A_350);
 k_17=( A_363);
 A_365=comaBBB(r_16,A_363);
 r_17=( A_365);
 A_368=okCBC(['M','3','[','2',';',';',']',':',' '],k_17,QUADio);
 A_369=jotdotplusIII([0, 20, 40],[2, 7, 12, 17]);
 A_376= ABC(toi(2)-QUADio,shape(M3_0)[2]);
A_380=indrfr(2,M3_0,A_376);
 A_382=sameIIB(A_380,A_369);
 k_18=( A_382);
 A_384=comaBBB(r_17,A_382);
 r_18=( A_384);
 A_387=okCBC(['M','3','[',';',';','2',']',':',' '],k_18,QUADio);
 A_388=dropIII([0, 0, -1],M3_0);
 A_389=dropIII([0, 0, 2],A_388);
 A_390= ABC(toi([2, 3])-QUADio,shape(M3_0)[2]);
A_394=indrfr(2,M3_0,A_390);
 A_396=sameIIB(A_394,A_389);
 k_19=( A_396);
 A_398=comaBBB(r_18,A_396);
 r_19=( A_398);
 A_401=iotaXII( 5,QUADio);
 A_402=jotdotplusIII([0, -5],A_401);
 A_409=jotdotplusIII([10, 30, 50],A_402);
 z_0=( A_409);
 A_418= ABC(toi([2, 1])-QUADio,shape(M3_0)[1]);
A_421=indrfr(1,M3_0,A_418);
 A_423=sameIIB(A_421,z_0);
 k_20=( A_423);
 A_425=comaBBB(r_19,A_423);
 r_20=( A_425);
 A_428=iotaXII( 20,QUADio);
 // dsf scalar(s)
A_429=plusIII(20,A_428);
 A_431=iotaXII( 20,QUADio);
 // dsf scalar(s)
A_432=plusIII(40,A_431);
 A_433=comaIII(A_432,A_429);
 A_434=rhoIII([2, 4, 5],A_433);
 A_437= ABC(toi([2, 1])-QUADio,shape(M3_0)[0]);
A_439=indr(M3_0,A_437);
 A_441=sameIIB(A_439,A_434);
 k_21=( A_441);
 A_443=comaBBB(r_20,A_441);
 r_21=( A_443);
 A_446=okCBC(['M','3','[','2',' ','1',';',';',']',':',' '],k_21,QUADio);
 return(r_21);
}

inline int UTIndexRef_testXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_47=testirXXB( QUADio_1);
 r_0=( A_47);
 A_51=quadXBB( r_0,QUADpp_1,QUADpw_1);
 A_52=andslXBBQUICKSTOP( r_0);
 // dsf scalar(s)
A_56=barBBI(true,A_52);
r_1=( A_56);
 A_60=quadXII( r_1,QUADpp_1,QUADpw_1);
 return(r_1);
}


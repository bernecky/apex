use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3013.dws2012-11-07 10:35:41.622 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline double plusDID(double x, int y)
{ return(DtoD(x)+ItoD(y));
}

inline double plusDBD(double x, bool y)
{ return(DtoD(x)+BtoD(y));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((DtoD(x) == DtoD(y)) || APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline double testlcvXID(int n ,int QUADio)
{ 
/*
 ?
*/
r_0=toD(( false));
 j_0=( 9);
 A_37=iotaXII( n,QUADio);
 A_CTR38_= 0;
A_CTR38z_ = (shape(A_37)[[0]])-1;
r_2=toD(r_0);
j_2=toD(j_0);
for(; A_CTR38_ <= A_CTR38z_; A_CTR38_++){
i_0 = A_37[[A_CTR38_]];
 /* dsf scalar(s) */
A_41=plusDID(r_2,i_0);
 r_2=( A_41);
 /* dsf scalar(s) */
A_43=plusDBD(r_2,true);
 j_2=( A_43);
 }
 /* dsf scalar(s) */
A_46=plusDDD(r_2,j_2);
 r_3=( A_46);
 return(r_3);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 1000000);
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_58=testlcvXID( n_0,QUADio_1);
 r_0=( A_58);
 A_62=quadXDD( r_0,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_63=barDDD(999999000001.5,0.5);
 /* dsf scalar(s) */
A_65=eqDDB(r_0,A_63,QUADct_0);
 /* dsf scalar(s) */
A_66=barBBI(true,A_65);
 r_1=( A_66);
 A_70=quadXII( A_66,QUADpp_1,QUADpw_1);
 return(r_1);
}


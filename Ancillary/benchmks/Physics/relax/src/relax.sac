module relax;
export {relax_testXXI};

// Compiled by APEX Version: FIXME!! 2021-07-09 14:27:24.326
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barIBI(int x, bool y)
{ return(ItoI(x)-BtoI(y));
}

inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double[+] plusDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusDDD(xel,yel);
        } : genarray(sy, 0.0d);
  return(z);
}






inline double[+] plusDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double[+] rotrIDD(int x, double[+] y)
{ /* Scalar rotate matrix last axis */
 cols = shape(y)[[dim(y)-1]];
 ix = toi(x);
 k = VectorRotateAmount(ix,cols); /* Normalize rotate count */
 y2d = reshape([prod(drop([-1],shape(y))), cols], y);
 z = with {
        (. <= [i,j] <= .)
         { idx = (j+k) < cols ? (j+k) : (j+k) - cols;
         } : y2d[[ i, idx]];
        } : genarray(shape(y2d), 0.0d);
 z = reshape(shape(y),z);
 return (z);
}


inline double[+] rotrBDD(bool x, double[+] y)
{ /* Scalar rotate matrix last axis */
 cols = shape(y)[[dim(y)-1]];
 ix = toi(x);
 k = VectorRotateAmount(ix,cols); /* Normalize rotate count */
 y2d = reshape([prod(drop([-1],shape(y))), cols], y);
 z = with {
        (. <= [i,j] <= .)
         { idx = (j+k) < cols ? (j+k) : (j+k) - cols;
         } : y2d[[ i, idx]];
        } : genarray(shape(y2d), 0.0d);
 z = reshape(shape(y),z);
 return (z);
}


inline double[+] rot1IDD(int x, double[+] y)
{ /* Scalar rotate first axis non-scalar */
 ix = toi(x);
 rows = shape(y)[0];
 cellshape = drop([1], shape(y));
 defcell = genarray(cellshape, 0.0d);
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline double[+] rot1BDD(bool x, double[+] y)
{ /* Scalar rotate first axis non-scalar */
 ix = toi(x);
 rows = shape(y)[0];
 cellshape = drop([1], shape(y));
 defcell = genarray(cellshape, 0.0d);
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline double[*] rhoIDD(int[.] x, double[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0.0d);
   return( z);
}



inline double[.,.] takeIDD(int[.] x, double[.,.] y)
{ /* vector take matrix */
  return(take(toi(x),y));
}

inline double[*] dropIDD(int[.] x, double[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline double[*] dropBDD(bool[.] x, double[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[.]  rhoXDI(double[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[2] comaBII(bool x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline int[2] comaIBI(int x, bool y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline double[+] comaDDD(double[+] x, double[+] y)
{/* AxA last axis catenate. Ranks match */
 cellshape = (take([-1],shape(x)))+take([-1],shape(y));
 cell = genarray(cellshape, 0.0d);
 z = with {
         (. <= iv <= .)
                : toD(x[iv])++toD(y[iv]);
        } : genarray(drop([-1], shape(x)), cell);
 return(z);
}


inline double[+] combDDD(double[+] x, double[+] y)
{/* AxA first axis catenate. Ranks match */
 return(toD(x)++toD(y));
}

inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : DtoD(y[lim-iv]);
       } :  fold( plusDDD, ItoD(0));
  return(z);
}


inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline double[+] plusDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] plusDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusDDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int VectorRotateAmount(int x, int y)
{ /* Normalize x rotate for array of shape y on selected axis */
 /* normalize rotation count */

if ((0==x) || (0==y))
  z = 0;
else if (x>0)
        z = _aplmod_SxS_(x,y);
     else
        z = y - _aplmod_SxS_(abs(x),y);
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline double[.,.] relaxXDD(double[.,.] A ,int QUADio)
{ 
/*
 ?
*/
A_49=rhoXDI( A);
 A_48= ABC(toi(false)-QUADio,shape(A_49)[0]);
A_51=A_49[[A_48]];
m_0=( A_51);
 A_54=rhoXDI( A);
 A_53= ABC(toi(true)-QUADio,shape(A_54)[0]);
A_56=A_54[[A_53]];
 n_0=( A_56);
 A_58=rotrIDD(-1,A);
 A_59=rotrBDD(true,A);
 // dsf clique
A_60=plusDDD(A_59,A_58);
 A_61=rot1IDD(-1,A);
 // dsf clique
A_62=plusDDD(A_61,A_60);
 A_63=rot1BDD(true,A);
 // dsf clique
A_64=plusDDD(A_63,A_62);
 B_0=( A_64);
 A_66=comaBII(true,n_0);
 A_67=takeIDD(A_66,A);
 upper_A_0=( A_67);
 // dsf scalar(s)
A_69=barIBI(m_0,true);
 A_70=comaIBI(A_69,false);
 A_71=dropIDD(A_70,A);
 lower_A_0=( A_71);
 // dsf scalar(s)
A_73=barIBI(m_0,true);
 A_74=comaIBI(A_73,true);
 A_75=takeIDD(A_74,A);
 A_76=dropBDD([true,false],A_75);
 left_A_0=( A_76);
 // dsf scalar(s)
A_78=barIBI(n_0,true);
 A_79=comaBII(true,A_78);
 A_80=dropIDD(A_79,A);
 // dsf scalar(s)
A_81=barIII(m_0,2);
 A_82=comaIBI(A_81,true);
 A_83=takeIDD(A_82,A_80);
 right_A_0=( A_83);
 A_85=dropBDD([true,true],B_0);
 // dsf scalar(s)
A_86=barIII(n_0,2);
 // dsf scalar(s)
A_87=barIII(m_0,2);
 A_88=comaIII(A_87,A_86);
 A_89=takeIDD(A_88,A_85);
 inner_B_0=( A_89);
 A_91=comaDDD(inner_B_0,right_A_0);
 A_92=comaDDD(left_A_0,A_91);
 middle_0=( A_92);
 A_94=combDDD(middle_0,lower_A_0);
 A_95=combDDD(upper_A_0,A_94);
 result_0=( A_95);
 return(result_0);
}

inline int relax_testXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 m_0=( 2000);
 n_0=( 1000);
 // dsf scalar(s)
A_65=mpyIII(m_0,n_0);
 A_67=iotaXII( A_65,QUADio_1);
 // dsf scalar(s)
A_68=plusDID(0.5,A_67);
 A_69=comaIII(m_0,n_0);
 A_70=rhoIDD(A_69,A_68);
 A_0=( A_70);
 A_73=relaxXDD( A_0,QUADio_1);
 A_74=comaXDD( A_73);
 A_75=plusslXDDFOLD( A_74);
 r_0=( A_75);
 A_82=quadXDD( r_0,QUADpp_1,QUADpw_1);
 // dsf scalar(s)
A_84=eqDDB(7982012000000.0,r_0,QUADct_0);
z_0=( A_84);
 // dsf scalar(s)
A_86=barBBI(z_0,true);
 z_1=( A_86);
 A_90=quadXII( A_86,QUADpp_1,QUADpw_1);
 return(z_1);
}


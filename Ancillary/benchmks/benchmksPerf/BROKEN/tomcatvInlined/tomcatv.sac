use Array: all;
use Math: all;
use String: {tochar,to_string,strtod};
import Char: all;
use StdIO: all;
use Bits: all;

/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) tob((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

inline double[+] barXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with( . <= iv <= .)
        genarray(shape(y),
   barXDD(toD(y[iv])),0.0d);
  return(z);
}

inline double[+] modXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with( . <= iv <= .)
        genarray(shape(y),
   modXDD(toD(y[iv])),0.0d);
  return(z);
}

inline double[+] divXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with( . <= iv <= .)
        genarray(shape(y),
   divXDD(toD(y[iv])),0.0d);
  return(z);
}

inline double divIDD(int x, double y)
{ dx = tod(x);
  dy = tod(y);
 if (dx == dy)
      z = 1.0d;
  else
      z = dx/dy;
  return(z);
}

inline int plusIII(int x, int y)
{ return(toI(x)+toI(y));
}

inline int barIII(int x, int y)
{ return(toI(x)-toI(y));
}

inline int barIBI(int x, bool y)
{ return(toI(x)-toI(y));
}

inline int plusIBI(int x, bool y)
{ return(toI(x)+toI(y));
}

inline int plusBBI(bool x, bool y)
{ return(toI(x)+toI(y));
}

inline double[+] barDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
       sx = DSFLenErrorCheck(shape(x), shape(y));
     z = with( . <= iv <= .) {
      xel = toD(x[iv]);
    yel = toD(y[iv]);
      }
        genarray(sx,
                 barDDD(xel,yel),0.0d);
  return(z);
}







inline double[+] mpyDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
       sx = DSFLenErrorCheck(shape(x), shape(y));
     z = with( . <= iv <= .) {
      xel = toD(x[iv]);
    yel = toD(y[iv]);
      }
        genarray(sx,
                 mpyDDD(xel,yel),0.0d);
  return(z);
}







inline double[+] plusDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
       sx = DSFLenErrorCheck(shape(x), shape(y));
     z = with( . <= iv <= .) {
      xel = toD(x[iv]);
    yel = toD(y[iv]);
      }
        genarray(sx,
                 plusDDD(xel,yel),0.0d);
  return(z);
}







inline double[+] mpyDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with( . <= iv <= .) {
        yel = toD(y[iv]);
      }
        genarray(shape(y),
                mpyDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] mpyIDD(int x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with( . <= iv <= .) {
        yel = toD(y[iv]);
      }
        genarray(shape(y),
                mpyDDD(xel,yel),0.0d);
  return(z);
}


inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with( . <= iv <= .) {
        yel = toI(y[iv]);
      }
        genarray(shape(y),
                plusIII(xel,yel),0);
  return(z);
}


inline double[+] mpyDID(double[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
       sx = DSFLenErrorCheck(shape(x), shape(y));
     z = with( . <= iv <= .) {
      xel = toD(x[iv]);
    yel = toD(y[iv]);
      }
        genarray(sx,
                 mpyDDD(xel,yel),0.0d);
  return(z);
}







inline double[+] divDID(double[+] x, int y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with( . <= iv <= .) {
       xel = toD(x[iv]);
      }
        genarray( shape(x),
          divDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] divIID(int[+] x, int y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with( . <= iv <= .) {
       xel = toD(x[iv]);
      }
        genarray( shape(x),
          divDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] barBDD(bool x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with( . <= iv <= .) {
        yel = toD(y[iv]);
      }
        genarray(shape(y),
                barDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] mpyDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with( . <= iv <= .) {
       xel = toD(x[iv]);
      }
        genarray( shape(x),
          mpyDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] barDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with( . <= iv <= .) {
        yel = toD(y[iv]);
      }
        genarray(shape(y),
                barDDD(xel,yel),0.0d);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with( . <= iv <= .) {
        yel = toI(y[iv]);
      }
        genarray(shape(y),
                plusIII(xel,yel),0);
  return(z);
}


inline bool[.] comaXBB(bool y)
{ /* Ravel of scalar */
        return([y]);
}

inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
 n = shape(y);
 cell = 0;
 z = with( . <= iv <= .)
        genarray(n, y[(n-1)-iv],cell);
 return(z);
}

inline double[.] rhoIDD(int x, double y)
{ /* Scalar reshape scalar to vector) */
      z = genarray([toi(x)], y);
     return(z);
}

inline double[*] rhoIDD(int[.] x, double[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXDD(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with(. <= [i] <= .)
                genarray( [ncopies], y,y);
        /* Now append the leftover bits */
        z = comaXDD(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int iotaDDI(double[.] x, double y,double QUADct,int QUADio)
{ /* Fuzzy Vector iota Scalar */
 sx = shape(x)[[0]];
 z = sx;
 for(i=0; i<sx; i++) {
   if (eqDDB(toD(x[[i]]),toD(y),QUADct)){
             z = i;
                 i = sx;
        }
 }
 return(z+QUADio);
}



inline double[*] dropIDD(int[.] x, double[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline double[*] dropBDD(bool[.] x, double[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline double[*] dropIDD(int x, double[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[2]  rhoXDI(double[.,.] y)
{ /* Shape of matrix (rank-2) */
 return(shape(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  ishp = toi(y);
  z = with( [QUADio] <= iv < [QUADio+ishp])
        genarray( [ishp], iv[[0]]);
  return( z);
}

inline double[+] quadXDD(double[+] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} non-scalar anything except boolean*/
         print(y);
      return(y);
}

inline int quadXII(int y, int QUADpp, int QUADpw)
{ /* {quad}{<-} scalar anything except boolean*/
     print([y]);
    return(y);
}

inline double[.] comaDBD(double[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toD(x)++[toD(y)]);
}

inline double[.] comaBDD(bool x, double[.] y)
{/* SxV catenate first (or last) axis */
 return([toD(x)]++toD(y));
}

inline int[2] comaIBI(int x, bool y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline double[+] combLGDDD(double[+] x, double[+] y)
{/* A,A first axis catenate. Left rank greater */
 ny = reshape([1]++shape(y),y);
 return(toD(x)++toD(ny));
}
inline double[+] comaDDD(double[+] x, double[+] y)
{/* A,A last axis catenate. Ranks match */
 cellshape = (take([-1],shape(x)))+take([-1],shape(y));
 cell = genarray(cellshape, 0.0d);
 z = with (. <= iv <= .)
     genarray(drop([-1], shape(x)),
                 toD(x[iv])++toD(y[iv]), cell);
 return(z);
}


inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline double[.] comaIDD(int[.] x, double y)
{/* VxS catenate first (or last) axis */
 return(toD(x)++[toD(y)]);
}

inline double[.] comaDDD(double x, double[.] y)
{/* SxV catenate first (or last) axis */
 return([toD(x)]++toD(y));
}

inline double[.] comaIDD(int[.] x, double[.] y)
{ /* VxV catenate first or last axis */
 return(toD(x)++toD(y));
}

inline double[.] comaIDD(int x, double[.] y)
{/* SxV catenate first (or last) axis */
 return([toD(x)]++toD(y));
}

inline bool sameDDB(double[.] x, double[.] y,double QUADct)
{ /* vector-vector match */
 z =all(shape(x) == shape(y));
 if (z)
  z = with(0*shape(y) <= iv < shape(y))
        fold(&, true,
                 eqDDB(toD(x[iv]), toD(y[iv]), QUADct));
 return(z);
}


inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline double[*] indr(double[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),0.0d);
 z = with(. <= iv <= .)
        genarray(shape(I), X[[I[iv]]],defcell);
 return(z);
}





inline double[*] indr(double[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline double[*] indr(double[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}

inline double[+] inds11(double[+] X, int [+] I0,int [+] I1, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[I0[[i0]],I1[[i1]]]]=tod(Y[[i0,i1]]);

 }
 }

 return(z);
}



inline double[+] indsx0(double[+] X, int  I1, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){

 z[[i0,I1]]=tod(Y[[i0]]);

 }

 return(z);
}



inline double[+] inds0x(double[+] X, int  I0, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 
 z[[I0]]=tod(Y);

 
 return(z);
}



inline double[*] jotdotmpyDDD(double [*] x, double [*] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0.0d);
 z = with (. <= iv <= .) {
    xitem = toD(x[iv]);
         }
               genarray(shape(x),
             mpyDDD(xitem, toD(y)),cell);
 return(z);
}


inline double[+] slIDD(int x, double[+] y)
{/* Scalar replicate non-scalar */
 /* FIXME : domain check needed on x */
 ix = [toi(x)];
 frameshape = drop([-1],shape(y));
 cellshape  = ix * take([-1],shape(y));
 defcell = genarray(cellshape, 0.0d);
 z = with(. <= iv <= .)
      genarray(frameshape, slIDD(x, y[iv]), defcell);
 return(z);
}


inline double[+] maxslXDD(double[+] y)
{ /* last axis reduce rank-2 or greater matrix */
  sy = shape(y);
  zrho = drop([-1], sy);
  z = with (. <= iv <= .)
         genarray(zrho,
        maxslXDD(y[iv]),0.0d);
  return(z);
}


inline double maxslXDD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with (0*shape(y) <= iv < shape(y))
        fold( maxDDD, toD(mindouble()), toD(y[lim-iv]));
  return(z);
}



inline double barXDD(double y)
{ return(-y);
}

inline double modXDD(double y)
{ return(abs(toD(y)));
}

inline double divXDD(double y)
{ return(1.0/tod(y));
}

inline double barDDD(double x, double y)
{ return(toD(x)-toD(y));
}

inline double mpyDDD(double x, double y)
{ return(toD(x)*toD(y));
}

inline double plusDDD(double x, double y)
{ return(toD(x)+toD(y));
}

inline double divDDD(double x, double y)
{ dx = tod(x);
  dy = tod(y);
 if (dx == dy)
      z = 1.0d;
  else
      z = dx/dy;
  return(z);
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((toD(x) == toD(y)) || APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline double maxDDD(double x, double y)
{ /* x max y */
 cx = toD(x);
 cy = toD(y);
 if (cx <= cy)
    z = cy;
 else
         z = cx;
 return (z);
}

inline double[+] barDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with( . <= iv <= .) {
       xel = toD(x[iv]);
      }
        genarray( shape(x),
          barDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] plusDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with( . <= iv <= .) {
        yel = toD(y[iv]);
      }
        genarray(shape(y),
                plusDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] plusDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with( . <= iv <= .) {
       xel = toD(x[iv]);
      }
        genarray( shape(x),
          plusDDD(xel,yel),0.0d);
  return(z);
}


inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with(. <= iv <= .)
        genarray(frameshape, indrfr0(X[iv], I),cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with(. <= iv <= .)
        genarray(shape(I), sel( I[iv], X),cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with(. <= iv <= .)
        genarray(frameshape, sel( I, X[iv]),cell);
 return(z);
}


inline double[*] indrfr(int fr, double[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with(. <= iv <= .)
        genarray(frameshape, indrfr0(X[iv], I),cell);
 return(z);
}

inline double[*] indrfr0(double[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with(. <= iv <= .)
        genarray(shape(I), sel( I[iv], X),cell);
 return(z);
}



inline double[*] indrfr(int fr, double[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0.0d);
 z = with(. <= iv <= .)
        genarray(frameshape, sel( I, X[iv]),cell);
 return(z);
}


inline int[.] DSFLenErrorCheck(int[.] sx, int[.] sy)
{ /* Dyadic scalar fn length error check */
     z = sx;
    if (any(sx != sy)) /* Check that shapes match */
      print(tochar("APEX dyadic scalar function length error!"));
     return(z);
}

inline int ABC(int I, int Xshape)
{ /* Array bounds checker for indexed ref X[scalarI] and indexed assign */
 z = I;
  if ( (I < 0) || (I >= Xshape)) {
         print(tochar("APEX index error!"));
  }
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* Array bounds checker for indexed ref  X[nonscalarI] and indexed assign */
 z = I;
 bad = with((0*shape(z)) <= iv < shape(z))
  fold(|, false, (z[iv] < 0) || (z[iv] >= Xshape));
 if (bad)
  print(tochar("APEX index error!"));
 return(z);
}

inline double[.] slIDD(int x, double[.] y)
{ /* Scalar replicate vector */
 cell = genarray([toi(x)], 0.0d);
 z = with(. <= iv <= .)
 genarray(shape(y),
        genarray([toi(x)], y[iv]),cell);
 return(comaXDD(z));
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline double[.,.],double[.,.],double[.,.],double[.,.],double[.,.]
 compmeshDDD(double[.,.] x, double[.,.] y)
{ /* Start of function compmesh 2006-10-11 17:54:36.000 */

/*
  r{<-}x compmesh y;xx;yx;xy;yy;a;b;c;pxx;pxy;qxx;qxy;pyy;qyy
  xx{<-}(2 1{drop}0 {neg}1{drop}x)-0 1{drop}{neg}2 {neg}1{drop}x
  yx{<-}(2 1{drop}0 {neg}1{drop}y)-0 1{drop}{neg}2 {neg}1{drop}y
  xy{<-}(1 2{drop}{neg}1 0{drop}x)-1 0{drop}{neg}1 {neg}2{drop}x
  yy{<-}(1 2{drop}{neg}1 0{drop}y)-1 0{drop}{neg}1 {neg}2{drop}y
 @
  a{<-}0.25{times}(xy{times}xy)+yy{times}yy
  b{<-}0.25{times}(yx{times}yx)+xx{times}xx
  c{<-}0.125{times}(xy{times}xx)+yx{times}yy
 @
  pxx{<-}(2 1{drop}0 {neg}1{drop}x)-(2{times}1 1{drop}{neg}1 {neg}1{drop}x)-0 1{drop}{neg}2 {neg}1{drop}x
  qxx{<-}(2 1{drop}0 {neg}1{drop}y)-(2{times}1 1{drop}{neg}1 {neg}1{drop}y)-0 1{drop}{neg}2 {neg}1{drop}y
  pyy{<-}(1 2{drop}{neg}1 0{drop}x)-(2{times}1 1{drop}{neg}1 {neg}1{drop}x)-1 0{drop}{neg}1 {neg}2{drop}x
  qyy{<-}(1 2{drop}{neg}1 0{drop}y)-(2{times}1 1{drop}{neg}1 {neg}1{drop}y)-1 0{drop}{neg}1 {neg}2{drop}y
 @
  pxy{<-}((2 2{drop}x)-2 {neg}2{drop}x)+({neg}2 {neg}2{drop}x)-{neg}2 2{drop}x @ signs
  qxy{<-}((2 2{drop}y)-2 {neg}2{drop}y)+({neg}2 {neg}2{drop}y)-{neg}2 2{drop}y
 @ GLOBALS OUT:
  aa{<-}-b
  dd{<-}b+b+(2{divide}0.98){times}a
  rx{<-}(a{times}pxx)+(b{times}pyy)-c{times}pxy
  r{<-}ry{<-}(a{times}qxx)+(b{times}qyy)-c{times}qxy
 
*/
A_93=dropIDD([-2, -1],x) ;
 A_94=dropBDD([false,true],A_93) ;
 A_95=dropIDD([0, -1],x) ;
 A_96=dropIDD([2, 1],A_95) ;
 /* dsf Check needed */
A_97=barDDD(A_96,A_94);
 xx_0=( A_97) ;
 A_99=dropIDD([-2, -1],y) ;
 A_100=dropBDD([false,true],A_99) ;
 A_101=dropIDD([0, -1],y) ;
 A_102=dropIDD([2, 1],A_101) ;
 /* dsf Check needed */
A_103=barDDD(A_102,A_100);
 yx_0=( A_103) ;
 A_105=dropIDD([-1, -2],x) ;
 A_106=dropBDD([true,false],A_105) ;
 A_107=dropIDD([-1, 0],x) ;
 A_108=dropIDD([1, 2],A_107) ;
 /* dsf Check needed */
A_109=barDDD(A_108,A_106);
 xy_0=( A_109) ;
 A_111=dropIDD([-1, -2],y) ;
 A_112=dropBDD([true,false],A_111) ;
 A_113=dropIDD([-1, 0],y) ;
 A_114=dropIDD([1, 2],A_113) ;
 /* dsf Check needed */
A_115=barDDD(A_114,A_112);
 yy_0=( A_115) ;
 /* dsf clique */
A_117=mpyDDD(yy_0,yy_0);
 /* dsf clique */
A_118=mpyDDD(xy_0,xy_0);
 /* dsf Check needed */
A_119=plusDDD(A_118,A_117);
 /* dsf scalar(s) */
A_120=mpyDDD(0.25,A_119);
 a_0=( A_120) ;
 /* dsf clique */
A_122=mpyDDD(xx_0,xx_0);
 /* dsf clique */
A_123=mpyDDD(yx_0,yx_0);
 /* dsf Check needed */
A_124=plusDDD(A_123,A_122);
 /* dsf scalar(s) */
A_125=mpyDDD(0.25,A_124);
 b_0=( A_125) ;
 /* dsf Check needed */
A_127=mpyDDD(yx_0,yy_0);
 /* dsf Check needed */
A_128=mpyDDD(xy_0,xx_0);
 /* dsf Check needed */
A_129=plusDDD(A_128,A_127);
 /* dsf scalar(s) */
A_130=mpyDDD(0.125,A_129);
 c_0=( A_130) ;
 A_132=dropIDD([-2, -1],x) ;
 A_133=dropBDD([false,true],A_132) ;
 A_134=dropIDD([-1, -1],x) ;
 A_135=dropBDD([true,true],A_134) ;
 /* dsf scalar(s) */
A_136=mpyIDD(2,A_135);
 /* dsf Check needed */
A_137=barDDD(A_136,A_133);
 A_138=dropIDD([0, -1],x) ;
 A_139=dropIDD([2, 1],A_138) ;
 /* dsf Check needed */
A_140=barDDD(A_139,A_137);
 pxx_0=( A_140) ;
 A_142=dropIDD([-2, -1],y) ;
 A_143=dropBDD([false,true],A_142) ;
 A_144=dropIDD([-1, -1],y) ;
 A_145=dropBDD([true,true],A_144) ;
 /* dsf scalar(s) */
A_146=mpyIDD(2,A_145);
 /* dsf Check needed */
A_147=barDDD(A_146,A_143);
 A_148=dropIDD([0, -1],y) ;
 A_149=dropIDD([2, 1],A_148) ;
 /* dsf Check needed */
A_150=barDDD(A_149,A_147);
 qxx_0=( A_150) ;
 A_152=dropIDD([-1, -2],x) ;
 A_153=dropBDD([true,false],A_152) ;
 A_154=dropIDD([-1, -1],x) ;
 A_155=dropBDD([true,true],A_154) ;
 /* dsf scalar(s) */
A_156=mpyIDD(2,A_155);
 /* dsf Check needed */
A_157=barDDD(A_156,A_153);
 A_158=dropIDD([-1, 0],x) ;
 A_159=dropIDD([1, 2],A_158) ;
 /* dsf Check needed */
A_160=barDDD(A_159,A_157);
 pyy_0=( A_160) ;
 A_162=dropIDD([-1, -2],y) ;
 A_163=dropBDD([true,false],A_162) ;
 A_164=dropIDD([-1, -1],y) ;
 A_165=dropBDD([true,true],A_164) ;
 /* dsf scalar(s) */
A_166=mpyIDD(2,A_165);
 /* dsf Check needed */
A_167=barDDD(A_166,A_163);
 A_168=dropIDD([-1, 0],y) ;
 A_169=dropIDD([1, 2],A_168) ;
 /* dsf Check needed */
A_170=barDDD(A_169,A_167);
 qyy_0=( A_170) ;
 A_172=dropIDD([-2, 2],x) ;
 A_173=dropIDD([-2, -2],x) ;
 /* dsf Check needed */
A_174=barDDD(A_173,A_172);
 A_175=dropIDD([2, -2],x) ;
 A_176=dropIDD([2, 2],x) ;
 /* dsf Check needed */
A_177=barDDD(A_176,A_175);
 /* dsf Check needed */
A_178=plusDDD(A_177,A_174);
 pxy_0=( A_178) ;
 A_180=dropIDD([-2, 2],y) ;
 A_181=dropIDD([-2, -2],y) ;
 /* dsf Check needed */
A_182=barDDD(A_181,A_180);
 A_183=dropIDD([2, -2],y) ;
 A_184=dropIDD([2, 2],y) ;
 /* dsf Check needed */
A_185=barDDD(A_184,A_183);
 /* dsf Check needed */
A_186=plusDDD(A_185,A_182);
 qxy_0=( A_186) ;
 A_188=barXDD( b_0) ;
 aa_0=( A_188) ;
 /* dsf scalar(s) */
A_190=divIDD(2,0.98);
 /* dsf scalar(s) */
A_191=mpyDDD(A_190,a_0);
 /* dsf Check needed */
A_192=plusDDD(b_0,A_191);
 /* dsf Check needed */
A_193=plusDDD(b_0,A_192);
 dd_0=( A_193) ;
 /* dsf Check needed */
A_195=mpyDDD(c_0,pxy_0);
 /* dsf Check needed */
A_196=mpyDDD(b_0,pyy_0);
 /* dsf Check needed */
A_197=barDDD(A_196,A_195);
 /* dsf Check needed */
A_198=mpyDDD(a_0,pxx_0);
 /* dsf Check needed */
A_199=plusDDD(A_198,A_197);
 rx_0=( A_199) ;
 /* dsf Check needed */
A_201=mpyDDD(c_0,qxy_0);
 /* dsf Check needed */
A_202=mpyDDD(b_0,qyy_0);
 /* dsf Check needed */
A_203=barDDD(A_202,A_201);
 /* dsf Check needed */
A_204=mpyDDD(a_0,qxx_0);
 /* dsf Check needed */
A_205=plusDDD(A_204,A_203);
 ry_0=( A_205) ;
 r_0=( A_205) ;
return(r_0,
aa_0,
dd_0,
rx_0,
ry_0);
}

inline double[.,.] correctDDD(double[.,.] rx, double[.,.] x ,int QUADio)
{ /* Start of function correct 2006-10-11 17:54:38.000 */

/*
  r{<-}rx correct x;n
 @ Return x at edges, otherwise rx+x
  r{<-}x
  n{<-}1+{iota}{neg}2+({rho}x)[1]
  r[n;n]{<-}rx+r[n;n]
 
*/
r_0=( x) ;
 A_28=rhoXDI( x) ;
 A_27= ABC(toi(true)-QUADio,shape(A_28)[0]);
A_30=A_28[[A_27]];
 /* dsf scalar(s) */
A_31=plusIII(-2,A_30) ;
 A_33=iotaXII( A_31,QUADio) ;
 /* dsf scalar(s) */
A_34=plusBII(true,A_33) ;
 n_0=( A_34) ;
 A_37= ABC(toi(n_0)-QUADio,shape(r_0)[0]);
A_36= ABC(toi(n_0)-QUADio,shape(r_0)[1]);
A_39=indr(indrfr(1,r_0,A_36),A_37);
 /* dsf Check needed */
A_40=plusDDD(rx,A_39) ;
 A_42= ABC(toi(n_0)-QUADio,shape(r_0)[0]);
A_41= ABC(toi(n_0)-QUADio,shape(r_0)[1]);
A_44=inds11(r_0,A_42,A_41,A_40) ;
 r_1=( A_44) ;
return(r_1);
}

inline double[.,.] dataxXID(int n,int QUADio)
{ /* Start of function datax 2006-10-11 17:54:40.000 */

/*
  r{<-}datax n;xij
 @ Tomcatv benchmark
 @ Model based on John Feo's SISAL 1.2 benchmark
 @ Initial field for x(i,j)
 @ This is transpose (sort of) of fortran version
 @ with stretch factor alfa
 @ Following code corresponds to DO loop 1
 @ in the Fortran version.
  xij{<-}1,((n-2){rho}0.9),1
  r{<-}n/((n,1){rho}xij{times}{iota}n){divide}n-1
  r[;0]{<-}({iota}n){divide}n-1
  r[;n-1]{<-}({iota}n){divide}n-1
 
*/
/* dsf scalar(s) */
A_29=barIII(n,2) ;
 A_30=rhoIDD(A_29,0.9) ;
 A_31=comaDBD(A_30,true) ;
 A_32=comaBDD(true,A_31) ;
 xij_0=( A_32) ;
 /* dsf scalar(s) */
A_34=barIBI(n,true) ;
 A_36=iotaXII( n,QUADio) ;
 /* dsf Check needed */
A_37=mpyDID(xij_0,A_36) ;
 A_38=comaIBI(n,true) ;
 A_39=rhoIDD(A_38,A_37) ;
 /* dsf scalar(s) */
A_40=divDID(A_39,A_34) ;
 A_41=slIDD(n,A_40) ;
 r_0=( A_41) ;
 /* dsf scalar(s) */
A_43=barIBI(n,true) ;
 A_45=iotaXII( n,QUADio) ;
 /* dsf scalar(s) */
A_46=divIID(A_45,A_43) ;
 A_47= ABC(toi(false)-QUADio,shape(r_0)[1]);
A_50=indsx0(r_0,A_47,A_46);
 r_1=( A_50) ;
 /* dsf scalar(s) */
A_52=barIBI(n,true) ;
 A_54=iotaXII( n,QUADio) ;
 /* dsf scalar(s) */
A_55=divIID(A_54,A_52) ;
 /* dsf scalar(s) */
A_56=barIBI(n,true) ;
 A_57= ABC(toi(A_56)-QUADio,shape(r_1)[1]);
A_60=indsx0(r_1,A_57,A_55);
 r_2=( A_60) ;
return(r_2);
}

inline double[.,.] datayDID(double[.,.] x, int n,int QUADio)
{ /* Start of function datay 2006-10-11 17:54:42.000 */

/*
  r{<-}x datay n;yin;yij;nod
 @ Tomcatv benchmark
 @ Model based on John Feo's SISAL 1.2 benchmark
 @ This is transpose (sort of) of fortran version
 @ Initial field for x(i,j)
 @ with stretch factor alfa
 @ Following code corresponds to DO loop 1
 @ in the Fortran version.
  yin{<-}(1-0.9{times}x[;,0]){times}x[n-1;0]
  nod{<-}{neg}1{drop}x[;0]
  r{<-}(0.9-0.81{times}({neg}1{drop}x[;0])){jot}.{times}nod
  r{<-}r{commabar}0.1{times}nod
  r[0;]{<-}nod
  r{<-}r,yin
 
*/
/* dsf scalar(s) */
A_36=barIBI(n,true) ;
 A_38= ABC(toi(A_36)-QUADio,shape(x)[0]);
A_37= ABC(toi(false)-QUADio,shape(x)[1]);
A_40=x[[A_38,A_37]];
 A_41=comaXBB( false) ;
 A_42= ABC(toi(A_41)-QUADio,shape(x)[1]);
A_45=indrfr(1,x,A_42);
 /* dsf scalar(s) */
A_46=mpyDDD(0.9,A_45) ;
 /* dsf scalar(s) */
A_47=barBDD(true,A_46) ;
 /* dsf scalar(s) */
A_48=mpyDDD(A_47,A_40) ;
 yin_0=( A_48) ;
 A_50= ABC(toi(false)-QUADio,shape(x)[1]);
A_53=indrfr(1,x,A_50);
 A_54=dropIDD(-1,A_53) ;
 nod_0=( A_54) ;
 A_56= ABC(toi(false)-QUADio,shape(x)[1]);
A_59=indrfr(1,x,A_56);
 A_60=dropIDD(-1,A_59) ;
 /* dsf scalar(s) */
A_61=mpyDDD(0.81,A_60) ;
 /* dsf scalar(s) */
A_62=barDDD(0.9,A_61) ;
 A_63=jotdotmpyDDD(A_62,nod_0) ;
 r_0=( A_63) ;
 /* dsf scalar(s) */
A_71=mpyDDD(0.1,nod_0) ;
 A_72=combLGDDD(r_0,A_71) ;
 r_1=( A_72) ;
 A_75= ABC(toi(false)-QUADio,shape(r_1)[0]);
A_77=inds0x(r_1,A_75,nod_0) ;
 r_2=( A_77) ;
 A_79=comaDDD(r_2,yin_0) ;
 r_3=( A_79) ;
return(r_3);
}

inline double,int,int
 fmaXDD(double[.,.] y,int QUADio,double QUADct)
{ /* Start of function fma 2006-10-11 17:54:44.000 */

/*
  z{<-}fma y;t;ay;v
 @ value and xy-index of maximum
 @ absolute value in y
 @ Sets xy-index in i,j as side effects. Ugh.
  ay{<-}|y
  v{<-}{max}/ay
  t{<-}{max}/v
  i{<-}v{iota}t
  j{<-}ay[i;]{iota}t
  z{<-}y[i;j]
 
*/
A_37=modXDD( y) ;
 ay_0=( A_37) ;
 A_39=maxslXDD( ay_0) ;
 v_0=( A_39) ;
 A_44=maxslXDD( v_0) ;
 t_0=( A_44) ;
 A_51=iotaDDI(v_0,t_0,QUADct,QUADio) ;
 i_0=( A_51) ;
 A_54= ABC(toi(i_0)-QUADio,shape(ay_0)[0]);
A_56=ay_0[[A_54]];
 A_59=iotaDDI(A_56,t_0,QUADct,QUADio) ;
 j_0=( A_59) ;
 A_62= ABC(toi(i_0)-QUADio,shape(y)[0]);
A_61= ABC(toi(j_0)-QUADio,shape(y)[1]);
A_64=y[[A_62,A_61]];
 z_0=( A_64) ;
return(z_0,
i_0,
j_0);
}

inline int,double[.,.],double[.,.]
 sweepdnDDI(double[.,.] aa, double[.,.] dd,double[.,.] nrx,double[.,.] nry,int QUADio)
{ /* Start of function sweepdn 2006-10-11 17:54:46.000 */

/*
  j{<-}aa sweepdn dd;r;lim
 @ Updates nrx,nry
  lim{<-}{neg}1+({rho}dd)[1]
  nrx[;lim]{<-}nrx[;lim]{times}dd[;lim]
  nry[;lim]{<-}nry[;lim]{times}dd[;lim]
 @
  :For j :In {reverse}{iota}lim
      nrx[;j]{<-}(nrx[;j]-(aa[;j]{times}nrx[;j+1])){times}dd[;j]
      nry[;j]{<-}(nry[;j]-(aa[;j]{times}nry[;j+1])){times}dd[;j]
  :EndFor
 
*/
A_42=rhoXDI( dd) ;
 A_41= ABC(toi(true)-QUADio,shape(A_42)[0]);
A_44=A_42[[A_41]];
 /* dsf scalar(s) */
A_45=plusIII(-1,A_44) ;
 lim_0=( A_45) ;
 A_47= ABC(toi(lim_0)-QUADio,shape(dd)[1]);
A_50=indrfr(1,dd,A_47);
 A_51= ABC(toi(lim_0)-QUADio,shape(nrx)[1]);
A_54=indrfr(1,nrx,A_51);
 /* dsf Check needed */
A_55=mpyDDD(A_54,A_50) ;
 A_56= ABC(toi(lim_0)-QUADio,shape(nrx)[1]);
A_59=indsx0(nrx,A_56,A_55) ;
 nrx_0=( A_59) ;
 A_61= ABC(toi(lim_0)-QUADio,shape(dd)[1]);
A_64=indrfr(1,dd,A_61);
 A_65= ABC(toi(lim_0)-QUADio,shape(nry)[1]);
A_68=indrfr(1,nry,A_65);
 /* dsf Check needed */
A_69=mpyDDD(A_68,A_64) ;
 A_70= ABC(toi(lim_0)-QUADio,shape(nry)[1]);
A_73=indsx0(nry,A_70,A_69) ;
 nry_0=( A_73) ;
 A_76=iotaXII( lim_0,QUADio) ;
 A_77=rotrXII( A_76) ;
 A_CTR78_= 0;
A_CTR78z_ = (shape(A_77)[[0]])-1;
nrx_2=tod(nrx_0);
nry_2=tod(nry_0);
j_0=toi(0);
for(; A_CTR78_ <= A_CTR78z_; A_CTR78_++){
j_0 = A_77[[A_CTR78_]];
 A_82= ABC(toi(j_0)-QUADio,shape(dd)[1]);
A_85=indrfr(1,dd,A_82);
 /* dsf scalar(s) */
A_86=plusIBI(j_0,true) ;
 A_87= ABC(toi(A_86)-QUADio,shape(nrx_2)[1]);
A_90=indrfr(1,nrx_2,A_87);
 A_91= ABC(toi(j_0)-QUADio,shape(aa)[1]);
A_94=indrfr(1,aa,A_91);
 /* dsf Check needed */
A_95=mpyDDD(A_94,A_90) ;
 A_96= ABC(toi(j_0)-QUADio,shape(nrx_2)[1]);
A_99=indrfr(1,nrx_2,A_96);
 /* dsf Check needed */
A_100=barDDD(A_99,A_95) ;
 /* dsf Check needed */
A_101=mpyDDD(A_100,A_85) ;
 A_102= ABC(toi(j_0)-QUADio,shape(nrx_2)[1]);
A_105=indsx0(nrx_2,A_102,A_101) ;
 nrx_2=( A_105) ;
 A_107= ABC(toi(j_0)-QUADio,shape(dd)[1]);
A_110=indrfr(1,dd,A_107);
 /* dsf scalar(s) */
A_111=plusIBI(j_0,true) ;
 A_112= ABC(toi(A_111)-QUADio,shape(nry_2)[1]);
A_115=indrfr(1,nry_2,A_112);
 A_116= ABC(toi(j_0)-QUADio,shape(aa)[1]);
A_119=indrfr(1,aa,A_116);
 /* dsf Check needed */
A_120=mpyDDD(A_119,A_115) ;
 A_121= ABC(toi(j_0)-QUADio,shape(nry_2)[1]);
A_124=indrfr(1,nry_2,A_121);
 /* dsf Check needed */
A_125=barDDD(A_124,A_120) ;
 /* dsf Check needed */
A_126=mpyDDD(A_125,A_110) ;
 A_127= ABC(toi(j_0)-QUADio,shape(nry_2)[1]);
A_130=indsx0(nry_2,A_127,A_126) ;
 nry_2=( A_130) ;
 }
return(j_0,
nrx_2,
nry_2);
}

inline double[.,.],double[.,.],double[.,.]
 sweepupDDD(double[.,.] aa, double[.,.] dd,double[.,.] rx,double[.,.] ry,int QUADio)
{ /* Start of function sweepup 2006-10-11 17:54:47.000 */

/*
  d{<-}aa sweepup dd;j;r
 @ We thought this was a scan, but I can't make it work.
  d{<-}dd
  d[;0]{<-}{divide}d[;0]
  nrx{<-}rx
  nry{<-}ry
  :For j :In 1+{iota}({rho}dd)[1]-1
      r{<-}aa[;j]{times}d[;j-1]
      d[;j]{<-}{divide}d[;j]-r{times}aa[;j-1]
      nrx[;j]{<-}nrx[;j]-nrx[;j-1]{times}r
      nry[;j]{<-}nry[;j]-nry[;j-1]{times}r
  :EndFor
 
*/
d_0=( dd) ;
 A_49= ABC(toi(false)-QUADio,shape(d_0)[1]);
A_52=indrfr(1,d_0,A_49);
 A_53=divXDD( A_52) ;
 A_54= ABC(toi(false)-QUADio,shape(d_0)[1]);
A_57=indsx0(d_0,A_54,A_53) ;
 d_1=( A_57) ;
 nrx_0=( rx) ;
 nry_0=( ry) ;
 A_62=rhoXDI( dd) ;
 A_61= ABC(toi(true)-QUADio,shape(A_62)[0]);
A_64=A_62[[A_61]];
 /* dsf scalar(s) */
A_65=barIBI(A_64,true) ;
 A_67=iotaXII( A_65,QUADio) ;
 /* dsf scalar(s) */
A_68=plusBII(true,A_67) ;
 A_CTR69_= 0;
A_CTR69z_ = (shape(A_68)[[0]])-1;
d_3=tod(d_1);
nrx_2=tod(nrx_0);
nry_2=tod(nry_0);
for(; A_CTR69_ <= A_CTR69z_; A_CTR69_++){
j_0 = A_68[[A_CTR69_]];
 /* dsf scalar(s) */
A_73=barIBI(j_0,true) ;
 A_74= ABC(toi(A_73)-QUADio,shape(d_3)[1]);
A_77=indrfr(1,d_3,A_74);
 A_78= ABC(toi(j_0)-QUADio,shape(aa)[1]);
A_81=indrfr(1,aa,A_78);
 /* dsf Check needed */
A_82=mpyDDD(A_81,A_77) ;
 r_0=( A_82) ;
 /* dsf scalar(s) */
A_84=barIBI(j_0,true) ;
 A_85= ABC(toi(A_84)-QUADio,shape(aa)[1]);
A_88=indrfr(1,aa,A_85);
 /* dsf Check needed */
A_89=mpyDDD(r_0,A_88) ;
 A_90= ABC(toi(j_0)-QUADio,shape(d_3)[1]);
A_93=indrfr(1,d_3,A_90);
 /* dsf Check needed */
A_94=barDDD(A_93,A_89) ;
 A_95=divXDD( A_94) ;
 A_96= ABC(toi(j_0)-QUADio,shape(d_3)[1]);
A_99=indsx0(d_3,A_96,A_95) ;
 d_3=( A_99) ;
 /* dsf scalar(s) */
A_101=barIBI(j_0,true) ;
 A_102= ABC(toi(A_101)-QUADio,shape(nrx_2)[1]);
A_105=indrfr(1,nrx_2,A_102);
 /* dsf Check needed */
A_106=mpyDDD(A_105,r_0) ;
 A_107= ABC(toi(j_0)-QUADio,shape(nrx_2)[1]);
A_110=indrfr(1,nrx_2,A_107);
 /* dsf Check needed */
A_111=barDDD(A_110,A_106) ;
 A_112= ABC(toi(j_0)-QUADio,shape(nrx_2)[1]);
A_115=indsx0(nrx_2,A_112,A_111) ;
 nrx_2=( A_115) ;
 /* dsf scalar(s) */
A_117=barIBI(j_0,true) ;
 A_118= ABC(toi(A_117)-QUADio,shape(nry_2)[1]);
A_121=indrfr(1,nry_2,A_118);
 /* dsf Check needed */
A_122=mpyDDD(A_121,r_0) ;
 A_123= ABC(toi(j_0)-QUADio,shape(nry_2)[1]);
A_126=indrfr(1,nry_2,A_123);
 /* dsf Check needed */
A_127=barDDD(A_126,A_122) ;
 A_128= ABC(toi(j_0)-QUADio,shape(nry_2)[1]);
A_131=indsx0(nry_2,A_128,A_127) ;
 nry_2=( A_131) ;
 }
return(d_3,
nrx_2,
nry_2);
}

inline double[.,.] correctCLONE0DDD(double[.,.] rx, double[.,.] x ,int QUADio)
{ /* Start of function correctCLONE0 2006-10-11 17:54:49.000 */

/*
  r{<-}rx correct x;n
 @ Return x at edges, otherwise rx+x
  r{<-}x
  n{<-}1+{iota}{neg}2+({rho}x)[1]
  r[n;n]{<-}rx+r[n;n]
 
*/
r_0=( x) ;
 A_28=rhoXDI( x) ;
 A_27= ABC(toi(true)-QUADio,shape(A_28)[0]);
A_30=A_28[[A_27]];
 /* dsf scalar(s) */
A_31=plusIII(-2,A_30) ;
 A_33=iotaXII( A_31,QUADio) ;
 /* dsf scalar(s) */
A_34=plusBII(true,A_33) ;
 n_0=( A_34) ;
 A_37= ABC(toi(n_0)-QUADio,shape(r_0)[0]);
A_36= ABC(toi(n_0)-QUADio,shape(r_0)[1]);
A_39=indr(indrfr(1,r_0,A_36),A_37);
 /* dsf Check needed */
A_40=plusDDD(rx,A_39) ;
 A_42= ABC(toi(n_0)-QUADio,shape(r_0)[0]);
A_41= ABC(toi(n_0)-QUADio,shape(r_0)[1]);
A_44=inds11(r_0,A_42,A_41,A_40) ;
 r_1=( A_44) ;
return(r_1);
}

inline double,int,int
 fmaCLONE0XDD(double[.,.] y,int QUADio,double QUADct)
{ /* Start of function fmaCLONE0 2006-10-11 17:54:51.000 */

/*
  z{<-}fma y;t;ay;v
 @ value and xy-index of maximum
 @ absolute value in y
 @ Sets xy-index in i,j as side effects. Ugh.
  ay{<-}|y
  v{<-}{max}/ay
  t{<-}{max}/v
  i{<-}v{iota}t
  j{<-}ay[i;]{iota}t
  z{<-}y[i;j]
 
*/
A_37=modXDD( y) ;
 ay_0=( A_37) ;
 A_39=maxslXDD( ay_0) ;
 v_0=( A_39) ;
 A_44=maxslXDD( v_0) ;
 t_0=( A_44) ;
 A_51=iotaDDI(v_0,t_0,QUADct,QUADio) ;
 i_0=( A_51) ;
 A_54= ABC(toi(i_0)-QUADio,shape(ay_0)[0]);
A_56=ay_0[[A_54]];
 A_59=iotaDDI(A_56,t_0,QUADct,QUADio) ;
 j_0=( A_59) ;
 A_62= ABC(toi(i_0)-QUADio,shape(y)[0]);
A_61= ABC(toi(j_0)-QUADio,shape(y)[1]);
A_64=y[[A_62,A_61]];
 z_0=( A_64) ;
return(z_0,
i_0,
j_0);
}

inline double[.] tomcatvXID(int n,double QUADct,int QUADio)
{ /* Start of function tomcatv 2006-10-11 17:54:53.000 */

/*
  r{<-}tomcatv n;x;y;nrx;nry;aa;d;dd;rx;ry;ll;irxm;jrxm;rxm;irym;jrym;rym;i;j;rx1;ry1;sr;junk;loops
 @ Tomcatv ala John Feo's SISAL 1.2 algorithm
  x{<-}datax n
  y{<-}x datay n
  irxm{<-}jrxm{<-}irym{<-}jrym{<-}0
  rxm{<-}rym{<-}0
 @@@ll{<-}{neg}1
 @@@:while 100>ll{<-}ll+1
  loops{<-}100
  :For ll :In {iota}loops
      junk{<-}x compmesh y @ n is global in; aa,dd,rx,ry out
  @ Find maximum residual {&} its location
      rxm{<-}fma rx
      irxm{<-}i
      jrxm{<-}j
      rym{<-}fma ry
      irym{<-}i
      jrym{<-}j
  @ Solve tridiagonal system
      d{<-}aa sweepup dd
  @ sweepup uses x,y, sets nrx,nry
      junk{<-}aa sweepdn d @ sweepdn uses {&}sets nrx,nry
  @ Add corrections
      x{<-}nrx correct x
      y{<-}nry correct y
  :EndFor
 @@:until .5E{neg}7>(|rxm){max}|rym  @ No :until support yet
 lz:r{<-}(loops+1),(2+irxm,jrxm),rxm,(2+irym,jrym),rym
 
*/
A_136=dataxXID( n,QUADio) ;
 x_0=( A_136) ;
 A_139=datayDID(x_0,n,QUADio) ;
 y_0=( A_139) ;
 jrym_0=( false) ;
 irym_0=( false) ;
 jrxm_0=( false) ;
 irxm_0=( false) ;
 rym_0=( false) ;
 rxm_0=( false) ;
 loops_0=( 100) ;
 A_149=iotaXII( loops_0,QUADio) ;
 A_CTR150_= 0;
A_CTR150z_ = (shape(A_149)[[0]])-1;
rxm_2=tod(rxm_0);
irxm_2=toi(irxm_0);
jrxm_2=toi(jrxm_0);
i_2=toi(0);
j_2=toi(0);
rym_2=tod(rym_0);
irym_2=toi(irym_0);
jrym_2=toi(jrym_0);
nrx_2=tod(0.0d);
nry_2=tod(0.0d);
x_2=tod(x_0);
y_2=tod(y_0);
for(; A_CTR150_ <= A_CTR150z_; A_CTR150_++){
ll_0 = A_149[[A_CTR150_]];
 A_164,aa_0,dd_0,rx_0,ry_0=compmeshDDD(x_2,y_2) ;
 junk_1=( A_164) ;
 A_172,i_1,j_1=fmaXDD( rx_0,QUADio,QUADct) ;
 rxm_2=( A_172) ;
 irxm_2=( i_1) ;
 jrxm_2=( j_1) ;
 A_180,i_2,j_2=fmaCLONE0XDD( ry_0,QUADio,QUADct) ;
 rym_2=( A_180) ;
 irym_2=( i_2) ;
 jrym_2=( j_2) ;
 A_189,nrx_1,nry_1=sweepupDDD(aa_0,dd_0,rx_0,ry_0,QUADio) ;
 d_0=( A_189) ;
 A_196,nrx_2,nry_2=sweepdnDDI(aa_0,d_0,nrx_1,nry_1,QUADio) ;
 junk_2=( A_196) ;
 A_201=correctDDD(nrx_2,x_2,QUADio) ;
 x_2=( A_201) ;
 A_204=correctCLONE0DDD(nry_2,y_2,QUADio) ;
 y_2=( A_204) ;
 }
 A_207=comaIII(irym_2,jrym_2) ;
 /* dsf scalar(s) */
A_208=plusIII(2,A_207);
 A_209=comaIDD(A_208,rym_2) ;
 A_210=comaDDD(rxm_2,A_209) ;
 A_211=comaIII(irxm_2,jrxm_2) ;
 /* dsf scalar(s) */
A_212=plusIII(2,A_211);
 A_213=comaIDD(A_212,A_210) ;
 /* dsf scalar(s) */
A_214=plusIBI(loops_0,true);
 A_215=comaIDD(A_214,A_213) ;
 r_0=( A_215) ;
return(r_0);
}

int main()
{ /* Start of function main 2006-10-11 17:54:55.000 */

/*
  r{<-}main;#IO;#RL;n;#PP;#PW
  #IO{<-}0
  n{<-}257
  #RL{<-}16807
  #PP{<-}16
  #PW{<-}80
  r{<-}tomcatv n
  #{<-}r
  #{<-}r{<-}1+r{match}101 202 2 9.8296417600027E{neg}7 30 256 1.171124699033E{neg}6
 
*/
QUADio_0=toi(( false)) ;
 QUADct_0=( 1.0e-13) ;
 QUADpp_0=( 10) ;
 QUADpw_0=( 80) ;
 QUADrl_0=( 16807) ;
 QUADio_1=toi(( false)) ;
 n_0=( 257) ;
 QUADrl_1=( 16807) ;
 QUADpp_1=( 16) ;
 QUADpw_1=( 80) ;
 A_60=tomcatvXID( n_0,QUADct_0,QUADio_1) ;
 r_0=( A_60) ;
 A_64=quadXDD( r_0,QUADpp_1,QUADpw_1) ;
 A_66=sameDDB(r_0,[101.0, 202.0, 2.0, 9.8296417600027e-7, 30.0, 256.0, 1.171124699033e-6],QUADct_0) ;
 /* dsf scalar(s) */
A_67=plusBBI(true,A_66);
 r_1=( A_67) ;
 A_71=quadXII( A_67,QUADpp_1,QUADpw_1) ;
return(r_1);
}


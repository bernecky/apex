module kroneckerproduct;
export {kroneckerproduct_testXXI};

// Compiled by APEX Version: FIXME!! 2021-06-23 12:22:19.750
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[*] tranIII(int[.] x, int[*] y, int QUADio)
{ /* General case of dyadic transpose  */
/* Someone has to validate x here! FIXME */
 nx = toi(x) - QUADio;
 shpy = shape(y);
 wts = drop([1],shpy)++[1];
 rankz = (take([-1], nx))[0];

 /* times scan the hard way */
 for(i=shape(shpy)[0] - 2; i>=0; i--) {
  wts[i] = wts[i+1]*wts[i];
  rankz = max(rankz,nx[i]);
 }
 rankz = rankz + 1;

 shpz = genarray([rankz], 1 + prod(shape(y)));  /* all overwritten */
 cwts = shpz * 0;

 for(i=dim(y)-1; i>=0; i--){
   j = nx[i];
   shpz[j] = min( shpy[i], shpz[j]);
   cwts[j] = cwts[j]+wts[i];
 }

 cp = CartProdPlus(cwts, shpz);
 ry = comaXII(y);
 z = with {
   (. <= iv <= .)
     : ry[[cp[iv]]];
   } : genarray(shape(cp), 0);
 z = reshape(shpz,z);
 return(z);
}

inline int[.] CartProdPlus(int[.] weights, int[.] lengths)
{ /* Cartesian product, sum-like, for weights+each iota each lengths */
  /* Weight and length vectors must be same length, and non-empty */
 s = shape(weights)[[0]];
 z = (0 == s) ?  s :  weights[[0]] * iotaXII(lengths[[0]],0);
  for(i=1; i<s; i++){
   t = weights[[i]] * iotaXII(lengths[[i]],0);
   z = with {
        (. <= iv <= .)
                : z[iv] + t;
        } : genarray(shape(z), t);
   z = comaXII(z);
  }
 return(z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline int[*] jotdotmpyIII(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0);
 z = with {
        (. <= iv <= .) {
         xitem = toI(x[iv]);
        } : mpyIII(xitem, toI(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline int mpyslXIIQUICKSTOP(int[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : ItoI(y[iv]);
        } : foldfix( mpyIII, ItoI(1), ItoI(0));
  return(z);
}


inline int plusslXIIFOLD(int[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : ItoI(y[lim-iv]);
       } :  fold( plusIII, ItoI(0));
  return(z);
}


inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline int[+] mpyIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline int[.,.] iotaXII(int[.] n ,int QUADio)
{ 
/*
 ?
*/
A_15=mpyslXIIQUICKSTOP( n);
 A_20=iotaXII( A_15,QUADio);
A_21=rhoIII(n,A_20);
 r_0=( A_21);
 return(r_0);
}

inline int[.,.] kpIII(int[.,.] A, int[.,.] B,int QUADio)
{ 
/*
 ?
*/
A_19=jotdotmpyIII(A,B);
 A_27=tranIII([0, 2, 1, 3],A_19,QUADio);
r_0=( A_27);
 A_29=rhoXII( B);
 A_30=mpyslXIIQUICKSTOP( A_29);
 A_34=rhoXII( A);
 A_35=mpyslXIIQUICKSTOP( A_34);
 A_39=comaIII(A_35,A_30);
 A_40=rhoIII(A_39,r_0);
 r_1=( A_40);
 return(r_1);
}

inline int kroneckerproduct_testXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 400);
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_57=iotaXII( [3, 4],QUADio_1);
 A_59=iotaXII( [2, 3],QUADio_1);
 // dsf scalar(s)
A_60=plusIII(10,A_59);
 A_62=kpIII(A_60,A_57,QUADio_1);
 r_0=( A_62);
 A_64=comaXII( r_0);
 A_65=plusslXIIFOLD( A_64);
 // dsf scalar(s)
A_70=eqIIB(4950,A_65);
 // dsf scalar(s)
A_71=barBBI(true,A_70);
r_1=( A_71);
 return(r_1);
}


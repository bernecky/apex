use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3014.dws2013-11-23 16:03:09.796 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int[+] minXDI(double[+] y,double QUADct)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : minXDI(toD(y[iv]), QUADct);
        } : genarray(shape(y), 0);
  return(z);
}

inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline double mpyDID(double x, int y)
{ return(DtoD(x)*ItoD(y));
}

inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline int plusIBI(int x, bool y)
{ return(ItoI(x)+BtoI(y));
}

inline bool[+] leIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : leIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[+] barIBI(int[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : barIBI(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline double[+] mpyIDD(int[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : mpyIDD(xel,yel);
        } : genarray(sy, 0.0d);
  return(z);
}






inline int[+] barIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] modIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : modIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] mpyDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : mpyDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] plusIDD(int[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusIDD(xel,yel);
        } : genarray(sy, 0.0d);
  return(z);
}






inline double[+] plusDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline int[+] plusIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline double[+] plusIDD(int[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int[.,.] tranXII(int[.,.] y)
{ /* Transpose on rank-2 */
        z = { [i,j] -> y[j,i] };
        return(z);
}

inline double[*] rhoIDD(int[.] x, double[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0.0d);
   return( z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[*] rhoCII(char[.] x, int[*] y)
{  /* Character-vector reshape anything. */
   /* Left argument must be empty vector! */
  if( 0 != shape(x)[[0]]) {
    show(tochar("reshape domain error in rhoCII"));
  }
  z = y[ 0 * shape(y)];
  return(z);
}

inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[+] utakIII(int[.] x, int[+] y)
{ /* Vector represent non-scalar */
 yt = TRANSPOSE(y);
 cell = genarray(shape(x),0);
 z = with {
        (. <= iv <= .)
                : utakIII(x,yt[iv]);
        } : genarray(shape(yt), cell);
 return(TRANSPOSE(z));
}





inline int CommandLineArgvXII(int y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline int[+] slBII(bool[.] x, int[+] y)
{ /* last-axis vector compress/replicate matrix */
  /* This needs conformability check FIXME */
  /* Also, x may be one-element vector */
 frameshape = drop([-1],shape(y));
 cellshape = sum(BtoI( x));
 defcell = genarray([cellshape],0);

 z = with {
   (. <= iv <= .) : slBII( x, y[iv]);
   } : genarray( frameshape, defcell);

return(z);
}





inline int[+] sl1III(int x, int[+] y)
{ /* Scalar replicate non-scalar, first axis */
 xi = [toi(x)];
 cellshape = xi++drop([1],shape(y));
 defcell = genarray(cellshape,0);
 frameshape = take([1],shape(y));
 z = with {
        (. <= iv <= .)
                : genarray(xi,y[iv]);
        } : genarray(frameshape, defcell);

 zshape = [prod(take([2],shape(z)))]++drop([2],shape(z));
 z = reshape(zshape,z);
 return(z);
}

inline int[+] plusslXIIFOLD(int[+] y)
{ /* last axis reduce rank-2 or greater matrix w/folding */
  sy = shape(y);
  zrho = drop([-1], sy);
  z = with {
         (. <= iv <= .)
                : plusslXIIFOLD(y[iv]);
        } : genarray(zrho, 0);
  return(z);
}


inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : DtoD(y[lim-iv]);
       } :  fold( plusDDD, ItoD(0));
  return(z);
}


inline int minXDI(double y,double QUADct)
{ return(DFLOOR(y,QUADct));
}



inline bool leIIB(int x, int y)
{ /* A<=B on Boolean,int, char */
 return(ItoI(x) <= ItoI(y));
}

inline int barIBI(int x, bool y)
{ return(ItoI(x)-BtoI(y));
}

inline double mpyIDD(int x, double y)
{ return(ItoD(x)*DtoD(y));
}

inline int modIII(int x, int y)
{ /* SxS residue (aka modulo) */
  /* (x residue y) <-->   y-x times floor y divide x + 0 = x  */
  /* See model residueI in workspace UTDScalarI.dws */
  x = ItoI(x);
  y = ItoI(y);
  if( 0 != x) {
    q = y / x;
    z = y - ( x * q);
  } else {
    z = y;
  }

  if( z != 0) {
    if( mpyXII( x) != mpyXII( y)) {
      z = z + x;
    }
  }
 return(z);
}


inline double mpyDDD(double x, double y)
{ return(DtoD(x)*DtoD(y));
}

inline double plusIDD(int x, double y)
{ return(ItoD(x)+DtoD(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline int[+] barIBI(int x, bool[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : barIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] barIBI(int[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barIBI(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline double[+] mpyIDD(int x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : mpyDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] mpyIDD(int[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : mpyIDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] plusIDD(int x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[.] utakIII(int[.] x, int y)
{ /* Non-floating Vector represent scalar */
  /* Taken from ISO Extended APL standard Draft N93.03, page 155 */
  wts = genarray(shape(x),toI(1));
  for(i=shape(x)[[0]]-2; i>=0; i--)
        wts[[i]] = wts[[i+1]] * toI(x[[i+1]]);
  z = genarray(shape(x),0);
  cy = toI(y);
  for(i=shape(x)[[0]]-1; i>=0; i--){
        z[[i]] = modIII(toI(x[[i]]),cy/wts[[i]]);
        /* Must use fuzz-less call to mod!! */
        /* Represent is NOT fuzzy (SAPL Ref Man p.6-47, 1991 */
        cy = cy - z[[i]] * wts[[i]];
  }
 return(z);
}



inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline int[+] TRANSPOSE(int[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), 0);
  return(z);
}

inline int[.] slBII(bool[.] x, int[.] y)
{/* Boolean vector compress vector */
  zxrho = sum(toi(x));
  z = genarray([zxrho], 0);
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    if ( x[i]) {
      z[[zi]] = y[[i]];
      zi++;
    }
  return(z);
}

inline int plusslXIIFOLD(int[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : ItoI(y[lim-iv]);
       } :  fold( plusIII, ItoI(0));
  return(z);
}


inline int mpyXII(int y)
{ /* signum int/double */
   if( toI(0) == y) {
    z = 0;
  } else {
    if( toI(0) < y) {
      z = 1;
    } else {
      z = -1;
    }
  }
  return(z);
}

inline int DFLOOR(double y, double QUADct)
{ /* Fuzzy floor */
  /* Definition taken from SHARP APL Refman May 1991, p.6-23
   * floor:  n <- (signum y) times nofuzzfloor 0.5+abs y)
   *         z <- n-(QUADct times 1 max abs y)<(n-y)
   * If you want a double result,  write: "y - 1| y".
   */
   n = tod(floor(0.5+fabs(y)));
   if (y < 0.0)
        n = -n;
   else if (0.0 == y)
        n = 0.0;
   range = fabs(y);
   if (1.0 > range)
        range = 1.0;
   fuzzlim = QUADct*range;
   ny = n-y;
   if (fuzzlim < ny)
        z = n - 1.0;
   else
        z = n;
   return(toi(z));
}

inline int[.,.] floorXDI(double[.,.] y ,double QUADct)
{ 
/*
 ?
*/
A_19=minXDI( y,QUADct);
r_0=( A_19);
 return(r_0);
}

inline int[.] tjkcXII(int[.,.] ymd,double QUADct)
{ 
/*
 ?
*/
A_42=slBII([true,false,false],ymd);
 A_43=plusslXIIFOLD( A_42);
 yr_0=( A_43);
 A_48=slBII([false,true,false],ymd);
 A_49=plusslXIIFOLD( A_48);
 mo_0=( A_49);
 A_54=slBII([false,false,true],ymd);
 A_55=plusslXIIFOLD( A_54);
 day_0=( A_55);
 /* dsf scalar(s) */
A_61=leIIB(mo_0,2);
 /* dsf Check needed */
A_62=barIBI(yr_0,A_61);
 A_63=utakIII([0, 40, 100],A_62);
 A_64=tranXII( A_63);
 yr_1=( A_64);
 A_66=rhoXII( yr_1);
 A_67=rhoIDD(A_66,[1460969.0, 36524.25, 365.25]);
/* dsf Check needed */
A_68=mpyIDD(yr_1,A_67);
 A_70=floorXDI( A_68,QUADct);
 A_71=plusslXIIFOLD( A_70);
 dno_0=( A_71);
 /* dsf scalar(s) */
A_76=barIII(mo_0,3);
 /* dsf scalar(s) */
A_78=modIII(12,A_76);
 /* dsf scalar(s) */
A_79=mpyDID(30.6,A_78);
 /* dsf Check needed */
A_80=plusIDD(day_0,A_79);
/* dsf scalar(s) */
A_81=plusDDD(0.41,A_80);
 A_83=floorCLONE4XDI( A_81,QUADct);
 /* dsf Check needed */
A_84=plusIII(dno_0,A_83);
dno_1=( A_84);
 return(dno_1);
}

inline double BjkcIID(int n , int[.] ts,double QUADct,int QUADio)
{ 
/*
 ?
*/
/* dsf Scalar & clique */
A_35=barIII(2,2);
 r_0=( A_35);
 A_38=iotaXII( n,QUADio);
 A_CTR39_= 0;
A_CTR39z_ = (shape(A_38)[[0]])-1;
r_2=toD(r_0);
for(; A_CTR39_ <= A_CTR39z_; A_CTR39_++){
i_0 = A_38[[A_CTR39_]];
 A_41=rhoIII([1, 3],ts);
 A_42=sl1III(i_0,A_41);
 A_44=tjkcXII( A_42,QUADct);
 r0_0=( A_44);
 /* dsf scalar(s) */
A_46=plusIDD(r0_0,0.5);
 A_47=plusslXDDFOLD( A_46);
 r1_0=( A_47);
 A_52=rhoXII( r0_0);
 A_53=rhoCII([:char],A_52);
 /* dsf scalar(s) */
A_54=mpyDID(0.5,A_53);
 /* dsf scalar(s) */
A_55=barDDD(r1_0,A_54);
 /* dsf Scalar & clique */
A_56=plusDDD(r_2,A_55);
 r_2=( A_56);
 }
 return(r_2);
}

int main()
{ 
/*
 ?
*/
n=CommandLineArgvXII( r);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADct_1=( 1.0e-13);
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_59=BjkcIID(n,[2006, 4, 1, 12, 34, 56],QUADct_1,QUADio_1);
r_0=( A_59);
 A_63=quadXDD( r_0,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_64=barDDD(3296086938000.5,0.5);
 /* dsf scalar(s) */
A_66=eqDDB(r_0,A_64,QUADct_1);
 /* dsf scalar(s) */
A_67=plusIBI(-1,A_66);
 r_1=( A_67);
 A_71=quadXII( A_67,QUADpp_1,QUADpw_1);
 return(r_1);
}

inline int[.] floorCLONE4XDI(double[.] y ,double QUADct)
{ 
/*
 ?
*/
A_19=minXDI( y,QUADct);
r_0=( A_19);
 return(r_0);
}


module loopfvAKD;
export {loopfvAKD_testXII};

// Compiled by APEX Version: FIXME!! 2021-07-20 11:03:06.478
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline int maxIBI(int x, bool y)
{ /* x max y */
 return (max(ItoI(x),BtoI(y)));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline double barIDD(int x, double y)
{ return(ItoD(x)-DtoD(y));
}

inline double mpyIDD(int x, double y)
{ return(ItoD(x)*DtoD(y));
}

inline double divDID(double x, int y)
{ dx = DtoD(x);
  dy = ItoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double[+] plusDID(double[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusDID(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[.] comaXDD(double y)
{ /* Ravel of scalar */
  return([y]);
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline double[*] indr(double[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int CommandLineArgvXBI(bool y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline double plusDID(double x, int y)
{ return(DtoD(x)+ItoD(y));
}

inline double[*] indrfr(int fr, double[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline double[*] indrfr0(double[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline double[*] indrfr(int fr, double[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0.0d);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline double[.] loopfvXID(int n ,int QUADio)
{ 
/*
 ?
*/
// dsf scalar(s)
A_23=barDDD(0.5,0.5);
 A_24=comaXDD( A_23);
 r_0=( A_24);
 A_27=iotaXII( n,QUADio);
 A_CTR28_= 0;
A_CTR28z_ = (shape(A_27)[[0]])-1;
r_2=toD(r_0);
for(; A_CTR28_ <= A_CTR28z_; A_CTR28_++){
i_0 = A_27[[A_CTR28_]];
 // dsf scalar(s)
A_30=plusDID(r_2,i_0);
 r_2=( A_30);
 }
 return(r_2);
}

inline int loopfvAKD_testXII()
{ 
/*
 ?
*/
n=CommandLineArgvXBI( true);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADpp_1=( 17);
 QUADpw_1=( 80);
 QUADct_1=( 1.0e-13);
 QUADrl_1=( 16807);
 // dsf scalar(s)
A_54=maxIBI(n,true);
 n_0=( A_54);
 A_58=loopfvXID( n_0,QUADio_1);
 A_56= ABC(toi(false)-QUADio_1,shape(A_58)[0]);
A_60=A_58[[A_56]];
r_0=( A_60);
 A_64=quadXDD( A_60,QUADpp_1,QUADpw_1);
 // dsf Scalar & clique
A_65=plusDDD(0.5,0.5);
 // dsf scalar(s)
A_66=barIDD(n_0,A_65);
 // dsf scalar(s)
A_67=mpyIDD(n_0,A_66);
 // dsf scalar(s)
A_68=divDID(A_67,2);
 // dsf scalar(s)
A_70=eqDDB(r_0,A_68,QUADct_1);
 // dsf scalar(s)
A_71=barBBI(true,A_70);
 r_1=( A_71);
 A_75=quadXII( r_1,QUADpp_1,QUADpw_1);
 return(r_1);
}


use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex2003/wss/sac3009.dws2012-01-09 16:58:26.467 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

inline int plusBBI(bool x, bool y)
{ return(toI(x)+toI(y));
}

inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] plusIDD(int[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int[.] iotaXBI(bool y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline bool sameDDB(double x, double y,double QUADct)
{ /* Scalar match scalar */
  z = eqDDB(toD(x), toD(y), QUADct);
 return(z);
}



inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : toD(y[lim-iv]);
       } :  fold( plusDDD, toD(0));
  return(z);
}


inline int plusIII(int x, int y)
{ return(toI(x)+toI(y));
}

inline double plusIDD(int x, double y)
{ return(toD(x)+toD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((toD(x) == toD(y)) || APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline double plusDDD(double x, double y)
{ return(toD(x)+toD(y));
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline double buildvXID(int y ,int QUADio)
{ 
/*
 ?
*/
A_33=iotaXBI( false,QUADio);
 r_0=( A_33);
 A_36=iotaXII( y,QUADio);
 A_CTR37_= 0;
A_CTR37z_ = (shape(A_36)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR37_ <= A_CTR37z_; A_CTR37_++){
i_0 = A_36[[A_CTR37_]];
 A_40=iotaXII( i_0,QUADio);
 /* dsf scalar(s) */
A_41=plusIII(1000000,A_40);
 A_42=comaIII(r_2,A_41);
 r_2=( A_42);
 }
 /* dsf scalar(s) */
A_45=plusIDD(r_2,0.5);
 A_46=plusslXDDFOLD( A_45);
 r_3=( A_46);
 return(r_3);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 2000);
 QUADrl_1=( 16807);
 QUADpp_1=( 10);
 QUADpw_1=( 80);
 QUADct_1=( 1.0e-10);
 A_62=buildvXID( n_0,QUADio_1);
 r_0=( A_62);
 A_66=quadXDD( A_62,QUADpp_1,QUADpw_1);
 A_68=sameDDB(r_0,2000332333500.0,QUADct_1);
 /* dsf scalar(s) */
A_69=plusBBI(true,A_68);
r_1=( A_69);
 A_73=quadXII( A_69,QUADpp_1,QUADpw_1);
 return(r_1);
}


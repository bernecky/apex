module iotanAKD;
export {iotanAKD_testXII};

// Compiled by APEX Version: FIXME!! 2021-08-05 15:06:06.299
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline double plusIDD(int x, double y)
{ return(ItoD(x)+DtoD(y));
}

inline double mpyIDD(int x, double y)
{ return(ItoD(x)*DtoD(y));
}

inline double divDID(double x, int y)
{ dx = DtoD(x);
  dy = ItoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double[+] plusDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool sameDDB(double x, double y,double QUADct)
{ /* Scalar match scalar */
  z = eqDDB(toD(x), toD(y), QUADct);
 return(z);
}



inline int CommandLineArgvXBI(bool y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : DtoD(y[lim-iv]);
       } :  fold( plusDDD, ItoD(0));
  return(z);
}


inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline double iotanXID(int n ,int QUADio)
{ 
/*
 ?
*/
A_18=iotaXII( n,QUADio);
 // dsf scalar(s)
A_19=barDDD(1.5,0.5);
 // dsf scalar(s)
A_20=plusDID(A_19,A_18);
A_21=plusslXDDFOLD( A_20);
 r_0=( A_21);
 return(r_0);
}

inline int iotanAKD_testXII()
{ 
/*
 ?
*/
n=CommandLineArgvXBI( true);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_53=iotanXID( n,QUADio_1);
 r_0=( A_53);
 A_57=quadXDD( r_0,QUADpp_1,QUADpw_1);
 // dsf scalar(s)
A_58=barDDD(1.5,0.5);
 // dsf scalar(s)
A_59=plusIDD(n,A_58);
 // dsf scalar(s)
A_60=mpyIDD(n,A_59);
 // dsf scalar(s)
A_61=divDID(A_60,2);
 A_63=sameDDB(r_0,A_61,QUADct_0);
 // dsf scalar(s)
A_64=barBBI(A_63,true);
r_1=( A_64);
 A_68=quadXII( A_64,QUADpp_1,QUADpw_1);
 return(r_1);
}


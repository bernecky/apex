module upgradeIntVecAKD;
export {upgradeIntVecAKD_testXII};

// Compiled by APEX Version: FIXME!! 2021-06-27 14:01:58.784
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline int[.] rotrIII(int x, int[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.] ugrdXII(int[.] y, int QUADio)
{ /* Integer vector upgrade
   * See radix upgrade model in ws RadixGrade.dws
   */
  rad = 256;
  radixbase = 8; /* 2 log rad */
  bitsperint = 32;
  numpasses = bitsperint/8;
  hist = RadixGradeHistograms( y);
  z = genarray( shape(y), -1);
  if( 0 != shape(y)[0]) {
    pv = iota(shape(y)[0]);
    /* LSB-> MSB sort order */
    for( pas=numpasses-1; pas>=0; pas--) {
      /* Skip pass if all nums in same bucket */
      if( shape(y)[0] != hist[pas, RadixGradeGetIdx( pas, y[pv[0]])]) {
        pvo = RadixGradeOffsets( rad, pas, hist);
        for( i=0; i<shape(y)[0]; i++) {
          val = RadixGradeGetIdx( pas, y[pv[i]]);
          z[pvo[val]] = pv[i];
          pvo[val] =  pvo[val] + ((val<0) ? -1 : 1);
        }
        pv = z;
      }
    }
  }
  z = QUADio + z;
  return( z);
}




inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline int[+] inds0(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline int CommandLineArgvXBI(bool y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline int VectorRotateAmount(int x, int y)
{ /* Normalize x rotate for array of shape y on selected axis */
 /* normalize rotation count */

if ((0==x) || (0==y))
  z = 0;
else if (x>0)
        z = _aplmod_SxS_(x,y);
     else
        z = y - _aplmod_SxS_(abs(x),y);
 return(z);
}

inline int[.,.] RadixGradeHistograms( int[.] y)
{ /* Create histograms for integer radix up/downgrade */
  rad = 256;
  radixbase = 8;
  bitsperint = 32;
  numpasses = bitsperint/radixbase;
  hist = genarray( [rad * numpasses], 0);
  hindex = rad * iota( numpasses);
  for( i=0; i<shape(y)[0]; i++) {
    for( p=0; p<numpasses; p++) {
     v = RadixGradeGetIdx( p, y[i]);
     ndx = hindex[p] + v;
     hist[ndx] = hist[ndx] + 1;
    }
  }
  z = reshape( [ numpasses, rad], hist);
 return(z);
}

inline int[.] RadixGradeOffsets( int rad, int pas, int[.,.] hist)
{ /* Make per-pass initial offsets into pass result vector */
  rd2 = rad / 2;
  nnv = sum( drop( [rd2], hist[pas])); /* # of negative results */
  z = genarray( [rad], 0);
  if( 0 == pas) {
    /* Fancy footwork here handles negative numbers */
    z[0] = nnv;
    for( i=0; i<(rd2-1); i++) {
      z[i+1] = z[i] + hist[pas,i];
    }
    for( i=rd2; i<rad-1; i++) {
      z[i+1] = z[i] + hist[pas,i];
    }
  } else {
    for( i=0; i<(rad-1); i++) {
      z[i+1] = z[i] + hist[pas,i];
    }
  }
  return(z);
}

inline int RadixGradeGetIdx( int pas, int v)
{ /* Get masked value for pass pas and value v */
  bitsperint = 32;
  radixbase = 8;
  numpasses = bitsperint/radixbase;
  rad = 256;
  z = BitAND(( rad - 1),
             BitShiftRight((( numpasses - 1) - pas) * radixbase, v));
  return(z);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int upgradeIntVecAKD_testXII()
{ 
/*
 ?
*/
n=CommandLineArgvXBI( true);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 A_50=iotaXII( n,QUADio_1);
 A_51=rotrXII( A_50);
 v_0=( A_51);
 A_53= ABC(toi(false)-QUADio_1,shape(v_0)[0]);
A_55=inds0(v_0,A_53,-3);
v_1=( A_55);
 A_58=ugrdXII( v_1,QUADio_1);
 z_0=( A_58);
 A_60=rhoXII( v_1);
 A_62=iotaXII( A_60,QUADio_1);
 A_63=rotrXII( A_62);
 A_64=rotrIII(-1,A_63);
 A_66=sameIIB(z_0,A_64);
 // dsf scalar(s)
A_67=barBBI(true,A_66);
 r_0=( A_67);
 A_71=quadXII( A_67,QUADpp_0,QUADpw_0);
 return(r_0);
}


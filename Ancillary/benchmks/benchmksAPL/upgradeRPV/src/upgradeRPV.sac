module upgradeRPV;
export {upgradeRPV_testXXI};

// Compiled by APEX Version: FIXME!! 2021-07-20 11:03:12.939
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline bool eqBIB(bool x, int y)
{ /* A=B on non-doubles */
 return(BtoI(x) == ItoI(y));
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[.], int querIII(int x, int y, int QUADio, int QUADrl)
{ /* Dyadic query (deal) - scalar */
  /* This allocates an array of shape y. If this
   * causes you memory grief, use the algorithm in workspace 42 query,
   * or use smaller y!
   */
 intx = toi(x);
 inty = toi(y);
 shpz = toi(x);
 z = iota (inty);

 for( i=0; i<intx; i++) {
        /* Interchange z[i] with z[i + ? y - i] */
        rand, QUADrl = querXII(inty -i, 0, QUADrl);
        c = i + rand;
        if ( c < shpz) {
                tmp    = z[[c]];
                z[[c]] = z[[i]];
                z[[i]] = tmp;
        }
 }
 z = take([intx], z);
 return(z + QUADio, QUADrl);
}


inline int[.] ugrdXIIPV(int[.] y, int QUADio)
{ /* Upgrade of permutation vector. */
  /* This exploits array predicate astPredPV */
  z = genarray(shape(y), -1);
  for( i=0; i<shape(y)[0]; i++) {
        z[[y[[i]]]] = i+QUADio;
  }
 return(z);
}


inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int, int querXII(int y, int QUADio, int QUADrl)
{ /* Monadic query (roll) -  scalar */
 inty = toi(y);
 if (inty <= 0) print(tochar("roll domain error"));
 QUADrl = Lehmer(QUADrl);
 z = (tod(QUADrl) * tod(inty)) / tod(2147483647);
 return(toi(z) + QUADio, QUADrl);
}



inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int Lehmer(int qrl)
{ /* Lehmer's random number generator
   * CACM 1966-06, p. 432
   */
  val = tod(qrl)*16807.0;
  z = toi(sacmod(val, 2147483647.0));
 return(z);
}


inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline double sacmod(double x, double y)
{ /* SAC _aplmod_ for floats */
 if ( 0.0 == y) {
        t = 1.0;
 } else {
        t = y;
 }
 t2 = floor(x/t);
 z = x - (y*t2);
 return(z);
}

inline int upgradeRPV_testXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 50000000);
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_57,QUADrl_2=querIII(n_0,n_0,QUADio_1,QUADrl_1);
 k_0=( A_57);
 A_60=ugrdXIIPV( k_0,QUADio_1);
 r_0=( A_60);
 A_62= ABC(toi(6576889)-QUADio_1,shape(r_0)[0]);
A_64=r_0[[A_62]];
 // dsf scalar(s)
A_66=eqBIB(false,A_64);
 // dsf scalar(s)
A_67=barBBI(true,A_66);
 r_1=( A_67);
 A_71=quadXII( r_1,QUADpp_1,QUADpw_1);
 return(r_1);
}


use Array: all;
use Numerical : all;
use StdIO : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex2003/wss/sac3006.dws2010-10-01 09:45:24.671 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(toI(x) == toI(y));
}

inline int plusBBI(bool x, bool y)
{ return(toI(x)+toI(y));
}

inline bool[+] eqBIB(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
        ( . <= iv <= .) {
                yel = toI(y[iv]);
                } : eqIIB(xel,yel);
        } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
        ( . <= iv <= .) {
                yel = toI(y[iv]);
                } : eqIIB(xel,yel);
        } : genarray(shape(y), false);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
        z = reshape([prod(shape(y))],y);
        return(z);
}

inline int[*] rhoIII(int[.] x, int[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXII(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with {
                (. <= [i] <= .)
                        : ry;
                } : genarray( [ncopies], ry);
        /* Now append the leftover bits */
        z = comaXII(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[.] comaBII(bool x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[+] combIIILG(int[+] x, int[+] y)
{/* AxA first axis catenate. Left rank greater */
 return(toI(x)++toI([y]));
}
inline int[.] plussl1XBIFOLD(bool[.,.] y)
{ /* first-axis reduce rank-2 matrix */
  yt = TRANSPOSE(y);
  zrho = drop([-1], shape(yt));
  z = with {
        (. <= iv <= .)
                : plusslXBIFOLD(yt[iv]);
        } : genarray(zrho, 0);
  return(z);
}




inline int plusslXIIFOLD(int[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : toI(y[lim-iv]);
       } :  fold( plusIII, toI(0));
  return(z);
}


inline int plusIII(int x, int y)
{ return(toI(x)+toI(y));
}

inline bool[+] TRANSPOSE(bool[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), false);
  return(z);
}

inline int[+] TRANSPOSE(int[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), 0);
  return(z);
}

inline int plusslXBIFOLD(bool[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : toI(y[lim-iv]);
       } :  fold( plusIII, toI(0));
  return(z);
}


inline int[.,.] snpMakeXII(int[.] n )
{ 
/*
 ?
*/
A_23=rhoIII(n,[0, 1, 2, 0, 1, 0, 0, 1]);
r_0=( A_23);
 return(r_0);
}

inline int[.,.] snpcount4XII(int[.,.] snp)
{ 
 /* Iterative snpcount function */

 z = genarray( [3] ++ drop([1], shape(snp)), 0);
 for( i=0; i<shape(snp)[0]; i++) {
   for( j=0; j<shape(snp)[1]; j++) {
     iv = [ snp[i,j],  j];
     z[iv] = z[iv] + 1;
   }
 }
 return(z); 
}

int main()
{ 
/*
 ?
*/
QUADio_0=toi(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toi(( false));
 n_0=( [5000, 40000]);
 A_61=snpMakeXII( n_0);
 snp_0=( A_61);
 A_63=snpcount4XII( snp_0);
 r4_0=( A_63);
 r_0=( r4_0);
 A_66=comaXII( r_0);
 A_67=plusslXIIFOLD( A_66);
 /* dsf scalar(s) */
A_72=eqIIB(200000000,A_67);
/* dsf scalar(s) */
A_73=plusBBI(true,A_72);
 r_1=( A_73);
 A_77=quadXII( A_73,QUADpp_0,QUADpw_0);
 return(r_1);
}


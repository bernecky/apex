module metaphonAKD;
export {metaphonAKD_testXII};

// Compiled by APEX Version: FIXME!! 2021-06-27 18:01:50.215
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline bool[+] notXBB(bool[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : notXBB(toB(y[iv]));
        } : genarray(shape(y), false);
  return(z);
}

inline int plusBII(bool x, int y)
{ return(BtoI(x)+ItoI(y));
}

inline bool eqIDB(int x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((ItoD(x) == DtoD(y)) | APEXFUZZEQ(ItoD(x),DtoD(y),QUADct));
}


inline int plusIBI(int x, bool y)
{ return(ItoI(x)+BtoI(y));
}

inline int[+] barIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : barIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] mpyIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] barIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : barIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline bool[+] eqCCB(char[+] x, char y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqCCB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] andBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : andBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] orBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : orBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] neCCB(char[+] x, char[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : neCCB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
     ( . <= iv <= .) {
              yel = toC(y[iv]);
                    } : eqCCB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] neCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
     ( . <= iv <= .) {
              yel = toC(y[iv]);
                    } : neCCB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] neCCB(char[+] x, char y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : neCCB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[+] plusBBI(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusBBI(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline bool[.] comaXBB(bool[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] comaXCC(char[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] comaXCC(char[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline char[.] rotrICC(int x, char[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline bool[.] rotrIBB(int x, bool[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline char[.] rotrBCC(bool x, char[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline bool[.] rotrBBB(bool x, bool[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline char[.] rhoBCC(bool x, char[*] y)
{ /* [Scalar reshape non-scalar] (to vector) */
 z = rhoICC( [toi(x)],y);
 return(z);
}


inline bool[+] epsCCB(char[+] x, char[+] y)
{ /* character membership AxA*/
 ry = comaXCC(y);
 tbl = genarray([256],false);
 for(i=0; i<shape(ry)[[0]]; i++) {
  tbl[[toi(ry[[i]])]] = true;
 }

 z = with {
        (. <= iv <= .)
                : tbl[[toi(x[iv])]];
        } : genarray(shape(x), false);
 return(z);
}


inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline char[.] rhoICC(int x, char y)
{ // [Scalar reshape scalar]
  z = genarray( [toi(x)],y);
  return(z);
}

inline int[*] iotaCCIQUADAV(char[256] x, char y,int QUADio)
{ /* QUADav iota character scalar */
 return(toi(y)+QUADio);
}

inline char[.] rhoICC(int x, char[*] y)
{ /* [Scalar reshape non-scalar] (to vector) */
 z = rhoICC( [toi(x)],y);
 return(z);
}


inline int[*] iotaCCIQUADAV(char[256] x, char[+] y,int QUADio)
{ /* QUADav iota character non-scalar */
 z = with {
        (. <= iv <= .)
                : toi(y[iv]);
        } : genarray(shape(y), 0);
 return(z+QUADio);
}

inline bool[.] epsbCCB(char[.] x, char[.] y)
{
WONTWORK
}
function epsbCCB(x1: array[char];
                y1: array[char]
                returns array[boolean])


$SFCASES{{ % General case (0)
MATCHRESTVECTOR(char,char,C,C,C)

 if IsEmpty(x1) then array_fill(0,array_limh(y1),true) % x1 empty
 else
 let
  lasti := array_limh(y1) - array_limh(x1); % Last y1 index where
                                            % match can occur
 in
   for y0 in y1 at i returns array of
    if CtoC(x1[0]) ~= CtoC(y0)
     % Quick out if no match on first character
      | i > lasti          % or past end of y1
    then false
    else MatchRestVector(x1,y1,i)
    end if
   end for
 end let
 end if
end function
}}

inline bool[.] rhoIBB(int[1] x, bool y)
{ // [1-element Vector reshape scalar]
  z = genarray( toi(x),y);
  return(z);
}

inline char[.] takeBCC(bool x, char[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[*] dropIII(int x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[*] dropBII(bool x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline char[.] takeICC(int x, char[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.] takeBII(bool x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.]  rhoXCI(char[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.]  rhoXBI(bool[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline char[256] quadavXXC()
{ /* QUADav - system character set */
 z = with{
        ([0] <= [i] < [256]) : _toc_S_(i);
        } : genarray( [256], ' ');
 return(z);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline int[.] comaIBI(int[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline int[.] comaIII(int x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[.] comaIII(int[.] x, int y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline char[+] comaCCC(char[+] x, char[+] y)
{/* AxA last axis catenate. Ranks match */
 cellshape = (take([-1],shape(x)))+take([-1],shape(y));
 cell = genarray(cellshape, ' ');
 z = with {
         (. <= iv <= .)
                : toC(x[iv])++toC(y[iv]);
        } : genarray(drop([-1], shape(x)), cell);
 return(z);
}


inline char[.] comaCCC(char x, char[.] y)
{/* SxV catenate first (or last) axis */
 return([toC(x)]++toC(y));
}

inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline char[*] indr(char[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),' ');
 z = with {
        (. <= iv <= .)
                : X[[I[iv]]];
        } : genarray(shape(I), defcell);
 return(z);
}





inline char[+] inds1(char[+] X, int [+] I0, char[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = CtoC(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=CtoC((Y[[i0]]));

 }

 return(z);
}



inline char[+] inds1(char[+] X, int [+] I0, char Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = CtoC(X);
 Y = Yin;

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=CtoC((Y));

 }

 return(z);
}



inline int CommandLineArgvXII(int y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline int[*] jotdotplusIII(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0);
 z = with {
        (. <= iv <= .) {
         xitem = toI(x[iv]);
        } : plusIII(xitem, toI(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline int[.] slBII(bool[.] x, int[.] y)
{/* Boolean vector compress vector */
  zxrho = sum(toi(x));
  z = genarray([zxrho], 0);
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    if ( x[i]) {
      z[[zi]] = y[[i]];
      zi++;
    }
  return(z);
}

inline char[.] slBCC(bool[.] x, char[.] y)
{/* Boolean vector compress vector */
  zxrho = sum(toi(x));
  z = genarray([zxrho], ' ');
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    if ( x[i]) {
      z[[zi]] = y[[i]];
      zi++;
    }
  return(z);
}

inline int[.] bslBII(bool[.] x, int[.] y)
{ /* Vector-vector expand */
 /* Stupid with-loops won't work here. */
 /* FIXME: Needs check that (+/x)= shape(y)[0] and x^.GE 0 */
 yi=0;
 z= genarray(shape(x),0);
 for (xi=0; xi<shape(x)[[0]]; xi++){
   if (toB(x[[xi]])) {
        z[[xi]]=y[[yi]];
        yi++;
   }
 }
 return(z);
}


inline bool[.] slBBB(bool[.] x, bool[.] y)
{/* Boolean vector compress vector */
  zxrho = sum(toi(x));
  z = genarray([zxrho], false);
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    if ( x[i]) {
      z[[zi]] = y[[i]];
      zi++;
    }
  return(z);
}

inline char[.] slICC(int[.] x, char[.] y)
{/* Non-Boolean vector compress/replicate vector */
 /* HELP! non-boolean left argument needs a range check */
  intx = toi(x);
  zxrho = sum(intx);
  z = genarray([zxrho], ' ');
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    for(k=0; k<intx[[i]]; k++){
     z[[zi]] = y[[i]];
     zi++;
    }
  return(z);
}


inline bool[.] slIBB(int[.] x, bool[.] y)
{/* Non-Boolean vector compress/replicate vector */
 /* HELP! non-boolean left argument needs a range check */
  intx = toi(x);
  zxrho = sum(intx);
  z = genarray([zxrho], false);
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    for(k=0; k<intx[[i]]; k++){
     z[[zi]] = y[[i]];
     zi++;
    }
  return(z);
}


inline int mpyslXIIQUICKSTOP(int[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : ItoI(y[iv]);
        } : foldfix( mpyIII, ItoI(1), ItoI(0));
  return(z);
}


inline int maxslXIIFOLD(int[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : ItoI(y[lim-iv]);
       } :  fold( maxIII, ItoI(minint()));
  return(z);
}


inline int[.] plusbslXII(int[.] y)
{ /* Scan of vector */
/* This does the scan in the wrong direction, but since
 * we assume associative functions only, it should be ok.
 */
 size = shape(y);
 z = genarray(size,ItoI(0));
 if (0 != size[[0]]) {
        /* real work to do */
        z[[0]] = ItoI(y[[0]]); /* Not sure about the coercion... */
        for ( i=1; i<size[[0]]; i++) {
                z[[i]] = plusIII(ItoI(z[[i-1]]),ItoI(y[[i]]));
        }
  }
 return(z);
}


inline int plusslXBIFOLD(bool[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : BtoI(y[lim-iv]);
       } :  fold( plusIII, ItoI(0));
  return(z);
}


inline int plusslXIIFOLD(int[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : ItoI(y[lim-iv]);
       } :  fold( plusIII, ItoI(0));
  return(z);
}


inline bool notXBB(bool y)
{ /* Boolean NOT */
  return(!toB(y));
}

inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline bool eqCCB(char x, char y)
{ /* A=B on non-doubles */
 return(CtoC(x) == CtoC(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool orBBB(bool x, bool y)
{ return(BtoB(x) | BtoB(y));
}

inline bool neCCB(char x, char y)
{/* A !=B on non-doubles */
 return(CtoC(x) != CtoC(y));
}

inline int plusBBI(bool x, bool y)
{ return(BtoI(x)+BtoI(y));
}

inline int maxIII(int x, int y)
{ /* x max y */
 return (max(ItoI(x),ItoI(y)));
}

inline int[+] barIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] plusIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline bool[+] andBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : andBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] andBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : andBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] orBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : orBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] orBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : orBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int VectorRotateAmount(int x, int y)
{ /* Normalize x rotate for array of shape y on selected axis */
 /* normalize rotation count */

if ((0==x) || (0==y))
  z = 0;
else if (x>0)
        z = _aplmod_SxS_(x,y);
     else
        z = y - _aplmod_SxS_(abs(x),y);
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline char[.,.] vtomXCC(char[.] vector,int QUADio)
{ 
/*
 ?
*/
A_35=rhoBCC(false,vector);
 A_36=takeBCC(true,A_35);
 element_0=( A_36);
 A_38=takeBCC(true,vector);
 A_40=epsCCB(vector,A_38);
 A_41=comaXBB( A_40);
 b_0=( A_41);
 A_43=rhoXCI( vector);
 A_44=mpyslXIIQUICKSTOP( A_43);
 // dsf scalar(s)
A_48=plusBII(true,A_44);
 A_50=iotaXII( A_48,QUADio);
 A_51=comaBBB(b_0,true);
 A_52=slBII(A_51,A_50);
 t_0=( A_52);
 A_54=dropIII(-1,t_0);
 A_55=dropBII(true,t_0);
 // dsf Check needed
A_56=barIII(A_55,A_54);
 // dsf scalar(s)
A_57=plusIII(-1,A_56);
 l_0=( A_57);
 A_59=comaIBI(l_0,false);
 A_60=maxslXIIFOLD( A_59);
 c_0=( A_60);
 A_65=rhoXII( l_0);
 // dsf scalar(s)
A_66=mpyIII(c_0,A_65);
 A_67=rhoICC(A_66,element_0);
 t_1=( A_67);
 A_69=notXBB( b_0);
 A_70=slBCC(A_69,vector);
 A_71=comaIII(c_0,l_0);
 A_72=dropIII(-1,A_71);
 // dsf scalar(s)
A_73=barIII(c_0,A_72);
 A_74=bslBII(b_0,A_73);
 A_75=plusbslXII( A_74);
 A_79=notXBB( b_0);
 A_80=slBII(A_79,A_75);
 A_81=rhoXII( l_0);
 A_82=rhoXBI( b_0);
 // dsf scalar(s)
A_83=barIII(A_82,A_81);
 A_85=iotaXII( A_83,QUADio);
 // dsf scalar(s)
A_86=plusIII(A_85,A_80);
 A_87= ABC(toi(A_86)-QUADio,shape(t_1)[0]);
A_89=inds1(t_1,A_87,A_70);
t_2=( A_89);
 A_91=rhoXII( l_0);
 A_92=comaIII(A_91,c_0);
 A_93=rhoICC(A_92,t_2);
 matrix_0=( A_93);
 return(matrix_0);
}

inline char[.,.] metaphoneXCC(char[.,.] omega,int QUADio)
{ 
/*
 ?
*/
r_0=( omega);
 A_178=rhoICC(256,' ');
 x_0=( A_178);
 A_181=iotaXII( 26,QUADio);
 A_182=quadavXXC( );
 A_185=iotaCCIQUADAV(A_182,'A',QUADio);
 // dsf scalar(s)
A_186=plusIII(A_185,A_181);
 A_188=quadavXXC( );
 A_187= ABC(toi(A_186)-QUADio,shape(A_188)[0]);
A_190=indr(A_188,A_187);
 A_191=rhoICC(52,A_190);
 A_193=iotaXII( 26,QUADio);
 A_194=quadavXXC( );
 A_197=iotaCCIQUADAV(A_194,['a','A'],QUADio);
 A_198=jotdotplusIII(A_197,A_193);
 A_205=comaXII( A_198);
 A_206= ABC(toi(A_205)-QUADio,shape(x_0)[0]);
A_208=inds1(x_0,A_206,A_191);
 x_1=( A_208);
 A_210=quadavXXC( );
 A_213=iotaCCIQUADAV(A_210,omega,QUADio);
 A_214= ABC(toi(A_213)-QUADio,shape(x_1)[0]);
A_216=indr(x_1,A_214);
 omega_0=( A_216);
 A_218=quadavXXC( );
 A_219=takeBCC(true,A_218);
 A_220=takeICC(4,A_219);
 A_221=takeICC(-6,A_220);
 A_222=rhoXCI( omega_0);
 A_223=takeBII(true,A_222);
 A_224=comaIII(A_223,6);
 A_225=rhoICC(A_224,A_221);
 A_226=comaCCC(A_225,omega_0);
 A_227=comaXCC( A_226);
 A_228=rotrICC(2,A_227);
 omega_1=( A_228);
 // dsf scalar(s)
A_231=eqCCB(omega_1,' ');
 A_232=rotrIBB(-1,A_231);
 A_233=quadavXXC( );
 A_234=takeBCC(true,A_233);
 A_235=comaCCC(' ',A_234);
 A_237=epsCCB(omega_1,A_235);
 A_238=notXBB( A_237);
 // dsf Check needed
A_239=andBBB(A_238,A_232);
 isFirst_0=( A_239);
 A_242=epsbCCB(['G','N'],omega_1);
 A_244=epsbCCB(['K','N'],omega_1);
 // dsf Check needed
A_245=orBBB(A_244,A_242);
 A_247=epsbCCB(['P','N'],omega_1);
 // dsf Check needed
A_248=orBBB(A_247,A_245);
 b_0=( A_248);
 A_251=epsbCCB(['W','H'],omega_1);
 A_253=epsbCCB(['W','R'],omega_1);
 // dsf Check needed
A_254=orBBB(A_253,A_251);
 A_256=epsbCCB(['A','E'],omega_1);
 // dsf Check needed
A_257=orBBB(A_256,A_254);
 // dsf Check needed
A_258=orBBB(b_0,A_257);
 b_1=( A_258);
 // dsf Check needed
A_260=andBBB(isFirst_0,b_1);
 b_2=( A_260);
 A_263=epsbCCB(['W','H'],omega_1);
 // dsf Check needed
A_264=andBBB(isFirst_0,A_263);
 A_265=rotrIBB(-1,A_264);
 // dsf Check needed
A_266=orBBB(b_2,A_265);
 A_267=notXBB( A_266);
 b_3=( A_267);
 // dsf scalar(s)
A_270=eqCCB(omega_1,'X');
 // dsf Check needed
A_271=andBBB(isFirst_0,A_270);
 x_2=( A_271);
 A_273=rhoXBI( A_271);
 A_275=iotaXII( A_273,QUADio);
 A_276=slBII(x_2,A_275);
 A_277= ABC(toi(A_276)-QUADio,shape(omega_1)[0]);
A_279=inds1(omega_1,A_277,'S');
omega_2=( A_279);
 A_281=slBCC(b_3,omega_2);
 omega_3=( A_281);
 A_283=rotrBCC(true,omega_3);
 // dsf Scalar & clique
A_285=neCCB(omega_3,A_283);
 A_287=epsCCB(omega_3,['C',' ']);
 // dsf scalar(s)
A_288=orBBB(A_287,A_285);
 A_289=slBCC(A_288,omega_3);
 omega_4=( A_289);
 A_291=comaXCC( omega_4);
 r_1=( A_291);
 // dsf scalar(s)
A_294=eqCCB(omega_4,' ');
 A_295=rotrIBB(-1,A_294);
 A_296=quadavXXC( );
 A_297=takeBCC(true,A_296);
 A_298=comaCCC(' ',A_297);
 A_300=epsCCB(omega_4,A_298);
 A_301=notXBB( A_300);
 // dsf scalar(s)
A_302=andBBB(A_301,A_295);
 isFirst_1=( A_302);
 // dsf scalar(s)
A_305=eqCCB(omega_4,' ');
 A_306=rotrBBB(true,A_305);
 A_307=quadavXXC( );
 A_308=takeBCC(true,A_307);
 A_309=comaCCC(' ',A_308);
 A_311=epsCCB(omega_4,A_309);
 A_312=notXBB( A_311);
 // dsf scalar(s)
A_313=andBBB(A_312,A_306);
 isLast_0=( A_313);
 A_316=epsCCB(omega_4,['A','E','I','O','U']);
 isVowel_0=( A_316);
 A_319=epsCCB(omega_4,['E','I','Y']);
 frontv_0=( A_319);
 A_321=rhoXCI( omega_4);
 A_322=rhoIBB(A_321,false);
 drop_0=( A_322);
 A_324=notXBB( isFirst_1);
 // dsf scalar(s)
A_325=andBBB(isVowel_0,A_324);
 // dsf scalar(s)
A_326=orBBB(drop_0,A_325);
 drop_1=( A_326);
 A_328=rotrICC(-1,omega_4);
 // dsf scalar(s)
A_330=eqCCB('M',A_328);
 // dsf scalar(s)
A_331=orBBB(isLast_0,A_330);
 // dsf scalar(s)
A_333=eqCCB(omega_4,'B');
 // dsf scalar(s)
A_334=andBBB(A_333,A_331);
 // dsf scalar(s)
A_335=orBBB(drop_1,A_334);
 drop_2=( A_335);
 A_337=rotrBBB(true,frontv_0);
 A_338=notXBB( A_337);
 A_339=rotrICC(-1,omega_4);
 // dsf scalar(s)
A_341=neCCB('S',A_339);
 // dsf scalar(s)
A_342=orBBB(A_341,A_338);
 // dsf scalar(s)
A_344=eqCCB(omega_4,'C');
 // dsf scalar(s)
A_345=andBBB(A_344,A_342);
 c_0=( A_345);
 A_348=epsbCCB(['C','I','A'],omega_4);
 // dsf scalar(s)
A_349=andBBB(c_0,A_348);
 b_4=( A_349);
 A_351=rhoXBI( A_349);
 A_353=iotaXII( A_351,QUADio);
 A_354=slBII(b_4,A_353);
 A_355= ABC(toi(A_354)-QUADio,shape(r_1)[0]);
A_357=inds1(r_1,A_355,'X');
 r_2=( A_357);
 x_3=( b_4);
 A_360=rotrBBB(true,frontv_0);
 A_361=notXBB( x_3);
 // dsf scalar(s)
A_362=andBBB(A_361,A_360);
 // dsf scalar(s)
A_363=andBBB(c_0,A_362);
 z_0=( A_363);
 A_365=rhoXBI( A_363);
 A_367=iotaXII( A_365,QUADio);
 A_368=slBII(z_0,A_367);
 A_369= ABC(toi(A_368)-QUADio,shape(r_2)[0]);
A_371=inds1(r_2,A_369,'S');
 r_3=( A_371);
 // dsf scalar(s)
A_373=orBBB(x_3,z_0);
 x_4=( A_373);
 A_375=rotrBCC(true,omega_4);
 // dsf scalar(s)
A_377=eqCCB('H',A_375);
 A_378=notXBB( x_4);
 // dsf scalar(s)
A_379=andBBB(A_378,A_377);
 // dsf scalar(s)
A_380=andBBB(c_0,A_379);
 b_5=( A_380);
 A_382=rotrICC(-1,omega_4);
 // dsf scalar(s)
A_384=eqCCB(A_382,'S');
 A_385=rotrIBB(2,isVowel_0);
 A_386=notXBB( A_385);
 // dsf scalar(s)
A_387=andBBB(isFirst_1,A_386);
 // dsf scalar(s)
A_388=orBBB(A_387,A_384);
 // dsf scalar(s)
A_389=andBBB(b_5,A_388);
 z_1=( A_389);
 A_391=slBBB(b_5,z_1);
 A_392= ABC(toi(A_391)-QUADio,shape(['X','K'])[0]);
A_394=indr(['X','K'],A_392);
 A_395=rhoXBI( b_5);
 A_397=iotaXII( A_395,QUADio);
 A_398=slBII(b_5,A_397);
 A_399= ABC(toi(A_398)-QUADio,shape(r_3)[0]);
A_401=inds1(r_3,A_399,A_394);
 r_4=( A_401);
 A_403=rotrIBB(-1,b_5);
 // dsf scalar(s)
A_404=orBBB(drop_2,A_403);
 drop_3=( A_404);
 // dsf scalar(s)
A_406=orBBB(x_4,b_5);
 x_5=( A_406);
 A_408=rhoXBI( c_0);
 A_410=iotaXII( A_408,QUADio);
 A_411=notXBB( x_5);
 // dsf scalar(s)
A_412=andBBB(c_0,A_411);
 A_413=slBII(A_412,A_410);
 A_414= ABC(toi(A_413)-QUADio,shape(r_4)[0]);
A_416=inds1(r_4,A_414,'K');
 r_5=( A_416);
 x_6=( [:char]);
 z_2=( [:char]);
 b_6=( [:char]);
 // dsf scalar(s)
A_422=eqCCB('D',omega_4);
 x_7=( A_422);
 A_424=rotrBCC(true,omega_4);
 // dsf scalar(s)
A_426=eqCCB('G',A_424);
 // dsf Scalar & clique
A_427=andBBB(x_7,A_426);
 b_7=( A_427);
 A_429=rhoXBI( b_7);
 A_431=iotaXII( A_429,QUADio);
 A_432=slBII(b_7,A_431);
 A_433= ABC(toi(A_432)-QUADio,shape(r_5)[0]);
A_435=inds1(r_5,A_433,'J');
 r_6=( A_435);
 A_437=rotrIBB(-1,x_7);
 // dsf scalar(s)
A_438=orBBB(drop_3,A_437);
 drop_4=( A_438);
 A_440=rhoXBI( b_7);
 A_442=iotaXII( A_440,QUADio);
 A_443=notXBB( b_7);
 // dsf Scalar & clique
A_444=andBBB(x_7,A_443);
 A_445=slBII(A_444,A_442);
 A_446= ABC(toi(A_445)-QUADio,shape(r_6)[0]);
A_448=inds1(r_6,A_446,'T');
 r_7=( A_448);
 b_8=( [:char]);
 x_8=( [:char]);
 // dsf scalar(s)
A_453=eqCCB(omega_4,'G');
 z_3=( A_453);
 // dsf scalar(s)
A_456=neCCB(omega_4,'D');
 x_9=( A_456);
 A_458=rotrIBB(2,isVowel_0);
 // dsf scalar(s)
A_460=neCCB(omega_4,'H');
 A_461=rotrBBB(true,A_460);
 // dsf scalar(s)
A_462=orBBB(A_461,A_458);
 // dsf scalar(s)
A_463=andBBB(z_3,A_462);
 b_9=( A_463);
 A_465=rotrIBB(3,x_9);
 // dsf scalar(s)
A_467=neCCB(omega_4,'E');
 A_468=rotrIBB(2,A_467);
 // dsf Scalar & clique
A_469=orBBB(A_468,A_465);
 A_470=rotrBBB(true,isLast_0);
 A_471=notXBB( A_470);
 // dsf scalar(s)
A_472=andBBB(A_471,A_469);
 // dsf scalar(s)
A_474=neCCB(omega_4,'N');
 A_475=rotrBBB(true,A_474);
 // dsf scalar(s)
A_476=orBBB(A_475,A_472);
 // dsf scalar(s)
A_477=andBBB(b_9,A_476);
 b_10=( A_477);
 A_479=rotrBBB(true,frontv_0);
 A_480=notXBB( A_479);
 A_481=rotrIBB(-1,x_9);
 // dsf scalar(s)
A_482=orBBB(A_481,A_480);
 // dsf scalar(s)
A_483=andBBB(b_10,A_482);
 b_11=( A_483);
 A_485=rotrIBB(2,z_3);
 A_486=notXBB( A_485);
 A_487=rotrBBB(true,frontv_0);
 // dsf scalar(s)
A_488=andBBB(A_487,A_486);
 A_489=slBBB(b_11,A_488);
 A_490= ABC(toi(A_489)-QUADio,shape(['K','J'])[0]);
A_492=indr(['K','J'],A_490);
 A_493=rhoXBI( b_11);
 A_495=iotaXII( A_493,QUADio);
 A_496=slBII(b_11,A_495);
 A_497= ABC(toi(A_496)-QUADio,shape(r_7)[0]);
A_499=inds1(r_7,A_497,A_492);
 r_8=( A_499);
 // dsf scalar(s)
A_502=neCCB(omega_4,'H');
 A_503=rotrIBB(-4,A_502);
 A_505=epsCCB(omega_4,['B','D','H']);
 A_506=notXBB( A_505);
 A_507=rotrIBB(-3,A_506);
 // dsf scalar(s)
A_508=andBBB(A_507,A_503);
 // dsf scalar(s)
A_510=eqCCB(omega_4,'H');
 A_511=rotrBBB(true,A_510);
 // dsf scalar(s)
A_512=andBBB(A_511,A_508);
 A_513=notXBB( b_11);
 // dsf scalar(s)
A_514=andBBB(A_513,A_512);
 // dsf scalar(s)
A_515=andBBB(z_3,A_514);
 x_10=( A_515);
 A_517=rhoXBI( x_10);
 A_519=iotaXII( A_517,QUADio);
 A_520=slBII(x_10,A_519);
 A_521= ABC(toi(A_520)-QUADio,shape(r_8)[0]);
A_523=inds1(r_8,A_521,'F');
 r_9=( A_523);
 A_525=rotrIBB(-1,x_10);
 // dsf scalar(s)
A_526=orBBB(drop_4,A_525);
 drop_5=( A_526);
 // dsf scalar(s)
A_528=orBBB(b_11,x_10);
 A_529=notXBB( A_528);
 // dsf scalar(s)
A_530=andBBB(z_3,A_529);
 // dsf scalar(s)
A_531=orBBB(drop_5,A_530);
 drop_6=( A_531);
 z_4=( [:char]);
 x_11=( [:char]);
 b_12=( [:char]);
 A_536=rotrBBB(true,isVowel_0);
 A_537=notXBB( A_536);
 A_538=rotrIBB(-1,isVowel_0);
 // dsf Scalar & clique
A_539=andBBB(A_538,A_537);
 // dsf scalar(s)
A_541=eqCCB(omega_4,'H');
 // dsf scalar(s)
A_542=andBBB(A_541,A_539);
 // dsf scalar(s)
A_543=orBBB(drop_6,A_542);
 drop_7=( A_543);
 A_546=epsbCCB(['C','K'],omega_4);
 A_547=rotrIBB(-1,A_546);
 // dsf scalar(s)
A_548=orBBB(drop_7,A_547);
 drop_8=( A_548);
 A_551=epsbCCB(['P','H'],omega_4);
 b_13=( A_551);
 A_553=rhoXBI( A_551);
 A_555=iotaXII( A_553,QUADio);
 A_556=slBII(b_13,A_555);
 A_557= ABC(toi(A_556)-QUADio,shape(r_9)[0]);
A_559=inds1(r_9,A_557,'F');
 r_10=( A_559);
 A_561=rotrIBB(-1,b_13);
 // dsf scalar(s)
A_562=orBBB(drop_8,A_561);
 drop_9=( A_562);
 A_564=rhoXCI( omega_4);
 A_566=iotaXII( A_564,QUADio);
 // dsf scalar(s)
A_568=eqCCB(omega_4,'Q');
 A_569=slBII(A_568,A_566);
 A_570= ABC(toi(A_569)-QUADio,shape(r_10)[0]);
A_572=inds1(r_10,A_570,'K');
 r_11=( A_572);
 A_575=epsbCCB(['S','H'],omega_4);
 b_14=( A_575);
 A_577=rhoXBI( A_575);
 A_579=iotaXII( A_577,QUADio);
 A_580=slBII(b_14,A_579);
 A_581= ABC(toi(A_580)-QUADio,shape(r_11)[0]);
A_583=inds1(r_11,A_581,'X');
 r_12=( A_583);
 A_585=rotrIBB(-1,b_14);
 // dsf scalar(s)
A_586=orBBB(drop_9,A_585);
 drop_10=( A_586);
 A_589=epsbCCB(['T','I','A'],omega_4);
 A_591=epsbCCB(['T','I','O'],omega_4);
 // dsf scalar(s)
A_592=orBBB(A_591,A_589);
 A_594=epsbCCB(['S','I','A'],omega_4);
 // dsf scalar(s)
A_595=orBBB(A_594,A_592);
 A_597=epsbCCB(['S','I','O'],omega_4);
 // dsf scalar(s)
A_598=orBBB(A_597,A_595);
 b_15=( A_598);
 A_600=rhoXBI( b_15);
 A_602=iotaXII( A_600,QUADio);
 A_603=slBII(b_15,A_602);
 A_604= ABC(toi(A_603)-QUADio,shape(r_12)[0]);
A_606=inds1(r_12,A_604,'X');
 r_13=( A_606);
 A_609=epsbCCB(['T','H'],omega_4);
 b_16=( A_609);
 A_611=rhoXBI( A_609);
 A_613=iotaXII( A_611,QUADio);
 A_614=slBII(b_16,A_613);
 A_615= ABC(toi(A_614)-QUADio,shape(r_13)[0]);
A_617=inds1(r_13,A_615,'0');
 r_14=( A_617);
 A_619=rotrIBB(-1,b_16);
 // dsf scalar(s)
A_620=orBBB(drop_10,A_619);
 drop_11=( A_620);
 // dsf scalar(s)
A_623=eqCCB(omega_4,'H');
 A_624=rotrIBB(2,A_623);
 // dsf scalar(s)
A_626=eqCCB(omega_4,'C');
 A_627=rotrBBB(true,A_626);
 // dsf Scalar & clique
A_628=orBBB(A_627,A_624);
 // dsf scalar(s)
A_630=eqCCB(omega_4,'T');
 // dsf Scalar & clique
A_631=andBBB(A_630,A_628);
 // dsf scalar(s)
A_632=orBBB(drop_11,A_631);
 drop_12=( A_632);
 A_634=rhoXCI( omega_4);
 A_636=iotaXII( A_634,QUADio);
 // dsf scalar(s)
A_638=eqCCB(omega_4,'V');
 A_639=slBII(A_638,A_636);
 A_640= ABC(toi(A_639)-QUADio,shape(r_14)[0]);
A_642=inds1(r_14,A_640,'F');
 r_15=( A_642);
 A_644=notXBB( isVowel_0);
 A_645=rotrBBB(true,A_644);
 A_647=epsCCB(omega_4,['W','Y']);
 // dsf scalar(s)
A_648=andBBB(A_647,A_645);
 // dsf scalar(s)
A_649=orBBB(drop_12,A_648);
 drop_13=( A_649);
 A_651=rhoXCI( omega_4);
 A_653=iotaXII( A_651,QUADio);
 // dsf scalar(s)
A_655=eqCCB(omega_4,'Z');
 A_656=slBII(A_655,A_653);
 A_657= ABC(toi(A_656)-QUADio,shape(r_15)[0]);
A_659=inds1(r_15,A_657,'S');
 r_16=( A_659);
 A_661=rhoXBI( drop_13);
 A_663=iotaXII( A_661,QUADio);
 A_664=slBII(drop_13,A_663);
 A_665= ABC(toi(A_664)-QUADio,shape(r_16)[0]);
A_667=inds1(r_16,A_665,' ');
 r_17=( A_667);
 drop_14=( [:char]);
 A_670=notXBB( isFirst_1);
 // dsf scalar(s)
A_672=eqCCB(omega_4,'X');
 // dsf scalar(s)
A_673=andBBB(A_672,A_670);
 b_17=( A_673);
 // dsf scalar(s)
A_675=plusBBI(b_17,true);
 A_676=slICC(A_675,r_17);
 r_18=( A_676);
 // dsf scalar(s)
A_678=plusBBI(b_17,true);
 A_679=slIBB(A_678,b_17);
 b_18=( A_679);
 A_681=plusslXBIFOLD( b_18);
 A_685=rhoICC(A_681,['K','S']);
 A_686=rhoXBI( b_18);
 A_688=iotaXII( A_686,QUADio);
 A_689=slBII(b_18,A_688);
 A_690= ABC(toi(A_689)-QUADio,shape(r_18)[0]);
A_692=inds1(r_18,A_690,A_685);
 r_19=( A_692);
 b_19=( [:char]);
 // dsf scalar(s)
A_696=neCCB(r_19,' ');
 A_697=slBCC(A_696,r_19);
 r_20=( A_697);
 A_700=vtomXCC( r_20,QUADio);
 r_21=( A_700);
 return(r_21);
}

inline int benchmetXII(int n ,int QUADio)
{ 
/*
 ?
*/
char_0=( [' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']);
A_23=comaIII(n,25);
 A_24=rhoICC(A_23,char_0);
 A_26=metaphoneXCC( A_24,QUADio);
 r_0=( A_26);
 A_28=quadavXXC( );
 A_31=iotaCCIQUADAV(A_28,r_0,QUADio);
 A_32=comaXII( A_31);
 A_33=plusslXIIFOLD( A_32);
 r_1=( A_33);
 return(r_1);
}

inline int metaphonAKD_testXII()
{ 
/*
 ?
*/
n=CommandLineArgvXII( r);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADrl_1=( 16807);
 QUADct_1=( 1.0e-13);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_53=benchmetXII( n,QUADio_1);
 r_0=( A_53);
 A_57=quadXII( r_0,QUADpp_1,QUADpw_1);
 // dsf scalar(s)
A_59=eqIDB(r_0,2233111160.0,QUADct_1);
// dsf scalar(s)
A_60=plusIBI(-1,A_59);
 r_1=( A_60);
 A_64=quadXII( A_60,QUADpp_1,QUADpw_1);
 return(r_1);
}


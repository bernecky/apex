module waverAKD;
export {waverAKD_testXII};

// Compiled by APEX Version: FIXME!! 2021-08-07 16:41:16.623
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline double[+] divXID(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : divXDD(toD(y[iv]));
        } : genarray(shape(y), 0.0d);
  return(z);
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline bool eqIDB(int x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((ItoD(x) == DtoD(y)) | APEXFUZZEQ(ItoD(x),DtoD(y),QUADct));
}


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double[+] modBDD(bool x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : modDDD(xel,yel, QUADct);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] barDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : barDDD(xel,yel);
        } : genarray(sy, 0.0d);
  return(z);
}






inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] plusDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusDDD(xel,yel);
        } : genarray(sy, 0.0d);
  return(z);
}






inline double[+] plusDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double[*] rhoIDD(int[.] x, double[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0.0d);
   return( z);
}



inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline int[.] comaIII(int x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int CommandLineArgvXBI(bool y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline double[+] plusdotmpyDDDTRANSPOSE(double[+] x, double[+] y)
{ /* Generic case of inner product z = x f.g y */
 yt = toD(TRANSPOSE(y));
 xct = toD(x);
 shp = drop([-1],shape(x)) ++ drop([1], shape(y));
 z = with {
   (. <= iv <= .) {
     vx = xct[take([dim(x)-1], iv)];
     vy = yt[ reverse(take([1-dim(y)], iv))];
   } : plusslXDDFOLD(mpyDDD(vx,vy));
 } : genarray(shp, 0.0d);
 return(z);
}




inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : DtoD(y[lim-iv]);
       } :  fold( plusDDD, ItoD(0));
  return(z);
}


inline double divXDD(double y)
{ return(1.0/tod(y));
}

inline double modDDD(double x, double y, double QUADct)
{ /* Double residue double */
  /* This definition is taken from SHARP APL Refman May 1991, p.6-26.
   * It extends the definition of residue to fractional right arguments
   * and to zero, negative and fractional left arguments.
   * r= y-x times floor y divide x+0=x
   * See also APL model in workspace 43 UTDScalarI.
   */
  nx = (0.0 == DtoD(x))  ?  1.0  : DtoD(x);
  z = DtoD(y) - DtoD(x) * tod(DFLOOR(DtoD(y)/nx, QUADct));
  return(z);
}


inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline double[+] barDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : barDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] barDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barDDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] plusDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusDDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] mpyDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : mpyDDD(xel,yel);
        } : genarray(sy, 0.0d);
  return(z);
}






inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline double[+] TRANSPOSE(double[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), 0.0d);
  return(z);
}

inline double mpyDDD(double x, double y)
{ return(DtoD(x)*DtoD(y));
}

inline double[+] mpyDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : mpyDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] mpyDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : mpyDDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int DFLOOR(double y, double QUADct)
{ /* Fuzzy floor */
  /* Definition taken from SHARP APL Refman May 1991, p.6-23
   * floor:  n <- (signum y) times nofuzzfloor 0.5+abs y)
   *         z <- n-(QUADct times 1 max abs y)<(n-y)
   * If you want a double result,  write: "y - 1| y".
   */
   n = tod(floor(0.5+fabs(y)));
   if (y < 0.0)
        n = -n;
   else if (0.0 == y)
        n = 0.0;
   range = fabs(y);
   if (1.0 > range)
        range = 1.0;
   fuzzlim = QUADct*range;
   ny = n-y;
   if (fuzzlim < ny)
        z = n - 1.0;
   else
        z = n;
   return(toi(z));
}

inline double[.,.] STSCfloorXDD(double[.,.] y ,double QUADct)
{ 
/*
 ?
*/
// dsf scalar(s)
A_17=modBDD(true,y,QUADct);
// dsf clique
A_18=barDDD(y,A_17);
 r_0=( A_18);
 return(r_0);
}

inline double waverXID(int n ,double QUADct,int QUADio)
{ 
/*
 ?
*/
// dsf scalar(s)
A_29=mpyIII(n,5);
 // dsf scalar(s)
A_30=mpyIII(n,A_29);
 A_32=iotaXII( A_30,QUADio);
 // dsf scalar(s)
A_33=plusBII(true,A_32);
 A_34=divXID( A_33);
 A_35=comaIII(n,5);
 A_36=comaIII(n,A_35);
 A_37=rhoIDD(A_36,A_34);
 m1_0=( A_37);
 A_40=iotaXII( n,QUADio);
 // dsf scalar(s)
A_41=plusIII(2,A_40);
 A_42=divXID( A_41);
 A_43=comaIII(n,5);
 A_44=comaIII(n,A_43);
 A_45=rhoIDD(A_44,A_42);
 m2_0=( A_45);
 A_47=plusdotmpyDDDTRANSPOSE(m2_0,[0.5, 4.0, 3.0, 2.0, 1.0]);
 A_54=plusdotmpyDDDTRANSPOSE(m1_0,[0.1, 2.0, 3.0, 4.0, 5.0]);
 // dsf Check needed
A_61=plusDDD(A_54,A_47);
 // dsf scalar(s)
A_62=plusDDD(0.5,A_61);
 A_64=STSCfloorXDD( A_62,QUADct);
 r_0=( A_64);
 A_66=comaXDD( r_0);
 A_67=plusslXDDFOLD( A_66);
 r_1=( A_67);
 return(r_1);
}

inline int waverAKD_testXII()
{ 
/*
 ?
*/
n=CommandLineArgvXBI( true);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADrl_1=( 16807);
 QUADct_1=( 1.0e-13);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_54=waverXID( n,QUADct_1,QUADio_1);
 r_0=( A_54);
 A_58=quadXDD( A_54,QUADpp_1,QUADpw_1);
 // dsf scalar(s)
A_60=eqIDB(225013,r_0,QUADct_1);
// dsf scalar(s)
A_61=barBBI(true,A_60);
 r_1=( A_61);
 A_65=quadXII( A_61,QUADpp_1,QUADpw_1);
 return(r_1);
}


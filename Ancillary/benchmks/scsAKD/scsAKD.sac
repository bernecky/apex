use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3013.dws2012-11-07 10:21:33.191 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline bool[+] notXBB(bool[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : notXBB(toB(y[iv]));
        } : genarray(shape(y), false);
  return(z);
}

inline int plusBII(bool x, int y)
{ return(BtoI(x)+ItoI(y));
}

inline int barIBI(int x, bool y)
{ return(ItoI(x)-BtoI(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool eqCCB(char x, char y)
{ /* A=B on non-doubles */
 return(CtoC(x) == CtoC(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool orBBB(bool x, bool y)
{ return(BtoB(x)|BtoB(y));
}

inline int mpyIBI(int x, bool y)
{ return(ItoI(x)*BtoI(y));
}

inline int plusIBI(int x, bool y)
{ return(ItoI(x)+BtoI(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline bool[+] eqCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
     ( . <= iv <= .) {
              yel = toC(y[iv]);
                    } : eqCCB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[+] eqCCB(char[+] x, char[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqCCB(xel,yel);
        } : genarray(sx, false);
  return(z);
}






inline char[.] rhoICC(int x, char[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoICC( [toi(x)],y);
 return(z);
}


inline bool[.] rhoIBB(int x, bool[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIBB( [toi(x)],y);
 return(z);
}


inline int iotaBBI(bool[.] x, bool y,int QUADio)
{ /* Non-fuzzy Vector iota Scalar */
 sx = shape(x)[[0]];
 z = sx;
 for(i=0; i<sx; i++) {
        if (toB(x[[i]]) == toB(y)){
                z = i;
                i = sx;
        }
 }
 return(z+QUADio);
}

inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline int iotaCCI(char[.] x, char y,int QUADio)
{ /* Non-fuzzy Vector iota Scalar */
 sx = shape(x)[[0]];
 z = sx;
 for(i=0; i<sx; i++) {
        if (toC(x[[i]]) == toC(y)){
                z = i;
                i = sx;
        }
 }
 return(z+QUADio);
}

inline bool[*] rhoCBB(char[.] x, bool[*] y)
{  /* Character-vector reshape anything. */
   /* Left argument must be empty vector! */
  if( 0 != shape(x)[[0]]) {
    show(tochar("reshape domain error in rhoCBB"));
  }
  z = y[ 0 * shape(y)];
  return(z);
}

inline char[*] dropBCC(bool x, char[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline char[.] takeICC(int x, char[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline char[*] dropICC(int[.] x, char[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline char[*] takeICC(int[1] x, char[.] y)
{ /* Vector take Vector */
  return(take(toi(x),y));
}

inline bool[.,.] takeIBB(int[.] x, bool[.,.] y)
{ /* vector take matrix */
  return(take(toi(x),y));
}

inline char[*] dropICC(int x, char[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.] takeBII(bool x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.]  rhoXCI(char[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline char[.] comaCCC(char x, char[.] y)
{/* SxV catenate first (or last) axis */
 return([toC(x)]++toC(y));
}

inline char[.] comaCCC(char[.] x, char[.] y)
{ /* VxV catenate first or last axis */
 return(toC(x)++toC(y));
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline bool[.] comaBBB(bool x, bool[.] y)
{/* SxV catenate first (or last) axis */
 return([toB(x)]++toB(y));
}

inline char[*] indr(char[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline bool[*] indr(bool[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline bool[+] indsx0(bool[+] X, int  I1, bool[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = BtoB(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){

 z[[i0,I1]]=BtoB(Y[[i0]]);

 }

 return(z);
}



inline bool[+] inds0x(bool[+] X, int  I0, bool[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = BtoB(X);
 
 z[[I0]]=BtoB(Y);

 
 return(z);
}



inline bool[+] inds00(bool[+] X, int  I0,int  I1, bool Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = BtoB(X);
 Y = Yin;

 
 z[[I0,I1]]=BtoB(Y);

 
 return(z);
}



inline char[+] inds1(char[+] X, int [+] I0, char Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = CtoC(X);
 Y = Yin;

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=CtoC(Y);

 }

 return(z);
}



inline int CommandLineArgvXBI(bool y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline char[.] slBCC(bool[.] x, char[.] y)
{/* Boolean vector compress vector */
  zxrho = sum(toi(x));
  z = genarray([zxrho], ' ');
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    if ( x[i]) {
      z[[zi]] = y[[i]];
      zi++;
    }
  return(z);
}

inline bool[.] andbslXBB(bool[.] y)
{ /* Scan of vector */
/* This does the scan in the wrong direction, but since
 * we assume associative functions only, it should be ok.
 */
 size = shape(y);
 z = genarray(size,ItoB(1));
 if (0 != size[[0]]) {
        /* real work to do */
        z[[0]] = BtoB(y[[0]]); /* Not sure about the coercion... */
        for ( i=1; i<size[[0]]; i++) {
                z[[i]] = andBBB(BtoB(z[[i-1]]),BtoB(y[[i]]));
        }
  }
 return(z);
}


inline bool notXBB(bool y)
{ /* Boolean NOT */
  return(!toB(y));
}

inline bool[+] eqCCB(char[+] x, char y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqCCB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline char[.] comaXCC(char[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline bool[*] indrfr(int fr, bool[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline bool[*] indrfr0(bool[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline bool[*] indrfr(int fr, bool[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,false);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline char[.] MakeArgsXIC(int n )
{ 
/*
 ?
*/
A_34=rhoICC(n,['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']);
s_0=( A_34);
 A_36=rhoIBB(n,[false,false,true]);
 b_0=( A_36);
 A_38=slBCC(b_0,s_0);
 s1_0=( A_38);
 A_40=notXBB( b_0);
 A_41=slBCC(A_40,s_0);
 s2_0=( A_41);
 A_43=comaCCC('/',s2_0);
 A_44=comaCCC(s1_0,A_43);
 A_45=comaCCC('/',A_44);
 A_46=comaCCC(s_0,A_45);
 r_0=( A_46);
 return(r_0);
}

inline bool[.,.] SCSCCB(char[.] s, char[.] y,int QUADio)
{ 
/*
 ?
*/
A_61=dropBCC(true,y);
 A_62= ABC(toi(false)-QUADio,shape(y)[0]);
A_64=y[[A_62]];
 /* dsf scalar(s) */
A_66=eqCCB(A_64,A_61);
 A_69=iotaBBI(A_66,true,QUADio);
 /* dsf scalar(s) */
A_70=plusBII(true,A_69);
 b_0=( A_70);
 A_72=takeICC(b_0,y);
 A_73=dropBCC(true,A_72);
 si_0=( A_73);
 A_75=rhoXCI( si_0);
 /* dsf scalar(s) */
A_76=plusIII(2,A_75);
 A_77=dropICC(A_76,y);
 sj_0=( A_77);
 A_79=rhoXCI( sj_0);
 A_80=rhoXCI( si_0);
 A_81=comaIII(A_80,A_79);
 /* dsf scalar(s) */
A_82=plusBII(true,A_81);
 A_83=rhoIBB(A_82,false);
 m_0=( A_83);
 A_85=rhoXCI( si_0);
 A_86=takeICC(A_85,s);
 /* dsf Check needed */
A_88=eqCCB(si_0,A_86);
 A_89=andbslXBB( A_88);
 A_93=comaBBB(true,A_89);
 A_94= ABC(toi(false)-QUADio,shape(m_0)[1]);
A_97=indsx0(m_0,A_94,A_93);
 m_1=( A_97);
 A_99=rhoXCI( sj_0);
 A_100=takeICC(A_99,s);
 /* dsf Check needed */
A_102=eqCCB(sj_0,A_100);
 A_103=andbslXBB( A_102);
 A_107=comaBBB(true,A_103);
 A_109= ABC(toi(false)-QUADio,shape(m_1)[0]);
A_111=inds0x(m_1,A_109,A_107);
 m_2=( A_111);
 A_113=rhoXCI( sj_0);
 A_115=iotaXII( A_113,QUADio);
 /* dsf scalar(s) */
A_116=plusBII(true,A_115);
 A_CTR117_= 0;
A_CTR117z_ = (shape(A_116)[[0]])-1;
m_5=toB(m_2);
for(; A_CTR117_ <= A_CTR117z_; A_CTR117_++){
j_0 = A_116[[A_CTR117_]];
 A_119=rhoXCI( si_0);
 A_121=iotaXII( A_119,QUADio);
 /* dsf scalar(s) */
A_122=plusBII(true,A_121);
 A_CTR123_= 0;
A_CTR123z_ = (shape(A_122)[[0]])-1;
m_5=toB(m_5);
for(; A_CTR123_ <= A_CTR123z_; A_CTR123_++){
i_0 = A_122[[A_CTR123_]];
 /* dsf scalar(s) */
A_125=barIBI(j_0,true);
 /* dsf scalar(s) */
A_126=plusIII(i_0,A_125);
 A_127= ABC(toi(A_126)-QUADio,shape(s)[0]);
A_129=s[[A_127]];
 cc_0=( A_129);
 /* dsf scalar(s) */
A_131=barIBI(i_0,true);
 A_132= ABC(toi(A_131)-QUADio,shape(si_0)[0]);
A_134=si_0[[A_132]];
 /* dsf scalar(s) */
A_136=eqCCB(cc_0,A_134);
 /* dsf scalar(s) */
A_137=barIBI(i_0,true);
 A_139= ABC(toi(A_137)-QUADio,shape(m_5)[0]);
A_138= ABC(toi(j_0)-QUADio,shape(m_5)[1]);
A_141=m_5[[A_139,A_138]];
 /* dsf scalar(s) */
A_142=andBBB(A_141,A_136);
 ti_0=( A_142);
 /* dsf scalar(s) */
A_144=barIBI(j_0,true);
 A_145= ABC(toi(A_144)-QUADio,shape(sj_0)[0]);
A_147=sj_0[[A_145]];
 /* dsf scalar(s) */
A_149=eqCCB(cc_0,A_147);
 /* dsf scalar(s) */
A_150=barIBI(j_0,true);
 A_152= ABC(toi(i_0)-QUADio,shape(m_5)[0]);
A_151= ABC(toi(A_150)-QUADio,shape(m_5)[1]);
A_154=m_5[[A_152,A_151]];
 /* dsf scalar(s) */
A_155=andBBB(A_154,A_149);
 tj_0=( A_155);
 /* dsf scalar(s) */
A_157=orBBB(ti_0,tj_0);
 A_159= ABC(toi(i_0)-QUADio,shape(m_5)[0]);
A_158= ABC(toi(j_0)-QUADio,shape(m_5)[1]);
A_161=inds00(m_5,A_159,A_158,A_157);
 m_5=( A_161);
 }
 }
 A_165=takeIBB([-1, -1],m_5);
 r_0=( A_165);
 return(r_0);
}

inline int BenchSCSXII(int n ,int QUADio)
{ 
/*
 ?
*/
A_36=MakeArgsXIC( n);
 s_0=( A_36);
 A_40=iotaCCI(s_0,'/',QUADio);
 A_41=dropICC(A_40,s_0);
 ss_0=( A_41);
 A_45=iotaCCI(s_0,'/',QUADio);
 A_46=takeICC(A_45,s_0);
 s_1=( A_46);
 A_49=SCSCCB(s_1,ss_0,QUADio);
 r_0=( A_49);
 A_51=rhoXCI( s_1);
 A_52=takeBII(true,A_51);
 /* dsf scalar(s) */
A_53=plusIII(-1,A_52);
 A_54= ABC(toi(A_53)-QUADio,shape(s_1)[0]);
A_56=inds1(s_1,A_54,'?');
s_2=( A_56);
 A_59=SCSCCB(s_2,ss_0,QUADio);
 A_60=takeIBB([-1, -1],A_59);
 A_61=rhoCBB([:char],A_60);
 A_62=takeIBB([-1, -1],r_0);
 A_63=rhoCBB([:char],A_62);
 /* dsf scalar(s) */
A_64=mpyIBI(10,A_63);
 /* dsf scalar(s) */
A_65=plusIBI(A_64,A_61);
 r_1=( A_65);
 return(r_1);
}

int main()
{ 
/*
 ?
*/
n=CommandLineArgvXBI( true);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_53=BenchSCSXII( n,QUADio_1);
 r_0=( A_53);
 A_57=quadXII( r_0,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_59=eqIIB(r_0,10);
 /* dsf scalar(s) */
A_60=barBBI(true,A_59);
r_1=( A_60);
 A_64=quadXII( A_60,QUADpp_1,QUADpw_1);
 return(r_1);
}


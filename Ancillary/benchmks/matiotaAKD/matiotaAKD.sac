use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3014.dws2013-04-05 12:41:08.909 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int[+] mpyXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : mpyXII(toI(y[iv]));
        } : genarray(shape(y), 0);
  return(z);
}

inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] maxIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : maxIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[+] mpyBII(bool[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : mpyBII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline bool[+] neCCB(char[+] x, char[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : neCCB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline int[+] barIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : barIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[+] minIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : minIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] plusDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] mpyIDD(int[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : mpyIDD(xel,yel);
        } : genarray(sy, 0.0d);
  return(z);
}






inline char[+] rotrXCC(char[+] y)
{/* Last axis reverse on rank>1 */
 cellshape = take([-1], shape(y));
 frameshape = drop([-1],shape(y));
 cell = genarray(cellshape, ' ');
 z = with {
        ( . <= iv <= .)
                : rotrXCC(y[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline char[+] rot1ICC(int x, char[+] y)
{ /* Scalar rotate first axis non-scalar */
 ix = toi(x);
 rows = shape(y)[0];
 cellshape = drop([1], shape(y));
 defcell = genarray(cellshape, ' ');
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline int[*] rhoCII(char[.] x, int[*] y)
{  /* Character-vector reshape anything. */
   /* Left argument must be empty vector! */
  if( 0 != shape(x)[[0]]) {
    show(tochar("reshape domain error in rhoCII"));
  }
  z = y[ 0 * shape(y)];
  return(z);
}

inline char[.] rhoICC(int x, char[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoICC( [toi(x)],y);
 return(z);
}


inline int[.] takeIII(int x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline char[.,.] takeICC(int[.] x, char[.,.] y)
{ /* vector take matrix */
  return(take(toi(x),y));
}

inline int[*] dropIII(int x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.] takeBII(bool x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[*] dropIII(int[.] x, int[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[.]  rhoXCI(char[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.]  rhoXBI(bool[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline char[256] quadavXXC()
{ /* QUADav - system character set */
 z = with{
        ([0] <= [i] < [256]) : _toc_S_(i);
        } : genarray( [256], ' ');
 return(z);
}

inline int[.] comaBII(bool[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline char[+] combCCC(char[+] x, char[+] y)
{/* AxA first axis catenate. Ranks match */
 return(toC(x)++toC(y));
}

inline int[.] comaBII(bool x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline int[.] ugrdCCI(char[256] x, char[+] y, int QUADio)
{ /* Quadav-upgrade on character non-vector */
z = QUADio + UpgradeHeap(y);
 return( z);
}


inline bool sameDDB(double x, double y,double QUADct)
{ /* Scalar match scalar */
  z = eqDDB(toD(x), toD(y), QUADct);
 return(z);
}



inline char[*] indr(char[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),' ');
 z = with {
        (. <= iv <= .)
                : X[[I[iv]]];
        } : genarray(shape(I), defcell);
 return(z);
}





inline double[*] indr(double[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline bool[+] inds1(bool[+] X, int [+] I0, bool Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = BtoB(X);
 Y = Yin;

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=BtoB((Y));

 }

 return(z);
}



inline int[+] inds1(int[+] X, int [+] I0, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=ItoI((Y[[i0]]));

 }

 return(z);
}



inline int CommandLineArgvXBI(bool y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline int[.] slBII(bool[.] x, int[.] y)
{/* Boolean vector compress vector */
  zxrho = sum(toi(x));
  z = genarray([zxrho], 0);
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    if ( x[i]) {
      z[[zi]] = y[[i]];
      zi++;
    }
  return(z);
}

inline int[.] bslBII(bool[.] x, int[.] y)
{ /* Vector-vector expand */
 /* Stupid with-loops won't work here. */
 /* FIXME: Needs check that (+/x)= shape(y)[0] and x^.GE 0 */
 yi=0;
 z= genarray(shape(x),0);
 for (xi=0; xi<shape(x)[[0]]; xi++){
   if (toB(x[[xi]])) {
        z[[xi]]=y[[yi]];
        yi++;
   }
 }
 return(z);
}


inline bool[+] orslXBBQUICKSTOP(bool[+] y)
{ /* last axis reduce rank-2 or greater matrix w/quickstop */
  sy = shape(y);
  zrho = drop([-1], sy);
  z = with {
         (. <= iv <= .)
                : orslXBBQUICKSTOP(y[iv]);
        } : genarray(zrho, false);
  return(z);
}


inline int[.] plusbslXII(int[.] y)
{ /* Scan of vector */
/* This does the scan in the wrong direction, but since
 * we assume associative functions only, it should be ok.
 */
 size = shape(y);
 z = genarray(size,ItoI(0));
 if (0 != size[[0]]) {
        /* real work to do */
        z[[0]] = ItoI(y[[0]]); /* Not sure about the coercion... */
        for ( i=1; i<size[[0]]; i++) {
                z[[i]] = plusIII(ItoI(z[[i-1]]),ItoI(y[[i]]));
        }
  }
 return(z);
}


inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : DtoD(y[lim-iv]);
       } :  fold( plusDDD, ItoD(0));
  return(z);
}


inline int mpyXII(int y)
{ /* signum int/double */
   if( toI(0) == y) {
    z = 0;
  } else {
    if( toI(0) < y) {
      z = 1;
    } else {
      z = -1;
    }
  }
  return(z);
}

inline int maxIII(int x, int y)
{ /* x max y */
 return (max(ItoI(x),ItoI(y)));
}

inline int mpyBII(bool x, int y)
{ return(BtoI(x)*ItoI(y));
}

inline bool neCCB(char x, char y)
{/* A !=B on non-doubles */
 return(CtoC(x) != CtoC(y));
}

inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline int minIII(int x, int y)
{ /* x min y */
 return (min(ItoI(x),ItoI(y)));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline double mpyIDD(int x, double y)
{ return(ItoD(x)*DtoD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((DtoD(x) == DtoD(y)) || APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline int[+] maxIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : maxIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] maxIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : maxIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] mpyBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] mpyBII(bool[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : mpyBII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline bool[+] neCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
     ( . <= iv <= .) {
              yel = toC(y[iv]);
                    } : neCCB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] neCCB(char[+] x, char y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : neCCB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[+] barIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : barIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] barIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline double[+] mpyIDD(int x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : mpyDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] mpyIDD(int[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : mpyIDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] comaXCC(char[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] rotrXCC(char[.] y)
{ /* Vector reverse */
 n = shape(y);
 cell = ' ';
 z = with {
        ( . <= iv <= .)
                : y[(n-1)-iv];
        } : genarray(n, cell);
 return(z);
}

inline int[.] UpgradeHeap(char[+] y)
{
/*    Do APL upgrade of array y using heapsort.
      This is a sub-function shared by upgrade/downgrade/indexof, etc.
      This version adapted from the Sara Baase "Computer Algorithms"
      version of heapsort.
     Robert Bernecky 2006-11-14
     Knuth, Vol. III, pp. 145-148 gives a good example.
     APL model: (See workspace apex2003/wss/upgrade or
                 apex2003/wif/upgrade)
                Also UTGrade.dws
r{<-}upgradeHeap v;#io;N;heap
@ Upgrade vector using heapsort
#io{<-}0
N{<-}{rho}v
:if N{<=}1
  r{<-}{iota}N
:else
  heap{<-}MakeHeap(v)
  r{<-}(UnHeap(heap))
:endif
*/

 N = shape(y)[[0]];
 if (N <= 1)
        z = iota(N);
 else{
        heap = MakeHeap(y);
        z = UnHeap(heap,y);
 }
 return(z);
}


inline int[.] MakeHeap(char[+] v)
{ /* Build heap from array v. v has at least two elements */
/*
r{<-}MakeHeap v;i;n;heap;biggest
@ Build heap from v
@ We know v has at least two elements
N{<-}{rho}v
heap{<-}{iota}N
:for i :in {reverse}{iota}{floor}N{divide}2
  y FixHeap i,heap[i],n
:endfor
r{<-}heap
*/
 n = shape(v)[[0]];
 heap = iota(n);
 lim = n/2;
 for(i=lim-1; i>=0; i--) {
        heap = FixHeap(heap, v, i, heap[[i]], n);
 }
 return(heap);
}

inline int[.] UnHeap(int[.] heap, char[+]v)
{ /* Extract heap elements in top-to-bottom order */
  n = shape(v)[[0]];
  for(heapsize= n-1; heapsize>0; heapsize--){
        biggest = heap[[0]];
        heap = FixHeap(heap,v,0,heap[[heapsize]],heapsize);
        heap[[heapsize]] = biggest;
  }
 return(heap);
}

inline int[.] FixHeap(int[.] heap, char[+] v, int root,
        int heapitem, int heapsize)
{ /* Restore heap invariant: parent>= both children */
 vacant = root;
 lchild = 1+vacant+vacant;
 while( lchild < heapsize) {
        bigC = lchild;      /* Identify larger child, if any */
        rchild = lchild+1;
        if ((lchild<(heapsize-1))){
                li = heap[[lchild]];
                ri = heap[[rchild]];
                if ((GradeGT(v[[ri]],v[[li]])) ||
                        (match(v[[ri]], v[[li]])&&(ri>li))){ /* Stability */
                bigC = rchild; /* right child larger */
                }
        }
        /* parent vs big kid*/
        li = heap[[bigC]];
        if ((GradeGT( v[[li]], v[[heapitem]])) ||
                (match(v[[li]], v[[heapitem]]) &&(li>heapitem))) {
                        heap[[vacant]] = heap[[bigC]];
                        vacant = bigC;
                        lchild = 1+vacant+vacant;
        } else lchild = heapsize;   /* exitloop */
 }
 heap[[vacant]] = heapitem;
 return(heap);
}



inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline double[*] indrfr(int fr, double[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline double[*] indrfr0(double[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline double[*] indrfr(int fr, double[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0.0d);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int VectorRotateAmount(int x, int y)
{ /* Normalize x rotate for array of shape y on selected axis */
 /* normalize rotation count */

if ((0==x) || (0==y))
  z = 0;
else if (x>0)
        z = _mod_SxS_(x,y);
     else
        z = y - _mod_SxS_(abs(x),y);
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline bool orslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( orBBB, ItoB(0), ItoB(1));
  return(z);
}


inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline double mpyDDD(double x, double y)
{ return(DtoD(x)*DtoD(y));
}

inline bool orBBB(bool x, bool y)
{ return(BtoB(x)|BtoB(y));
}

inline bool GradeGT(char x, char y)
{ /* Char Comparator for upgrade */
 return(x>y);
}


inline bool GradeGT(char[+] x, char[+] y)
{ /* Char Array Comparator for upgrade */
  /* The ravels of the two arrays are compared.  */
 z = with {
       (0*shape(x) <= iv < shape(x))
                : x[iv] > y[iv];
        }: foldfix( &, true,false);
 return(z);
}

inline char[.,.] OVERCCC(char[.,.] A, char[.,.] B)
{ 
/*
 ?
*/
A_27=rhoXCI( A);
 A_28=comaBII([true,true],A_27);
 A_29=takeIII(-2,A_28);
 S_0=( A_29);
 A_31=rhoICC(A_29,A);
 A_0=( A_31);
 A_33=rhoXCI( B);
 A_34=comaBII([true,true],A_33);
 A_35=takeIII(-2,A_34);
 A_36=rhoICC(A_35,B);
 B_0=( A_36);
 A_38=rhoXCI( A_36);
 /* dsf Check needed */
A_39=maxIII(S_0,A_38);
 /* dsf Check needed */
A_40=mpyBII([false,true],A_39);
S_1=( A_40);
 A_42=rhoXCI( B_0);
 /* dsf Check needed */
A_43=maxIII(S_1,A_42);
 A_44=takeICC(A_43,B_0);
 A_45=rhoXCI( A_0);
 /* dsf Check needed */
A_46=maxIII(S_1,A_45);
 A_47=takeICC(A_46,A_0);
 A_48=combCCC(A_47,A_44);
 Z_0=( A_48);
 return(Z_0);
}

inline int[.] MATIOTACCI(char[.,.] A, char[.,.] B,int QUADio)
{ 
/*
 ?
*/
A_49=OVERCCC(A,B);
 C_0=( A_49);
 A_51=quadavXXC( );
 A_53=ugrdCCI(A_51,C_0,QUADio);
 P_0=( A_53);
 A_56= ABC(toi(A_53)-QUADio,shape(C_0)[0]);
A_58=indr(C_0,A_56);
 C_1=( A_58);
 A_60=rot1ICC(-1,C_1);
 /* dsf clique */
A_62=neCCB(C_1,A_60);
 A_63=orslXBBQUICKSTOP( A_62);
 F_0=( A_63);
 A_68=rhoXBI( F_0);
 A_69=mpyXII( A_68);
 A_71=iotaXII( A_69,QUADio);
 A_72= ABC(toi(A_71)-QUADio,shape(F_0)[0]);
A_74=inds1(F_0,A_72,true);
F_1=( A_74);
 A_76=slBII(F_1,P_0);
 T_0=( A_76);
 A_78=comaBII(false,T_0);
 A_79=dropIII(-1,A_78);
 /* dsf Check needed */
A_80=barIII(T_0,A_79);
 N_0=( A_80);
 A_82=bslBII(F_1,N_0);
 A_83=plusbslXII( A_82);
 Z_0=( A_83);
 A_88= ABC(toi(P_0)-QUADio,shape(Z_0)[0]);
A_90=inds1(Z_0,A_88,Z_0);
 Z_1=( A_90);
 A_92=rhoXCI( A);
 A_93=comaBII([true,true],A_92);
 A_94=takeIII(-2,A_93);
 A_95=takeBII(true,A_94);
 R_0=( A_95);
 A_97=dropIII(R_0,Z_1);
 Z_2=( A_97);
 A_99=rhoXCI( A);
 A_100=rhoCII([:char],A_99);
 /* dsf scalar(s) */
A_101=minIII(Z_2,A_100);
 Z_3=( A_101);
 return(Z_3);
}

int main()
{ 
/*
 ?
*/
k=CommandLineArgvXBI( true);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADrl_1=( 16807);
 A_64=iotaXII( 95,QUADio_1);
 /* dsf scalar(s) */
A_65=plusIII(32,A_64);
 A_67=quadavXXC( );
 A_66= ABC(toi(A_65)-QUADio_1,shape(A_67)[0]);
A_69=indr(A_67,A_66);
A_70=comaIII(k,20);
 A_71=rhoICC(A_70,A_69);
 n_0=( A_71);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_75=takeICC([100, 20],n_0);
 A_76=rotrXCC( A_75);
 A_77=combCCC(n_0,A_76);
 A_79=MATIOTACCI(n_0,A_77,QUADio_1);
 r_0=( A_79);
 A_81=rhoXII( r_0);
 A_83=iotaXII( A_81,QUADio_1);
 /* dsf Scalar & clique */
A_84=barDDD(0.5,0.5);
 /* dsf scalar(s) */
A_85=plusDID(A_84,A_83);
 /* dsf Check needed */
A_86=mpyIDD(r_0,A_85);
 A_87=plusslXDDFOLD( A_86);
 r_1=( A_87);
 A_94=quadXDD( A_87,QUADpp_1,QUADpw_1);
 A_95=rhoICC(20,n_0);
 A_97=MATIOTACLONE3CCI(n_0,A_95,QUADio_1);
 A_100=quadXII( A_97,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_101=plusDID(r_1,A_100);
 r_2=( A_101);
 /* dsf scalar(s) */
A_103=barDDD(4180987299974.5,0.5);
 A_104= ABC(toi(false)-QUADio_1,shape(r_2)[0]);
A_106=r_2[[A_104]];
 A_108=sameDDB(A_106,A_103,QUADct_0);
 /* dsf scalar(s) */
A_109=barBBI(true,A_108);
 r_3=( A_109);
 A_113=quadXII( A_109,QUADpp_1,QUADpw_1);
 return(r_3);
}

inline int[.] MATIOTACLONE3CCI(char[.,.] A, char[.] B,int QUADio)
{ 
/*
 ?
*/
A_50=OVERCLONE4CCC(A,B);
 C_0=( A_50);
 A_52=quadavXXC( );
 A_54=ugrdCCI(A_52,C_0,QUADio);
 P_0=( A_54);
 A_57= ABC(toi(A_54)-QUADio,shape(C_0)[0]);
A_59=indr(C_0,A_57);
 C_1=( A_59);
 A_61=rot1ICC(-1,C_1);
 /* dsf clique */
A_63=neCCB(C_1,A_61);
 A_64=orslXBBQUICKSTOP( A_63);
 F_0=( A_64);
 A_69=rhoXBI( F_0);
 A_70=mpyXII( A_69);
 A_72=iotaXII( A_70,QUADio);
 A_73= ABC(toi(A_72)-QUADio,shape(F_0)[0]);
A_75=inds1(F_0,A_73,true);
F_1=( A_75);
 A_77=slBII(F_1,P_0);
 T_0=( A_77);
 A_79=comaBII(false,T_0);
 A_80=dropIII(-1,A_79);
 /* dsf Check needed */
A_81=barIII(T_0,A_80);
 N_0=( A_81);
 A_83=bslBII(F_1,N_0);
 A_84=plusbslXII( A_83);
 Z_0=( A_84);
 A_89= ABC(toi(P_0)-QUADio,shape(Z_0)[0]);
A_91=inds1(Z_0,A_89,Z_0);
 Z_1=( A_91);
 A_93=rhoXCI( A);
 A_94=comaBII([true,true],A_93);
 A_95=takeIII(-2,A_94);
 A_96=takeBII(true,A_95);
 R_0=( A_96);
 A_98=dropIII(R_0,Z_1);
 Z_2=( A_98);
 A_100=rhoXCI( A);
 A_101=rhoCII([:char],A_100);
 /* dsf scalar(s) */
A_102=minIII(Z_2,A_101);
 Z_3=( A_102);
 return(Z_3);
}

inline char[.,.] OVERCLONE4CCC(char[.,.] A, char[.] B)
{ 
/*
 ?
*/
A_27=rhoXCI( A);
 A_28=comaBII([true,true],A_27);
 A_29=takeIII(-2,A_28);
 S_0=( A_29);
 A_31=rhoICC(A_29,A);
 A_0=( A_31);
 A_33=rhoXCI( B);
 A_34=comaBII([true,true],A_33);
 A_35=takeIII(-2,A_34);
 A_36=rhoICC(A_35,B);
 B_0=( A_36);
 A_38=rhoXCI( A_36);
 /* dsf Check needed */
A_39=maxIII(S_0,A_38);
 /* dsf Check needed */
A_40=mpyBII([false,true],A_39);
S_1=( A_40);
 A_42=rhoXCI( B_0);
 /* dsf Check needed */
A_43=maxIII(S_1,A_42);
 A_44=takeICC(A_43,B_0);
 A_45=rhoXCI( A_0);
 /* dsf Check needed */
A_46=maxIII(S_1,A_45);
 A_47=takeICC(A_46,A_0);
 A_48=combCCC(A_47,A_44);
 Z_0=( A_48);
 return(Z_0);
}


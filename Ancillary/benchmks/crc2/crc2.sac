use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3014.dws2013-07-29 16:36:29.048 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barXII(int y)
{ return(-y);
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline bool[+] andBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : andBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] neBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : neBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[+] andBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : andBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline int[+] modIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : modIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[+] eqBIB(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[.] rotrXBB(bool[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline bool[+] rotrXBB(bool[+] y)
{/* Last axis reverse on rank>1 */
  axis = _dim_A_( y) - 1;
  z = Array::reverse( axis, y);
  return( z);
}

inline bool[+] rot1XBB(bool[+] y)
{ /* First axis reverse on anything */
  z = Array::reverse( 0, y);
  return( z);
}

inline bool[+] tranXBB(bool[+] y)
{ /* General transpose */
        z = TRANSPOSE(y);
        return(z);
}


inline bool[.,.] tranXBB(bool[.,.] y)
{ /* Transpose on rank-2 */
        z = { [i,j] -> y[j,i] };
        return(z);
}

inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[*] tranIBB(int[.] x, bool[*] y, int QUADio)
{ /* General case of dyadic transpose  */
/* Someone has to validate x here! FIXME */
 nx = toi(x) - QUADio;
 shpy = shape(y);
 wts = drop([1],shpy)++[1];
 rankz = (take([-1], nx))[0];

 /* times scan the hard way */
 for(i=shape(shpy)[0] - 2; i>=0; i--) {
  wts[i] = wts[i+1]*wts[i];
  rankz = max(rankz,nx[i]);
 }
 rankz = rankz + 1;

 shpz = genarray([rankz], 1 + prod(shape(y)));  /* all overwritten */
 cwts = shpz * 0;

 for(i=dim(y)-1; i>=0; i--){
   j = nx[i];
   shpz[j] = min( shpy[i], shpz[j]);
   cwts[j] = cwts[j]+wts[i];
 }

 cp = CartProdPlus(cwts, shpz);
 ry = comaXBB(y);
 z = with {
   (. <= iv <= .)
     : ry[[cp[iv]]];
   } : genarray(shape(cp), false);
 z = reshape(shpz,z);
 return(z);
}

inline int[.] CartProdPlus(int[.] weights, int[.] lengths)
{ /* Cartesian product, sum-like, for weights+each iota each lengths */
  /* Weight and length vectors must be same length, and non-empty */
 s = shape(weights)[[0]];
 z = (0 == s) ?  s :  weights[[0]] * iotaXII(lengths[[0]],0);
  for(i=1; i<s; i++){
   t = weights[[i]] * iotaXII(lengths[[i]],0);
   z = with {
        (. <= iv <= .)
                : z[iv] + t;
        } : genarray(shape(z), t);
   z = comaXII(z);
  }
 return(z);
}



inline int[.] rhoIII(int x, int[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIII( [toi(x)],y);
 return(z);
}


inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline int[*] iotaCCIQUADAV(char[256] x, char[+] y,int QUADio)
{ /* QUADav iota character non-scalar */
 z = with {
        (. <= iv <= .)
                : toi(y[iv]);
        } : genarray(shape(y), 0);
 return(z+QUADio);
}

inline bool[.] rhoIBB(int x, bool[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIBB( [toi(x)],y);
 return(z);
}


inline char[.] rhoICC(int x, char[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoICC( [toi(x)],y);
 return(z);
}


inline bool[.] takeIBB(int x, bool[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline bool[*] dropIBB(int x, bool[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.]  rhoXBI(bool[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.]  rhoXCI(char[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline char[256] quadavXXC()
{ /* QUADav - system character set */
 z = with{
        ([0] <= [i] < [256]) : _toc_S_(i);
        } : genarray( [256], ' ');
 return(z);
}

inline bool[.] comaBBB(bool x, bool[.] y)
{/* SxV catenate first (or last) axis */
 return([toB(x)]++toB(y));
}

inline bool[+] combBBBLG(bool[+] x, bool[+] y)
{/* AxA first axis catenate. Left rank greater */
 return(toB(x)++toB([y]));
}
inline bool[.] comaBBB(bool[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toB(x)++toB(y));
}

inline int dtakIBI(int x, bool[.] y)
{ /* Scalar basevalue vector */
 ycols=shape(y);
 weights = genarray(ycols, toI(1));
 for (i=ycols[[0]]-2; i>=0; i--)
        weights[[i]] = weights[[i+1]]*toI(x);
 /* Now, we just do weights +.* y */
 z = with {
        ([0] <= iv < ycols)
                : weights[iv] * toI(y[iv]);
        } : fold(+, 0);
 return(z);
}

inline bool[.] utakIIB(int[.] x, int y)
{ /* Vector-of-twos represent scalar */
/*
*/
   cell = 0;
   k = shape(x)[[0]]-1;
   z = with {
        (. <= iv <= .)
                : BitAND(1,BitShiftRight(k-iv[0],toi(y)));
        } : genarray(shape(x), cell);
  return(toB(z));
}

inline bool[+] utakIIB(int[.] x, int[+] y)
{ /* Vector-of-twos represent non-scalar */
/*
   % This could be any mix of powers-of-two with a bit of work.
   % The guts of represent on Booleans
*/
 cell = genarray(shape(x),false);
 yt = TRANSPOSE(y);
 z = with {
        (. <= iv <= .)
                : utakIIB(x, yt[iv]);
        } : genarray(shape(yt), cell);
 return(TRANSPOSE(z));
}





inline int[.] utakIII(int[.] x, int y)
{ /* Non-floating Vector represent scalar */
  /* Taken from ISO Extended APL standard Draft N93.03, page 155 */
  wts = genarray(shape(x),toI(1));
  for(i=shape(x)[[0]]-2; i>=0; i--)
        wts[[i]] = wts[[i+1]] * toI(x[[i+1]]);
  z = genarray(shape(x),0);
  cy = toI(y);
  for(i=shape(x)[[0]]-1; i>=0; i--){
        z[[i]] = modIII(toI(x[[i]]),cy/wts[[i]]);
        /* Must use fuzz-less call to mod!! */
        /* Represent is NOT fuzzy (SAPL Ref Man p.6-47, 1991 */
        cy = cy - z[[i]] * wts[[i]];
  }
 return(z);
}



inline int[*] dtakIBI(int x, bool[+] y)
{ /* Scalar basevalue rank>1 */
 yt = TRANSPOSE(y); /* Dumb, but easy */
 frameshape = drop([-1],shape(yt));
 z = with {
        (. <= iv <= .)
                : dtakIBI(x, yt[iv]);
        } : genarray(frameshape, 0);
 return(TRANSPOSE(z));
}



inline double dtakDBD(double x, bool[.] y)
{ /* Scalar basevalue vector */
 ycols=shape(y);
 weights = genarray(ycols, toD(1));
 for (i=ycols[[0]]-2; i>=0; i--)
        weights[[i]] = weights[[i+1]]*toD(x);
 /* Now, we just do weights +.* y */
 z = with {
        ([0] <= iv < ycols)
                : weights[iv] * toD(y[iv]);
        } : fold(+, 0.0d);
 return(z);
}

inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline bool[*] indr(bool[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline bool[*] indr(bool[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}




inline char[*] indr(char[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),' ');
 z = with {
        (. <= iv <= .)
                : X[[I[iv]]];
        } : genarray(shape(I), defcell);
 return(z);
}





inline bool[+] inds1(bool[+] X, int [+] I0, bool Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = BtoB(X);
 Y = Yin;

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=BtoB((Y));

 }

 return(z);
}



inline int[+] plusslXBIFOLD(bool[+] y)
{ /* last axis reduce rank-2 or greater matrix w/folding */
  sy = shape(y);
  zrho = drop([-1], sy);
  z = with {
         (. <= iv <= .)
                : plusslXBIFOLD(y[iv]);
        } : genarray(zrho, 0);
  return(z);
}


inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool neBBB(bool x, bool y)
{/* A !=B on non-doubles */
 return(BtoB(x) != BtoB(y));
}

inline int modIII(int x, int y)
{ /* SxS residue (aka modulo) */
  /* (x residue y) <-->   y-x times floor y divide x + 0 = x  */
  /* See model residueI in workspace UTDScalarI.dws */
  x = ItoI(x);
  y = ItoI(y);
  if( 0 != x) {
    q = y / x;
    z = y - ( x * q);
  } else {
    z = y;
  }

  if( z != 0) {
    if( mpyXII( x) != mpyXII( y)) {
      z = z + x;
    }
  }
 return(z);
}


inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool[+] neBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : neBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] neBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : neBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] andBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : andBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline bool[*] indrfr(int fr, bool[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline bool[*] indrfr0(bool[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline bool[*] indrfr(int fr, bool[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,false);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline bool[+] TRANSPOSE(bool[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), false);
  return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline int[+] TRANSPOSE(int[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), 0);
  return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int plusslXBIFOLD(bool[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : BtoI(y[lim-iv]);
       } :  fold( plusIII, ItoI(0));
  return(z);
}


inline int mpyXII(int y)
{ /* signum int/double */
   if( toI(0) == y) {
    z = 0;
  } else {
    if( toI(0) < y) {
      z = 1;
    } else {
      z = -1;
    }
  }
  return(z);
}

inline int Bool2IntXBI(bool[.] y )
{ 
/*
 ?
*/
A_19=dtakIBI(2,y);
r_0=( A_19);
 return(r_0);
}

inline bool[.] Int2BoolXIB(int y )
{ 
/*
 ?
*/
A_20=rhoIII(32,2);
 A_21=utakIIB(A_20,y);
r_0=( A_21);
 return(r_0);
}

inline bool[.,.] table32XBB(bool[.] p ,int QUADio)
{ 
/*
 ?
*/
A_53=rotrXBB( p);
 A_54=takeIBB(64,A_53);
 p_0=( A_54);
 A_56=rhoIBB([1, 64],A_54);
 g_0=( A_56);
 A_59=iotaXII( 7,QUADio);
 A_CTR60_= 0;
A_CTR60z_ = (shape(A_59)[[0]])-1;
g_2=toB(g_0);
for(; A_CTR60_ <= A_CTR60z_; A_CTR60_++){
j_0 = A_59[[A_CTR60_]];
 A_63=rhoXBI( g_2);
 A_62= ABC(toi(false)-QUADio,shape(A_63)[0]);
A_65=A_63[[A_62]];
 /* dsf scalar(s) */
A_66=plusIII(-1,A_65);
 A_68= ABC(toi(A_66)-QUADio,shape(g_2)[0]);
A_70=g_2[[A_68]];
 gl_0=( A_70);
 A_72= ABC(toi(31)-QUADio,shape(gl_0)[0]);
A_74=gl_0[[A_72]];
 gl31_0=( A_74);
 /* dsf scalar(s) */
A_76=andBBB(gl31_0,p_0);
 A_77=comaBBB(false,gl_0);
 A_78=dropIBB(-1,A_77);
 /* dsf Check needed */
A_80=neBBB(A_78,A_76);
 A_81=combBBBLG(g_2,A_80);
 g_2=( A_81);
 }
 A_84=rotrXBB( g_2);
 A_85=rot1XBB( A_84);
 g_3=( A_85);
 A_88=iotaXII( 256,QUADio);
 A_89=utakIIB([2, 2, 2, 2, 2, 2, 2, 2],A_88);
 A_90=rhoIBB([32, 8, 256],A_89);
 A_91=tranXBB( A_90);
 i_0=( A_91);
 A_94=iotaXII( 32,QUADio);
 /* dsf scalar(s) */
A_95=plusIII(32,A_94);
 A_96= ABC(toi(A_95)-QUADio,shape(g_3)[1]);
A_99=indrfr(1,g_3,A_96);
 A_100=rhoIBB([256, 8, 32],A_99);
 /* dsf Check needed */
A_101=andBBB(i_0,A_100);
 r_0=( A_101);
 A_104=tranIBB([0, 2, 1],r_0,QUADio);
 A_105=plusslXBIFOLD( A_104);
 /* dsf scalar(s) */
A_110=modIII(2,A_105);
 /* dsf scalar(s) */
A_112=eqBIB(true,A_110);
 r_1=( A_112);
 return(r_1);
}

inline bool[.] tobinXCB(char[.] c ,int QUADio)
{ 
/*
 ?
*/
A_20=quadavXXC( );
 A_23=iotaCCIQUADAV(A_20,c,QUADio);
A_24=rhoIII(8,2);
 A_25=utakIIB(A_24,A_23);
 A_26=tranXBB( A_25);
 A_27=comaXBB( A_26);
 r_0=( A_27);
 return(r_0);
}

inline int CShiftlIII(int x, int y)
{ 
/*
 ?
*/
A_21=rhoIBB(y,false);
 A_22=Int2BoolXIB( x);
 A_23=comaBBB(A_22,A_21);
A_24=dropIBB(y,A_23);
 A_25=Bool2IntXBI( A_24);
r_0=( A_25);
 return(r_0);
}

inline int CShiftrIII(int x, int y)
{ 
/*
 ?
*/
A_20=Int2BoolXIB( x);
 A_21=barXII( y);
 A_22=dropIBB(A_21,A_20);
A_23=Bool2IntXBI( A_22);
r_0=( A_23);
 return(r_0);
}

inline int CxorIII(int x, int y)
{ 
/*
 ?
*/
A_20=Int2BoolXIB( y);
 A_21=Int2BoolXIB( x);
 /* dsf clique */
A_23=neBBB(A_21,A_20);
A_24=Bool2IntXBI( A_23);
 r_0=( A_24);
 return(r_0);
}

inline char[.] crcint32ICC(int[.] tab, char[.] v ,int QUADio)
{ 
/*
 ?
*/
/* dsf Scalar & clique */
A_41=barIII(2,2);
 q_0=( A_41);
 A_43=quadavXXC( );
 A_46=iotaCCIQUADAV(A_43,v,QUADio);
 vb_0=( A_46);
 A_48=rhoXCI( v);
 A_50=iotaXII( A_48,QUADio);
 A_CTR51_= 0;
A_CTR51z_ = (shape(A_50)[[0]])-1;
q_2=toI(q_0);
for(; A_CTR51_ <= A_CTR51z_; A_CTR51_++){
i_0 = A_50[[A_CTR51_]];
 A_53= ABC(toi(i_0)-QUADio,shape(vb_0)[0]);
A_55=vb_0[[A_53]];
 A_56=CShiftrIII(q_2,24);
 A_57=CxorIII(A_56,A_55);
 t_0=( A_57);
 A_59= ABC(toi(t_0)-QUADio,shape(tab)[0]);
A_61=tab[[A_59]];
 A_62=CShiftlIII(q_2,8);
 A_63=CxorIII(A_62,A_61);
 q_2=( A_63);
 }
 A_66=rhoIII(4,256);
 A_67=utakIII(A_66,q_2);
 A_69=quadavXXC( );
 A_68= ABC(toi(A_67)-QUADio,shape(A_69)[0]);
A_71=indr(A_69,A_68);
 p_0=( A_71);
 return(p_0);
}

inline bool[.] crcintXIB(int len,int QUADio)
{ 
/*
 ?
*/
A_36=rhoIBB(33,false);
 crcloc32_0=( A_36);
 A_38= ABC(toi([0, 5, 11, 17, 23, 28, 32])-QUADio,shape(crcloc32_0)[0]);
A_40=inds1(crcloc32_0,A_38,true);
crcloc32_1=( A_40);
 A_42=quadavXXC( );
 A_43=rhoICC(len,A_42);
 cv_0=( A_43);
 A_46=table32XBB( crcloc32_1,QUADio);
 A_47=tranXBB( A_46);
 A_48=dtakIBI(2,A_47);
 t32_0=( A_48);
 A_51=crcint32ICC(t32_0,cv_0,QUADio);
 A_53=tobinXCB( A_51,QUADio);
 r_0=( A_53);
 return(r_0);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 500000);
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 QUADct_1=( 1.0e-14);
 A_64=crcintXIB( n_0,QUADio_1);
 r_0=( A_64);
 A_68=quadXBB( A_64,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_69=barDDD(3.5,1.5);
 A_70=dtakDBD(A_69,r_0);
 r_1=( A_70);
 A_74=quadXDD( A_70,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_75=barDDD(2893251364.5,0.5);
 /* dsf scalar(s) */
A_77=eqDDB(r_1,A_75,QUADct_1);
/* dsf scalar(s) */
A_78=barBBI(true,A_77);
 r_2=( A_78);
 A_82=quadXII( A_78,QUADpp_1,QUADpw_1);
 return(r_2);
}


module sdyn4AKD;
export {sdyn4AKD_testXII};

// Compiled by APEX Version: FIXME!! 2021-06-27 14:58:13.474
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline bool[+] notXBB(bool[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : notXBB(toB(y[iv]));
        } : genarray(shape(y), false);
  return(z);
}

inline int plusBII(bool x, int y)
{ return(BtoI(x)+ItoI(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline bool[+] eqCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
     ( . <= iv <= .) {
              yel = toC(y[iv]);
                    } : eqCCB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[+] eqCCB(char[+] x, char[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqCCB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] orBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : orBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline int[+] barIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : barIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] mpyIBI(int x, bool[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIBI(int[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusIBI(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline char[.,.] tranXCC(char[.,.] y)
{ /* Transpose on rank-2 */
        z = { [i,j] -> y[j,i] };
        return(z);
}

inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] rhoICC(int x, char[*] y)
{ /* [Scalar reshape non-scalar] (to vector) */
 z = rhoICC( [toi(x)],y);
 return(z);
}


inline bool[.] rhoIBB(int x, bool[*] y)
{ /* [Scalar reshape non-scalar] (to vector) */
 z = rhoIBB( [toi(x)],y);
 return(z);
}


inline int iotaBBI(bool[.] x, bool y,int QUADio)
{ /* Non-fuzzy Vector iota Scalar */
 sx = shape(x)[[0]];
 z = sx;
 for(i=0; i<sx; i++) {
        if (toB(x[[i]]) == toB(y)){
                z = i;
                i = sx;
        }
 }
 return(z+QUADio);
}

inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline int iotaCCI(char[.] x, char y,int QUADio)
{ /* Non-fuzzy Vector iota Scalar */
 sx = shape(x)[[0]];
 z = sx;
 for(i=0; i<sx; i++) {
        if (toC(x[[i]]) == toC(y)){
                z = i;
                i = sx;
        }
 }
 return(z+QUADio);
}

inline int[*] rhoCII(char[.] x, int[*] y)
{  /* Character-vector reshape anything. */
   /* Left argument must be empty vector! */
  if( 0 != shape(x)[[0]]) {
    show(tochar("reshape domain error in rhoCII"));
  }
  z = y[ 0 * shape(y)];
  return(z);
}

inline char[*] dropBCC(bool x, char[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline char[.] takeICC(int x, char[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline char[*] dropICC(int[.] x, char[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline bool[.] takeIBB(int x, bool[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline char[*] dropICC(int x, char[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.] takeBII(bool x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.]  rhoXCI(char[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline int[.]  rhoXBI(bool[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline char[.] comaCCC(char x, char[.] y)
{/* SxV catenate first (or last) axis */
 return([toC(x)]++toC(y));
}

inline char[.] comaCCC(char[.] x, char[.] y)
{ /* VxV catenate first or last axis */
 return(toC(x)++toC(y));
}

inline int[.] comaBII(bool x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline char[*] indr(char[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline char[*] indr(char[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),' ');
 z = with {
        (. <= iv <= .)
                : X[[I[iv]]];
        } : genarray(shape(I), defcell);
 return(z);
}





inline bool[*] indr(bool[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}




inline bool[*] indr(bool[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline bool[*] indr(bool[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),false);
 z = with {
        (. <= iv <= .)
                : X[[I[iv]]];
        } : genarray(shape(I), defcell);
 return(z);
}





inline bool[+] inds0x(bool[+] X, int  I0, bool Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = BtoB(X);
 Y = genarray(take([-1],shape(X)),Yin);

 
 z[[I0]]=BtoB((Y));

 
 return(z);
}



inline bool[+] indsx0(bool[+] X, int  I1, bool Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = BtoB(X);
 Y = Yin;

 for(i0=0; i0<shape(X)[[0]]; i0++){

 z[[i0,I1]]=BtoB((Y));

 }

 return(z);
}



inline bool[+] indsx0(bool[+] X, int  I1, bool[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = BtoB(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){

 z[[i0,I1]]=BtoB((Y[[i0]]));

 }

 return(z);
}



inline bool[+] inds0x(bool[+] X, int  I0, bool[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = BtoB(X);
 
 z[[I0]]=BtoB((Y));

 
 return(z);
}



inline bool[+] inds0(bool[+] X, int  I0, bool Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = BtoB(X);
 Y = Yin;

 
 z[[I0]]=BtoB((Y));

 
 return(z);
}



inline char[+] inds1(char[+] X, int [+] I0, char Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = CtoC(X);
 Y = Yin;

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=CtoC((Y));

 }

 return(z);
}



inline int CommandLineArgvXBI(bool y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline int[*] jotdotplusIII(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0);
 z = with {
        (. <= iv <= .) {
         xitem = toI(x[iv]);
        } : plusIII(xitem, toI(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline char[.] slBCC(bool[.] x, char[.] y)
{/* Boolean vector compress vector */
  zxrho = sum(toi(x));
  z = genarray([zxrho], ' ');
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    if ( x[i]) {
      z[[zi]] = y[[i]];
      zi++;
    }
  return(z);
}

inline int[.] slBII(bool[.] x, int[.] y)
{/* Boolean vector compress vector */
  zxrho = sum(toi(x));
  z = genarray([zxrho], 0);
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    if ( x[i]) {
      z[[zi]] = y[[i]];
      zi++;
    }
  return(z);
}

inline bool[.] andbslXBB(bool[.] y)
{ /* Scan of vector */
/* This does the scan in the wrong direction, but since
 * we assume associative functions only, it should be ok.
 */
 size = shape(y);
 z = genarray(size,ItoB(1));
 if (0 != size[[0]]) {
        /* real work to do */
        z[[0]] = BtoB(y[[0]]); /* Not sure about the coercion... */
        for ( i=1; i<size[[0]]; i++) {
                z[[i]] = andBBB(BtoB(z[[i-1]]),BtoB(y[[i]]));
        }
  }
 return(z);
}


inline bool orslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( orBBB, ItoB(0), ItoB(1));
  return(z);
}


inline bool notXBB(bool y)
{ /* Boolean NOT */
  return(!toB(y));
}

inline bool eqCCB(char x, char y)
{ /* A=B on non-doubles */
 return(CtoC(x) == CtoC(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool orBBB(bool x, bool y)
{ return(BtoB(x) | BtoB(y));
}

inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline int plusIBI(int x, bool y)
{ return(ItoI(x)+BtoI(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqCCB(char[+] x, char y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqCCB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] orBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : orBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] orBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : orBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[+] plusIBI(int x, bool[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIBI(int[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIBI(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline char[.] comaXCC(char[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline bool[*] indrfr(int fr, bool[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline bool[*] indrfr0(bool[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline bool[*] indrfr(int fr, bool[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,false);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline char[.] MakeArgsXIC(int n )
{ 
/*
 ?
*/
A_31=rhoICC(n,['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']);
s_0=( A_31);
 A_33=rhoIBB(n,[false,false,true]);
 b_0=( A_33);
 A_35=slBCC(b_0,s_0);
 s1_0=( A_35);
 A_37=notXBB( b_0);
 A_38=slBCC(A_37,s_0);
 s2_0=( A_38);
 A_40=comaCCC('/',s2_0);
 A_41=comaCCC(s1_0,A_40);
 A_42=comaCCC('/',A_41);
 A_43=comaCCC(s_0,A_42);
 r_0=( A_43);
 return(r_0);
}

inline bool[.] SDyn4CCB(char[.] s, char[.] y,int QUADio)
{ 
/*
 ?
*/
A_59=dropBCC(true,y);
 A_60= ABC(toi(false)-QUADio,shape(y)[0]);
A_62=y[[A_60]];
 // dsf scalar(s)
A_64=eqCCB(A_62,A_59);
 A_67=iotaBBI(A_64,true,QUADio);
 // dsf scalar(s)
A_68=plusBII(true,A_67);
 b_0=( A_68);
 A_70=takeICC(b_0,y);
 A_71=dropBCC(true,A_70);
 si_0=( A_71);
 A_73=rhoXCI( si_0);
 // dsf scalar(s)
A_74=plusIII(2,A_73);
 A_75=dropICC(A_74,y);
 sj_0=( A_75);
 A_77=comaCCC(' ',s);
 sp_0=( A_77);
 A_79=rhoXCI( sj_0);
 // dsf scalar(s)
A_80=plusBII(true,A_79);
 A_82=iotaXII( A_80,QUADio);
 A_83=rhoXCI( si_0);
 // dsf scalar(s)
A_84=plusBII(true,A_83);
 A_86=iotaXII( A_84,QUADio);
 A_87=jotdotplusIII(A_86,A_82);
 A_94= ABC(toi(A_87)-QUADio,shape(sp_0)[0]);
A_96=indr(sp_0,A_94);
 m_0=( A_96);
 A_98=comaCCC(' ',si_0);
 A_99=rhoXCI( m_0);
 A_100=rotrXII( A_99);
 A_101=rhoICC(A_100,A_98);
 A_102=tranXCC( A_101);
 // dsf Check needed
A_104=eqCCB(m_0,A_102);
 A_105=comaCCC(' ',sj_0);
 A_106=rhoXCI( m_0);
 A_107=rhoICC(A_106,A_105);
 // dsf Check needed
A_109=eqCCB(m_0,A_107);
 // dsf Check needed
A_110=orBBB(A_109,A_104);
 m_1=( A_110);
 b_1=( A_110);
 A_114= ABC(toi(false)-QUADio,shape(b_1)[0]);
A_116=inds0x(b_1,A_114,false);
 b_2=( A_116);
 A_118= ABC(toi(false)-QUADio,shape(b_2)[1]);
A_121=indsx0(b_2,A_118,false);
 b_3=( A_121);
 A_123=comaXBB( b_3);
 b_4=( A_123);
 A_125=rhoXBI( b_4);
 A_127=iotaXII( A_125,QUADio);
 A_128=slBII(b_4,A_127);
 b_5=( A_128);
 A_130= ABC(toi(false)-QUADio,shape(m_1)[1]);
A_133=indrfr(1,m_1,A_130);
 A_134=andbslXBB( A_133);
 A_138= ABC(toi(false)-QUADio,shape(m_1)[1]);
A_141=indsx0(m_1,A_138,A_134);
 m_2=( A_141);
 A_144= ABC(toi(false)-QUADio,shape(m_2)[0]);
A_146=m_2[[A_144]];
 A_147=andbslXBB( A_146);
 A_152= ABC(toi(false)-QUADio,shape(m_2)[0]);
A_154=inds0x(m_2,A_152,A_147);
 m_3=( A_154);
 A_156=comaXBB( m_3);
 m_4=( A_156);
 A_158=rhoXCI( sj_0);
 A_159=comaBII(false,A_158);
 // dsf scalar(s)
A_160=plusBII(true,A_159);
 d_0=( A_160);
 A_162=rhoXII( b_5);
 A_164=iotaXII( A_162,QUADio);
 A_CTR165_= 0;
A_CTR165z_ = (shape(A_164)[[0]])-1;
m_6=toB(m_4);
for(; A_CTR165_ <= A_CTR165z_; A_CTR165_++){
i_0 = A_164[[A_CTR165_]];
 A_167= ABC(toi(i_0)-QUADio,shape(b_5)[0]);
A_169=b_5[[A_167]];
 j_0=( A_169);
 // dsf scalar(s)
A_171=barIII(j_0,d_0);
 A_172= ABC(toi(A_171)-QUADio,shape(m_6)[0]);
A_174=indr(m_6,A_172);
 A_175=orslXBBQUICKSTOP( A_174);
 A_179= ABC(toi(j_0)-QUADio,shape(m_6)[0]);
A_181=inds0(m_6,A_179,A_175);
 m_6=( A_181);
 }
 A_184=takeIBB(-1,m_6);
 r_0=( A_184);
 return(r_0);
}

inline int BenchSCSXII(int n ,int QUADio)
{ 
/*
 ?
*/
A_32=MakeArgsXIC( n);
 s_0=( A_32);
 A_36=iotaCCI(s_0,'/',QUADio);
 A_37=dropICC(A_36,s_0);
 ss_0=( A_37);
 A_41=iotaCCI(s_0,'/',QUADio);
 A_42=takeICC(A_41,s_0);
 s_1=( A_42);
 A_45=SDyn4CCB(s_1,ss_0,QUADio);
 r_0=( A_45);
 A_47=rhoXCI( s_1);
 A_48=takeBII(true,A_47);
 // dsf scalar(s)
A_49=plusIII(-1,A_48);
 A_50= ABC(toi(A_49)-QUADio,shape(s_1)[0]);
A_52=inds1(s_1,A_50,'?');
s_2=( A_52);
 A_55=SDyn4CCB(s_2,ss_0,QUADio);
 // dsf scalar(s)
A_56=mpyIBI(10,r_0);
 // dsf Scalar & clique
A_57=plusIBI(A_56,A_55);
 A_58=rhoCII([:char],A_57);
 r_1=( A_58);
 return(r_1);
}

inline int sdyn4AKD_testXII()
{ 
/*
 ?
*/
n=CommandLineArgvXBI( true);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_50=BenchSCSXII( n,QUADio_1);
 r_0=( A_50);
 A_54=quadXII( r_0,QUADpp_1,QUADpw_1);
 // dsf scalar(s)
A_56=eqIIB(r_0,10);
 // dsf scalar(s)
A_57=barBBI(true,A_56);
r_1=( A_57);
 A_61=quadXII( A_57,QUADpp_1,QUADpw_1);
 return(r_1);
}


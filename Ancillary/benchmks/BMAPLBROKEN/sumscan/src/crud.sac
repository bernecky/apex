// Compiled by APEX Version: FIXME!! 2021-07-16 14:47:41.212
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int plusIBI(int x, bool y)
{ return(ItoI(x)+BtoI(y));
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double[+] mpyDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : mpyDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double[*] rhoIDD(int[.] x, double[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0.0d);
   return( z);
}



inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */

 printf("this is 12.5g:  %12.5g\n", y);
 printf("this is 30.10g:  %30.10g\n", y);
 printf("this is 20.5f:  %20.5f\n", y);
 printf("this is 20.8f : %20.8f\n", y);
 printf("this is 20.12f: %20.12f\n", y);
 printf("this is 0.20f:  %0.20f\n", y);
 printf("this is 30.16f: %30.16f\n", y);
 printf("this is 30.17f: %30.17f\n", y);
 printf("this is 30.18f: %30.18f\n", y);
 printf("this is 30.19f: %30.19f\n", y);
 printf("this is 30.20f: %30.20f\n", y);
        show(y);
        return(y);
}
inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline bool sameDDB(double x, double y,double QUADct)
{ /* Scalar match scalar */
  z = eqDDB(toD(x), toD(y), QUADct);
 return(z);
}



inline double[.,.] plusbslXDD(double[.,.] y)
{ // last-axis matrix/tensor scan
defcell = genarray(take([-1], shape(y)), 0.0d);
z = with{
        (. <= iv <= .) :  plusbslXDD(y[iv]);
        } : genarray(drop([-1],shape(y)), defcell);
 return(z);
}


inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : DtoD(y[lim-iv]);
       } :  fold( plusDDD, ItoD(0));
  return(z);
}


inline double mpyDDD(double x, double y)
{ return(DtoD(x)*DtoD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline double[+] plusbslXDD(double[+] y)

{ // Scan of vector
 shp = shape(y)[0];
 z = genarray([shp],ItoD(0));
 z[[0]] = DtoD(y[[0]]); // Not sure about coercion
 for ( i=1; i<shp; i++) {
   z[[i]] = plusDDD(DtoD(z[[i-1]]),DtoD(y[[i]]));
 }
 return(z);
}


inline double sumscanXID(int n ,int QUADio)
{ 
/*
 ?
*/
// dsf scalar(s)
A_18=plusIBI(n,true);
 A_20=iotaXII( A_18,QUADio);
 // dsf scalar(s)
A_21=mpyDID(0.01,A_20);
A_22=comaIII(n,n);
 A_23=rhoIDD(A_22,A_21);
 r_0=( A_23);
 A_25=plusbslXDD( r_0);
 A_29=comaXDD( A_25);
 A_30=plusslXDDFOLD( A_29);
 r_1=( A_30);
 return(r_1);
}

int main()
{ 
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 6000);
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_52=sumscanXID( n_0,QUADio_1);
 r_0=( A_52);
 A_56=quadXDD( A_52,QUADpp_1,QUADpw_1);

 junk=quadXDD( 3240719909980.09 ,QUADpp_1,QUADpw_1);
 A_58=sameDDB(r_0,3240719909980.09,QUADct_0);
// dsf scalar(s)
A_59=barBBI(A_58,true);
 r_1=( A_59);
 return(r_1);
}


breakme takes forever


use Array: all;
use Math: all;
use String: {tochar,to_string,strtod};
import Char: all;
use StdIO: all;
use Bits: all;

/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) tob((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

inline double[+] barXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with( . <= iv <= .)
        genarray(shape(y),
   barXDD(toD(y[iv])),0.0d);
  return(z);
}

inline double[+] modXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with( . <= iv <= .)
        genarray(shape(y),
   modXDD(toD(y[iv])),0.0d);
  return(z);
}

inline double[+] divXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with( . <= iv <= .)
        genarray(shape(y),
   divXDD(toD(y[iv])),0.0d);
  return(z);
}

inline double divIDD(int x, double y)
{ dx = tod(x);
  dy = tod(y);
 if (dx == dy)
      z = 1.0d;
  else
      z = dx/dy;
  return(z);
}

inline int plusIII(int x, int y)
{ return(toI(x)+toI(y));
}

inline int barIII(int x, int y)
{ return(toI(x)-toI(y));
}

inline int barIBI(int x, bool y)
{ return(toI(x)-toI(y));
}

inline int plusIBI(int x, bool y)
{ return(toI(x)+toI(y));
}

inline int plusBBI(bool x, bool y)
{ return(toI(x)+toI(y));
}

inline double[+] barDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
       sx = DSFLenErrorCheck(shape(x), shape(y));
     z = with( . <= iv <= .) {
      xel = toD(x[iv]);
    yel = toD(y[iv]);
      }
        genarray(sx,
                 barDDD(xel,yel),0.0d);
  return(z);
}







inline double[+] mpyDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
       sx = DSFLenErrorCheck(shape(x), shape(y));
     z = with( . <= iv <= .) {
      xel = toD(x[iv]);
    yel = toD(y[iv]);
      }
        genarray(sx,
                 mpyDDD(xel,yel),0.0d);
  return(z);
}







inline double[+] plusDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
       sx = DSFLenErrorCheck(shape(x), shape(y));
     z = with( . <= iv <= .) {
      xel = toD(x[iv]);
    yel = toD(y[iv]);
      }
        genarray(sx,
                 plusDDD(xel,yel),0.0d);
  return(z);
}







inline double[+] mpyDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with( . <= iv <= .) {
        yel = toD(y[iv]);
      }
        genarray(shape(y),
                mpyDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] mpyIDD(int x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with( . <= iv <= .) {
        yel = toD(y[iv]);
      }
        genarray(shape(y),
                mpyDDD(xel,yel),0.0d);
  return(z);
}


inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with( . <= iv <= .) {
        yel = toI(y[iv]);
      }
        genarray(shape(y),
                plusIII(xel,yel),0);
  return(z);
}


inline double[+] mpyDID(double[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
       sx = DSFLenErrorCheck(shape(x), shape(y));
     z = with( . <= iv <= .) {
      xel = toD(x[iv]);
    yel = toD(y[iv]);
      }
        genarray(sx,
                 mpyDDD(xel,yel),0.0d);
  return(z);
}







inline double[+] divDID(double[+] x, int y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with( . <= iv <= .) {
       xel = toD(x[iv]);
      }
        genarray( shape(x),
          divDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] divIID(int[+] x, int y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with( . <= iv <= .) {
       xel = toD(x[iv]);
      }
        genarray( shape(x),
          divDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] barBDD(bool x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with( . <= iv <= .) {
        yel = toD(y[iv]);
      }
        genarray(shape(y),
                barDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] mpyDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with( . <= iv <= .) {
       xel = toD(x[iv]);
      }
        genarray( shape(x),
          mpyDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] barDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with( . <= iv <= .) {
        yel = toD(y[iv]);
      }
        genarray(shape(y),
                barDDD(xel,yel),0.0d);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with( . <= iv <= .) {
        yel = toI(y[iv]);
      }
        genarray(shape(y),
                plusIII(xel,yel),0);
  return(z);
}


inline double[.] comaXDD(double[.] y)
{ /* Ravel of vector is NOP */
   return(y);
}


inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
 n = shape(y);
 cell = 0;
 z = with( . <= iv <= .)
        genarray(n, y[(n-1)-iv],cell);
 return(z);
}

inline double[+] rotrIDD(int x, double[+] y)
{ /* Scalar rotate matrix last axis */
 ix = toi(x);
 k = VectorRotateAmount(ix,shape(y)[[dim(y)-1]]); /* Normalize rot count */
 /* Stupid sac rotate primitive goes in wrong direction */
 z = rotate(dim(y)-1, -k, y);
 return (z);
}


inline double[+] rot1IDD(int x, double[+] y)
{ /* Scalar rotate first axis non-scalar */
 ix = toi(x);
 k = VectorRotateAmount(ix,shape(y)[[0]]); /* Normalize rot count */
 if ( 0 == k) {
         z = y;
 } else {
      z = drop([k],y)++take([k],y);
 }
 return(z);
}


inline double[.] rhoIDD(int x, double y)
{ /* Scalar reshape scalar to vector) */
      z = genarray([toi(x)], y);
     return(z);
}

inline double[*] rhoIDD(int[.] x, double[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXDD(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with(. <= [i] <= .)
                genarray( [ncopies], y,y);
        /* Now append the leftover bits */
        z = comaXDD(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int iotaDDI(double[.] x, double y,double QUADct,int QUADio)
{ /* Fuzzy Vector iota Scalar */
 sx = shape(x)[[0]];
 z = sx;
 for(i=0; i<sx; i++) {
   if (eqDDB(toD(x[[i]]),toD(y),QUADct)){
             z = i;
                 i = sx;
        }
 }
 return(z+QUADio);
}



inline double[*] dropIDD(int[.] x, double[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline double[*] dropBDD(bool[.] x, double[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[2]  rhoXDI(double[.,.] y)
{ /* Shape of matrix (rank-2) */
 return(shape(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  ishp = toi(y);
  z = with( [QUADio] <= iv < [QUADio+ishp])
        genarray( [ishp], iv[[0]]);
  return( z);
}

inline double[+] quadXDD(double[+] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} non-scalar anything except boolean*/
         print(y);
      return(y);
}

inline int quadXII(int y, int QUADpp, int QUADpw)
{ /* {quad}{<-} scalar anything except boolean*/
     print([y]);
    return(y);
}

inline double[.] comaDBD(double[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toD(x)++[toD(y)]);
}

inline double[.] comaBDD(bool x, double[.] y)
{/* SxV catenate first (or last) axis */
 return([toD(x)]++toD(y));
}

inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline double[.] comaIDD(int[.] x, double y)
{/* VxS catenate first (or last) axis */
 return(toD(x)++[toD(y)]);
}

inline double[.] comaDDD(double x, double[.] y)
{/* SxV catenate first (or last) axis */
 return([toD(x)]++toD(y));
}

inline double[.] comaIDD(int[.] x, double[.] y)
{ /* VxV catenate first or last axis */
 return(toD(x)++toD(y));
}

inline double[.] comaIDD(int x, double[.] y)
{/* SxV catenate first (or last) axis */
 return([toD(x)]++toD(y));
}

inline bool sameDDB(double[.] x, double[.] y,double QUADct)
{ /* vector-vector match */
 z =all(shape(x) == shape(y));
 if (z)
  z = with(0*shape(y) <= iv < shape(y))
        fold(&, true,
                 eqDDB(toD(x[iv]), toD(y[iv]), QUADct));
 return(z);
}


inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline double[*] indr(double[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),0.0d);
 z = with(. <= iv <= .)
        genarray(shape(I), X[[I[iv]]],defcell);
 return(z);
}





inline double[*] indr(double[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline double[+] inds11(double[+] X, int [+] I0,int [+] I1, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[I0[[i0]],I1[[i1]]]]=tod(Y[[i0,i1]]);

 }
 }

 return(z);
}



inline double[+] inds0x(double[+] X, int  I0, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 
 z[[I0]]=tod(Y);

 
 return(z);
}



inline double[+] indsx0(double[+] X, int  I1, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){

 z[[i0,I1]]=tod(Y[[i0]]);

 }

 return(z);
}



inline double[*] jotdotmpyDDD(double [*] x, double [*] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0.0d);
 z = with (. <= iv <= .) {
    xitem = toD(x[iv]);
         }
               genarray(shape(x),
             mpyDDD(xitem, toD(y)),cell);
 return(z);
}


inline double[+] maxslXDD(double[+] y)
{ /* last axis reduce rank-2 or greater matrix */
  sy = shape(y);
  zrho = drop([-1], sy);
  z = with (. <= iv <= .)
         genarray(zrho,
        maxslXDD(y[iv]),0.0d);
  return(z);
}


inline double maxslXDD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with (0*shape(y) <= iv < shape(y))
        fold( maxDDD, toD(mindouble()), toD(y[lim-iv]));
  return(z);
}



inline double barXDD(double y)
{ return(-y);
}

inline double modXDD(double y)
{ return(abs(toD(y)));
}

inline double divXDD(double y)
{ return(1.0/tod(y));
}

inline double barDDD(double x, double y)
{ return(toD(x)-toD(y));
}

inline double mpyDDD(double x, double y)
{ return(toD(x)*toD(y));
}

inline double plusDDD(double x, double y)
{ return(toD(x)+toD(y));
}

inline double divDDD(double x, double y)
{ dx = tod(x);
  dy = tod(y);
 if (dx == dy)
      z = 1.0d;
  else
      z = dx/dy;
  return(z);
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((toD(x) == toD(y)) || APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline double maxDDD(double x, double y)
{ /* x max y */
 cx = toD(x);
 cy = toD(y);
 if (cx <= cy)
    z = cy;
 else
         z = cx;
 return (z);
}

inline double[+] barDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with( . <= iv <= .) {
       xel = toD(x[iv]);
      }
        genarray( shape(x),
          barDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] plusDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with( . <= iv <= .) {
        yel = toD(y[iv]);
      }
        genarray(shape(y),
                plusDDD(xel,yel),0.0d);
  return(z);
}


inline double[+] plusDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with( . <= iv <= .) {
       xel = toD(x[iv]);
      }
        genarray( shape(x),
          plusDDD(xel,yel),0.0d);
  return(z);
}


inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with(. <= iv <= .)
        genarray(frameshape, indrfr0(X[iv], I),cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with(. <= iv <= .)
        genarray(shape(I), sel( I[iv], X),cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with(. <= iv <= .)
        genarray(frameshape, sel( I, X[iv]),cell);
 return(z);
}


inline double[*] indrfr(int fr, double[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with(. <= iv <= .)
        genarray(frameshape, indrfr0(X[iv], I),cell);
 return(z);
}

inline double[*] indrfr0(double[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with(. <= iv <= .)
        genarray(shape(I), sel( I[iv], X),cell);
 return(z);
}



inline double[*] indrfr(int fr, double[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0.0d);
 z = with(. <= iv <= .)
        genarray(frameshape, sel( I, X[iv]),cell);
 return(z);
}


inline int[.] DSFLenErrorCheck(int[.] sx, int[.] sy)
{ /* Dyadic scalar fn length error check */
     z = sx;
    if (any(sx != sy)) /* Check that shapes match */
      print(tochar("APEX dyadic scalar function length error!"));
     return(z);
}

inline int VectorRotateAmount(int x, int y)
{ /* Normalize x rotate for array of shape y on selected axis */
 /* normalize rotation count */

if ((0==x) || (0==y))
  z = 0;
else if (x>0)
        z = _mod_(x,y);
     else
        z = y - _mod_(_abs_(x),y);
 return(z);
}


inline int ABC(int I, int Xshape)
{ /* Array bounds checker for indexed ref X[scalarI] and indexed assign */
 z = I;
  if ( (I < 0) || (I >= Xshape)) {
         print(tochar("APEX index error!"));
  }
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* Array bounds checker for indexed ref  X[nonscalarI] and indexed assign */
 z = I;
 bad = with((0*shape(z)) <= iv < shape(z))
  fold(|, false, (z[iv] < 0) || (z[iv] >= Xshape));
 if (bad)
  print(tochar("APEX index error!"));
 return(z);
}

inline double maxslXDD(double[.] y)
{ /* First/last axis slow reduction of vector. Can't use fold or quickstop */
 shp = shape(y)[[0]];
 if (0 == shp)
  z = toD(mindouble());
 else {
  z = toD(y[[shp-1]]);
  for (i=shp-2; i>=0; i--)
   z = maxDDD(toD(y[[i]]),toD(z));
 }
 return(z);
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline bool,double[.,.],double[.,.],double[.,.],double[.,.]
 compmeshDDB(double[.,.] x, double[.,.] y)
{ /* Start of function compmesh 2006-10-11 18:00:51.000 */

/*
  r{<-}x compmesh y;xx;yx;xy;yy;a;b;c;pxx;pxy;qxx;qxy;pyy;qyy
  xx{<-}1 {neg}2{drop}{neg}1 0{drop}(2{rotate}x)-x
  yx{<-}1 {neg}2{drop}{neg}1 0{drop}(2{rotate}y)-y
  xy{<-}{neg}2 1{drop}0 {neg}1{drop}(2{rotatebar}x)-x
  yy{<-}{neg}2 1{drop}0 {neg}1{drop}(2{rotatebar}y)-y
 @
  a{<-}0.25{times}(xy{times}xy)+yy{times}yy
  b{<-}0.25{times}(yx{times}yx)+xx{times}xx
  c{<-}0.125{times}(xy{times}xx)+yx{times}yy
 @
  pxx{<-}(1 2{drop}{neg}1 0{drop}x)-(2{times}1 1{drop}{neg}1 {neg}1{drop}x)-1 0{drop}{neg}1 {neg}2{drop}x
  qxx{<-}(1 2{drop}{neg}1 0{drop}y)-(2{times}1 1{drop}{neg}1 {neg}1{drop}y)-1 0{drop}{neg}1 {neg}2{drop}y
  pyy{<-}(2 1{drop}0 {neg}1{drop}x)-(2{times}1 1{drop}{neg}1 {neg}1{drop}x)-0 1{drop}{neg}2 {neg}1{drop}x
  qyy{<-}(2 1{drop}0 {neg}1{drop}y)-(2{times}1 1{drop}{neg}1 {neg}1{drop}y)-0 1{drop}{neg}2 {neg}1{drop}y
 @
  pxy{<-}((2 2{drop}x)-{neg}2 2{drop}x)+({neg}2 {neg}2{drop}x)-2 {neg}2{drop}x @ signs
  qxy{<-}((2 2{drop}y)-{neg}2 2{drop}y)+({neg}2 {neg}2{drop}y)-2 {neg}2{drop}y
 @ GLOBALS OUT:
  aa{<-}-b
  dd{<-}b+b+(2{divide}0.98){times}a
  rx{<-}(a{times}pxx)+(b{times}pyy)-c{times}pxy
  ry{<-}(a{times}qxx)+(b{times}qyy)-c{times}qxy
  r{<-}0 @ junk result
 
*/
A_96=rotrIDD(2,x) ;
 /* dsf clique */
A_97=barDDD(A_96,x);
 A_98=dropIDD([-1, 0],A_97) ;
 A_99=dropIDD([1, -2],A_98) ;
 xx_0=( A_99) ;
 A_101=rotrIDD(2,y) ;
 /* dsf clique */
A_102=barDDD(A_101,y);
 A_103=dropIDD([-1, 0],A_102) ;
 A_104=dropIDD([1, -2],A_103) ;
 yx_0=( A_104) ;
 A_106=rot1IDD(2,x) ;
 /* dsf clique */
A_107=barDDD(A_106,x);
 A_108=dropIDD([0, -1],A_107) ;
 A_109=dropIDD([-2, 1],A_108) ;
 xy_0=( A_109) ;
 A_111=rot1IDD(2,y) ;
 /* dsf clique */
A_112=barDDD(A_111,y);
 A_113=dropIDD([0, -1],A_112) ;
 A_114=dropIDD([-2, 1],A_113) ;
 yy_0=( A_114) ;
 /* dsf clique */
A_116=mpyDDD(yy_0,yy_0);
 /* dsf clique */
A_117=mpyDDD(xy_0,xy_0);
 /* dsf Check needed */
A_118=plusDDD(A_117,A_116);
 /* dsf scalar(s) */
A_119=mpyDDD(0.25,A_118);
 a_0=( A_119) ;
 /* dsf clique */
A_121=mpyDDD(xx_0,xx_0);
 /* dsf clique */
A_122=mpyDDD(yx_0,yx_0);
 /* dsf Check needed */
A_123=plusDDD(A_122,A_121);
 /* dsf scalar(s) */
A_124=mpyDDD(0.25,A_123);
 b_0=( A_124) ;
 /* dsf Check needed */
A_126=mpyDDD(yx_0,yy_0);
 /* dsf Check needed */
A_127=mpyDDD(xy_0,xx_0);
 /* dsf Check needed */
A_128=plusDDD(A_127,A_126);
 /* dsf scalar(s) */
A_129=mpyDDD(0.125,A_128);
 c_0=( A_129) ;
 A_131=dropIDD([-1, -2],x) ;
 A_132=dropBDD([true,false],A_131) ;
 A_133=dropIDD([-1, -1],x) ;
 A_134=dropBDD([true,true],A_133) ;
 /* dsf scalar(s) */
A_135=mpyIDD(2,A_134);
 /* dsf Check needed */
A_136=barDDD(A_135,A_132);
 A_137=dropIDD([-1, 0],x) ;
 A_138=dropIDD([1, 2],A_137) ;
 /* dsf Check needed */
A_139=barDDD(A_138,A_136);
 pxx_0=( A_139) ;
 A_141=dropIDD([-1, -2],y) ;
 A_142=dropBDD([true,false],A_141) ;
 A_143=dropIDD([-1, -1],y) ;
 A_144=dropBDD([true,true],A_143) ;
 /* dsf scalar(s) */
A_145=mpyIDD(2,A_144);
 /* dsf Check needed */
A_146=barDDD(A_145,A_142);
 A_147=dropIDD([-1, 0],y) ;
 A_148=dropIDD([1, 2],A_147) ;
 /* dsf Check needed */
A_149=barDDD(A_148,A_146);
 qxx_0=( A_149) ;
 A_151=dropIDD([-2, -1],x) ;
 A_152=dropBDD([false,true],A_151) ;
 A_153=dropIDD([-1, -1],x) ;
 A_154=dropBDD([true,true],A_153) ;
 /* dsf scalar(s) */
A_155=mpyIDD(2,A_154);
 /* dsf Check needed */
A_156=barDDD(A_155,A_152);
 A_157=dropIDD([0, -1],x) ;
 A_158=dropIDD([2, 1],A_157) ;
 /* dsf Check needed */
A_159=barDDD(A_158,A_156);
 pyy_0=( A_159) ;
 A_161=dropIDD([-2, -1],y) ;
 A_162=dropBDD([false,true],A_161) ;
 A_163=dropIDD([-1, -1],y) ;
 A_164=dropBDD([true,true],A_163) ;
 /* dsf scalar(s) */
A_165=mpyIDD(2,A_164);
 /* dsf Check needed */
A_166=barDDD(A_165,A_162);
 A_167=dropIDD([0, -1],y) ;
 A_168=dropIDD([2, 1],A_167) ;
 /* dsf Check needed */
A_169=barDDD(A_168,A_166);
 qyy_0=( A_169) ;
 A_171=dropIDD([2, -2],x) ;
 A_172=dropIDD([-2, -2],x) ;
 /* dsf Check needed */
A_173=barDDD(A_172,A_171);
 A_174=dropIDD([-2, 2],x) ;
 A_175=dropIDD([2, 2],x) ;
 /* dsf Check needed */
A_176=barDDD(A_175,A_174);
 /* dsf Check needed */
A_177=plusDDD(A_176,A_173);
 pxy_0=( A_177) ;
 A_179=dropIDD([2, -2],y) ;
 A_180=dropIDD([-2, -2],y) ;
 /* dsf Check needed */
A_181=barDDD(A_180,A_179);
 A_182=dropIDD([-2, 2],y) ;
 A_183=dropIDD([2, 2],y) ;
 /* dsf Check needed */
A_184=barDDD(A_183,A_182);
 /* dsf Check needed */
A_185=plusDDD(A_184,A_181);
 qxy_0=( A_185) ;
 A_187=barXDD( b_0) ;
 aa_0=( A_187) ;
 /* dsf scalar(s) */
A_189=divIDD(2,0.98);
 /* dsf scalar(s) */
A_190=mpyDDD(A_189,a_0);
 /* dsf Check needed */
A_191=plusDDD(b_0,A_190);
 /* dsf Check needed */
A_192=plusDDD(b_0,A_191);
 dd_0=( A_192) ;
 /* dsf Check needed */
A_194=mpyDDD(c_0,pxy_0);
 /* dsf Check needed */
A_195=mpyDDD(b_0,pyy_0);
 /* dsf Check needed */
A_196=barDDD(A_195,A_194);
 /* dsf Check needed */
A_197=mpyDDD(a_0,pxx_0);
 /* dsf Check needed */
A_198=plusDDD(A_197,A_196);
 rx_0=( A_198) ;
 /* dsf Check needed */
A_200=mpyDDD(c_0,qxy_0);
 /* dsf Check needed */
A_201=mpyDDD(b_0,qyy_0);
 /* dsf Check needed */
A_202=barDDD(A_201,A_200);
 /* dsf Check needed */
A_203=mpyDDD(a_0,qxx_0);
 /* dsf Check needed */
A_204=plusDDD(A_203,A_202);
 ry_0=( A_204) ;
 r_0=( false) ;
return(r_0,
aa_0,
dd_0,
rx_0,
ry_0);
}

inline double[.,.] correctDDD(double[.,.] rx, double[.,.] x ,int QUADio)
{ /* Start of function correct 2006-10-11 18:00:53.000 */

/*
  r{<-}rx correct x;n
 @ Return x at edges, otherwise rx+x
 @r{<-}x+0.0{commabar}(0.0,rx,0.0){commabar}0.0 @ faster?
  n{<-}1+{iota}{neg}2+({rho}x)[1]
  r{<-}x
  r[n;n]{<-}rx+r[n;n]
 
*/
A_27=rhoXDI( x) ;
 A_26= ABC(toi(true)-QUADio,shape(A_27)[0]);
A_29=A_27[[A_26]];
 /* dsf scalar(s) */
A_30=plusIII(-2,A_29) ;
 A_32=iotaXII( A_30,QUADio) ;
 /* dsf scalar(s) */
A_33=plusBII(true,A_32) ;
 n_0=( A_33) ;
 r_0=( x) ;
 A_37= ABC(toi(n_0)-QUADio,shape(r_0)[0]);
A_36= ABC(toi(n_0)-QUADio,shape(r_0)[1]);
A_39=indr(indrfr(1,r_0,A_36),A_37);
 /* dsf Check needed */
A_40=plusDDD(rx,A_39) ;
 A_42= ABC(toi(n_0)-QUADio,shape(r_0)[0]);
A_41= ABC(toi(n_0)-QUADio,shape(r_0)[1]);
A_44=inds11(r_0,A_42,A_41,A_40) ;
 r_1=( A_44) ;
return(r_1);
}

inline double[.,.] dataxXID(int n,int QUADio)
{ /* Start of function datax 2006-10-11 18:00:55.000 */

/*
  r{<-}datax n;xij
 @ Tomcatv benchmark
 @ Model based on John Feo's SISAL 1.2 benchmark
 @ Initial field for x(i,j)
 @ This is transpose (sort of) of fortran version
 @ with stretch factor alfa
 @ Following code corresponds to DO loop 1
 @ in the Fortran version.
  xij{<-}1,((n-2){rho}0.9),1
  r{<-}(n,n){rho}(xij{times}{iota}n){divide}n-1
  r[0;]{<-}({iota}n){divide}n-1
  r[n-1;]{<-}({iota}n){divide}n-1
 
*/
/* dsf scalar(s) */
A_29=barIII(n,2) ;
 A_30=rhoIDD(A_29,0.9) ;
 A_31=comaDBD(A_30,true) ;
 A_32=comaBDD(true,A_31) ;
 xij_0=( A_32) ;
 /* dsf scalar(s) */
A_34=barIBI(n,true) ;
 A_36=iotaXII( n,QUADio) ;
 /* dsf Check needed */
A_37=mpyDID(xij_0,A_36) ;
 /* dsf scalar(s) */
A_38=divDID(A_37,A_34) ;
 A_39=comaIII(n,n) ;
 A_40=rhoIDD(A_39,A_38) ;
 r_0=( A_40) ;
 /* dsf scalar(s) */
A_42=barIBI(n,true) ;
 A_44=iotaXII( n,QUADio) ;
 /* dsf scalar(s) */
A_45=divIID(A_44,A_42) ;
 A_47= ABC(toi(false)-QUADio,shape(r_0)[0]);
A_49=inds0x(r_0,A_47,A_45);
 r_1=( A_49) ;
 /* dsf scalar(s) */
A_51=barIBI(n,true) ;
 A_53=iotaXII( n,QUADio) ;
 /* dsf scalar(s) */
A_54=divIID(A_53,A_51) ;
 /* dsf scalar(s) */
A_55=barIBI(n,true) ;
 A_57= ABC(toi(A_55)-QUADio,shape(r_1)[0]);
A_59=inds0x(r_1,A_57,A_54);
 r_2=( A_59) ;
return(r_2);
}

inline double[.,.] datayDID(double[.,.] x, int n,int QUADio)
{ /* Start of function datay 2006-10-11 18:00:57.000 */

/*
  r{<-}x datay n;yin;yij;nod
 @ Tomcatv benchmark
 @ Model based on John Feo's SISAL 1.2 benchmark
 @ This is transpose (sort of) of fortran version
 @ Initial field for x(i,j)
 @ with stretch factor alfa
 @ Following code corresponds to DO loop 1
 @ in the Fortran version.
  yin{<-},(1-0.9{times}x[0;]){times}x[0;n-1]
  r{<-}x[0;]{jot}.{times}0.9-0.81{times}x[0;]
  r[;n-1]{<-}0.1{times}x[0;]
  r[;0]{<-}x[0;]
  r[n-1;]{<-}yin
 
*/
/* dsf scalar(s) */
A_33=barIBI(n,true) ;
 A_35= ABC(toi(false)-QUADio,shape(x)[0]);
A_34= ABC(toi(A_33)-QUADio,shape(x)[1]);
A_37=x[[A_35,A_34]];
 A_39= ABC(toi(false)-QUADio,shape(x)[0]);
A_41=x[[A_39]];
 /* dsf scalar(s) */
A_42=mpyDDD(0.9,A_41) ;
 /* dsf scalar(s) */
A_43=barBDD(true,A_42) ;
 /* dsf scalar(s) */
A_44=mpyDDD(A_43,A_37) ;
 A_45=comaXDD( A_44) ;
 yin_0=( A_45) ;
 A_48= ABC(toi(false)-QUADio,shape(x)[0]);
A_50=x[[A_48]];
 /* dsf scalar(s) */
A_51=mpyDDD(0.81,A_50) ;
 /* dsf scalar(s) */
A_52=barDDD(0.9,A_51) ;
 A_54= ABC(toi(false)-QUADio,shape(x)[0]);
A_56=x[[A_54]];
 A_57=jotdotmpyDDD(A_56,A_52) ;
 r_0=( A_57) ;
 A_66= ABC(toi(false)-QUADio,shape(x)[0]);
A_68=x[[A_66]];
 /* dsf scalar(s) */
A_69=mpyDDD(0.1,A_68) ;
 /* dsf scalar(s) */
A_70=barIBI(n,true) ;
 A_71= ABC(toi(A_70)-QUADio,shape(r_0)[1]);
A_74=indsx0(r_0,A_71,A_69) ;
 r_1=( A_74) ;
 A_77= ABC(toi(false)-QUADio,shape(x)[0]);
A_79=x[[A_77]];
 A_80= ABC(toi(false)-QUADio,shape(r_1)[1]);
A_83=indsx0(r_1,A_80,A_79) ;
 r_2=( A_83) ;
 /* dsf scalar(s) */
A_85=barIBI(n,true) ;
 A_87= ABC(toi(A_85)-QUADio,shape(r_2)[0]);
A_89=inds0x(r_2,A_87,yin_0) ;
 r_3=( A_89) ;
return(r_3);
}

inline double,int,int
 fmaXDD(double[.,.] y,int QUADio,double QUADct)
{ /* Start of function fma 2006-10-11 18:00:59.000 */

/*
  z{<-}fma y;t;ay;v
 @ value and xy-index of maximum
 @ absolute value in y
 @ Sets xy-index in i,j as side effects. Ugh.
  ay{<-}|y
  v{<-}{max}/ay
  t{<-}{max}/v
  i{<-}v{iota}t
  j{<-}ay[i;]{iota}t
  z{<-}y[i;j]
 
*/
A_37=modXDD( y) ;
 ay_0=( A_37) ;
 A_39=maxslXDD( ay_0) ;
 v_0=( A_39) ;
 A_44=maxslXDD( v_0) ;
 t_0=( A_44) ;
 A_51=iotaDDI(v_0,t_0,QUADct,QUADio) ;
 i_0=( A_51) ;
 A_54= ABC(toi(i_0)-QUADio,shape(ay_0)[0]);
A_56=ay_0[[A_54]];
 A_59=iotaDDI(A_56,t_0,QUADct,QUADio) ;
 j_0=( A_59) ;
 A_62= ABC(toi(i_0)-QUADio,shape(y)[0]);
A_61= ABC(toi(j_0)-QUADio,shape(y)[1]);
A_64=y[[A_62,A_61]];
 z_0=( A_64) ;
return(z_0,
i_0,
j_0);
}

inline int,double[.,.],double[.,.]
 sweepdnDDI(double[.,.] aa, double[.,.] dd,double[.,.] nrx,double[.,.] nry,int QUADio)
{ /* Start of function sweepdn 2006-10-11 18:01:01.000 */

/*
  j{<-}aa sweepdn dd;r;lim
 @ Updates nrx,nry
  lim{<-}{neg}1+({rho}dd)[0]
  nrx[lim;]{<-}nrx[lim;]{times}dd[lim;]
  nry[lim;]{<-}nry[lim;]{times}dd[lim;]
 @
  :For j :In {reverse}{iota}lim
      nrx[j;]{<-}(nrx[j;]-(aa[j;]{times}nrx[j+1;])){times}dd[j;]
      nry[j;]{<-}(nry[j;]-(aa[j;]{times}nry[j+1;])){times}dd[j;]
  :EndFor
  j{<-}lim @ Garbage result
 
*/
A_44=rhoXDI( dd) ;
 A_43= ABC(toi(false)-QUADio,shape(A_44)[0]);
A_46=A_44[[A_43]];
 /* dsf scalar(s) */
A_47=plusIII(-1,A_46) ;
 lim_0=( A_47) ;
 A_50= ABC(toi(lim_0)-QUADio,shape(dd)[0]);
A_52=dd[[A_50]];
 A_54= ABC(toi(lim_0)-QUADio,shape(nrx)[0]);
A_56=nrx[[A_54]];
 /* dsf Check needed */
A_57=mpyDDD(A_56,A_52) ;
 A_59= ABC(toi(lim_0)-QUADio,shape(nrx)[0]);
A_61=inds0x(nrx,A_59,A_57) ;
 nrx_0=( A_61) ;
 A_64= ABC(toi(lim_0)-QUADio,shape(dd)[0]);
A_66=dd[[A_64]];
 A_68= ABC(toi(lim_0)-QUADio,shape(nry)[0]);
A_70=nry[[A_68]];
 /* dsf Check needed */
A_71=mpyDDD(A_70,A_66) ;
 A_73= ABC(toi(lim_0)-QUADio,shape(nry)[0]);
A_75=inds0x(nry,A_73,A_71) ;
 nry_0=( A_75) ;
 A_78=iotaXII( lim_0,QUADio) ;
 A_79=rotrXII( A_78) ;
 A_CTR80_= 0;
A_CTR80z_ = (shape(A_79)[[0]])-1;
nrx_2=tod(nrx_0);
nry_2=tod(nry_0);
j_0=toi(0);
for(; A_CTR80_ <= A_CTR80z_; A_CTR80_++){
j_0 = A_79[[A_CTR80_]];
 A_85= ABC(toi(j_0)-QUADio,shape(dd)[0]);
A_87=dd[[A_85]];
 /* dsf scalar(s) */
A_88=plusIBI(j_0,true) ;
 A_90= ABC(toi(A_88)-QUADio,shape(nrx_2)[0]);
A_92=nrx_2[[A_90]];
 A_94= ABC(toi(j_0)-QUADio,shape(aa)[0]);
A_96=aa[[A_94]];
 /* dsf Check needed */
A_97=mpyDDD(A_96,A_92) ;
 A_99= ABC(toi(j_0)-QUADio,shape(nrx_2)[0]);
A_101=nrx_2[[A_99]];
 /* dsf Check needed */
A_102=barDDD(A_101,A_97) ;
 /* dsf Check needed */
A_103=mpyDDD(A_102,A_87) ;
 A_105= ABC(toi(j_0)-QUADio,shape(nrx_2)[0]);
A_107=inds0x(nrx_2,A_105,A_103) ;
 nrx_2=( A_107) ;
 A_110= ABC(toi(j_0)-QUADio,shape(dd)[0]);
A_112=dd[[A_110]];
 /* dsf scalar(s) */
A_113=plusIBI(j_0,true) ;
 A_115= ABC(toi(A_113)-QUADio,shape(nry_2)[0]);
A_117=nry_2[[A_115]];
 A_119= ABC(toi(j_0)-QUADio,shape(aa)[0]);
A_121=aa[[A_119]];
 /* dsf Check needed */
A_122=mpyDDD(A_121,A_117) ;
 A_124= ABC(toi(j_0)-QUADio,shape(nry_2)[0]);
A_126=nry_2[[A_124]];
 /* dsf Check needed */
A_127=barDDD(A_126,A_122) ;
 /* dsf Check needed */
A_128=mpyDDD(A_127,A_112) ;
 A_130= ABC(toi(j_0)-QUADio,shape(nry_2)[0]);
A_132=inds0x(nry_2,A_130,A_128) ;
 nry_2=( A_132) ;
 }
 j_1=( lim_0) ;
return(j_1,
nrx_2,
nry_2);
}

inline double[.,.],double[.,.],double[.,.]
 sweepupDDD(double[.,.] aa, double[.,.] dd,double[.,.] rx,double[.,.] ry,int QUADio)
{ /* Start of function sweepup 2006-10-11 18:01:04.000 */

/*
  d{<-}aa sweepup dd;j;r
 @ We thought this was a scan, but I can't make it work.
  d{<-}dd
  d[0;]{<-}{divide}d[0;]
  nrx{<-}rx
  nry{<-}ry
  :For j :In 1+{iota}({rho}dd)[0]-1
      r{<-}aa[j;]{times}d[j-1;]
      d[j;]{<-}{divide}d[j;]-r{times}aa[j-1;]
      nrx[j;]{<-}nrx[j;]-nrx[j-1;]{times}r
      nry[j;]{<-}nry[j;]-nry[j-1;]{times}r
  :EndFor
 
*/
d_0=( dd) ;
 A_50= ABC(toi(false)-QUADio,shape(d_0)[0]);
A_52=d_0[[A_50]];
 A_53=divXDD( A_52) ;
 A_55= ABC(toi(false)-QUADio,shape(d_0)[0]);
A_57=inds0x(d_0,A_55,A_53) ;
 d_1=( A_57) ;
 nrx_0=( rx) ;
 nry_0=( ry) ;
 A_62=rhoXDI( dd) ;
 A_61= ABC(toi(false)-QUADio,shape(A_62)[0]);
A_64=A_62[[A_61]];
 /* dsf scalar(s) */
A_65=barIBI(A_64,true) ;
 A_67=iotaXII( A_65,QUADio) ;
 /* dsf scalar(s) */
A_68=plusBII(true,A_67) ;
 A_CTR69_= 0;
A_CTR69z_ = (shape(A_68)[[0]])-1;
d_3=tod(d_1);
nrx_2=tod(nrx_0);
nry_2=tod(nry_0);
for(; A_CTR69_ <= A_CTR69z_; A_CTR69_++){
j_0 = A_68[[A_CTR69_]];
 /* dsf scalar(s) */
A_73=barIBI(j_0,true) ;
 A_75= ABC(toi(A_73)-QUADio,shape(d_3)[0]);
A_77=d_3[[A_75]];
 A_79= ABC(toi(j_0)-QUADio,shape(aa)[0]);
A_81=aa[[A_79]];
 /* dsf Check needed */
A_82=mpyDDD(A_81,A_77) ;
 r_0=( A_82) ;
 /* dsf scalar(s) */
A_84=barIBI(j_0,true) ;
 A_86= ABC(toi(A_84)-QUADio,shape(aa)[0]);
A_88=aa[[A_86]];
 /* dsf Check needed */
A_89=mpyDDD(r_0,A_88) ;
 A_91= ABC(toi(j_0)-QUADio,shape(d_3)[0]);
A_93=d_3[[A_91]];
 /* dsf Check needed */
A_94=barDDD(A_93,A_89) ;
 A_95=divXDD( A_94) ;
 A_97= ABC(toi(j_0)-QUADio,shape(d_3)[0]);
A_99=inds0x(d_3,A_97,A_95) ;
 d_3=( A_99) ;
 /* dsf scalar(s) */
A_101=barIBI(j_0,true) ;
 A_103= ABC(toi(A_101)-QUADio,shape(nrx_2)[0]);
A_105=nrx_2[[A_103]];
 /* dsf Check needed */
A_106=mpyDDD(A_105,r_0) ;
 A_108= ABC(toi(j_0)-QUADio,shape(nrx_2)[0]);
A_110=nrx_2[[A_108]];
 /* dsf Check needed */
A_111=barDDD(A_110,A_106) ;
 A_113= ABC(toi(j_0)-QUADio,shape(nrx_2)[0]);
A_115=inds0x(nrx_2,A_113,A_111) ;
 nrx_2=( A_115) ;
 /* dsf scalar(s) */
A_117=barIBI(j_0,true) ;
 A_119= ABC(toi(A_117)-QUADio,shape(nry_2)[0]);
A_121=nry_2[[A_119]];
 /* dsf Check needed */
A_122=mpyDDD(A_121,r_0) ;
 A_124= ABC(toi(j_0)-QUADio,shape(nry_2)[0]);
A_126=nry_2[[A_124]];
 /* dsf Check needed */
A_127=barDDD(A_126,A_122) ;
 A_129= ABC(toi(j_0)-QUADio,shape(nry_2)[0]);
A_131=inds0x(nry_2,A_129,A_127) ;
 nry_2=( A_131) ;
 }
return(d_3,
nrx_2,
nry_2);
}

inline double[.,.] correctCLONE0DDD(double[.,.] rx, double[.,.] x ,int QUADio)
{ /* Start of function correctCLONE0 2006-10-11 18:01:06.000 */

/*
  r{<-}rx correct x;n
 @ Return x at edges, otherwise rx+x
 @r{<-}x+0.0{commabar}(0.0,rx,0.0){commabar}0.0 @ faster?
  n{<-}1+{iota}{neg}2+({rho}x)[1]
  r{<-}x
  r[n;n]{<-}rx+r[n;n]
 
*/
A_27=rhoXDI( x) ;
 A_26= ABC(toi(true)-QUADio,shape(A_27)[0]);
A_29=A_27[[A_26]];
 /* dsf scalar(s) */
A_30=plusIII(-2,A_29) ;
 A_32=iotaXII( A_30,QUADio) ;
 /* dsf scalar(s) */
A_33=plusBII(true,A_32) ;
 n_0=( A_33) ;
 r_0=( x) ;
 A_37= ABC(toi(n_0)-QUADio,shape(r_0)[0]);
A_36= ABC(toi(n_0)-QUADio,shape(r_0)[1]);
A_39=indr(indrfr(1,r_0,A_36),A_37);
 /* dsf Check needed */
A_40=plusDDD(rx,A_39) ;
 A_42= ABC(toi(n_0)-QUADio,shape(r_0)[0]);
A_41= ABC(toi(n_0)-QUADio,shape(r_0)[1]);
A_44=inds11(r_0,A_42,A_41,A_40) ;
 r_1=( A_44) ;
return(r_1);
}

inline double,int,int
 fmaCLONE0XDD(double[.,.] y,int QUADio,double QUADct)
{ /* Start of function fmaCLONE0 2006-10-11 18:01:08.000 */

/*
  z{<-}fma y;t;ay;v
 @ value and xy-index of maximum
 @ absolute value in y
 @ Sets xy-index in i,j as side effects. Ugh.
  ay{<-}|y
  v{<-}{max}/ay
  t{<-}{max}/v
  i{<-}v{iota}t
  j{<-}ay[i;]{iota}t
  z{<-}y[i;j]
 
*/
A_37=modXDD( y) ;
 ay_0=( A_37) ;
 A_39=maxslXDD( ay_0) ;
 v_0=( A_39) ;
 A_44=maxslXDD( v_0) ;
 t_0=( A_44) ;
 A_51=iotaDDI(v_0,t_0,QUADct,QUADio) ;
 i_0=( A_51) ;
 A_54= ABC(toi(i_0)-QUADio,shape(ay_0)[0]);
A_56=ay_0[[A_54]];
 A_59=iotaDDI(A_56,t_0,QUADct,QUADio) ;
 j_0=( A_59) ;
 A_62= ABC(toi(i_0)-QUADio,shape(y)[0]);
A_61= ABC(toi(j_0)-QUADio,shape(y)[1]);
A_64=y[[A_62,A_61]];
 z_0=( A_64) ;
return(z_0,
i_0,
j_0);
}

inline double[.] tomcatvXID(int n,double QUADct,int QUADio)
{ /* Start of function tomcatv 2006-10-11 18:01:10.000 */

/*
  r{<-}tomcatv n;x;y;nrx;nry;aa;d;dd;rx;ry;ll;irxm;jrxm;rxm;irym;jrym;rym;i;j;rx1;ry1;sr;junk;z
 @ Tomcatv using John Feo's
 @ SISAL 1.2 algorithm
 @ Modified to row-major order by
 @ Robert Bernecky 1996-05-27
  x{<-}datax n
  y{<-}x datay n
  ll{<-}irxm{<-}jrxm{<-}irym{<-}jrym{<-}0
  rxm{<-}rym{<-}0
 @ll{<-}{neg}1
 @:while 100>ll{<-}ll+1
  z{<-}666 @ panic sets in
  :For ll :In {iota}100
      junk{<-}x compmesh y
 @ n is global in; aa,dd,rx,ry out
      z{<-}ll
 @ Find maximum residual {&} its location
      rxm{<-}fma rx
      irxm{<-}j
      jrxm{<-}i
      rym{<-}fma ry
      irym{<-}j
      jrym{<-}i
 @ Solve tridiagonal system
      d{<-}aa sweepup dd
 @ sweepup uses rx,ry, sets nrx,nry
      junk{<-}aa sweepdn d
 @ sweepdn uses {&}sets nrx,nry
 @ Add corrections
      x{<-}nrx correct x
      y{<-}nry correct y
  :EndFor
 @@:until .5E{neg}7>(|rxm){max}|rym
 @ No :until support yet
  r{<-}(z+1),(2+irxm,jrxm),rxm,(2+irym,jrym),rym
 
*/
A_141=dataxXID( n,QUADio) ;
 x_0=( A_141) ;
 A_144=datayDID(x_0,n,QUADio) ;
 y_0=( A_144) ;
 jrym_0=( false) ;
 irym_0=( false) ;
 jrxm_0=( false) ;
 irxm_0=( false) ;
 ll_0=( false) ;
 rym_0=( false) ;
 rxm_0=( false) ;
 z_0=( 666) ;
 A_155=iotaXII( 100,QUADio) ;
 A_CTR156_= 0;
A_CTR156z_ = (shape(A_155)[[0]])-1;
ll_1=toi(ll_0);
z_2=toi(z_0);
rxm_2=tod(rxm_0);
irxm_2=toi(irxm_0);
jrxm_2=toi(jrxm_0);
i_2=toi(0);
j_2=toi(0);
rym_2=tod(rym_0);
irym_2=toi(irym_0);
jrym_2=toi(jrym_0);
nrx_2=tod(0.0d);
nry_2=tod(0.0d);
x_2=tod(x_0);
y_2=tod(y_0);
for(; A_CTR156_ <= A_CTR156z_; A_CTR156_++){
ll_1 = A_155[[A_CTR156_]];
 A_172,aa_0,dd_0,rx_0,ry_0=compmeshDDB(x_2,y_2) ;
 junk_1=( A_172) ;
 z_2=( ll_1) ;
 A_181,i_1,j_1=fmaXDD( rx_0,QUADio,QUADct) ;
 rxm_2=( A_181) ;
 irxm_2=( j_1) ;
 jrxm_2=( i_1) ;
 A_189,i_2,j_2=fmaCLONE0XDD( ry_0,QUADio,QUADct) ;
 rym_2=( A_189) ;
 irym_2=( j_2) ;
 jrym_2=( i_2) ;
 A_198,nrx_1,nry_1=sweepupDDD(aa_0,dd_0,rx_0,ry_0,QUADio) ;
 d_0=( A_198) ;
 A_205,nrx_2,nry_2=sweepdnDDI(aa_0,d_0,nrx_1,nry_1,QUADio) ;
 junk_2=( A_205) ;
 A_210=correctDDD(nrx_2,x_2,QUADio) ;
 x_2=( A_210) ;
 A_213=correctCLONE0DDD(nry_2,y_2,QUADio) ;
 y_2=( A_213) ;
 }
 A_216=comaIII(irym_2,jrym_2) ;
 /* dsf scalar(s) */
A_217=plusIII(2,A_216);
 A_218=comaIDD(A_217,rym_2) ;
 A_219=comaDDD(rxm_2,A_218) ;
 A_220=comaIII(irxm_2,jrxm_2) ;
 /* dsf scalar(s) */
A_221=plusIII(2,A_220);
 A_222=comaIDD(A_221,A_219) ;
 /* dsf scalar(s) */
A_223=plusIBI(z_2,true);
 A_224=comaIDD(A_223,A_222) ;
 r_0=( A_224) ;
return(r_0);
}

int main()
{ /* Start of function main 2006-10-11 18:01:12.000 */

/*
  r{<-}main;#IO;#RL;n;#PP;#PW;#CT
 @this function exists only to make sac2c happy
  #IO{<-}0
  n{<-}257
  #RL{<-}16807
  #PP{<-}16
  #PW{<-}80
  #CT{<-}0.0000000000001
  r{<-}tomcatv n
  #{<-}r
  #{<-}r{<-}1+r{match}100 202 2 9.8296417600027E{neg}7 30 256 1.171124699033E{neg}6
 
*/
QUADio_0=toi(( false)) ;
 QUADct_0=( 1.0e-13) ;
 QUADpp_0=( 10) ;
 QUADpw_0=( 80) ;
 QUADrl_0=( 16807) ;
 QUADio_1=toi(( false)) ;
 n_0=( 257) ;
 QUADrl_1=( 16807) ;
 QUADpp_1=( 16) ;
 QUADpw_1=( 80) ;
 QUADct_1=( 0.0000000000001) ;
 A_63=tomcatvXID( n_0,QUADct_1,QUADio_1) ;
 r_0=( A_63) ;
 A_67=quadXDD( r_0,QUADpp_1,QUADpw_1) ;
 A_69=sameDDB(r_0,[100.0, 202.0, 2.0, 9.8296417600027e-7, 30.0, 256.0, 1.171124699033e-6],QUADct_1) ;
 /* dsf scalar(s) */
A_70=plusBBI(true,A_69);
 r_1=( A_70) ;
 A_74=quadXII( A_70,QUADpp_1,QUADpw_1) ;
return(r_1);
}


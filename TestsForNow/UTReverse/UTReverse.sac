use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3014.dws2013-07-29 16:16:37.366 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline double[+] divXID(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : divXDD(toD(y[iv]));
        } : genarray(shape(y), 0.0d);
  return(z);
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double[+] plusDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] plusIDD(int[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int rotrXII(int y)
{ /* Transpose and reverse on scalars are NOPs */
  return(y);
}

inline char rotrXCC(char y)
{ /* Transpose and reverse on scalars are NOPs */
  return(y);
}

inline char rot1XCC(char y)
{ /* Transpose and reverse on scalars are NOPs */
  return(y);
}

inline bool rotrXBB(bool y)
{ /* Transpose and reverse on scalars are NOPs */
  return(y);
}

inline bool rot1XBB(bool y)
{ /* Transpose and reverse on scalars are NOPs */
  return(y);
}

inline double rotrXDD(double y)
{ /* Transpose and reverse on scalars are NOPs */
  return(y);
}

inline double rot1XDD(double y)
{ /* Transpose and reverse on scalars are NOPs */
  return(y);
}

inline bool[.] comaXBB(bool y)
{ /* Ravel of scalar */
  return([y]);
}

inline bool[.] rotrXBB(bool[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline bool[+] rot1XBB(bool[+] y)
{ /* First axis reverse on anything */
  z = Array::reverse( 0, y);
  return( z);
}

inline int[.] comaXII(int y)
{ /* Ravel of scalar */
  return([y]);
}

inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline int[+] rot1XII(int[+] y)
{ /* First axis reverse on anything */
  z = Array::reverse( 0, y);
  return( z);
}

inline double[.] comaXDD(double y)
{ /* Ravel of scalar */
  return([y]);
}

inline double[.] rotrXDD(double[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline double[+] rot1XDD(double[+] y)
{ /* First axis reverse on anything */
  z = Array::reverse( 0, y);
  return( z);
}

inline char[.] comaXCC(char y)
{ /* Ravel of scalar */
  return([y]);
}

inline char[.] rotrXCC(char[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline char[+] rot1XCC(char[+] y)
{ /* First axis reverse on anything */
  z = Array::reverse( 0, y);
  return( z);
}

inline bool[+] rotrXBB(bool[+] y)
{/* Last axis reverse on rank>1 */
  axis = _dim_A_( y) - 1;
  z = Array::reverse( axis, y);
  return( z);
}

inline int[+] rotrXII(int[+] y)
{/* Last axis reverse on rank>1 */
  axis = _dim_A_( y) - 1;
  z = Array::reverse( axis, y);
  return( z);
}

inline double[+] rotrXDD(double[+] y)
{/* Last axis reverse on rank>1 */
  axis = _dim_A_( y) - 1;
  z = Array::reverse( axis, y);
  return( z);
}

inline char[+] rotrXCC(char[+] y)
{/* Last axis reverse on rank>1 */
  axis = _dim_A_( y) - 1;
  z = Array::reverse( axis, y);
  return( z);
}

inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline double[*] rhoIDD(int[.] x, double[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0.0d);
   return( z);
}



inline int[*] iotaCCIQUADAV(char[256] x, char y,int QUADio)
{ /* QUADav iota character scalar */
 return(toi(y)+QUADio);
}

inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline char[*] dropICC(int x, char[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline char[256] quadavXXC()
{ /* QUADav - system character set */
 z = with{
        ([0] <= [i] < [256]) : _toc_S_(i);
        } : genarray( [256], ' ');
 return(z);
}

inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline bool sameIIB(int x, int y)
{ /* Scalar match scalar */
  z = eqIIB(toI(x), toI(y));
 return(z);
}



inline bool sameCCB(char x, char y)
{ /* Scalar match scalar */
  z = eqCCB(toC(x), toC(y));
 return(z);
}



inline bool sameBBB(bool x, bool y)
{ /* Scalar match scalar */
  z = eqBBB(toB(x), toB(y));
 return(z);
}



inline bool sameDDB(double x, double y,double QUADct)
{ /* Scalar match scalar */
  z = eqDDB(toD(x), toD(y), QUADct);
 return(z);
}



inline bool sameBBB(bool[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqBBB(toB( x),  toB( y)))));
  return(z);
}



inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameDDB(double[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline bool sameCCB(char[+] x, char[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqCCB(toC( x),  toC( y)))));
  return(z);
}



inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline double divXDD(double y)
{ return(1.0/tod(y));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline double plusIDD(int x, double y)
{ return(ItoD(x)+DtoD(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool eqCCB(char x, char y)
{ /* A=B on non-doubles */
 return(CtoC(x) == CtoC(y));
}

inline bool eqBBB(bool x, bool y)
{ /* A=B on non-doubles */
 return(BtoB(x) == BtoB(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqDDB(double[+] x, double[+] y,double QUADct)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqDDB(xel,yel, QUADct);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqCCB(char[+] x, char[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqCCB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline bool[+] eqBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : eqBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqDDB(double x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : eqDDB(xel,yel, QUADct);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqDDB(double[+] x, double y,double QUADct)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqDDB(xel,y, QUADct);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
     ( . <= iv <= .) {
              yel = toC(y[iv]);
                    } : eqCCB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqCCB(char[+] x, char y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqCCB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] comaXCC(char[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[.] UTReverseXXB(int QUADio,double QUADct)
{ 
/*
 ?
*/
A_90=rotrXII( 5);
 A_92=sameIIB(5,A_90);
 r_0=( A_92);
 A_94=rotrXCC( 'x');
 A_96=sameCCB('x',A_94);
 A_97=comaBBB(r_0,A_96);
 r_1=( A_97);
 A_99=rot1XCC( 'x');
 A_101=sameCCB('x',A_99);
 A_102=comaBBB(r_1,A_101);
 r_2=( A_102);
 A_104=rotrXBB( false);
 A_106=sameBBB(false,A_104);
 A_107=comaBBB(r_2,A_106);
 r_3=( A_107);
 A_109=rot1XBB( false);
 A_111=sameBBB(false,A_109);
 A_112=comaBBB(r_3,A_111);
 r_4=( A_112);
 A_114=rotrXDD( 0.5);
 A_116=sameDDB(0.5,A_114,QUADct);
 A_117=comaBBB(r_4,A_116);
 r_5=( A_117);
 A_119=rot1XDD( 0.5);
 A_121=sameDDB(0.5,A_119,QUADct);
 A_122=comaBBB(r_5,A_121);
 r_6=( A_122);
 A_124=comaXBB( true);
 A_125=rotrXBB( A_124);
 A_126=comaXBB( true);
 A_128=sameBBB(A_126,A_125);
 A_129=comaBBB(r_6,A_128);
 r_7=( A_129);
 A_131=comaXBB( true);
 A_132=rot1XBB( A_131);
 A_133=comaXBB( true);
 A_135=sameBBB(A_133,A_132);
 A_136=comaBBB(r_7,A_135);
 r_8=( A_136);
 A_138=comaXII( 2);
 A_139=rotrXII( A_138);
 A_140=comaXII( 2);
 A_142=sameIIB(A_140,A_139);
 A_143=comaBBB(r_8,A_142);
 r_9=( A_143);
 A_145=comaXII( 2);
 A_146=rot1XII( A_145);
 A_147=comaXII( 2);
 A_149=sameIIB(A_147,A_146);
 A_150=comaBBB(r_9,A_149);
 r_10=( A_150);
 A_152=comaXDD( 2.5);
 A_153=rotrXDD( A_152);
 A_154=comaXDD( 2.5);
 A_156=sameDDB(A_154,A_153,QUADct);
 A_157=comaBBB(r_10,A_156);
 r_11=( A_157);
 A_159=comaXDD( 2.5);
 A_160=rot1XDD( A_159);
 A_161=comaXDD( 2.5);
 A_163=sameDDB(A_161,A_160,QUADct);
 A_164=comaBBB(r_11,A_163);
 r_12=( A_164);
 A_166=comaXCC( 'x');
 A_167=rotrXCC( A_166);
 A_168=comaXCC( 'x');
 A_170=sameCCB(A_168,A_167);
 A_171=comaBBB(r_12,A_170);
 r_13=( A_171);
 A_173=comaXCC( 'x');
 A_174=rot1XCC( A_173);
 A_175=comaXCC( 'x');
 A_177=sameCCB(A_175,A_174);
 A_178=comaBBB(r_13,A_177);
 r_14=( A_178);
 A_180=rotrXBB( [false,true,false,false]);
 A_181=rotrXBB( A_180);
 A_183=sameBBB([false,true,false,false],A_181);
 A_184=comaBBB(r_14,A_183);
 r_15=( A_184);
 A_186=rot1XBB( [false,true,false,false]);
 A_187=rot1XBB( A_186);
 A_189=sameBBB([false,true,false,false],A_187);
 A_190=comaBBB(r_15,A_189);
 r_16=( A_190);
 A_193=iotaXII( 5,QUADio);
 A_194=rotrXII( A_193);
 A_195=rotrXII( A_194);
 A_197=iotaXII( 5,QUADio);
 A_199=sameIIB(A_197,A_195);
 A_200=comaBBB(r_16,A_199);
 r_17=( A_200);
 A_203=iotaXII( 5,QUADio);
 A_204=rot1XII( A_203);
 A_205=rot1XII( A_204);
 A_207=iotaXII( 5,QUADio);
 A_209=sameIIB(A_207,A_205);
 A_210=comaBBB(r_17,A_209);
 r_18=( A_210);
 A_213=iotaXII( 20,QUADio);
 /* dsf scalar(s) */
A_214=plusDID(0.5,A_213);
 A_215=rotrXDD( A_214);
 A_216=rotrXDD( A_215);
 A_218=iotaXII( 20,QUADio);
 /* dsf scalar(s) */
A_219=plusDID(0.5,A_218);
 A_221=sameDDB(A_219,A_216,QUADct);
 A_222=comaBBB(r_18,A_221);
 r_19=( A_222);
 A_225=iotaXII( 20,QUADio);
 /* dsf scalar(s) */
A_226=plusDID(0.5,A_225);
 A_227=rot1XDD( A_226);
 A_228=rot1XDD( A_227);
 A_230=iotaXII( 20,QUADio);
 /* dsf scalar(s) */
A_231=plusDID(0.5,A_230);
 A_233=sameDDB(A_231,A_228,QUADct);
 A_234=comaBBB(r_19,A_233);
 r_20=( A_234);
 A_236=rotrXCC( ['a','b','c','d','e']);
 A_237=rotrXCC( A_236);
 A_239=sameCCB(['a','b','c','d','e'],A_237);
 A_240=comaBBB(r_20,A_239);
 r_21=( A_240);
 A_242=rot1XCC( ['a','b','c','d','e']);
 A_243=rot1XCC( A_242);
 A_245=sameCCB(['a','b','c','d','e'],A_243);
 A_246=comaBBB(r_21,A_245);
 r_22=( A_246);
 A_248=rhoIBB([2, 3],[false,true,false,true,false,true]);
b_0=( A_248);
 A_250=rotrXBB( b_0);
 A_251=rotrXBB( A_250);
 A_253=sameBBB(b_0,A_251);
 A_254=comaBBB(r_22,A_253);
 r_23=( A_254);
 A_256=rot1XBB( b_0);
 A_257=rot1XBB( A_256);
 A_259=sameBBB(b_0,A_257);
 A_260=comaBBB(r_23,A_259);
 r_24=( A_260);
 A_263=iotaXII( 20,QUADio);
 A_264=rhoIII([4, 5],A_263);
 b_1=( A_264);
 A_266=rotrXII( b_1);
 A_267=rotrXII( A_266);
 A_269=sameIIB(b_1,A_267);
 A_270=comaBBB(r_24,A_269);
 r_25=( A_270);
 A_272=rot1XII( b_1);
 A_273=rot1XII( A_272);
 A_275=sameIIB(b_1,A_273);
 A_276=comaBBB(r_25,A_275);
 r_26=( A_276);
 A_279=iotaXII( 30,QUADio);
 /* dsf scalar(s) */
A_280=plusBII(true,A_279);
 A_281=divXID( A_280);
 A_282=rhoIDD([5, 6],A_281);
 b_2=( A_282);
 A_284=rotrXDD( b_2);
 A_285=rotrXDD( A_284);
 A_287=sameDDB(b_2,A_285,QUADct);
 A_288=comaBBB(r_26,A_287);
 r_27=( A_288);
 A_290=rot1XDD( b_2);
 A_291=rot1XDD( A_290);
 A_293=sameDDB(b_2,A_291,QUADct);
 A_294=comaBBB(r_27,A_293);
 r_28=( A_294);
 A_296=quadavXXC( );
 A_297=quadavXXC( );
 A_300=iotaCCIQUADAV(A_297,'a',QUADio);
 A_301=dropICC(A_300,A_296);
 A_302=rhoICC([6, 7],A_301);
 b_3=( A_302);
 A_304=rotrXCC( b_3);
 A_305=rotrXCC( A_304);
 A_307=sameCCB(b_3,A_305);
 A_308=comaBBB(r_28,A_307);
 r_29=( A_308);
 A_310=rot1XCC( b_3);
 A_311=rot1XCC( A_310);
 A_313=sameCCB(b_3,A_311);
 A_314=comaBBB(r_29,A_313);
 r_30=( A_314);
 A_316=rhoIBB([2, 3, 4],[false,true]);
 b_4=( A_316);
 A_318=rotrXBB( b_4);
 A_319=rotrXBB( A_318);
 A_321=sameBBB(b_4,A_319);
 A_322=comaBBB(r_30,A_321);
 r_31=( A_322);
 A_324=rot1XBB( b_4);
 A_325=rot1XBB( A_324);
 A_327=sameBBB(b_4,A_325);
 A_328=comaBBB(r_31,A_327);
 r_32=( A_328);
 A_331=iotaXII( 120,QUADio);
 A_332=rhoIII([3, 4, 5],A_331);
 b_5=( A_332);
 A_334=rotrXII( b_5);
 A_335=rotrXII( A_334);
 A_337=sameIIB(b_5,A_335);
 A_338=comaBBB(r_32,A_337);
 r_33=( A_338);
 A_340=rot1XII( b_5);
 A_341=rot1XII( A_340);
 A_343=sameIIB(b_5,A_341);
 A_344=comaBBB(r_33,A_343);
 r_34=( A_344);
 /* dsf scalar(s) */
A_346=plusIDD(b_5,0.5);
 b_6=( A_346);
 A_348=rotrXDD( b_6);
 A_349=rotrXDD( A_348);
 A_351=sameDDB(b_6,A_349,QUADct);
 A_352=comaBBB(r_34,A_351);
 r_35=( A_352);
 A_354=rot1XDD( b_6);
 A_355=rot1XDD( A_354);
 A_357=sameDDB(b_6,A_355,QUADct);
 A_358=comaBBB(r_35,A_357);
 r_36=( A_358);
 A_360=quadavXXC( );
 A_361=rhoICC([3, 4, 5],A_360);
 b_7=( A_361);
 A_363=rotrXCC( b_7);
 A_364=rotrXCC( A_363);
 A_366=sameCCB(b_7,A_364);
 A_367=comaBBB(r_36,A_366);
 r_37=( A_367);
 A_369=rot1XCC( b_7);
 A_370=rot1XCC( A_369);
 A_372=sameCCB(b_7,A_370);
 A_373=comaBBB(r_37,A_372);
 r_38=( A_373);
 return(r_38);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 A_43=UTReverseXXB( QUADio_0,QUADct_0);
 r_0=( A_43);
 A_47=quadXBB( r_0,QUADpp_0,QUADpw_0);
 A_48=andslXBBQUICKSTOP( r_0);
 /* dsf scalar(s) */
A_52=barBBI(true,A_48);
r_1=( A_52);
 A_56=quadXII( A_52,QUADpp_0,QUADpw_0);
 return(r_1);
}


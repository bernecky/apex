/**********************************************************************
 *
 * SAC bug report: tjv21AKD.sacbugreport
 *
 **********************************************************************
 *
 * Automatically generated on Fri Aug 11 17:45:26 EDT 2017
 *
 * using sac2c 1.2-beta-BlackForest-573-g4bfd
 * built 2017-08-10T15:55:40.
 * by user sac on host rattler.
 *
 * The compiler was called by
 *  sac2c -v1 -O3 -dopogo -norelcf -check c tjv21AKD.sac -o tjv21AKD.sac.exe.docheckc.dopogo.norelcf.g4bfd
 *
 * The compiler crashed in
 *  phase: opt (Running SAC optimizations)
 *  sub phase: saacyc (Symbolic array attribute cycle 2)
 *  cycle phase: cse (Eliminating common subexpressions)
 *  cycle instance: 2
 *
 * What follows is the contents of tjv21AKD.sac.
 *
 **********************************************************************/

use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex2003/wss/sac3009.dws2012-01-09 16:54:45.700 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

inline int[+] minXDI(double[+] y,double QUADct)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : minXDI(toD(y[iv]), QUADct);
        } : genarray(shape(y), 0);
  return(z);
}

inline int barIII(int x, int y)
{ return(toI(x)-toI(y));
}

inline double barDDD(double x, double y)
{ return(toD(x)-toD(y));
}

inline double plusDDD(double x, double y)
{ return(toD(x)+toD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((toD(x) == toD(y)) || APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline int plusBBI(bool x, bool y)
{ return(toI(x)+toI(y));
}

inline bool[+] ltIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : ltIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[+] mpyIBI(int x, bool[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusIII(xel,yel);
        } : genarray(sx, 0);
  return(z);
}






inline bool[+] leIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : leIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[+] barIBI(int[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : barIBI(xel,yel);
        } : genarray(sx, 0);
  return(z);
}






inline double[+] mpyIDD(int[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : mpyIDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}






inline int[+] barIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] modIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : modIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] mpyDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : mpyDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] plusIDD(int[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusIDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}






inline double[+] plusDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] plusDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline int[.,.] tranXII(int[.,.] y)
{ /* Transpose on rank-2 */
        z = { [i,j] -> y[j,i] };
        return(z);
}

inline double[*] rhoIDD(int[.] x, double[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXDD(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with {
                (. <= [i] <= .)
                        : ry;
                } : genarray( [ncopies], ry);
        /* Now append the leftover bits */
        z = comaXDD(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int[*] rhoIII(int[.] x, int[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXII(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with {
                (. <= [i] <= .)
                        : ry;
                } : genarray( [ncopies], ry);
        /* Now append the leftover bits */
        z = comaXII(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[+] utakIII(int[.] x, int[+] y)
{ /* Vector represent non-scalar */
 yt = TRANSPOSE(y);
 cell = genarray(shape(x),0);
 z = with {
        (. <= iv <= .)
                : utakIII(x,yt[iv]);
        } : genarray(shape(yt), cell);
 return(TRANSPOSE(z));
}





inline int[+] slBII(bool[.] x, int[+] y)
{ /* last-axis vector compress/replicate matrix */
  /* This needs conformability check FIXME */
  /* Also, x may be one-element vector */
 frameshape = drop([-1],shape(y));
 cellshape  = take([1],shape(y));
 defcell = genarray(cellshape,0);

 z = with {
   (. <= iv <= .) : slBII( x, y[iv]);
   } : genarray( frameshape, defcell);

return(z);
}





inline int[+] sl1IIIONEEL(int x, int[+] y)
{ /* Scalar replicate non-scalar, first axis */
 xi = [toi(x)];
 cellshape = xi++drop([1],shape(y));
 defcell = genarray(cellshape,0);
 frameshape = take([1],shape(y));
 z = with {
        (. <= iv <= .)
                : genarray(xi,y[iv]);
        } : genarray(frameshape, defcell);

 zshape = [prod(take([2],shape(z)))]++drop([2],shape(z));
 z = reshape(zshape,z);
 return(z);
}

inline int[+] plusslXIIFOLD(int[+] y)
{ /* last axis reduce rank-2 or greater matrix w/folding */
  sy = shape(y);
  zrho = drop([-1], sy);
  z = with {
         (. <= iv <= .)
                : plusslXIIFOLD(y[iv]);
        } : genarray(zrho, 0);
  return(z);
}


inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : toD(y[lim-iv]);
       } :  fold( plusDDD, toD(0));
  return(z);
}


inline int minXDI(double y,double QUADct)
{ return(DFLOOR(y,QUADct));
}



inline bool ltIIB(int x, int y)
{ /* A<B on Boot/Int/Char */
  return(toI(x)<toI(y));
}

inline int mpyIII(int x, int y)
{ return(toI(x)*toI(y));
}

inline int plusIII(int x, int y)
{ return(toI(x)+toI(y));
}

inline bool leIIB(int x, int y)
{ /* A<=B on Boolean,int, char */
 return(toI(x) <= toI(y));
}

inline int barIBI(int x, bool y)
{ return(toI(x)-toI(y));
}

inline double mpyIDD(int x, double y)
{ return(toD(x)*toD(y));
}

inline int modIII(int x, int y)
{ /* SxS residue (aka modulo) */
  /* (x residue y) <-->   y-x times floor y divide x + 0 = x  */
 x = toi(x);
 y = toi(y);
 if (0 == x) {
   z = y;
 } else {
   q = y / x;
   z = y - ( x * q);
 }
 return(z);
}

inline double mpyDDD(double x, double y)
{ return(toD(x)*toD(y));
}

inline double plusIDD(int x, double y)
{ return(toD(x)+toD(y));
}

inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] barIBI(int x, bool[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : barIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] barIBI(int[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barIBI(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline double[+] mpyIDD(int x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : mpyDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] mpyIDD(int[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : mpyIDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] plusIDD(int x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] plusIDD(int[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
        z = reshape([prod(shape(y))],y);
        return(z);
}

inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
        z = reshape([prod(shape(y))],y);
        return(z);
}

inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
        z = reshape([prod(shape(y))],y);
        return(z);
}

inline int[.] utakIII(int[.] x, int y)
{ /* Non-floating Vector represent scalar */
  /* Taken from ISO Extended APL standard Draft N93.03, page 155 */
  wts = genarray(shape(x),toI(1));
  for(i=shape(x)[[0]]-2; i>=0; i--)
        wts[[i]] = wts[[i+1]] * toI(x[[i+1]]);
  z = genarray(shape(x),0);
  cy = toI(y);
  for(i=shape(x)[[0]]-1; i>=0; i--){
        z[[i]] = modIII(toI(x[[i]]),cy/wts[[i]]);
        /* Must use fuzz-less call to mod!! */
        /* Represent is NOT fuzzy (SAPL Ref Man p.6-47, 1991 */
        cy = cy - z[[i]] * wts[[i]];
  }
 return(z);
}



inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int[+] TRANSPOSE(int[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), 0);
  return(z);
}

inline int[.] slBII(bool[.] x, int[.] y)
{/* Boolean vector compress vector */
 zxrho = sum(toi(x));
 z = genarray([zxrho], 0);
 zi = 0;
 for(i=0; i<shape(x)[0]; i++)
   if ( x[i]) {
    z[[zi]] = y[[i]];
    zi++;
   }
 return(z);
}

inline int plusslXIIFOLD(int[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : toI(y[lim-iv]);
       } :  fold( plusIII, toI(0));
  return(z);
}


inline int DFLOOR(double y, double QUADct)
{ /* Fuzzy floor */
  /* Definition taken from SHARP APL Refman May 1991, p.6-23
   * floor:  n <- (signum y) times nofuzzfloor 0.5+abs y)
   *         z <- n-(QUADct times 1 max abs y)<(n-y)
   * If you want a double result,  write: "y - 1| y".
   */
   n = tod(floor(0.5+fabs(y)));
   if (y < 0.0)
        n = -n;
   else if (0.0 == y)
        n = 0.0;
   range = fabs(y);
   if (1.0 > range)
        range = 1.0;
   fuzzlim = QUADct*range;
   ny = n-y;
   if (fuzzlim < ny)
        z = n - 1.0;
   else
        z = n;
   return(toi(z));
}

inline int[.,.] STSCfloorXDI(double[.,.] y ,double QUADct)
{ 
/*
 ?
*/
A_23=minXDI( y,QUADct);
r_0=( A_23);
 return(r_0);
}

inline int[.] tjv21XII(int[.,.] ymd,double QUADct)
{ 
/*
 ?
*/
A_48=slBII([true,false,false],ymd);
 A_49=plusslXIIFOLD( A_48);
 yr_0=( A_49);
 A_54=slBII([false,true,false],ymd);
 A_55=plusslXIIFOLD( A_54);
 mo_0=( A_55);
 A_60=slBII([false,false,true],ymd);
 A_61=plusslXIIFOLD( A_60);
 day_0=( A_61);
 /* dsf scalar(s) */
A_67=ltIIB(yr_0,100);
 /* dsf scalar(s) */
A_68=mpyIBI(1900,A_67);
 /* dsf clique */
A_69=plusIII(yr_0,A_68);
 yr_1=( A_69);
 /* dsf scalar(s) */
A_72=leIIB(mo_0,2);
 /* dsf Check needed */
A_73=barIBI(yr_1,A_72);
 A_74=utakIII([0, 100],A_73);
 A_75=tranXII( A_74);
 yr_2=( A_75);
 A_77=rhoXII( yr_2);
 A_78=rhoIDD(A_77,[36524.25, 365.25]);
 /* dsf Check needed */
A_79=mpyIDD(yr_2,A_78);
 A_81=STSCfloorXDI( A_79,QUADct);
 A_82=plusslXIIFOLD( A_81);
 dno_0=( A_82);
 /* dsf scalar(s) */
A_87=barIII(mo_0,3);
 /* dsf scalar(s) */
A_89=modIII(12,A_87);
 /* dsf scalar(s) */
A_90=mpyDID(30.6,A_89);
 /* dsf Check needed */
A_91=plusIDD(day_0,A_90);
/* dsf scalar(s) */
A_92=plusDDD(0.41,A_91);
 A_94=STSCfloorCLONE4XDI( A_92,QUADct);
 /* dsf Check needed */
A_95=plusIII(dno_0,A_94);
dno_1=( A_95);
 return(dno_1);
}

inline double Bjv21IID(int n , int[.] ts,double QUADct,int QUADio)
{ 
/*
 ?
*/
/* dsf Scalar & clique */
A_31=barIII(2,2);
 r_0=( A_31);
 A_34=iotaXII( n,QUADio);
 A_CTR35_= 0;
A_CTR35z_ = (shape(A_34)[[0]])-1;
r_2=toD(r_0);
for(; A_CTR35_ <= A_CTR35z_; A_CTR35_++){
i_0 = A_34[[A_CTR35_]];
 A_37=rhoIII([1, 3],ts);
 A_38=sl1IIIONEEL(i_0,A_37);
 A_40=tjv21XII( A_38,QUADct);
 /* dsf Scalar & clique */
A_41=barDDD(0.5,0.5);
 /* dsf scalar(s) */
A_42=plusDID(A_41,A_40);
 A_43=plusslXDDFOLD( A_42);
 /* dsf Scalar & clique */
A_47=plusDDD(r_2,A_43);
 r_2=( A_47);
 }
 return(r_2);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 3000);
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_63=Bjv21IID(n_0,[2005, 11, 24],QUADct_0,QUADio_1);
 r_0=( A_63);
 A_67=quadXDD( r_0,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_68=barDDD(3295511130000.5,0.5);
 /* dsf scalar(s) */
A_70=eqDDB(r_0,A_68,QUADct_0);
 /* dsf scalar(s) */
A_71=plusBBI(true,A_70);
 r_1=( A_71);
 A_75=quadXII( A_71,QUADpp_1,QUADpw_1);
 return(r_1);
}

inline int[.] STSCfloorCLONE4XDI(double[.] y ,double QUADct)
{ 
/*
 ?
*/
A_23=minXDI( y,QUADct);
r_0=( A_23);
 return(r_0);
}



/**********************************************************************
 *
 * End of bug report
 *
 **********************************************************************/


use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3014.dws2013-03-19 17:23:59.172 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline double plusDID(double x, int y)
{ return(DtoD(x)+ItoD(y));
}

inline int maxIBI(int x, bool y)
{ /* x max y */
 return (max(ItoI(x),BtoI(y)));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline double barIDD(int x, double y)
{ return(ItoD(x)-DtoD(y));
}

inline double mpyIDD(int x, double y)
{ return(ItoD(x)*DtoD(y));
}

inline double divDID(double x, int y)
{ dx = DtoD(x);
  dy = ItoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool sameDDB(double x, double y,double QUADct)
{ /* Scalar match scalar */
  z = eqDDB(toD(x), toD(y), QUADct);
 return(z);
}



inline int CommandLineArgvXBI(bool y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((DtoD(x) == DtoD(y)) || APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline double loopfsXID(int n ,int QUADio)
{ 
/*
 ?
*/
/* dsf scalar(s) */
A_26=barDDD(2.5,2.5);
 r_0=( A_26);
 A_29=iotaXII( n,QUADio);
 A_CTR30_= 0;
A_CTR30z_ = (shape(A_29)[[0]])-1;
r_2=toD(r_0);
for(; A_CTR30_ <= A_CTR30z_; A_CTR30_++){
i_0 = A_29[[A_CTR30_]];
 /* dsf scalar(s) */
A_32=plusDID(r_2,i_0);
 r_2=( A_32);
 }
 return(r_2);
}

int main()
{ 
/*
 ?
*/
n=CommandLineArgvXBI( true);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 QUADct_1=( 1.0e-13);
 QUADrl_1=( 16807);
 /* dsf scalar(s) */
A_57=maxIBI(n,true);
 n_0=( A_57);
 A_60=loopfsXID( n_0,QUADio_1);
 r_0=( A_60);
 A_64=quadXDD( r_0,QUADpp_1,QUADpw_1);
 /* dsf Scalar & clique */
A_65=plusDDD(0.5,0.5);
/* dsf scalar(s) */
A_66=barIDD(n_0,A_65);
 /* dsf scalar(s) */
A_67=mpyIDD(n_0,A_66);
 /* dsf scalar(s) */
A_68=divDID(A_67,2);
 A_70=sameDDB(r_0,A_68,QUADct_1);
 /* dsf scalar(s) */
A_71=barBBI(true,A_70);
 r_1=( A_71);
 A_75=quadXII( A_71,QUADpp_1,QUADpw_1);
 return(r_1);
}


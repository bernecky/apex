
use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex2003/wss/sac2008.dws2008-02-21 13:13:13.493 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

inline double divXDD(double y)
{ return(1.0/tod(y));
}

inline double[+] modXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with {
   ( . <= iv <= .)
                : modXDD(toD(y[iv]));
         } : genarray(shape(y), 0.0d);
  return(z);
}

inline double[+] divXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with {
   ( . <= iv <= .)
                : divXDD(toD(y[iv]));
         } : genarray(shape(y), 0.0d);
  return(z);
}

inline int[+] barXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
   ( . <= iv <= .)
                : barXII(toI(y[iv]));
         } : genarray(shape(y), 0);
  return(z);
}

inline double divBBD(bool x, bool y)
{ dx = tod(x);
  dy = tod(y);
 if (dx == dy)
      z = 1.0d;
  else
      z = dx/dy;
  return(z);
}

inline bool eqDBB(double x, bool y, double QUADct)
{ /* A=B on doubles */
 return((toD(x) == toD(y)) || APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline double starIID(int x, int y)
{ return(pow(tod(x),tod(y)));
}

inline double mpyDDD(double x, double y)
{ return(toD(x)*toD(y));
}

inline bool leDDB(double x, double y, double QUADct)
{ /* Fuzzy <= */
 return((toD(x)<toD(y)) | APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline int plusIII(int x, int y)
{ return(toI(x)+toI(y));
}

inline double starDDD(double x, double y)
{ return(pow(tod(x),tod(y)));
}

inline bool leBDB(bool x, double y, double QUADct)
{ /* Fuzzy <= */
 return((toD(x)<toD(y)) | APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline int mpyIBI(int x, bool y)
{ return(toI(x)*toI(y));
}

inline int barBII(bool x, int y)
{ return(toI(x)-toI(y));
}

inline double mpyIDD(int x, double y)
{ return(toD(x)*toD(y));
}

inline double barDDD(double x, double y)
{ return(toD(x)-toD(y));
}

inline int plusIBI(int x, bool y)
{ return(toI(x)+toI(y));
}

inline bool eqDIB(double x, int y, double QUADct)
{ /* A=B on doubles */
 return((toD(x) == toD(y)) || APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline int plusBBI(bool x, bool y)
{ return(toI(x)+toI(y));
}

inline double[+] divDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("divDDD(double[+],double[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toD(x[iv]);
                    yel = toD(y[iv]);
            } : divDDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}







inline double[+] mpyDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("mpyDDD(double[+],double[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toD(x[iv]);
                    yel = toD(y[iv]);
            } : mpyDDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}







inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] starDID(double[+] x, int y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with {
        ( . <= iv <= .) {
              xel = toD(x[iv]);
    } : starDDD(xel,yel);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int[+] plusIBI(int x, bool[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] mpyDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : mpyDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] barDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("barDDD(double[+],double[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toD(x[iv]);
                    yel = toD(y[iv]);
            } : barDDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}







inline double[+] divDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with {
        ( . <= iv <= .) {
              xel = toD(x[iv]);
    } : divDDD(xel,yel);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
 n = shape(y);
 cell = 0;
 z = with {
         ( . <= iv <= .)
                : y[(n-1)-iv];
         } : genarray(n, cell);
 return(z);
}

inline double[.,.] tranXDD(double[.,.] y)
{ /* Transpose on rank-2 */
   z = { [i,j] -> y[j,i] };
       return(z);
}

inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline int[*] rhoCII(char[.] x, int[*] y)
{ /* Character-vector reshape anything. */
  /* Left argument must be empty vector! */
 if ( 0 != shape(x)[[0]]) {
   show(tochar("reshape domain error in rhoCII"));
 }
 z = reshape([prod(shape(y))], y);
 return(z[[0]]);
}

inline double[*] rhoIDD(int[.] x, double[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXDD(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with {
          (. <= [i] <= .)
                        : y;
           } : genarray( [ncopies], y);
        /* Now append the leftover bits */
        z = comaXDD(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int iotaDDI(double[.] x, double y,double QUADct,int QUADio)
{ /* Fuzzy Vector iota Scalar */
 sx = shape(x)[[0]];
 z = sx;
 for(i=0; i<sx; i++) {
   if (eqDDB(toD(x[[i]]),toD(y),QUADct)){
             z = i;
                 i = sx;
        }
 }
 return(z+QUADio);
}


inline bool[*] rhoIBB(int[.] x, bool y)
{ /* Vector reshape scalar to matrix) */
         zxrho = prod(toi(x)); /* Result element count */
       z = genarray([zxrho], y); /* allocate result */
        z = reshape(toi(x),z);
         return(z);
}

inline bool[*] rhoIBB(int[.] x, bool[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXBB(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with {
          (. <= [i] <= .)
                        : y;
           } : genarray( [ncopies], y);
        /* Now append the leftover bits */
        z = comaXBB(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int[.] rhoIII(int x, int y)
{ /* Scalar reshape scalar to vector) */
      z = genarray([toi(x)], y);
     return(z);
}

inline int[*] dropBII(bool x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.] takeBII(bool x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.] takeIII(int x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline double[.,.] takeIDD(int[.] x, double[.,.] y)
{ /* vector take matrix */
  return(take(toi(x),y));
}

inline double[*] dropIDD(int[.] x, double[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline double[*] dropIDD(int x, double[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[*] dropIII(int x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}


inline double[.] takeIDD(int x, double y)
{ /* Scalar take scalar */
  return(take([toi(x)],[y]));
}

inline int[2]  rhoXBI(bool[.,.] y)
{ /* Shape of matrix (rank-2) */
 return(shape(y));
}

inline int[2]  rhoXDI(double[.,.] y)
{ /* Shape of matrix (rank-2) */
 return(shape(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
  show(y);
       return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
  show(y);
       return(y);
}
inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline int[.] comaBII(bool x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline double[.] comaDDD(double x, double[.] y)
{/* SxV catenate first (or last) axis */
 return([toD(x)]++toD(y));
}

inline int[.] comaIII(int x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[.] comaIBI(int[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline int[*] indr(int[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),0);
 z = with {
  (. <= iv <= .)
                 : X[[I[iv]]];
  } : genarray(shape(I), defcell);
 return(z);
}





inline double[*] indr(double[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}



inline double[*] indr(double[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),0.0d);
 z = with {
  (. <= iv <= .)
                 : X[[I[iv]]];
  } : genarray(shape(I), defcell);
 return(z);
}





inline double[*] indr(double[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline double[+] indsx1(double[+] X, int [+] I1, bool[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[i0,I1[[i1]]]]=tod(Y[[i0,i1]]);

 }
 }

 return(z);
}



inline int[+] inds1(int[+] X, int [+] I0, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = toi(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=toi(Y[[i0]]);

 }

 return(z);
}



inline double[+] indsx1(double[+] X, int [+] I1, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[i0,I1[[i1]]]]=tod(Y[[i0,i1]]);

 }
 }

 return(z);
}



inline double[+] inds1x(double[+] X, int [+] I0, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=tod(Y[[i0]]);

 }

 return(z);
}



inline double[+] inds11(double[+] X, int [+] I0,int [+] I1, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[I0[[i0]],I1[[i1]]]]=tod(Y[[i0,i1]]);

 }
 }

 return(z);
}



inline double[+] inds00(double[+] X, int  I0,int  I1, double Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = tod(X);
 Y = Yin;

 
 z[[I0,I1]]=tod(Y);

 
 return(z);
}



inline double[+] inds0x(double[+] X, int  I0, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 
 z[[I0]]=tod(Y);

 
 return(z);
}



inline double[*] jotdotmpyDDD(double [+] x, double [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0.0d);
 z = with {
  (. <= iv <= .) {
        xitem = toD(x[iv]);
         } : mpyDDD(xitem, toD(y));
  } : genarray(shape(x), cell);
 return(z);
}

inline bool[*] jotdoteqIIB(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), false);
 z = with {
  (. <= iv <= .) {
        xitem = toI(x[iv]);
         } : eqIIB(xitem, toI(y));
  } : genarray(shape(x), cell);
 return(z);
}

inline double[*] plusdotmpyDDDTRANSPOSE(double[.] x, double[*] y)
{ /* TRANSPOSE case of inner product z = vector_f.g y */
 yt = toD(TRANSPOSE(y));
 xct = toD(x);
 /* if (1 != shape(xct)[[0]]) FIXME; length error check */

 shp = drop([-1],shape(xct)) ++ drop([1], shape(y));
 z = with {
        (. <= iv <= .) {
               vx = xct[take([dim(x)-1], iv)];
                vy = yt[ reverse(take([1-dim(y)], iv))];
       } : plusslXDDFOLD(mpyDDDsl(vx,vy));
       } :genarray(shp, 0.0d);
 return(z);
}




inline double[+] maxslXDDFOLD(double[+] y)
{ /* last axis reduce rank-2 or greater matrix w/folding */
  sy = shape(y);
  zrho = drop([-1], sy);
  z = with {
        (. <= iv <= .)
               : maxslXDDFOLD(y[iv]);
   } : genarray(zrho, 0.0d);
  return(z);
}


inline double[.] maxsl1XDDFOLD(double[.,.] y)
{ /* first-axis reduce rank-2 matrix */
  yt = TRANSPOSE(y);
  zrho = drop([-1], shape(yt));
  z = with {
  (. <= iv <= .)
                 : maxslXDDFOLD(yt[iv]);
    } : genarray(zrho, 0.0d);
  return(z);
}




inline double maxslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
     (0*shape(y) <= iv < shape(y))
                 : toD(y[lim-iv]);
       } :  fold( maxDDD, toD(mindouble()));
  return(z);
}


inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
     (0*shape(y) <= iv < shape(y))
                 : toD(y[lim-iv]);
       } :  fold( plusDDD, toD(0));
  return(z);
}


inline double modXDD(double y)
{ return(abs(toD(y)));
}

inline int barXII(int y)
{ return(-y);
}

inline double divDDD(double x, double y)
{ dx = tod(x);
  dy = tod(y);
 if (dx == dy)
      z = 1.0d;
  else
      z = dx/dy;
  return(z);
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((toD(x) == toD(y)) || APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline double maxDDD(double x, double y)
{ /* x max y */
 return (max(toD(x),toD(y)));
}

inline double plusDDD(double x, double y)
{ return(toD(x)+toD(y));
}

inline double[+] divDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : divDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] mpyDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with {
        ( . <= iv <= .) {
              xel = toD(x[iv]);
    } : mpyDDD(xel,yel);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] barDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : barDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] barDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with {
        ( . <= iv <= .) {
              xel = toD(x[iv]);
    } : barDDD(xel,yel);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline double[+] mpyDDDsl(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("mpyDDDsl(double[+],double[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toD(x[iv]);
                    yel = toD(y[iv]);
            } : mpyDDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}







inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
    (. <= iv <= .)
                 : indrfr0(X[iv], I);
   } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
   (. <= iv <= .)
                 : sel( I[iv], X);
      } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
       (. <= iv <= .)
                 : sel( I, X[iv]);
      } : genarray(frameshape, cell);
 return(z);
}


inline double[*] indrfr(int fr, double[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
    (. <= iv <= .)
                 : indrfr0(X[iv], I);
   } : genarray(frameshape, cell);
 return(z);
}

inline double[*] indrfr0(double[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
   (. <= iv <= .)
                 : sel( I[iv], X);
      } : genarray(shape(I), cell);
 return(z);
}



inline double[*] indrfr(int fr, double[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0.0d);
 z = with {
       (. <= iv <= .)
                 : sel( I, X[iv]);
      } : genarray(frameshape, cell);
 return(z);
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int[.] DSFLenErrorCheck(int[.] sx, int[.] sy, char[.] whodunit)
{ /* Dyadic scalar fn length error check */
     z = sx;
#ifdef GENME
/* SAC bug #306 - side effect kills fold!  */
    if (any(sx != sy)) { /* Check that shapes match */
   show(tochar("APEX dyadic scalar function length error in function"));
  show(whodunit);
        show(sx); show(sy);
    }
#endif
     return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* Array bounds checker for indexed ref  X[nonscalarI] and indexed assign */
 z = I;
#ifdef BOUNDSCHECKING
 bad = with {
     ((0*shape(z)) <= iv < shape(z))
                : (z[iv] < 0) || (z[iv] >= Xshape);
    }: fold(|, false);
 if (bad)
  print(tochar("APEX index error!"));
#endif
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* Array bounds checker for indexed ref X[scalarI] and indexed assign */
 z = I;
#ifdef BOUNDSCHECKING
 /* This needs more thought... */
  if ( (I < 0) || (I >= Xshape)) {
         print(tochar("APEX index error!"));
  }
#endif
 return(z);
}

inline double[+] TRANSPOSE(double[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                 : y[reverse( iv)];
    }: genarray( reverse( shape(y)), 0.0d);
  return(z);
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(toI(x) == toI(y));
}

inline bool SingularXBB(bool y ,double QUADct)
{ 
/*
  z{<-}Singular y;j
 @ We expect a Boolean scalar y
  j{<-}1{divide}y
  z{<-}j=1
 
*/
/* dsf scalar(s) */
A_22=divBBD(true,y);
 j_0=( A_22);
 /* dsf scalar(s) */
A_25=eqDBB(j_0,true,QUADct);
z_0=( A_25);
 return(z_0);
}

inline double[.,.] lsBDD(bool[.,.] b, double[.,.] a,double QUADct,int QUADio)
{ 
/*
  z{<-}b ls a;i;j;sigma;alfa;aii;pp;pi;np;factor;eps;mv;m;n;u;ta;tb;tc;td;p;sink;t1
 @{#}pragma noline
 @{#} Above because inlining kills sac2c 2006-07-30
 @ M.A. Jenkins.
 @IBM Tech Report 320-2989
 @ Modified for formatting and
 @ to avoid use of globals, glueing.
 @ Householder triangularization
 @of m{times}n matrix for linear
 @ systems and least squares.
 @ Does row, column interchanges,
 @scales columns near unity.
 @ assumes ({rho}{rho}a)=({rho}{rho}b)=2
 @ Modified 1995-05-22 to be origin 0/rbe
  p{<-}1{drop}{rho}b
  m{<-}1{take}{rho}a
  n{<-}''{rho}{neg}1{take}{rho}a  @ Make scalar. rbe 2006-09-18
  pp{<-}{iota}n
  factor{<-}{divide}{max}{slashbar}|a{divide}{transpose}({reverse}{rho}a){rho}mv{<-}{max}/|a
  a{<-}a{times}({rho}a){rho}factor
  a{<-}(m,np{<-}n+p){take}a
  a[;n+{iota}p]{<-}b
  eps{<-}(16*{neg}13){times}{max}/mv
  :For i :In {iota}n
      mv{<-}{max}{slashbar}|(0,-p){drop}(i,i){drop}a
      sink{<-}Singular eps{<=}{max}/mv
      pi{<-}i+mv{iota}{max}/mv
      pp[i,pi]{<-}pp[pi,i]
      a[;i,pi]{<-}a[;pi,i]
      pi{<-}i+(|i{drop}a[;i]){iota}{max}/|i{drop}a[;i]
      a[i,pi;]{<-}a[pi,i;]
      sigma{<-}+/(i{drop}a[;i])*2
      aii{<-}a[i;i]
      alfa{<-}(1-2{times}0{<=}aii){times}sigma*0.5
      u{<-}a[i;i]-alfa
      ta{<-}(u,(i+1){drop}a[;i])+.{times}(i+0 1){drop}a
      tb{<-}{divide}sigma-aii{times}alfa
      tc{<-}(u,(i+1){drop}a[;i]){jot}.{times}tb{times}ta
      td{<-}((i+0 1){drop}a)-tc
      a[i{drop}{iota}m;(i+1){drop}{iota}np]{<-}td
      a[i;i]{<-}alfa
  :EndFor
 @
  z{<-}(n,p){rho}0
 @
  :For i :In {reverse}{iota}n
  @@@@@@ circumvent osc bug 1995-10-28
  @@@@@t1{<-}(n{drop}a[i;])-(n{take}a[i;])+.{times}z
      t1{<-}(n{drop}a[i;])-(a[i;{iota}n])+.{times}z
      z[i;]{<-}t1{divide}a[i;i]
  :EndFor
 @
  z[pp;]{<-}z @ Previously used upgrade. 1995-10-21
  z{<-}z{times}{transpose}({reverse}{rho}z){rho}factor
 
*/
A_113=rhoXBI( b);
 A_114=dropBII(true,A_113);
 p_0=( A_114);
 A_116=rhoXDI( a);
 A_117=takeBII(true,A_116);
 m_0=( A_117);
 A_119=rhoXDI( a);
 A_120=takeIII(-1,A_119);
 A_121=rhoCII([:char],A_120);
 n_0=( A_121);
 A_124=iotaXII( n_0,QUADio);
 pp_0=( A_124);
 A_126=modXDD( a);
 A_127=maxslXDDFOLD( A_126);
 mv_0=( A_127);
 A_132=rhoXDI( a);
 A_133=rotrXII( A_132);
 A_134=rhoIDD(A_133,A_127);
 A_135=tranXDD( A_134);
 /* dsf Check needed */
A_136=divDDD(a,A_135);
 A_137=modXDD( A_136);
 A_138=maxsl1XDDFOLD( A_137);
 A_142=divXDD( A_138);
 factor_0=( A_142);
 A_144=rhoXDI( a);
 A_145=rhoIDD(A_144,factor_0);
 /* dsf Check needed */
A_146=mpyDDD(a,A_145);
 a_0=( A_146);
 /* dsf scalar(s) */
A_148=plusIII(n_0,p_0);
 np_0=( A_148);
 A_150=comaIII(m_0,A_148);
 A_151=takeIDD(A_150,a_0);
 a_1=( A_151);
 A_154=iotaXII( p_0,QUADio);
 /* dsf scalar(s) */
A_155=plusIII(n_0,A_154);
 A_156= ABC(toi(A_155)-QUADio,shape(a_1)[1]);
A_159=indsx1(a_1,A_156,b);
 a_2=( A_159);
 A_161=maxslXDDFOLD( mv_0);
 /* dsf scalar(s) */
A_165=starIID(16,-13);
 /* dsf scalar(s) */
A_166=mpyDDD(A_165,A_161);
 eps_0=( A_166);
 A_169=iotaXII( n_0,QUADio);
 A_CTR170_= 0;
A_CTR170z_ = (shape(A_169)[[0]])-1;
a_7=tod(a_2);
pp_2=toi(pp_0);
i_0=toi(0);
for(; A_CTR170_ <= A_CTR170z_; A_CTR170_++){
i_0 = A_169[[A_CTR170_]];
 A_176=comaIII(i_0,i_0);
 A_177=dropIDD(A_176,a_7);
 A_178=barXII( p_0);
 A_179=comaBII(false,A_178);
 A_180=dropIDD(A_179,A_177);
 A_181=modXDD( A_180);
 A_182=maxsl1XDDFOLD( A_181);
 mv_2=( A_182);
 A_187=maxslXDDFOLD( mv_2);
 /* dsf scalar(s) */
A_192=leDDB(eps_0,A_187,QUADct);
 A_194=SingularXBB( A_192,QUADct);
 sink_0=( A_194);
 A_196=maxslXDDFOLD( mv_2);
 A_202=iotaDDI(mv_2,A_196,QUADct,QUADio);
 /* dsf scalar(s) */
A_203=plusIII(i_0,A_202);
 pi_1=( A_203);
 A_205=comaIII(pi_1,i_0);
 A_206= ABC(toi(A_205)-QUADio,shape(pp_2)[0]);
A_208=indr(pp_2,A_206);
 A_209=comaIII(i_0,pi_1);
 A_210= ABC(toi(A_209)-QUADio,shape(pp_2)[0]);
A_212=inds1(pp_2,A_210,A_208);
 pp_2=( A_212);
 A_214=comaIII(pi_1,i_0);
 A_215= ABC(toi(A_214)-QUADio,shape(a_7)[1]);
A_218=indrfr(1,a_7,A_215);
 A_219=comaIII(i_0,pi_1);
 A_220= ABC(toi(A_219)-QUADio,shape(a_7)[1]);
A_223=indsx1(a_7,A_220,A_218);
 a_4=( A_223);
 A_225= ABC(toi(i_0)-QUADio,shape(a_4)[1]);
A_228=indrfr(1,a_4,A_225);
 A_229=dropIDD(i_0,A_228);
 A_230=modXDD( A_229);
 A_231=maxslXDDFOLD( A_230);
 A_235= ABC(toi(i_0)-QUADio,shape(a_4)[1]);
A_238=indrfr(1,a_4,A_235);
 A_239=dropIDD(i_0,A_238);
 A_240=modXDD( A_239);
 A_243=iotaDDI(A_240,A_231,QUADct,QUADio);
 /* dsf scalar(s) */
A_244=plusIII(i_0,A_243);
 pi_2=( A_244);
 A_246=comaIII(pi_2,i_0);
 A_248= ABC(toi(A_246)-QUADio,shape(a_4)[0]);
A_250=indr(a_4,A_248);
 A_251=comaIII(i_0,pi_2);
 A_253= ABC(toi(A_251)-QUADio,shape(a_4)[0]);
A_255=inds1x(a_4,A_253,A_250);
 a_5=( A_255);
 A_257= ABC(toi(i_0)-QUADio,shape(a_5)[1]);
A_260=indrfr(1,a_5,A_257);
 A_261=dropIDD(i_0,A_260);
 /* dsf scalar(s) */
A_262=starDID(A_261,2);
 A_263=plusslXDDFOLD( A_262);
 sigma_0=( A_263);
 A_269= ABC(toi(i_0)-QUADio,shape(a_5)[0]);
A_268= ABC(toi(i_0)-QUADio,shape(a_5)[1]);
A_271=a_5[[A_269,A_268]];
 aii_0=( A_271);
 /* dsf scalar(s) */
A_273=starDDD(sigma_0,0.5);
 /* dsf scalar(s) */
A_275=leBDB(false,aii_0,QUADct);
 /* dsf scalar(s) */
A_276=mpyIBI(2,A_275);
 /* dsf scalar(s) */
A_277=barBII(true,A_276);
 /* dsf scalar(s) */
A_278=mpyIDD(A_277,A_273);
 alfa_0=( A_278);
 A_281= ABC(toi(i_0)-QUADio,shape(a_5)[0]);
A_280= ABC(toi(i_0)-QUADio,shape(a_5)[1]);
A_283=a_5[[A_281,A_280]];
 /* dsf scalar(s) */
A_284=barDDD(A_283,alfa_0);
 u_0=( A_284);
 /* dsf scalar(s) */
A_286=plusIBI(i_0,[false,true]);
 A_287=dropIDD(A_286,a_5);
 A_288= ABC(toi(i_0)-QUADio,shape(a_5)[1]);
A_291=indrfr(1,a_5,A_288);
 /* dsf scalar(s) */
A_292=plusIBI(i_0,true);
 A_293=dropIDD(A_292,A_291);
 A_294=comaDDD(u_0,A_293);
 A_295=plusdotmpyDDDTRANSPOSE(A_294,A_287);
 ta_0=( A_295);
 /* dsf scalar(s) */
A_303=mpyDDD(aii_0,alfa_0);
 /* dsf scalar(s) */
A_304=barDDD(sigma_0,A_303);
 A_305=divXDD( A_304);
 tb_0=( A_305);
 /* dsf scalar(s) */
A_307=mpyDDD(tb_0,ta_0);
 A_308= ABC(toi(i_0)-QUADio,shape(a_5)[1]);
A_311=indrfr(1,a_5,A_308);
 /* dsf scalar(s) */
A_312=plusIBI(i_0,true);
 A_313=dropIDD(A_312,A_311);
 A_314=comaDDD(u_0,A_313);
 A_315=jotdotmpyDDD(A_314,A_307);
 tc_0=( A_315);
 /* dsf scalar(s) */
A_323=plusIBI(i_0,[false,true]);
 A_324=dropIDD(A_323,a_5);
 /* dsf Check needed */
A_325=barDDD(A_324,tc_0);
 td_0=( A_325);
 A_328=iotaXII( np_0,QUADio);
 /* dsf scalar(s) */
A_329=plusIBI(i_0,true);
 A_330=dropIII(A_329,A_328);
 A_332=iotaXII( m_0,QUADio);
 A_333=dropIII(i_0,A_332);
 A_335= ABC(toi(A_333)-QUADio,shape(a_5)[0]);
A_334= ABC(toi(A_330)-QUADio,shape(a_5)[1]);
A_337=inds11(a_5,A_335,A_334,td_0);
 a_6=( A_337);
 A_340= ABC(toi(i_0)-QUADio,shape(a_6)[0]);
A_339= ABC(toi(i_0)-QUADio,shape(a_6)[1]);
A_342=inds00(a_6,A_340,A_339,alfa_0);
 a_7=( A_342);
 }
 A_345=comaIII(n_0,p_0);
 A_346=rhoIBB(A_345,false);
 z_0=( A_346);
 A_349=iotaXII( n_0,QUADio);
 A_350=rotrXII( A_349);
 A_CTR351_= 0;
A_CTR351z_ = (shape(A_350)[[0]])-1;
i_1=toi(i_0);
z_2=tod(z_0);
for(; A_CTR351_ <= A_CTR351z_; A_CTR351_++){
i_1 = A_350[[A_CTR351_]];
 A_355=iotaXII( n_0,QUADio);
 A_357= ABC(toi(i_1)-QUADio,shape(a_7)[0]);
A_356= ABC(toi(A_355)-QUADio,shape(a_7)[1]);
A_359=indr(indrfr(1,a_7,A_356),A_357);
 A_360=plusdotmpyDDDTRANSPOSE(A_359,z_2);
 A_368= ABC(toi(i_1)-QUADio,shape(a_7)[0]);
A_370=a_7[[A_368]];
 A_371=dropIDD(n_0,A_370);
 /* dsf Check needed */
A_372=barDDD(A_371,A_360);
 t1_0=( A_372);
 A_375= ABC(toi(i_1)-QUADio,shape(a_7)[0]);
A_374= ABC(toi(i_1)-QUADio,shape(a_7)[1]);
A_377=a_7[[A_375,A_374]];
 /* dsf scalar(s) */
A_378=divDDD(t1_0,A_377);
 A_380= ABC(toi(i_1)-QUADio,shape(z_2)[0]);
A_382=inds0x(z_2,A_380,A_378);
 z_2=( A_382);
 }
 A_386= ABC(toi(pp_2)-QUADio,shape(z_2)[0]);
A_388=inds1x(z_2,A_386,z_2);
 z_3=( A_388);
 A_390=rhoXDI( z_3);
 A_391=rotrXII( A_390);
 A_392=rhoIDD(A_391,factor_0);
 A_393=tranXDD( A_392);
 /* dsf Check needed */
A_394=mpyDDD(z_3,A_393);
 z_4=( A_394);
 return(z_4);
}

inline double[.,.] dmdBDD(bool[.,.] b, double[.,.] a,double QUADct,int QUADio)
{ 
/*
  z{<-}b dmd a;v;m;n
 @ Dyadic matrix divide using Householder
 @ triangularization.
 @@@@@@@v{<-}Ranerr ~(2{/=}{rho}{rho}a){or}^/ 1 2 {/=}{rho}{rho}b
 @@@@v{<-}Lenerr ~((1{take}{rho}a){/=}1{take}{rho}b){or}(m{<-}1{take}{rho}a)<(n{<-}1{drop}{rho}a)
 @@@@@v{<-}1={rho}{rho}b
  b{<-}(2{take}({rho}b),1){rho}b
  z{<-}b ls a
 @@:if v @ These for ISO-compliant
 @@  z{<-},z @ version that won't compile.
 @@ :endif
 
*/
A_25=rhoXBI( b);
 A_26=comaIBI(A_25,true);
 A_27=takeIII(2,A_26);
 A_28=rhoIBB(A_27,b);
 b_0=( A_28);
 A_32=lsBDD(b_0,a,QUADct,QUADio);
z_0=( A_32);
 return(z_0);
}

inline double[.,.] mmdXDD(double[.,.] a ,double QUADct,int QUADio)
{ 
/*
  z{<-}mmd a
 @Computes inverse by calling dmd with an
 @ identity matrix as left argument.
  z{<-}(({iota}1{take}{rho}a){jot}.={iota}1{take}{rho}a)dmd a
 
*/
A_20=rhoXDI( a);
 A_21=takeBII(true,A_20);
 A_23=iotaXII( A_21,QUADio);
 A_24=rhoXDI( a);
 A_25=takeBII(true,A_24);
 A_27=iotaXII( A_25,QUADio);
 A_28=jotdoteqIIB(A_27,A_23);
 A_38=dmdBDD(A_28,a,QUADct,QUADio);
z_0=( A_38);
 return(z_0);
}

inline double mdivXID(int n ,double QUADct,int QUADio)
{ 
/*
  r{<-}mdiv n;x
  x{<-}((2{rho}n){rho}(n+1){take}1.5-0.5) @ Id n
  r{<-}+/,|mmd x
 
*/
/* dsf scalar(s) */
A_26=barDDD(1.5,0.5);
/* dsf scalar(s) */
A_27=plusIBI(n,true);
A_28=takeIDD(A_27,A_26);
 A_29=rhoIII(2,n);
 A_30=rhoIDD(A_29,A_28);
 x_0=( A_30);
 A_34=mmdXDD( x_0,QUADct,QUADio);
 A_35=modXDD( A_34);
 A_36=comaXDD( A_35);
 A_37=plusslXDDFOLD( A_36);
 r_0=( A_37);
 return(r_0);
}

int main()
{ 
/*
  r{<-}main;#IO;#RL;n;#PP;#PW
  #IO{<-}0
  #PP{<-}16
  #PW{<-}80
  n{<-}300
  #RL{<-}16807
  #{<-}r{<-}mdiv n
  #{<-}r{<-}1+r=n
 
*/
QUADio_0=toi(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toi(( false));
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 n_0=( 300);
 QUADrl_1=( 16807);
 A_57=mdivXID( n_0,QUADct_0,QUADio_1);
 r_0=( A_57);
 A_61=quadXDD( A_57,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_63=eqDIB(r_0,n_0,QUADct_0);
/* dsf scalar(s) */
A_64=plusBBI(true,A_63);
 r_1=( A_64);
 A_68=quadXII( A_64,QUADpp_1,QUADpw_1);
 return(r_1);
}


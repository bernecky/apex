use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3013.dws2012-11-07 10:35:30.204 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline double barIDD(int x, double y)
{ return(ItoD(x)-DtoD(y));
}

inline double mpyIDD(int x, double y)
{ return(ItoD(x)*DtoD(y));
}

inline double mpyDDD(double x, double y)
{ return(DtoD(x)*DtoD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((DtoD(x) == DtoD(y)) || APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double[+] plusIDD(int[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline bool[.] rhoIBB(int x, bool[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIBB( [toi(x)],y);
 return(z);
}



inline bool[.] takeIBB(int x, bool y)
{ /* Scalar take scalar */
  return(take([toi(x)],[y]));
}

inline int[.] ugrdXBI(bool[.] y, int QUADio)
{ /* Upgrade of boolean-valued vector */
  /* ((~y)/iota rho y),y/iota rho y */
  /* Model upgradeBV2 from workspace 42 upgrade: rbe/2005-12-11 */
/*
        z{<-}upgradeBV2 bv;s;n0;n1;i
        @ upgrade boolean vector
        s{<-}+/bv
        z{<-}({rho}bv){rho}{neg}1
        n0{<-}0
        n1{<-}({rho}bv)[0]-s
        :for i :in {iota}{rho}bv
         :if ~bv[i]
          z[n0]{<-}i
          n0{<-}n0+1
         :else
          z[n1]{<-}i
          n1{<-}n1+1
         :endif
        :endfor
*/

 s = sum(toi(y));
 shpy = shape(y)[[0]];
 z = genarray(shape(y),-1);
 n0 = 0;
 n1 = shpy-s;
 for(i=0; i<shpy; i++){
   if (false == toB(y[[i]]))
        {z[[n0]] = i; n0++;}
   else
        {z[[n1]] = i; n1++;}
 }
 return(z+QUADio);
}


inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int CommandLineArgvXBI(bool y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : DtoD(y[lim-iv]);
       } :  fold( plusDDD, ItoD(0));
  return(z);
}


inline double plusIDD(int x, double y)
{ return(ItoD(x)+DtoD(y));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

int main()
{ 
/*
 ?
*/
n=CommandLineArgvXBI( true);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 A_56=takeIBB(200,true);
 A_57=rhoIBB(n,A_56);
 k_0=( A_57);
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_63=ugrdXBI( k_0,QUADio_1);
 r_0=( A_63);
 /* dsf scalar(s) */
A_65=barDDD(0.5,0.5);
 /* dsf scalar(s) */
A_66=plusIDD(r_0,A_65);
 A_67=plusslXDDFOLD( A_66);
 r_1=( A_67);
 A_74=quadXDD( A_67,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_75=barDDD(1.5,0.5);
 /* dsf scalar(s) */
A_76=barIDD(n,A_75);
 /* dsf scalar(s) */
A_77=mpyIDD(n,A_76);
 /* dsf scalar(s) */
A_78=mpyDDD(0.5,A_77);
 /* dsf scalar(s) */
A_80=eqDDB(r_1,A_78,QUADct_0);
/* dsf scalar(s) */
A_81=barBBI(true,A_80);
 r_2=( A_81);
 A_85=quadXII( r_2,QUADpp_1,QUADpw_1);
 return(r_2);
}


use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3014.dws2012-11-15 10:12:52.041 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int minXDI(double y,double QUADct)
{ return(DFLOOR(y,QUADct));
}



inline int minXII(int y)
{ return(y);
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline int starIII(int x, int y)
{  /* number to integer power */
  z = ItoI( 1);
  for( i=0; i<ItoI( y); i++) {
    z = z * ItoI(x);
  }
  return( z);
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline int modIII(int x, int y)
{ /* SxS residue (aka modulo) */
  /* (x residue y) <-->   y-x times floor y divide x + 0 = x  */
  /* See model residueI in workspace UTDScalarI.dws */
  x = ItoI(x);
  y = ItoI(y);
  if( 0 != x) {
    q = y / x;
    z = y - ( x * q);
  } else {
    z = y;
  }

  if( z != 0) {
    if( mpyXII( x) != mpyXII( y)) {
      z = z + x;
    }
  }
 return(z);
}


inline double divIID(int x, int y)
{ dx = ItoD(x);
  dy = ItoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline int barIBI(int x, bool y)
{ return(ItoI(x)-BtoI(y));
}

inline int plusBBI(bool x, bool y)
{ return(BtoI(x)+BtoI(y));
}

inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] barIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : barIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[.] comaXII(int[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline int[.] comaXII(int y)
{ /* Ravel of scalar */
        return([y]);
}

inline int[.] rhoIII(int x, int[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIII( [toi(x)],y);
 return(z);
}


inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[.] takeIII(int x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[+], int querXII(int[+] y, int QUADio, int QUADrl)
{ /* Monadic query (roll) - non=scalar */
 zxrho = prod(shape(y));
 ravely = reshape([zxrho], y);
 inty = toi(y);
 if (any(inty <= 0)) print(tochar("roll domain error"));
 /* The following presumes ordering, so we use FOR loop. Sorry */
 z = genarray([zxrho], -1);
 for (i=0; i<zxrho; i++) {
        QUADrl = Lehmer(QUADrl);
        val = (tod(QUADrl) * tod(ravely[[i]])) / tod(2147483647);
        z[[i]] =  QUADio + toi(val);
 }
 z = reshape(shape(y), z);
 return(z, QUADrl);
}



inline int[.], int querIII(int x, int y, int QUADio, int QUADrl)
{ /* Dyadic query (deal) - scalar */
  /* This allocates an array of shape y. If this
   * causes you memory grief, use the algorithm in workspace 42 query,
   * or use smaller y!
   */
 intx = toi(x);
 inty = toi(y);
 shpz = toi(x);
 z = iota (inty);

 for( i=0; i<intx; i++) {
        /* Interchange z[i] with z[i + ? y - i] */
        rand, QUADrl = querXII(inty -i, 0, QUADrl);
        c = i + rand;
        if ( c < shpz) {
                tmp    = z[[c]];
                z[[c]] = z[[i]];
                z[[i]] = tmp;
        }
 }
 z = take([intx], z);
 return(z + QUADio, QUADrl);
}


inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[0] rhoXII(int y)
{ /* Shape of scalar */
 return(shape(y));
}

inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toB(x)++toB(y));
}

inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[+] inds0(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline int mpyslXIIQUICKSTOP(int[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : ItoI(y[iv]);
        } : foldfix( mpyIII, ItoI(1), ItoI(0));
  return(z);
}


inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int mpyXII(int y)
{ /* signum int/double */
   if( toI(0) == y) {
    z = 0;
  } else {
    if( toI(0) < y) {
      z = 1;
    } else {
      z = -1;
    }
  }
  return(z);
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sx, false);
  return(z);
}






inline int, int querXII(int y, int QUADio, int QUADrl)
{ /* Monadic query (roll) -  scalar */
 inty = toi(y);
 if (inty <= 0) print(tochar("roll domain error"));
 QUADrl = Lehmer(QUADrl);
 z = (tod(QUADrl) * tod(inty)) / tod(2147483647);
 return(toi(z) + QUADio, QUADrl);
}



inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int DFLOOR(double y, double QUADct)
{ /* Fuzzy floor */
  /* Definition taken from SHARP APL Refman May 1991, p.6-23
   * floor:  n <- (signum y) times nofuzzfloor 0.5+abs y)
   *         z <- n-(QUADct times 1 max abs y)<(n-y)
   * If you want a double result,  write: "y - 1| y".
   */
   n = tod(floor(0.5+fabs(y)));
   if (y < 0.0)
        n = -n;
   else if (0.0 == y)
        n = 0.0;
   range = fabs(y);
   if (1.0 > range)
        range = 1.0;
   fuzzlim = QUADct*range;
   ny = n-y;
   if (fuzzlim < ny)
        z = n - 1.0;
   else
        z = n;
   return(toi(z));
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline int Lehmer(int qrl)
{ /* Lehmer's random number generator
   * CACM 1966-06, p. 432
   */
  val = tod(qrl)*16807.0;
  z = toi(sacmod(val, 2147483647.0));
 return(z);
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double sacmod(double x, double y)
{ /* SAC _mod_ for floats */
 if ( 0.0 == y) {
        t = 1.0;
 } else {
        t = y;
 }
 t2 = floor(x/t);
 z = x - (y*t2);
 return(z);
}

inline int STSCfloorXDI(double y ,double QUADct)
{ 
/*
 ?
*/
A_19=minXDI( y,QUADct);
r_0=( A_19);
 return(r_0);
}

inline int lehmerXXI(int QUADRL)
{ 
/*
 ?
*/
/* dsf scalar(s) */
A_27=mpyIII(16807,QUADRL);
/* dsf scalar(s) */
A_28=starIII(2,31);
 /* dsf scalar(s) */
A_29=plusIII(-1,A_28);
 /* dsf scalar(s) */
A_31=modIII(A_29,A_27);
 A_32=STSCfloorCLONE9XII( A_31);
 QUADRL_0=( A_32);
 r_0=( A_32);
 return(r_0);
}

inline int rollScalarXII(int y ,int QUADRL,double QUADct,int QUADio)
{ 
/*
 ?
*/
A_25=lehmerXXI( QUADRL);
 r_0=( A_25);
 /* dsf scalar(s) */
A_27=starIII(2,31);
 /* dsf scalar(s) */
A_28=plusIII(-1,A_27);
 /* dsf scalar(s) */
A_29=mpyIII(r_0,y);
 /* dsf scalar(s) */
A_30=divIID(A_29,A_28);
 A_32=minXDI( A_30,QUADct);
 /* dsf scalar(s) */
A_33=plusIII(QUADio,A_32);
r_1=( A_33);
 return(r_1);
}

inline int[.] rollXII(int[.] y ,int QUADRL,double QUADct,int QUADio)
{ 
/*
 ?
*/
A_31=rhoXII( y);
 A_32=mpyslXIIQUICKSTOP( A_31);
 A_36=rhoIII(A_32,-1);
 r_0=( A_36);
 A_38=comaXII( y);
 ry_0=( A_38);
 A_40=rhoXII( ry_0);
 A_42=iotaXII( A_40,QUADio);
 A_CTR43_= 0;
A_CTR43z_ = (shape(A_42)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR43_ <= A_CTR43z_; A_CTR43_++){
i_0 = A_42[[A_CTR43_]];
 A_45= ABC(toi(i_0)-QUADio,shape(ry_0)[0]);
A_47=ry_0[[A_45]];
 A_51=rollScalarXII( A_47,QUADRL,QUADct,QUADio);
 A_52= ABC(toi(i_0)-QUADio,shape(r_2)[0]);
A_54=inds0(r_2,A_52,A_51);
 r_2=( A_54);
 }
 A_57=rhoXII( y);
 A_58=rhoIII(A_57,r_2);
 r_3=( A_58);
 return(r_3);
}

inline bool[.] UTRollXIB(int n ,double QUADct,int QUADio)
{ 
/*
 ?
*/
QUADrl_0=( 16807);
 QUADRL_0=( QUADrl_0);
 A_40=iotaXII( n,QUADio);
 /* dsf scalar(s) */
A_41=plusBII(true,A_40);
 d_0=( A_41);
 A_46,QUADrl_2=querXII( d_0,QUADio,QUADrl_0);
 r1_0=( A_46);
 A_52=rollXII( d_0,QUADRL_0,QUADct,QUADio);
 r2_0=( A_52);
 /* dsf scalar(s) */
A_55=eqIIB(QUADrl_2,QUADRL_0);
 A_57=sameIIB(r1_0,r2_0);
 A_58=comaBBB(A_57,A_55);
 r_0=( A_58);
 return(r_0);
}

inline int[.] dealIII(int a, int b,int QUADRL,double QUADct,int QUADio)
{ 
/*
 ?
*/
A_39=iotaXII( b,QUADio);
 L_0=( A_39);
 A_42=iotaXII( a,QUADio);
 A_CTR43_= 0;
A_CTR43z_ = (shape(A_42)[[0]])-1;
L_3=toI(L_0);
for(; A_CTR43_ <= A_CTR43z_; A_CTR43_++){
i_0 = A_42[[A_CTR43_]];
 /* dsf scalar(s) */
A_45=barIII(b,i_0);
 A_49=rollCLONE8XII( A_45,QUADRL,QUADct,QUADio);
 /* dsf scalar(s) */
A_50=plusIII(i_0,A_49);
 loc_0=( A_50);
 A_52= ABC(toi(i_0)-QUADio,shape(L_3)[0]);
A_54=L_3[[A_52]];
 c_0=( A_54);
 A_56= ABC(toi(loc_0)-QUADio,shape(L_3)[0]);
A_58=L_3[[A_56]];
 A_59= ABC(toi(i_0)-QUADio,shape(L_3)[0]);
A_61=inds0(L_3,A_59,A_58);
 L_2=( A_61);
 A_63= ABC(toi(loc_0)-QUADio,shape(L_2)[0]);
A_65=inds0(L_2,A_63,c_0);
 L_3=( A_65);
 }
 A_68=takeIII(a,L_3);
 /* dsf scalar(s) */
A_69=barIBI(b,true);
 /* dsf scalar(s) */
A_70=barIII(A_69,A_68);
 z_0=( A_70);
 return(z_0);
}

inline bool[.] UTDealXIB(int n ,double QUADct,int QUADio)
{ 
/*
 ?
*/
QUADrl_0=( 16807);
 QUADRL_0=( QUADrl_0);
 /* dsf scalar(s) */
A_37=divIID(n,2);
 A_39=STSCfloorXDI( A_37,QUADct);
 A_43,QUADrl_2=querIII(A_39,n,QUADio,QUADrl_0);
 r1_0=( A_43);
 /* dsf scalar(s) */
A_46=divIID(n,2);
 A_48=STSCfloorXDI( A_46,QUADct);
 A_52=dealIII(A_48,n,QUADRL_0,QUADct,QUADio);
 r2_0=( A_52);
 /* dsf scalar(s) */
A_55=eqIIB(QUADrl_2,QUADRL_0);
 A_57=sameIIB(r1_0,r2_0);
 A_58=comaBBB(A_57,A_55);
 r_0=( A_58);
 return(r_0);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 A_47=UTRollXIB( 1000,QUADct_0,QUADio_0);
 r_0=( A_47);
 A_51=UTDealXIB( 1000,QUADct_0,QUADio_0);
 A_52=comaBBB(r_0,A_51);
 r_1=( A_52);
 A_56=quadXBB( r_1,QUADpp_0,QUADpw_0);
 A_57=andslXBBQUICKSTOP( r_1);
 /* dsf scalar(s) */
A_61=plusBBI(true,A_57);
r_2=( A_61);
 A_65=quadXII( A_61,QUADpp_0,QUADpw_0);
 return(r_2);
}

inline int rollCLONE8XII(int y ,int QUADRL,double QUADct,int QUADio)
{ 
/*
 ?
*/
A_31=rhoXII( y);
 A_32=mpyslXIIQUICKSTOP( A_31);
 A_36=rhoIII(A_32,-1);
 r_0=( A_36);
 A_38=comaXII( y);
 ry_0=( A_38);
 A_40=rhoXII( ry_0);
 A_42=iotaXII( A_40,QUADio);
 A_CTR43_= 0;
A_CTR43z_ = (shape(A_42)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR43_ <= A_CTR43z_; A_CTR43_++){
i_0 = A_42[[A_CTR43_]];
 A_45= ABC(toi(i_0)-QUADio,shape(ry_0)[0]);
A_47=ry_0[[A_45]];
 A_51=rollScalarXII( A_47,QUADRL,QUADct,QUADio);
 A_52= ABC(toi(i_0)-QUADio,shape(r_2)[0]);
A_54=inds0(r_2,A_52,A_51);
 r_2=( A_54);
 }
 A_57=rhoXII( y);
 A_58=rhoIII(A_57,r_2);
 r_3=( A_58);
 return(r_3);
}

inline int STSCfloorCLONE9XII(int y )
{ 
/*
 ?
*/
A_19=minXII( y);
r_0=( A_19);
 return(r_0);
}


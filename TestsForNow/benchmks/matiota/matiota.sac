breaks

use Array : all;
use Numerical : all;
use StdIO : all;
use String: {tochar,sscanf};

/* Compiled by APEX Version: /home/apex/apex2003/wss/sac2007.dws2007-11-06 14:52:59.006 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

inline int[+] mpyXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
   ( . <= iv <= .)
                : mpyXII(toI(y[iv]));
         } : genarray(shape(y), 0);
  return(z);
}

inline int plusBBI(bool x, bool y)
{ return(toI(x)+toI(y));
}

inline int[+] maxIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("maxIII(int[+],int[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toI(x[iv]);
                    yel = toI(y[iv]);
            } : maxIII(xel,yel);
        } : genarray(sx, 0);
  return(z);
}







inline int[+] mpyBII(bool[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("mpyBII(bool[+],int[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toI(x[iv]);
                    yel = toI(y[iv]);
            } : mpyIII(xel,yel);
        } : genarray(sx, 0);
  return(z);
}







inline bool[+] neCCB(char[+] x, char[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("neCCB(char[+],char[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toC(x[iv]);
                    yel = toC(y[iv]);
            } : neCCB(xel,yel);
        } : genarray(sx, false);
  return(z);
}







inline int[+] barIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("barIII(int[+],int[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toI(x[iv]);
                    yel = toI(y[iv]);
            } : barIII(xel,yel);
        } : genarray(sx, 0);
  return(z);
}







inline int[+] minIII(int[+] x, int y)
{ /* AxS scalar function */
  yel = toI(y);
  z = with {
        ( . <= iv <= .) {
              xel = toI(x[iv]);
    } : minIII(xel,yel);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] mpyIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("mpyIII(int[+],int[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toI(x[iv]);
                    yel = toI(y[iv]);
            } : mpyIII(xel,yel);
        } : genarray(sx, 0);
  return(z);
}







inline char[+] rotrXCC(char[+] y)
{/* Last axis reverse on rank>1 */
 cellshape = take([-1], shape(y));
 frameshape = drop([-1],shape(y));
 cell = genarray(cellshape, ' ');
 z = with {
        ( . <= iv <= .)
                : rotrXCC(y[iv]);
       } : genarray(frameshape, cell);
 return(z);
}


inline char[+] rot1ICC(int x, char[+] y)
{ /* Scalar rotate first axis non-scalar */
 ix = toi(x);
 rows = shape(y)[0];
 cellshape = drop([1], shape(y));
 defcell = genarray(cellshape, ' ');
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = with {
        (. <= [i] <= .)
         { idx = (i+k) < rows ? (i+k) : (i+k) - rows;
   } : y[[idx]];
         } : genarray([rows], defcell);
 return(z);
}


inline char[*] rhoICC(int[.] x, char[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXCC(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with {
          (. <= [i] <= .)
                        : y;
           } : genarray( [ncopies], y);
        /* Now append the leftover bits */
        z = comaXCC(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int[*] rhoCII(char[.] x, int[*] y)
{ /* Character-vector reshape anything. */
  /* Left argument must be empty vector! */
 if ( 0 != shape(x)[[0]]) {
   show(tochar("reshape domain error in rhoCII"));
 }
 z = reshape([prod(shape(y))], y);
 return(z[[0]]);
}

inline char[.] rhoICC(int x, char[+] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoICC([toi(x)],y);
 return(z);
}


inline int[.] takeIII(int x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline char[.,.] takeICC(int[.] x, char[.,.] y)
{ /* vector take matrix */
  return(take(toi(x),y));
}

inline int[*] dropIII(int x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.] takeBII(bool x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[*] dropIII(int[.] x, int[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[2]  rhoXCI(char[.,.] y)
{ /* Shape of matrix (rank-2) */
 return(shape(y));
}

inline int[1]  rhoXBI(bool[.] y)
{ /* Shape of vector */
 return(shape(y));
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[1]  rhoXII(int[.] y)
{ /* Shape of vector */
 return(shape(y));
}

inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
  show(y);
       return(y);
}
inline int[1]  rhoXCI(char[.] y)
{ /* Shape of vector */
 return(shape(y));
}

inline char[256] quadavXXC()
{ /* QUADav - system character set */
 z = with{
        ([0] <= [i] < [256]) : tochar(i);
      } : genarray( [256], ' ');
 return(z);
}

inline int[.] comaBII(bool[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline char[+] combCCC(char[+] x, char[+] y)
{/* AxA first axis catenate. Ranks match */
 return(toC(x)++toC(y));
}

inline int[.] comaBII(bool x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[.] ugrdCCI(char[256] x, char[+] y, int QUADio)
{ /* Quadav-upgrade on character non-vector */
z = QUADio + UpgradeHeap(y);
 return( z);
}


inline bool sameIDB(int x, double y,double QUADct)
{ /* Scalar match scalar */
  z = toD(x) == toD(y);
 return(z);
}

inline char[*] indr(char[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),' ');
 z = with {
  (. <= iv <= .)
                 : X[[I[iv]]];
  } : genarray(shape(I), defcell);
 return(z);
}





inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline bool[+] inds1(bool[+] X, int [+] I0, bool Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = to_bool(X);
 Y = Yin;

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=to_bool(Y);

 }

 return(z);
}



inline int[+] inds1(int[+] X, int [+] I0, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = toi(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=toi(Y[[i0]]);

 }

 return(z);
}



inline int[.] slBII(bool[.] x, int[.] y)
{/* vector compress/replicate vector */
 /* HELP! non-boolean left argument needs a range check */
 intx = toi(x);
 zxrho = sum(intx);
 z = genarray([zxrho], 0);
 zi = 0;
 for(i=0; i<shape(x)[0]; i++)
   for(k=0; k<intx[[i]]; k++){
    z[[zi]] = y[[i]];
    zi++;
   }
 return(z);
}

inline int[.] slBII(bool[1] x, int[.] y)
{/* 1-element-vector compress/replicate vector */
 /* HELP! non-boolean left argument needs a range check */
 if (true == to_bool(x[[0]]))
        z = y;
 else
        z = genarray([0], 0);
 return(z);
}

inline int[.] bslBII(bool[.] x, int[.] y)
{ /* Vector-vector expand */
 /* Stupid with-loops won't work here. */
 /* FIXME: Needs check that (+/x)= shape(y)[0] and x^.GE 0 */
 yi=0;
 z= genarray(shape(x),0);
 for (xi=0; xi<shape(x)[[0]]; xi++){
   if (to_bool(x[[xi]])){
        z[[xi]]=y[[yi]];
        yi++;
   }
 }
 return(z);
}


inline bool[+] orslXBBQUICKSTOP(bool[+] y)
{ /* last axis reduce rank-2 or greater matrix w/quickstop */
  sy = shape(y);
  zrho = drop([-1], sy);
  z = with {
   (. <= iv <= .)
               : orslXBBQUICKSTOP(y[iv]);
      } : genarray(zrho, false);
  return(z);
}


inline int[.] plusbslXII(int[.] y)
{ /* Scan of vector */
/* This does the scan in the wrong direction, but since
 * we assume associative functions only, it should be ok.
 */
 size = shape(y);
 z = genarray(size,toI(0));
 if (0 != size[[0]]) {
   /* real work to do */
         z[[0]] = toI(y[[0]]); /* Not sure about the coercion... */
   for ( i=1; i<size[[0]]; i++) {
                 z[[i]] = plusIII(toI(z[[i-1]]),toI(y[[i]]));
          }
  }
 return(z);
}



inline int plusslXIIFOLD(int[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
     (0*shape(y) <= iv < shape(y))
                 : toI(y[lim-iv]);
       } :  fold( plusIII, toI(0));
  return(z);
}


inline int mpyXII(int y)
{ /* signum int */
 if (0 == toi(y))
        z = 0;
 else if (0 > toi(y))
        z = -1;
 else
        z = 1;
 return(z);
}

inline int maxIII(int x, int y)
{ /* x max y */
 return (max(toI(x),toI(y)));
}

inline int mpyIII(int x, int y)
{ return(toI(x)*toI(y));
}

inline bool neCCB(char x, char y)
{/* A !=B on non-doubles */
 return(toC(x) != toC(y));
}

inline int barIII(int x, int y)
{ return(toI(x)-toI(y));
}

inline int minIII(int x, int y)
{ /* x min y */
 return (min(toI(x),toI(y)));
}

inline int plusIII(int x, int y)
{ return(toI(x)+toI(y));
}

inline int[+] maxIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : maxIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] maxIII(int[+] x, int y)
{ /* AxS scalar function */
  yel = toI(y);
  z = with {
        ( . <= iv <= .) {
              xel = toI(x[iv]);
    } : maxIII(xel,yel);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] mpyIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] mpyIII(int[+] x, int y)
{ /* AxS scalar function */
  yel = toI(y);
  z = with {
        ( . <= iv <= .) {
              xel = toI(x[iv]);
    } : mpyIII(xel,yel);
  } : genarray( shape(x), 0);
  return(z);
}


inline bool[+] neCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
     ( . <= iv <= .) {
              yel = toC(y[iv]);
                    } : neCCB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] neCCB(char[+] x, char y)
{ /* AxS scalar function */
  yel = toC(y);
  z = with {
        ( . <= iv <= .) {
              xel = toC(x[iv]);
    } : neCCB(xel,yel);
  } : genarray( shape(x), false);
  return(z);
}


inline int[+] barIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : barIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] barIII(int[+] x, int y)
{ /* AxS scalar function */
  yel = toI(y);
  z = with {
        ( . <= iv <= .) {
              xel = toI(x[iv]);
    } : barIII(xel,yel);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline char[.] comaXCC(char[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline char[.] rotrXCC(char[.] y)
{ /* Vector reverse */
 n = shape(y);
 cell = ' ';
 z = with {
         ( . <= iv <= .)
                : y[(n-1)-iv];
         } : genarray(n, cell);
 return(z);
}

inline int[.] UpgradeHeap(char[+] y)
{
/*    Do APL upgrade of array y using heapsort.
      This is a sub-function shared by upgrade/downgrade/indexof, etc.
      This version adapted from the Sara Baase "Computer Algorithms"
      version of heapsort.
     Robert Bernecky 2006-11-14
     Knuth, Vol. III, pp. 145-148 gives a good example.
     APL model: (See workspace apex2003/wss/upgrade or
                 apex2003/wif/upgrade)
                 Also UTGrade.dws
r{<-}upgradeHeap v;#io;N;heap
@ Upgrade vector using heapsort
#io{<-}0
N{<-}{rho}v
:if N{<=}1
  r{<-}{iota}N
:else
  heap{<-}MakeHeap(v)
  r{<-}(UnHeap(heap))
:endif
*/

 N = shape(y)[[0]];
 if (N <= 1)
    z = iota(N);
 else{
   heap = MakeHeap(y);
    z = UnHeap(heap,y);
 }
 return(z);
}


inline int[.] MakeHeap(char[+] v)
{ /* Build heap from array v. v has at least two elements */
/*
r{<-}MakeHeap v;i;n;heap;biggest
@ Build heap from v
@ We know v has at least two elements
N{<-}{rho}v
heap{<-}{iota}N
:for i :in {reverse}{iota}{floor}N{divide}2
  y FixHeap i,heap[i],n
:endfor
r{<-}heap
*/
 n = shape(v)[[0]];
 heap = iota(n);
 lim = n/2;
 for(i=lim-1; i>=0; i--) {
         heap = FixHeap(heap, v, i, heap[[i]], n);
 }
 return(heap);
}

inline int[.] UnHeap(int[.] heap, char[+]v)
{ /* Extract heap elements in top-to-bottom order */
  n = shape(v)[[0]];
  for(heapsize= n-1; heapsize>0; heapsize--){
   biggest = heap[[0]];
        heap = FixHeap(heap,v,0,heap[[heapsize]],heapsize);
       heap[[heapsize]] = biggest;
  }
 return(heap);
}

inline int[.] FixHeap(int[.] heap, char[+] v, int root,
   int heapitem, int heapsize)
{ /* Restore heap invariant: parent>= both children */
 vacant = root;
 lchild = 1+vacant+vacant;
 while( lchild < heapsize) {
     bigC = lchild;      /* Identify larger child, if any */
        rchild = lchild+1;
     if ((lchild<(heapsize-1))){
            li = heap[[lchild]];
                   ri = heap[[rchild]];
          if ((GradeGT(v[[ri]],v[[li]])) ||
                     (match(v[[ri]], v[[li]])&&(ri>li))){ /* Stability */
           bigC = rchild; /* right child larger */
                }
      }
      /* parent vs big kid*/
         li = heap[[bigC]];
     if ((GradeGT( v[[li]], v[[heapitem]])) ||
              (match(v[[li]], v[[heapitem]]) &&(li>heapitem))) {
                     heap[[vacant]] = heap[[bigC]];
                         vacant = bigC;
                         lchild = 1+vacant+vacant;
      } else lchild = heapsize;   /* exitloop */
 }
 heap[[vacant]] = heapitem;
 return(heap);
}



inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
    (. <= iv <= .)
                 : indrfr0(X[iv], I);
   } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
   (. <= iv <= .)
                 : sel( I[iv], X);
      } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
       (. <= iv <= .)
                 : sel( I, X[iv]);
      } : genarray(frameshape, cell);
 return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
    (. <= iv <= .)
                 : indrfr0(X[iv], I);
   } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
   (. <= iv <= .)
                 : sel( I[iv], X);
      } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
       (. <= iv <= .)
                 : sel( I, X[iv]);
      } : genarray(frameshape, cell);
 return(z);
}


inline int[.] DSFLenErrorCheck(int[.] sx, int[.] sy, char[.] whodunit)
{ /* Dyadic scalar fn length error check */
     z = sx;
#ifdef GENME
/* SAC bug #306 - side effect kills fold!  */
    if (any(sx != sy)) { /* Check that shapes match */
   show(tochar("APEX dyadic scalar function length error in function"));
  show(whodunit);
        show(sx); show(sy);
    }
#endif
     return(z);
}

inline int VectorRotateAmount(int x, int y)
{ /* Normalize x rotate for array of shape y on selected axis */
 /* normalize rotation count */

if ((0==x) || (0==y))
  z = 0;
else if (x>0)
        z = _mod_SxS_(x,y);
     else
        z = y - _mod_SxS_(abs(x),y);
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* Array bounds checker for indexed ref  X[nonscalarI] and indexed assign */
 z = I;
#ifdef BOUNDSCHECKING
 bad = with {
     ((0*shape(z)) <= iv < shape(z))
                : (z[iv] < 0) || (z[iv] >= Xshape);
    }: fold(|, false);
 if (bad)
  print(tochar("APEX index error!"));
#endif
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* Array bounds checker for indexed ref X[scalarI] and indexed assign */
 z = I;
#ifdef BOUNDSCHECKING
 /* This needs more thought... */
  if ( (I < 0) || (I >= Xshape)) {
         print(tochar("APEX index error!"));
  }
#endif
 return(z);
}

inline bool orslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
          (0*shape(y) <= iv < shape(y))
                : toB(y[iv]);
        } : foldfix( orBBB, toB(0), toB(1));
  return(z);
}


inline bool orBBB(bool x, bool y)
{ return(to_bool(x)|to_bool(y));
}

inline bool GradeGT(char x, char y)
{ /* Char Comparator for upgrade */
 return(x>y);
}


inline bool GradeGT(char[+] x, char[+] y)
{ /* Char Array Comparator for upgrade */
  /* The ravels of the two arrays are compared.  */
 z = with {
       (0*shape(x) <= iv < shape(x))
            : x[iv] > y[iv];
        }: foldfix( &, true,false);
 return(z);
}

inline char[.,.] OVERCCC(char[.,.] A, char[.,.] B)
{ 
/*
  Z{<-}A OVER B;S
 @ Forms a matrix with {alpha} over {omega}
  A{<-}(S{<-}{neg}2{take}1 1,{rho}A){rho}A
  S{<-}0 1{times}S{max}{rho}B{<-}({neg}2{take}1 1,{rho}B){rho}B
  Z{<-}((S{max}{rho}A){take}A){commabar}(S{max}{rho}B){take}B
 
*/
A_27=rhoXCI( A);
 A_28=comaBII([true,true],A_27);
 A_29=takeIII(-2,A_28);
 S_0=( A_29);
 A_31=rhoICC(A_29,A);
 A_0=( A_31);
 A_33=rhoXCI( B);
 A_34=comaBII([true,true],A_33);
 A_35=takeIII(-2,A_34);
 A_36=rhoICC(A_35,B);
 B_0=( A_36);
 A_38=rhoXCI( A_36);
 /* dsf Check needed */
A_39=maxIII(S_0,A_38);
 /* dsf Check needed */
A_40=mpyBII([false,true],A_39);
S_1=( A_40);
 A_42=rhoXCI( B_0);
 /* dsf Check needed */
A_43=maxIII(S_1,A_42);
 A_44=takeICC(A_43,B_0);
 A_45=rhoXCI( A_0);
 /* dsf Check needed */
A_46=maxIII(S_1,A_45);
 A_47=takeICC(A_46,A_0);
 A_48=combCCC(A_47,A_44);
 Z_0=( A_48);
 return(Z_0);
}

inline int[.] MATIOTACCI(char[.,.] A, char[.,.] B,int QUADio)
{ 
/*
  Z{<-}A MATIOTA B;C;F;N;P;R;T
 @ Returns origin-0 row indices of names {omega} in lookup table {alpha},
 @ ala indexof. Rbe changed defn on not-found items.
  C{<-}A OVER B @join arguments
  C{<-}C[P{<-}#AV{gradeup}C;] @alphabetize the rows
 @ mark the first occurrence of each different row
  F{<-}{or}/C{/=}{neg}1{rotatebar}C
  F[{iota}{signum}{rho}F]{<-}1 @insure that the first element is 1
  T{<-}F/P @indices of where the firsts occur
  N{<-}T-{neg}1{drop}0,T @number of occurrences of each distinct row
  Z{<-}+\F\N @make (N[1]{rho}N[1]),(N[2]{rho}N[2]),...
  Z[P]{<-}Z @return to original ordering
  R{<-}1{take}{neg}2{take}1 1,{rho}A @number of rows in A
  Z{<-}R{drop}Z @drop off answers for rows of A
  Z{<-}Z{min}''{rho}{rho}A @ Correct not-found results
 @ return scalar if B was a vector
 @@@@ BROKEN 2005-11-21  Z{<-}((1<{rho}{rho}B)/{rho}Z){rho}Z
 @@@@ BROKEN needs function cloning./rbe
 @ Copyright (c) 1994 Jim Weigang
 
*/
A_49=OVERCCC(A,B);
 C_0=( A_49);
 A_51=quadavXXC( );
 A_53=ugrdCCI(A_51,C_0,QUADio);
 P_0=( A_53);
 A_56= ABC(toi(A_53)-QUADio,shape(C_0)[0]);
A_58=indr(C_0,A_56);
 C_1=( A_58);
 A_60=rot1ICC(-1,C_1);
 /* dsf clique */
A_62=neCCB(C_1,A_60);
 A_63=orslXBBQUICKSTOP( A_62);
 F_0=( A_63);
 A_68=rhoXBI( F_0);
 A_69=mpyXII( A_68);
 A_71=iotaXII( A_69,QUADio);
 A_72= ABC(toi(A_71)-QUADio,shape(F_0)[0]);
A_74=inds1(F_0,A_72,true);
F_1=( A_74);
 A_76=slBII(F_1,P_0);
 T_0=( A_76);
 A_78=comaBII(false,T_0);
 A_79=dropIII(-1,A_78);
 /* dsf Check needed */
A_80=barIII(T_0,A_79);
 N_0=( A_80);
 A_82=bslBII(F_1,N_0);
 A_83=plusbslXII( A_82);
 Z_0=( A_83);
 A_88= ABC(toi(P_0)-QUADio,shape(Z_0)[0]);
A_90=inds1(Z_0,A_88,Z_0);
 Z_1=( A_90);
 A_92=rhoXCI( A);
 A_93=comaBII([true,true],A_92);
 A_94=takeIII(-2,A_93);
 A_95=takeBII(true,A_94);
 R_0=( A_95);
 A_97=dropIII(R_0,Z_1);
 Z_2=( A_97);
 A_99=rhoXCI( A);
 A_100=rhoCII([:char],A_99);
 /* dsf scalar(s) */
A_101=minIII(Z_2,A_100);
 Z_3=( A_101);
 return(Z_3);
}

int main()
{ 
/*
  r{<-}main;#IO;#RL;n;#PP;#PW;#RL
  #IO{<-}0
  #RL{<-}16807 @ Make this test reproducible
  n{<-}200000 20{rho}#AV[32+{iota}95] @ Typical(?) data with some dups
  #PP{<-}16
  #PW{<-}80
  r{<-}n MATIOTA n{commabar}{reverse}100 20{take}n
  #{<-}r{<-}+/r{times}{iota}{rho}r
  r{<-}r+#{<-}n MATIOTA 20{rho}n @ Vector {omega} case [BROKEN]
  #{<-}r{<-}1+r[0]{match}4180987299974
 
*/
QUADio_0=toi(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toi(( false));
 QUADrl_1=( 16807);
 A_62=iotaXII( 95,QUADio_1);
 /* dsf scalar(s) */
A_63=plusIII(32,A_62);
 A_65=quadavXXC( );
 A_64= ABC(toi(A_63)-QUADio_1,shape(A_65)[0]);
A_67=indr(A_65,A_64);
A_68=rhoICC([200000, 20],A_67);
 n_0=( A_68);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_72=takeICC([100, 20],n_0);
 A_73=rotrXCC( A_72);
 A_74=combCCC(n_0,A_73);
 A_76=MATIOTACCI(n_0,A_74,QUADio_1);
 r_0=( A_76);
 A_78=rhoXII( r_0);
 A_80=iotaXII( A_78,QUADio_1);
 /* dsf Check needed */
A_81=mpyIII(r_0,A_80);
 A_82=plusslXIIFOLD( A_81);
 r_1=( A_82);
 A_89=quadXII( A_82,QUADpp_1,QUADpw_1);
 A_90=rhoICC(20,n_0);
 A_92=MATIOTACLONE3CCI(n_0,A_90,QUADio_1);
 A_95=quadXII( A_92,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_96=plusIII(r_1,A_95);
 r_2=( A_96);
 A_98= ABC(toi(false)-QUADio_1,shape(r_2)[0]);
A_100=r_2[[A_98]];
 A_102=sameIDB(A_100,4180987299974.0,QUADct_0);
 /* dsf scalar(s) */
A_103=plusBBI(true,A_102);
 r_3=( A_103);
 A_107=quadXII( A_103,QUADpp_1,QUADpw_1);
 return(r_3);
}

inline int[.] MATIOTACLONE3CCI(char[.,.] A, char[.] B,int QUADio)
{ 
/*
  Z{<-}A MATIOTA B;C;F;N;P;R;T
 @ Returns origin-0 row indices of names {omega} in lookup table {alpha},
 @ ala indexof. Rbe changed defn on not-found items.
  C{<-}A OVER B @join arguments
  C{<-}C[P{<-}#AV{gradeup}C;] @alphabetize the rows
 @ mark the first occurrence of each different row
  F{<-}{or}/C{/=}{neg}1{rotatebar}C
  F[{iota}{signum}{rho}F]{<-}1 @insure that the first element is 1
  T{<-}F/P @indices of where the firsts occur
  N{<-}T-{neg}1{drop}0,T @number of occurrences of each distinct row
  Z{<-}+\F\N @make (N[1]{rho}N[1]),(N[2]{rho}N[2]),...
  Z[P]{<-}Z @return to original ordering
  R{<-}1{take}{neg}2{take}1 1,{rho}A @number of rows in A
  Z{<-}R{drop}Z @drop off answers for rows of A
  Z{<-}Z{min}''{rho}{rho}A @ Correct not-found results
 @ return scalar if B was a vector
 @@@@ BROKEN 2005-11-21  Z{<-}((1<{rho}{rho}B)/{rho}Z){rho}Z
 @@@@ BROKEN needs function cloning./rbe
 @ Copyright (c) 1994 Jim Weigang
 
*/
A_50=OVERCLONE4CCC(A,B);
 C_0=( A_50);
 A_52=quadavXXC( );
 A_54=ugrdCCI(A_52,C_0,QUADio);
 P_0=( A_54);
 A_57= ABC(toi(A_54)-QUADio,shape(C_0)[0]);
A_59=indr(C_0,A_57);
 C_1=( A_59);
 A_61=rot1ICC(-1,C_1);
 /* dsf clique */
A_63=neCCB(C_1,A_61);
 A_64=orslXBBQUICKSTOP( A_63);
 F_0=( A_64);
 A_69=rhoXBI( F_0);
 A_70=mpyXII( A_69);
 A_72=iotaXII( A_70,QUADio);
 A_73= ABC(toi(A_72)-QUADio,shape(F_0)[0]);
A_75=inds1(F_0,A_73,true);
F_1=( A_75);
 A_77=slBII(F_1,P_0);
 T_0=( A_77);
 A_79=comaBII(false,T_0);
 A_80=dropIII(-1,A_79);
 /* dsf Check needed */
A_81=barIII(T_0,A_80);
 N_0=( A_81);
 A_83=bslBII(F_1,N_0);
 A_84=plusbslXII( A_83);
 Z_0=( A_84);
 A_89= ABC(toi(P_0)-QUADio,shape(Z_0)[0]);
A_91=inds1(Z_0,A_89,Z_0);
 Z_1=( A_91);
 A_93=rhoXCI( A);
 A_94=comaBII([true,true],A_93);
 A_95=takeIII(-2,A_94);
 A_96=takeBII(true,A_95);
 R_0=( A_96);
 A_98=dropIII(R_0,Z_1);
 Z_2=( A_98);
 A_100=rhoXCI( A);
 A_101=rhoCII([:char],A_100);
 /* dsf scalar(s) */
A_102=minIII(Z_2,A_101);
 Z_3=( A_102);
 return(Z_3);
}

inline char[.,.] OVERCLONE4CCC(char[.,.] A, char[.] B)
{ 
/*
  Z{<-}A OVER B;S
 @ Forms a matrix with {alpha} over {omega}
  A{<-}(S{<-}{neg}2{take}1 1,{rho}A){rho}A
  S{<-}0 1{times}S{max}{rho}B{<-}({neg}2{take}1 1,{rho}B){rho}B
  Z{<-}((S{max}{rho}A){take}A){commabar}(S{max}{rho}B){take}B
 
*/
A_27=rhoXCI( A);
 A_28=comaBII([true,true],A_27);
 A_29=takeIII(-2,A_28);
 S_0=( A_29);
 A_31=rhoICC(A_29,A);
 A_0=( A_31);
 A_33=rhoXCI( B);
 A_34=comaBII([true,true],A_33);
 A_35=takeIII(-2,A_34);
 A_36=rhoICC(A_35,B);
 B_0=( A_36);
 A_38=rhoXCI( A_36);
 /* dsf Check needed */
A_39=maxIII(S_0,A_38);
 /* dsf Check needed */
A_40=mpyBII([false,true],A_39);
S_1=( A_40);
 A_42=rhoXCI( B_0);
 /* dsf Check needed */
A_43=maxIII(S_1,A_42);
 A_44=takeICC(A_43,B_0);
 A_45=rhoXCI( A_0);
 /* dsf Check needed */
A_46=maxIII(S_1,A_45);
 A_47=takeICC(A_46,A_0);
 A_48=combCCC(A_47,A_44);
 Z_0=( A_48);
 return(Z_0);
}


use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3013.dws2012-11-07 10:22:42.929 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline double divIID(int x, int y)
{ dx = ItoD(x);
  dy = ItoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline double mpyIDD(int x, double y)
{ return(ItoD(x)*DtoD(y));
}

inline bool eqIDB(int x, double y, double QUADct)
{ /* A=B on doubles */
 return((ItoD(x) == DtoD(y)) || APEXFUZZEQ(ItoD(x),DtoD(y),QUADct));
}


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline bool[+] eqCCB(char[+] x, char y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqCCB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline char[.] rhoICC(int x, char[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoICC( [toi(x)],y);
 return(z);
}


inline char[.] takeICC(int x, char[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.]  rhoXBI(bool[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline char[+] inds1(char[+] X, int [+] I0, char Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = CtoC(X);
 Y = Yin;

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=CtoC(Y);

 }

 return(z);
}



inline int[.] slBII(bool[.] x, int[.] y)
{/* Boolean vector compress vector */
  zxrho = sum(toi(x));
  z = genarray([zxrho], 0);
  zi = 0;
  for(i=0; i<shape(x)[0]; i++)
    if ( x[i]) {
      z[[zi]] = y[[i]];
      zi++;
    }
  return(z);
}

inline int plusslXBIFOLD(bool[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : BtoI(y[lim-iv]);
       } :  fold( plusIII, ItoI(0));
  return(z);
}


inline bool eqCCB(char x, char y)
{ /* A=B on non-doubles */
 return(CtoC(x) == CtoC(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline char[.] meshXCC(char[.] y ,int QUADio)
{ 
/*
 ?
*/
/* dsf scalar(s) */
A_25=eqCCB(y,' ');
 b_0=( A_25);
 r_0=( y);
 A_28=rhoXBI( b_0);
 A_30=iotaXII( A_28,QUADio);
 A_31=slBII(b_0,A_30);
 A_32= ABC(toi(A_31)-QUADio,shape(r_0)[0]);
A_34=inds1(r_0,A_32,'#');
r_1=( A_34);
 return(r_1);
}

inline char[.] meshtestIIC(int d, int n,int QUADio)
{ 
/*
 ?
*/
/* dsf scalar(s) */
A_24=barIII(100,d);
A_25=rhoICC(A_24,'x');
 A_26=takeICC(100,A_25);
 A_27=rhoICC(n,A_26);
 vec_0=( A_27);
 A_30=meshXCC( vec_0,QUADio);
 r_0=( A_30);
 return(r_0);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 18000000);
 pct_0=( 90);
 A_60=meshtestIIC(pct_0,n_0,QUADio_1);
 r_0=( A_60);
 /* dsf scalar(s) */
A_63=eqCCB(r_0,'#');
 A_64=plusslXBIFOLD( A_63);
 t_0=( A_64);
 A_71=quadXII( A_64,QUADpp_0,QUADpw_0);
 /* dsf scalar(s) */
A_72=divIID(pct_0,100);
 /* dsf scalar(s) */
A_73=mpyIDD(n_0,A_72);
 /* dsf scalar(s) */
A_75=eqIDB(t_0,A_73,QUADct_0);
t_1=( A_75);
 /* dsf scalar(s) */
A_77=barBBI(t_1,true);
 r_1=( A_77);
 return(r_1);
}


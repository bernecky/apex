use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex2003/wss/sac3009.dws2012-01-09 16:54:47.743 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

inline int minXDI(double y,double QUADct)
{ return(DFLOOR(y,QUADct));
}



inline double divIID(int x, int y)
{ dx = tod(x);
  dy = tod(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline int plusIII(int x, int y)
{ return(toI(x)+toI(y));
}

inline double barDDD(double x, double y)
{ return(toD(x)-toD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((toD(x) == toD(y)) || APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline int plusBBI(bool x, bool y)
{ return(toI(x)+toI(y));
}

inline int[+] plusIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline double[+] plusDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[+] inds0(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = toI(X);
 Y = Yin;

 
 z[[I0]]=toI(Y);

 
 return(z);
}



inline int CommandLineArgvXBI(bool y)
{ /* Get Command-line argument element #y as integer scalar */
  int z;
  junk, z = sscanf(argv(toi(y)), "%d");
  return( z);
}

inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : toD(y[lim-iv]);
       } :  fold( plusDDD, toD(0));
  return(z);
}


inline double plusDDD(double x, double y)
{ return(toD(x)+toD(y));
}

inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int DFLOOR(double y, double QUADct)
{ /* Fuzzy floor */
  /* Definition taken from SHARP APL Refman May 1991, p.6-23
   * floor:  n <- (signum y) times nofuzzfloor 0.5+abs y)
   *         z <- n-(QUADct times 1 max abs y)<(n-y)
   * If you want a double result,  write: "y - 1| y".
   */
   n = tod(floor(0.5+fabs(y)));
   if (y < 0.0)
        n = -n;
   else if (0.0 == y)
        n = 0.0;
   range = fabs(y);
   if (1.0 > range)
        range = 1.0;
   fuzzlim = QUADct*range;
   ny = n-y;
   if (fuzzlim < ny)
        z = n - 1.0;
   else
        z = n;
   return(toi(z));
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[.] testforXII(int n ,int QUADio,double QUADct)
{ 
/*
 ?
*/
A_35=iotaXII( n,QUADio);
 r_0=( A_35);
 /* dsf scalar(s) */
A_37=divIID(n,2);
 A_39=minXDI( A_37,QUADct);
 A_41=iotaXII( A_39,QUADio);
 A_CTR42_= 0;
A_CTR42z_ = (shape(A_41)[[0]])-1;
r_4=toI(r_0);
for(; A_CTR42_ <= A_CTR42z_; A_CTR42_++){
i_0 = A_41[[A_CTR42_]];
 /* dsf scalar(s) */
A_44=plusIII(r_4,i_0);
 r_2=( A_44);
 A_47=iotaXII( i_0,QUADio);
 A_CTR48_= 0;
A_CTR48z_ = (shape(A_47)[[0]])-1;
r_4=toI(r_2);
for(; A_CTR48_ <= A_CTR48z_; A_CTR48_++){
j_0 = A_47[[A_CTR48_]];
 A_50= ABC(toi(j_0)-QUADio,shape(r_4)[0]);
A_52=r_4[[A_50]];
 /* dsf scalar(s) */
A_53=plusIII(A_52,j_0);
 A_54= ABC(toi(j_0)-QUADio,shape(r_4)[0]);
A_56=inds0(r_4,A_54,A_53);
 r_4=( A_56);
 }
 }
 return(r_4);
}

int main()
{ 
/*
 ?
*/
n=CommandLineArgvXBI( true);
 QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADpp_1=( 17);
 QUADpw_1=( 80);
 QUADrl_1=( 16807);
 A_59=testforXII( n,QUADio_1,QUADct_0);
 /* dsf Scalar & clique */
A_60=barDDD(0.5,0.5);
 /* dsf scalar(s) */
A_61=plusDID(A_60,A_59);
 A_62=plusslXDDFOLD( A_61);
 r_0=( A_62);
 A_69=quadXDD( r_0,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_71=eqDDB(r_0,31504498000.0,QUADct_0);
/* dsf scalar(s) */
A_72=plusBBI(true,A_71);
 r_1=( A_72);
 A_76=quadXII( A_72,QUADpp_1,QUADpw_1);
 return(r_1);
}


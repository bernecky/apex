use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex2003/wss/sac3010.dws2012-01-19 13:48:45.769 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

inline int starIII(int x, int y)
{  /* number to integer power */
  z = 1;
  for( i=0; i<toI( y); i++) {
    z = z * x;
  }
  return( z);
}

inline int plusBBI(bool x, bool y)
{ return(toI(x)+toI(y));
}

inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[.] rhoBBB(bool x, bool y)
{ /* Scalar reshape scalar to vector) */
        z = genarray([toi(x)], y);
        return(z);
}

inline bool[*] rhoIBB(int[.] x, bool[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXBB(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with {
                (. <= [i] <= .)
                        : ry;
                } : genarray( [ncopies], ry);
        /* Now append the leftover bits */
        z = comaXBB(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int[*] rhoIII(int[.] x, int[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXII(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with {
                (. <= [i] <= .)
                        : ry;
                } : genarray( [ncopies], ry);
        /* Now append the leftover bits */
        z = comaXII(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] comaBII(bool[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline bool[.] comaBBB(bool[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toB(x)++toB(y));
}

inline int[.] comaIBI(int[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] comaIII(int x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline int[*] jotdotmodIII(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0);
 z = with {
        (. <= iv <= .) {
         xitem = toI(x[iv]);
        } : modIII(xitem, toI(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : toB(y[iv]);
        } : foldfix( andBBB, toB(1), toB(0));
  return(z);
}


inline int plusIII(int x, int y)
{ return(toI(x)+toI(y));
}

inline bool andBBB(bool x, bool y)
{ return(toB(x)&toB(y));
}

inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sx, false);
  return(z);
}






inline int[+] modIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : modIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
        z = reshape([prod(shape(y))],y);
        return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
        z = reshape([prod(shape(y))],y);
        return(z);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(toI(x) == toI(y));
}

inline int modIII(int x, int y)
{ /* SxS residue (aka modulo) */
  /* (x residue y) <-->   y-x times floor y divide x + 0 = x  */
  /* See model residueI in workspace UTDScalarI.dws */
  x = toi(x);
  y = toi(y);
  if( 0 != x) {
    q = y / x;
    z = y - ( x * q);
  } else {
    z = y;
  }

  if( z != 0) {
    if( mpyXII( x) != mpyXII( y)) {
      z = z + x;
    }
  }
 return(z);
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int mpyXII(int y)
{ /* signum int/double */
   if( toI(0) == y) {
    z = 0;
  } else {
    if( toI(0) < y) {
      z = 1;
    } else {
      z = -1;
    }
  }
  return(z);
}

inline bool ExtendXXB()
{ 
/*
 ?
*/
r_0=( true);
 return(r_0);
}

inline bool RESIDUEXXB(int QUADio)
{ 
/*
 ?
*/
BS0_0=( false);
 BS1_0=( true);
 BVL_0=( [false,false,true,true]);
 BVR_0=( [false,true,false,true]);
 A_84=rhoBBB(false,false);
 BVS0_0=( A_84);
 A_86=rhoIBB([2, 3, 4],[false,true,false]);
 BM234_0=( A_86);
 A_88=rhoIBB([0, 3, 4],[false,true]);
 BM034_0=( A_88);
 A_90=rhoIBB([3, 0, 4],[false,true]);
 BM304_0=( A_90);
 A_92=rhoIBB([2, 3, 0],[false,true]);
 BM230_0=( A_92);
 A_94=comaIII([-2, -1, 0, -2147483647],[-2, -1, 0, -2]);
 z_0=( A_94);
 A_96=comaBII([false,false,false,false],[-2, -1, 0, 1]);
 A_97=comaIII([0, -1, 0, -1],A_96);
 A_98=comaIII(z_0,A_97);
 z_1=( A_98);
 A_100=comaBBB([false,false,false,false],[false,true,false,true]);
A_101=comaIBI(z_1,A_100);
 A_102=rhoIII([7, 4],A_101);
 z_2=( A_102);
 A_105=iotaXII( 6,QUADio);
 /* dsf scalar(s) */
A_106=plusIII(-3,A_105);
 /* dsf scalar(s) */
A_107=starIII(-2,31);
 A_108=comaIII(A_107,A_106);
 x_0=( A_108);
 A_111=iotaXII( 4,QUADio);
 /* dsf scalar(s) */
A_112=plusIII(-2,A_111);
 y_0=( A_112);
 A_114=jotdotmodIII(x_0,y_0);
 A_123=sameIIB(A_114,z_2);
 r_0=( A_123);
 return(r_0);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 A_47=RESIDUEXXB( QUADio_0);
 r_0=( A_47);
 A_49=ExtendXXB( );
 A_50=comaBBB(r_0,A_49);
 r_1=( A_50);
 A_54=quadXBB( r_1,QUADpp_0,QUADpw_0);
 A_55=andslXBBQUICKSTOP( r_1);
 /* dsf scalar(s) */
A_59=plusBBI(true,A_55);
r_2=( A_59);
 A_63=quadXII( A_59,QUADpp_0,QUADpw_0);
 return(r_2);
}


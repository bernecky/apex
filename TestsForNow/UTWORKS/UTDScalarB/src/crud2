
/*-----------------------------------------------*/

module UTDScalarB;

export { UTDScalarB_mainXXI};


/*
 *  type definitions
 */

external typedef sacprelude_d::SACarg;

external SACarg SACARGcopy( SACarg);
external void SACARGfree( SACarg);

external classtype World::World;
external classtype Terminal::Terminal;
external classtype TermFile::TermFile;
external typedef String::string;

external string copy_string( string);
external void free_string( string);



/*
 *  prototypes for externals (FUNDECS)
 */

external Terminal::Terminal *, TermFile::TermFile * TermFile::printf( Terminal::Terminal *_rso_69_TheTerminal { ,NN } , TermFile::TermFile *_rso_68_stdout { ,NN } , String::string FORMAT { ,NN } , ...)
/*
 *  printf ::  ---
 */;

external String::string String::to_string( char[.] A { ,NN } , int LENGTH { ,NN } )
/*
 *  to_string ::  ---
 */;

external TermFile::TermFile * ArrayIO::showarray( TermFile::TermFile *stream { ,NN } , int d { ,NN } , int[.] s { ,NN } , char[*] a { ,NN } )
/*
 *  showarray ::  ---
 */;



/*
 *  prototypes for locals (FUNDEFS)
 */

external bool[*] Array::!( bool[*] A { ,NN } )
/*
 *  ! :: { bool[*] -> ( bool[*]),
           bool -> ( bool),
           bool[+] -> ( bool[+])}
 *  dispatching to: ArrayArith::!,
 *                  ScalarArith::!
 */;

external /* sticky */
int[.], int[.], int[.], int[.] sacprelude_d::partitionSlicer( int[*] min { ,NN } , int[*] max { ,NN } , int[*] axis { ,NN } , int[*] lb { ,NN } , int[*] ub { ,NN } )
/*
 *  partitionSlicer :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}},
                         int[+] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}},
                         int[.] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}}}
 *  dispatching to: sacprelude_d::partitionSlicer
 */;

external /* sticky */
int[.] sacprelude_d::partitionIntersectMax( int[*] PWLbound1 { ,NN } , int[*] ivmin { ,NN } )
/*
 *  partitionIntersectMax :: { int[*] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[+] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[.] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])}}
 *  dispatching to: sacprelude_d::partitionIntersectMax,
 *                  sacprelude_d::partitionIntersectMax
 */;

external /* sticky */
bool[.] sacprelude_d::isPartitionIntersectNull( int[*] idxmin { ,NN } , int[*] idxmax { ,NN } , int[*] bound1 { ,NN } , int[*] bound2 { ,NN } )
/*
 *  isPartitionIntersectNull :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[+] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[.] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}},
                                  int -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[+] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[.] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])}},
                                           int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])},
                                                    int[+] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])},
                                                    int[.] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])}}},
                                  int[+] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}},
                                  int[.] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}}}
 *  dispatching to: sacprelude_d::isPartitionIntersectNull,
 *                  sacprelude_d::isPartitionIntersectNull
 */;

external /* sticky */
int[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { int[*] -> ( int[*])},
                             int -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
float[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { float[*] -> ( float[*])},
                             int -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
double[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { double[*] -> ( double[*])},
                             int -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
bool[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { bool[*] -> ( bool[*])},
                             int -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
char[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { char[*] -> ( char[*])},
                             int -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
byte[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { byte[*] -> ( byte[*])},
                             int -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
short[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { short[*] -> ( short[*])},
                             int -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
long[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { long[*] -> ( long[*])},
                             int -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
longlong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { longlong[*] -> ( longlong[*])},
                             int -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ubyte[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
                             int -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ushort[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ushort[*] -> ( ushort[*])},
                             int -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
uint[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { uint[*] -> ( uint[*])},
                             int -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ulong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ulong[*] -> ( ulong[*])},
                             int -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ulonglong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
                             int -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
int[.] sacprelude_d::partitionIntersectMin( int[*] PWLbound2 { ,NN } , int[*] ivmax { ,NN } )
/*
 *  partitionIntersectMin :: { int[*] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[+] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[.] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])}}
 *  dispatching to: sacprelude_d::partitionIntersectMin,
 *                  sacprelude_d::partitionIntersectMin
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParams( bool[*] p { ,NN } , int[*] i { ,NN } , int[*] iv { ,NN } )
/*
 *  adjustLacFunParams :: { bool[*] -> { int[*] -> { int[*] -> ( int[*]),
                                                     int[+] -> ( int[*]),
                                                     int[.] -> ( int[*])}}}
 *  dispatching to: sacprelude_d::adjustLacFunParams
 */;

external int[*] Array::/( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  / :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::/,
 *                  ArrayArith::/,
 *                  ArrayArith::/,
 *                  ScalarArith::/
 */;

external /* sticky */
int sacprelude_d::prod( int[*] v { ,NN } )
/*
 *  prod :: { int[*] -> ( int),
              int[+] -> ( int),
              int[.] -> ( int)}
 *  dispatching to: sacprelude_d::prod
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParamsReshape( bool[*] p { ,NN } , int[*] i { ,NN } , int[*] iv { ,NN } , int[*] shp { ,NN } )
/*
 *  adjustLacFunParamsReshape :: { bool[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])},
                                                            int[+] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])},
                                                            int[.] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])}}}}
 *  dispatching to: sacprelude_d::adjustLacFunParamsReshape
 */;

external int[*] Array::-( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  - :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::-,
 *                  ArrayArith::-,
 *                  ArrayArith::-,
 *                  ScalarArith::-
 */;

external /* sticky */
bool sacprelude_d::eq( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  eq :: { int[*] -> { int[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( float[*] A { ,NN } , float[*] B { ,NN } )
/*
 *  eq :: { float[*] -> { float[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  eq :: { double[*] -> { double[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  eq :: { bool[*] -> { bool[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( char[*] A { ,NN } , char[*] B { ,NN } )
/*
 *  eq :: { char[*] -> { char[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( byte[*] A { ,NN } , byte[*] B { ,NN } )
/*
 *  eq :: { byte[*] -> { byte[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( short[*] A { ,NN } , short[*] B { ,NN } )
/*
 *  eq :: { short[*] -> { short[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( long[*] A { ,NN } , long[*] B { ,NN } )
/*
 *  eq :: { long[*] -> { long[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( longlong[*] A { ,NN } , longlong[*] B { ,NN } )
/*
 *  eq :: { longlong[*] -> { longlong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ubyte[*] A { ,NN } , ubyte[*] B { ,NN } )
/*
 *  eq :: { ubyte[*] -> { ubyte[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ushort[*] A { ,NN } , ushort[*] B { ,NN } )
/*
 *  eq :: { ushort[*] -> { ushort[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( uint[*] A { ,NN } , uint[*] B { ,NN } )
/*
 *  eq :: { uint[*] -> { uint[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ulong[*] A { ,NN } , ulong[*] B { ,NN } )
/*
 *  eq :: { ulong[*] -> { ulong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ulonglong[*] A { ,NN } , ulonglong[*] B { ,NN } )
/*
 *  eq :: { ulonglong[*] -> { ulonglong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external int[*] Array::+( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  + :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::+,
 *                  ArrayArith::+,
 *                  ArrayArith::+,
 *                  ScalarArith::+
 */;

external bool Array::!=( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  != :: { bool[*] -> { bool[*] -> ( bool),
                         bool -> ( bool)},
            bool -> { bool[*] -> ( bool),
                      bool -> ( bool)}}
 *  dispatching to: ScalarArith::!=
 */;

external /* sticky */
int[.], int[.], int[.] sacprelude_d::gridFiller( int[*] lb { ,NN } , int[*] ub { ,NN } , int[*] wdth { ,NN } , int[*] dim { ,NN } , int[*] maxwidth { ,NN } )
/*
 *  gridFiller :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}},
                    int[+] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}},
                    int[.] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}}}
 *  dispatching to: sacprelude_d::gridFiller
 */;

external /* sticky */
bool[.] sacprelude_d::isPartitionIntersect1Part( int[*] idxmin { ,NN } , int[*] idxmax { ,NN } , int[*] bound1 { ,NN } , int[*] bound2 { ,NN } )
/*
 *  isPartitionIntersect1Part :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[+] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[.] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}},
                                   int -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[+] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[.] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])}},
                                            int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])},
                                                     int[+] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])},
                                                     int[.] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])}}},
                                   int[+] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}},
                                   int[.] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}}}
 *  dispatching to: sacprelude_d::isPartitionIntersect1Part,
 *                  sacprelude_d::isPartitionIntersect1Part
 */;

external /* sticky */
int{0} sacprelude_d::zero( int[*] A { ,NN } )
/*
 *  zero :: { int[*] -> ( int{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
double{0.0...} sacprelude_d::zero( double[*] A { ,NN } )
/*
 *  zero :: { double[*] -> ( double{0.0...})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
float{0.0...} sacprelude_d::zero( float[*] A { ,NN } )
/*
 *  zero :: { float[*] -> ( float{0.0...})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
char{ } sacprelude_d::zero( char[*] A { ,NN } )
/*
 *  zero :: { char[*] -> ( char{ })}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
bool{0} sacprelude_d::zero( bool[*] A { ,NN } )
/*
 *  zero :: { bool[*] -> ( bool{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
byte{} sacprelude_d::zero( byte[*] A { ,NN } )
/*
 *  zero :: { byte[*] -> ( byte{})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
short{0} sacprelude_d::zero( short[*] A { ,NN } )
/*
 *  zero :: { short[*] -> ( short{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
long{0} sacprelude_d::zero( long[*] A { ,NN } )
/*
 *  zero :: { long[*] -> ( long{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
longlong{0} sacprelude_d::zero( longlong[*] A { ,NN } )
/*
 *  zero :: { longlong[*] -> ( longlong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ubyte{} sacprelude_d::zero( ubyte[*] A { ,NN } )
/*
 *  zero :: { ubyte[*] -> ( ubyte{})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ushort{0} sacprelude_d::zero( ushort[*] A { ,NN } )
/*
 *  zero :: { ushort[*] -> ( ushort{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
uint{0} sacprelude_d::zero( uint[*] A { ,NN } )
/*
 *  zero :: { uint[*] -> ( uint{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ulong{0} sacprelude_d::zero( ulong[*] A { ,NN } )
/*
 *  zero :: { ulong[*] -> ( ulong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ulonglong{0} sacprelude_d::zero( ulonglong[*] A { ,NN } )
/*
 *  zero :: { ulonglong[*] -> ( ulonglong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
int sacprelude_d::partitionMax( int[*] x { ,NN } , int[*] y { ,NN } )
/*
 *  partitionMax :: { int[*] -> { int[*] -> ( int),
                                  int -> ( int)},
                      int -> { int[*] -> ( int),
                               int -> ( int)}}
 *  dispatching to: sacprelude_d::partitionMax
 */;

external int Array::--( int[*] A { ,NN } )
/*
 *  -- :: { int[*] -> ( int),
            int -> ( int)}
 *  dispatching to: ScalarArith::--
 */;

external bool[*] Array::>=( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  >= :: { int[*] -> { int[*] -> ( bool[*]),
                        int -> ( bool[*]),
                        int[+] -> ( bool[+])},
            int -> { int[*] -> ( bool[*]),
                     int -> ( bool),
                     int[+] -> ( bool[+])},
            int[+] -> { int[*] -> ( bool[+]),
                        int -> ( bool[+]),
                        int[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::>=,
 *                  ArrayArith::>=,
 *                  ArrayArith::>=,
 *                  ScalarArith::>=
 */;

external bool[*] Array::&( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  & :: { bool[*] -> { bool[*] -> ( bool[*]),
                        bool -> ( bool[*]),
                        bool[+] -> ( bool[+])},
           bool -> { bool[*] -> ( bool[*]),
                     bool -> ( bool),
                     bool[+] -> ( bool[+])},
           bool[+] -> { bool[*] -> ( bool[+]),
                        bool -> ( bool[+]),
                        bool[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::&,
 *                  ArrayArith::&,
 *                  ArrayArith::&,
 *                  ScalarArith::&
 */;

external /* sticky */
int sacprelude_d::partitionMin( int[*] x { ,NN } , int[*] y { ,NN } )
/*
 *  partitionMin :: { int[*] -> { int[*] -> ( int),
                                  int -> ( int)},
                      int -> { int[*] -> ( int),
                               int -> ( int)}}
 *  dispatching to: sacprelude_d::partitionMin
 */;

external /* sticky */
int sacprelude_d::++( int[*] a { ,NN } )
/*
 *  ++ :: { int[*] -> ( int),
            int -> ( int)}
 *  dispatching to: sacprelude_d::++
 */;

external /* sticky */
int[*] sacprelude_d::sel( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { int[*] -> ( int[*])},
             int[+] -> { int[*] -> ( int[*])},
             int[.] -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
float[*] sacprelude_d::sel( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { float[*] -> ( float[*])},
             int[+] -> { float[*] -> ( float[*])},
             int[.] -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
double[*] sacprelude_d::sel( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { double[*] -> ( double[*])},
             int[+] -> { double[*] -> ( double[*])},
             int[.] -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
bool[*] sacprelude_d::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*])},
             int[.] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
char[*] sacprelude_d::sel( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { char[*] -> ( char[*])},
             int[+] -> { char[*] -> ( char[*])},
             int[.] -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
byte[*] sacprelude_d::sel( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { byte[*] -> ( byte[*])},
             int[+] -> { byte[*] -> ( byte[*])},
             int[.] -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
short[*] sacprelude_d::sel( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { short[*] -> ( short[*])},
             int[+] -> { short[*] -> ( short[*])},
             int[.] -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
long[*] sacprelude_d::sel( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { long[*] -> ( long[*])},
             int[+] -> { long[*] -> ( long[*])},
             int[.] -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
longlong[*] sacprelude_d::sel( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { longlong[*] -> ( longlong[*])},
             int[+] -> { longlong[*] -> ( longlong[*])},
             int[.] -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ubyte[*] sacprelude_d::sel( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
             int[+] -> { ubyte[*] -> ( ubyte[*])},
             int[.] -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ushort[*] sacprelude_d::sel( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ushort[*] -> ( ushort[*])},
             int[+] -> { ushort[*] -> ( ushort[*])},
             int[.] -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
uint[*] sacprelude_d::sel( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { uint[*] -> ( uint[*])},
             int[+] -> { uint[*] -> ( uint[*])},
             int[.] -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ulong[*] sacprelude_d::sel( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ulong[*] -> ( ulong[*])},
             int[+] -> { ulong[*] -> ( ulong[*])},
             int[.] -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ulonglong[*] sacprelude_d::sel( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
             int[+] -> { ulonglong[*] -> ( ulonglong[*])},
             int[.] -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
int[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { int[*] -> ( int[*])},
                             int[+] -> { int[*] -> ( int[*])},
                             int[.] -> { int[*] -> ( int[*])},
                             int[1] -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
float[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { float[*] -> ( float[*])},
                             int[+] -> { float[*] -> ( float[*])},
                             int[.] -> { float[*] -> ( float[*])},
                             int[1] -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
double[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { double[*] -> ( double[*])},
                             int[+] -> { double[*] -> ( double[*])},
                             int[.] -> { double[*] -> ( double[*])},
                             int[1] -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
bool[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { bool[*] -> ( bool[*])},
                             int[+] -> { bool[*] -> ( bool[*])},
                             int[.] -> { bool[*] -> ( bool[*])},
                             int[1] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
char[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { char[*] -> ( char[*])},
                             int[+] -> { char[*] -> ( char[*])},
                             int[.] -> { char[*] -> ( char[*])},
                             int[1] -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
byte[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { byte[*] -> ( byte[*])},
                             int[+] -> { byte[*] -> ( byte[*])},
                             int[.] -> { byte[*] -> ( byte[*])},
                             int[1] -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
short[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { short[*] -> ( short[*])},
                             int[+] -> { short[*] -> ( short[*])},
                             int[.] -> { short[*] -> ( short[*])},
                             int[1] -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
long[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { long[*] -> ( long[*])},
                             int[+] -> { long[*] -> ( long[*])},
                             int[.] -> { long[*] -> ( long[*])},
                             int[1] -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
longlong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { longlong[*] -> ( longlong[*])},
                             int[+] -> { longlong[*] -> ( longlong[*])},
                             int[.] -> { longlong[*] -> ( longlong[*])},
                             int[1] -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ubyte[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
                             int[+] -> { ubyte[*] -> ( ubyte[*])},
                             int[.] -> { ubyte[*] -> ( ubyte[*])},
                             int[1] -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ushort[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ushort[*] -> ( ushort[*])},
                             int[+] -> { ushort[*] -> ( ushort[*])},
                             int[.] -> { ushort[*] -> ( ushort[*])},
                             int[1] -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
uint[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { uint[*] -> ( uint[*])},
                             int[+] -> { uint[*] -> ( uint[*])},
                             int[.] -> { uint[*] -> ( uint[*])},
                             int[1] -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ulong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ulong[*] -> ( ulong[*])},
                             int[+] -> { ulong[*] -> ( ulong[*])},
                             int[.] -> { ulong[*] -> ( ulong[*])},
                             int[1] -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ulonglong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[+] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[.] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[1] -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external World::World * World:_INIT::init_TheWorld( World::World *_OI_object { ,NN } )
/*
 *  init_TheWorld ::  ---
 */;

external World::World *, Terminal::Terminal * Terminal:_INIT::init_TheTerminal( World::World *_rso_5_TheWorld { ,NN } , Terminal::Terminal *_OI_object { ,NN } )
/*
 *  init_TheTerminal ::  ---
 */;

external Terminal::Terminal *, TermFile::TermFile * TermFile:_INIT::init_stdout( Terminal::Terminal *_rso_43_TheTerminal { ,NN } , TermFile::TermFile *_OI_object { ,NN } )
/*
 *  init_stdout ::  ---
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParams( bool[*] p { ,NN } , int[*] i { ,NN } , int[.] iv { ,NN } )
/*
 *  adjustLacFunParams ::  ---
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParamsReshape( bool[*] p { ,NN } , int[*] i { ,NN } , int[.] iv { ,NN } , int[.] shp { ,NN } )
/*
 *  adjustLacFunParamsReshape ::  ---
 */;

external /* sticky */
int sacprelude_d::++( int a { ,NN } )
/*
 *  ++ ::  ---
 */;

external bool[*] ArrayArith::&( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  & :: { bool[*] -> { bool[*] -> ( bool[*]),
                        bool -> ( bool[*]),
                        bool[+] -> ( bool[+])},
           bool -> { bool[*] -> ( bool[*]),
                     bool -> ( bool),
                     bool[+] -> ( bool[+])},
           bool[+] -> { bool[*] -> ( bool[+]),
                        bool -> ( bool[+]),
                        bool[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::&,
 *                  ArrayArith::&,
 *                  ArrayArith::&,
 *                  ScalarArith::&
 */;

external int sacprelude_d::*( int[*] a { ,NN } , int[*] b { ,NN } )
/*
 *  * :: { int[*] -> { int[*] -> ( int),
                       int -> ( int)},
           int -> { int[*] -> ( int),
                    int -> ( int)}}
 *  dispatching to: sacprelude_d::*
 */;

external bool sacprelude_d::and( bool[*] a { ,NN } , bool[*] b { ,NN } )
/*
 *  and :: { bool[*] -> { bool[*] -> ( bool),
                          bool -> ( bool)},
             bool -> { bool[*] -> ( bool),
                       bool -> ( bool)}}
 *  dispatching to: sacprelude_d::and
 */;

external int{1} ArrayArith::one( int[*] A { ,NN } )
/*
 *  one :: { int[*] -> ( int{1}),
             int -> ( int{1}),
             int[+] -> ( int{1}),
             int[.] -> ( int{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one
 */;

external int{1} ScalarArith::one( int[*] A { ,NN } )
/*
 *  one :: { int[*] -> ( int{1}),
             int -> ( int{1})}
 *  dispatching to: ScalarArith::one,
 *                  ScalarArith::one
 */;

external Terminal::Terminal *, TermFile::TermFile * TermFile::printf( Terminal::Terminal *_rso_13_TheTerminal { ,NN } , TermFile::TermFile *_rso_12_stdout { ,NN } , String::string[*] FORMAT { ,NN } , ...)
/*
 *  printf :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                      String::string -> ( Terminal::Terminal, TermFile::TermFile)},
                                           TermFile::TermFile -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                   String::string -> ( Terminal::Terminal, TermFile::TermFile)}},
                Terminal::Terminal -> { TermFile::TermFile[*] -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                   String::string -> ( Terminal::Terminal, TermFile::TermFile)},
                                        TermFile::TermFile -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                String::string -> ( Terminal::Terminal, TermFile::TermFile)}}}
 *  dispatching to: TermFile::printf
 */;

external String::string String::to_string( char[*] A { ,NN } , int[*] LENGTH { ,NN } )
/*
 *  to_string :: { char[*] -> { int[*] -> ( String::string),
                                int -> ( String::string)},
                   char[+] -> { int[*] -> ( String::string),
                                int -> ( String::string)},
                   char[.] -> { int[*] -> ( String::string),
                                int -> ( String::string)}}
 *  dispatching to: String::to_string
 */;

external TermFile::TermFile * ArrayIO::showarray( TermFile::TermFile *stream { ,NN } , int[*] d { ,NN } , int[*] s { ,NN } , char[*] a { ,NN } )
/*
 *  showarray :: { TermFile::TermFile[*] -> { int[*] -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                          int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                          int[.] -> { char[*] -> ( TermFile::TermFile)}},
                                              int -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[.] -> { char[*] -> ( TermFile::TermFile)}}},
                   TermFile::TermFile -> { int[*] -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[.] -> { char[*] -> ( TermFile::TermFile)}},
                                           int -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                    int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                    int[.] -> { char[*] -> ( TermFile::TermFile)}}}}
 *  dispatching to: ArrayIO::showarray
 */;

external int ArrayIO:Structures::dim( char[*] array { ,NN } )
/*
 *  dim :: { char[*] -> ( int),
             char[+] -> ( int)}
 *  dispatching to: ArrayBasics::dim,
 *                  ArrayIO:Structures::dim
 */;

external int[.] ArrayIO:Structures::shape( char[*] array { ,NN } )
/*
 *  shape :: { char[*] -> ( int[.]),
               char[+] -> ( int[.])}
 *  dispatching to: ArrayBasics::shape,
 *                  ArrayIO:Structures::shape
 */;

external char[+] ArrayFormat::format( bool[+] y { ,NN } )
/*
 *  format ::  ---
 */;

external char[1] ArrayFormat::format( bool y { ,NN } )
/*
 *  format ::  ---
 */;

external char[+] ArrayIO:ArrayFormat::format( bool[*] y { ,NN } )
/*
 *  format :: { bool[*] -> ( char[+]),
                bool -> ( char[1]),
                bool[+] -> ( char[+])}
 *  dispatching to: ArrayFormat::format,
 *                  ArrayFormat::format
 */;

external char[+] ArrayFormat::format( int[+] y { ,NN } )
/*
 *  format ::  ---
 */;

external char[.] ArrayFormat::format( int y { ,NN } )
/*
 *  format ::  ---
 */;

external char[+] ArrayIO:ArrayFormat::format( int[*] y { ,NN } )
/*
 *  format :: { int[*] -> ( char[+]),
                int -> ( char[.]),
                int[+] -> ( char[+])}
 *  dispatching to: ArrayFormat::format,
 *                  ArrayFormat::format
 */;

external bool{0} ArrayArith::zero( bool[*] A { ,NN } )
/*
 *  zero :: { bool[*] -> ( bool{0}),
              bool[+] -> ( bool{0})}
 *  dispatching to: ScalarArith::zero,
 *                  ArrayArith::zero
 */;

external bool{1} ArrayArith::one( bool[*] A { ,NN } )
/*
 *  one :: { bool[*] -> ( bool{1}),
             bool -> ( bool{1}),
             bool[+] -> ( bool{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one
 */;

external bool[*] ArrayBasics::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*])},
             int -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*])},
             int[.] -> { bool[*] -> ( bool[*])},
             int[1] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  ArrayBasics::sel
 */;

external bool[*] ArrayArith::to_bool( int[*] A { ,NN } )
/*
 *  to_bool :: { int[*] -> ( bool[*]),
                 int -> ( bool),
                 int[+] -> ( bool[+])}
 *  dispatching to: ArrayArith::to_bool,
 *                  Bool::to_bool
 */;

external int{0} ArrayArith::zero( int[*] A { ,NN } )
/*
 *  zero :: { int[*] -> ( int{0}),
              int[+] -> ( int{0})}
 *  dispatching to: ScalarArith::zero,
 *                  ArrayArith::zero
 */;



/*
 *  global objects
 */

external World::World World::TheWorld;

external Terminal::Terminal Terminal::TheTerminal;

external TermFile::TermFile TermFile::stdout;



/*
 *  function definitions (FUNDEFS)
 */



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7207_shape__Cond_560(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB:ArrayArith::_dup_7207_shape__Cond_560( int _cwc_3590 { ,NN } , bool _cwc_3614 { ,NN } , bool[*] array { ,NN } )
/*
 *  _dup_7207_shape__Cond_560 ::  ---
 */
{ 
  int _cwc_3595 { , NN } ; 
  bool _cwc_3596 { , NN } ; 
  int[+] _cwc_3598 { , NN } ; 
  bool _cwc_3607 { , NN } ; 
  int[1]{0} _cwc_3608 { , NN } ; 
  int _cwc_3609 { , NN } ; 
  int{2} _cwc_3610 { , NN } ; 
  bool _cwc_3611 { , NN } ; 
  bool _cwc_3612 { , NN } ; 
  int[.] _cwc_3588 { , NN } ; 

  if (_cwc_3614) 
  { 
    _cwc_3598 = _shape_A_( array); 
    _cwc_3607 = true; 
    _cwc_3610 = 2; 
    _cwc_3608 = [ 0 ]; 
    _cwc_3609 = _sel_VxA_( _cwc_3608, _cwc_3598); 
    _cwc_3611 = _eq_SxS_( _cwc_3609, _cwc_3610); 
    _cwc_3612 = _and_SxS_( _cwc_3611, _cwc_3607); 
    _cwc_3588 = UTDScalarB:ArrayArith::_dup_7206_shape__Cond_557( _cwc_3598, _cwc_3612, array) ; 
  }
  else
  { 
    _cwc_3595 = 2; 
    _cwc_3596 = _eq_SxS_( _cwc_3590, _cwc_3595); 
    _cwc_3588 = UTDScalarB:ArrayArith::_dup_7204_shape__Cond_559( _cwc_3590, _cwc_3596, array) ; 
  }
  return( _cwc_3588); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7206_shape__Cond_557(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB:ArrayArith::_dup_7206_shape__Cond_557( int[+] _cwc_3598 { ,NN } , bool _cwc_3612 { ,NN } , bool[*] array { ,NN } )
/*
 *  _dup_7206_shape__Cond_557 ::  ---
 */
{ 
  bool _cwc_3600 { , NN } ; 
  int[1]{0} _cwc_3601 { , NN } ; 
  int _cwc_3602 { , NN } ; 
  int{3} _cwc_3603 { , NN } ; 
  bool _cwc_3604 { , NN } ; 
  bool _cwc_3605 { , NN } ; 
  int[1]{2} _cwc_3606 { , NN } ; 
  int[.] _cwc_3588 { , NN } ; 

  if (_cwc_3612) 
  { 
    _cwc_3606 = UTDScalarB:ArrayArith::shape( array) ; 
    _cwc_3588 = _cwc_3606; 
  }
  else
  { 
    _cwc_3600 = true; 
    _cwc_3603 = 3; 
    _cwc_3601 = [ 0 ]; 
    _cwc_3602 = _sel_VxA_( _cwc_3601, _cwc_3598); 
    _cwc_3604 = _eq_SxS_( _cwc_3602, _cwc_3603); 
    _cwc_3605 = _and_SxS_( _cwc_3604, _cwc_3600); 
    _cwc_3588 = UTDScalarB:ArrayArith::_dup_7205_shape__Cond_556( _cwc_3605, array) ; 
  }
  return( _cwc_3588); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7205_shape__Cond_556(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB:ArrayArith::_dup_7205_shape__Cond_556( bool _cwc_3605 { ,NN } , bool[*] array { ,NN } )
/*
 *  _dup_7205_shape__Cond_556 ::  ---
 */
{ 
  int[1] _cwc_3597 { , NN } ; 
  int[1]{3} _cwc_3599 { , NN } ; 
  int[.] _cwc_3588 { , NN } ; 

  if (_cwc_3605) 
  { 
    _cwc_3599 = UTDScalarB:ArrayArith::shape( array) ; 
    _cwc_3588 = _cwc_3599; 
  }
  else
  { 
    _cwc_3597 = UTDScalarB:ArrayArith::shape( array) ; 
    _cwc_3588 = _cwc_3597; 
  }
  return( _cwc_3588); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7204_shape__Cond_559(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB:ArrayArith::_dup_7204_shape__Cond_559( int _cwc_3590 { ,NN } , bool _cwc_3596 { ,NN } , bool[*] array { ,NN } )
/*
 *  _dup_7204_shape__Cond_559 ::  ---
 */
{ 
  int _cwc_3592 { , NN } ; 
  bool _cwc_3593 { , NN } ; 
  int[2] _cwc_3594 { , NN } ; 
  int[.] _cwc_3588 { , NN } ; 

  if (_cwc_3596) 
  { 
    _cwc_3594 = UTDScalarB:ArrayArith::shape( array) ; 
    _cwc_3588 = _cwc_3594; 
  }
  else
  { 
    _cwc_3592 = 3; 
    _cwc_3593 = _eq_SxS_( _cwc_3590, _cwc_3592); 
    _cwc_3588 = UTDScalarB:ArrayArith::_dup_7203_shape__Cond_558( _cwc_3593, array) ; 
  }
  return( _cwc_3588); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7203_shape__Cond_558(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB:ArrayArith::_dup_7203_shape__Cond_558( bool _cwc_3593 { ,NN } , bool[*] array { ,NN } )
/*
 *  _dup_7203_shape__Cond_558 ::  ---
 */
{ 
  int[.] _cwc_3589 { , NN } ; 
  int[3] _cwc_3591 { , NN } ; 
  int[.] _cwc_3588 { , NN } ; 

  if (_cwc_3593) 
  { 
    _cwc_3591 = UTDScalarB:ArrayArith::shape( array) ; 
    _cwc_3588 = _cwc_3591; 
  }
  else
  { 
    _cwc_3589 = UTDScalarB:ArrayArith::shape( array) ; 
    _cwc_3588 = _cwc_3589; 
  }
  return( _cwc_3588); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7196_sel__Cond_554(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7196_sel__Cond_554( bool _cwc_3583 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7196_sel__Cond_554 ::  ---
 */
{ 
  int[+] _cwc_3489 { , NN } ; 
  bool _cwc_3576 { , NN } ; 
  int[1]{0} _cwc_3577 { , NN } ; 
  int _cwc_3578 { , NN } ; 
  int{1} _cwc_3579 { , NN } ; 
  bool _cwc_3580 { , NN } ; 
  bool _cwc_3581 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3583) 
  { 
    _cwc_3489 = _shape_A_( idx); 
    _cwc_3576 = true; 
    _cwc_3579 = 1; 
    _cwc_3577 = [ 0 ]; 
    _cwc_3578 = _sel_VxA_( _cwc_3577, _cwc_3489); 
    _cwc_3580 = _eq_SxS_( _cwc_3578, _cwc_3579); 
    _cwc_3581 = _and_SxS_( _cwc_3580, _cwc_3576); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7195_sel__Cond_553( _cwc_3489, _cwc_3581, array, idx) ; 
  }
  else
  { 
    _cwc_3457 = _dispatch_error_( 1, bool[*], "UTDScalarB:ArrayArith::sel :: int[*] bool[*] -> bool[*] ", idx, array); 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7195_sel__Cond_553(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7195_sel__Cond_553( int[+] _cwc_3489 { ,NN } , bool _cwc_3581 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7195_sel__Cond_553 ::  ---
 */
{ 
  bool _cwc_3546 { , NN } ; 
  int[1]{0} _cwc_3547 { , NN } ; 
  int _cwc_3548 { , NN } ; 
  int{2} _cwc_3549 { , NN } ; 
  bool _cwc_3550 { , NN } ; 
  bool _cwc_3551 { , NN } ; 
  int _cwc_3572 { , NN } ; 
  int _cwc_3574 { , NN } ; 
  bool _cwc_3575 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3581) 
  { 
    _cwc_3572 = _dim_A_( array); 
    _cwc_3574 = 0; 
    _cwc_3575 = _gt_SxS_( _cwc_3572, _cwc_3574); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7194_sel__Cond_534( _cwc_3575, array, idx) ; 
  }
  else
  { 
    _cwc_3546 = true; 
    _cwc_3549 = 2; 
    _cwc_3547 = [ 0 ]; 
    _cwc_3548 = _sel_VxA_( _cwc_3547, _cwc_3489); 
    _cwc_3550 = _eq_SxS_( _cwc_3548, _cwc_3549); 
    _cwc_3551 = _and_SxS_( _cwc_3550, _cwc_3546); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7190_sel__Cond_552( _cwc_3489, _cwc_3551, array, idx) ; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7194_sel__Cond_534(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7194_sel__Cond_534( bool _cwc_3575 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7194_sel__Cond_534 ::  ---
 */
{ 
  int _cwc_3553 { , NN } ; 
  int _cwc_3570 { , NN } ; 
  bool _cwc_3571 { , NN } ; 
  bool[*] _cwc_3573 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3575) 
  { 
    _cwc_3553 = _dim_A_( array); 
    _cwc_3570 = 1; 
    _cwc_3571 = _eq_SxS_( _cwc_3553, _cwc_3570); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7193_sel__Cond_533( _cwc_3571, array, idx) ; 
  }
  else
  { 
    _cwc_3573 = ArrayBasics::sel( idx, array) ; 
    _cwc_3457 = _cwc_3573; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7193_sel__Cond_533(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7193_sel__Cond_533( bool _cwc_3571 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7193_sel__Cond_533 ::  ---
 */
{ 
  bool[*] _cwc_3552 { , NN } ; 
  int[+] _cwc_3555 { , NN } ; 
  bool _cwc_3564 { , NN } ; 
  int[1]{0} _cwc_3565 { , NN } ; 
  int _cwc_3566 { , NN } ; 
  int{2} _cwc_3567 { , NN } ; 
  bool _cwc_3568 { , NN } ; 
  bool _cwc_3569 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3571) 
  { 
    _cwc_3555 = _shape_A_( array); 
    _cwc_3564 = true; 
    _cwc_3567 = 2; 
    _cwc_3565 = [ 0 ]; 
    _cwc_3566 = _sel_VxA_( _cwc_3565, _cwc_3555); 
    _cwc_3568 = _eq_SxS_( _cwc_3566, _cwc_3567); 
    _cwc_3569 = _and_SxS_( _cwc_3568, _cwc_3564); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7192_sel__Cond_532( _cwc_3555, _cwc_3569, array, idx) ; 
  }
  else
  { 
    _cwc_3552 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3552; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7192_sel__Cond_532(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7192_sel__Cond_532( int[+] _cwc_3555 { ,NN } , bool _cwc_3569 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7192_sel__Cond_532 ::  ---
 */
{ 
  bool _cwc_3557 { , NN } ; 
  int[1]{0} _cwc_3558 { , NN } ; 
  int _cwc_3559 { , NN } ; 
  int{3} _cwc_3560 { , NN } ; 
  bool _cwc_3561 { , NN } ; 
  bool _cwc_3562 { , NN } ; 
  bool _cwc_3563 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3569) 
  { 
    _cwc_3563 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3563; 
  }
  else
  { 
    _cwc_3557 = true; 
    _cwc_3560 = 3; 
    _cwc_3558 = [ 0 ]; 
    _cwc_3559 = _sel_VxA_( _cwc_3558, _cwc_3555); 
    _cwc_3561 = _eq_SxS_( _cwc_3559, _cwc_3560); 
    _cwc_3562 = _and_SxS_( _cwc_3561, _cwc_3557); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7191_sel__Cond_531( _cwc_3562, array, idx) ; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7191_sel__Cond_531(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7191_sel__Cond_531( bool _cwc_3562 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7191_sel__Cond_531 ::  ---
 */
{ 
  bool _cwc_3554 { , NN } ; 
  bool _cwc_3556 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3562) 
  { 
    _cwc_3556 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3556; 
  }
  else
  { 
    _cwc_3554 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3554; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7190_sel__Cond_552(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7190_sel__Cond_552( int[+] _cwc_3489 { ,NN } , bool _cwc_3551 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7190_sel__Cond_552 ::  ---
 */
{ 
  bool _cwc_3520 { , NN } ; 
  int[1]{0} _cwc_3521 { , NN } ; 
  int _cwc_3522 { , NN } ; 
  int{3} _cwc_3523 { , NN } ; 
  bool _cwc_3524 { , NN } ; 
  bool _cwc_3525 { , NN } ; 
  int _cwc_3542 { , NN } ; 
  int _cwc_3544 { , NN } ; 
  bool _cwc_3545 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3551) 
  { 
    _cwc_3542 = _dim_A_( array); 
    _cwc_3544 = 0; 
    _cwc_3545 = _gt_SxS_( _cwc_3542, _cwc_3544); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7189_sel__Cond_538( _cwc_3545, array, idx) ; 
  }
  else
  { 
    _cwc_3520 = true; 
    _cwc_3523 = 3; 
    _cwc_3521 = [ 0 ]; 
    _cwc_3522 = _sel_VxA_( _cwc_3521, _cwc_3489); 
    _cwc_3524 = _eq_SxS_( _cwc_3522, _cwc_3523); 
    _cwc_3525 = _and_SxS_( _cwc_3524, _cwc_3520); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7185_sel__Cond_551( _cwc_3525, array, idx) ; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7189_sel__Cond_538(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7189_sel__Cond_538( bool _cwc_3545 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7189_sel__Cond_538 ::  ---
 */
{ 
  int _cwc_3527 { , NN } ; 
  int _cwc_3540 { , NN } ; 
  bool _cwc_3541 { , NN } ; 
  bool[*] _cwc_3543 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3545) 
  { 
    _cwc_3527 = _dim_A_( array); 
    _cwc_3540 = 1; 
    _cwc_3541 = _eq_SxS_( _cwc_3527, _cwc_3540); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7188_sel__Cond_537( _cwc_3527, _cwc_3541, array, idx) ; 
  }
  else
  { 
    _cwc_3543 = ArrayBasics::sel( idx, array) ; 
    _cwc_3457 = _cwc_3543; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7188_sel__Cond_537(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7188_sel__Cond_537( int _cwc_3527 { ,NN } , bool _cwc_3541 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7188_sel__Cond_537 ::  ---
 */
{ 
  int _cwc_3529 { , NN } ; 
  bool _cwc_3530 { , NN } ; 
  int[+] _cwc_3532 { , NN } ; 
  bool _cwc_3534 { , NN } ; 
  int[1]{0} _cwc_3535 { , NN } ; 
  int _cwc_3536 { , NN } ; 
  int{2} _cwc_3537 { , NN } ; 
  bool _cwc_3538 { , NN } ; 
  bool _cwc_3539 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3541) 
  { 
    _cwc_3532 = _shape_A_( array); 
    _cwc_3534 = true; 
    _cwc_3537 = 2; 
    _cwc_3535 = [ 0 ]; 
    _cwc_3536 = _sel_VxA_( _cwc_3535, _cwc_3532); 
    _cwc_3538 = _eq_SxS_( _cwc_3536, _cwc_3537); 
    _cwc_3539 = _and_SxS_( _cwc_3538, _cwc_3534); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7187_sel__Cond_535( _cwc_3539, array, idx) ; 
  }
  else
  { 
    _cwc_3529 = 2; 
    _cwc_3530 = _eq_SxS_( _cwc_3527, _cwc_3529); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7186_sel__Cond_536( _cwc_3530, array, idx) ; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7187_sel__Cond_535(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7187_sel__Cond_535( bool _cwc_3539 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7187_sel__Cond_535 ::  ---
 */
{ 
  bool[*] _cwc_3531 { , NN } ; 
  bool[*] _cwc_3533 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3539) 
  { 
    _cwc_3533 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3533; 
  }
  else
  { 
    _cwc_3531 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3531; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7186_sel__Cond_536(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7186_sel__Cond_536( bool _cwc_3530 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7186_sel__Cond_536 ::  ---
 */
{ 
  bool[*] _cwc_3526 { , NN } ; 
  bool _cwc_3528 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3530) 
  { 
    _cwc_3528 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3528; 
  }
  else
  { 
    _cwc_3526 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3526; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7185_sel__Cond_551(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7185_sel__Cond_551( bool _cwc_3525 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7185_sel__Cond_551 ::  ---
 */
{ 
  int _cwc_3485 { , NN } ; 
  int _cwc_3487 { , NN } ; 
  bool _cwc_3488 { , NN } ; 
  int _cwc_3516 { , NN } ; 
  int _cwc_3518 { , NN } ; 
  bool _cwc_3519 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3525) 
  { 
    _cwc_3516 = _dim_A_( array); 
    _cwc_3518 = 0; 
    _cwc_3519 = _gt_SxS_( _cwc_3516, _cwc_3518); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7184_sel__Cond_544( _cwc_3519, array, idx) ; 
  }
  else
  { 
    _cwc_3485 = _dim_A_( array); 
    _cwc_3487 = 0; 
    _cwc_3488 = _gt_SxS_( _cwc_3485, _cwc_3487); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7178_sel__Cond_550( _cwc_3488, array, idx) ; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7184_sel__Cond_544(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7184_sel__Cond_544( bool _cwc_3519 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7184_sel__Cond_544 ::  ---
 */
{ 
  int _cwc_3491 { , NN } ; 
  int _cwc_3514 { , NN } ; 
  bool _cwc_3515 { , NN } ; 
  bool[*] _cwc_3517 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3519) 
  { 
    _cwc_3491 = _dim_A_( array); 
    _cwc_3514 = 1; 
    _cwc_3515 = _eq_SxS_( _cwc_3491, _cwc_3514); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7183_sel__Cond_543( _cwc_3491, _cwc_3515, array, idx) ; 
  }
  else
  { 
    _cwc_3517 = ArrayBasics::sel( idx, array) ; 
    _cwc_3457 = _cwc_3517; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7183_sel__Cond_543(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7183_sel__Cond_543( int _cwc_3491 { ,NN } , bool _cwc_3515 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7183_sel__Cond_543 ::  ---
 */
{ 
  int _cwc_3496 { , NN } ; 
  bool _cwc_3497 { , NN } ; 
  int[+] _cwc_3499 { , NN } ; 
  bool _cwc_3508 { , NN } ; 
  int[1]{0} _cwc_3509 { , NN } ; 
  int _cwc_3510 { , NN } ; 
  int{2} _cwc_3511 { , NN } ; 
  bool _cwc_3512 { , NN } ; 
  bool _cwc_3513 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3515) 
  { 
    _cwc_3499 = _shape_A_( array); 
    _cwc_3508 = true; 
    _cwc_3511 = 2; 
    _cwc_3509 = [ 0 ]; 
    _cwc_3510 = _sel_VxA_( _cwc_3509, _cwc_3499); 
    _cwc_3512 = _eq_SxS_( _cwc_3510, _cwc_3511); 
    _cwc_3513 = _and_SxS_( _cwc_3512, _cwc_3508); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7182_sel__Cond_540( _cwc_3499, _cwc_3513, array, idx) ; 
  }
  else
  { 
    _cwc_3496 = 2; 
    _cwc_3497 = _eq_SxS_( _cwc_3491, _cwc_3496); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7180_sel__Cond_542( _cwc_3491, _cwc_3497, array, idx) ; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7182_sel__Cond_540(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7182_sel__Cond_540( int[+] _cwc_3499 { ,NN } , bool _cwc_3513 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7182_sel__Cond_540 ::  ---
 */
{ 
  bool _cwc_3501 { , NN } ; 
  int[1]{0} _cwc_3502 { , NN } ; 
  int _cwc_3503 { , NN } ; 
  int{3} _cwc_3504 { , NN } ; 
  bool _cwc_3505 { , NN } ; 
  bool _cwc_3506 { , NN } ; 
  bool[*] _cwc_3507 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3513) 
  { 
    _cwc_3507 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3507; 
  }
  else
  { 
    _cwc_3501 = true; 
    _cwc_3504 = 3; 
    _cwc_3502 = [ 0 ]; 
    _cwc_3503 = _sel_VxA_( _cwc_3502, _cwc_3499); 
    _cwc_3505 = _eq_SxS_( _cwc_3503, _cwc_3504); 
    _cwc_3506 = _and_SxS_( _cwc_3505, _cwc_3501); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7181_sel__Cond_539( _cwc_3506, array, idx) ; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7181_sel__Cond_539(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7181_sel__Cond_539( bool _cwc_3506 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7181_sel__Cond_539 ::  ---
 */
{ 
  bool[*] _cwc_3498 { , NN } ; 
  bool[*] _cwc_3500 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3506) 
  { 
    _cwc_3500 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3500; 
  }
  else
  { 
    _cwc_3498 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3498; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7180_sel__Cond_542(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7180_sel__Cond_542( int _cwc_3491 { ,NN } , bool _cwc_3497 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7180_sel__Cond_542 ::  ---
 */
{ 
  int _cwc_3493 { , NN } ; 
  bool _cwc_3494 { , NN } ; 
  bool[*] _cwc_3495 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3497) 
  { 
    _cwc_3495 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3495; 
  }
  else
  { 
    _cwc_3493 = 3; 
    _cwc_3494 = _eq_SxS_( _cwc_3491, _cwc_3493); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7179_sel__Cond_541( _cwc_3494, array, idx) ; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7179_sel__Cond_541(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7179_sel__Cond_541( bool _cwc_3494 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7179_sel__Cond_541 ::  ---
 */
{ 
  bool[*] _cwc_3490 { , NN } ; 
  bool _cwc_3492 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3494) 
  { 
    _cwc_3492 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3492; 
  }
  else
  { 
    _cwc_3490 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3490; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7178_sel__Cond_550(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7178_sel__Cond_550( bool _cwc_3488 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7178_sel__Cond_550 ::  ---
 */
{ 
  int _cwc_3460 { , NN } ; 
  int _cwc_3483 { , NN } ; 
  bool _cwc_3484 { , NN } ; 
  bool[*] _cwc_3486 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3488) 
  { 
    _cwc_3460 = _dim_A_( array); 
    _cwc_3483 = 1; 
    _cwc_3484 = _eq_SxS_( _cwc_3460, _cwc_3483); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7177_sel__Cond_549( _cwc_3460, _cwc_3484, array, idx) ; 
  }
  else
  { 
    _cwc_3486 = ArrayBasics::sel( idx, array) ; 
    _cwc_3457 = _cwc_3486; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7177_sel__Cond_549(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7177_sel__Cond_549( int _cwc_3460 { ,NN } , bool _cwc_3484 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7177_sel__Cond_549 ::  ---
 */
{ 
  int _cwc_3465 { , NN } ; 
  bool _cwc_3466 { , NN } ; 
  int[+] _cwc_3468 { , NN } ; 
  bool _cwc_3477 { , NN } ; 
  int[1]{0} _cwc_3478 { , NN } ; 
  int _cwc_3479 { , NN } ; 
  int{2} _cwc_3480 { , NN } ; 
  bool _cwc_3481 { , NN } ; 
  bool _cwc_3482 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3484) 
  { 
    _cwc_3468 = _shape_A_( array); 
    _cwc_3477 = true; 
    _cwc_3480 = 2; 
    _cwc_3478 = [ 0 ]; 
    _cwc_3479 = _sel_VxA_( _cwc_3478, _cwc_3468); 
    _cwc_3481 = _eq_SxS_( _cwc_3479, _cwc_3480); 
    _cwc_3482 = _and_SxS_( _cwc_3481, _cwc_3477); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7176_sel__Cond_546( _cwc_3468, _cwc_3482, array, idx) ; 
  }
  else
  { 
    _cwc_3465 = 2; 
    _cwc_3466 = _eq_SxS_( _cwc_3460, _cwc_3465); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7174_sel__Cond_548( _cwc_3460, _cwc_3466, array, idx) ; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7176_sel__Cond_546(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7176_sel__Cond_546( int[+] _cwc_3468 { ,NN } , bool _cwc_3482 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7176_sel__Cond_546 ::  ---
 */
{ 
  bool _cwc_3470 { , NN } ; 
  int[1]{0} _cwc_3471 { , NN } ; 
  int _cwc_3472 { , NN } ; 
  int{3} _cwc_3473 { , NN } ; 
  bool _cwc_3474 { , NN } ; 
  bool _cwc_3475 { , NN } ; 
  bool[*] _cwc_3476 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3482) 
  { 
    _cwc_3476 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3476; 
  }
  else
  { 
    _cwc_3470 = true; 
    _cwc_3473 = 3; 
    _cwc_3471 = [ 0 ]; 
    _cwc_3472 = _sel_VxA_( _cwc_3471, _cwc_3468); 
    _cwc_3474 = _eq_SxS_( _cwc_3472, _cwc_3473); 
    _cwc_3475 = _and_SxS_( _cwc_3474, _cwc_3470); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7175_sel__Cond_545( _cwc_3475, array, idx) ; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7175_sel__Cond_545(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7175_sel__Cond_545( bool _cwc_3475 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7175_sel__Cond_545 ::  ---
 */
{ 
  bool[*] _cwc_3467 { , NN } ; 
  bool[*] _cwc_3469 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3475) 
  { 
    _cwc_3469 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3469; 
  }
  else
  { 
    _cwc_3467 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3467; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7174_sel__Cond_548(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7174_sel__Cond_548( int _cwc_3460 { ,NN } , bool _cwc_3466 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7174_sel__Cond_548 ::  ---
 */
{ 
  int _cwc_3462 { , NN } ; 
  bool _cwc_3463 { , NN } ; 
  bool[*] _cwc_3464 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3466) 
  { 
    _cwc_3464 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3464; 
  }
  else
  { 
    _cwc_3462 = 3; 
    _cwc_3463 = _eq_SxS_( _cwc_3460, _cwc_3462); 
    _cwc_3457 = UTDScalarB:ArrayArith::_dup_7173_sel__Cond_547( _cwc_3463, array, idx) ; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7173_sel__Cond_547(...) [ body ]
 ****************************************************************************/
bool[*] UTDScalarB:ArrayArith::_dup_7173_sel__Cond_547( bool _cwc_3463 { ,NN } , bool[*] array { ,NN } , int[*] idx { ,NN } )
/*
 *  _dup_7173_sel__Cond_547 ::  ---
 */
{ 
  bool[*] _cwc_3459 { , NN } ; 
  bool[*] _cwc_3461 { , NN } ; 
  bool[*] _cwc_3457 { , NN } ; 

  if (_cwc_3463) 
  { 
    _cwc_3461 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3461; 
  }
  else
  { 
    _cwc_3459 = UTDScalarB:ArrayArith::sel( idx, array) ; 
    _cwc_3457 = _cwc_3459; 
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7065_one__Cond_529(...) [ body ]
 ****************************************************************************/
int{1} UTDScalarB:ArrayArith::_dup_7065_one__Cond_529( bool _cwc_3452 { ,NN } , int[*] A { ,NN } )
/*
 *  _dup_7065_one__Cond_529 ::  ---
 */
{ 
  int _cwc_3423 { , NN } ; 
  int _cwc_3447 { , NN } ; 
  bool _cwc_3448 { , NN } ; 
  int{1} _cwc_3450 { , NN } ; 
  int{1} _cwc_3421 { , NN } ; 

  if (_cwc_3452) 
  { 
    _cwc_3423 = _dim_A_( A); 
    _cwc_3447 = 1; 
    _cwc_3448 = _eq_SxS_( _cwc_3423, _cwc_3447); 
    _cwc_3421 = UTDScalarB:ArrayArith::_dup_7064_one__Cond_528( _cwc_3448, A) ; 
  }
  else
  { 
    _cwc_3450 = ScalarArith::one( A) ; 
    _cwc_3421 = _cwc_3450; 
  }
  return( _cwc_3421); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7064_one__Cond_528(...) [ body ]
 ****************************************************************************/
int{1} UTDScalarB:ArrayArith::_dup_7064_one__Cond_528( bool _cwc_3448 { ,NN } , int[*] A { ,NN } )
/*
 *  _dup_7064_one__Cond_528 ::  ---
 */
{ 
  int{1} _cwc_3422 { , NN } ; 
  int[+] _cwc_3425 { , NN } ; 
  bool _cwc_3441 { , NN } ; 
  int[1]{0} _cwc_3442 { , NN } ; 
  int _cwc_3443 { , NN } ; 
  int{1} _cwc_3444 { , NN } ; 
  bool _cwc_3445 { , NN } ; 
  bool _cwc_3446 { , NN } ; 
  int{1} _cwc_3421 { , NN } ; 

  if (_cwc_3448) 
  { 
    _cwc_3425 = _shape_A_( A); 
    _cwc_3441 = true; 
    _cwc_3444 = 1; 
    _cwc_3442 = [ 0 ]; 
    _cwc_3443 = _sel_VxA_( _cwc_3442, _cwc_3425); 
    _cwc_3445 = _eq_SxS_( _cwc_3443, _cwc_3444); 
    _cwc_3446 = _and_SxS_( _cwc_3445, _cwc_3441); 
    _cwc_3421 = UTDScalarB:ArrayArith::_dup_7063_one__Cond_527( _cwc_3425, _cwc_3446, A) ; 
  }
  else
  { 
    _cwc_3422 = ArrayArith::one( A) ; 
    _cwc_3421 = _cwc_3422; 
  }
  return( _cwc_3421); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7063_one__Cond_527(...) [ body ]
 ****************************************************************************/
int{1} UTDScalarB:ArrayArith::_dup_7063_one__Cond_527( int[+] _cwc_3425 { ,NN } , bool _cwc_3446 { ,NN } , int[*] A { ,NN } )
/*
 *  _dup_7063_one__Cond_527 ::  ---
 */
{ 
  bool _cwc_3434 { , NN } ; 
  int[1]{0} _cwc_3435 { , NN } ; 
  int _cwc_3436 { , NN } ; 
  int{2} _cwc_3437 { , NN } ; 
  bool _cwc_3438 { , NN } ; 
  bool _cwc_3439 { , NN } ; 
  int{1} _cwc_3440 { , NN } ; 
  int{1} _cwc_3421 { , NN } ; 

  if (_cwc_3446) 
  { 
    _cwc_3440 = UTDScalarB:ArrayArith::one( A) ; 
    _cwc_3421 = _cwc_3440; 
  }
  else
  { 
    _cwc_3434 = true; 
    _cwc_3437 = 2; 
    _cwc_3435 = [ 0 ]; 
    _cwc_3436 = _sel_VxA_( _cwc_3435, _cwc_3425); 
    _cwc_3438 = _eq_SxS_( _cwc_3436, _cwc_3437); 
    _cwc_3439 = _and_SxS_( _cwc_3438, _cwc_3434); 
    _cwc_3421 = UTDScalarB:ArrayArith::_dup_7062_one__Cond_526( _cwc_3425, _cwc_3439, A) ; 
  }
  return( _cwc_3421); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7062_one__Cond_526(...) [ body ]
 ****************************************************************************/
int{1} UTDScalarB:ArrayArith::_dup_7062_one__Cond_526( int[+] _cwc_3425 { ,NN } , bool _cwc_3439 { ,NN } , int[*] A { ,NN } )
/*
 *  _dup_7062_one__Cond_526 ::  ---
 */
{ 
  bool _cwc_3427 { , NN } ; 
  int[1]{0} _cwc_3428 { , NN } ; 
  int _cwc_3429 { , NN } ; 
  int{3} _cwc_3430 { , NN } ; 
  bool _cwc_3431 { , NN } ; 
  bool _cwc_3432 { , NN } ; 
  int{1} _cwc_3433 { , NN } ; 
  int{1} _cwc_3421 { , NN } ; 

  if (_cwc_3439) 
  { 
    _cwc_3433 = UTDScalarB:ArrayArith::one( A) ; 
    _cwc_3421 = _cwc_3433; 
  }
  else
  { 
    _cwc_3427 = true; 
    _cwc_3430 = 3; 
    _cwc_3428 = [ 0 ]; 
    _cwc_3429 = _sel_VxA_( _cwc_3428, _cwc_3425); 
    _cwc_3431 = _eq_SxS_( _cwc_3429, _cwc_3430); 
    _cwc_3432 = _and_SxS_( _cwc_3431, _cwc_3427); 
    _cwc_3421 = UTDScalarB:ArrayArith::_dup_7061_one__Cond_525( _cwc_3432, A) ; 
  }
  return( _cwc_3421); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7061_one__Cond_525(...) [ body ]
 ****************************************************************************/
int{1} UTDScalarB:ArrayArith::_dup_7061_one__Cond_525( bool _cwc_3432 { ,NN } , int[*] A { ,NN } )
/*
 *  _dup_7061_one__Cond_525 ::  ---
 */
{ 
  int{1} _cwc_3424 { , NN } ; 
  int{1} _cwc_3426 { , NN } ; 
  int{1} _cwc_3421 { , NN } ; 

  if (_cwc_3432) 
  { 
    _cwc_3426 = UTDScalarB:ArrayArith::one( A) ; 
    _cwc_3421 = _cwc_3426; 
  }
  else
  { 
    _cwc_3424 = ArrayArith::one( A) ; 
    _cwc_3421 = _cwc_3424; 
  }
  return( _cwc_3421); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7050_modarray__Cond_516(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7050_modarray__Cond_516( bool _cwc_3418 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7050_modarray__Cond_516 ::  ---
 */
{ 
  int _cwc_3389 { , NN } ; 
  int _cwc_3413 { , NN } ; 
  bool _cwc_3414 { , NN } ; 
  int[*] _cwc_3416 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3418) 
  { 
    _cwc_3416 = ArrayBasics::modarray( array, v, val) ; 
    _cwc_3357 = _cwc_3416; 
  }
  else
  { 
    _cwc_3389 = _dim_A_( v); 
    _cwc_3413 = 1; 
    _cwc_3414 = _eq_SxS_( _cwc_3389, _cwc_3413); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7049_modarray__Cond_515( _cwc_3414, val, v, array) ; 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7049_modarray__Cond_515(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7049_modarray__Cond_515( bool _cwc_3414 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7049_modarray__Cond_515 ::  ---
 */
{ 
  int[+] _cwc_3398 { , NN } ; 
  bool _cwc_3407 { , NN } ; 
  int[1]{0} _cwc_3408 { , NN } ; 
  int _cwc_3409 { , NN } ; 
  int{1} _cwc_3410 { , NN } ; 
  bool _cwc_3411 { , NN } ; 
  bool _cwc_3412 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3414) 
  { 
    _cwc_3398 = _shape_A_( v); 
    _cwc_3407 = true; 
    _cwc_3410 = 1; 
    _cwc_3408 = [ 0 ]; 
    _cwc_3409 = _sel_VxA_( _cwc_3408, _cwc_3398); 
    _cwc_3411 = _eq_SxS_( _cwc_3409, _cwc_3410); 
    _cwc_3412 = _and_SxS_( _cwc_3411, _cwc_3407); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7048_modarray__Cond_514( _cwc_3412, val, v, array) ; 
  }
  else
  { 
    _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7048_modarray__Cond_514(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7048_modarray__Cond_514( bool _cwc_3412 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7048_modarray__Cond_514 ::  ---
 */
{ 
  int _cwc_3394 { , NN } ; 
  int _cwc_3396 { , NN } ; 
  bool _cwc_3397 { , NN } ; 
  int _cwc_3403 { , NN } ; 
  int _cwc_3405 { , NN } ; 
  bool _cwc_3406 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3412) 
  { 
    _cwc_3403 = _dim_A_( val); 
    _cwc_3405 = 0; 
    _cwc_3406 = _eq_SxS_( _cwc_3403, _cwc_3405); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7047_modarray__Cond_511( _cwc_3406, val, v, array) ; 
  }
  else
  { 
    _cwc_3394 = _dim_A_( val); 
    _cwc_3396 = 0; 
    _cwc_3397 = _eq_SxS_( _cwc_3394, _cwc_3396); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7045_modarray__Cond_513( _cwc_3397, val, v, array) ; 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7047_modarray__Cond_511(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7047_modarray__Cond_511( bool _cwc_3406 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7047_modarray__Cond_511 ::  ---
 */
{ 
  int _cwc_3400 { , NN } ; 
  int _cwc_3401 { , NN } ; 
  bool _cwc_3402 { , NN } ; 
  int[.] _cwc_3404 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3406) 
  { 
    _cwc_3404 = UTDScalarB:ArrayBasics::modarray( array, v, val) ; 
    _cwc_3357 = _cwc_3404; 
  }
  else
  { 
    _cwc_3400 = _dim_A_( val); 
    _cwc_3401 = 0; 
    _cwc_3402 = _gt_SxS_( _cwc_3400, _cwc_3401); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7046_modarray__Cond_510( _cwc_3402, val, v, array) ; 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7046_modarray__Cond_510(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7046_modarray__Cond_510( bool _cwc_3402 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7046_modarray__Cond_510 ::  ---
 */
{ 
  int[+] _cwc_3399 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3402) 
  { 
    _cwc_3399 = ArrayBasics::modarray( array, v, val) ; 
    _cwc_3357 = _cwc_3399; 
  }
  else
  { 
    _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7045_modarray__Cond_513(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7045_modarray__Cond_513( bool _cwc_3397 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7045_modarray__Cond_513 ::  ---
 */
{ 
  int _cwc_3391 { , NN } ; 
  int _cwc_3392 { , NN } ; 
  bool _cwc_3393 { , NN } ; 
  int[*] _cwc_3395 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3397) 
  { 
    _cwc_3395 = ArrayBasics::modarray( array, v, val) ; 
    _cwc_3357 = _cwc_3395; 
  }
  else
  { 
    _cwc_3391 = _dim_A_( val); 
    _cwc_3392 = 0; 
    _cwc_3393 = _gt_SxS_( _cwc_3391, _cwc_3392); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7044_modarray__Cond_512( _cwc_3393, val, v, array) ; 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7044_modarray__Cond_512(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7044_modarray__Cond_512( bool _cwc_3393 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7044_modarray__Cond_512 ::  ---
 */
{ 
  int[+] _cwc_3390 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3393) 
  { 
    _cwc_3390 = ArrayBasics::modarray( array, v, val) ; 
    _cwc_3357 = _cwc_3390; 
  }
  else
  { 
    _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7043_modarray__Cond_523(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7043_modarray__Cond_523( bool _cwc_3387 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7043_modarray__Cond_523 ::  ---
 */
{ 
  int _cwc_3358 { , NN } ; 
  int _cwc_3382 { , NN } ; 
  bool _cwc_3383 { , NN } ; 
  int[*] _cwc_3385 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3387) 
  { 
    _cwc_3385 = ArrayBasics::modarray( array, v, val) ; 
    _cwc_3357 = _cwc_3385; 
  }
  else
  { 
    _cwc_3358 = _dim_A_( v); 
    _cwc_3382 = 1; 
    _cwc_3383 = _eq_SxS_( _cwc_3358, _cwc_3382); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7042_modarray__Cond_522( _cwc_3383, val, v, array) ; 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7042_modarray__Cond_522(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7042_modarray__Cond_522( bool _cwc_3383 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7042_modarray__Cond_522 ::  ---
 */
{ 
  int[+] _cwc_3367 { , NN } ; 
  bool _cwc_3376 { , NN } ; 
  int[1]{0} _cwc_3377 { , NN } ; 
  int _cwc_3378 { , NN } ; 
  int{1} _cwc_3379 { , NN } ; 
  bool _cwc_3380 { , NN } ; 
  bool _cwc_3381 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3383) 
  { 
    _cwc_3367 = _shape_A_( v); 
    _cwc_3376 = true; 
    _cwc_3379 = 1; 
    _cwc_3377 = [ 0 ]; 
    _cwc_3378 = _sel_VxA_( _cwc_3377, _cwc_3367); 
    _cwc_3380 = _eq_SxS_( _cwc_3378, _cwc_3379); 
    _cwc_3381 = _and_SxS_( _cwc_3380, _cwc_3376); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7041_modarray__Cond_521( _cwc_3381, val, v, array) ; 
  }
  else
  { 
    _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7041_modarray__Cond_521(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7041_modarray__Cond_521( bool _cwc_3381 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7041_modarray__Cond_521 ::  ---
 */
{ 
  int _cwc_3363 { , NN } ; 
  int _cwc_3365 { , NN } ; 
  bool _cwc_3366 { , NN } ; 
  int _cwc_3372 { , NN } ; 
  int _cwc_3374 { , NN } ; 
  bool _cwc_3375 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3381) 
  { 
    _cwc_3372 = _dim_A_( val); 
    _cwc_3374 = 0; 
    _cwc_3375 = _eq_SxS_( _cwc_3372, _cwc_3374); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7040_modarray__Cond_518( _cwc_3375, val, v, array) ; 
  }
  else
  { 
    _cwc_3363 = _dim_A_( val); 
    _cwc_3365 = 0; 
    _cwc_3366 = _eq_SxS_( _cwc_3363, _cwc_3365); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7038_modarray__Cond_520( _cwc_3366, val, v, array) ; 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7040_modarray__Cond_518(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7040_modarray__Cond_518( bool _cwc_3375 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7040_modarray__Cond_518 ::  ---
 */
{ 
  int _cwc_3369 { , NN } ; 
  int _cwc_3370 { , NN } ; 
  bool _cwc_3371 { , NN } ; 
  int[*] _cwc_3373 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3375) 
  { 
    _cwc_3373 = ArrayBasics::modarray( array, v, val) ; 
    _cwc_3357 = _cwc_3373; 
  }
  else
  { 
    _cwc_3369 = _dim_A_( val); 
    _cwc_3370 = 0; 
    _cwc_3371 = _gt_SxS_( _cwc_3369, _cwc_3370); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7039_modarray__Cond_517( _cwc_3371, val, v, array) ; 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7039_modarray__Cond_517(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7039_modarray__Cond_517( bool _cwc_3371 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7039_modarray__Cond_517 ::  ---
 */
{ 
  int[+] _cwc_3368 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3371) 
  { 
    _cwc_3368 = ArrayBasics::modarray( array, v, val) ; 
    _cwc_3357 = _cwc_3368; 
  }
  else
  { 
    _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7038_modarray__Cond_520(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7038_modarray__Cond_520( bool _cwc_3366 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7038_modarray__Cond_520 ::  ---
 */
{ 
  int _cwc_3360 { , NN } ; 
  int _cwc_3361 { , NN } ; 
  bool _cwc_3362 { , NN } ; 
  int[*] _cwc_3364 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3366) 
  { 
    _cwc_3364 = ArrayBasics::modarray( array, v, val) ; 
    _cwc_3357 = _cwc_3364; 
  }
  else
  { 
    _cwc_3360 = _dim_A_( val); 
    _cwc_3361 = 0; 
    _cwc_3362 = _gt_SxS_( _cwc_3360, _cwc_3361); 
    _cwc_3357 = UTDScalarB:ArrayBasics::_dup_7037_modarray__Cond_519( _cwc_3362, val, v, array) ; 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayBasics::_dup_7037_modarray__Cond_519(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayBasics::_dup_7037_modarray__Cond_519( bool _cwc_3362 { ,NN } , int[*] val { ,NN } , int[*] v { ,NN } , int[*] array { ,NN } )
/*
 *  _dup_7037_modarray__Cond_519 ::  ---
 */
{ 
  int[+] _cwc_3359 { , NN } ; 
  int[*] _cwc_3357 { , NN } ; 

  if (_cwc_3362) 
  { 
    _cwc_3359 = ArrayBasics::modarray( array, v, val) ; 
    _cwc_3357 = _cwc_3359; 
  }
  else
  { 
    _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB:ArrayArith::_dup_7002_*__Cond_505(...) [ body ]
 ****************************************************************************/
int[*] UTDScalarB:ArrayArith::_dup_7002_*__Cond_505( bool _cwc_3354 { ,NN } , int[*] B { ,NN } , int[*] A { ,NN } )
/*
 *  _dup_7002_*__Cond_505 ::  ---
 */
{ 
  int _cwc_3348 { , NN } ; 
  int _cwc_3349 { , NN } ; 
  bool _cwc_3350 { , NN } ; 
  int _cwc_3352 { , NN } ; 
  int[*] _cwc_3308 { , NN } ; 

  if (_cwc_3354) 
  { 
    _cwc_3352 = ( A ScalarArith::*B) ; 
    _cwc_3308 = _cwc_3352; 
  }
  else
  { 
    _cwc_3348 = _dim_A_( B); 
    _cwc_3349 = 0; 
    _cwc_3350 = _gt_SxS_( _cwc_3348, _cwc_3349); 
    _cwc_3308 = ( UTDScalarB:ArrayArith::_dup_7001_*__Cond_504
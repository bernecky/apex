
/*-----------------------------------------------*/

/*
 *  SAC-Program bugcwb2.sac :
 */


/*
 *  type definitions
 */

external typedef sacprelude_d::SACarg;

external SACarg SACARGcopy( SACarg);
external void SACARGfree( SACarg);



/*
 *  prototypes for locals (FUNDEFS)
 */

external /* sticky */
int[.], int[.], int[.], int[.] sacprelude_d::partitionSlicer( int[*] min { ,NN } , int[*] max { ,NN } , int[*] axis { ,NN } , int[*] lb { ,NN } , int[*] ub { ,NN } )
/*
 *  partitionSlicer :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}},
                         int[+] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}},
                         int[.] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}}}
 *  dispatching to: sacprelude_d::partitionSlicer
 */;

external /* sticky */
int[.] sacprelude_d::partitionIntersectMax( int[*] PWLbound1 { ,NN } , int[*] ivmin { ,NN } )
/*
 *  partitionIntersectMax :: { int[*] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[+] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[.] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])}}
 *  dispatching to: sacprelude_d::partitionIntersectMax,
 *                  sacprelude_d::partitionIntersectMax
 */;

external /* sticky */
bool[.] sacprelude_d::isPartitionIntersectNull( int[*] idxmin { ,NN } , int[*] idxmax { ,NN } , int[*] bound1 { ,NN } , int[*] bound2 { ,NN } )
/*
 *  isPartitionIntersectNull :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[+] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[.] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}},
                                  int -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[+] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[.] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])}},
                                           int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])},
                                                    int[+] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])},
                                                    int[.] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])}}},
                                  int[+] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}},
                                  int[.] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}}}
 *  dispatching to: sacprelude_d::isPartitionIntersectNull,
 *                  sacprelude_d::isPartitionIntersectNull
 */;

external /* sticky */
int[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { int[*] -> ( int[*])},
                             int -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
float[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { float[*] -> ( float[*])},
                             int -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
double[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { double[*] -> ( double[*])},
                             int -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
bool[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { bool[*] -> ( bool[*])},
                             int -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
char[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { char[*] -> ( char[*])},
                             int -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
byte[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { byte[*] -> ( byte[*])},
                             int -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
short[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { short[*] -> ( short[*])},
                             int -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
long[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { long[*] -> ( long[*])},
                             int -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
longlong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { longlong[*] -> ( longlong[*])},
                             int -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ubyte[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
                             int -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ushort[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ushort[*] -> ( ushort[*])},
                             int -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
uint[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { uint[*] -> ( uint[*])},
                             int -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ulong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ulong[*] -> ( ulong[*])},
                             int -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ulonglong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
                             int -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
int[.] sacprelude_d::partitionIntersectMin( int[*] PWLbound2 { ,NN } , int[*] ivmax { ,NN } )
/*
 *  partitionIntersectMin :: { int[*] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[+] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[.] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])}}
 *  dispatching to: sacprelude_d::partitionIntersectMin,
 *                  sacprelude_d::partitionIntersectMin
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParams( bool[*] p { ,NN } , int[*] i { ,NN } , int[*] iv { ,NN } )
/*
 *  adjustLacFunParams :: { bool[*] -> { int[*] -> { int[*] -> ( int[*]),
                                                     int[+] -> ( int[*]),
                                                     int[.] -> ( int[*])}}}
 *  dispatching to: sacprelude_d::adjustLacFunParams
 */;

external /* sticky */
int sacprelude_d::prod( int[*] v { ,NN } )
/*
 *  prod :: { int[*] -> ( int),
              int[+] -> ( int),
              int[.] -> ( int)}
 *  dispatching to: sacprelude_d::prod
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParamsReshape( bool[*] p { ,NN } , int[*] i { ,NN } , int[*] iv { ,NN } , int[*] shp { ,NN } )
/*
 *  adjustLacFunParamsReshape :: { bool[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])},
                                                            int[+] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])},
                                                            int[.] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])}}}}
 *  dispatching to: sacprelude_d::adjustLacFunParamsReshape
 */;

external /* sticky */
bool sacprelude_d::eq( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  eq :: { int[*] -> { int[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( float[*] A { ,NN } , float[*] B { ,NN } )
/*
 *  eq :: { float[*] -> { float[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  eq :: { double[*] -> { double[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  eq :: { bool[*] -> { bool[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( char[*] A { ,NN } , char[*] B { ,NN } )
/*
 *  eq :: { char[*] -> { char[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( byte[*] A { ,NN } , byte[*] B { ,NN } )
/*
 *  eq :: { byte[*] -> { byte[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( short[*] A { ,NN } , short[*] B { ,NN } )
/*
 *  eq :: { short[*] -> { short[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( long[*] A { ,NN } , long[*] B { ,NN } )
/*
 *  eq :: { long[*] -> { long[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( longlong[*] A { ,NN } , longlong[*] B { ,NN } )
/*
 *  eq :: { longlong[*] -> { longlong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ubyte[*] A { ,NN } , ubyte[*] B { ,NN } )
/*
 *  eq :: { ubyte[*] -> { ubyte[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ushort[*] A { ,NN } , ushort[*] B { ,NN } )
/*
 *  eq :: { ushort[*] -> { ushort[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( uint[*] A { ,NN } , uint[*] B { ,NN } )
/*
 *  eq :: { uint[*] -> { uint[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ulong[*] A { ,NN } , ulong[*] B { ,NN } )
/*
 *  eq :: { ulong[*] -> { ulong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ulonglong[*] A { ,NN } , ulonglong[*] B { ,NN } )
/*
 *  eq :: { ulonglong[*] -> { ulonglong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
int[.], int[.], int[.] sacprelude_d::gridFiller( int[*] lb { ,NN } , int[*] ub { ,NN } , int[*] wdth { ,NN } , int[*] dim { ,NN } , int[*] maxwidth { ,NN } )
/*
 *  gridFiller :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}},
                    int[+] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}},
                    int[.] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}}}
 *  dispatching to: sacprelude_d::gridFiller
 */;

external /* sticky */
bool[.] sacprelude_d::isPartitionIntersect1Part( int[*] idxmin { ,NN } , int[*] idxmax { ,NN } , int[*] bound1 { ,NN } , int[*] bound2 { ,NN } )
/*
 *  isPartitionIntersect1Part :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[+] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[.] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}},
                                   int -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[+] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[.] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])}},
                                            int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])},
                                                     int[+] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])},
                                                     int[.] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])}}},
                                   int[+] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}},
                                   int[.] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}}}
 *  dispatching to: sacprelude_d::isPartitionIntersect1Part,
 *                  sacprelude_d::isPartitionIntersect1Part
 */;

external /* sticky */
int{0} sacprelude_d::zero( int[*] A { ,NN } )
/*
 *  zero :: { int[*] -> ( int{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
double{0.0...} sacprelude_d::zero( double[*] A { ,NN } )
/*
 *  zero :: { double[*] -> ( double{0.0...})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
float{0.0...} sacprelude_d::zero( float[*] A { ,NN } )
/*
 *  zero :: { float[*] -> ( float{0.0...})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
char{ } sacprelude_d::zero( char[*] A { ,NN } )
/*
 *  zero :: { char[*] -> ( char{ })}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
bool{0} sacprelude_d::zero( bool[*] A { ,NN } )
/*
 *  zero :: { bool[*] -> ( bool{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
byte{} sacprelude_d::zero( byte[*] A { ,NN } )
/*
 *  zero :: { byte[*] -> ( byte{})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
short{0} sacprelude_d::zero( short[*] A { ,NN } )
/*
 *  zero :: { short[*] -> ( short{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
long{0} sacprelude_d::zero( long[*] A { ,NN } )
/*
 *  zero :: { long[*] -> ( long{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
longlong{0} sacprelude_d::zero( longlong[*] A { ,NN } )
/*
 *  zero :: { longlong[*] -> ( longlong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ubyte{} sacprelude_d::zero( ubyte[*] A { ,NN } )
/*
 *  zero :: { ubyte[*] -> ( ubyte{})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ushort{0} sacprelude_d::zero( ushort[*] A { ,NN } )
/*
 *  zero :: { ushort[*] -> ( ushort{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
uint{0} sacprelude_d::zero( uint[*] A { ,NN } )
/*
 *  zero :: { uint[*] -> ( uint{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ulong{0} sacprelude_d::zero( ulong[*] A { ,NN } )
/*
 *  zero :: { ulong[*] -> ( ulong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ulonglong{0} sacprelude_d::zero( ulonglong[*] A { ,NN } )
/*
 *  zero :: { ulonglong[*] -> ( ulonglong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
int sacprelude_d::partitionMax( int[*] x { ,NN } , int[*] y { ,NN } )
/*
 *  partitionMax :: { int[*] -> { int[*] -> ( int),
                                  int -> ( int)},
                      int -> { int[*] -> ( int),
                               int -> ( int)}}
 *  dispatching to: sacprelude_d::partitionMax
 */;

external bool[*] ArrayArith::&( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  & :: { bool[*] -> { bool[*] -> ( bool[*]),
                        bool -> ( bool[*]),
                        bool[+] -> ( bool[+])},
           bool -> { bool[*] -> ( bool[*]),
                     bool -> ( bool),
                     bool[+] -> ( bool[+])},
           bool[+] -> { bool[*] -> ( bool[+]),
                        bool -> ( bool[+]),
                        bool[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::&,
 *                  ArrayArith::&,
 *                  ArrayArith::&,
 *                  ScalarArith::&
 */;

external /* sticky */
int sacprelude_d::partitionMin( int[*] x { ,NN } , int[*] y { ,NN } )
/*
 *  partitionMin :: { int[*] -> { int[*] -> ( int),
                                  int -> ( int)},
                      int -> { int[*] -> ( int),
                               int -> ( int)}}
 *  dispatching to: sacprelude_d::partitionMin
 */;

external /* sticky */
int sacprelude_d::++( int[*] a { ,NN } )
/*
 *  ++ :: { int[*] -> ( int),
            int -> ( int)}
 *  dispatching to: sacprelude_d::++
 */;

external /* sticky */
int[*] sacprelude_d::sel( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { int[*] -> ( int[*])},
             int[+] -> { int[*] -> ( int[*])},
             int[.] -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
float[*] sacprelude_d::sel( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { float[*] -> ( float[*])},
             int[+] -> { float[*] -> ( float[*])},
             int[.] -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
double[*] sacprelude_d::sel( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { double[*] -> ( double[*])},
             int[+] -> { double[*] -> ( double[*])},
             int[.] -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
bool[*] sacprelude_d::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*])},
             int[.] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
char[*] sacprelude_d::sel( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { char[*] -> ( char[*])},
             int[+] -> { char[*] -> ( char[*])},
             int[.] -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
byte[*] sacprelude_d::sel( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { byte[*] -> ( byte[*])},
             int[+] -> { byte[*] -> ( byte[*])},
             int[.] -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
short[*] sacprelude_d::sel( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { short[*] -> ( short[*])},
             int[+] -> { short[*] -> ( short[*])},
             int[.] -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
long[*] sacprelude_d::sel( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { long[*] -> ( long[*])},
             int[+] -> { long[*] -> ( long[*])},
             int[.] -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
longlong[*] sacprelude_d::sel( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { longlong[*] -> ( longlong[*])},
             int[+] -> { longlong[*] -> ( longlong[*])},
             int[.] -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ubyte[*] sacprelude_d::sel( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
             int[+] -> { ubyte[*] -> ( ubyte[*])},
             int[.] -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ushort[*] sacprelude_d::sel( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ushort[*] -> ( ushort[*])},
             int[+] -> { ushort[*] -> ( ushort[*])},
             int[.] -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
uint[*] sacprelude_d::sel( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { uint[*] -> ( uint[*])},
             int[+] -> { uint[*] -> ( uint[*])},
             int[.] -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ulong[*] sacprelude_d::sel( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ulong[*] -> ( ulong[*])},
             int[+] -> { ulong[*] -> ( ulong[*])},
             int[.] -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ulonglong[*] sacprelude_d::sel( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
             int[+] -> { ulonglong[*] -> ( ulonglong[*])},
             int[.] -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
int[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { int[*] -> ( int[*])},
                             int[+] -> { int[*] -> ( int[*])},
                             int[.] -> { int[*] -> ( int[*])},
                             int[1] -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
float[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { float[*] -> ( float[*])},
                             int[+] -> { float[*] -> ( float[*])},
                             int[.] -> { float[*] -> ( float[*])},
                             int[1] -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
double[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { double[*] -> ( double[*])},
                             int[+] -> { double[*] -> ( double[*])},
                             int[.] -> { double[*] -> ( double[*])},
                             int[1] -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
bool[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { bool[*] -> ( bool[*])},
                             int[+] -> { bool[*] -> ( bool[*])},
                             int[.] -> { bool[*] -> ( bool[*])},
                             int[1] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
char[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { char[*] -> ( char[*])},
                             int[+] -> { char[*] -> ( char[*])},
                             int[.] -> { char[*] -> ( char[*])},
                             int[1] -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
byte[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { byte[*] -> ( byte[*])},
                             int[+] -> { byte[*] -> ( byte[*])},
                             int[.] -> { byte[*] -> ( byte[*])},
                             int[1] -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
short[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { short[*] -> ( short[*])},
                             int[+] -> { short[*] -> ( short[*])},
                             int[.] -> { short[*] -> ( short[*])},
                             int[1] -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
long[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { long[*] -> ( long[*])},
                             int[+] -> { long[*] -> ( long[*])},
                             int[.] -> { long[*] -> ( long[*])},
                             int[1] -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
longlong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { longlong[*] -> ( longlong[*])},
                             int[+] -> { longlong[*] -> ( longlong[*])},
                             int[.] -> { longlong[*] -> ( longlong[*])},
                             int[1] -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ubyte[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
                             int[+] -> { ubyte[*] -> ( ubyte[*])},
                             int[.] -> { ubyte[*] -> ( ubyte[*])},
                             int[1] -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ushort[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ushort[*] -> ( ushort[*])},
                             int[+] -> { ushort[*] -> ( ushort[*])},
                             int[.] -> { ushort[*] -> ( ushort[*])},
                             int[1] -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
uint[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { uint[*] -> ( uint[*])},
                             int[+] -> { uint[*] -> ( uint[*])},
                             int[.] -> { uint[*] -> ( uint[*])},
                             int[1] -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ulong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ulong[*] -> ( ulong[*])},
                             int[+] -> { ulong[*] -> ( ulong[*])},
                             int[.] -> { ulong[*] -> ( ulong[*])},
                             int[1] -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ulonglong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[+] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[.] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[1] -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParams( bool[*] p { ,NN } , int[*] i { ,NN } , int[.] iv { ,NN } )
/*
 *  adjustLacFunParams ::  ---
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParamsReshape( bool[*] p { ,NN } , int[*] i { ,NN } , int[.] iv { ,NN } , int[.] shp { ,NN } )
/*
 *  adjustLacFunParamsReshape ::  ---
 */;

external /* sticky */
int sacprelude_d::++( int a { ,NN } )
/*
 *  ++ ::  ---
 */;

external int sacprelude_d::*( int[*] a { ,NN } , int[*] b { ,NN } )
/*
 *  * :: { int[*] -> { int[*] -> ( int),
                       int -> ( int)},
           int -> { int[*] -> ( int),
                    int -> ( int)}}
 *  dispatching to: sacprelude_d::*
 */;

external bool sacprelude_d::and( bool[*] a { ,NN } , bool[*] b { ,NN } )
/*
 *  and :: { bool[*] -> { bool[*] -> ( bool),
                          bool -> ( bool)},
             bool -> { bool[*] -> ( bool),
                       bool -> ( bool)}}
 *  dispatching to: sacprelude_d::and
 */;

external bool{1} ArrayArith::one( bool[*] A { ,NN } )
/*
 *  one :: { bool[*] -> ( bool{1}),
             bool -> ( bool{1}),
             bool[+] -> ( bool{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one
 */;

external bool[*] ArrayBasics::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*])},
             int -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*])},
             int[.] -> { bool[*] -> ( bool[*])},
             int[1] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  ArrayBasics::sel
 */;

external int{1} ArrayArith::one( int[*] A { ,NN } )
/*
 *  one :: { int[*] -> ( int{1}),
             int -> ( int{1}),
             int[+] -> ( int{1}),
             int[.] -> ( int{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one
 */;



/*
 *  function definitions (FUNDEFS)
 */



/****************************************************************************
 * Wrapper function:
 * _MAIN::main(...) [ wrapper ]
 ****************************************************************************/
int _MAIN::main()
/*
 *  main :: ( int)
 *  dispatching to: _MAIN::main
 */
{ 
  int _cwc_7 { , NN } ; 
  int _cwc_8 { , NN } ; 

  _cwc_8 = _MAIN::main() ; 
  _cwc_7 = _cwc_8; 
  return( _cwc_7); 
}



/****************************************************************************
 * Wrapper function:
 * _MAIN:ArrayArith::*(...) [ wrapper ]
 ****************************************************************************/
int[*] _MAIN:ArrayArith::*( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  * :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+]),
                       int[.] -> ( int[.]),
                       int[0] -> ( int[0])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+]),
                    int[.] -> ( int[.]),
                    int[0] -> ( int[0])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::*,
 *                  ArrayArith::*,
 *                  ArrayArith::*,
 *                  ScalarArith::*,
 *                  ArrayArith::*,
 *                  _MAIN:ArrayArith::*
 */
{ 
  int[*] _cwc_9 { , NN } ; 
  bool _cwc_43 { , NN } ; 
  int _cwc_42 { , NN } ; 
  bool _cwc_41 { , NN } ; 
  int _cwc_40 { , NN } ; 
  int _cwc_39 { , NN } ; 
  int _cwc_38 { , NN } ; 
  bool _cwc_37 { , NN } ; 
  int _cwc_36 { , NN } ; 
  int _cwc_35 { , NN } ; 
  bool _cwc_34 { , NN } ; 
  int _cwc_33 { , NN } ; 
  bool _cwc_32 { , NN } ; 
  bool _cwc_31 { , NN } ; 
  int{0} _cwc_30 { , NN } ; 
  int _cwc_29 { , NN } ; 
  int[1]{0} _cwc_28 { , NN } ; 
  bool _cwc_27 { , NN } ; 
  int[0] _cwc_26 { , NN } ; 
  int[+] _cwc_25 { , NN } ; 
  int[.] _cwc_24 { , NN } ; 
  int _cwc_23 { , NN } ; 
  int[+] _cwc_22 { , NN } ; 
  int _cwc_21 { , NN } ; 
  bool _cwc_20 { , NN } ; 
  int _cwc_19 { , NN } ; 
  int _cwc_18 { , NN } ; 
  bool _cwc_17 { , NN } ; 
  int _cwc_16 { , NN } ; 
  int[+] _cwc_15 { , NN } ; 
  int _cwc_14 { , NN } ; 
  bool _cwc_13 { , NN } ; 
  int _cwc_12 { , NN } ; 
  int _cwc_11 { , NN } ; 
  int[+] _cwc_10 { , NN } ; 

  _cwc_21 = _dim_A_( A); 
  _cwc_42 = 0; 
  _cwc_43 = _eq_SxS_( _cwc_21, _cwc_42); 
  if (_cwc_43) 
  { 
    _cwc_38 = _dim_A_( B); 
    _cwc_40 = 0; 
    _cwc_41 = _eq_SxS_( _cwc_38, _cwc_40); 
    if (_cwc_41) 
    { 
      _cwc_39 = ( A ScalarArith::*B) ; 
      _cwc_9 = _cwc_39; 
    }
    else
    { 
      _cwc_35 = _dim_A_( B); 
      _cwc_36 = 0; 
      _cwc_37 = _gt_SxS_( _cwc_35, _cwc_36); 
      if (_cwc_37) 
      { 
        _cwc_23 = _dim_A_( B); 
        _cwc_33 = 1; 
        _cwc_34 = _eq_SxS_( _cwc_23, _cwc_33); 
        if (_cwc_34) 
        { 
          _cwc_25 = _shape_A_( B); 
          _cwc_27 = true; 
          _cwc_30 = 0; 
          _cwc_28 = [ 0 ]; 
          _cwc_29 = _sel_VxA_( _cwc_28, _cwc_25); 
          _cwc_31 = _eq_SxS_( _cwc_29, _cwc_30); 
          _cwc_32 = _and_SxS_( _cwc_31, _cwc_27); 
          if (_cwc_32) 
          { 
            _cwc_26 = ( A _MAIN:ArrayArith::*B) ; 
            _cwc_9 = _cwc_26; 
          }
          else
          { 
            _cwc_24 = ( A ArrayArith::*B) ; 
            _cwc_9 = _cwc_24; 
          }
        }
        else
        { 
          _cwc_22 = ( A ArrayArith::*B) ; 
          _cwc_9 = _cwc_22; 
        }
      }
      else
      { 
        _cwc_9 = _dispatch_error_( 1, int[*], "_MAIN:ArrayArith::* :: int[*] int[*] -> int[*] ", A, B); 
      }
    }
  }
  else
  { 
    _cwc_18 = _dim_A_( A); 
    _cwc_19 = 0; 
    _cwc_20 = _gt_SxS_( _cwc_18, _cwc_19); 
    if (_cwc_20) 
    { 
      _cwc_14 = _dim_A_( B); 
      _cwc_16 = 0; 
      _cwc_17 = _eq_SxS_( _cwc_14, _cwc_16); 
      if (_cwc_17) 
      { 
        _cwc_15 = ( A ArrayArith::*B) ; 
        _cwc_9 = _cwc_15; 
      }
      else
      { 
        _cwc_11 = _dim_A_( B); 
        _cwc_12 = 0; 
        _cwc_13 = _gt_SxS_( _cwc_11, _cwc_12); 
        if (_cwc_13) 
        { 
          _cwc_10 = ( A ArrayArith::*B) ; 
          _cwc_9 = _cwc_10; 
        }
        else
        { 
          _cwc_9 = _dispatch_error_( 1, int[*], "_MAIN:ArrayArith::* :: int[*] int[*] -> int[*] ", A, B); 
        }
      }
    }
    else
    { 
      _cwc_9 = _dispatch_error_( 1, int[*], "_MAIN:ArrayArith::* :: int[*] int[*] -> int[*] ", A, B); 
    }
  }
  return( _cwc_9); 
}



/****************************************************************************
 * Wrapper function:
 * _MAIN::all(...) [ wrapper ]
 ****************************************************************************/
bool _MAIN::all( bool[*] a { ,NN } )
/*
 *  all :: { bool[*] -> ( bool),
             bool -> ( bool)}
 *  dispatching to: _MAIN::all,
 *                  _MAIN::all
 */
{ 
  bool _cwc_44 { , NN } ; 
  bool _cwc_49 { , NN } ; 
  int _cwc_48 { , NN } ; 
  bool _cwc_47 { , NN } ; 
  int _cwc_46 { , NN } ; 
  bool _cwc_45 { , NN } ; 

  _cwc_46 = _dim_A_( a); 
  _cwc_48 = 0; 
  _cwc_49 = _eq_SxS_( _cwc_46, _cwc_48); 
  if (_cwc_49) 
  { 
    _cwc_47 = _MAIN::all( a) ; 
    _cwc_44 = _cwc_47; 
  }
  else
  { 
    _cwc_45 = _MAIN::all( a) ; 
    _cwc_44 = _cwc_45; 
  }
  return( _cwc_44); 
}



/****************************************************************************
 * Wrapper function:
 * _MAIN:ArrayArith::shape(...) [ wrapper ]
 ****************************************************************************/
int[.] _MAIN:ArrayArith::shape( bool[*] array { ,NN } )
/*
 *  shape :: { bool[*] -> ( int[.]),
               bool -> ( int[0]{})}
 *  dispatching to: ArrayBasics::shape,
 *                  _MAIN:ArrayArith::shape
 */
{ 
  int[.] _cwc_50 { , NN } ; 
  bool _cwc_55 { , NN } ; 
  int _cwc_54 { , NN } ; 
  int[0]{} _cwc_53 { , NN } ; 
  int _cwc_52 { , NN } ; 
  int[.] _cwc_51 { , NN } ; 

  _cwc_52 = _dim_A_( array); 
  _cwc_54 = 0; 
  _cwc_55 = _eq_SxS_( _cwc_52, _cwc_54); 
  if (_cwc_55) 
  { 
    _cwc_53 = _MAIN:ArrayArith::shape( array) ; 
    _cwc_50 = _cwc_53; 
  }
  else
  { 
    _cwc_51 = ArrayBasics::shape( array) ; 
    _cwc_50 = _cwc_51; 
  }
  return( _cwc_50); 
}



/****************************************************************************
 * Wrapper function:
 * _MAIN:Array::sel(...) [ wrapper ]
 ****************************************************************************/
bool[*] _MAIN:Array::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*]),
                         bool -> ( bool)},
             int -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*]),
                         bool -> ( bool)},
             int[.] -> { bool[*] -> ( bool[*]),
                         bool -> ( bool)},
             int[0] -> { bool[*] -> ( bool),
                         bool -> ( bool)}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  _MAIN:Array::sel
 */
{ 
  bool[*] _cwc_56 { , NN } ; 
  bool _cwc_80 { , NN } ; 
  int _cwc_79 { , NN } ; 
  bool[*] _cwc_78 { , NN } ; 
  int _cwc_77 { , NN } ; 
  bool _cwc_76 { , NN } ; 
  int _cwc_75 { , NN } ; 
  bool _cwc_74 { , NN } ; 
  bool _cwc_73 { , NN } ; 
  int{0} _cwc_72 { , NN } ; 
  int _cwc_71 { , NN } ; 
  int[1]{0} _cwc_70 { , NN } ; 
  bool _cwc_69 { , NN } ; 
  bool _cwc_68 { , NN } ; 
  int _cwc_67 { , NN } ; 
  bool _cwc_66 { , NN } ; 
  int _cwc_65 { , NN } ; 
  bool[*] _cwc_64 { , NN } ; 
  int[+] _cwc_63 { , NN } ; 
  bool _cwc_62 { , NN } ; 
  int _cwc_61 { , NN } ; 
  bool[*] _cwc_60 { , NN } ; 
  int _cwc_59 { , NN } ; 
  bool[*] _cwc_58 { , NN } ; 
  int _cwc_57 { , NN } ; 

  _cwc_77 = _dim_A_( idx); 
  _cwc_79 = 0; 
  _cwc_80 = _eq_SxS_( _cwc_77, _cwc_79); 
  if (_cwc_80) 
  { 
    _cwc_78 = ArrayBasics::sel( idx, array) ; 
    _cwc_56 = _cwc_78; 
  }
  else
  { 
    _cwc_57 = _dim_A_( idx); 
    _cwc_75 = 1; 
    _cwc_76 = _eq_SxS_( _cwc_57, _cwc_75); 
    if (_cwc_76) 
    { 
      _cwc_63 = _shape_A_( idx); 
      _cwc_69 = true; 
      _cwc_72 = 0; 
      _cwc_70 = [ 0 ]; 
      _cwc_71 = _sel_VxA_( _cwc_70, _cwc_63); 
      _cwc_73 = _eq_SxS_( _cwc_71, _cwc_72); 
      _cwc_74 = _and_SxS_( _cwc_73, _cwc_69); 
      if (_cwc_74) 
      { 
        _cwc_65 = _dim_A_( array); 
        _cwc_67 = 0; 
        _cwc_68 = _eq_SxS_( _cwc_65, _cwc_67); 
        if (_cwc_68) 
        { 
          _cwc_66 = _MAIN:Array::sel( idx, array) ; 
          _cwc_56 = _cwc_66; 
        }
        else
        { 
          _cwc_64 = ArrayBasics::sel( idx, array) ; 
          _cwc_56 = _cwc_64; 
        }
      }
      else
      { 
        _cwc_59 = _dim_A_( array); 
        _cwc_61 = 0; 
        _cwc_62 = _eq_SxS_( _cwc_59, _cwc_61); 
        if (_cwc_62) 
        { 
          _cwc_60 = ArrayBasics::sel( idx, array) ; 
          _cwc_56 = _cwc_60; 
        }
        else
        { 
          _cwc_58 = ArrayBasics::sel( idx, array) ; 
          _cwc_56 = _cwc_58; 
        }
      }
    }
    else
    { 
      _cwc_56 = _dispatch_error_( 1, bool[*], "_MAIN:Array::sel :: int[*] bool[*] -> bool[*] ", idx, array); 
    }
  }
  return( _cwc_56); 
}



/****************************************************************************
 * _MAIN::all(...) [ body ]
 ****************************************************************************/
inline
bool _MAIN::all( bool[*] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool[*] _flat_5 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_0 { , NN } ; 
  int[.] _flat_1 { , NN } ; 
  int{0} _flat_2 { , NN } ; 
  int[.] _flat_3 { , NN } ; 
  int[.] _flat_4 { , NN } ; 

  _flat_4 = wrapper:_MAIN:ArrayArith::shape( a) ; 
  _flat_3 = wrapper:_MAIN:ArrayArith::shape( a) ; 
  _flat_2 = 0; 
  _flat_1 = ( _flat_2 wrapper:_MAIN:ArrayArith::*_flat_3) ; 
  _flat_0 = true; 
  res = with {
        /* Partn */
        (_flat_1 <= iv < _flat_4)
        { 
          _flat_5 = wrapper:_MAIN:Array::sel( iv, a) ; 
        } : _flat_5 ; 
         } :
      fold( ArrayArith::&(), _flat_0); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * _MAIN::main(...) [ body ]
 ****************************************************************************/
int _MAIN::main()
/*
 *  main ::  ---
 */
{ 
  int r_10__SSA0_1 { , NN } ; 
  int r_10 { , NN } ; 
  bool _flat_6 { , NN } ; 
  bool{0} A_80 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  A_80 = _neq_SxS_( BS0_0, BS0_0); 
  _flat_6 = wrapper:_MAIN::all( A_80) ; 
  r_10 = _toi_S_( _flat_6); 
  r_10__SSA0_1 = _type_conv_( int, r_10); 
  return( r_10__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::*( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_21 { , NN } ; 
  int _flat_22 { , NN } ; 
  int _flat_23 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_16 { , NN } ; 
  int{1} _flat_17 { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[.] _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_20 = 0; 
  _flat_19 = _mul_SxV_( _flat_20, shp); 
  _flat_18 = wrapper:ArrayArith::one( B) ; 
  _flat_17 = wrapper:ArrayArith::one( A) ; 
  _flat_16 = _mul_SxS_( _flat_17, _flat_18); 
  res = with {
        /* Partn */
        (_flat_19 <= iv < shp)
        { 
          _flat_23 = _sel_VxA_( iv, B); 
          _flat_22 = _sel_VxA_( iv, A); 
          _flat_21 = _mul_SxS_( _flat_22, _flat_23); 
        } : _flat_21 ; 
         } :
      genarray( shp, _flat_16); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::*( int[+] A { ,NN } , int B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_121 { , NN } ; 
  int _flat_122 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_116 { , NN } ; 
  int{1} _flat_117 { , NN } ; 
  int{1} _flat_118 { , NN } ; 
  int[.] _flat_119 { , NN } ; 
  int{0} _flat_120 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_120 = 0; 
  _flat_119 = _mul_SxV_( _flat_120, shp); 
  _flat_118 = wrapper:ArrayArith::one( B) ; 
  _flat_117 = wrapper:ArrayArith::one( A) ; 
  _flat_116 = _mul_SxS_( _flat_117, _flat_118); 
  res = with {
        /* Partn */
        (_flat_119 <= iv < shp)
        { 
          _flat_122 = _sel_VxA_( iv, A); 
          _flat_121 = _mul_SxS_( _flat_122, B); 
        } : _flat_121 ; 
         } :
      genarray( shp, _flat_116); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayArith::*( int A { ,NN } , int[.] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_1821 { , NN } ; 
  int[.] res__SSA0_1 { , NN } ; 
  int[.] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1] _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:_MAIN:ArrayArith::one( B) ; 
  _flat_75 = wrapper:_MAIN:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_1821] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::*( int A { ,NN } , int[+] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[.] _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:ArrayArith::one( B) ; 
  _flat_75 = wrapper:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::*(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::*( int A { ,NN } , int B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _flat_14__SSA0_1 { , NN } ; 
  int _flat_14 { , NN } ; 

  _flat_14 = _mul_SxS_( A, B); 
  _flat_14__SSA0_1 = _type_conv_( int, _flat_14); 
  return( _flat_14__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::shape(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayBasics::shape( bool[*] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_11__SSA0_1 { , NN } ; 
  int[.] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::sel( int[.] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1] _flat_66 { , NN } ; 
  int[.] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::sel( int idx { ,NN } , bool[*] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] _flat_82 { , NN } ; 
  int[1] _flat_83 { , NN } ; 

  _flat_83 = [ idx ]; 
  _flat_82 = wrapper:ArrayBasics::sel( _flat_83, A) ; 
  return( _flat_82); 
}



/****************************************************************************
 * ArrayArith::&(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::&( bool[+] A { ,NN } , bool[+] B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1285 { , NN } ; 
  bool _flat_1286 { , NN } ; 
  bool _flat_1287 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1280 { , NN } ; 
  bool{1} _flat_1281 { , NN } ; 
  bool{1} _flat_1282 { , NN } ; 
  int[.] _flat_1283 { , NN } ; 
  int{0} _flat_1284 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_1284 = 0; 
  _flat_1283 = _mul_SxV_( _flat_1284, shp); 
  _flat_1282 = wrapper:ArrayArith::one( B) ; 
  _flat_1281 = wrapper:ArrayArith::one( A) ; 
  _flat_1280 = _and_SxS_( _flat_1281, _flat_1282); 
  res = with {
        /* Partn */
        (_flat_1283 <= iv < shp)
        { 
          _flat_1287 = _sel_VxA_( iv, B); 
          _flat_1286 = _sel_VxA_( iv, A); 
          _flat_1285 = _and_SxS_( _flat_1286, _flat_1287); 
        } : _flat_1285 ; 
         } :
      genarray( shp, _flat_1280); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::&(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::&( bool[+] A { ,NN } , bool B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1321 { , NN } ; 
  bool _flat_1322 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1316 { , NN } ; 
  bool{1} _flat_1317 { , NN } ; 
  bool{1} _flat_1318 { , NN } ; 
  int[.] _flat_1319 { , NN } ; 
  int{0} _flat_1320 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1320 = 0; 
  _flat_1319 = _mul_SxV_( _flat_1320, shp); 
  _flat_1318 = wrapper:ArrayArith::one( B) ; 
  _flat_1317 = wrapper:ArrayArith::one( A) ; 
  _flat_1316 = _and_SxS_( _flat_1317, _flat_1318); 
  res = with {
        /* Partn */
        (_flat_1319 <= iv < shp)
        { 
          _flat_1322 = _sel_VxA_( iv, A); 
          _flat_1321 = _and_SxS_( _flat_1322, B); 
        } : _flat_1321 ; 
         } :
      genarray( shp, _flat_1316); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::&(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::&( bool A { ,NN } , bool[+] B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1307 { , NN } ; 
  bool _flat_1308 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1302 { , NN } ; 
  bool{1} _flat_1303 { , NN } ; 
  bool{1} _flat_1304 { , NN } ; 
  int[.] _flat_1305 { , NN } ; 
  int{0} _flat_1306 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_1306 = 0; 
  _flat_1305 = _mul_SxV_( _flat_1306, shp); 
  _flat_1304 = wrapper:ArrayArith::one( B) ; 
  _flat_1303 = wrapper:ArrayArith::one( A) ; 
  _flat_1302 = _and_SxS_( _flat_1303, _flat_1304); 
  res = with {
        /* Partn */
        (_flat_1305 <= iv < shp)
        { 
          _flat_1308 = _sel_VxA_( iv, B); 
          _flat_1307 = _and_SxS_( A, _flat_1308); 
        } : _flat_1307 ; 
         } :
      genarray( shp, _flat_1302); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::&(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::&( bool A { ,NN } , bool B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool _flat_98__SSA0_1 { , NN } ; 
  bool _flat_98 { , NN } ; 

  _flat_98 = _and_SxS_( A, B); 
  _flat_98__SSA0_1 = _type_conv_( bool, _flat_98); 
  return( _flat_98__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_d::sel( int[.] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ulonglong[*] res { , NN } ; 
  ulonglong _flat_127 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulonglong{0} _flat_124 { , NN } ; 
  int[.] _flat_125 { , NN } ; 
  int{0} _flat_126 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_119 { , NN } ; 
  int[1]{0} _flat_120 { , NN } ; 
  int{0} _flat_121 { , NN } ; 
  int[1] _flat_122 { , NN } ; 
  int[.] _flat_123 { , NN } ; 

  _flat_123 = _shape_A_( array); 
  _flat_122 = _shape_A_( idx); 
  _flat_121 = 0; 
  _flat_120 = [ _flat_121 ]; 
  _flat_119 = _sel_VxA_( _flat_120, _flat_122); 
  new_shape = _drop_SxV_( _flat_119, _flat_123); 
  _flat_126 = 0; 
  _flat_125 = _mul_SxV_( _flat_126, new_shape); 
  _flat_124 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_125 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_127 = _sel_VxA_( new_idx, array); 
        } : _flat_127 ; 
         } :
      genarray( new_shape, _flat_124); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_d::sel( int[.] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ulong[*] res { , NN } ; 
  ulong _flat_118 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulong{0} _flat_115 { , NN } ; 
  int[.] _flat_116 { , NN } ; 
  int{0} _flat_117 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_110 { , NN } ; 
  int[1]{0} _flat_111 { , NN } ; 
  int{0} _flat_112 { , NN } ; 
  int[1] _flat_113 { , NN } ; 
  int[.] _flat_114 { , NN } ; 

  _flat_114 = _shape_A_( array); 
  _flat_113 = _shape_A_( idx); 
  _flat_112 = 0; 
  _flat_111 = [ _flat_112 ]; 
  _flat_110 = _sel_VxA_( _flat_111, _flat_113); 
  new_shape = _drop_SxV_( _flat_110, _flat_114); 
  _flat_117 = 0; 
  _flat_116 = _mul_SxV_( _flat_117, new_shape); 
  _flat_115 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_116 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_118 = _sel_VxA_( new_idx, array); 
        } : _flat_118 ; 
         } :
      genarray( new_shape, _flat_115); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_d::sel( int[.] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  uint[*] res { , NN } ; 
  uint _flat_109 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  uint{0} _flat_106 { , NN } ; 
  int[.] _flat_107 { , NN } ; 
  int{0} _flat_108 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_101 { , NN } ; 
  int[1]{0} _flat_102 { , NN } ; 
  int{0} _flat_103 { , NN } ; 
  int[1] _flat_104 { , NN } ; 
  int[.] _flat_105 { , NN } ; 

  _flat_105 = _shape_A_( array); 
  _flat_104 = _shape_A_( idx); 
  _flat_103 = 0; 
  _flat_102 = [ _flat_103 ]; 
  _flat_101 = _sel_VxA_( _flat_102, _flat_104); 
  new_shape = _drop_SxV_( _flat_101, _flat_105); 
  _flat_108 = 0; 
  _flat_107 = _mul_SxV_( _flat_108, new_shape); 
  _flat_106 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_107 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_109 = _sel_VxA_( new_idx, array); 
        } : _flat_109 ; 
         } :
      genarray( new_shape, _flat_106); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_d::sel( int[.] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ushort[*] res { , NN } ; 
  ushort _flat_100 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ushort{0} _flat_97 { , NN } ; 
  int[.] _flat_98 { , NN } ; 
  int{0} _flat_99 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_92 { , NN } ; 
  int[1]{0} _flat_93 { , NN } ; 
  int{0} _flat_94 { , NN } ; 
  int[1] _flat_95 { , NN } ; 
  int[.] _flat_96 { , NN } ; 

  _flat_96 = _shape_A_( array); 
  _flat_95 = _shape_A_( idx); 
  _flat_94 = 0; 
  _flat_93 = [ _flat_94 ]; 
  _flat_92 = _sel_VxA_( _flat_93, _flat_95); 
  new_shape = _drop_SxV_( _flat_92, _flat_96); 
  _flat_99 = 0; 
  _flat_98 = _mul_SxV_( _flat_99, new_shape); 
  _flat_97 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_98 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_100 = _sel_VxA_( new_idx, array); 
        } : _flat_100 ; 
         } :
      genarray( new_shape, _flat_97); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_d::sel( int[.] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ubyte[*] res { , NN } ; 
  ubyte _flat_91 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ubyte{} _flat_88 { , NN } ; 
  int[.] _flat_89 { , NN } ; 
  int{0} _flat_90 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_83 { , NN } ; 
  int[1]{0} _flat_84 { , NN } ; 
  int{0} _flat_85 { , NN } ; 
  int[1] _flat_86 { , NN } ; 
  int[.] _flat_87 { , NN } ; 

  _flat_87 = _shape_A_( array); 
  _flat_86 = _shape_A_( idx); 
  _flat_85 = 0; 
  _flat_84 = [ _flat_85 ]; 
  _flat_83 = _sel_VxA_( _flat_84, _flat_86); 
  new_shape = _drop_SxV_( _flat_83, _flat_87); 
  _flat_90 = 0; 
  _flat_89 = _mul_SxV_( _flat_90, new_shape); 
  _flat_88 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_89 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_91 = _sel_VxA_( new_idx, array); 
        } : _flat_91 ; 
         } :
      genarray( new_shape, _flat_88); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_d::sel( int[.] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  longlong[*] res { , NN } ; 
  longlong _flat_82 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  longlong{0} _flat_79 { , NN } ; 
  int[.] _flat_80 { , NN } ; 
  int{0} _flat_81 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_74 { , NN } ; 
  int[1]{0} _flat_75 { , NN } ; 
  int{0} _flat_76 { , NN } ; 
  int[1] _flat_77 { , NN } ; 
  int[.] _flat_78 { , NN } ; 

  _flat_78 = _shape_A_( array); 
  _flat_77 = _shape_A_( idx); 
  _flat_76 = 0; 
  _flat_75 = [ _flat_76 ]; 
  _flat_74 = _sel_VxA_( _flat_75, _flat_77); 
  new_shape = _drop_SxV_( _flat_74, _flat_78); 
  _flat_81 = 0; 
  _flat_80 = _mul_SxV_( _flat_81, new_shape); 
  _flat_79 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_80 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_82 = _sel_VxA_( new_idx, array); 
        } : _flat_82 ; 
         } :
      genarray( new_shape, _flat_79); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_d::sel( int[.] idx { ,NN } , long[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  long[*] res { , NN } ; 
  long _flat_73 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  long{0} _flat_70 { , NN } ; 
  int[.] _flat_71 { , NN } ; 
  int{0} _flat_72 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_65 { , NN } ; 
  int[1]{0} _flat_66 { , NN } ; 
  int{0} _flat_67 { , NN } ; 
  int[1] _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 

  _flat_69 = _shape_A_( array); 
  _flat_68 = _shape_A_( idx); 
  _flat_67 = 0; 
  _flat_66 = [ _flat_67 ]; 
  _flat_65 = _sel_VxA_( _flat_66, _flat_68); 
  new_shape = _drop_SxV_( _flat_65, _flat_69); 
  _flat_72 = 0; 
  _flat_71 = _mul_SxV_( _flat_72, new_shape); 
  _flat_70 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_71 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_73 = _sel_VxA_( new_idx, array); 
        } : _flat_73 ; 
         } :
      genarray( new_shape, _flat_70); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_d::sel( int[.] idx { ,NN } , short[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  short[*] res { , NN } ; 
  short _flat_64 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  short{0} _flat_61 { , NN } ; 
  int[.] _flat_62 { , NN } ; 
  int{0} _flat_63 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_56 { , NN } ; 
  int[1]{0} _flat_57 { , NN } ; 
  int{0} _flat_58 { , NN } ; 
  int[1] _flat_59 { , NN } ; 
  int[.] _flat_60 { , NN } ; 

  _flat_60 = _shape_A_( array); 
  _flat_59 = _shape_A_( idx); 
  _flat_58 = 0; 
  _flat_57 = [ _flat_58 ]; 
  _flat_56 = _sel_VxA_( _flat_57, _flat_59); 
  new_shape = _drop_SxV_( _flat_56, _flat_60); 
  _flat_63 = 0; 
  _flat_62 = _mul_SxV_( _flat_63, new_shape); 
  _flat_61 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_62 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_64 = _sel_VxA_( new_idx, array); 
        } : _flat_64 ; 
         } :
      genarray( new_shape, _flat_61); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_d::sel( int[.] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  byte[*] res { , NN } ; 
  byte _flat_55 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  byte{} _flat_52 { , NN } ; 
  int[.] _flat_53 { , NN } ; 
  int{0} _flat_54 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_47 { , NN } ; 
  int[1]{0} _flat_48 { , NN } ; 
  int{0} _flat_49 { , NN } ; 
  int[1] _flat_50 { , NN } ; 
  int[.] _flat_51 { , NN } ; 

  _flat_51 = _shape_A_( array); 
  _flat_50 = _shape_A_( idx); 
  _flat_49 = 0; 
  _flat_48 = [ _flat_49 ]; 
  _flat_47 = _sel_VxA_( _flat_48, _flat_50); 
  new_shape = _drop_SxV_( _flat_47, _flat_51); 
  _flat_54 = 0; 
  _flat_53 = _mul_SxV_( _flat_54, new_shape); 
  _flat_52 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_53 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_55 = _sel_VxA_( new_idx, array); 
        } : _flat_55 ; 
         } :
      genarray( new_shape, _flat_52); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_d::sel( int[.] idx { ,NN } , char[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  char[*] res { , NN } ; 
  char _flat_46 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  char{ } _flat_43 { , NN } ; 
  int[.] _flat_44 { , NN } ; 
  int{0} _flat_45 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_38 { , NN } ; 
  int[1]{0} _flat_39 { , NN } ; 
  int{0} _flat_40 { , NN } ; 
  int[1] _flat_41 { , NN } ; 
  int[.] _flat_42 { , NN } ; 

  _flat_42 = _shape_A_( array); 
  _flat_41 = _shape_A_( idx); 
  _flat_40 = 0; 
  _flat_39 = [ _flat_40 ]; 
  _flat_38 = _sel_VxA_( _flat_39, _flat_41); 
  new_shape = _drop_SxV_( _flat_38, _flat_42); 
  _flat_45 = 0; 
  _flat_44 = _mul_SxV_( _flat_45, new_shape); 
  _flat_43 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_44 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_46 = _sel_VxA_( new_idx, array); 
        } : _flat_46 ; 
         } :
      genarray( new_shape, _flat_43); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_d::sel( int[.] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_37 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_34 { , NN } ; 
  int[.] _flat_35 { , NN } ; 
  int{0} _flat_36 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_29 { , NN } ; 
  int[1]{0} _flat_30 { , NN } ; 
  int{0} _flat_31 { , NN } ; 
  int[1] _flat_32 { , NN } ; 
  int[.] _flat_33 { , NN } ; 

  _flat_33 = _shape_A_( array); 
  _flat_32 = _shape_A_( idx); 
  _flat_31 = 0; 
  _flat_30 = [ _flat_31 ]; 
  _flat_29 = _sel_VxA_( _flat_30, _flat_32); 
  new_shape = _drop_SxV_( _flat_29, _flat_33); 
  _flat_36 = 0; 
  _flat_35 = _mul_SxV_( _flat_36, new_shape); 
  _flat_34 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_35 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_37 = _sel_VxA_( new_idx, array); 
        } : _flat_37 ; 
         } :
      genarray( new_shape, _flat_34); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_d::sel( int[.] idx { ,NN } , double[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  double[*] res { , NN } ; 
  double _flat_28 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_25 { , NN } ; 
  int[.] _flat_26 { , NN } ; 
  int{0} _flat_27 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_20 { , NN } ; 
  int[1]{0} _flat_21 { , NN } ; 
  int{0} _flat_22 { , NN } ; 
  int[1] _flat_23 { , NN } ; 
  int[.] _flat_24 { , NN } ; 

  _flat_24 = _shape_A_( array); 
  _flat_23 = _shape_A_( idx); 
  _flat_22 = 0; 
  _flat_21 = [ _flat_22 ]; 
  _flat_20 = _sel_VxA_( _flat_21, _flat_23); 
  new_shape = _drop_SxV_( _flat_20, _flat_24); 
  _flat_27 = 0; 
  _flat_26 = _mul_SxV_( _flat_27, new_shape); 
  _flat_25 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_26 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_28 = _sel_VxA_( new_idx, array); 
        } : _flat_28 ; 
         } :
      genarray( new_shape, _flat_25); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_d::sel( int[.] idx { ,NN } , float[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  float[*] res { , NN } ; 
  float _flat_19 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  float{0.0...} _flat_16 { , NN } ; 
  int[.] _flat_17 { , NN } ; 
  int{0} _flat_18 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_11 { , NN } ; 
  int[1]{0} _flat_12 { , NN } ; 
  int{0} _flat_13 { , NN } ; 
  int[1] _flat_14 { , NN } ; 
  int[.] _flat_15 { , NN } ; 

  _flat_15 = _shape_A_( array); 
  _flat_14 = _shape_A_( idx); 
  _flat_13 = 0; 
  _flat_12 = [ _flat_13 ]; 
  _flat_11 = _sel_VxA_( _flat_12, _flat_14); 
  new_shape = _drop_SxV_( _flat_11, _flat_15); 
  _flat_18 = 0; 
  _flat_17 = _mul_SxV_( _flat_18, new_shape); 
  _flat_16 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_17 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_19 = _sel_VxA_( new_idx, array); 
        } : _flat_19 ; 
         } :
      genarray( new_shape, _flat_16); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_d::sel( int[.] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_10 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_7 { , NN } ; 
  int[.] _flat_8 { , NN } ; 
  int{0} _flat_9 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_2 { , NN } ; 
  int[1]{0} _flat_3 { , NN } ; 
  int{0} _flat_4 { , NN } ; 
  int[1] _flat_5 { , NN } ; 
  int[.] _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_5 = _shape_A_( idx); 
  _flat_4 = 0; 
  _flat_3 = [ _flat_4 ]; 
  _flat_2 = _sel_VxA_( _flat_3, _flat_5); 
  new_shape = _drop_SxV_( _flat_2, _flat_6); 
  _flat_9 = 0; 
  _flat_8 = _mul_SxV_( _flat_9, new_shape); 
  _flat_7 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_8 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_10 = _sel_VxA_( new_idx, array); 
        } : _flat_10 ; 
         } :
      genarray( new_shape, _flat_7); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulonglong[*] res { , NN } ; 
  ulonglong _flat_253 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulonglong{0} _flat_250 { , NN } ; 
  int[.] _flat_251 { , NN } ; 
  int{0} _flat_252 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_245 { , NN } ; 
  int[1]{0} _flat_246 { , NN } ; 
  int{0} _flat_247 { , NN } ; 
  int[1]{1} _flat_248 { , NN } ; 
  int[.] _flat_249 { , NN } ; 

  _flat_249 = _shape_A_( array); 
  _flat_248 = _shape_A_( idx); 
  _flat_247 = 0; 
  _flat_246 = [ _flat_247 ]; 
  _flat_245 = _sel_VxA_( _flat_246, _flat_248); 
  new_shape = _drop_SxV_( _flat_245, _flat_249); 
  _flat_252 = 0; 
  _flat_251 = _mul_SxV_( _flat_252, new_shape); 
  _flat_250 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_251 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_253 = _sel_VxA_( new_idx, array); 
        } : _flat_253 ; 
         } :
      genarray( new_shape, _flat_250); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulonglong[*] res { , NN } ; 
  ulonglong _flat_253 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulonglong{0} _flat_250 { , NN } ; 
  int[.] _flat_251 { , NN } ; 
  int{0} _flat_252 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_245 { , NN } ; 
  int[1]{0} _flat_246 { , NN } ; 
  int{0} _flat_247 { , NN } ; 
  int[1] _flat_248 { , NN } ; 
  int[.] _flat_249 { , NN } ; 

  _flat_249 = _shape_A_( array); 
  _flat_248 = _shape_A_( idx); 
  _flat_247 = 0; 
  _flat_246 = [ _flat_247 ]; 
  _flat_245 = _sel_VxA_( _flat_246, _flat_248); 
  new_shape = _drop_SxV_( _flat_245, _flat_249); 
  _flat_252 = 0; 
  _flat_251 = _mul_SxV_( _flat_252, new_shape); 
  _flat_250 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_251 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_253 = _sel_VxA_( new_idx, array); 
        } : _flat_253 ; 
         } :
      genarray( new_shape, _flat_250); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulong[*] res { , NN } ; 
  ulong _flat_244 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulong{0} _flat_241 { , NN } ; 
  int[.] _flat_242 { , NN } ; 
  int{0} _flat_243 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_236 { , NN } ; 
  int[1]{0} _flat_237 { , NN } ; 
  int{0} _flat_238 { , NN } ; 
  int[1]{1} _flat_239 { , NN } ; 
  int[.] _flat_240 { , NN } ; 

  _flat_240 = _shape_A_( array); 
  _flat_239 = _shape_A_( idx); 
  _flat_238 = 0; 
  _flat_237 = [ _flat_238 ]; 
  _flat_236 = _sel_VxA_( _flat_237, _flat_239); 
  new_shape = _drop_SxV_( _flat_236, _flat_240); 
  _flat_243 = 0; 
  _flat_242 = _mul_SxV_( _flat_243, new_shape); 
  _flat_241 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_242 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_244 = _sel_VxA_( new_idx, array); 
        } : _flat_244 ; 
         } :
      genarray( new_shape, _flat_241); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulong[*] res { , NN } ; 
  ulong _flat_244 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulong{0} _flat_241 { , NN } ; 
  int[.] _flat_242 { , NN } ; 
  int{0} _flat_243 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_236 { , NN } ; 
  int[1]{0} _flat_237 { , NN } ; 
  int{0} _flat_238 { , NN } ; 
  int[1] _flat_239 { , NN } ; 
  int[.] _flat_240 { , NN } ; 

  _flat_240 = _shape_A_( array); 
  _flat_239 = _shape_A_( idx); 
  _flat_238 = 0; 
  _flat_237 = [ _flat_238 ]; 
  _flat_236 = _sel_VxA_( _flat_237, _flat_239); 
  new_shape = _drop_SxV_( _flat_236, _flat_240); 
  _flat_243 = 0; 
  _flat_242 = _mul_SxV_( _flat_243, new_shape); 
  _flat_241 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_242 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_244 = _sel_VxA_( new_idx, array); 
        } : _flat_244 ; 
         } :
      genarray( new_shape, _flat_241); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  uint[*] res { , NN } ; 
  uint _flat_235 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  uint{0} _flat_232 { , NN } ; 
  int[.] _flat_233 { , NN } ; 
  int{0} _flat_234 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_227 { , NN } ; 
  int[1]{0} _flat_228 { , NN } ; 
  int{0} _flat_229 { , NN } ; 
  int[1]{1} _flat_230 { , NN } ; 
  int[.] _flat_231 { , NN } ; 

  _flat_231 = _shape_A_( array); 
  _flat_230 = _shape_A_( idx); 
  _flat_229 = 0; 
  _flat_228 = [ _flat_229 ]; 
  _flat_227 = _sel_VxA_( _flat_228, _flat_230); 
  new_shape = _drop_SxV_( _flat_227, _flat_231); 
  _flat_234 = 0; 
  _flat_233 = _mul_SxV_( _flat_234, new_shape); 
  _flat_232 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_233 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_235 = _sel_VxA_( new_idx, array); 
        } : _flat_235 ; 
         } :
      genarray( new_shape, _flat_232); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  uint[*] res { , NN } ; 
  uint _flat_235 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  uint{0} _flat_232 { , NN } ; 
  int[.] _flat_233 { , NN } ; 
  int{0} _flat_234 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_227 { , NN } ; 
  int[1]{0} _flat_228 { , NN } ; 
  int{0} _flat_229 { , NN } ; 
  int[1] _flat_230 { , NN } ; 
  int[.] _flat_231 { , NN } ; 

  _flat_231 = _shape_A_( array); 
  _flat_230 = _shape_A_( idx); 
  _flat_229 = 0; 
  _flat_228 = [ _flat_229 ]; 
  _flat_227 = _sel_VxA_( _flat_228, _flat_230); 
  new_shape = _drop_SxV_( _flat_227, _flat_231); 
  _flat_234 = 0; 
  _flat_233 = _mul_SxV_( _flat_234, new_shape); 
  _flat_232 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_233 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_235 = _sel_VxA_( new_idx, array); 
        } : _flat_235 ; 
         } :
      genarray( new_shape, _flat_232); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ushort[*] res { , NN } ; 
  ushort _flat_226 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ushort{0} _flat_223 { , NN } ; 
  int[.] _flat_224 { , NN } ; 
  int{0} _flat_225 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_218 { , NN } ; 
  int[1]{0} _flat_219 { , NN } ; 
  int{0} _flat_220 { , NN } ; 
  int[1]{1} _flat_221 { , NN } ; 
  int[.] _flat_222 { , NN } ; 

  _flat_222 = _shape_A_( array); 
  _flat_221 = _shape_A_( idx); 
  _flat_220 = 0; 
  _flat_219 = [ _flat_220 ]; 
  _flat_218 = _sel_VxA_( _flat_219, _flat_221); 
  new_shape = _drop_SxV_( _flat_218, _flat_222); 
  _flat_225 = 0; 
  _flat_224 = _mul_SxV_( _flat_225, new_shape); 
  _flat_223 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_224 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_226 = _sel_VxA_( new_idx, array); 
        } : _flat_226 ; 
         } :
      genarray( new_shape, _flat_223); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ushort[*] res { , NN } ; 
  ushort _flat_226 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ushort{0} _flat_223 { , NN } ; 
  int[.] _flat_224 { , NN } ; 
  int{0} _flat_225 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_218 { , NN } ; 
  int[1]{0} _flat_219 { , NN } ; 
  int{0} _flat_220 { , NN } ; 
  int[1] _flat_221 { , NN } ; 
  int[.] _flat_222 { , NN } ; 

  _flat_222 = _shape_A_( array); 
  _flat_221 = _shape_A_( idx); 
  _flat_220 = 0; 
  _flat_219 = [ _flat_220 ]; 
  _flat_218 = _sel_VxA_( _flat_219, _flat_221); 
  new_shape = _drop_SxV_( _flat_218, _flat_222); 
  _flat_225 = 0; 
  _flat_224 = _mul_SxV_( _flat_225, new_shape); 
  _flat_223 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_224 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_226 = _sel_VxA_( new_idx, array); 
        } : _flat_226 ; 
         } :
      genarray( new_shape, _flat_223); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ubyte[*] res { , NN } ; 
  ubyte _flat_217 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ubyte{} _flat_214 { , NN } ; 
  int[.] _flat_215 { , NN } ; 
  int{0} _flat_216 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_209 { , NN } ; 
  int[1]{0} _flat_210 { , NN } ; 
  int{0} _flat_211 { , NN } ; 
  int[1]{1} _flat_212 { , NN } ; 
  int[.] _flat_213 { , NN } ; 

  _flat_213 = _shape_A_( array); 
  _flat_212 = _shape_A_( idx); 
  _flat_211 = 0; 
  _flat_210 = [ _flat_211 ]; 
  _flat_209 = _sel_VxA_( _flat_210, _flat_212); 
  new_shape = _drop_SxV_( _flat_209, _flat_213); 
  _flat_216 = 0; 
  _flat_215 = _mul_SxV_( _flat_216, new_shape); 
  _flat_214 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_215 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_217 = _sel_VxA_( new_idx, array); 
        } : _flat_217 ; 
         } :
      genarray( new_shape, _flat_214); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ubyte[*] res { , NN } ; 
  ubyte _flat_217 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ubyte{} _flat_214 { , NN } ; 
  int[.] _flat_215 { , NN } ; 
  int{0} _flat_216 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_209 { , NN } ; 
  int[1]{0} _flat_210 { , NN } ; 
  int{0} _flat_211 { , NN } ; 
  int[1] _flat_212 { , NN } ; 
  int[.] _flat_213 { , NN } ; 

  _flat_213 = _shape_A_( array); 
  _flat_212 = _shape_A_( idx); 
  _flat_211 = 0; 
  _flat_210 = [ _flat_211 ]; 
  _flat_209 = _sel_VxA_( _flat_210, _flat_212); 
  new_shape = _drop_SxV_( _flat_209, _flat_213); 
  _flat_216 = 0; 
  _flat_215 = _mul_SxV_( _flat_216, new_shape); 
  _flat_214 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_215 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_217 = _sel_VxA_( new_idx, array); 
        } : _flat_217 ; 
         } :
      genarray( new_shape, _flat_214); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  longlong[*] res { , NN } ; 
  longlong _flat_208 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  longlong{0} _flat_205 { , NN } ; 
  int[.] _flat_206 { , NN } ; 
  int{0} _flat_207 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_200 { , NN } ; 
  int[1]{0} _flat_201 { , NN } ; 
  int{0} _flat_202 { , NN } ; 
  int[1]{1} _flat_203 { , NN } ; 
  int[.] _flat_204 { , NN } ; 

  _flat_204 = _shape_A_( array); 
  _flat_203 = _shape_A_( idx); 
  _flat_202 = 0; 
  _flat_201 = [ _flat_202 ]; 
  _flat_200 = _sel_VxA_( _flat_201, _flat_203); 
  new_shape = _drop_SxV_( _flat_200, _flat_204); 
  _flat_207 = 0; 
  _flat_206 = _mul_SxV_( _flat_207, new_shape); 
  _flat_205 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_206 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_208 = _sel_VxA_( new_idx, array); 
        } : _flat_208 ; 
         } :
      genarray( new_shape, _flat_205); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  longlong[*] res { , NN } ; 
  longlong _flat_208 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  longlong{0} _flat_205 { , NN } ; 
  int[.] _flat_206 { , NN } ; 
  int{0} _flat_207 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_200 { , NN } ; 
  int[1]{0} _flat_201 { , NN } ; 
  int{0} _flat_202 { , NN } ; 
  int[1] _flat_203 { , NN } ; 
  int[.] _flat_204 { , NN } ; 

  _flat_204 = _shape_A_( array); 
  _flat_203 = _shape_A_( idx); 
  _flat_202 = 0; 
  _flat_201 = [ _flat_202 ]; 
  _flat_200 = _sel_VxA_( _flat_201, _flat_203); 
  new_shape = _drop_SxV_( _flat_200, _flat_204); 
  _flat_207 = 0; 
  _flat_206 = _mul_SxV_( _flat_207, new_shape); 
  _flat_205 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_206 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_208 = _sel_VxA_( new_idx, array); 
        } : _flat_208 ; 
         } :
      genarray( new_shape, _flat_205); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  long[*] res { , NN } ; 
  long _flat_199 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  long{0} _flat_196 { , NN } ; 
  int[.] _flat_197 { , NN } ; 
  int{0} _flat_198 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_191 { , NN } ; 
  int[1]{0} _flat_192 { , NN } ; 
  int{0} _flat_193 { , NN } ; 
  int[1]{1} _flat_194 { , NN } ; 
  int[.] _flat_195 { , NN } ; 

  _flat_195 = _shape_A_( array); 
  _flat_194 = _shape_A_( idx); 
  _flat_193 = 0; 
  _flat_192 = [ _flat_193 ]; 
  _flat_191 = _sel_VxA_( _flat_192, _flat_194); 
  new_shape = _drop_SxV_( _flat_191, _flat_195); 
  _flat_198 = 0; 
  _flat_197 = _mul_SxV_( _flat_198, new_shape); 
  _flat_196 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_197 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_199 = _sel_VxA_( new_idx, array); 
        } : _flat_199 ; 
         } :
      genarray( new_shape, _flat_196); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  long[*] res { , NN } ; 
  long _flat_199 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  long{0} _flat_196 { , NN } ; 
  int[.] _flat_197 { , NN } ; 
  int{0} _flat_198 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_191 { , NN } ; 
  int[1]{0} _flat_192 { , NN } ; 
  int{0} _flat_193 { , NN } ; 
  int[1] _flat_194 { , NN } ; 
  int[.] _flat_195 { , NN } ; 

  _flat_195 = _shape_A_( array); 
  _flat_194 = _shape_A_( idx); 
  _flat_193 = 0; 
  _flat_192 = [ _flat_193 ]; 
  _flat_191 = _sel_VxA_( _flat_192, _flat_194); 
  new_shape = _drop_SxV_( _flat_191, _flat_195); 
  _flat_198 = 0; 
  _flat_197 = _mul_SxV_( _flat_198, new_shape); 
  _flat_196 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_197 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_199 = _sel_VxA_( new_idx, array); 
        } : _flat_199 ; 
         } :
      genarray( new_shape, _flat_196); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  short[*] res { , NN } ; 
  short _flat_190 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  short{0} _flat_187 { , NN } ; 
  int[.] _flat_188 { , NN } ; 
  int{0} _flat_189 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_182 { , NN } ; 
  int[1]{0} _flat_183 { , NN } ; 
  int{0} _flat_184 { , NN } ; 
  int[1]{1} _flat_185 { , NN } ; 
  int[.] _flat_186 { , NN } ; 

  _flat_186 = _shape_A_( array); 
  _flat_185 = _shape_A_( idx); 
  _flat_184 = 0; 
  _flat_183 = [ _flat_184 ]; 
  _flat_182 = _sel_VxA_( _flat_183, _flat_185); 
  new_shape = _drop_SxV_( _flat_182, _flat_186); 
  _flat_189 = 0; 
  _flat_188 = _mul_SxV_( _flat_189, new_shape); 
  _flat_187 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_188 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_190 = _sel_VxA_( new_idx, array); 
        } : _flat_190 ; 
         } :
      genarray( new_shape, _flat_187); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  short[*] res { , NN } ; 
  short _flat_190 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  short{0} _flat_187 { , NN } ; 
  int[.] _flat_188 { , NN } ; 
  int{0} _flat_189 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_182 { , NN } ; 
  int[1]{0} _flat_183 { , NN } ; 
  int{0} _flat_184 { , NN } ; 
  int[1] _flat_185 { , NN } ; 
  int[.] _flat_186 { , NN } ; 

  _flat_186 = _shape_A_( array); 
  _flat_185 = _shape_A_( idx); 
  _flat_184 = 0; 
  _flat_183 = [ _flat_184 ]; 
  _flat_182 = _sel_VxA_( _flat_183, _flat_185); 
  new_shape = _drop_SxV_( _flat_182, _flat_186); 
  _flat_189 = 0; 
  _flat_188 = _mul_SxV_( _flat_189, new_shape); 
  _flat_187 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_188 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_190 = _sel_VxA_( new_idx, array); 
        } : _flat_190 ; 
         } :
      genarray( new_shape, _flat_187); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  byte[*] res { , NN } ; 
  byte _flat_181 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  byte{} _flat_178 { , NN } ; 
  int[.] _flat_179 { , NN } ; 
  int{0} _flat_180 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_173 { , NN } ; 
  int[1]{0} _flat_174 { , NN } ; 
  int{0} _flat_175 { , NN } ; 
  int[1]{1} _flat_176 { , NN } ; 
  int[.] _flat_177 { , NN } ; 

  _flat_177 = _shape_A_( array); 
  _flat_176 = _shape_A_( idx); 
  _flat_175 = 0; 
  _flat_174 = [ _flat_175 ]; 
  _flat_173 = _sel_VxA_( _flat_174, _flat_176); 
  new_shape = _drop_SxV_( _flat_173, _flat_177); 
  _flat_180 = 0; 
  _flat_179 = _mul_SxV_( _flat_180, new_shape); 
  _flat_178 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_179 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_181 = _sel_VxA_( new_idx, array); 
        } : _flat_181 ; 
         } :
      genarray( new_shape, _flat_178); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  byte[*] res { , NN } ; 
  byte _flat_181 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  byte{} _flat_178 { , NN } ; 
  int[.] _flat_179 { , NN } ; 
  int{0} _flat_180 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_173 { , NN } ; 
  int[1]{0} _flat_174 { , NN } ; 
  int{0} _flat_175 { , NN } ; 
  int[1] _flat_176 { , NN } ; 
  int[.] _flat_177 { , NN } ; 

  _flat_177 = _shape_A_( array); 
  _flat_176 = _shape_A_( idx); 
  _flat_175 = 0; 
  _flat_174 = [ _flat_175 ]; 
  _flat_173 = _sel_VxA_( _flat_174, _flat_176); 
  new_shape = _drop_SxV_( _flat_173, _flat_177); 
  _flat_180 = 0; 
  _flat_179 = _mul_SxV_( _flat_180, new_shape); 
  _flat_178 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_179 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_181 = _sel_VxA_( new_idx, array); 
        } : _flat_181 ; 
         } :
      genarray( new_shape, _flat_178); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  char[*] res { , NN } ; 
  char _flat_172 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  char{ } _flat_169 { , NN } ; 
  int[.] _flat_170 { , NN } ; 
  int{0} _flat_171 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_164 { , NN } ; 
  int[1]{0} _flat_165 { , NN } ; 
  int{0} _flat_166 { , NN } ; 
  int[1]{1} _flat_167 { , NN } ; 
  int[.] _flat_168 { , NN } ; 

  _flat_168 = _shape_A_( array); 
  _flat_167 = _shape_A_( idx); 
  _flat_166 = 0; 
  _flat_165 = [ _flat_166 ]; 
  _flat_164 = _sel_VxA_( _flat_165, _flat_167); 
  new_shape = _drop_SxV_( _flat_164, _flat_168); 
  _flat_171 = 0; 
  _flat_170 = _mul_SxV_( _flat_171, new_shape); 
  _flat_169 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_170 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_172 = _sel_VxA_( new_idx, array); 
        } : _flat_172 ; 
         } :
      genarray( new_shape, _flat_169); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  char[*] res { , NN } ; 
  char _flat_172 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  char{ } _flat_169 { , NN } ; 
  int[.] _flat_170 { , NN } ; 
  int{0} _flat_171 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_164 { , NN } ; 
  int[1]{0} _flat_165 { , NN } ; 
  int{0} _flat_166 { , NN } ; 
  int[1] _flat_167 { , NN } ; 
  int[.] _flat_168 { , NN } ; 

  _flat_168 = _shape_A_( array); 
  _flat_167 = _shape_A_( idx); 
  _flat_166 = 0; 
  _flat_165 = [ _flat_166 ]; 
  _flat_164 = _sel_VxA_( _flat_165, _flat_167); 
  new_shape = _drop_SxV_( _flat_164, _flat_168); 
  _flat_171 = 0; 
  _flat_170 = _mul_SxV_( _flat_171, new_shape); 
  _flat_169 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_170 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_172 = _sel_VxA_( new_idx, array); 
        } : _flat_172 ; 
         } :
      genarray( new_shape, _flat_169); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_163 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_160 { , NN } ; 
  int[.] _flat_161 { , NN } ; 
  int{0} _flat_162 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_155 { , NN } ; 
  int[1]{0} _flat_156 { , NN } ; 
  int{0} _flat_157 { , NN } ; 
  int[1]{1} _flat_158 { , NN } ; 
  int[.] _flat_159 { , NN } ; 

  _flat_159 = _shape_A_( array); 
  _flat_158 = _shape_A_( idx); 
  _flat_157 = 0; 
  _flat_156 = [ _flat_157 ]; 
  _flat_155 = _sel_VxA_( _flat_156, _flat_158); 
  new_shape = _drop_SxV_( _flat_155, _flat_159); 
  _flat_162 = 0; 
  _flat_161 = _mul_SxV_( _flat_162, new_shape); 
  _flat_160 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_161 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_163 = _sel_VxA_( new_idx, array); 
        } : _flat_163 ; 
         } :
      genarray( new_shape, _flat_160); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_163 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_160 { , NN } ; 
  int[.] _flat_161 { , NN } ; 
  int{0} _flat_162 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_155 { , NN } ; 
  int[1]{0} _flat_156 { , NN } ; 
  int{0} _flat_157 { , NN } ; 
  int[1] _flat_158 { , NN } ; 
  int[.] _flat_159 { , NN } ; 

  _flat_159 = _shape_A_( array); 
  _flat_158 = _shape_A_( idx); 
  _flat_157 = 0; 
  _flat_156 = [ _flat_157 ]; 
  _flat_155 = _sel_VxA_( _flat_156, _flat_158); 
  new_shape = _drop_SxV_( _flat_155, _flat_159); 
  _flat_162 = 0; 
  _flat_161 = _mul_SxV_( _flat_162, new_shape); 
  _flat_160 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_161 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_163 = _sel_VxA_( new_idx, array); 
        } : _flat_163 ; 
         } :
      genarray( new_shape, _flat_160); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  double[*] res { , NN } ; 
  double _flat_154 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_151 { , NN } ; 
  int[.] _flat_152 { , NN } ; 
  int{0} _flat_153 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_146 { , NN } ; 
  int[1]{0} _flat_147 { , NN } ; 
  int{0} _flat_148 { , NN } ; 
  int[1]{1} _flat_149 { , NN } ; 
  int[.] _flat_150 { , NN } ; 

  _flat_150 = _shape_A_( array); 
  _flat_149 = _shape_A_( idx); 
  _flat_148 = 0; 
  _flat_147 = [ _flat_148 ]; 
  _flat_146 = _sel_VxA_( _flat_147, _flat_149); 
  new_shape = _drop_SxV_( _flat_146, _flat_150); 
  _flat_153 = 0; 
  _flat_152 = _mul_SxV_( _flat_153, new_shape); 
  _flat_151 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_152 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_154 = _sel_VxA_( new_idx, array); 
        } : _flat_154 ; 
         } :
      genarray( new_shape, _flat_151); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  double[*] res { , NN } ; 
  double _flat_154 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_151 { , NN } ; 
  int[.] _flat_152 { , NN } ; 
  int{0} _flat_153 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_146 { , NN } ; 
  int[1]{0} _flat_147 { , NN } ; 
  int{0} _flat_148 { , NN } ; 
  int[1] _flat_149 { , NN } ; 
  int[.] _flat_150 { , NN } ; 

  _flat_150 = _shape_A_( array); 
  _flat_149 = _shape_A_( idx); 
  _flat_148 = 0; 
  _flat_147 = [ _flat_148 ]; 
  _flat_146 = _sel_VxA_( _flat_147, _flat_149); 
  new_shape = _drop_SxV_( _flat_146, _flat_150); 
  _flat_153 = 0; 
  _flat_152 = _mul_SxV_( _flat_153, new_shape); 
  _flat_151 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_152 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_154 = _sel_VxA_( new_idx, array); 
        } : _flat_154 ; 
         } :
      genarray( new_shape, _flat_151); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  float[*] res { , NN } ; 
  float _flat_145 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  float{0.0...} _flat_142 { , NN } ; 
  int[.] _flat_143 { , NN } ; 
  int{0} _flat_144 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_137 { , NN } ; 
  int[1]{0} _flat_138 { , NN } ; 
  int{0} _flat_139 { , NN } ; 
  int[1]{1} _flat_140 { , NN } ; 
  int[.] _flat_141 { , NN } ; 

  _flat_141 = _shape_A_( array); 
  _flat_140 = _shape_A_( idx); 
  _flat_139 = 0; 
  _flat_138 = [ _flat_139 ]; 
  _flat_137 = _sel_VxA_( _flat_138, _flat_140); 
  new_shape = _drop_SxV_( _flat_137, _flat_141); 
  _flat_144 = 0; 
  _flat_143 = _mul_SxV_( _flat_144, new_shape); 
  _flat_142 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_143 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_145 = _sel_VxA_( new_idx, array); 
        } : _flat_145 ; 
         } :
      genarray( new_shape, _flat_142); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  float[*] res { , NN } ; 
  float _flat_145 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  float{0.0...} _flat_142 { , NN } ; 
  int[.] _flat_143 { , NN } ; 
  int{0} _flat_144 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_137 { , NN } ; 
  int[1]{0} _flat_138 { , NN } ; 
  int{0} _flat_139 { , NN } ; 
  int[1] _flat_140 { , NN } ; 
  int[.] _flat_141 { , NN } ; 

  _flat_141 = _shape_A_( array); 
  _flat_140 = _shape_A_( idx); 
  _flat_139 = 0; 
  _flat_138 = [ _flat_139 ]; 
  _flat_137 = _sel_VxA_( _flat_138, _flat_140); 
  new_shape = _drop_SxV_( _flat_137, _flat_141); 
  _flat_144 = 0; 
  _flat_143 = _mul_SxV_( _flat_144, new_shape); 
  _flat_142 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_143 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_145 = _sel_VxA_( new_idx, array); 
        } : _flat_145 ; 
         } :
      genarray( new_shape, _flat_142); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_136 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_133 { , NN } ; 
  int[.] _flat_134 { , NN } ; 
  int{0} _flat_135 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_128 { , NN } ; 
  int[1]{0} _flat_129 { , NN } ; 
  int{0} _flat_130 { , NN } ; 
  int[1]{1} _flat_131 { , NN } ; 
  int[.] _flat_132 { , NN } ; 

  _flat_132 = _shape_A_( array); 
  _flat_131 = _shape_A_( idx); 
  _flat_130 = 0; 
  _flat_129 = [ _flat_130 ]; 
  _flat_128 = _sel_VxA_( _flat_129, _flat_131); 
  new_shape = _drop_SxV_( _flat_128, _flat_132); 
  _flat_135 = 0; 
  _flat_134 = _mul_SxV_( _flat_135, new_shape); 
  _flat_133 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_134 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_136 = _sel_VxA_( new_idx, array); 
        } : _flat_136 ; 
         } :
      genarray( new_shape, _flat_133); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_136 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_133 { , NN } ; 
  int[.] _flat_134 { , NN } ; 
  int{0} _flat_135 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_128 { , NN } ; 
  int[1]{0} _flat_129 { , NN } ; 
  int{0} _flat_130 { , NN } ; 
  int[1] _flat_131 { , NN } ; 
  int[.] _flat_132 { , NN } ; 

  _flat_132 = _shape_A_( array); 
  _flat_131 = _shape_A_( idx); 
  _flat_130 = 0; 
  _flat_129 = [ _flat_130 ]; 
  _flat_128 = _sel_VxA_( _flat_129, _flat_131); 
  new_shape = _drop_SxV_( _flat_128, _flat_132); 
  _flat_135 = 0; 
  _flat_134 = _mul_SxV_( _flat_135, new_shape); 
  _flat_133 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_134 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_136 = _sel_VxA_( new_idx, array); 
        } : _flat_136 ; 
         } :
      genarray( new_shape, _flat_133); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ulonglong[*] _flat_280 { , NN } ; 
  int[1] _flat_281 { , NN } ; 

  _flat_281 = [ idx ]; 
  _flat_280 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_281, array) ; 
  return( _flat_280); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ulong[*] _flat_278 { , NN } ; 
  int[1] _flat_279 { , NN } ; 

  _flat_279 = [ idx ]; 
  _flat_278 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_279, array) ; 
  return( _flat_278); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  uint[*] _flat_276 { , NN } ; 
  int[1] _flat_277 { , NN } ; 

  _flat_277 = [ idx ]; 
  _flat_276 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_277, array) ; 
  return( _flat_276); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ushort[*] _flat_274 { , NN } ; 
  int[1] _flat_275 { , NN } ; 

  _flat_275 = [ idx ]; 
  _flat_274 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_275, array) ; 
  return( _flat_274); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ubyte[*] _flat_272 { , NN } ; 
  int[1] _flat_273 { , NN } ; 

  _flat_273 = [ idx ]; 
  _flat_272 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_273, array) ; 
  return( _flat_272); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  longlong[*] _flat_270 { , NN } ; 
  int[1] _flat_271 { , NN } ; 

  _flat_271 = [ idx ]; 
  _flat_270 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_271, array) ; 
  return( _flat_270); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  long[*] _flat_268 { , NN } ; 
  int[1] _flat_269 { , NN } ; 

  _flat_269 = [ idx ]; 
  _flat_268 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_269, array) ; 
  return( _flat_268); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  short[*] _flat_266 { , NN } ; 
  int[1] _flat_267 { , NN } ; 

  _flat_267 = [ idx ]; 
  _flat_266 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_267, array) ; 
  return( _flat_266); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  byte[*] _flat_264 { , NN } ; 
  int[1] _flat_265 { , NN } ; 

  _flat_265 = [ idx ]; 
  _flat_264 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_265, array) ; 
  return( _flat_264); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  char[*] _flat_262 { , NN } ; 
  int[1] _flat_263 { , NN } ; 

  _flat_263 = [ idx ]; 
  _flat_262 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_263, array) ; 
  return( _flat_262); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  bool[*] _flat_260 { , NN } ; 
  int[1] _flat_261 { , NN } ; 

  _flat_261 = [ idx ]; 
  _flat_260 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_261, array) ; 
  return( _flat_260); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  double[*] _flat_258 { , NN } ; 
  int[1] _flat_259 { , NN } ; 

  _flat_259 = [ idx ]; 
  _flat_258 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_259, array) ; 
  return( _flat_258); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  float[*] _flat_256 { , NN } ; 
  int[1] _flat_257 { , NN } ; 

  _flat_257 = [ idx ]; 
  _flat_256 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_257, array) ; 
  return( _flat_256); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  int[*] _flat_254 { , NN } ; 
  int[1] _flat_255 { , NN } ; 

  _flat_255 = [ idx ]; 
  _flat_254 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_255, array) ; 
  return( _flat_254); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong{0} sacprelude_d::zero( ulonglong[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ulonglong{0} _flat_295__SSA0_1 { , NN } ; 
  ulonglong{0} _flat_295 { , NN } ; 

  _flat_295 = 0ULL; 
  _flat_295__SSA0_1 = _type_conv_( ulonglong, _flat_295); 
  return( _flat_295__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong{0} sacprelude_d::zero( ulong[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ulong{0} _flat_294__SSA0_1 { , NN } ; 
  ulong{0} _flat_294 { , NN } ; 

  _flat_294 = 0ul; 
  _flat_294__SSA0_1 = _type_conv_( ulong, _flat_294); 
  return( _flat_294__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint{0} sacprelude_d::zero( uint[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  uint{0} _flat_293__SSA0_1 { , NN } ; 
  uint{0} _flat_293 { , NN } ; 

  _flat_293 = 0ui; 
  _flat_293__SSA0_1 = _type_conv_( uint, _flat_293); 
  return( _flat_293__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort{0} sacprelude_d::zero( ushort[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ushort{0} _flat_292__SSA0_1 { , NN } ; 
  ushort{0} _flat_292 { , NN } ; 

  _flat_292 = 0us; 
  _flat_292__SSA0_1 = _type_conv_( ushort, _flat_292); 
  return( _flat_292__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte{} sacprelude_d::zero( ubyte[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ubyte{} _flat_291__SSA0_1 { , NN } ; 
  ubyte{} _flat_291 { , NN } ; 

  _flat_291 = 0ub; 
  _flat_291__SSA0_1 = _type_conv_( ubyte, _flat_291); 
  return( _flat_291__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong{0} sacprelude_d::zero( longlong[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  longlong{0} _flat_290__SSA0_1 { , NN } ; 
  longlong{0} _flat_290 { , NN } ; 

  _flat_290 = 0LL; 
  _flat_290__SSA0_1 = _type_conv_( longlong, _flat_290); 
  return( _flat_290__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long{0} sacprelude_d::zero( long[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  long{0} _flat_289__SSA0_1 { , NN } ; 
  long{0} _flat_289 { , NN } ; 

  _flat_289 = 0l; 
  _flat_289__SSA0_1 = _type_conv_( long, _flat_289); 
  return( _flat_289__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short{0} sacprelude_d::zero( short[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  short{0} _flat_288__SSA0_1 { , NN } ; 
  short{0} _flat_288 { , NN } ; 

  _flat_288 = 0s; 
  _flat_288__SSA0_1 = _type_conv_( short, _flat_288); 
  return( _flat_288__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte{} sacprelude_d::zero( byte[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  byte{} _flat_287__SSA0_1 { , NN } ; 
  byte{} _flat_287 { , NN } ; 

  _flat_287 = 0b; 
  _flat_287__SSA0_1 = _type_conv_( byte, _flat_287); 
  return( _flat_287__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool{0} sacprelude_d::zero( bool[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  bool{0} _flat_286__SSA0_1 { , NN } ; 
  bool{0} _flat_286 { , NN } ; 

  _flat_286 = false; 
  _flat_286__SSA0_1 = _type_conv_( bool, _flat_286); 
  return( _flat_286__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char{ } sacprelude_d::zero( char[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  char{ } _flat_285__SSA0_1 { , NN } ; 
  char{ } _flat_285 { , NN } ; 

  _flat_285 = ' '; 
  _flat_285__SSA0_1 = _type_conv_( char, _flat_285); 
  return( _flat_285__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float{0.0...} sacprelude_d::zero( float[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  float{0.0...} _flat_284__SSA0_1 { , NN } ; 
  float{0.0...} _flat_284 { , NN } ; 

  _flat_284 = 0.0f; 
  _flat_284__SSA0_1 = _type_conv_( float, _flat_284); 
  return( _flat_284__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double{0.0...} sacprelude_d::zero( double[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  double{0.0...} _flat_283__SSA0_1 { , NN } ; 
  double{0.0...} _flat_283 { , NN } ; 

  _flat_283 = 0.0; 
  _flat_283__SSA0_1 = _type_conv_( double, _flat_283); 
  return( _flat_283__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{0} sacprelude_d::zero( int[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_282__SSA0_1 { , NN } ; 
  int{0} _flat_282 { , NN } ; 

  _flat_282 = 0; 
  _flat_282__SSA0_1 = _type_conv_( int, _flat_282); 
  return( _flat_282__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( ulonglong[*] A { ,NN } , ulonglong[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_408 { , NN } ; 
  ulonglong _flat_409 { , NN } ; 
  ulonglong _flat_410 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_403 { , NN } ; 
  int[.] _flat_404 { , NN } ; 
  int{0} _flat_405 { , NN } ; 
  int[.] _flat_406 { , NN } ; 
  int[.] _flat_407 { , NN } ; 

  _flat_407 = _shape_A_( A); 
  _flat_406 = _shape_A_( A); 
  _flat_405 = 0; 
  _flat_404 = _mul_SxV_( _flat_405, _flat_406); 
  _flat_403 = true; 
  res = with {
        /* Partn */
        (_flat_404 <= iv < _flat_407)
        { 
          _flat_410 = _sel_VxA_( iv, B); 
          _flat_409 = _sel_VxA_( iv, A); 
          _flat_408 = _eq_SxS_( _flat_409, _flat_410); 
        } : _flat_408 ; 
         } :
      fold( sacprelude_d::and(), _flat_403); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( ulong[*] A { ,NN } , ulong[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_400 { , NN } ; 
  ulong _flat_401 { , NN } ; 
  ulong _flat_402 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_395 { , NN } ; 
  int[.] _flat_396 { , NN } ; 
  int{0} _flat_397 { , NN } ; 
  int[.] _flat_398 { , NN } ; 
  int[.] _flat_399 { , NN } ; 

  _flat_399 = _shape_A_( A); 
  _flat_398 = _shape_A_( A); 
  _flat_397 = 0; 
  _flat_396 = _mul_SxV_( _flat_397, _flat_398); 
  _flat_395 = true; 
  res = with {
        /* Partn */
        (_flat_396 <= iv < _flat_399)
        { 
          _flat_402 = _sel_VxA_( iv, B); 
          _flat_401 = _sel_VxA_( iv, A); 
          _flat_400 = _eq_SxS_( _flat_401, _flat_402); 
        } : _flat_400 ; 
         } :
      fold( sacprelude_d::and(), _flat_395); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( uint[*] A { ,NN } , uint[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_392 { , NN } ; 
  uint _flat_393 { , NN } ; 
  uint _flat_394 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_387 { , NN } ; 
  int[.] _flat_388 { , NN } ; 
  int{0} _flat_389 { , NN } ; 
  int[.] _flat_390 { , NN } ; 
  int[.] _flat_391 { , NN } ; 

  _flat_391 = _shape_A_( A); 
  _flat_390 = _shape_A_( A); 
  _flat_389 = 0; 
  _flat_388 = _mul_SxV_( _flat_389, _flat_390); 
  _flat_387 = true; 
  res = with {
        /* Partn */
        (_flat_388 <= iv < _flat_391)
        { 
          _flat_394 = _sel_VxA_( iv, B); 
          _flat_393 = _sel_VxA_( iv, A); 
          _flat_392 = _eq_SxS_( _flat_393, _flat_394); 
        } : _flat_392 ; 
         } :
      fold( sacprelude_d::and(), _flat_387); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( ushort[*] A { ,NN } , ushort[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_384 { , NN } ; 
  ushort _flat_385 { , NN } ; 
  ushort _flat_386 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_379 { , NN } ; 
  int[.] _flat_380 { , NN } ; 
  int{0} _flat_381 { , NN } ; 
  int[.] _flat_382 { , NN } ; 
  int[.] _flat_383 { , NN } ; 

  _flat_383 = _shape_A_( A); 
  _flat_382 = _shape_A_( A); 
  _flat_381 = 0; 
  _flat_380 = _mul_SxV_( _flat_381, _flat_382); 
  _flat_379 = true; 
  res = with {
        /* Partn */
        (_flat_380 <= iv < _flat_383)
        { 
          _flat_386 = _sel_VxA_( iv, B); 
          _flat_385 = _sel_VxA_( iv, A); 
          _flat_384 = _eq_SxS_( _flat_385, _flat_386); 
        } : _flat_384 ; 
         } :
      fold( sacprelude_d::and(), _flat_379); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( ubyte[*] A { ,NN } , ubyte[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_376 { , NN } ; 
  ubyte _flat_377 { , NN } ; 
  ubyte _flat_378 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_371 { , NN } ; 
  int[.] _flat_372 { , NN } ; 
  int{0} _flat_373 { , NN } ; 
  int[.] _flat_374 { , NN } ; 
  int[.] _flat_375 { , NN } ; 

  _flat_375 = _shape_A_( A); 
  _flat_374 = _shape_A_( A); 
  _flat_373 = 0; 
  _flat_372 = _mul_SxV_( _flat_373, _flat_374); 
  _flat_371 = true; 
  res = with {
        /* Partn */
        (_flat_372 <= iv < _flat_375)
        { 
          _flat_378 = _sel_VxA_( iv, B); 
          _flat_377 = _sel_VxA_( iv, A); 
          _flat_376 = _eq_SxS_( _flat_377, _flat_378); 
        } : _flat_376 ; 
         } :
      fold( sacprelude_d::and(), _flat_371); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( longlong[*] A { ,NN } , longlong[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_368 { , NN } ; 
  longlong _flat_369 { , NN } ; 
  longlong _flat_370 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_363 { , NN } ; 
  int[.] _flat_364 { , NN } ; 
  int{0} _flat_365 { , NN } ; 
  int[.] _flat_366 { , NN } ; 
  int[.] _flat_367 { , NN } ; 

  _flat_367 = _shape_A_( A); 
  _flat_366 = _shape_A_( A); 
  _flat_365 = 0; 
  _flat_364 = _mul_SxV_( _flat_365, _flat_366); 
  _flat_363 = true; 
  res = with {
        /* Partn */
        (_flat_364 <= iv < _flat_367)
        { 
          _flat_370 = _sel_VxA_( iv, B); 
          _flat_369 = _sel_VxA_( iv, A); 
          _flat_368 = _eq_SxS_( _flat_369, _flat_370); 
        } : _flat_368 ; 
         } :
      fold( sacprelude_d::and(), _flat_363); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( long[*] A { ,NN } , long[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_360 { , NN } ; 
  long _flat_361 { , NN } ; 
  long _flat_362 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_355 { , NN } ; 
  int[.] _flat_356 { , NN } ; 
  int{0} _flat_357 { , NN } ; 
  int[.] _flat_358 { , NN } ; 
  int[.] _flat_359 { , NN } ; 

  _flat_359 = _shape_A_( A); 
  _flat_358 = _shape_A_( A); 
  _flat_357 = 0; 
  _flat_356 = _mul_SxV_( _flat_357, _flat_358); 
  _flat_355 = true; 
  res = with {
        /* Partn */
        (_flat_356 <= iv < _flat_359)
        { 
          _flat_362 = _sel_VxA_( iv, B); 
          _flat_361 = _sel_VxA_( iv, A); 
          _flat_360 = _eq_SxS_( _flat_361, _flat_362); 
        } : _flat_360 ; 
         } :
      fold( sacprelude_d::and(), _flat_355); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( short[*] A { ,NN } , short[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_352 { , NN } ; 
  short _flat_353 { , NN } ; 
  short _flat_354 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_347 { , NN } ; 
  int[.] _flat_348 { , NN } ; 
  int{0} _flat_349 { , NN } ; 
  int[.] _flat_350 { , NN } ; 
  int[.] _flat_351 { , NN } ; 

  _flat_351 = _shape_A_( A); 
  _flat_350 = _shape_A_( A); 
  _flat_349 = 0; 
  _flat_348 = _mul_SxV_( _flat_349, _flat_350); 
  _flat_347 = true; 
  res = with {
        /* Partn */
        (_flat_348 <= iv < _flat_351)
        { 
          _flat_354 = _sel_VxA_( iv, B); 
          _flat_353 = _sel_VxA_( iv, A); 
          _flat_352 = _eq_SxS_( _flat_353, _flat_354); 
        } : _flat_352 ; 
         } :
      fold( sacprelude_d::and(), _flat_347); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( byte[*] A { ,NN } , byte[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_344 { , NN } ; 
  byte _flat_345 { , NN } ; 
  byte _flat_346 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_339 { , NN } ; 
  int[.] _flat_340 { , NN } ; 
  int{0} _flat_341 { , NN } ; 
  int[.] _flat_342 { , NN } ; 
  int[.] _flat_343 { , NN } ; 

  _flat_343 = _shape_A_( A); 
  _flat_342 = _shape_A_( A); 
  _flat_341 = 0; 
  _flat_340 = _mul_SxV_( _flat_341, _flat_342); 
  _flat_339 = true; 
  res = with {
        /* Partn */
        (_flat_340 <= iv < _flat_343)
        { 
          _flat_346 = _sel_VxA_( iv, B); 
          _flat_345 = _sel_VxA_( iv, A); 
          _flat_344 = _eq_SxS_( _flat_345, _flat_346); 
        } : _flat_344 ; 
         } :
      fold( sacprelude_d::and(), _flat_339); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( char[*] A { ,NN } , char[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_336 { , NN } ; 
  char _flat_337 { , NN } ; 
  char _flat_338 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_331 { , NN } ; 
  int[.] _flat_332 { , NN } ; 
  int{0} _flat_333 { , NN } ; 
  int[.] _flat_334 { , NN } ; 
  int[.] _flat_335 { , NN } ; 

  _flat_335 = _shape_A_( A); 
  _flat_334 = _shape_A_( A); 
  _flat_333 = 0; 
  _flat_332 = _mul_SxV_( _flat_333, _flat_334); 
  _flat_331 = true; 
  res = with {
        /* Partn */
        (_flat_332 <= iv < _flat_335)
        { 
          _flat_338 = _sel_VxA_( iv, B); 
          _flat_337 = _sel_VxA_( iv, A); 
          _flat_336 = _eq_SxS_( _flat_337, _flat_338); 
        } : _flat_336 ; 
         } :
      fold( sacprelude_d::and(), _flat_331); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_328 { , NN } ; 
  bool _flat_329 { , NN } ; 
  bool _flat_330 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_323 { , NN } ; 
  int[.] _flat_324 { , NN } ; 
  int{0} _flat_325 { , NN } ; 
  int[.] _flat_326 { , NN } ; 
  int[.] _flat_327 { , NN } ; 

  _flat_327 = _shape_A_( A); 
  _flat_326 = _shape_A_( A); 
  _flat_325 = 0; 
  _flat_324 = _mul_SxV_( _flat_325, _flat_326); 
  _flat_323 = true; 
  res = with {
        /* Partn */
        (_flat_324 <= iv < _flat_327)
        { 
          _flat_330 = _sel_VxA_( iv, B); 
          _flat_329 = _sel_VxA_( iv, A); 
          _flat_328 = _eq_SxS_( _flat_329, _flat_330); 
        } : _flat_328 ; 
         } :
      fold( sacprelude_d::and(), _flat_323); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_320 { , NN } ; 
  double _flat_321 { , NN } ; 
  double _flat_322 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_315 { , NN } ; 
  int[.] _flat_316 { , NN } ; 
  int{0} _flat_317 { , NN } ; 
  int[.] _flat_318 { , NN } ; 
  int[.] _flat_319 { , NN } ; 

  _flat_319 = _shape_A_( A); 
  _flat_318 = _shape_A_( A); 
  _flat_317 = 0; 
  _flat_316 = _mul_SxV_( _flat_317, _flat_318); 
  _flat_315 = true; 
  res = with {
        /* Partn */
        (_flat_316 <= iv < _flat_319)
        { 
          _flat_322 = _sel_VxA_( iv, B); 
          _flat_321 = _sel_VxA_( iv, A); 
          _flat_320 = _eq_SxS_( _flat_321, _flat_322); 
        } : _flat_320 ; 
         } :
      fold( sacprelude_d::and(), _flat_315); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( float[*] A { ,NN } , float[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_312 { , NN } ; 
  float _flat_313 { , NN } ; 
  float _flat_314 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_307 { , NN } ; 
  int[.] _flat_308 { , NN } ; 
  int{0} _flat_309 { , NN } ; 
  int[.] _flat_310 { , NN } ; 
  int[.] _flat_311 { , NN } ; 

  _flat_311 = _shape_A_( A); 
  _flat_310 = _shape_A_( A); 
  _flat_309 = 0; 
  _flat_308 = _mul_SxV_( _flat_309, _flat_310); 
  _flat_307 = true; 
  res = with {
        /* Partn */
        (_flat_308 <= iv < _flat_311)
        { 
          _flat_314 = _sel_VxA_( iv, B); 
          _flat_313 = _sel_VxA_( iv, A); 
          _flat_312 = _eq_SxS_( _flat_313, _flat_314); 
        } : _flat_312 ; 
         } :
      fold( sacprelude_d::and(), _flat_307); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_304 { , NN } ; 
  int _flat_305 { , NN } ; 
  int _flat_306 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_299 { , NN } ; 
  int[.] _flat_300 { , NN } ; 
  int{0} _flat_301 { , NN } ; 
  int[.] _flat_302 { , NN } ; 
  int[.] _flat_303 { , NN } ; 

  _flat_303 = _shape_A_( A); 
  _flat_302 = _shape_A_( A); 
  _flat_301 = 0; 
  _flat_300 = _mul_SxV_( _flat_301, _flat_302); 
  _flat_299 = true; 
  res = with {
        /* Partn */
        (_flat_300 <= iv < _flat_303)
        { 
          _flat_306 = _sel_VxA_( iv, B); 
          _flat_305 = _sel_VxA_( iv, A); 
          _flat_304 = _eq_SxS_( _flat_305, _flat_306); 
        } : _flat_304 ; 
         } :
      fold( sacprelude_d::and(), _flat_299); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::isPartitionIntersectNull(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_d::isPartitionIntersectNull( int[.] idxmin { ,NN } , int[.] idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersectNull ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_459 { , NN } ; 
  bool[.] _flat_460 { , NN } ; 

  _flat_460 = _ge_VxV_( idxmin, bound2); 
  _flat_459 = _lt_VxV_( idxmax, bound1); 
  z = _or_VxV_( _flat_459, _flat_460); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::isPartitionIntersectNull(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_d::isPartitionIntersectNull( int idxmin { ,NN } , int idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersectNull ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_461 { , NN } ; 
  bool[.] _flat_462 { , NN } ; 

  _flat_462 = _ge_SxV_( idxmin, bound2); 
  _flat_461 = _lt_SxV_( idxmax, bound1); 
  z = _or_VxV_( _flat_461, _flat_462); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionMin(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int sacprelude_d::partitionMin( int x { ,NN } , int y { ,NN } )
/*
 *  partitionMin ::  ---
 */
{ 
  int z__SSA0_1 { , NN } ; 
  int z { , NN } ; 

  z = _min_SxS_( x, y); 
  z__SSA0_1 = _type_conv_( int, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionMax(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int sacprelude_d::partitionMax( int x { ,NN } , int y { ,NN } )
/*
 *  partitionMax ::  ---
 */
{ 
  int z__SSA0_1 { , NN } ; 
  int z { , NN } ; 

  z = _max_SxS_( x, y); 
  z__SSA0_1 = _type_conv_( int, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::isPartitionIntersect1Part(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_d::isPartitionIntersect1Part( int[.] idxmin { ,NN } , int[.] idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersect1Part ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_463 { , NN } ; 
  bool[.] _flat_464 { , NN } ; 

  _flat_464 = _le_VxV_( idxmax, bound2); 
  _flat_463 = _ge_VxV_( idxmin, bound1); 
  z = _and_VxV_( _flat_463, _flat_464); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::isPartitionIntersect1Part(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_d::isPartitionIntersect1Part( int idxmin { ,NN } , int idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersect1Part ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_465 { , NN } ; 
  bool[.] _flat_466 { , NN } ; 

  _flat_466 = _le_SxV_( idxmax, bound2); 
  _flat_465 = _ge_SxV_( idxmin, bound1); 
  z = _and_VxV_( _flat_465, _flat_466); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionIntersectMax(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_d::partitionIntersectMax( int[.] PWLbound1 { ,NN } , int[.] ivmin { ,NN } )
/*
 *  partitionIntersectMax ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _max_VxV_( PWLbound1, ivmin); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionIntersectMax(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_d::partitionIntersectMax( int[.] PWLbound1 { ,NN } , int ivmin { ,NN } )
/*
 *  partitionIntersectMax ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _max_VxS_( PWLbound1, ivmin); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionIntersectMin(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_d::partitionIntersectMin( int[.] PWLbound2 { ,NN } , int[.] ivmax { ,NN } )
/*
 *  partitionIntersectMin ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _min_VxV_( PWLbound2, ivmax); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionIntersectMin(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_d::partitionIntersectMin( int[.] PWLbound2 { ,NN } , int ivmax { ,NN } )
/*
 *  partitionIntersectMin ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _min_VxS_( PWLbound2, ivmax); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::prod(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int sacprelude_d::prod( int[.] v { ,NN } )
/*
 *  prod ::  ---
 */
{ 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 
  int _flat_417 { , NN } ; 
  int[1] _flat_418 { , NN } ; 
  int i { , NN } ; 
  int[1] _flat_416 { , NN } ; 
  int{1} _flat_412 { , NN } ; 
  int[1]{0} _flat_413 { , NN } ; 
  int{0} _flat_414 { , NN } ; 
  int[1] _flat_415 { , NN } ; 

  _flat_415 = _shape_A_( v); 
  _flat_414 = 0; 
  _flat_413 = [ _flat_414 ]; 
  _flat_412 = 1; 
  res = with {
        /* Partn */
        (_flat_413 <= _flat_416=[i] < _flat_415)
        { 
          _flat_418 = [ i ]; 
          _flat_417 = _sel_VxA_( _flat_418, v); 
        } : _flat_417 ; 
         } :
      fold( sacprelude_d::*(), _flat_412); 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionSlicer(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.], int[.], int[.], int[.] sacprelude_d::partitionSlicer( int[.] min { ,NN } , int[.] max { ,NN } , int axis { ,NN } , int[.] lb { ,NN } , int[.] ub { ,NN } )
/*
 *  partitionSlicer ::  ---
 */
{ 
  int[.] max_lower__SSA0_1 { , NN } ; 
  int[.] min_upper__SSA0_1 { , NN } ; 
  int[.] new_min__SSA0_1 { , NN } ; 
  int[.] new_max__SSA0_1 { , NN } ; 
  int[.] new_max { , NN } ; 
  int[1] _flat_440 { , NN } ; 
  int[.] new_min { , NN } ; 
  int[1] _flat_439 { , NN } ; 
  int[.] min_upper { , NN } ; 
  int[1] _flat_438 { , NN } ; 
  int[.] max_lower { , NN } ; 
  int[1] _flat_437 { , NN } ; 
  int ub_i { , NN } ; 
  int _flat_435 { , NN } ; 
  int[1] _flat_436 { , NN } ; 
  int lb_i { , NN } ; 
  int[1] _flat_434 { , NN } ; 

  _flat_434 = [ axis ]; 
  lb_i = _sel_VxA_( _flat_434, lb); 
  _flat_436 = [ axis ]; 
  _flat_435 = _sel_VxA_( _flat_436, ub); 
  ub_i = wrapper:sacprelude_d::partitionMax( lb_i, _flat_435) ; 
  _flat_437 = [ axis ]; 
  max_lower = _modarray_AxVxS_( max, _flat_437, lb_i); 
  _flat_438 = [ axis ]; 
  min_upper = _modarray_AxVxS_( min, _flat_438, ub_i); 
  _flat_439 = [ axis ]; 
  new_min = _modarray_AxVxS_( min, _flat_439, lb_i); 
  _flat_440 = [ axis ]; 
  new_max = _modarray_AxVxS_( max, _flat_440, ub_i); 
  new_max__SSA0_1 = _type_conv_( int[.], new_max); 
  new_min__SSA0_1 = _type_conv_( int[.], new_min); 
  min_upper__SSA0_1 = _type_conv_( int[.], min_upper); 
  max_lower__SSA0_1 = _type_conv_( int[.], max_lower); 
  return( max_lower__SSA0_1, min_upper__SSA0_1, new_min__SSA0_1, new_max__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::gridFiller(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.], int[.], int[.] sacprelude_d::gridFiller( int[.] lb { ,NN } , int[.] ub { ,NN } , int[.] wdth { ,NN } , int dim { ,NN } , int[.] maxwidth { ,NN } )
/*
 *  gridFiller ::  ---
 */
{ 
  int[.] nlb__SSA0_1 { , NN } ; 
  int[.] nwidth__SSA0_1 { , NN } ; 
  int[.] nmaxwidth__SSA0_1 { , NN } ; 
  int[.] nmaxwidth { , NN } ; 
  int[1] _flat_456 { , NN } ; 
  int _flat_457 { , NN } ; 
  int[1] _flat_458 { , NN } ; 
  int[.] nwidth { , NN } ; 
  int[1] _flat_455 { , NN } ; 
  int[.] nlb { , NN } ; 
  int[1] _flat_454 { , NN } ; 
  int w_dim { , NN } ; 
  int _flat_448 { , NN } ; 
  int _flat_449 { , NN } ; 
  int[1] _flat_450 { , NN } ; 
  int _flat_451 { , NN } ; 
  int[1] _flat_452 { , NN } ; 
  int{0} _flat_453 { , NN } ; 
  int l_dim { , NN } ; 
  int _flat_441 { , NN } ; 
  int _flat_442 { , NN } ; 
  int[1] _flat_443 { , NN } ; 
  int _flat_444 { , NN } ; 
  int[1] _flat_445 { , NN } ; 
  int _flat_446 { , NN } ; 
  int[1] _flat_447 { , NN } ; 

  _flat_447 = [ dim ]; 
  _flat_446 = _sel_VxA_( _flat_447, ub); 
  _flat_445 = [ dim ]; 
  _flat_444 = _sel_VxA_( _flat_445, wdth); 
  _flat_443 = [ dim ]; 
  _flat_442 = _sel_VxA_( _flat_443, lb); 
  _flat_441 = _add_SxS_( _flat_442, _flat_444); 
  l_dim = wrapper:sacprelude_d::partitionMin( _flat_441, _flat_446) ; 
  _flat_453 = 0; 
  _flat_452 = [ dim ]; 
  _flat_451 = _sel_VxA_( _flat_452, wdth); 
  _flat_450 = [ dim ]; 
  _flat_449 = _sel_VxA_( _flat_450, maxwidth); 
  _flat_448 = _sub_SxS_( _flat_449, _flat_451); 
  w_dim = wrapper:sacprelude_d::partitionMax( _flat_448, _flat_453) ; 
  _flat_454 = [ dim ]; 
  nlb = _modarray_AxVxS_( lb, _flat_454, l_dim); 
  _flat_455 = [ dim ]; 
  nwidth = _modarray_AxVxS_( maxwidth, _flat_455, w_dim); 
  _flat_458 = [ dim ]; 
  _flat_457 = _sel_VxA_( _flat_458, wdth); 
  _flat_456 = [ dim ]; 
  nmaxwidth = _modarray_AxVxS_( maxwidth, _flat_456, _flat_457); 
  nmaxwidth__SSA0_1 = _type_conv_( int[.], nmaxwidth); 
  nwidth__SSA0_1 = _type_conv_( int[.], nwidth); 
  nlb__SSA0_1 = _type_conv_( int[.], nlb); 
  return( nlb__SSA0_1, nwidth__SSA0_1, nmaxwidth__SSA0_1); 
}



/****************************************************************************
 * _MAIN:Array::sel(...) [ body ]
 ****************************************************************************/
inline
bool _MAIN:Array::sel( int[0] idx { ,NN } , bool array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[0] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0]{} _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{0} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{0} _flat_66 { , NN } ; 
  int[0]{} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * _MAIN:ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} _MAIN:ArrayArith::one( int[0] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * _MAIN:ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[0] _MAIN:ArrayArith::*( int A { ,NN } , int[0] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_1821 { , NN } ; 
  int[0] res__SSA0_1 { , NN } ; 
  int[0] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1]{0} _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1]{0} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:_MAIN:ArrayArith::one( B) ; 
  _flat_75 = wrapper:_MAIN:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_1821] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * _MAIN:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
inline
int[0]{} _MAIN:ArrayArith::shape( bool array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[0]{} _flat_11__SSA0_1 { , NN } ; 
  int[0]{} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * _MAIN::all(...) [ body ]
 ****************************************************************************/
inline
bool _MAIN::all( bool a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_5 { , NN } ; 
  int[0] iv { , NN } ; 
  bool{1} _flat_0 { , NN } ; 
  int[0] _flat_1 { , NN } ; 
  int{0} _flat_2 { , NN } ; 
  int[0]{} _flat_3 { , NN } ; 
  int[0]{} _flat_4 { , NN } ; 

  _flat_4 = wrapper:_MAIN:ArrayArith::shape( a) ; 
  _flat_3 = wrapper:_MAIN:ArrayArith::shape( a) ; 
  _flat_2 = 0; 
  _flat_1 = ( _flat_2 wrapper:_MAIN:ArrayArith::*_flat_3) ; 
  _flat_0 = true; 
  res = with {
        /* Partn */
        (_flat_1 <= iv < _flat_4)
        { 
          _flat_5 = wrapper:_MAIN:Array::sel( iv, a) ; 
        } : _flat_5 ; 
         } :
      fold( ArrayArith::&(), _flat_0); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ArrayArith::one( int[.] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ArrayArith::one( int[+] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ScalarArith::one( int[*] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ArrayArith::one( int A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * Wrapper function:
 * _MAIN:ArrayArith::one(...) [ wrapper ]
 ****************************************************************************/
int{1} _MAIN:ArrayArith::one( int[*] A { ,NN } )
/*
 *  one :: { int[*] -> ( int{1}),
             int -> ( int{1}),
             int[+] -> ( int{1}),
             int[.] -> ( int{1}),
             int[0] -> ( int{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one,
 *                  _MAIN:ArrayArith::one
 */
{ 
  int{1} _cwc_81 { , NN } ; 
  bool _cwc_102 { , NN } ; 
  int _cwc_101 { , NN } ; 
  int{1} _cwc_100 { , NN } ; 
  int _cwc_99 { , NN } ; 
  bool _cwc_98 { , NN } ; 
  int _cwc_97 { , NN } ; 
  int{1} _cwc_96 { , NN } ; 
  int _cwc_95 { , NN } ; 
  bool _cwc_94 { , NN } ; 
  int _cwc_93 { , NN } ; 
  bool _cwc_92 { , NN } ; 
  bool _cwc_91 { , NN } ; 
  int{0} _cwc_90 { , NN } ; 
  int _cwc_89 { , NN } ; 
  int[1]{0} _cwc_88 { , NN } ; 
  bool _cwc_87 { , NN } ; 
  int{1} _cwc_86 { , NN } ; 
  int[+] _cwc_85 { , NN } ; 
  int{1} _cwc_84 { , NN } ; 
  int _cwc_83 { , NN } ; 
  int{1} _cwc_82 { , NN } ; 

  _cwc_99 = _dim_A_( A); 
  _cwc_101 = 0; 
  _cwc_102 = _eq_SxS_( _cwc_99, _cwc_101); 
  if (_cwc_102) 
  { 
    _cwc_100 = ArrayArith::one( A) ; 
    _cwc_81 = _cwc_100; 
  }
  else
  { 
    _cwc_95 = _dim_A_( A); 
    _cwc_97 = 0; 
    _cwc_98 = _gt_SxS_( _cwc_95, _cwc_97); 
    if (_cwc_98) 
    { 
      _cwc_83 = _dim_A_( A); 
      _cwc_93 = 1; 
      _cwc_94 = _eq_SxS_( _cwc_83, _cwc_93); 
      if (_cwc_94) 
      { 
        _cwc_85 = _shape_A_( A); 
        _cwc_87 = true; 
        _cwc_90 = 0; 
        _cwc_88 = [ 0 ]; 
        _cwc_89 = _sel_VxA_( _cwc_88, _cwc_85); 
        _cwc_91 = _eq_SxS_( _cwc_89, _cwc_90); 
        _cwc_92 = _and_SxS_( _cwc_91, _cwc_87); 
        if (_cwc_92) 
        { 
          _cwc_86 = _MAIN:ArrayArith::one( A) ; 
          _cwc_81 = _cwc_86; 
        }
        else
        { 
          _cwc_84 = ArrayArith::one( A) ; 
          _cwc_81 = _cwc_84; 
        }
      }
      else
      { 
        _cwc_82 = ArrayArith::one( A) ; 
        _cwc_81 = _cwc_82; 
      }
    }
    else
    { 
      _cwc_96 = ScalarArith::one( A) ; 
      _cwc_81 = _cwc_96; 
    }
  }
  return( _cwc_81); 
}



/****************************************************************************
 * sacprelude_d::*(...) [ body ]
 ****************************************************************************/
inline
int sacprelude_d::*( int a { ,NN } , int b { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _flat_411__SSA0_1 { , NN } ; 
  int _flat_411 { , NN } ; 

  _flat_411 = _mul_SxS_( a, b); 
  _flat_411__SSA0_1 = _type_conv_( int, _flat_411); 
  return( _flat_411__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::and(...) [ body ]
 ****************************************************************************/
inline
bool sacprelude_d::and( bool a { ,NN } , bool b { ,NN } )
/*
 *  and ::  ---
 */
{ 
  bool _flat_298__SSA0_1 { , NN } ; 
  bool _flat_298 { , NN } ; 

  _flat_298 = _and_SxS_( a, b); 
  _flat_298__SSA0_1 = _type_conv_( bool, _flat_298); 
  return( _flat_298__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
bool{1} ArrayArith::one( bool[+] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  bool{1} _flat_11__SSA0_1 { , NN } ; 
  bool{1} _flat_11 { , NN } ; 

  _flat_11 = true; 
  _flat_11__SSA0_1 = _type_conv_( bool, _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::one(...) [ body ]
 ****************************************************************************/
inline
bool{1} ScalarArith::one( bool[*] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  bool{1} _flat_11__SSA0_1 { , NN } ; 
  bool{1} _flat_11 { , NN } ; 

  _flat_11 = true; 
  _flat_11__SSA0_1 = _type_conv_( bool, _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
bool{1} ArrayArith::one( bool A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  bool{1} _flat_11__SSA0_1 { , NN } ; 
  bool{1} _flat_11 { , NN } ; 

  _flat_11 = true; 
  _flat_11__SSA0_1 = _type_conv_( bool, _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::sel( int[1] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[.] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}


/*-----------------------------------------------*/

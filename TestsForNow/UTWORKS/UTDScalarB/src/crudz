
/*-----------------------------------------------*/

/*
 *  SAC-Program crud.sac :
 */


/*
 *  type definitions
 */

external typedef sacprelude_d::SACarg;

external SACarg SACARGcopy( SACarg);
external void SACARGfree( SACarg);



/*
 *  prototypes for locals (FUNDEFS)
 */

external /* sticky */
int[.], int[.], int[.], int[.] sacprelude_d::partitionSlicer( int[*] min { ,NN } , int[*] max { ,NN } , int[*] axis { ,NN } , int[*] lb { ,NN } , int[*] ub { ,NN } )
/*
 *  partitionSlicer :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}},
                         int[+] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}},
                         int[.] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}}}
 *  dispatching to: sacprelude_d::partitionSlicer
 */;

external /* sticky */
int[.] sacprelude_d::partitionIntersectMax( int[*] PWLbound1 { ,NN } , int[*] ivmin { ,NN } )
/*
 *  partitionIntersectMax :: { int[*] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[+] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[.] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])}}
 *  dispatching to: sacprelude_d::partitionIntersectMax,
 *                  sacprelude_d::partitionIntersectMax
 */;

external /* sticky */
bool[.] sacprelude_d::isPartitionIntersectNull( int[*] idxmin { ,NN } , int[*] idxmax { ,NN } , int[*] bound1 { ,NN } , int[*] bound2 { ,NN } )
/*
 *  isPartitionIntersectNull :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[+] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[.] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}},
                                  int -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[+] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[.] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])}},
                                           int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])},
                                                    int[+] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])},
                                                    int[.] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])}}},
                                  int[+] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}},
                                  int[.] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}}}
 *  dispatching to: sacprelude_d::isPartitionIntersectNull,
 *                  sacprelude_d::isPartitionIntersectNull
 */;

external /* sticky */
int[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { int[*] -> ( int[*])},
                             int -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
float[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { float[*] -> ( float[*])},
                             int -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
double[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { double[*] -> ( double[*])},
                             int -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
bool[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { bool[*] -> ( bool[*])},
                             int -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
char[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { char[*] -> ( char[*])},
                             int -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
byte[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { byte[*] -> ( byte[*])},
                             int -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
short[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { short[*] -> ( short[*])},
                             int -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
long[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { long[*] -> ( long[*])},
                             int -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
longlong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { longlong[*] -> ( longlong[*])},
                             int -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ubyte[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
                             int -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ushort[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ushort[*] -> ( ushort[*])},
                             int -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
uint[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { uint[*] -> ( uint[*])},
                             int -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ulong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ulong[*] -> ( ulong[*])},
                             int -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ulonglong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
                             int -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
int[.] sacprelude_d::partitionIntersectMin( int[*] PWLbound2 { ,NN } , int[*] ivmax { ,NN } )
/*
 *  partitionIntersectMin :: { int[*] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[+] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[.] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])}}
 *  dispatching to: sacprelude_d::partitionIntersectMin,
 *                  sacprelude_d::partitionIntersectMin
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParams( bool[*] p { ,NN } , int[*] i { ,NN } , int[*] iv { ,NN } )
/*
 *  adjustLacFunParams :: { bool[*] -> { int[*] -> { int[*] -> ( int[*]),
                                                     int[+] -> ( int[*]),
                                                     int[.] -> ( int[*])}}}
 *  dispatching to: sacprelude_d::adjustLacFunParams
 */;

external /* sticky */
int sacprelude_d::prod( int[*] v { ,NN } )
/*
 *  prod :: { int[*] -> ( int),
              int[+] -> ( int),
              int[.] -> ( int)}
 *  dispatching to: sacprelude_d::prod
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParamsReshape( bool[*] p { ,NN } , int[*] i { ,NN } , int[*] iv { ,NN } , int[*] shp { ,NN } )
/*
 *  adjustLacFunParamsReshape :: { bool[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])},
                                                            int[+] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])},
                                                            int[.] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])}}}}
 *  dispatching to: sacprelude_d::adjustLacFunParamsReshape
 */;

external int[*] Array::-( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  - :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::-,
 *                  ArrayArith::-,
 *                  ArrayArith::-,
 *                  ScalarArith::-
 */;

external /* sticky */
bool sacprelude_d::eq( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  eq :: { int[*] -> { int[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( float[*] A { ,NN } , float[*] B { ,NN } )
/*
 *  eq :: { float[*] -> { float[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  eq :: { double[*] -> { double[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  eq :: { bool[*] -> { bool[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( char[*] A { ,NN } , char[*] B { ,NN } )
/*
 *  eq :: { char[*] -> { char[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( byte[*] A { ,NN } , byte[*] B { ,NN } )
/*
 *  eq :: { byte[*] -> { byte[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( short[*] A { ,NN } , short[*] B { ,NN } )
/*
 *  eq :: { short[*] -> { short[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( long[*] A { ,NN } , long[*] B { ,NN } )
/*
 *  eq :: { long[*] -> { long[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( longlong[*] A { ,NN } , longlong[*] B { ,NN } )
/*
 *  eq :: { longlong[*] -> { longlong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ubyte[*] A { ,NN } , ubyte[*] B { ,NN } )
/*
 *  eq :: { ubyte[*] -> { ubyte[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ushort[*] A { ,NN } , ushort[*] B { ,NN } )
/*
 *  eq :: { ushort[*] -> { ushort[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( uint[*] A { ,NN } , uint[*] B { ,NN } )
/*
 *  eq :: { uint[*] -> { uint[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ulong[*] A { ,NN } , ulong[*] B { ,NN } )
/*
 *  eq :: { ulong[*] -> { ulong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ulonglong[*] A { ,NN } , ulonglong[*] B { ,NN } )
/*
 *  eq :: { ulonglong[*] -> { ulonglong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external int[*] Array::toi( bool[*] A { ,NN } )
/*
 *  toi :: { bool[*] -> ( int[*]),
             bool -> ( int),
             bool[+] -> ( int[+])}
 *  dispatching to: ArrayArith::toi,
 *                  Bool::toi,
 *                  ScalarArith::toi
 */;

external bool Array::!=( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  != :: { bool[*] -> { bool[*] -> ( bool),
                         bool -> ( bool)},
            bool -> { bool[*] -> ( bool),
                      bool -> ( bool)}}
 *  dispatching to: ScalarArith::!=
 */;

external /* sticky */
int[.], int[.], int[.] sacprelude_d::gridFiller( int[*] lb { ,NN } , int[*] ub { ,NN } , int[*] wdth { ,NN } , int[*] dim { ,NN } , int[*] maxwidth { ,NN } )
/*
 *  gridFiller :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}},
                    int[+] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}},
                    int[.] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}}}
 *  dispatching to: sacprelude_d::gridFiller
 */;

external /* sticky */
bool[.] sacprelude_d::isPartitionIntersect1Part( int[*] idxmin { ,NN } , int[*] idxmax { ,NN } , int[*] bound1 { ,NN } , int[*] bound2 { ,NN } )
/*
 *  isPartitionIntersect1Part :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[+] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[.] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}},
                                   int -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[+] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[.] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])}},
                                            int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])},
                                                     int[+] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])},
                                                     int[.] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])}}},
                                   int[+] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}},
                                   int[.] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}}}
 *  dispatching to: sacprelude_d::isPartitionIntersect1Part,
 *                  sacprelude_d::isPartitionIntersect1Part
 */;

external /* sticky */
int{0} sacprelude_d::zero( int[*] A { ,NN } )
/*
 *  zero :: { int[*] -> ( int{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
double{0.0...} sacprelude_d::zero( double[*] A { ,NN } )
/*
 *  zero :: { double[*] -> ( double{0.0...})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
float{0.0...} sacprelude_d::zero( float[*] A { ,NN } )
/*
 *  zero :: { float[*] -> ( float{0.0...})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
char{ } sacprelude_d::zero( char[*] A { ,NN } )
/*
 *  zero :: { char[*] -> ( char{ })}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
bool{0} sacprelude_d::zero( bool[*] A { ,NN } )
/*
 *  zero :: { bool[*] -> ( bool{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
byte{} sacprelude_d::zero( byte[*] A { ,NN } )
/*
 *  zero :: { byte[*] -> ( byte{})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
short{0} sacprelude_d::zero( short[*] A { ,NN } )
/*
 *  zero :: { short[*] -> ( short{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
long{0} sacprelude_d::zero( long[*] A { ,NN } )
/*
 *  zero :: { long[*] -> ( long{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
longlong{0} sacprelude_d::zero( longlong[*] A { ,NN } )
/*
 *  zero :: { longlong[*] -> ( longlong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ubyte{} sacprelude_d::zero( ubyte[*] A { ,NN } )
/*
 *  zero :: { ubyte[*] -> ( ubyte{})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ushort{0} sacprelude_d::zero( ushort[*] A { ,NN } )
/*
 *  zero :: { ushort[*] -> ( ushort{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
uint{0} sacprelude_d::zero( uint[*] A { ,NN } )
/*
 *  zero :: { uint[*] -> ( uint{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ulong{0} sacprelude_d::zero( ulong[*] A { ,NN } )
/*
 *  zero :: { ulong[*] -> ( ulong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ulonglong{0} sacprelude_d::zero( ulonglong[*] A { ,NN } )
/*
 *  zero :: { ulonglong[*] -> ( ulonglong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
int sacprelude_d::partitionMax( int[*] x { ,NN } , int[*] y { ,NN } )
/*
 *  partitionMax :: { int[*] -> { int[*] -> ( int),
                                  int -> ( int)},
                      int -> { int[*] -> ( int),
                               int -> ( int)}}
 *  dispatching to: sacprelude_d::partitionMax
 */;

external /* sticky */
int sacprelude_d::partitionMin( int[*] x { ,NN } , int[*] y { ,NN } )
/*
 *  partitionMin :: { int[*] -> { int[*] -> ( int),
                                  int -> ( int)},
                      int -> { int[*] -> ( int),
                               int -> ( int)}}
 *  dispatching to: sacprelude_d::partitionMin
 */;

external /* sticky */
int sacprelude_d::++( int[*] a { ,NN } )
/*
 *  ++ :: { int[*] -> ( int),
            int -> ( int)}
 *  dispatching to: sacprelude_d::++
 */;

external /* sticky */
int[*] sacprelude_d::sel( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { int[*] -> ( int[*])},
             int[+] -> { int[*] -> ( int[*])},
             int[.] -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
float[*] sacprelude_d::sel( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { float[*] -> ( float[*])},
             int[+] -> { float[*] -> ( float[*])},
             int[.] -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
double[*] sacprelude_d::sel( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { double[*] -> ( double[*])},
             int[+] -> { double[*] -> ( double[*])},
             int[.] -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
bool[*] sacprelude_d::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*])},
             int[.] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
char[*] sacprelude_d::sel( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { char[*] -> ( char[*])},
             int[+] -> { char[*] -> ( char[*])},
             int[.] -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
byte[*] sacprelude_d::sel( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { byte[*] -> ( byte[*])},
             int[+] -> { byte[*] -> ( byte[*])},
             int[.] -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
short[*] sacprelude_d::sel( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { short[*] -> ( short[*])},
             int[+] -> { short[*] -> ( short[*])},
             int[.] -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
long[*] sacprelude_d::sel( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { long[*] -> ( long[*])},
             int[+] -> { long[*] -> ( long[*])},
             int[.] -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
longlong[*] sacprelude_d::sel( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { longlong[*] -> ( longlong[*])},
             int[+] -> { longlong[*] -> ( longlong[*])},
             int[.] -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ubyte[*] sacprelude_d::sel( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
             int[+] -> { ubyte[*] -> ( ubyte[*])},
             int[.] -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ushort[*] sacprelude_d::sel( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ushort[*] -> ( ushort[*])},
             int[+] -> { ushort[*] -> ( ushort[*])},
             int[.] -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
uint[*] sacprelude_d::sel( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { uint[*] -> ( uint[*])},
             int[+] -> { uint[*] -> ( uint[*])},
             int[.] -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ulong[*] sacprelude_d::sel( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ulong[*] -> ( ulong[*])},
             int[+] -> { ulong[*] -> ( ulong[*])},
             int[.] -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ulonglong[*] sacprelude_d::sel( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
             int[+] -> { ulonglong[*] -> ( ulonglong[*])},
             int[.] -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
int[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { int[*] -> ( int[*])},
                             int[+] -> { int[*] -> ( int[*])},
                             int[.] -> { int[*] -> ( int[*])},
                             int[1] -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
float[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { float[*] -> ( float[*])},
                             int[+] -> { float[*] -> ( float[*])},
                             int[.] -> { float[*] -> ( float[*])},
                             int[1] -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
double[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { double[*] -> ( double[*])},
                             int[+] -> { double[*] -> ( double[*])},
                             int[.] -> { double[*] -> ( double[*])},
                             int[1] -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
bool[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { bool[*] -> ( bool[*])},
                             int[+] -> { bool[*] -> ( bool[*])},
                             int[.] -> { bool[*] -> ( bool[*])},
                             int[1] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
char[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { char[*] -> ( char[*])},
                             int[+] -> { char[*] -> ( char[*])},
                             int[.] -> { char[*] -> ( char[*])},
                             int[1] -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
byte[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { byte[*] -> ( byte[*])},
                             int[+] -> { byte[*] -> ( byte[*])},
                             int[.] -> { byte[*] -> ( byte[*])},
                             int[1] -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
short[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { short[*] -> ( short[*])},
                             int[+] -> { short[*] -> ( short[*])},
                             int[.] -> { short[*] -> ( short[*])},
                             int[1] -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
long[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { long[*] -> ( long[*])},
                             int[+] -> { long[*] -> ( long[*])},
                             int[.] -> { long[*] -> ( long[*])},
                             int[1] -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
longlong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { longlong[*] -> ( longlong[*])},
                             int[+] -> { longlong[*] -> ( longlong[*])},
                             int[.] -> { longlong[*] -> ( longlong[*])},
                             int[1] -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ubyte[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
                             int[+] -> { ubyte[*] -> ( ubyte[*])},
                             int[.] -> { ubyte[*] -> ( ubyte[*])},
                             int[1] -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ushort[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ushort[*] -> ( ushort[*])},
                             int[+] -> { ushort[*] -> ( ushort[*])},
                             int[.] -> { ushort[*] -> ( ushort[*])},
                             int[1] -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
uint[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { uint[*] -> ( uint[*])},
                             int[+] -> { uint[*] -> ( uint[*])},
                             int[.] -> { uint[*] -> ( uint[*])},
                             int[1] -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ulong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ulong[*] -> ( ulong[*])},
                             int[+] -> { ulong[*] -> ( ulong[*])},
                             int[.] -> { ulong[*] -> ( ulong[*])},
                             int[1] -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ulonglong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[+] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[.] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[1] -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParams( bool[*] p { ,NN } , int[*] i { ,NN } , int[.] iv { ,NN } )
/*
 *  adjustLacFunParams ::  ---
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParamsReshape( bool[*] p { ,NN } , int[*] i { ,NN } , int[.] iv { ,NN } , int[.] shp { ,NN } )
/*
 *  adjustLacFunParamsReshape ::  ---
 */;

external /* sticky */
int sacprelude_d::++( int a { ,NN } )
/*
 *  ++ ::  ---
 */;

external bool[*] ArrayArith::&( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  & :: { bool[*] -> { bool[*] -> ( bool[*]),
                        bool -> ( bool[*]),
                        bool[+] -> ( bool[+])},
           bool -> { bool[*] -> ( bool[*]),
                     bool -> ( bool),
                     bool[+] -> ( bool[+])},
           bool[+] -> { bool[*] -> ( bool[+]),
                        bool -> ( bool[+]),
                        bool[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::&,
 *                  ArrayArith::&,
 *                  ArrayArith::&,
 *                  ScalarArith::&
 */;

external int{1} ArrayArith::one( int[*] A { ,NN } )
/*
 *  one :: { int[*] -> ( int{1}),
             int -> ( int{1}),
             int[+] -> ( int{1}),
             int[.] -> ( int{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one
 */;

external bool[*] ArrayBasics::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*])},
             int -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*])},
             int[.] -> { bool[*] -> ( bool[*])},
             int[1] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  ArrayBasics::sel
 */;

external bool{1} ArrayArith::one( bool[*] A { ,NN } )
/*
 *  one :: { bool[*] -> ( bool{1}),
             bool -> ( bool{1}),
             bool[+] -> ( bool{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one
 */;

external int sacprelude_d::*( int[*] a { ,NN } , int[*] b { ,NN } )
/*
 *  * :: { int[*] -> { int[*] -> ( int),
                       int -> ( int)},
           int -> { int[*] -> ( int),
                    int -> ( int)}}
 *  dispatching to: sacprelude_d::*
 */;

external bool sacprelude_d::and( bool[*] a { ,NN } , bool[*] b { ,NN } )
/*
 *  and :: { bool[*] -> { bool[*] -> ( bool),
                          bool -> ( bool)},
             bool -> { bool[*] -> ( bool),
                       bool -> ( bool)}}
 *  dispatching to: sacprelude_d::and
 */;

external bool{0} ArrayArith::zero( bool[*] A { ,NN } )
/*
 *  zero :: { bool[*] -> ( bool{0}),
              bool[+] -> ( bool{0})}
 *  dispatching to: ScalarArith::zero,
 *                  ArrayArith::zero
 */;



/*
 *  function definitions (FUNDEFS)
 */



/****************************************************************************
 * Cond function:
 * _MAIN:ArrayArith::_dup_129_one__Cond_17(...) [ body ]
 ****************************************************************************/
int{1} _MAIN:ArrayArith::_dup_129_one__Cond_17( bool _cwc_94 { ,NN } , int[*] A { ,NN } )
/*
 *  _dup_129_one__Cond_17 ::  ---
 */
{ 
  int _cwc_79 { , NN } ; 
  int _cwc_89 { , NN } ; 
  bool _cwc_90 { , NN } ; 
  int{1} _cwc_92 { , NN } ; 
  int{1} _cwc_77 { , NN } ; 

  if (_cwc_94) 
  { 
    _cwc_79 = _dim_A_( A); 
    _cwc_89 = 1; 
    _cwc_90 = _eq_SxS_( _cwc_79, _cwc_89); 
    _cwc_77 = _MAIN:ArrayArith::_dup_128_one__Cond_16( _cwc_90, A) ; 
  }
  else
  { 
    _cwc_92 = ScalarArith::one( A) ; 
    _cwc_77 = _cwc_92; 
  }
  return( _cwc_77); 
}



/****************************************************************************
 * Cond function:
 * _MAIN:ArrayArith::_dup_128_one__Cond_16(...) [ body ]
 ****************************************************************************/
int{1} _MAIN:ArrayArith::_dup_128_one__Cond_16( bool _cwc_90 { ,NN } , int[*] A { ,NN } )
/*
 *  _dup_128_one__Cond_16 ::  ---
 */
{ 
  int{1} _cwc_78 { , NN } ; 
  int[+] _cwc_81 { , NN } ; 
  bool _cwc_83 { , NN } ; 
  int[1]{0} _cwc_84 { , NN } ; 
  int _cwc_85 { , NN } ; 
  int{0} _cwc_86 { , NN } ; 
  bool _cwc_87 { , NN } ; 
  bool _cwc_88 { , NN } ; 
  int{1} _cwc_77 { , NN } ; 

  if (_cwc_90) 
  { 
    _cwc_81 = _shape_A_( A); 
    _cwc_83 = true; 
    _cwc_86 = 0; 
    _cwc_84 = [ 0 ]; 
    _cwc_85 = _sel_VxA_( _cwc_84, _cwc_81); 
    _cwc_87 = _eq_SxS_( _cwc_85, _cwc_86); 
    _cwc_88 = _and_SxS_( _cwc_87, _cwc_83); 
    _cwc_77 = _MAIN:ArrayArith::_dup_127_one__Cond_15( _cwc_88, A) ; 
  }
  else
  { 
    _cwc_78 = ArrayArith::one( A) ; 
    _cwc_77 = _cwc_78; 
  }
  return( _cwc_77); 
}



/****************************************************************************
 * Cond function:
 * _MAIN:ArrayArith::_dup_127_one__Cond_15(...) [ body ]
 ****************************************************************************/
int{1} _MAIN:ArrayArith::_dup_127_one__Cond_15( bool _cwc_88 { ,NN } , int[*] A { ,NN } )
/*
 *  _dup_127_one__Cond_15 ::  ---
 */
{ 
  int{1} _cwc_80 { , NN } ; 
  int{1} _cwc_82 { , NN } ; 
  int{1} _cwc_77 { , NN } ; 

  if (_cwc_88) 
  { 
    _cwc_82 = _MAIN:ArrayArith::one( A) ; 
    _cwc_77 = _cwc_82; 
  }
  else
  { 
    _cwc_80 = ArrayArith::one( A) ; 
    _cwc_77 = _cwc_80; 
  }
  return( _cwc_77); 
}



/****************************************************************************
 * Cond function:
 * _MAIN:ArrayArith::_dup_123_*__Cond_9(...) [ body ]
 ****************************************************************************/
int[*] _MAIN:ArrayArith::_dup_123_*__Cond_9( bool _cwc_68 { ,NN } , int[*] B { ,NN } , int[*] A { ,NN } )
/*
 *  _dup_123_*__Cond_9 ::  ---
 */
{ 
  int _cwc_62 { , NN } ; 
  int _cwc_63 { , NN } ; 
  bool _cwc_64 { , NN } ; 
  int _cwc_66 { , NN } ; 
  int[*] _cwc_36 { , NN } ; 

  if (_cwc_68) 
  { 
    _cwc_66 = ( A ScalarArith::*B) ; 
    _cwc_36 = _cwc_66; 
  }
  else
  { 
    _cwc_62 = _dim_A_( B); 
    _cwc_63 = 0; 
    _cwc_64 = _gt_SxS_( _cwc_62, _cwc_63); 
    _cwc_36 = ( _MAIN:ArrayArith::_dup_122_*__Cond_8
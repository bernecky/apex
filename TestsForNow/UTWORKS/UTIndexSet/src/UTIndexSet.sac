module UTIndexSet;
export {UTIndexSet_testXXI};

// Compiled by APEX Version: FIXME!! 2021-06-22 16:35:36.486
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline int[+] rotrXII(int[+] y)
{/* Last axis reverse on rank>1 */
  axis = _dim_A_( y) - 1;
  z = Array::reverse( axis, y);
  return( z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline int[*] dropBII(bool[.] x, int[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[*] dropIII(int[.] x, int[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[*] dropIII(int x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline char[*] quadXCC(char[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline int[.] comaIII(int x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline char[.] comaCCC(char[.] x, char[.] y)
{ /* VxV catenate first or last axis */
 return(toC(x)++toC(y));
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline double[+] combDID(double x, int[+] y)
{ /* SxA first-axis catenate */
  cell = genarray([1]++drop([1],shape(y)),toD(x));
  return(cell++toD(y));
}

inline int[+] combIII(int x, int[+] y)
{ /* SxA first-axis catenate */
  cell = genarray([1]++drop([1],shape(y)),toI(x));
  return(cell++toI(y));
}

inline int[+] comaIII(int[+] x, int y)
{ /* A,S last-axis catenate */
 frame = drop([-1],shape(x));
 cell = genarray([1+shape(x)[dim(x)-1]],0);
 z = with {
        (. <= iv <= .)
                : toI(x[iv])++[toI(y)];
        }: genarray(frame, cell);
 return(z);
}


inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[+] comaIII(int[+] x, int[+] y)
{/* AxA last axis catenate. Ranks match */
 cellshape = (take([-1],shape(x)))+take([-1],shape(y));
 cell = genarray(cellshape, 0);
 z = with {
         (. <= iv <= .)
                : toI(x[iv])++toI(y[iv]);
        } : genarray(drop([-1], shape(x)), cell);
 return(z);
}


inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameDDB(double[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline bool sameDIB(double[+] x, int[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline char[*] indr(char[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[*] indr(int[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}




inline int[+] inds0(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline int[+] inds1(int[+] X, int [+] I0, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=ItoI((Y[[i0]]));

 }

 return(z);
}



inline int[+] inds1(int[+] X, int [+] I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=ItoI((Y));

 }

 return(z);
}



inline int[+] indsx(int[+] X,  int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 
 z[[]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsx(int[+] X,  int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-1],shape(X)),Yin);

 
 z[[]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsxx(int[+] X,  int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-2],shape(X)),Yin);

 
 z[[]]=ItoI((Y));

 
 return(z);
}



inline int[+] inds0x(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-1],shape(X)),Yin);

 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsxx(int[+] X,  int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 
 z[[]]=ItoI((Y));

 
 return(z);
}



inline int[+] inds0x(int[+] X, int  I0, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsx0(int[+] X, int  I1, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){

 z[[i0,I1]]=ItoI((Y[[i0]]));

 }

 return(z);
}



inline int[+] inds1x(int[+] X, int [+] I0, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=ItoI((Y[[i0]]));

 }

 return(z);
}



inline int[+] inds00(int[+] X, int  I0,int  I1, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 
 z[[I0,I1]]=ItoI((Y));

 
 return(z);
}



inline int[+] inds11(int[+] X, int [+] I0,int [+] I1, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 for(i0=0; i0<shape(I0)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[I0[[i0]],I1[[i1]]]]=ItoI((Y));

 }
 }

 return(z);
}



inline int[+] inds11(int[+] X, int [+] I0,int [+] I1, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[I0[[i0]],I1[[i1]]]]=ItoI((Y[[i0,i1]]));

 }
 }

 return(z);
}



inline double[+] inds0xx(int[+] X, int  I0, double Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoD(X);
 Y = genarray(take([-2],shape(X)),Yin);

 
 z[[I0]]=DtoD((Y));

 
 return(z);
}



inline double[+] inds0xx(double[+] X, int  I0, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = DtoD(X);
 
 z[[I0]]=ItoD((Y));

 
 return(z);
}



inline double[+] inds1xx(double[+] X, int [+] I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = DtoD(X);
 Y = genarray(take([-2],shape(X)),Yin);

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=ItoD((Y));

 }

 return(z);
}



inline int[+] inds2xx(int[+] X, int [+] I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 I0=reshape([prod(shape(I0))],I0);

 z = ItoI(X);
 Y = genarray(take([-2],shape(X)),Yin);

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=ItoI((Y));

 }

 return(z);
}



inline int[+] inds00x(int[+] X, int  I0,int  I1, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-1],shape(X)),Yin);

 
 z[[I0,I1]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsx0x(int[+] X, int  I1, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-1],shape(X)),Yin);

 for(i0=0; i0<shape(X)[[0]]; i0++){

 z[[i0,I1]]=ItoI((Y));

 }

 return(z);
}



inline int[+] indsxx0(int[+] X, int  I2, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 for(i0=0; i0<shape(X)[[0]]; i0++){
 for(i1=0; i1<shape(X)[[1]]; i1++){

 z[[i0,i1,I2]]=ItoI((Y));

 }
 }

 return(z);
}



inline int[+] inds000(int[+] X, int  I0,int  I1,int  I2, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 
 z[[I0,I1,I2]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsx1(int[+] X, int [+] I1, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[i0,I1[[i1]]]]=ItoI((Y[[i0,i1]]));

 }
 }

 return(z);
}



inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqDDB(double[+] x, double[+] y,double QUADct)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqDDB(xel,yel, QUADct);
        } : genarray(sy, false);
  return(z);
}






inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqDDB(double x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : eqDDB(xel,yel, QUADct);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqDDB(double[+] x, double y,double QUADct)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqDDB(xel,y, QUADct);
  } : genarray( shape(x), false);
  return(z);
}


inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] okXBC(bool k ,int QUADio)
{ 
/*
 ?
*/
A_19=rhoICC([2, 3],['U','G','H','O','K',' ']);
 A_18= ABC(toi(k)-QUADio,shape(A_19)[0]);
A_21=A_19[[A_18]];
r_0=( A_21);
 return(r_0);
}

inline bool[.] testisXIB(int n ,double QUADct,int QUADio,int QUADpp,int QUADpw)
{ 
/*
 ?
*/
// dsf Scalar & clique
A_194=mpyIII(n,n);
 // dsf Scalar & clique
A_195=mpyIII(n,A_194);
 A_197=iotaXII( A_195,QUADio);
 A_198=comaIII(n,n);
 A_199=comaIII(n,A_198);
 A_200=rhoIII(A_199,A_197);
 r_0=( A_200);
 A_206=r_0;
 A_208=sameIIB(r_0,A_206);
 r_1=( A_208);
 A_211=iotaXII( 4,QUADio);
 v_0=( A_211);
 A_213= ABC(toi(false)-QUADio,shape(v_0)[0]);
A_215=inds0(v_0,A_213,23);
 v_1=( A_215);
 A_219=v_1;
 A_221=sameIIB(v_1,A_219);
 k_0=( A_221);
 A_223=comaBBB(r_1,A_221);
 r_2=( A_223);
 A_226=okXBC( k_0,QUADio);
 A_227=comaCCC(['V','[',']',':',' '],A_226);
 A_230=quadXCC( A_227,QUADpp,QUADpw);
 A_232=sameIIB(v_1,[23, 1, 2, 3]);
 k_1=( A_232);
 A_234=comaBBB(r_2,A_232);
 r_3=( A_234);
 A_237=okXBC( k_1,QUADio);
 A_238=comaCCC(['V','[','S',']','<','-','S',':',' '],A_237);
 A_241=quadXCC( A_238,QUADpp,QUADpw);
 A_242= ABC(toi([1, 2, 2, 3])-QUADio,shape(v_1)[0]);
A_244=inds1(v_1,A_242,[9, 8, 7, 6]);
 v_2=( A_244);
 A_247=sameIIB(v_2,[23, 9, 7, 6]);
 k_2=( A_247);
 A_249=comaBBB(r_3,A_247);
 r_4=( A_249);
 A_252=okXBC( k_2,QUADio);
 A_253=comaCCC(['V','[','V','d','u','p','s',']','<','-','V',':',' '],A_252);
 A_256=quadXCC( A_253,QUADpp,QUADpw);
 A_257= ABC(toi([1, 2])-QUADio,shape(v_2)[0]);
A_259=inds1(v_2,A_257,10);
 v_3=( A_259);
 A_262=sameIIB(v_3,[23, 10, 10, 6]);
 k_3=( A_262);
 A_264=comaBBB(r_4,A_262);
 r_5=( A_264);
 A_267=okXBC( k_3,QUADio);
 A_268=comaCCC(['V','[','V',']','<','-','S',':',' '],A_267);
 A_271=quadXCC( A_268,QUADpp,QUADpw);
 A_273=iotaXII( 4,QUADio);
 A_274=rotrXII( A_273);
 A_277=indsx(v_3,A_274);
 v_4=( A_277);
 A_280=sameIIB(v_4,[3, 2, 1, 0]);
 k_4=( A_280);
 A_282=comaBBB(r_5,A_280);
 r_6=( A_282);
 A_285=okXBC( k_4,QUADio);
 A_286=comaCCC(['V','[',']','<','-','V',':',' '],A_285);
 A_289=quadXCC( A_286,QUADpp,QUADpw);
 A_292=indsx(v_4,11);
 v_5=( A_292);
 A_295=sameIIB(v_5,[11, 11, 11, 11]);
 k_5=( A_295);
 A_297=comaBBB(r_6,A_295);
 r_7=( A_297);
 A_300=okXBC( k_5,QUADio);
 A_301=comaCCC(['V','[',']','<','-','S',':',' '],A_300);
 A_304=quadXCC( A_301,QUADpp,QUADpw);
 A_306=iotaXII( 6,QUADio);
 A_307=rhoIII([2, 3],A_306);
 M2_0=( A_307);
 A_312=indsxx(M2_0,42);
 M2_1=( A_312);
 A_314=rhoIII([2, 3],42);
 A_316=sameIIB(M2_1,A_314);
 k_6=( A_316);
 A_318=comaBBB(r_7,A_316);
 r_8=( A_318);
 A_321=okXBC( k_6,QUADio);
 A_322=comaCCC(['M','[',']','<','-','S',':',' '],A_321);
 A_325=quadXCC( A_322,QUADpp,QUADpw);
 A_327=iotaXII( 6,QUADio);
 A_328=rhoIII([2, 3],A_327);
 M2_2=( A_328);
 A_331= ABC(toi(false)-QUADio,shape(M2_2)[0]);
A_333=inds0x(M2_2,A_331,55);
 M2_3=( A_333);
 A_335=rhoIII([2, 3],[55, 55, 55, 3, 4, 5]);
 A_337=sameIIB(M2_3,A_335);
 k_7=( A_337);
 A_339=comaBBB(r_8,A_337);
 r_9=( A_339);
 A_342=okXBC( k_7,QUADio);
 A_343=comaCCC(['M','[','S',';',']','<','-','S',':',' '],A_342);
 A_346=quadXCC( A_343,QUADpp,QUADpw);
 A_348=iotaXII( 6,QUADio);
 A_349=rhoIII([2, 3],A_348);
 M2_4=( A_349);
 A_351=rotrXII( M2_4);
 A_355=indsxx(M2_4,A_351);
 M2_5=( A_355);
 A_357=rhoIII([2, 3],[2, 1, 0, 5, 4, 3]);
 A_359=sameIIB(M2_5,A_357);
 k_8=( A_359);
 A_361=comaBBB(r_9,A_359);
 r_10=( A_361);
 A_364=okXBC( k_8,QUADio);
 A_365=comaCCC(['M','[',';',']','<','-','M',':',' '],A_364);
 A_368=quadXCC( A_365,QUADpp,QUADpw);
 A_370=iotaXII( 6,QUADio);
 A_371=rhoIII([2, 3],A_370);
 M2_6=( A_371);
 A_374= ABC(toi(false)-QUADio,shape(M2_6)[0]);
A_376=inds0x(M2_6,A_374,[7, 8, 9]);
 M2_7=( A_376);
 A_378=rhoIII([2, 3],[7, 8, 9, 3, 4, 5]);
 A_380=sameIIB(M2_7,A_378);
 k_9=( A_380);
 A_382=comaBBB(r_10,A_380);
 r_11=( A_382);
 A_385=okXBC( k_9,QUADio);
 A_386=comaCCC(['M','[','S',';',']','<','-','V',':',' '],A_385);
 A_389=quadXCC( A_386,QUADpp,QUADpw);
 A_391=iotaXII( 6,QUADio);
 A_392=rhoIII([2, 3],A_391);
 M2_8=( A_392);
 A_394= ABC(toi(false)-QUADio,shape(M2_8)[1]);
A_397=indsx0(M2_8,A_394,[10, 20]);
 M2_9=( A_397);
 A_399=rhoIII([2, 3],[10, 1, 2, 20, 4, 5]);
 A_401=sameIIB(M2_9,A_399);
 k_10=( A_401);
 A_403=comaBBB(r_11,A_401);
 r_12=( A_403);
 A_406=okXBC( k_10,QUADio);
 A_407=comaCCC(['M','[',';','S',']','<','-','V',':',' '],A_406);
 A_410=quadXCC( A_407,QUADpp,QUADpw);
 A_412=iotaXII( 6,QUADio);
 A_413=rhoIII([2, 3],A_412);
 M2_10=( A_413);
 A_415=rhoIII([2, 3],[10, 20, 30, 40, 50, 60]);
 A_417= ABC(toi([true,false])-QUADio,shape(M2_10)[0]);
A_419=inds1x(M2_10,A_417,A_415);
 M2_11=( A_419);
 A_421=rhoIII([2, 3],[40, 50, 60, 10, 20, 30]);
 A_423=sameIIB(M2_11,A_421);
 k_11=( A_423);
 A_425=comaBBB(r_12,A_423);
 r_13=( A_425);
 A_428=okXBC( k_11,QUADio);
 A_429=comaCCC(['M','[','V',';',']','<','-','M',':',' '],A_428);
 A_432=quadXCC( A_429,QUADpp,QUADpw);
 A_434=iotaXII( 6,QUADio);
 A_435=rhoIII([2, 3],A_434);
 M2_12=( A_435);
 A_438= ABC(toi(false)-QUADio,shape(M2_12)[0]);
A_437= ABC(toi(true)-QUADio,shape(M2_12)[1]);
A_440=inds00(M2_12,A_438,A_437,666);
 M2_13=( A_440);
 A_442=rhoIII([2, 3],[0, 666, 2, 3, 4, 5]);
 A_444=sameIIB(M2_13,A_442);
 k_12=( A_444);
 A_446=comaBBB(r_13,A_444);
 r_14=( A_446);
 A_449=okXBC( k_12,QUADio);
 A_450=comaCCC(['M','[','S',';','S',']','<','-','S',':',' '],A_449);
 A_453=quadXCC( A_450,QUADpp,QUADpw);
 A_455= ABC(toi([true,false])-QUADio,shape(M2_13)[0]);
A_454= ABC(toi([2, 1])-QUADio,shape(M2_13)[1]);
A_457=inds11(M2_13,A_455,A_454,42);
 M2_14=( A_457);
 A_459=rhoIII([2, 3],[0, 42, 42, 3, 42, 42]);
 A_461=sameIIB(M2_14,A_459);
 A_462=comaBBB(r_14,A_461);
 r_15=( A_462);
 A_465=okXBC( k_12,QUADio);
 A_466=comaCCC(['M','[','V',';','V',']','<','-','S',':',' '],A_465);
 A_469=quadXCC( A_466,QUADpp,QUADpw);
 A_470=rhoIII([2, 2],[9, 8, 7, 6]);
 A_472= ABC(toi([true,false])-QUADio,shape(M2_14)[0]);
A_471= ABC(toi([2, 0])-QUADio,shape(M2_14)[1]);
A_474=inds11(M2_14,A_472,A_471,A_470);
 M2_15=( A_474);
 A_476=rhoIII([2, 3],[6, 42, 7, 8, 42, 9]);
 A_478=sameIIB(M2_15,A_476);
 k_13=( A_478);
 A_480=comaBBB(r_15,A_478);
 r_16=( A_480);
 A_483=okXBC( k_13,QUADio);
 A_484=comaCCC(['M','[','V',';','V',']','<','-','M',':',' '],A_483);
 A_487=quadXCC( A_484,QUADpp,QUADpw);
 A_489=iotaXII( 24,QUADio);
 A_490=rhoIII([2, 3, 4],A_489);
 M234_0=( A_490);
 A_494= ABC(toi(false)-QUADio,shape(M234_0)[0]);
A_496=inds0xx(M234_0,A_494,3.5);
 M234_1=( A_496);
 A_499=iotaXII( 24,QUADio);
 A_500=rhoIII([2, 3, 4],A_499);
 A_501=dropBII([true,false,false],A_500);
 A_502=combDID(3.5,A_501);
 A_504=sameDDB(M234_1,A_502,QUADct);
 k_14=( A_504);
 A_506=comaBBB(r_16,A_504);
 r_17=( A_506);
 A_509=okXBC( k_14,QUADio);
 A_510=comaCCC(['M','[','S',';',';',']','<','-','S',':',' '],A_509);
 A_513=quadXCC( A_510,QUADpp,QUADpw);
 A_514=rhoIII([3, 4],12);
 A_517= ABC(toi(false)-QUADio,shape(M234_1)[0]);
A_519=inds0xx(M234_1,A_517,A_514);
 M234_2=( A_519);
 A_522=iotaXII( 12,QUADio);
 // dsf scalar(s)
A_523=plusIII(12,A_522);
 A_524=rhoIII([1, 3, 4],A_523);
 A_525=combIII(12,A_524);
 A_527=sameDIB(M234_2,A_525,QUADct);
 k_15=( A_527);
 A_529=comaBBB(r_17,A_527);
 r_18=( A_529);
 A_532=okXBC( k_15,QUADio);
 A_533=comaCCC(['M','[','S',';',';',']','<','-','M',':',' '],A_532);
 A_536=quadXCC( A_533,QUADpp,QUADpw);
 A_539= ABC(toi([true,false])-QUADio,shape(M234_2)[0]);
A_541=inds1xx(M234_2,A_539,42);
 M234_3=( A_541);
 A_543=rhoIII([2, 3, 4],42);
 A_545=sameDIB(M234_3,A_543,QUADct);
 k_16=( A_545);
 A_547=comaBBB(r_18,A_545);
 r_19=( A_547);
 A_550=okXBC( k_16,QUADio);
 A_551=comaCCC(['M','[','V',';',';',']','<','-','S',':',' '],A_550);
 A_554=quadXCC( A_551,QUADpp,QUADpw);
 A_556=iotaXII( 24,QUADio);
 A_557=rhoIII([2, 3, 4],A_556);
 M234_4=( A_557);
 A_559=rhoIBB([2, 1],[true,false]);
 A_562= ABC(toi(A_559)-QUADio,shape(M234_4)[0]);
A_564=inds2xx(M234_4,A_562,42);
 M234_5=( A_564);
 A_566=rhoIII([2, 3, 4],42);
 A_568=sameIIB(M234_5,A_566);
 k_17=( A_568);
 A_570=comaBBB(r_19,A_568);
 r_20=( A_570);
 A_573=okXBC( k_17,QUADio);
 A_574=comaCCC(['M','[','M',';',';',']','<','-','S',':',' '],A_573);
 A_577=quadXCC( A_574,QUADpp,QUADpw);
 A_579=iotaXII( 24,QUADio);
 A_580=rhoIII([2, 3, 4],A_579);
 M234_6=( A_580);
 v_6=( M234_6);
 A_585= ABC(toi(false)-QUADio,shape(v_6)[0]);
A_584= ABC(toi(2)-QUADio,shape(v_6)[1]);
A_587=inds00x(v_6,A_585,A_584,42);
 v_7=( A_587);
 A_591= ABC(toi(true)-QUADio,shape(v_7)[0]);
A_590= ABC(toi(2)-QUADio,shape(v_7)[1]);
A_593=inds00x(v_7,A_591,A_590,42);
 v_8=( A_593);
 A_596= ABC(toi(2)-QUADio,shape(M234_6)[1]);
A_599=indsx0x(M234_6,A_596,42);
 M234_7=( A_599);
 A_602=sameIIB(M234_7,v_8);
 A_603=comaBBB(r_20,A_602);
 r_21=( A_603);
 A_606=okXBC( k_17,QUADio);
 A_607=comaCCC(['M','[',';','S',';',']','<','-','S',':',' '],A_606);
 A_610=quadXCC( A_607,QUADpp,QUADpw);
 A_612=iotaXII( 24,QUADio);
 A_613=rhoIII([2, 3, 4],A_612);
 M234_8=( A_613);
 A_615= ABC(toi(3)-QUADio,shape(M234_8)[2]);
A_619=indsxx0(M234_8,A_615,42);
 M234_9=( A_619);
 A_622=iotaXII( 24,QUADio);
 A_623=rhoIII([2, 3, 4],A_622);
 A_624=dropIII([0, 0, -1],A_623);
 A_625=comaIII(A_624,42);
 A_627=sameIIB(M234_9,A_625);
 k_18=( A_627);
 A_629=comaBBB(r_21,A_627);
 r_22=( A_629);
 A_632=okXBC( k_18,QUADio);
 A_633=comaCCC(['M','[',';',';','S',']','<','-','S',':',' '],A_632);
 A_636=quadXCC( A_633,QUADpp,QUADpw);
 A_638=iotaXII( 24,QUADio);
 A_639=rhoIII([2, 3, 4],A_638);
 M234_10=( A_639);
 A_643= ABC(toi(false)-QUADio,shape(M234_10)[0]);
A_642= ABC(toi(false)-QUADio,shape(M234_10)[1]);
A_641= ABC(toi(2)-QUADio,shape(M234_10)[2]);
A_645=inds000(M234_10,A_643,A_642,A_641,42);
M234_11=( A_645);
 A_648=iotaXII( 24,QUADio);
 A_649=rhoIII([2, 3, 4],A_648);
 A_650=comaXII( A_649);
 A_651=dropIII(3,A_650);
 A_652=comaIII([0, 1, 42],A_651);
 A_653=comaXII( M234_11);
 A_655=sameIIB(A_653,A_652);
 k_19=( A_655);
 A_657=comaBBB(r_22,A_655);
 r_23=( A_657);
 A_660=okXBC( k_19,QUADio);
 A_661=comaCCC(['M','[','S',';','S',';','S',']','<','-','S',':',' '],A_660);
 A_664=quadXCC( A_661,QUADpp,QUADpw);
 A_666=iotaXII( 99,QUADio);
 A_667=rhoIII([3, 6],A_666);
 M2_16=( A_667);
 A_670=iotaXII( 9,QUADio);
 // dsf scalar(s)
A_671=plusIII(100,A_670);
 A_672=rhoIII([3, 3],A_671);
 A_673= ABC(toi([3, 4, 5])-QUADio,shape(M2_16)[1]);
A_676=indsx1(M2_16,A_673,A_672);
 M2_17=( A_676);
 A_679=iotaXII( 9,QUADio);
 // dsf scalar(s)
A_680=plusIII(100,A_679);
 A_681=rhoIII([3, 3],A_680);
 A_682=rhoIII([3, 3],[0, 1, 2, 6, 7, 8, 12, 13, 14]);
 A_683=comaIII(A_682,A_681);
 A_685=sameIIB(M2_17,A_683);
 k_20=( A_685);
 A_687=comaBBB(r_23,A_685);
 r_24=( A_687);
 A_690=okXBC( k_20,QUADio);
 A_691=comaCCC(['M','[',';','V',']','<','-','M',':',' '],A_690);
 A_694=quadXCC( A_691,QUADpp,QUADpw);
 return(r_24);
}

inline int UTIndexSet_testXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 5);
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_55=testisXIB( n_0,QUADct_0,QUADio_1,QUADpp_1,QUADpw_1);
r_0=( A_55);
 A_59=quadXBB( r_0,QUADpp_1,QUADpw_1);
 A_60=andslXBBQUICKSTOP( r_0);
 // dsf scalar(s)
A_64=barBBI(true,A_60);
 r_1=( A_64);
 A_68=quadXII( r_1,QUADpp_1,QUADpw_1);
 return(r_1);
}


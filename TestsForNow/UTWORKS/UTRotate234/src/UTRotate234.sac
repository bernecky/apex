module UTRotate234;

use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// Compiled by APEX Version: wss/apex.20210504 2021-05-04 14:44:41.445
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


export all;

inline double[+] divXID(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : divXDD(toD(y[iv]));
        } : genarray(shape(y), 0.0d);
  return(z);
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : plusIII(xel,yel);
	} : genarray(shape(y), 0);
  return(z);
}


inline double[+] plusIDD(int[+] x, double y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : plusIDD(xel,y);
	} : genarray( shape(x), 0.0d);
  return(z);
}


inline int[+] rot1XII(int[+] y)
{ /* First axis reverse on anything */
  z = Array::reverse( 0, y);
  return( z);
}

inline double[+] rotrXDD(double[+] y)
{/* Last axis reverse on rank>1 */
  axis = _dim_A_( y) - 1;
  z = Array::reverse( axis, y);
  return( z);
}

inline double[+] rot1XDD(double[+] y)
{ /* First axis reverse on anything */
  z = Array::reverse( 0, y);
  return( z);
}

inline char[+] rotrXCC(char[+] y)
{/* Last axis reverse on rank>1 */
  axis = _dim_A_( y) - 1;
  z = Array::reverse( axis, y);
  return( z);
}

inline char[+] rot1XCC(char[+] y)
{ /* First axis reverse on anything */
  z = Array::reverse( 0, y);
  return( z);
}

inline bool[+] rotrXBB(bool[+] y)
{/* Last axis reverse on rank>1 */
  axis = _dim_A_( y) - 1;
  z = Array::reverse( axis, y);
  return( z);
}

inline bool[+] rot1XBB(bool[+] y)
{ /* First axis reverse on anything */
  z = Array::reverse( 0, y);
  return( z);
}

inline int[+] rotrXII(int[+] y)
{/* Last axis reverse on rank>1 */
  axis = _dim_A_( y) - 1;
  z = Array::reverse( axis, y);
  return( z);
}

inline char[+] rotrICC(int x, char[+] y)
{ /* Scalar rotate matrix last axis */
 cols = shape(y)[[dim(y)-1]];
 ix = toi(x);
 k = VectorRotateAmount(ix,cols); /* Normalize rotate count */
 y2d = reshape([prod(drop([-1],shape(y))), cols], y);
 z = with {
        (. <= [i,j] <= .)
         { idx = (j+k) < cols ? (j+k) : (j+k) - cols;
         } : y2d[[ i, idx]];
        } : genarray(shape(y2d), ' ');
 z = reshape(shape(y),z);
 return (z);
}


inline char[+] rot1ICC(int x, char[+] y)
{ /* Scalar rotate first axis non-scalar */
 ix = toi(x);
 rows = shape(y)[0];
 cellshape = drop([1], shape(y));
 defcell = genarray(cellshape, ' ');
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline int[+] rotrIII(int x, int[+] y)
{ /* Scalar rotate matrix last axis */
 cols = shape(y)[[dim(y)-1]];
 ix = toi(x);
 k = VectorRotateAmount(ix,cols); /* Normalize rotate count */
 y2d = reshape([prod(drop([-1],shape(y))), cols], y);
 z = with {
        (. <= [i,j] <= .)
         { idx = (j+k) < cols ? (j+k) : (j+k) - cols;
         } : y2d[[ i, idx]];
        } : genarray(shape(y2d), 0);
 z = reshape(shape(y),z);
 return (z);
}


inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline double[*] rhoIDD(int[.] x, double[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0.0d);
   return( z);
}



inline int[*] iotaCCIQUADAV(char[256] x, char y,int QUADio)
{ /* QUADav iota character scalar */
 return(toi(y)+QUADio);
}

inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline char[*] dropICC(int x, char[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline char[.] takeICC(int x, char[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline char[256] quadavXXC()
{ /* QUADav - system character set */
 z = with{
        ([0] <= [i] < [256]) : _toc_S_(i);
        } : genarray( [256], ' ');
 return(z);
}

inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline bool sameCCB(char[+] x, char[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqCCB(toC( x),  toC( y)))));
  return(z);
}



inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameDDB(double[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline bool sameBBB(bool[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqBBB(toB( x),  toB( y)))));
  return(z);
}



inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline double divXDD(double y)
{ return(1.0/tod(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline double plusIDD(int x, double y)
{ return(ItoD(x)+DtoD(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqCCB(char[+] x, char[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqCCB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqDDB(double[+] x, double[+] y,double QUADct)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqDDB(xel,yel, QUADct);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline int VectorRotateAmount(int x, int y)
{ /* Normalize x rotate for array of shape y on selected axis */
 /* normalize rotation count */

if ((0==x) || (0==y))
  z = 0;
else if (x>0)
        z = _aplmod_SxS_(x,y);
     else
        z = y - _aplmod_SxS_(abs(x),y);
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline bool eqCCB(char x, char y)
{ /* A=B on non-doubles */
 return(CtoC(x) == CtoC(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline bool eqBBB(bool x, bool y)
{ /* A=B on non-doubles */
 return(BtoB(x) == BtoB(y));
}

inline bool[+] eqCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
	( . <= iv <= .) {
        	yel = toC(y[iv]);
      		} : eqCCB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqCCB(char[+] x, char y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqCCB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : eqIIB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqIIB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqDDB(double x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
	( . <= iv <= .) {
        	yel = toD(y[iv]);
      		} : eqDDB(xel,yel, QUADct);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqDDB(double[+] x, double y,double QUADct)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqDDB(xel,y, QUADct);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
	( . <= iv <= .) {
        	yel = toB(y[iv]);
      		} : eqBBB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqBBB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline char[.] comaXCC(char[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[.] UTRotateXXB(int QUADio,double QUADct)
{ 
/*
 ?
*/
A_57=rhoICC([2, 3],['a','b','c','d','e','f']);
b_0=( A_57);
 A_59=rotrICC(3,b_0);
 A_60=rotrICC(3,A_59);
 A_62=sameCCB(b_0,A_60);
 r_0=( A_62);
 A_64=rot1ICC(2,b_0);
 A_66=sameCCB(b_0,A_64);
 A_67=comaBBB(r_0,A_66);
 r_1=( A_67);
 A_70=iotaXII( 20,QUADio);
 A_71=rhoIII([4, 5],A_70);
 b_1=( A_71);
 A_73=rotrIII(-10,b_1);
 A_74=rotrIII(5,A_73);
 A_76=sameIIB(b_1,A_74);
 A_77=comaBBB(r_1,A_76);
 r_2=( A_77);
 A_79=rot1XII( b_1);
 A_80=rot1XII( A_79);
 A_82=sameIIB(b_1,A_80);
 A_83=comaBBB(r_2,A_82);
 r_3=( A_83);
 A_86=iotaXII( 30,QUADio);
 // dsf scalar(s)
A_87=plusBII(true,A_86);
 A_88=divXID( A_87);
 A_89=rhoIDD([5, 6],A_88);
 b_2=( A_89);
 A_91=rotrXDD( b_2);
 A_92=rotrXDD( A_91);
 A_94=sameDDB(b_2,A_92,QUADct);
 A_95=comaBBB(r_3,A_94);
 r_4=( A_95);
 A_97=rot1XDD( b_2);
 A_98=rot1XDD( A_97);
 A_100=sameDDB(b_2,A_98,QUADct);
 A_101=comaBBB(r_4,A_100);
 r_5=( A_101);
 A_103=quadavXXC( );
 A_104=quadavXXC( );
 A_107=iotaCCIQUADAV(A_104,'a',QUADio);
 A_108=dropICC(A_107,A_103);
 A_109=rhoICC([6, 7],A_108);
 b_3=( A_109);
 A_111=rotrXCC( b_3);
 A_112=rotrXCC( A_111);
 A_114=sameCCB(b_3,A_112);
 A_115=comaBBB(r_5,A_114);
 r_6=( A_115);
 A_117=rot1XCC( b_3);
 A_118=rot1XCC( A_117);
 A_120=sameCCB(b_3,A_118);
 A_121=comaBBB(r_6,A_120);
 r_7=( A_121);
 A_123=rhoIBB([2, 3, 4],[false,true]);
 b_4=( A_123);
 A_125=rotrXBB( b_4);
 A_126=rotrXBB( A_125);
 A_128=sameBBB(b_4,A_126);
 A_129=comaBBB(r_7,A_128);
 r_8=( A_129);
 A_131=rot1XBB( b_4);
 A_132=rot1XBB( A_131);
 A_134=sameBBB(b_4,A_132);
 A_135=comaBBB(r_8,A_134);
 r_9=( A_135);
 A_138=iotaXII( 120,QUADio);
 A_139=rhoIII([3, 4, 5],A_138);
 b_5=( A_139);
 A_141=rotrXII( b_5);
 A_142=rotrXII( A_141);
 A_144=sameIIB(b_5,A_142);
 A_145=comaBBB(r_9,A_144);
 r_10=( A_145);
 A_147=rot1XII( b_5);
 A_148=rot1XII( A_147);
 A_150=sameIIB(b_5,A_148);
 A_151=comaBBB(r_10,A_150);
 r_11=( A_151);
 // dsf scalar(s)
A_153=plusIDD(b_5,0.5);
 b_6=( A_153);
 A_155=rotrXDD( b_6);
 A_156=rotrXDD( A_155);
 A_158=sameDDB(b_6,A_156,QUADct);
 A_159=comaBBB(r_11,A_158);
 r_12=( A_159);
 A_161=rot1XDD( b_6);
 A_162=rot1XDD( A_161);
 A_164=sameDDB(b_6,A_162,QUADct);
 A_165=comaBBB(r_12,A_164);
 r_13=( A_165);
 A_167=quadavXXC( );
 A_168=quadavXXC( );
 A_171=iotaCCIQUADAV(A_168,'a',QUADio);
 A_172=dropICC(A_171,A_167);
 A_173=takeICC(26,A_172);
 A_174=rhoICC([3, 4, 5],A_173);
 b_7=( A_174);
 A_176=rotrXCC( b_7);
 A_177=rotrXCC( A_176);
 A_179=sameCCB(b_7,A_177);
 A_180=comaBBB(r_13,A_179);
 r_14=( A_180);
 A_182=rot1XCC( b_7);
 A_183=rot1XCC( A_182);
 A_185=sameCCB(b_7,A_183);
 A_186=comaBBB(r_14,A_185);
 r_15=( A_186);
 return(r_15);
}

inline int UTRotate234_mainXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 A_38=UTRotateXXB( QUADio_0,QUADct_0);
 r_0=( A_38);
 A_42=quadXBB( r_0,QUADpp_0,QUADpw_0);
 A_43=andslXBBQUICKSTOP( r_0);
 // dsf scalar(s)
A_47=barBBI(true,A_43);
r_1=( A_47);
 A_51=quadXII( A_47,QUADpp_0,QUADpw_0);
 return(r_1);
}


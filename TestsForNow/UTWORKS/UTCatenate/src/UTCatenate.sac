module UTCatenate;
export all;

// Compiled by APEX Version: FIXME!! 2021-06-07 17:54:14.455
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] mpyIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[.] comaXBB(bool y)
{ /* Ravel of scalar */
  return([y]);
}

inline int[+] rot1III(int x, int[+] y)
{ /* Scalar rotate first axis non-scalar */
 ix = toi(x);
 rows = shape(y)[0];
 cellshape = drop([1], shape(y));
 defcell = genarray(cellshape, 0);
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[.] rhoIII(int x, int[*] y)
{ /* [Scalar reshape non-scalar] (to vector) */
 z = rhoIII( [toi(x)],y);
 return(z);
}


inline int[.] iotaXBI(bool y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline int[.] comaBII(bool x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[.] comaIBI(int[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline bool[.] comaBBB(bool x, bool[.] y)
{/* SxV catenate first (or last) axis */
 return([toB(x)]++toB(y));
}

inline bool[.] comaBBB(bool[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toB(x)++toB(y));
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] comaBII(bool[.] x, int y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline int[.] comaIBI(int x, bool[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[+] comaIII(int[+] x, int[+] y)
{/* AxA last axis catenate. Ranks match */
 cellshape = (take([-1],shape(x)))+take([-1],shape(y));
 cell = genarray(cellshape, 0);
 z = with {
         (. <= iv <= .)
                : toI(x[iv])++toI(y[iv]);
        } : genarray(drop([-1], shape(x)), cell);
 return(z);
}


inline int[+] comaIBI(int[+] x, bool y)
{ /* A,S last-axis catenate */
 frame = drop([-1],shape(x));
 cell = genarray([1+shape(x)[dim(x)-1]],0);
 z = with {
        (. <= iv <= .)
                : toI(x[iv])++[toI(y)];
        }: genarray(frame, cell);
 return(z);
}


inline int[+] comaIIILG(int[+] x, int[+] y)
{/* AxA last axis catenate. Left rank greater */
 frameshape = drop([-1],shape(x));
 cellshape  = take([-1],shape(x)) + [1];
 cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : toI(x[iv])++toI([y[iv]]);
        }: genarray(frameshape, cell);
 return(z);
}

inline bool[2] combBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline int[.] combBII(bool x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[.] combIBI(int[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline bool[.] combBBB(bool x, bool[.] y)
{/* SxV catenate first (or last) axis */
 return([toB(x)]++toB(y));
}

inline bool[.] combBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline bool[.] combBBB(bool[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toB(x)++toB(y));
}

inline int[.] combIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] combBII(bool[.] x, int y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline int[.] combIBI(int x, bool[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline int[+] combIII(int[+] x, int[+] y)
{/* AxA first axis catenate. Ranks match */
 return(toI(x)++toI(y));
}

inline int[+] combIII(int[+] x, int y)
{ /* AxS first-axis catenate */
  cell = genarray([1]++drop([1],shape(x)),toI(y));
  return(toI(x)++cell);
}

inline int[+] combIII(int x, int[+] y)
{ /* SxA first-axis catenate */
  cell = genarray([1]++drop([1],shape(y)),toI(x));
  return(cell++toI(y));
}

inline int[+] combIIILG(int[+] x, int[+] y)
{/* AxA first axis catenate. Left rank greater */
 return(toI(x)++toI([y]));
}
inline int[+] combIIIRG(int[+] x, int[+] y)
{/* AxA first axis catenate. Right rank greater */
 return(toI([x])++toI(y));
}
inline bool sameBBB(bool[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqBBB(toB( x),  toB( y)))));
  return(z);
}



inline bool sameIBB(int[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline int[*] indr(int[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}




inline int[+] indsxx0(int[+] X, int  I2, bool Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 for(i0=0; i0<shape(X)[[0]]; i0++){
 for(i1=0; i1<shape(X)[[1]]; i1++){

 z[[i0,i1,I2]]=BtoI((Y));

 }
 }

 return(z);
}



inline int[+] indsxx0(int[+] X, int  I2, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){
 for(i1=0; i1<shape(X)[[1]]; i1++){

 z[[i0,i1,I2]]=ItoI((Y[[i0,i1]]));

 }
 }

 return(z);
}



inline int[+] inds0xx(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-2],shape(X)),Yin);

 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline int[*] jotdotplusIII(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0);
 z = with {
        (. <= iv <= .) {
         xitem = toI(x[iv]);
        } : plusIII(xitem, toI(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int VectorRotateAmount(int x, int y)
{ /* Normalize x rotate for array of shape y on selected axis */
 /* normalize rotation count */

if ((0==x) || (0==y))
  z = 0;
else if (x>0)
        z = _aplmod_SxS_(x,y);
     else
        z = y - _aplmod_SxS_(abs(x),y);
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline bool eqBBB(bool x, bool y)
{ /* A=B on non-doubles */
 return(BtoB(x) == BtoB(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool[+] eqBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : eqBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[.] unittestsXXB(int QUADio)
{ 
/*
 ?
*/
S0_0=( false);
 S1_0=( true);
 A_96=comaXBB( true);
 V1_0=( A_96);
 A_98=comaXBB( false);
 V0_0=( A_98);
 A_101=iotaXBI( false,QUADio);
 Vn_0=( A_101);
 V10100_0=( [true,false,true,false,false]);
 V101011_0=( [true,false,true,false,true,true]);
 A_106=iotaXII( 24,QUADio);
 A_107=rhoIII([2, 3, 4],A_106);
 M234_0=( A_107);
 A_109=comaBBB(S0_0,S1_0);
 A_111=sameBBB(A_109,[false,true]);
 r_0=( A_111);
 A_113=comaXBB( S1_0);
 A_114=comaBII(S1_0,Vn_0);
 A_116=sameIBB(A_114,A_113);
 A_117=comaBBB(r_0,A_116);
 r_1=( A_117);
 A_119=comaXBB( S1_0);
 A_120=comaIBI(Vn_0,S1_0);
 A_122=sameIBB(A_120,A_119);
 A_123=comaBBB(r_1,A_122);
 r_2=( A_123);
 A_125=comaBBB(S0_0,V1_0);
 A_127=sameBBB(A_125,[false,true]);
 A_128=comaBBB(r_2,A_127);
 r_3=( A_128);
 A_130=comaBBB(V1_0,S0_0);
 A_132=sameBBB(A_130,[true,false]);
 A_133=comaBBB(r_3,A_132);
 r_4=( A_133);
 A_135=comaBBB(V0_0,V1_0);
 A_136=comaBBB(V1_0,A_135);
 A_138=sameBBB(A_136,[true,false,true]);
 A_139=comaBBB(r_4,A_138);
 r_5=( A_139);
 A_141=comaIII(Vn_0,Vn_0);
 A_143=sameIIB(A_141,Vn_0);
 A_144=comaBBB(r_5,A_143);
 r_6=( A_144);
 A_146=comaBII(V10100_0,23);
 A_148=sameIIB(A_146,[1, 0, 1, 0, 0, 23]);
 A_149=comaBBB(r_6,A_148);
 r_7=( A_149);
 A_151=comaIBI(23,V10100_0);
 A_153=sameIIB(A_151,[23, 1, 0, 1, 0, 0]);
 A_154=comaBBB(r_7,A_153);
 r_8=( A_154);
 A_157=iotaXII( 4,QUADio);
 A_158=rhoIII(8,A_157);
 A_160=iotaXII( 6,QUADio);
 // dsf scalar(s)
A_161=mpyIII(4,A_160);
 A_162=rhoIII([2, 3],A_161);
 A_163=jotdotplusIII(A_162,A_158);
 A_170=comaIII(M234_0,M234_0);
 A_172=sameIIB(A_170,A_163);
 A_173=comaBBB(r_8,A_172);
 r_9=( A_173);
 A_179=iotaXII( 4,QUADio);
 A_181=iotaXII( 6,QUADio);
 // dsf scalar(s)
A_182=mpyIII(4,A_181);
 A_183=rhoIII([2, 3],A_182);
 A_184=jotdotplusIII(A_183,A_179);
 A_175= ABC(toi([0, 1, 2, 3, 0])-QUADio,shape(A_184)[2]);
A_192=indrfr(2,A_184,A_175);
z_0=( A_192);
 A_194= ABC(toi(4)-QUADio,shape(z_0)[2]);
A_198=indsxx0(z_0,A_194,false);
 z_1=( A_198);
 A_200=comaIBI(M234_0,false);
 A_202=sameIIB(A_200,z_1);
 A_203=comaBBB(r_9,A_202);
 r_10=( A_203);
 A_205=rhoIII([2, 3],[10, 20, 30, 40, 50, 60]);
 A_206= ABC(toi(4)-QUADio,shape(z_1)[2]);
A_210=indsxx0(z_1,A_206,A_205);
 z_2=( A_210);
 A_212=rhoIII([2, 3],[10, 20, 30, 40, 50, 60]);
 A_213=comaIIILG(M234_0,A_212);
 A_215=sameIIB(A_213,z_2);
 A_216=comaBBB(r_10,A_215);
 r_11=( A_216);
 A_218=combBBB(S0_0,S0_0);
 A_220=sameBBB(A_218,[false,false]);
 A_221=comaBBB(r_11,A_220);
 r_12=( A_221);
 A_223=comaXBB( S1_0);
 A_224=combBII(S1_0,Vn_0);
 A_226=sameIBB(A_224,A_223);
 A_227=comaBBB(r_12,A_226);
 r_13=( A_227);
 A_229=comaXBB( S1_0);
 A_230=combIBI(Vn_0,S1_0);
 A_232=sameIBB(A_230,A_229);
 A_233=comaBBB(r_13,A_232);
 r_14=( A_233);
 A_235=combBBB(S0_0,V1_0);
 A_237=sameBBB(A_235,[false,true]);
 A_238=comaBBB(r_14,A_237);
 r_15=( A_238);
 A_240=combBBB(V1_0,S0_0);
 A_242=sameBBB(A_240,[true,false]);
 A_243=comaBBB(r_15,A_242);
 r_16=( A_243);
 A_245=combBBB(V0_0,V1_0);
 A_246=combBBB(V1_0,A_245);
 A_248=sameBBB(A_246,[true,false,true]);
 A_249=comaBBB(r_16,A_248);
 r_17=( A_249);
 A_251=combIII(Vn_0,Vn_0);
 A_253=sameIIB(A_251,Vn_0);
 A_254=comaBBB(r_17,A_253);
 r_18=( A_254);
 A_256=combBII(V10100_0,23);
 A_258=sameIIB(A_256,[1, 0, 1, 0, 0, 23]);
 A_259=comaBBB(r_18,A_258);
 r_19=( A_259);
 A_261=combIBI(23,V10100_0);
 A_263=sameIIB(A_261,[23, 1, 0, 1, 0, 0]);
 A_264=comaBBB(r_19,A_263);
 r_20=( A_264);
 A_267=iotaXII( 24,QUADio);
 A_268=rhoIII([4, 3, 4],A_267);
 A_269=combIII(M234_0,M234_0);
 A_271=sameIIB(A_269,A_268);
 A_272=comaBBB(r_20,A_271);
 r_21=( A_272);
 A_275=iotaXII( 24,QUADio);
 A_276=rhoIII([3, 3, 4],A_275);
 z_3=( A_276);
 A_280= ABC(toi(2)-QUADio,shape(z_3)[0]);
A_282=inds0xx(z_3,A_280,5);
 z_4=( A_282);
 A_284=combIII(M234_0,5);
 A_286=sameIIB(A_284,z_4);
 A_287=comaBBB(r_21,A_286);
 r_22=( A_287);
 A_289=rot1III(-1,z_4);
 A_290=combIII(5,M234_0);
 A_292=sameIIB(A_290,A_289);
 A_293=comaBBB(r_22,A_292);
 r_23=( A_293);
 A_295=rhoIII([3, 4],5);
 A_296=combIIILG(M234_0,A_295);
 A_298=sameIIB(A_296,z_4);
 A_299=comaBBB(r_23,A_298);
 r_24=( A_299);
 A_301=rot1III(-1,z_4);
 A_302=rhoIII([3, 4],5);
 A_303=combIIIRG(A_302,M234_0);
 A_305=sameIIB(A_303,A_301);
 A_306=comaBBB(r_24,A_305);
 r_25=( A_306);
 return(r_25);
}

inline int UTCatenate_testXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 A_47=unittestsXXB( QUADio_0);
 r_0=( A_47);
 A_51=quadXBB( r_0,QUADpp_0,QUADpw_0);
 A_52=andslXBBQUICKSTOP( r_0);
 // dsf scalar(s)
A_56=barBBI(true,A_52);
r_1=( A_56);
 A_60=quadXII( A_56,QUADpp_0,QUADpw_0);
 return(r_1);
}


module UTTakeDrop;
export all;

// Compiled by APEX Version: FIXME!! 2021-06-07 17:54:47.801
use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// APEX stdlib.sis include file.
// Standard equates and constants for APL compiler
// Also standard coercion functions

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int[+] modXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : modXII(toI(y[iv]));
        } : genarray(shape(y), 0);
  return(z);
}

inline int[+] barXII(int[+] y)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : barXII(toI(y[iv]));
        } : genarray(shape(y), 0);
  return(z);
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] mpyBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[+] ltIBB(int[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : ltIBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[+] mpyBII(bool[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : mpyBII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[+] maxIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : maxIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[+] barIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : barIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[+] maxBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : maxIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] minIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : minIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline int[+] plusIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusIII(xel,yel);
        } : genarray(sy, 0);
  return(z);
}






inline bool[.] comaXBB(bool y)
{ /* Ravel of scalar */
  return([y]);
}

inline bool[.] comaXBB(bool[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline int[.] comaXII(int[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline int[.] comaXII(int y)
{ /* Ravel of scalar */
  return([y]);
}

inline char[.] comaXCC(char[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[.] rhoBBB(bool x, bool[*] y)
{ /* [Scalar reshape non-scalar] (to vector) */
 z = rhoIBB( [toi(x)],y);
 return(z);
}


inline bool[*] rhoCBB(char[.] x, bool[*] y)
{  /* Character-vector reshape anything. */
   /* Left argument must be empty vector! */
  if( 0 != shape(x)[[0]]) {
    show(tochar("reshape domain error in rhoCBB"));
  }
  z = y[ 0 * shape(y)];
  return(z);
}

inline bool[.] rhoIBB(int x, bool y)
{ // [Scalar reshape scalar]
  z = genarray( [toi(x)],y);
  return(z);
}

inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[.] rhoIII(int x, int y)
{ // [Scalar reshape scalar]
  z = genarray( [toi(x)],y);
  return(z);
}

inline char[.] rhoICC(int x, char y)
{ // [Scalar reshape scalar]
  z = genarray( [toi(x)],y);
  return(z);
}

inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline int[.] rhoBII(bool x, int[*] y)
{ /* [Scalar reshape non-scalar] (to vector) */
 z = rhoIII( [toi(x)],y);
 return(z);
}


inline int[*] rhoCII(char[.] x, int[*] y)
{  /* Character-vector reshape anything. */
   /* Left argument must be empty vector! */
  if( 0 != shape(x)[[0]]) {
    show(tochar("reshape domain error in rhoCII"));
  }
  z = y[ 0 * shape(y)];
  return(z);
}

inline char[.] rhoBCC(bool x, char[*] y)
{ /* [Scalar reshape non-scalar] (to vector) */
 z = rhoICC( [toi(x)],y);
 return(z);
}


inline char[*] rhoCCC(char[.] x, char[*] y)
{  /* Character-vector reshape anything. */
   /* Left argument must be empty vector! */
  if( 0 != shape(x)[[0]]) {
    show(tochar("reshape domain error in rhoCCC"));
  }
  z = y[ 0 * shape(y)];
  return(z);
}

inline int[*] dropIII(int[.] x, int[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}


inline bool[.] takeBBB(bool x, bool y)
{ /* Scalar take scalar */
  return(take([toi(x)],[y]));
}

inline int[.] takeBII(bool x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}


inline int[.] takeIII(int x, int y)
{ /* Scalar take scalar */
  return(take([toi(x)],[y]));
}

inline char[.] takeICC(int x, char[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.] takeIII(int x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline bool[*] dropBBB(bool x, bool[*] y)
{ /* Scalar drop scalar */
  return(drop([toi(x)], [y]));
}

inline int[*] dropIII(int x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.,.] takeIII(int[.] x, int[.,.] y)
{ /* vector take matrix */
  return(take(toi(x),y));
}

inline int[.]  rhoXBI(bool[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[.] iotaXBI(bool y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.]  rhoXCI(char[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] comaBII(bool[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline int[.] comaIBI(int[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] utakIII(int[.] x, int y)
{ /* Non-floating Vector represent scalar */
  /* Taken from ISO Extended APL standard Draft N93.03, page 155 */
  wts = genarray(shape(x),toI(1));
  for(i=shape(x)[[0]]-2; i>=0; i--)
        wts[[i]] = wts[[i+1]] * toI(x[[i+1]]);
  z = genarray(shape(x),0);
  cy = toI(y);
  for(i=shape(x)[[0]]-1; i>=0; i--){
        z[[i]] = modIII(toI(x[[i]]),cy/wts[[i]]);
        /* Must use fuzz-less call to mod!! */
        /* Represent is NOT fuzzy (SAPL Ref Man p.6-47, 1991 */
        cy = cy - z[[i]] * wts[[i]];
  }
 return(z);
}



inline int dtakIII(int[.] x, int[.] y)
{ /* Vector basevalue vector */
  /* 3 cases - all give 22200:
   *    10 10 10 basevalue 200 200 200
   *    10 10 10 basevalue 200
   *    (,10) basevalue 200 200 200
   */
 ycols = (shape(y))[[0]];
 if (1 == ycols){       /* Maybe extend y */
        ycols = shape(x)[[0]];
        y = genarray([ycols],y[[0]]);
 }
 if (1 == shape(x)[[0]]){       /* Maybe extend x */
        x = genarray([ycols], x[[0]]);
 }
 weights = genarray([ycols], toI(1));
 for (i=ycols-2; i>=0; i--)
        weights[[i]]= weights[[i+1]]*toI(x[[i+1]]);
 z = with {
        ([0] <= iv < [ycols])
                : weights[iv] * toI(y[iv]);
        } : fold(+, 0);
 return(z);
}

inline bool sameBIB(bool[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameBBB(bool[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqBBB(toB( x),  toB( y)))));
  return(z);
}



inline bool sameIBB(int[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameCCB(char[+] x, char[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqCCB(toC( x),  toC( y)))));
  return(z);
}



inline bool[*] indr(bool[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline char[*] indr(char[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline bool[+] inds0(bool[+] X, int  I0, bool Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = BtoB(X);
 Y = Yin;

 
 z[[I0]]=BtoB((Y));

 
 return(z);
}



inline int[+] inds0(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline char[+] inds0(char[+] X, int  I0, char Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = CtoC(X);
 Y = Yin;

 
 z[[I0]]=CtoC((Y));

 
 return(z);
}



inline bool[.] bslBBB(bool x, bool[.] y)
{/* Scalar expand scalar (first or last axis) */
 /* In practice, one-element left arguments to expand
  * are nearly useless...
  */
  z = (true == toB(x))  ?  y  :  [false];
  return(z);
}


inline bool[.] slBBB(bool x, bool y)
{ /* Scalar replicate scalar */
 z = with {
        (. <= iv <= .)
                : y;
        } : genarray([toi(x)]);
 return(z);
}

inline int[.] slBII(bool x, int[.] y)
{ /* Scalar replicate vector */
 cell = genarray([toi(x)], 0);
 z = with {
        (. <= iv <= .)
                : genarray([toi(x)], y[iv]);
        } : genarray(shape(y), cell);
 return(comaXII(z));
}


inline int[.] slBII(bool x, int y)
{ /* Scalar replicate scalar */
 z = with {
        (. <= iv <= .)
                : y;
        } : genarray([toi(x)]);
 return(z);
}

inline char[.] slBCC(bool x, char[.] y)
{ /* Scalar replicate vector */
 cell = genarray([toi(x)], ' ');
 z = with {
        (. <= iv <= .)
                : genarray([toi(x)], y[iv]);
        } : genarray(shape(y), cell);
 return(comaXCC(z));
}


inline int[+] slBII(bool x, int[+] y)
{ /* Boolean scalar compress non-scalar */
  sy = shape(y);
  z = (true == toB(x)) ?  y  : genarray(drop([-1],sy)++[0],0);
  return(z);
}

inline int[.] bslBII(bool x, int[.] y)
{/* Scalar expand scalar (first or last axis) */
 /* In practice, one-element left arguments to expand
  * are nearly useless...
  */
  z = (true == toB(x))  ?  y  :  [0];
  return(z);
}


inline char[.] bslBCC(bool x, char[.] y)
{/* Scalar expand scalar (first or last axis) */
 /* In practice, one-element left arguments to expand
  * are nearly useless...
  */
  z = (true == toB(x))  ?  y  :  [' '];
  return(z);
}


inline int mpyslXIIQUICKSTOP(int[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : ItoI(y[iv]);
        } : foldfix( mpyIII, ItoI(1), ItoI(0));
  return(z);
}


inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int modXII(int y)
{ return(abs(toI(y)));
}

inline int barXII(int y)
{ return(-y);
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline bool ltIBB(int x, bool y)
{ /* A<B on Boot/Int/Char */
  return(ItoI(x)<BtoI(y));
}

inline int mpyBII(bool x, int y)
{ return(BtoI(x)*ItoI(y));
}

inline int maxIII(int x, int y)
{ /* x max y */
 return (max(ItoI(x),ItoI(y)));
}

inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline int minIII(int x, int y)
{ /* x min y */
 return (min(ItoI(x),ItoI(y)));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline int modIII(int x, int y)
{ /* SxS residue (aka modulo) */
  /* (x residue y) <-->   y-x times floor y divide x + 0 = x  */
  /* See model residueI in workspace UTDScalarI.dws */
  x = ItoI(x);
  y = ItoI(y);
  if( 0 != x) {
    q = y / x;
    z = y - ( x * q);
  } else {
    z = y;
  }

  if( z != 0) {
    if( mpyXII( x) != mpyXII( y)) {
      z = z + x;
    }
  }
 return(z);
}


inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline int[+] mpyBII(bool[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : mpyBII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] maxIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : maxIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] maxIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : maxIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] barIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : barIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] barIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] minIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : minIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] minIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : minIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqCCB(char[+] x, char[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqCCB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] comaXCC(char[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[*] indrfr(int fr, bool[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline bool[*] indrfr0(bool[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, false);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline bool[*] indrfr(int fr, bool[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,false);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int mpyXII(int y)
{ /* signum int/double */
   if( toI(0) == y) {
    z = 0;
  } else {
    if( toI(0) < y) {
      z = 1;
    } else {
      z = -1;
    }
  }
  return(z);
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool eqBBB(bool x, bool y)
{ /* A=B on non-doubles */
 return(BtoB(x) == BtoB(y));
}

inline bool eqCCB(char x, char y)
{ /* A=B on non-doubles */
 return(CtoC(x) == CtoC(y));
}

inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
     ( . <= iv <= .) {
              yel = toB(y[iv]);
                    } : eqBBB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqBBB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
     ( . <= iv <= .) {
              yel = toC(y[iv]);
                    } : eqCCB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqCCB(char[+] x, char y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqCCB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline bool FillXBB(bool[.] y )
{ 
/*
 ?
*/
A_17=rhoBBB(false,y);
 A_18=bslBBB(false,A_17);
 A_19=rhoCBB([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline bool[.] DropBBB(bool x, bool y,int QUADio)
{ 
/*
 ?
*/
A_54=slBBB(true,y);
 y_0=( A_54);
 A_56=comaXBB( x);
 x_0=( A_56);
 A_58=rhoXBI( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXBI( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaBII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf scalar(s)
A_68=mpyBII(A_67,zr_0);
 // dsf scalar(s)
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf scalar(s)
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf scalar(s)
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillXBB( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIBB(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toB(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf scalar(s)
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXBB( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIBB(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline bool[.] TakeBBB(bool x, bool y,int QUADio)
{ 
/*
 ?
*/
A_57=slBBB(true,y);
 y_0=( A_57);
 A_59=comaXBB( x);
 x_0=( A_59);
 A_61=rhoXBI( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXBI( y_0);
 A_66=rhoXBI( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaBII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf scalar(s)
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf scalar(s)
A_74=mpyBII(A_73,A_71);
 // dsf scalar(s)
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf scalar(s)
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf scalar(s)
A_81=mpyBII(A_80,A_78);
 // dsf scalar(s)
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf scalar(s)
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillXBB( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIBB(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toB(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf scalar(s)
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXBB( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf scalar(s)
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIBB(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline bool[.] utmainXXB(int QUADio)
{ 
/*
 ?
*/
S0_0=( false);
 S1_0=( true);
 A_195=comaXBB( true);
 V1_0=( A_195);
 A_197=comaXBB( false);
 V0_0=( A_197);
 A_200=iotaXBI( false,QUADio);
 Vn_0=( A_200);
 V10100_0=( [true,false,true,false,false]);
 V101011_0=( [true,false,true,false,true,true]);
 A_205=iotaXII( 24,QUADio);
 A_206=rhoIII([2, 3, 4],A_205);
 M234_0=( A_206);
 A_209=iotaXBI( false,QUADio);
 A_210=takeBBB(false,true);
 A_212=sameBIB(A_210,A_209);
 r_0=( A_212);
 A_215=TakeBBB(false,true,QUADio);
 A_216=takeBBB(false,true);
 A_218=sameBBB(A_216,A_215);
 r_1=( A_218);
 A_220=comaXBB( false);
 A_222=iotaXBI( false,QUADio);
 A_223=takeBII(true,A_222);
 A_225=sameIBB(A_223,A_220);
 A_226=comaBBB(r_1,A_225);
 r_2=( A_226);
 A_229=iotaXBI( false,QUADio);
 A_231=TakeCLONE5BII(true,A_229,QUADio);
 A_233=iotaXBI( false,QUADio);
 A_234=takeBII(true,A_233);
 A_236=sameIIB(A_234,A_231);
 A_237=comaBBB(r_2,A_236);
 r_3=( A_237);
 A_239=takeIII(3,2);
 A_241=sameIIB(A_239,[2, 0, 0]);
 A_242=comaBBB(r_3,A_241);
 r_4=( A_242);
 A_245=TakeCLONE6III(3,2,QUADio);
 A_246=takeIII(3,2);
 A_248=sameIIB(A_246,A_245);
 A_249=comaBBB(r_4,A_248);
 r_5=( A_249);
 A_251=takeIII(-3,5);
 A_253=sameIIB(A_251,[0, 0, 5]);
 A_254=comaBBB(r_5,A_253);
 r_6=( A_254);
 A_257=TakeCLONE7III(-3,5,QUADio);
 A_258=takeIII(-3,5);
 A_260=sameIIB(A_258,A_257);
 A_261=comaBBB(r_6,A_260);
 r_7=( A_261);
 A_263=takeICC(4,['x','y']);
 A_265=sameCCB(A_263,['x','y',' ',' ']);
 A_266=comaBBB(r_7,A_265);
 r_8=( A_266);
 A_269=TakeCLONE8ICC(4,['x','y'],QUADio);
 A_270=takeICC(4,['x','y']);
 A_272=sameCCB(A_270,A_269);
 A_273=comaBBB(r_8,A_272);
 r_9=( A_273);
 A_275=takeICC(-4,['x','y']);
 A_277=sameCCB(A_275,[' ',' ','x','y']);
 A_278=comaBBB(r_9,A_277);
 r_10=( A_278);
 A_281=TakeCLONE9ICC(-4,['x','y'],QUADio);
 A_282=takeICC(-4,['x','y']);
 A_284=sameCCB(A_282,A_281);
 A_285=comaBBB(r_10,A_284);
 r_11=( A_285);
 A_287=takeICC(3,['a','b','c','d']);
 A_289=sameCCB(A_287,['a','b','c']);
 A_290=comaBBB(r_11,A_289);
 r_12=( A_290);
 A_293=TakeCLONE10ICC(3,['a','b','c','d'],QUADio);
 A_294=takeICC(3,['a','b','c','d']);
 A_296=sameCCB(A_294,A_293);
 A_297=comaBBB(r_12,A_296);
 r_13=( A_297);
 A_299=takeIII(-3,[1, 3, 8, 9]);
 A_301=sameIIB(A_299,[3, 8, 9]);
 A_302=comaBBB(r_13,A_301);
 r_14=( A_302);
 A_305=TakeCLONE11III(-3,[1, 3, 8, 9],QUADio);
 A_306=takeIII(-3,[1, 3, 8, 9]);
 A_308=sameIIB(A_306,A_305);
 A_309=comaBBB(r_14,A_308);
 r_15=( A_309);
 A_311=comaXBB( false);
 A_312=dropBBB(false,false);
 A_314=sameBBB(A_312,A_311);
 A_315=comaBBB(r_15,A_314);
 r_16=( A_315);
 A_317=comaXBB( false);
 A_319=DropBBB(false,false,QUADio);
 A_321=sameBBB(A_319,A_317);
 A_322=comaBBB(r_16,A_321);
 r_17=( A_322);
 A_325=iotaXII( 4,QUADio);
 A_326=dropIII(2,A_325);
 A_328=sameIIB(A_326,[2, 3]);
 A_329=comaBBB(r_17,A_328);
 r_18=( A_329);
 A_332=iotaXII( 4,QUADio);
 A_334=DropCLONE12III(2,A_332,QUADio);
 A_336=sameIIB(A_334,[2, 3]);
 A_337=comaBBB(r_18,A_336);
 r_19=( A_337);
 A_340=iotaXII( 4,QUADio);
 A_341=dropIII(-1,A_340);
 A_343=sameIIB(A_341,[0, 1, 2]);
 A_344=comaBBB(r_19,A_343);
 r_20=( A_344);
 A_347=iotaXII( 4,QUADio);
 A_349=DropCLONE13III(-1,A_347,QUADio);
 A_351=sameIIB(A_349,[0, 1, 2]);
 A_352=comaBBB(r_20,A_351);
 r_21=( A_352);
 A_355=iotaXBI( false,QUADio);
 A_357=iotaXII( 5,QUADio);
 A_358=dropIII(6,A_357);
 A_360=sameIIB(A_358,A_355);
 A_361=comaBBB(r_21,A_360);
 r_22=( A_361);
 A_364=iotaXBI( false,QUADio);
 A_366=iotaXII( 5,QUADio);
 A_368=DropCLONE14III(6,A_366,QUADio);
 A_370=sameIIB(A_368,A_364);
 A_371=comaBBB(r_22,A_370);
 r_23=( A_371);
 A_374=iotaXBI( false,QUADio);
 A_376=iotaXII( 5,QUADio);
 A_377=dropIII(-6,A_376);
 A_379=sameIIB(A_377,A_374);
 A_380=comaBBB(r_23,A_379);
 r_24=( A_380);
 A_383=iotaXBI( false,QUADio);
 A_385=iotaXII( 5,QUADio);
 A_386=dropIII(-6,A_385);
 A_388=sameIIB(A_386,A_383);
 A_389=comaBBB(r_24,A_388);
 r_25=( A_389);
 A_391=comaIBI([0, 0, 2, 3],[false,false,false,false]);
A_392=comaBII([false,false,false,true],A_391);
 A_393=rhoIII([3, 4],A_392);
 A_395=iotaXII( 4,QUADio);
 A_396=rhoIII([2, 2],A_395);
 A_397=takeIII([3, -4],A_396);
 A_399=sameIIB(A_397,A_393);
 A_400=comaBBB(r_25,A_399);
 r_26=( A_400);
 A_403=iotaXII( 4,QUADio);
 A_404=rhoIII([2, 2],A_403);
 A_406=TakeCLONE15III([3, -4],A_404,QUADio);
 A_408=iotaXII( 4,QUADio);
 A_409=rhoIII([2, 2],A_408);
 A_410=takeIII([3, -4],A_409);
 A_412=sameIIB(A_410,A_406);
 A_413=comaBBB(r_26,A_412);
 r_27=( A_413);
 A_416=iotaXII( 4,QUADio);
 A_417=rhoIII([2, 2],A_416);
 A_419=TakeCLONE16III([3, 4],A_417,QUADio);
 A_421=iotaXII( 4,QUADio);
 A_422=rhoIII([2, 2],A_421);
 A_423=takeIII([3, 4],A_422);
 A_425=sameIIB(A_423,A_419);
 A_426=comaBBB(r_27,A_425);
 r_28=( A_426);
 A_429=iotaXII( 4,QUADio);
 A_430=rhoIII([2, 2],A_429);
 A_432=TakeCLONE17III([-3, 4],A_430,QUADio);
 A_434=iotaXII( 4,QUADio);
 A_435=rhoIII([2, 2],A_434);
 A_436=takeIII([-3, 4],A_435);
 A_438=sameIIB(A_436,A_432);
 A_439=comaBBB(r_28,A_438);
 r_29=( A_439);
 A_442=iotaXII( 4,QUADio);
 A_443=rhoIII([2, 2],A_442);
 A_445=TakeCLONE18III([-3, -4],A_443,QUADio);
 A_447=iotaXII( 4,QUADio);
 A_448=rhoIII([2, 2],A_447);
 A_449=takeIII([-3, -4],A_448);
 A_451=sameIIB(A_449,A_445);
 A_452=comaBBB(r_29,A_451);
 r_30=( A_452);
 A_455=iotaXII( 20,QUADio);
 A_456=rhoIII([4, 5],A_455);
 A_458=TakeCLONE19III([2, 3],A_456,QUADio);
 A_460=iotaXII( 20,QUADio);
 A_461=rhoIII([4, 5],A_460);
 A_462=takeIII([2, 3],A_461);
 A_464=sameIIB(A_462,A_458);
 A_465=comaBBB(r_30,A_464);
 r_31=( A_465);
 A_468=iotaXII( 20,QUADio);
 A_469=rhoIII([4, 5],A_468);
 A_471=TakeCLONE20III([2, -3],A_469,QUADio);
 A_473=iotaXII( 20,QUADio);
 A_474=rhoIII([4, 5],A_473);
 A_475=takeIII([2, -3],A_474);
 A_477=sameIIB(A_475,A_471);
 A_478=comaBBB(r_31,A_477);
 r_32=( A_478);
 A_481=iotaXII( 20,QUADio);
 A_482=rhoIII([4, 5],A_481);
 A_484=TakeCLONE21III([-2, 3],A_482,QUADio);
 A_486=iotaXII( 20,QUADio);
 A_487=rhoIII([4, 5],A_486);
 A_488=takeIII([-2, 3],A_487);
 A_490=sameIIB(A_488,A_484);
 A_491=comaBBB(r_32,A_490);
 r_33=( A_491);
 A_494=iotaXII( 20,QUADio);
 A_495=rhoIII([4, 5],A_494);
 A_497=TakeCLONE22III([-2, -3],A_495,QUADio);
 A_499=iotaXII( 20,QUADio);
 A_500=rhoIII([4, 5],A_499);
 A_501=takeIII([-2, -3],A_500);
 A_503=sameIIB(A_501,A_497);
 A_504=comaBBB(r_33,A_503);
 r_34=( A_504);
 A_507=iotaXII( 12,QUADio);
 A_508=rhoIII([3, 4],A_507);
 A_510=DropCLONE23III([2, 2],A_508,QUADio);
 A_512=iotaXII( 12,QUADio);
 A_513=rhoIII([3, 4],A_512);
 A_514=dropIII([2, 2],A_513);
 A_516=sameIIB(A_514,A_510);
 A_517=comaBBB(r_34,A_516);
 r_35=( A_517);
 A_520=iotaXII( 12,QUADio);
 A_521=rhoIII([3, 4],A_520);
 A_523=DropCLONE24III([2, -2],A_521,QUADio);
 A_525=iotaXII( 12,QUADio);
 A_526=rhoIII([3, 4],A_525);
 A_527=dropIII([2, -2],A_526);
 A_529=sameIIB(A_527,A_523);
 A_530=comaBBB(r_35,A_529);
 r_36=( A_530);
 A_533=iotaXII( 12,QUADio);
 A_534=rhoIII([3, 4],A_533);
 A_536=DropCLONE25III([-2, 2],A_534,QUADio);
 A_538=iotaXII( 12,QUADio);
 A_539=rhoIII([3, 4],A_538);
 A_540=dropIII([-2, 2],A_539);
 A_542=sameIIB(A_540,A_536);
 A_543=comaBBB(r_36,A_542);
 r_37=( A_543);
 A_546=iotaXII( 12,QUADio);
 A_547=rhoIII([3, 4],A_546);
 A_549=DropCLONE26III([-2, -2],A_547,QUADio);
 A_551=iotaXII( 12,QUADio);
 A_552=rhoIII([3, 4],A_551);
 A_553=dropIII([-2, -2],A_552);
 A_555=sameIIB(A_553,A_549);
 A_556=comaBBB(r_37,A_555);
 r_38=( A_556);
 A_559=iotaXII( 12,QUADio);
 A_560=rhoIII([3, 4],A_559);
 A_562=DropCLONE27III(2,A_560,QUADio);
 A_564=iotaXII( 12,QUADio);
 A_565=rhoIII([3, 4],A_564);
 A_566=dropIII(2,A_565);
 A_568=sameIIB(A_566,A_562);
 A_569=comaBBB(r_38,A_568);
 r_39=( A_569);
 A_572=iotaXII( 12,QUADio);
 A_573=rhoIII([3, 4],A_572);
 A_575=DropCLONE28III(-2,A_573,QUADio);
 A_577=iotaXII( 12,QUADio);
 A_578=rhoIII([3, 4],A_577);
 A_579=dropIII(-2,A_578);
 A_581=sameIIB(A_579,A_575);
 A_582=comaBBB(r_39,A_581);
 r_40=( A_582);
 A_585=iotaXII( 12,QUADio);
 A_586=rhoIII([3, 4],A_585);
 A_588=DropCLONE29III([3, 2],A_586,QUADio);
 A_590=iotaXII( 12,QUADio);
 A_591=rhoIII([3, 4],A_590);
 A_592=dropIII([3, 2],A_591);
 A_594=sameIIB(A_592,A_588);
 A_595=comaBBB(r_40,A_594);
 r_41=( A_595);
 A_598=iotaXII( 12,QUADio);
 A_599=rhoIII([3, 4],A_598);
 A_601=DropCLONE30III([2, 4],A_599,QUADio);
 A_603=iotaXII( 12,QUADio);
 A_604=rhoIII([3, 4],A_603);
 A_605=dropIII([2, 5],A_604);
 A_607=sameIIB(A_605,A_601);
 A_608=comaBBB(r_41,A_607);
 r_42=( A_608);
 A_611=iotaXII( 12,QUADio);
 A_612=rhoIII([3, 4],A_611);
 A_614=DropCLONE31III([-3, 2],A_612,QUADio);
 A_616=iotaXII( 12,QUADio);
 A_617=rhoIII([3, 4],A_616);
 A_618=dropIII([-3, 2],A_617);
 A_620=sameIIB(A_618,A_614);
 A_621=comaBBB(r_42,A_620);
 r_43=( A_621);
 A_624=iotaXII( 12,QUADio);
 A_625=rhoIII([3, 4],A_624);
 A_627=DropCLONE32III([2, -5],A_625,QUADio);
 A_629=iotaXII( 12,QUADio);
 A_630=rhoIII([3, 4],A_629);
 A_631=dropIII([2, -5],A_630);
 A_633=sameIIB(A_631,A_627);
 A_634=comaBBB(r_43,A_633);
 r_44=( A_634);
 return(r_44);
}

inline int UTTakeDrop_testXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 A_37=utmainXXB( QUADio_0);
 r_0=( A_37);
 A_41=quadXBB( r_0,QUADpp_0,QUADpw_0);
 A_42=andslXBBQUICKSTOP( r_0);
 // dsf scalar(s)
A_46=barBBI(true,A_42);
r_1=( A_46);
 A_50=quadXII( A_46,QUADpp_0,QUADpw_0);
 return(r_1);
}

inline int[.] TakeCLONE5BII(bool x, int[.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXBB( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXBI( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaBII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf scalar(s)
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf scalar(s)
A_74=mpyBII(A_73,A_71);
 // dsf scalar(s)
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf scalar(s)
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf scalar(s)
A_81=mpyBII(A_80,A_78);
 // dsf scalar(s)
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf scalar(s)
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE33XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf scalar(s)
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf scalar(s)
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.] TakeCLONE6III(int x, int y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf scalar(s)
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf scalar(s)
A_74=mpyBII(A_73,A_71);
 // dsf scalar(s)
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf scalar(s)
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf scalar(s)
A_81=mpyBII(A_80,A_78);
 // dsf scalar(s)
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf scalar(s)
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE34XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf scalar(s)
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf scalar(s)
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.] TakeCLONE7III(int x, int y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf scalar(s)
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf scalar(s)
A_74=mpyBII(A_73,A_71);
 // dsf scalar(s)
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf scalar(s)
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf scalar(s)
A_81=mpyBII(A_80,A_78);
 // dsf scalar(s)
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf scalar(s)
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE35XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf scalar(s)
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf scalar(s)
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline char[.] TakeCLONE8ICC(int x, char[.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBCC(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXCI( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXCI( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf scalar(s)
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf scalar(s)
A_74=mpyBII(A_73,A_71);
 // dsf scalar(s)
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf scalar(s)
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf scalar(s)
A_81=mpyBII(A_80,A_78);
 // dsf scalar(s)
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf scalar(s)
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE36XCC( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoICC(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toC(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf scalar(s)
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXCC( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf scalar(s)
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoICC(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline char[.] TakeCLONE9ICC(int x, char[.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBCC(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXCI( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXCI( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf scalar(s)
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf scalar(s)
A_74=mpyBII(A_73,A_71);
 // dsf scalar(s)
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf scalar(s)
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf scalar(s)
A_81=mpyBII(A_80,A_78);
 // dsf scalar(s)
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf scalar(s)
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE37XCC( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoICC(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toC(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf scalar(s)
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXCC( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf scalar(s)
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoICC(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline char[.] TakeCLONE10ICC(int x, char[.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBCC(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXCI( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXCI( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf scalar(s)
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf scalar(s)
A_74=mpyBII(A_73,A_71);
 // dsf scalar(s)
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf scalar(s)
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf scalar(s)
A_81=mpyBII(A_80,A_78);
 // dsf scalar(s)
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf scalar(s)
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE38XCC( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoICC(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toC(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf scalar(s)
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXCC( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf scalar(s)
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoICC(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.] TakeCLONE11III(int x, int[.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf scalar(s)
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf scalar(s)
A_74=mpyBII(A_73,A_71);
 // dsf scalar(s)
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf scalar(s)
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf scalar(s)
A_81=mpyBII(A_80,A_78);
 // dsf scalar(s)
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf scalar(s)
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE39XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf scalar(s)
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf scalar(s)
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.] DropCLONE12III(int x, int[.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf scalar(s)
A_68=mpyBII(A_67,zr_0);
 // dsf scalar(s)
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf scalar(s)
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf scalar(s)
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE40XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf scalar(s)
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.] DropCLONE13III(int x, int[.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf scalar(s)
A_68=mpyBII(A_67,zr_0);
 // dsf scalar(s)
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf scalar(s)
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf scalar(s)
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE41XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf scalar(s)
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.] DropCLONE14III(int x, int[.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf scalar(s)
A_68=mpyBII(A_67,zr_0);
 // dsf scalar(s)
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf scalar(s)
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf scalar(s)
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE42XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf scalar(s)
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.,.] TakeCLONE15III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf Check needed
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf Check needed
A_74=mpyBII(A_73,A_71);
 // dsf Check needed
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf Check needed
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf Check needed
A_81=mpyBII(A_80,A_78);
 // dsf Check needed
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf Check needed
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE43XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf Check needed
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf Check needed
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.,.] TakeCLONE16III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf Check needed
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf Check needed
A_74=mpyBII(A_73,A_71);
 // dsf Check needed
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf Check needed
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf Check needed
A_81=mpyBII(A_80,A_78);
 // dsf Check needed
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf Check needed
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE44XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf Check needed
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf Check needed
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.,.] TakeCLONE17III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf Check needed
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf Check needed
A_74=mpyBII(A_73,A_71);
 // dsf Check needed
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf Check needed
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf Check needed
A_81=mpyBII(A_80,A_78);
 // dsf Check needed
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf Check needed
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE45XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf Check needed
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf Check needed
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.,.] TakeCLONE18III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf Check needed
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf Check needed
A_74=mpyBII(A_73,A_71);
 // dsf Check needed
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf Check needed
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf Check needed
A_81=mpyBII(A_80,A_78);
 // dsf Check needed
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf Check needed
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE46XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf Check needed
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf Check needed
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.,.] TakeCLONE19III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf Check needed
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf Check needed
A_74=mpyBII(A_73,A_71);
 // dsf Check needed
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf Check needed
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf Check needed
A_81=mpyBII(A_80,A_78);
 // dsf Check needed
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf Check needed
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE47XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf Check needed
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf Check needed
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.,.] TakeCLONE20III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf Check needed
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf Check needed
A_74=mpyBII(A_73,A_71);
 // dsf Check needed
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf Check needed
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf Check needed
A_81=mpyBII(A_80,A_78);
 // dsf Check needed
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf Check needed
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE48XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf Check needed
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf Check needed
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.,.] TakeCLONE21III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf Check needed
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf Check needed
A_74=mpyBII(A_73,A_71);
 // dsf Check needed
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf Check needed
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf Check needed
A_81=mpyBII(A_80,A_78);
 // dsf Check needed
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf Check needed
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE49XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf Check needed
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf Check needed
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.,.] TakeCLONE22III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_57=slBII(true,y);
 y_0=( A_57);
 A_59=comaXII( x);
 x_0=( A_59);
 A_61=rhoXII( y_0);
 shpy_0=( A_61);
 // dsf scalar(s)
A_63=mpyBII(false,shpy_0);
 zr_0=( A_63);
 A_65=rhoXII( y_0);
 A_66=rhoXII( x_0);
 A_67=dropIII(A_66,A_65);
 A_68=comaIII(x_0,A_67);
 vext_0=( A_68);
 A_70=barXII( vext_0);
 // dsf Check needed
A_71=barIII(A_70,shpy_0);
 // dsf scalar(s)
A_73=ltIBB(vext_0,false);
 // dsf Check needed
A_74=mpyBII(A_73,A_71);
 // dsf Check needed
A_75=maxIII(zr_0,A_74);
 lb_0=( A_75);
 // dsf Check needed
A_77=plusIII(shpy_0,vext_0);
 // dsf scalar(s)
A_78=maxBII(false,A_77);
 // dsf scalar(s)
A_80=ltIBB(vext_0,false);
 // dsf Check needed
A_81=mpyBII(A_80,A_78);
 // dsf Check needed
A_82=maxIII(zr_0,A_81);
 ylb_0=( A_82);
 A_84=modXII( vext_0);
 shpz_0=( A_84);
 // dsf Check needed
A_86=minIII(shpz_0,shpy_0);
 ub_0=( A_86);
 A_88=FillCLONE50XII( y_0);
 A_89=mpyslXIIQUICKSTOP( shpz_0);
 A_93=rhoIII(A_89,A_88);
 r_0=( A_93);
 A_95=mpyslXIIQUICKSTOP( ub_0);
 A_100=iotaXII( A_95,QUADio);
 A_CTR101_= 0;
A_CTR101z_ = (shape(A_100)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR101_ <= A_CTR101z_; A_CTR101_++){
i_0 = A_100[[A_CTR101_]];
 A_103=utakIII(ub_0,i_0);
 iv_0=( A_103);
 // dsf Check needed
A_105=plusIII(ylb_0,iv_0);
 A_106=dtakIII(shpy_0,A_105);
 A_108=comaXII( y_0);
 A_107= ABC(toi(A_106)-QUADio,shape(A_108)[0]);
A_110=A_108[[A_107]];
 el_0=( A_110);
 // dsf Check needed
A_112=plusIII(lb_0,iv_0);
 A_113=dtakIII(shpz_0,A_112);
 A_114= ABC(toi(A_113)-QUADio,shape(r_2)[0]);
A_116=inds0(r_2,A_114,el_0);
 r_2=( A_116);
 }
 A_119=rhoIII(shpz_0,r_2);
 r_3=( A_119);
 return(r_3);
}

inline int[.,.] DropCLONE23III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf Check needed
A_68=mpyBII(A_67,zr_0);
 // dsf Check needed
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf Check needed
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf Check needed
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE51XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf Check needed
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.,.] DropCLONE24III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf Check needed
A_68=mpyBII(A_67,zr_0);
 // dsf Check needed
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf Check needed
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf Check needed
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE52XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf Check needed
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.,.] DropCLONE25III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf Check needed
A_68=mpyBII(A_67,zr_0);
 // dsf Check needed
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf Check needed
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf Check needed
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE53XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf Check needed
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.,.] DropCLONE26III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf Check needed
A_68=mpyBII(A_67,zr_0);
 // dsf Check needed
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf Check needed
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf Check needed
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE54XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf Check needed
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.,.] DropCLONE27III(int x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf Check needed
A_68=mpyBII(A_67,zr_0);
 // dsf Check needed
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf Check needed
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf Check needed
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE55XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf Check needed
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.,.] DropCLONE28III(int x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf Check needed
A_68=mpyBII(A_67,zr_0);
 // dsf Check needed
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf Check needed
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf Check needed
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE56XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf Check needed
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.,.] DropCLONE29III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf Check needed
A_68=mpyBII(A_67,zr_0);
 // dsf Check needed
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf Check needed
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf Check needed
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE57XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf Check needed
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.,.] DropCLONE30III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf Check needed
A_68=mpyBII(A_67,zr_0);
 // dsf Check needed
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf Check needed
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf Check needed
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE58XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf Check needed
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.,.] DropCLONE31III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf Check needed
A_68=mpyBII(A_67,zr_0);
 // dsf Check needed
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf Check needed
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf Check needed
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE59XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf Check needed
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int[.,.] DropCLONE32III(int[.] x, int[.,.] y,int QUADio)
{ 
/*
 ?
*/
A_54=slBII(true,y);
 y_0=( A_54);
 A_56=comaXII( x);
 x_0=( A_56);
 A_58=rhoXII( y_0);
 shpy_0=( A_58);
 // dsf scalar(s)
A_60=mpyBII(false,shpy_0);
 zr_0=( A_60);
 A_62=rhoXII( x_0);
 A_63=dropIII(A_62,zr_0);
 A_64=comaIII(x_0,A_63);
 vext_0=( A_64);
 // dsf scalar(s)
A_67=ltIBB(vext_0,false);
 // dsf Check needed
A_68=mpyBII(A_67,zr_0);
 // dsf Check needed
A_69=maxIII(vext_0,A_68);
 ylb_0=( A_69);
 A_71=modXII( vext_0);
 // dsf Check needed
A_72=barIII(shpy_0,A_71);
 // dsf scalar(s)
A_73=maxBII(false,A_72);
 shpz_0=( A_73);
 // dsf Check needed
A_75=minIII(shpz_0,shpy_0);
 ub_0=( A_75);
 A_77=FillCLONE60XII( y_0);
 A_78=mpyslXIIQUICKSTOP( shpz_0);
 A_82=rhoIII(A_78,A_77);
 r_0=( A_82);
 A_84=mpyslXIIQUICKSTOP( ub_0);
 A_89=iotaXII( A_84,QUADio);
 A_CTR90_= 0;
A_CTR90z_ = (shape(A_89)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR90_ <= A_CTR90z_; A_CTR90_++){
i_0 = A_89[[A_CTR90_]];
 A_92=utakIII(ub_0,i_0);
 iv_0=( A_92);
 // dsf Check needed
A_94=plusIII(ylb_0,iv_0);
 A_95=dtakIII(shpy_0,A_94);
 A_97=comaXII( y_0);
 A_96= ABC(toi(A_95)-QUADio,shape(A_97)[0]);
A_99=A_97[[A_96]];
 el_0=( A_99);
 A_101=dtakIII(shpz_0,iv_0);
 A_102= ABC(toi(A_101)-QUADio,shape(r_2)[0]);
A_104=inds0(r_2,A_102,el_0);
 r_2=( A_104);
 }
 A_107=rhoIII(shpz_0,r_2);
 r_3=( A_107);
 return(r_3);
}

inline int FillCLONE33XII(int[.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE34XII(int[.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE35XII(int[.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline char FillCLONE36XCC(char[.] y )
{ 
/*
 ?
*/
A_17=rhoBCC(false,y);
 A_18=bslBCC(false,A_17);
 A_19=rhoCCC([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline char FillCLONE37XCC(char[.] y )
{ 
/*
 ?
*/
A_17=rhoBCC(false,y);
 A_18=bslBCC(false,A_17);
 A_19=rhoCCC([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline char FillCLONE38XCC(char[.] y )
{ 
/*
 ?
*/
A_17=rhoBCC(false,y);
 A_18=bslBCC(false,A_17);
 A_19=rhoCCC([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE39XII(int[.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE40XII(int[.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE41XII(int[.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE42XII(int[.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE43XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE44XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE45XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE46XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE47XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE48XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE49XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE50XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE51XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE52XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE53XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE54XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE55XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE56XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE57XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE58XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE59XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}

inline int FillCLONE60XII(int[.,.] y )
{ 
/*
 ?
*/
A_17=rhoBII(false,y);
 A_18=bslBII(false,A_17);
 A_19=rhoCII([:char],A_18);
r_0=( A_19);
 return(r_0);
}


module UTIndexRef;

use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// Compiled by APEX Version: wss/apex.20210504 2021-05-04 14:44:31.836
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


export all;

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] mpyIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : mpyIII(xel,yel);
	} : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : plusIII(xel,yel);
	} : genarray(shape(y), 0);
  return(z);
}


inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[*] dropIII(int[.] x, int[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameIIB(int x, int y)
{ /* Scalar match scalar */
  z = eqIIB(toI(x), toI(y));
 return(z);
}



inline char[*] indr(char[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[*] indr(int[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}




inline int[*] indr(int[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),0);
 z = with {
        (. <= iv <= .)
                : X[[I[iv]]];
        } : genarray(shape(I), defcell);
 return(z);
}





inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[*] jotdotplusIII(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0);
 z = with {
        (. <= iv <= .) {
         xitem = toI(x[iv]);
        } : plusIII(xitem, toI(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : eqIIB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqIIB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] okCBC(char[.] msg, bool k ,int QUADio)
{ 
/*
 ?
*/
A_21=rhoICC([2, 3],['U','G','H','O','K',' ']);
 A_20= ABC(toi(k)-QUADio,shape(A_21)[0]);
A_23=A_21[[A_20]];
r_0=( A_23);
 return(r_0);
}

inline bool[.] testirXXB(int QUADio)
{ 
/*
 ?
*/
A_133=iotaXII( 6,QUADio);
 A_134=rhoIII([2, 3],A_133);
 M2_0=( A_134);
 A_139=M2_0;
 A_141=sameIIB(M2_0,A_139);
 k_0=( A_141);
 r_0=( A_141);
 A_145=okCBC(['Z','[',';',']',':',' '],k_0,QUADio);
 A_147=iotaXII( 4,QUADio);
 v_0=( A_147);
 A_151=v_0;
 A_153=sameIIB(v_0,A_151);
 k_1=( A_153);
 A_155=comaBBB(r_0,A_153);
 r_1=( A_155);
 A_158=okCBC(['V','[',']',':',' '],k_1,QUADio);
 A_159= ABC(toi([3, 2, 1, 0])-QUADio,shape(v_0)[0]);
A_161=indr(v_0,A_159);
 A_162=rotrXII( v_0);
 A_164=sameIIB(A_162,A_161);
 k_2=( A_164);
 A_166=comaBBB(r_1,A_164);
 r_2=( A_166);
 A_169=okCBC(['V','[','3',' ','2',' ','1',' ','0',']',':',' '],k_2,QUADio);
 A_173=M2_0;
 A_175=sameIIB(M2_0,A_173);
 k_3=( A_175);
 A_177=comaBBB(r_2,A_175);
 r_3=( A_177);
 A_180=okCBC(['M','2','[',';',']',':'],k_3,QUADio);
 A_182= ABC(toi(false)-QUADio,shape(M2_0)[0]);
A_184=M2_0[[A_182]];
 A_186=sameIIB(A_184,[0, 1, 2]);
 k_4=( A_186);
 A_188=comaBBB(r_3,A_186);
 r_4=( A_188);
 A_191=okCBC(['M','2','[','0',';',']',':',' '],k_4,QUADio);
 A_192= ABC(toi(true)-QUADio,shape(M2_0)[1]);
A_195=indrfr(1,M2_0,A_192);
 A_197=sameIIB(A_195,[1, 4]);
 k_5=( A_197);
 A_199=comaBBB(r_4,A_197);
 r_5=( A_199);
 A_202=okCBC(['M','2','[',';','1',']',':',' '],k_5,QUADio);
 A_203=rhoIII([2, 3],[3, 4, 5, 0, 1, 2]);
 A_205= ABC(toi([true,false])-QUADio,shape(M2_0)[0]);
A_207=indr(M2_0,A_205);
 A_209=sameIIB(A_207,A_203);
 k_6=( A_209);
 A_211=comaBBB(r_5,A_209);
 r_6=( A_211);
 A_214=okCBC(['M','2','[','1',' ','0',';',']',':',' '],k_6,QUADio);
 A_215=rhoIII([2, 3],[2, 0, 1, 5, 3, 4]);
 A_216= ABC(toi([2, 0, 1])-QUADio,shape(M2_0)[1]);
A_219=indrfr(1,M2_0,A_216);
 A_221=sameIIB(A_219,A_215);
 k_7=( A_221);
 A_223=comaBBB(r_6,A_221);
 r_7=( A_223);
 A_226=okCBC(['M','2','[',';','2',' ','0',' ','1',']',':',' '],k_7,QUADio);
 A_228= ABC(toi(false)-QUADio,shape(M2_0)[0]);
A_227= ABC(toi(2)-QUADio,shape(M2_0)[1]);
A_230=M2_0[[A_228,A_227]];
 A_232=sameIIB(A_230,2);
 k_8=( A_232);
 A_234=comaBBB(r_7,A_232);
 r_8=( A_234);
 A_237=okCBC(['M','2','[','0',';','2',']',':',' '],k_8,QUADio);
 A_239= ABC(toi([true,false])-QUADio,shape(M2_0)[0]);
A_238= ABC(toi(2)-QUADio,shape(M2_0)[1]);
A_241=indr(indrfr(1,M2_0,A_238),A_239);
 A_243=sameIIB(A_241,[5, 2]);
 k_9=( A_243);
 A_245=comaBBB(r_8,A_243);
 r_9=( A_245);
 A_248=okCBC(['M','2','[','1',' ','0',';','2',']',':',' '],k_9,QUADio);
 A_250= ABC(toi(true)-QUADio,shape(M2_0)[0]);
A_249= ABC(toi([2, 0])-QUADio,shape(M2_0)[1]);
A_252=indr(indrfr(1,M2_0,A_249),A_250);
 A_254=sameIIB(A_252,[5, 3]);
 k_10=( A_254);
 A_256=comaBBB(r_9,A_254);
 r_10=( A_256);
 A_259=okCBC(['M','2','[','1',';','2',' ','0',']',':'],k_10,QUADio);
 A_260=rhoIII([2, 2],[5, 4, 2, 1]);
 A_262= ABC(toi([true,false])-QUADio,shape(M2_0)[0]);
A_261= ABC(toi([2, 1])-QUADio,shape(M2_0)[1]);
A_264=indr(indrfr(1,M2_0,A_261),A_262);
 A_266=sameIIB(A_264,A_260);
 k_11=( A_266);
 A_268=comaBBB(r_10,A_266);
 r_11=( A_268);
 A_271=okCBC(['M','2','[','1',' ','0',';','2',' ','1',']',':',' '],k_11,QUADio);
 A_273=iotaXII( 120,QUADio);
 A_274=rhoIII([3, 4, 5],A_273);
 M3_0=( A_274);
 A_277=iotaXII( 5,QUADio);
 A_278=jotdotplusIII([10, 30, 50],A_277);
 A_286= ABC(toi(2)-QUADio,shape(M3_0)[1]);
A_289=indrfr(1,M3_0,A_286);
 A_291=sameIIB(A_289,A_278);
 k_12=( A_291);
 A_293=comaBBB(r_11,A_291);
 r_12=( A_293);
 A_296=okCBC(['M','3','[',';','2',';',']',':',' '],k_12,QUADio);
 A_299= ABC(toi(false)-QUADio,shape(M3_0)[0]);
A_298= ABC(toi(true)-QUADio,shape(M3_0)[1]);
A_297= ABC(toi(2)-QUADio,shape(M3_0)[2]);
A_301=M3_0[[A_299,A_298,A_297]];
 A_303=sameIIB(A_301,7);
 k_13=( A_303);
 A_305=comaBBB(r_12,A_303);
 r_13=( A_305);
 A_308=okCBC(['M','3','[','0',';','1',';','2',']',':',' '],k_13,QUADio);
 A_311= ABC(toi(false)-QUADio,shape(M3_0)[0]);
A_310= ABC(toi(true)-QUADio,shape(M3_0)[1]);
A_313=M3_0[[A_311,A_310]];
 A_315=sameIIB(A_313,[5, 6, 7, 8, 9]);
 k_14=( A_315);
 A_317=comaBBB(r_13,A_315);
 r_14=( A_317);
 A_320=okCBC(['M','3','[','0',';','1',';',']',':',' '],k_14,QUADio);
 A_322= ABC(toi(false)-QUADio,shape(M3_0)[1]);
A_321= ABC(toi(true)-QUADio,shape(M3_0)[2]);
A_325=indrfr(1,indrfr(2,M3_0,A_321),A_322);
 A_327=sameIIB(A_325,[1, 21, 41]);
 k_15=( A_327);
 A_329=comaBBB(r_14,A_327);
 r_15=( A_329);
 A_332=okCBC(['M','3','[',';','0',';','1',']',':',' '],k_15,QUADio);
 A_335= ABC(toi([2, 1])-QUADio,shape(M3_0)[0]);
A_334= ABC(toi(false)-QUADio,shape(M3_0)[1]);
A_333= ABC(toi(3)-QUADio,shape(M3_0)[2]);
A_337=indr(indrfr(1,indrfr(2,M3_0,A_333),A_334),A_335);
 A_339=sameIIB(A_337,[43, 23]);
 k_16=( A_339);
 A_341=comaBBB(r_15,A_339);
 r_16=( A_341);
 A_344=okCBC(['M','3','[','2',' ','1',';','4',';','3',']',':',' '],k_16,QUADio);
 A_346=iotaXII( 5,QUADio);
 A_348=iotaXII( 4,QUADio);
 // dsf scalar(s)
A_349=mpyIII(5,A_348);
 // dsf scalar(s)
A_350=plusIII(40,A_349);
 A_351=jotdotplusIII(A_350,A_346);
 A_360= ABC(toi(2)-QUADio,shape(M3_0)[0]);
A_362=M3_0[[A_360]];
 A_364=sameIIB(A_362,A_351);
 k_17=( A_364);
 A_366=comaBBB(r_16,A_364);
 r_17=( A_366);
 A_369=okCBC(['M','3','[','2',';',';',']',':',' '],k_17,QUADio);
 A_370=jotdotplusIII([0, 20, 40],[2, 7, 12, 17]);
 A_377= ABC(toi(2)-QUADio,shape(M3_0)[2]);
A_381=indrfr(2,M3_0,A_377);
 A_383=sameIIB(A_381,A_370);
 k_18=( A_383);
 A_385=comaBBB(r_17,A_383);
 r_18=( A_385);
 A_388=okCBC(['M','3','[',';',';','2',']',':',' '],k_18,QUADio);
 A_389=dropIII([0, 0, -1],M3_0);
 A_390=dropIII([0, 0, 2],A_389);
 A_391= ABC(toi([2, 3])-QUADio,shape(M3_0)[2]);
A_395=indrfr(2,M3_0,A_391);
 A_397=sameIIB(A_395,A_390);
 k_19=( A_397);
 A_399=comaBBB(r_18,A_397);
 r_19=( A_399);
 A_402=iotaXII( 5,QUADio);
 A_403=jotdotplusIII([0, -5],A_402);
 A_410=jotdotplusIII([10, 30, 50],A_403);
 z_0=( A_410);
 A_419= ABC(toi([2, 1])-QUADio,shape(M3_0)[1]);
A_422=indrfr(1,M3_0,A_419);
 A_424=sameIIB(A_422,z_0);
 k_20=( A_424);
 A_426=comaBBB(r_19,A_424);
 r_20=( A_426);
 A_429=iotaXII( 20,QUADio);
 // dsf scalar(s)
A_430=plusIII(20,A_429);
 A_432=iotaXII( 20,QUADio);
 // dsf scalar(s)
A_433=plusIII(40,A_432);
 A_434=comaIII(A_433,A_430);
 A_435=rhoIII([2, 4, 5],A_434);
 A_438= ABC(toi([2, 1])-QUADio,shape(M3_0)[0]);
A_440=indr(M3_0,A_438);
 A_442=sameIIB(A_440,A_435);
 k_21=( A_442);
 A_444=comaBBB(r_20,A_442);
 r_21=( A_444);
 A_447=okCBC(['M','3','[','2',' ','1',';',';',']',':',' '],k_21,QUADio);
 return(r_21);
}

inline int UTIndexRef_mainXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_47=testirXXB( QUADio_1);
 r_0=( A_47);
 A_51=quadXBB( r_0,QUADpp_1,QUADpw_1);
 A_52=andslXBBQUICKSTOP( r_0);
 // dsf scalar(s)
A_56=barBBI(true,A_52);
r_1=( A_56);
 A_60=quadXII( r_1,QUADpp_1,QUADpw_1);
 return(r_1);
}



use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex2003/wss/sac2007.dws2007-11-06 14:53:31.343 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

inline double divXDD(double y)
{ return(1.0/tod(y));
}

inline double[+] modXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with {
   ( . <= iv <= .)
                : modXDD(toD(y[iv]));
         } : genarray(shape(y), 0.0d);
  return(z);
}

inline double[+] divXDD(double[+] y)
{ /* Monadic scalar functions on array */
  z = with {
   ( . <= iv <= .)
                : divXDD(toD(y[iv]));
         } : genarray(shape(y), 0.0d);
  return(z);
}

inline double divBBD(bool x, bool y)
{ dx = tod(x);
  dy = tod(y);
 if (dx == dy)
      z = 1.0d;
  else
      z = dx/dy;
  return(z);
}

inline bool eqDBB(double x, bool y, double QUADct)
{ /* A=B on doubles */
 return((toD(x) == toD(y)) || APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline double starIID(int x, int y)
{ return(pow(tod(x),tod(y)));
}

inline double mpyDDD(double x, double y)
{ return(toD(x)*toD(y));
}

inline bool leDDB(double x, double y, double QUADct)
{ /* Fuzzy <= */
 return((toD(x)<toD(y)) | APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline int plusIII(int x, int y)
{ return(toI(x)+toI(y));
}

inline double starDDD(double x, double y)
{ return(pow(tod(x),tod(y)));
}

inline bool leBDB(bool x, double y, double QUADct)
{ /* Fuzzy <= */
 return((toD(x)<toD(y)) | APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline int mpyIBI(int x, bool y)
{ return(toI(x)*toI(y));
}

inline int barBII(bool x, int y)
{ return(toI(x)-toI(y));
}

inline double mpyIDD(int x, double y)
{ return(toD(x)*toD(y));
}

inline double barDDD(double x, double y)
{ return(toD(x)-toD(y));
}

inline int plusIBI(int x, bool y)
{ return(toI(x)+toI(y));
}

inline int plusBII(bool x, int y)
{ return(toI(x)+toI(y));
}

inline bool eqDIB(double x, int y, double QUADct)
{ /* A=B on doubles */
 return((toD(x) == toD(y)) || APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline int plusBBI(bool x, bool y)
{ return(toI(x)+toI(y));
}

inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] divDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("divDDD(double[+],double[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toD(x[iv]);
                    yel = toD(y[iv]);
            } : divDDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}







inline double[+] mpyDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("mpyDDD(double[+],double[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toD(x[iv]);
                    yel = toD(y[iv]);
            } : mpyDDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}







inline int[+] plusIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("plusIII(int[+],int[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toI(x[iv]);
                    yel = toI(y[iv]);
            } : plusIII(xel,yel);
        } : genarray(sx, 0);
  return(z);
}







inline double[+] starDID(double[+] x, int y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with {
        ( . <= iv <= .) {
              xel = toD(x[iv]);
    } : starDDD(xel,yel);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int[+] plusIBI(int x, bool[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] mpyDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : mpyDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] barDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("barDDD(double[+],double[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toD(x[iv]);
                    yel = toD(y[iv]);
            } : barDDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}







inline double[+] divDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with {
        ( . <= iv <= .) {
              xel = toD(x[iv]);
    } : divDDD(xel,yel);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
 n = shape(y);
 cell = 0;
 z = with {
         ( . <= iv <= .)
                : y[(n-1)-iv];
         } : genarray(n, cell);
 return(z);
}

inline double[.,.] tranXDD(double[.,.] y)
{ /* Transpose on rank-2 */
   z = { [i,j] -> y[j,i] };
       return(z);
}

inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline double[*] rhoIDD(int[.] x, double[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXDD(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with {
          (. <= [i] <= .)
                        : y;
           } : genarray( [ncopies], y);
        /* Now append the leftover bits */
        z = comaXDD(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int iotaDDI(double[.] x, double y,double QUADct,int QUADio)
{ /* Fuzzy Vector iota Scalar */
 sx = shape(x)[[0]];
 z = sx;
 for(i=0; i<sx; i++) {
   if (eqDDB(toD(x[[i]]),toD(y),QUADct)){
             z = i;
                 i = sx;
        }
 }
 return(z+QUADio);
}


inline bool[*] rhoIBB(int[.] x, bool y)
{ /* Vector reshape scalar to matrix) */
         zxrho = prod(toi(x)); /* Result element count */
       z = genarray([zxrho], y); /* allocate result */
        z = reshape(toi(x),z);
         return(z);
}

inline bool[*] rhoIBB(int[.] x, bool[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXBB(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with {
          (. <= [i] <= .)
                        : y;
           } : genarray( [ncopies], y);
        /* Now append the leftover bits */
        z = comaXBB(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int[.] rhoIII(int x, int y)
{ /* Scalar reshape scalar to vector) */
      z = genarray([toi(x)], y);
     return(z);
}

inline int[*] dropBII(bool x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.] takeBII(bool x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.] takeIII(int x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline double[*] dropIDD(int[.] x, double[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline double[*] dropIDD(int x, double[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[*] dropIII(int x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}


inline bool[.] takeIBB(int x, bool y)
{ /* Scalar take scalar */
  return(take([toi(x)],[y]));
}


inline double[.] takeIDD(int x, double y)
{ /* Scalar take scalar */
  return(take([toi(x)],[y]));
}

inline int[2]  rhoXBI(bool[.,.] y)
{ /* Shape of matrix (rank-2) */
 return(shape(y));
}

inline int[2]  rhoXDI(double[.,.] y)
{ /* Shape of matrix (rank-2) */
 return(shape(y));
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
  show(y);
       return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
  show(y);
       return(y);
}
inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline int[2] comaIBI(int x, bool y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[.] comaIBI(int[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toI(x)++[toI(y)]);
}

inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline double[*] indr(double[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}



inline double[*] indr(double[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[+] inds0(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = toi(X);
 Y = Yin;

 
 z[[I0]]=toi(Y);

 
 return(z);
}



inline double[+] indsx0(double[+] X, int  I1, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){

 z[[i0,I1]]=tod(Y[[i0]]);

 }

 return(z);
}



inline double[+] inds0x(double[+] X, int  I0, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 
 z[[I0]]=tod(Y);

 
 return(z);
}



inline double[+] inds0(double[+] X, int  I0, double Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = tod(X);
 Y = Yin;

 
 z[[I0]]=tod(Y);

 
 return(z);
}



inline double[+] inds11(double[+] X, int [+] I0,int [+] I1, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[I0[[i0]],I1[[i1]]]]=tod(Y[[i0,i1]]);

 }
 }

 return(z);
}



inline double[+] inds1x(double[+] X, int [+] I0, double[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = tod(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=tod(Y[[i0]]);

 }

 return(z);
}



inline double[+] inds00(double[+] X, int  I0,int  I1, double Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = tod(X);
 Y = Yin;

 
 z[[I0,I1]]=tod(Y);

 
 return(z);
}



inline double[*] jotdotmpyDDD(double [+] x, double [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0.0d);
 z = with {
  (. <= iv <= .) {
        xitem = toD(x[iv]);
         } : mpyDDD(xitem, toD(y));
  } : genarray(shape(x), cell);
 return(z);
}

inline double[*] plusdotmpyDDDTRANSPOSE(double[.] x, double[*] y)
{ /* TRANSPOSE case of inner product z = vector_f.g y */
 yt = toD(TRANSPOSE(y));
 xct = toD(x);
 /* if (1 != shape(xct)[[0]]) FIXME; length error check */

 shp = drop([-1],shape(xct)) ++ drop([1], shape(y));
 z = with {
        (. <= iv <= .) {
               vx = xct[take([dim(x)-1], iv)];
                vy = yt[ reverse(take([1-dim(y)], iv))];
       } : plusslXDDFOLD(mpyDDDsl(vx,vy));
       } :genarray(shp, 0.0d);
 return(z);
}




inline double[+] maxslXDDFOLD(double[+] y)
{ /* last axis reduce rank-2 or greater matrix w/folding */
  sy = shape(y);
  zrho = drop([-1], sy);
  z = with {
        (. <= iv <= .)
               : maxslXDDFOLD(y[iv]);
   } : genarray(zrho, 0.0d);
  return(z);
}


inline double[.] maxsl1XDDFOLD(double[.,.] y)
{ /* first-axis reduce rank-2 matrix */
  yt = TRANSPOSE(y);
  zrho = drop([-1], shape(yt));
  z = with {
  (. <= iv <= .)
                 : maxslXDDFOLD(yt[iv]);
    } : genarray(zrho, 0.0d);
  return(z);
}




inline double maxslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
     (0*shape(y) <= iv < shape(y))
                 : toD(y[lim-iv]);
       } :  fold( maxDDD, toD(mindouble()));
  return(z);
}


inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
     (0*shape(y) <= iv < shape(y))
                 : toD(y[lim-iv]);
       } :  fold( plusDDD, toD(0));
  return(z);
}


inline double modXDD(double y)
{ return(abs(toD(y)));
}

inline double divDDD(double x, double y)
{ dx = tod(x);
  dy = tod(y);
 if (dx == dy)
      z = 1.0d;
  else
      z = dx/dy;
  return(z);
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((toD(x) == toD(y)) || APEXFUZZEQ(toD(x),toD(y),QUADct));
}


inline double maxDDD(double x, double y)
{ /* x max y */
 return (max(toD(x),toD(y)));
}

inline double plusDDD(double x, double y)
{ return(toD(x)+toD(y));
}

inline double[+] divDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : divDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] mpyDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with {
        ( . <= iv <= .) {
              xel = toD(x[iv]);
    } : mpyDDD(xel,yel);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIII(int[+] x, int y)
{ /* AxS scalar function */
  yel = toI(y);
  z = with {
        ( . <= iv <= .) {
              xel = toI(x[iv]);
    } : plusIII(xel,yel);
  } : genarray( shape(x), 0);
  return(z);
}


inline double[+] barDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : barDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] barDDD(double[+] x, double y)
{ /* AxS scalar function */
  yel = toD(y);
  z = with {
        ( . <= iv <= .) {
              xel = toD(x[iv]);
    } : barDDD(xel,yel);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] mpyDDDsl(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
   sx = DSFLenErrorCheck(shape(x), shape(y),tochar("mpyDDDsl(double[+],double[+]"));
        z = with {
             ( . <= iv <= .) {
                      xel = toD(x[iv]);
                    yel = toD(y[iv]);
            } : mpyDDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}







inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
     z = reshape([prod(shape(y))],y);
       return(z);
}

inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
    (. <= iv <= .)
                 : indrfr0(X[iv], I);
   } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
   (. <= iv <= .)
                 : sel( I[iv], X);
      } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
       (. <= iv <= .)
                 : sel( I, X[iv]);
      } : genarray(frameshape, cell);
 return(z);
}


inline double[*] indrfr(int fr, double[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
    (. <= iv <= .)
                 : indrfr0(X[iv], I);
   } : genarray(frameshape, cell);
 return(z);
}

inline double[*] indrfr0(double[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0.0d);
 z = with {
   (. <= iv <= .)
                 : sel( I[iv], X);
      } : genarray(shape(I), cell);
 return(z);
}



inline double[*] indrfr(int fr, double[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0.0d);
 z = with {
       (. <= iv <= .)
                 : sel( I, X[iv]);
      } : genarray(frameshape, cell);
 return(z);
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int[.] DSFLenErrorCheck(int[.] sx, int[.] sy, char[.] whodunit)
{ /* Dyadic scalar fn length error check */
     z = sx;
#ifdef GENME
/* SAC bug #306 - side effect kills fold!  */
    if (any(sx != sy)) { /* Check that shapes match */
   show(tochar("APEX dyadic scalar function length error in function"));
  show(whodunit);
        show(sx); show(sy);
    }
#endif
     return(z);
}

inline int ABC(int I, int Xshape)
{ /* Array bounds checker for indexed ref X[scalarI] and indexed assign */
 z = I;
#ifdef BOUNDSCHECKING
 /* This needs more thought... */
  if ( (I < 0) || (I >= Xshape)) {
         print(tochar("APEX index error!"));
  }
#endif
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* Array bounds checker for indexed ref  X[nonscalarI] and indexed assign */
 z = I;
#ifdef BOUNDSCHECKING
 bad = with {
     ((0*shape(z)) <= iv < shape(z))
                : (z[iv] < 0) || (z[iv] >= Xshape);
    }: fold(|, false);
 if (bad)
  print(tochar("APEX index error!"));
#endif
 return(z);
}

inline double[+] TRANSPOSE(double[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                 : y[reverse( iv)];
    }: genarray( reverse( shape(y)), 0.0d);
  return(z);
}

inline bool SingularXBB(bool y ,double QUADct)
{ 
/*
  z{<-}Singular y;j
 @ We expect a Boolean scalar y
  j{<-}1{divide}y
  z{<-}j=1
 
*/
/* dsf scalar(s) */
A_22=divBBD(true,y);
 j_0=( A_22);
 /* dsf scalar(s) */
A_25=eqDBB(j_0,true,QUADct);
z_0=( A_25);
 return(z_0);
}

inline double[.,.] ls2BDD(bool[.,.] b, double[.,.] a,double QUADct,int QUADio)
{ 
/*
  z{<-}b ls2 a;i;j;sigma;alfa;aii;pp;pi;np;factor;eps;mv;m;n;u;ta;tb;tc;td;p;sink;t1;tc1;tc2;td1;td2;newta;newtb;tmp
 @ M.A. Jenkins.
 @ IBM Tech Report 320-2989
 @ Modified for formatting and
 @ to avoid use of globals, glueing.
 @ Modified further to run a wee bit faster 1996-03-20 /rbe
 @ Householder triangularization
 @ of m{times}n matrix for linear
 @ systems and least squares.
 @ Does row, column interchanges,
 @ scales columns near unity.
 @ assumes ({rho}{rho}a)=({rho}{rho}b)=2
 @ Modified 1995-05-22 to be origin 0/rbe
  p{<-}1{drop}{rho}b
  m{<-}1{take}{rho}a
  n{<-}{neg}1{take}{rho}a
  pp{<-}0+{iota}n @ KLUDGE to avoid typeproblems in dfa
  factor{<-}{divide}{max}{slashbar}|a{divide}{transpose}({reverse}{rho}a){rho}mv{<-}{max}/|a @ FUNCTION RANK!
  a{<-}a{times}({rho}a){rho}factor @ Function rank!
  np{<-}n+p
  eps{<-}(16*{neg}13){times}{max}/mv
  :For i :In {iota}n
      mv{<-}{max}{slashbar}|(i,i){drop}a
      sink{<-}Singular eps{<=}{max}/mv
      pi{<-}i+mv{iota}{max}/mv
      tmp{<-}pp[i]
      pp[i]{<-}pp[pi]
      pp[pi]{<-}tmp
      tmp{<-}a[;i]
      a[;i]{<-}a[;pi]
      a[;pi]{<-}tmp
      pi{<-}i+(|i{drop}a[;i]){iota}{max}/|i{drop}a[;i]
      tmp{<-}a[i;]
      a[i;]{<-}a[pi;]
      a[pi;]{<-}tmp
      tmp{<-}b[i;]
      b[i;]{<-}b[pi;]
      b[pi;]{<-}tmp
      sigma{<-}+/(i{drop}a[;i])*2
      aii{<-}a[i;i]
      alfa{<-}(1-2{times}0{<=}aii){times}sigma*0.5
      tmp{<-}i{drop}a[;i]
      tmp[0]{<-}tmp[0]-alfa
      newta{<-}tmp+.{times}(i+0 1){drop}a
      newtb{<-}tmp+.{times}(i,0){drop}b
      tb{<-}{divide}sigma-aii{times}alfa
      tc1{<-}tmp{jot}.{times}tb{times}newta
      tc2{<-}tmp{jot}.{times}tb{times}newtb
      td1{<-}((i+0 1){drop}a)-tc1
      td2{<-}((i,0){drop}b)-tc2
      a[i{drop}{iota}m;(i+1){drop}{iota}n]{<-}td1
      b[i{drop}{iota}m;]{<-}td2
      a[i;i]{<-}alfa
  :EndFor
 @
  z{<-}(n,p){rho}0
 @
  :For i :In {reverse}{iota}n
      t1{<-}b[i;]-a[i;]+.{times}z
      z[i;]{<-}t1{divide}a[i;i]
  :EndFor
 @
  z[pp;]{<-}z
  z{<-}z{times}{transpose}({reverse}{rho}z){rho}factor @ Function rank!
 
*/
A_137=rhoXBI( b);
 A_138=dropBII(true,A_137);
 p_0=( A_138);
 A_140=rhoXDI( a);
 A_141=takeBII(true,A_140);
 m_0=( A_141);
 A_143=rhoXDI( a);
 A_144=takeIII(-1,A_143);
 n_0=( A_144);
 A_147=iotaXII( n_0,QUADio);
 /* dsf scalar(s) */
A_148=plusBII(false,A_147);
 pp_0=( A_148);
 A_150=modXDD( a);
 A_151=maxslXDDFOLD( A_150);
 mv_0=( A_151);
 A_156=rhoXDI( a);
 A_157=rotrXII( A_156);
 A_158=rhoIDD(A_157,A_151);
 A_159=tranXDD( A_158);
 /* dsf Check needed */
A_160=divDDD(a,A_159);
 A_161=modXDD( A_160);
 A_162=maxsl1XDDFOLD( A_161);
 A_166=divXDD( A_162);
 factor_0=( A_166);
 A_168=rhoXDI( a);
 A_169=rhoIDD(A_168,factor_0);
 /* dsf Check needed */
A_170=mpyDDD(a,A_169);
 a_0=( A_170);
 /* dsf scalar(s) */
A_172=plusIII(n_0,p_0);
 np_0=( A_172);
 A_174=maxslXDDFOLD( mv_0);
 /* dsf scalar(s) */
A_178=starIID(16,-13);
 /* dsf scalar(s) */
A_179=mpyDDD(A_178,A_174);
 eps_0=( A_179);
 A_182=iotaXII( n_0,QUADio);
 A_CTR183_= 0;
A_CTR183z_ = (shape(A_182)[[0]])-1;
pp_3=toi(pp_0);
a_7=tod(a_0);
b_3=tod(b);
i_0=toi(0);
for(; A_CTR183_ <= A_CTR183z_; A_CTR183_++){
i_0 = A_182[[A_CTR183_]];
 A_191=comaIII(i_0,i_0);
 A_192=dropIDD(A_191,a_7);
 A_193=modXDD( A_192);
 A_194=maxsl1XDDFOLD( A_193);
 mv_2=( A_194);
 A_199=maxslXDDFOLD( mv_2);
 /* dsf scalar(s) */
A_204=leDDB(eps_0,A_199,QUADct);
 A_206=SingularXBB( A_204,QUADct);
 sink_0=( A_206);
 A_208=maxslXDDFOLD( mv_2);
 A_214=iotaDDI(mv_2,A_208,QUADct,QUADio);
 /* dsf scalar(s) */
A_215=plusIII(i_0,A_214);
 pi_1=( A_215);
 A_217= ABC(toi(i_0)-QUADio,shape(pp_3)[0]);
A_219=pp_3[[A_217]];
 tmp_1=( A_219);
 A_221= ABC(toi(pi_1)-QUADio,shape(pp_3)[0]);
A_223=pp_3[[A_221]];
 A_224= ABC(toi(i_0)-QUADio,shape(pp_3)[0]);
A_226=inds0(pp_3,A_224,A_223);
 pp_2=( A_226);
 A_228= ABC(toi(pi_1)-QUADio,shape(pp_2)[0]);
A_230=inds0(pp_2,A_228,tmp_1);
 pp_3=( A_230);
 A_232= ABC(toi(i_0)-QUADio,shape(a_7)[1]);
A_235=indrfr(1,a_7,A_232);
 tmp_2=( A_235);
 A_237= ABC(toi(pi_1)-QUADio,shape(a_7)[1]);
A_240=indrfr(1,a_7,A_237);
 A_241= ABC(toi(i_0)-QUADio,shape(a_7)[1]);
A_244=indsx0(a_7,A_241,A_240);
 a_2=( A_244);
 A_246= ABC(toi(pi_1)-QUADio,shape(a_2)[1]);
A_249=indsx0(a_2,A_246,tmp_2);
 a_3=( A_249);
 A_251= ABC(toi(i_0)-QUADio,shape(a_3)[1]);
A_254=indrfr(1,a_3,A_251);
 A_255=dropIDD(i_0,A_254);
 A_256=modXDD( A_255);
 A_257=maxslXDDFOLD( A_256);
 A_261= ABC(toi(i_0)-QUADio,shape(a_3)[1]);
A_264=indrfr(1,a_3,A_261);
 A_265=dropIDD(i_0,A_264);
 A_266=modXDD( A_265);
 A_269=iotaDDI(A_266,A_257,QUADct,QUADio);
 /* dsf scalar(s) */
A_270=plusIII(i_0,A_269);
 pi_2=( A_270);
 A_273= ABC(toi(i_0)-QUADio,shape(a_3)[0]);
A_275=a_3[[A_273]];
 tmp_3=( A_275);
 A_278= ABC(toi(pi_2)-QUADio,shape(a_3)[0]);
A_280=a_3[[A_278]];
 A_282= ABC(toi(i_0)-QUADio,shape(a_3)[0]);
A_284=inds0x(a_3,A_282,A_280);
 a_4=( A_284);
 A_287= ABC(toi(pi_2)-QUADio,shape(a_4)[0]);
A_289=inds0x(a_4,A_287,tmp_3);
 a_5=( A_289);
 A_292= ABC(toi(i_0)-QUADio,shape(b_3)[0]);
A_294=b_3[[A_292]];
 tmp_4=( A_294);
 A_297= ABC(toi(pi_2)-QUADio,shape(b_3)[0]);
A_299=b_3[[A_297]];
 A_301= ABC(toi(i_0)-QUADio,shape(b_3)[0]);
A_303=inds0x(b_3,A_301,A_299);
 b_1=( A_303);
 A_306= ABC(toi(pi_2)-QUADio,shape(b_1)[0]);
A_308=inds0x(b_1,A_306,tmp_4);
 b_2=( A_308);
 A_310= ABC(toi(i_0)-QUADio,shape(a_5)[1]);
A_313=indrfr(1,a_5,A_310);
 A_314=dropIDD(i_0,A_313);
 /* dsf scalar(s) */
A_315=starDID(A_314,2);
 A_316=plusslXDDFOLD( A_315);
 sigma_0=( A_316);
 A_322= ABC(toi(i_0)-QUADio,shape(a_5)[0]);
A_321= ABC(toi(i_0)-QUADio,shape(a_5)[1]);
A_324=a_5[[A_322,A_321]];
 aii_0=( A_324);
 /* dsf scalar(s) */
A_326=starDDD(sigma_0,0.5);
 /* dsf scalar(s) */
A_328=leBDB(false,aii_0,QUADct);
 /* dsf scalar(s) */
A_329=mpyIBI(2,A_328);
 /* dsf scalar(s) */
A_330=barBII(true,A_329);
 /* dsf scalar(s) */
A_331=mpyIDD(A_330,A_326);
 alfa_0=( A_331);
 A_333= ABC(toi(i_0)-QUADio,shape(a_5)[1]);
A_336=indrfr(1,a_5,A_333);
 A_337=dropIDD(i_0,A_336);
 tmp_5=( A_337);
 A_339= ABC(toi(false)-QUADio,shape(tmp_5)[0]);
A_341=tmp_5[[A_339]];
 /* dsf scalar(s) */
A_342=barDDD(A_341,alfa_0);
 A_343= ABC(toi(false)-QUADio,shape(tmp_5)[0]);
A_345=inds0(tmp_5,A_343,A_342);
 tmp_6=( A_345);
 /* dsf scalar(s) */
A_347=plusIBI(i_0,[false,true]);
 A_348=dropIDD(A_347,a_5);
 A_349=plusdotmpyDDDTRANSPOSE(tmp_6,A_348);
 newta_0=( A_349);
 A_357=comaIBI(i_0,false);
 A_358=dropIDD(A_357,b_2);
 A_359=plusdotmpyDDDTRANSPOSE(tmp_6,A_358);
 newtb_0=( A_359);
 /* dsf scalar(s) */
A_367=mpyDDD(aii_0,alfa_0);
 /* dsf scalar(s) */
A_368=barDDD(sigma_0,A_367);
 A_369=divXDD( A_368);
 tb_0=( A_369);
 /* dsf scalar(s) */
A_371=mpyDDD(tb_0,newta_0);
 A_372=jotdotmpyDDD(tmp_6,A_371);
 tc1_0=( A_372);
 /* dsf scalar(s) */
A_380=mpyDDD(tb_0,newtb_0);
 A_381=jotdotmpyDDD(tmp_6,A_380);
 tc2_0=( A_381);
 /* dsf scalar(s) */
A_389=plusIBI(i_0,[false,true]);
 A_390=dropIDD(A_389,a_5);
 /* dsf Check needed */
A_391=barDDD(A_390,tc1_0);
 td1_0=( A_391);
 A_393=comaIBI(i_0,false);
 A_394=dropIDD(A_393,b_2);
 /* dsf Check needed */
A_395=barDDD(A_394,tc2_0);
 td2_0=( A_395);
 A_398=iotaXII( n_0,QUADio);
 /* dsf scalar(s) */
A_399=plusIBI(i_0,true);
 A_400=dropIII(A_399,A_398);
 A_402=iotaXII( m_0,QUADio);
 A_403=dropIII(i_0,A_402);
 A_405= ABC(toi(A_403)-QUADio,shape(a_5)[0]);
A_404= ABC(toi(A_400)-QUADio,shape(a_5)[1]);
A_407=inds11(a_5,A_405,A_404,td1_0);
 a_6=( A_407);
 A_410=iotaXII( m_0,QUADio);
 A_411=dropIII(i_0,A_410);
 A_413= ABC(toi(A_411)-QUADio,shape(b_2)[0]);
A_415=inds1x(b_2,A_413,td2_0);
 b_3=( A_415);
 A_418= ABC(toi(i_0)-QUADio,shape(a_6)[0]);
A_417= ABC(toi(i_0)-QUADio,shape(a_6)[1]);
A_420=inds00(a_6,A_418,A_417,alfa_0);
 a_7=( A_420);
 }
 A_423=comaIII(n_0,p_0);
 A_424=rhoIBB(A_423,false);
 z_0=( A_424);
 A_427=iotaXII( n_0,QUADio);
 A_428=rotrXII( A_427);
 A_CTR429_= 0;
A_CTR429z_ = (shape(A_428)[[0]])-1;
i_1=toi(i_0);
z_2=tod(z_0);
for(; A_CTR429_ <= A_CTR429z_; A_CTR429_++){
i_1 = A_428[[A_CTR429_]];
 A_433= ABC(toi(i_1)-QUADio,shape(a_7)[0]);
A_435=a_7[[A_433]];
 A_436=plusdotmpyDDDTRANSPOSE(A_435,z_2);
 A_444= ABC(toi(i_1)-QUADio,shape(b_3)[0]);
A_446=b_3[[A_444]];
 /* dsf Check needed */
A_447=barDDD(A_446,A_436);
 t1_0=( A_447);
 A_450= ABC(toi(i_1)-QUADio,shape(a_7)[0]);
A_449= ABC(toi(i_1)-QUADio,shape(a_7)[1]);
A_452=a_7[[A_450,A_449]];
 /* dsf scalar(s) */
A_453=divDDD(t1_0,A_452);
 A_455= ABC(toi(i_1)-QUADio,shape(z_2)[0]);
A_457=inds0x(z_2,A_455,A_453);
 z_2=( A_457);
 }
 A_461= ABC(toi(pp_3)-QUADio,shape(z_2)[0]);
A_463=inds1x(z_2,A_461,z_2);
 z_3=( A_463);
 A_465=rhoXDI( z_3);
 A_466=rotrXII( A_465);
 A_467=rhoIDD(A_466,factor_0);
 A_468=tranXDD( A_467);
 /* dsf Check needed */
A_469=mpyDDD(z_3,A_468);
 z_4=( A_469);
 return(z_4);
}

inline double[.,.] dmd2BDD(bool[.,.] b, double[.,.] a,double QUADct,int QUADio)
{ 
/*
  z{<-}b dmd2 a;v;m;n
 @ Dyadic matrix divide using Householder
 @ triangularization.
  b{<-}(2{take}({rho}b),1){rho}b
  z{<-}b ls2 a
 
*/
A_25=rhoXBI( b);
 A_26=comaIBI(A_25,true);
 A_27=takeIII(2,A_26);
 A_28=rhoIBB(A_27,b);
 b_0=( A_28);
 A_32=ls2BDD(b_0,a,QUADct,QUADio);
z_0=( A_32);
 return(z_0);
}

inline double[.,.] mmd2XDD(double[.,.] a ,double QUADct,int QUADio)
{ 
/*
  z{<-}mmd2 a;sz;id
 @Computes inverse by calling dmd with an
 @ identity matrix as left argument.
  sz{<-}({rho}a)[0]
  id{<-}(2{rho}sz){rho}(1+sz){take}1
  z{<-}id dmd2 a
 
*/
A_29=rhoXDI( a);
 A_28= ABC(toi(false)-QUADio,shape(A_29)[0]);
A_31=A_29[[A_28]];
sz_0=( A_31);
 /* dsf scalar(s) */
A_33=plusBII(true,sz_0);
 A_34=takeIBB(A_33,true);
 A_35=rhoIII(2,sz_0);
 A_36=rhoIBB(A_35,A_34);
 id_0=( A_36);
 A_40=dmd2BDD(id_0,a,QUADct,QUADio);
 z_0=( A_40);
 return(z_0);
}

inline double mdiv2XID(int n ,double QUADct,int QUADio)
{ 
/*
  r{<-}mdiv2 n;x
  x{<-}((2{rho}n){rho}(n+1){take}1.5-0.5) @ Id n
  r{<-}+/,|mmd2 x
 
*/
/* dsf scalar(s) */
A_26=barDDD(1.5,0.5);
/* dsf scalar(s) */
A_27=plusIBI(n,true);
A_28=takeIDD(A_27,A_26);
 A_29=rhoIII(2,n);
 A_30=rhoIDD(A_29,A_28);
 x_0=( A_30);
 A_34=mmd2XDD( x_0,QUADct,QUADio);
 A_35=modXDD( A_34);
 A_36=comaXDD( A_35);
 A_37=plusslXDDFOLD( A_36);
 r_0=( A_37);
 return(r_0);
}

int main()
{ 
/*
  r{<-}main;#IO;#RL;n;#PP;#PW
  #IO{<-}0
  #PP{<-}16
  #PW{<-}80
  n{<-}300
  #RL{<-}16807
  #{<-}r{<-}mdiv2 n
  #{<-}r{<-}1+r=n
 
*/
QUADio_0=toi(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toi(( false));
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 n_0=( 300);
 QUADrl_1=( 16807);
 A_57=mdiv2XID( n_0,QUADct_0,QUADio_1);
 r_0=( A_57);
 A_61=quadXDD( A_57,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_63=eqDIB(r_0,n_0,QUADct_0);
/* dsf scalar(s) */
A_64=plusBBI(true,A_63);
 r_1=( A_64);
 A_68=quadXII( A_64,QUADpp_1,QUADpw_1);
 return(r_1);
}


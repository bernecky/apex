module loopisAKD;

use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// Compiled by APEX Version: wss/apex.20210504 2021-05-12 15:02:10.206
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


export all;

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline int maxIBI(int x, bool y)
{ /* x max y */
 return (max(ItoI(x),BtoI(y)));
}

inline int barIBI(int x, bool y)
{ return(ItoI(x)-BtoI(y));
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline double divIID(int x, int y)
{ dx = ItoD(x);
  dy = ItoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool sameIDB(int x, double y,double QUADct)
{ /* Scalar match scalar */
  z = eqDDB(toD(x), toD(y), QUADct);
 return(z);
}



inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int loopisXII(int n ,int QUADio)
{ 
/*
 ?
*/
r_0=( false);
 A_24=iotaXII( n,QUADio);
 A_CTR25_= 0;
A_CTR25z_ = (shape(A_24)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR25_ <= A_CTR25z_; A_CTR25_++){
i_0 = A_24[[A_CTR25_]];
 // dsf scalar(s)
A_27=plusIII(r_2,i_0);
 r_2=( A_27);
 }
 return(r_2);
}

inline int loopisAKD_mainXII(int n )
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 QUADrl_1=( 16807);
 // dsf scalar(s)
A_49=maxIBI(n,true);
 n_0=( A_49);
 A_52=loopisXII( n_0,QUADio_1);
 r_0=( A_52);
 // dsf scalar(s)
A_54=barIBI(n_0,true);
 // dsf scalar(s)
A_55=mpyIII(n_0,A_54);
 // dsf scalar(s)
A_56=divIID(A_55,2);
 A_58=sameIDB(r_0,A_56,QUADct_0);
 // dsf scalar(s)
A_59=barBBI(true,A_58);
r_1=( A_59);
 A_63=quadXII( A_59,QUADpp_1,QUADpw_1);
 return(r_1);
}


use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3013.dws2012-11-07 10:24:08.422 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((DtoD(x) == DtoD(y)) || APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double[+] modBDD(bool x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : modDDD(xel,yel, QUADct);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] barDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : barDDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}






inline double[+] plusDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] modIDD(int x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : modDDD(xel,yel, QUADct);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline bool[+] eqBDB(bool x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : eqDDB(xel,yel, QUADct);
  } : genarray(shape(y), false);
  return(z);
}


inline double[.,.] tranXDD(double[.,.] y)
{ /* Transpose on rank-2 */
        z = { [i,j] -> y[j,i] };
        return(z);
}

inline int[.] rhoIII(int x, int[*] y)
{ /* Scalar reshape non-scalar (to vector) */
 z = rhoIII( [toi(x)],y);
 return(z);
}


inline double[*] rhoIDD(int[.] x, double[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0.0d);
   return( z);
}



inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline double[+] plusdotmpyBDDSTARLIKE(bool[+]x, double[+]y)
{ /* CDC STAR-100 APL Algorithm for inner product */
 /* This computes, for z=x f.g y,
  *            z[i;] = z[i;]f x[i;j]g y[j;]
  *  Thus, it runs stride-1, and we only fetch left argument
  *  elements once. It is similar to dotSTAR, except that:
  *   1. "f" is such that we can't avoid the reduce step.
  *   2. "x[i;j] f" is such that it may produce an identity on y[j;].
  *      If so, we don't apply f to that row.
  *  R. Bernecky 2005-11-24
  */
  rowsx = drop([-1],shape(x));
  colsx = shape(x)[[dim(x)-1]];
  colsy = shape(y)[[dim(y)-1]];
  Zrow = genarray([colsy],0.0d);
  /* Parallel over rows of x */
  z = with {
    (. <= [row] <= .) {
      Crow = Zrow;
      for (colx=0; colx<colsx; colx++) {
        xel = x[row,colx];
        xel = toD( xel);
        if (toD(0) != xel) { /* Skip iteration if it's an f identity */
          Crow = plusDDD( toD( y[colx]), Crow );
        }
      }
    } : Crow;
  }: genarray( rowsx, Zrow);
  return(z);
}


inline double[+] plusslXDDFOLD(double[+] y)
{ /* last axis reduce rank-2 or greater matrix w/folding */
  sy = shape(y);
  zrho = drop([-1], sy);
  z = with {
         (. <= iv <= .)
                : plusslXDDFOLD(y[iv]);
        } : genarray(zrho, 0.0d);
  return(z);
}


inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : DtoD(y[lim-iv]);
       } :  fold( plusDDD, ItoD(0));
  return(z);
}


inline double modDDD(double x, double y, double QUADct)
{ /* Double residue double */
  /* This definition is taken from SHARP APL Refman May 1991, p.6-26.
   * It extends the definition of residue to fractional right arguments
   * and to zero, negative and fractional left arguments.
   * r= y-x times floor y divide x+0=x
   * See also APL model in workspace 43 UTDScalarI.
   */
  nx = (0.0 == DtoD(x))  ?  1.0  : DtoD(x);
  z = DtoD(y) - DtoD(x) * tod(DFLOOR(DtoD(y)/nx, QUADct));
  return(z);
}


inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline double[+] barDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : barDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] barDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barDDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline double[+] plusDDD(double[+] x, double[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusDDD(xel,yel);
        } : genarray(sx, 0.0d);
  return(z);
}






inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline double[+] plusDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] plusDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusDDD(xel,y);
  } : genarray( shape(x), 0.0d);
  return(z);
}


inline int DFLOOR(double y, double QUADct)
{ /* Fuzzy floor */
  /* Definition taken from SHARP APL Refman May 1991, p.6-23
   * floor:  n <- (signum y) times nofuzzfloor 0.5+abs y)
   *         z <- n-(QUADct times 1 max abs y)<(n-y)
   * If you want a double result,  write: "y - 1| y".
   */
   n = tod(floor(0.5+fabs(y)));
   if (y < 0.0)
        n = -n;
   else if (0.0 == y)
        n = 0.0;
   range = fabs(y);
   if (1.0 > range)
        range = 1.0;
   fuzzlim = QUADct*range;
   ny = n-y;
   if (fuzzlim < ny)
        z = n - 1.0;
   else
        z = n;
   return(toi(z));
}

inline double[.,.] floorXDD(double[.,.] y ,double QUADct)
{ 
/*
 ?
*/
/* dsf scalar(s) */
A_20=modBDD(true,y,QUADct);
/* dsf clique */
A_21=barDDD(y,A_20);
 r_0=( A_21);
 return(r_0);
}

inline double ipbdIID(int d , int siz,double QUADct,int QUADio)
{ 
/*
 ?
*/
/* dsf Scalar & clique */
A_25=mpyIII(siz,siz);
 A_27=iotaXII( A_25,QUADio);
 /* dsf scalar(s) */
A_28=plusDID(0.5,A_27);
 A_29=rhoIII(2,siz);
 A_30=rhoIDD(A_29,A_28);
 m_0=( A_30);
 A_32=tranXDD( m_0);
 A_34=floorXDD( m_0,QUADct);
 /* dsf scalar(s) */
A_36=modIDD(d,A_34,QUADct);
 /* dsf scalar(s) */
A_38=eqBDB(false,A_36,QUADct);
A_39=plusdotmpyBDDSTARLIKE(A_38,A_32);
 A_46=plusslXDDFOLD( A_39);
 A_50=plusslXDDFOLD( A_46);
 r_0=( A_50);
 return(r_0);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 500);
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_59=ipbdIID(10,n_0,QUADct_0,QUADio_1);
 r_0=( A_59);
 A_63=quadXDD( r_0,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_65=eqDDB(r_0,1562443750000.0,QUADct_0);
/* dsf scalar(s) */
A_66=barBBI(true,A_65);
 r_1=( A_66);
 A_70=quadXII( r_1,QUADpp_1,QUADpw_1);
 return(r_1);
}


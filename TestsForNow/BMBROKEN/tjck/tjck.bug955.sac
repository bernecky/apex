use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3012.dws2012-05-15 12:23:07.722 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int minXDI(double y,double QUADct)
{ return(DFLOOR(y,QUADct));
}



inline int[+] minXDI(double[+] y,double QUADct)
{ /* Monadic scalar functions on array */
  z = with {
        ( . <= iv <= .)
                : minXDI(toD(y[iv]), QUADct);
        } : genarray(shape(y), 0);
  return(z);
}

inline double divIID(int x, int y)
{ dx = ItoD(x);
  dy = ItoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline double barDDD(double x, double y)
{ return(DtoD(x)-DtoD(y));
}

inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
 return((DtoD(x) == DtoD(y)) || APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline bool[+] ltIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : ltIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[+] mpyBII(bool[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : mpyBII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline bool[+] gtIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : gtIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[+] plusBII(bool[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusBII(xel,yel);
        } : genarray(sx, 0);
  return(z);
}






inline int[+] plusIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : plusIII(xel,yel);
        } : genarray(sx, 0);
  return(z);
}






inline int[+] barIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : barIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] modIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : modIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline double[+] plusDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : plusDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline int[*] rhoIII(int[.] x, int[+] y)
{ /* APEX vector x reshape, with item reuse */
  ix = toi(x);
  ry = comaXII(y);
  zxrho = prod(ix); /* THIS NEEDS XRHO FOR CODE SAFETY!! */
  yxrho = shape(ry)[[0]];
  if( zxrho <= yxrho) { /* No element resuse case */
        z = take([zxrho],ry);
 } else {
        ncopies = zxrho/yxrho; /* # complete copies of y. */
        /* FIXME: y empty case !*/
        z = with {
                (. <= [i] <= .)
                        : ry;
                } : genarray( [ncopies], ry);
        /* Now append the leftover bits */
        z = comaXII(z) ++ take([zxrho-(ncopies*yxrho)],ry);
 }
 return(reshape(ix,z));
}



inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline double[*] quadXDD(double[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] indr(int[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),0);
 z = with {
        (. <= iv <= .)
                : X[[I[iv]]];
        } : genarray(shape(I), defcell);
 return(z);
}





inline double[*] jotdotmpyIDD(int [+] x, double [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0.0d);
 z = with {
        (. <= iv <= .) {
         xitem = toD(x[iv]);
        } : mpyDDD(xitem, toD(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline int[+] plusdotmpyIIITRANSPOSE(int[+] x, int[+] y)
{ /* Generic case of inner product z = x f.g y */
 yt = toI(TRANSPOSE(y));
 xct = toI(x);
 shp = drop([-1],shape(x)) ++ drop([1], shape(y));
 z = with {
   (. <= iv <= .) {
     vx = xct[take([dim(x)-1], iv)];
     vy = yt[ reverse(take([1-dim(y)], iv))];
   } : plusslXIIFOLD(mpyIII(vx,vy));
 } : genarray(shp, 0);
 return(z);
}




inline int[+] slBII(bool[.] x, int[+] y)
{ /* last-axis vector compress/replicate matrix */
  /* This needs conformability check FIXME */
  /* Also, x may be one-element vector */
 frameshape = drop([-1],shape(y));
 cellshape  = take([1],shape(y));
 defcell = genarray(cellshape,0);

 z = with {
   (. <= iv <= .) : slBII( x, y[iv]);
   } : genarray( frameshape, defcell);

return(z);
}





inline int[+] sl1III(int x, int[+] y)
{ /* Scalar replicate non-scalar, first axis */
 xi = [toi(x)];
 cellshape = xi++drop([1],shape(y));
 defcell = genarray(cellshape,0);
 frameshape = take([1],shape(y));
 z = with {
        (. <= iv <= .)
                : genarray(xi,y[iv]);
        } : genarray(frameshape, defcell);

 zshape = [prod(take([2],shape(z)))]++drop([2],shape(z));
 z = reshape(zshape,z);
 return(z);
}

inline int[+] plusslXIIFOLD(int[+] y)
{ /* last axis reduce rank-2 or greater matrix w/folding */
  sy = shape(y);
  zrho = drop([-1], sy);
  z = with {
         (. <= iv <= .)
                : plusslXIIFOLD(y[iv]);
        } : genarray(zrho, 0);
  return(z);
}


inline double plusslXDDFOLD(double[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : DtoD(y[lim-iv]);
       } :  fold( plusDDD, ItoD(0));
  return(z);
}


inline bool ltIIB(int x, int y)
{ /* A<B on Boot/Int/Char */
  return(ItoI(x)<ItoI(y));
}

inline int mpyBII(bool x, int y)
{ return(BtoI(x)*ItoI(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool gtIIB(int x, int y)
{ /* A>B on Booleans */
 return(ItoI(x) > ItoI(y));
}

inline int plusBII(bool x, int y)
{ return(BtoI(x)+ItoI(y));
}

inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline int modIII(int x, int y)
{ /* SxS residue (aka modulo) */
  /* (x residue y) <-->   y-x times floor y divide x + 0 = x  */
  /* See model residueI in workspace UTDScalarI.dws */
  x = ItoI(x);
  y = ItoI(y);
  if( 0 != x) {
    q = y / x;
    z = y - ( x * q);
  } else {
    z = y;
  }

  if( z != 0) {
    if( mpyXII( x) != mpyXII( y)) {
      z = z + x;
    }
  }
 return(z);
}


inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusBII(bool[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusBII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int[+] plusIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : plusIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline double[+] mpyDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
     ( . <= iv <= .) {
              yel = toD(y[iv]);
                    } : mpyDDD(xel,yel);
  } : genarray(shape(y), 0.0d);
  return(z);
}


inline int[+] mpyIII(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sx = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : mpyIII(xel,yel);
        } : genarray(sx, 0);
  return(z);
}






inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
        z = reshape([prod(shape(y))],y);
        return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
        z = reshape([prod(shape(y))],y);
        return(z);
}

inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int DFLOOR(double y, double QUADct)
{ /* Fuzzy floor */
  /* Definition taken from SHARP APL Refman May 1991, p.6-23
   * floor:  n <- (signum y) times nofuzzfloor 0.5+abs y)
   *         z <- n-(QUADct times 1 max abs y)<(n-y)
   * If you want a double result,  write: "y - 1| y".
   */
   n = tod(floor(0.5+fabs(y)));
   if (y < 0.0)
        n = -n;
   else if (0.0 == y)
        n = 0.0;
   range = fabs(y);
   if (1.0 > range)
        range = 1.0;
   fuzzlim = QUADct*range;
   ny = n-y;
   if (fuzzlim < ny)
        z = n - 1.0;
   else
        z = n;
   return(toi(z));
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] TRANSPOSE(int[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), 0);
  return(z);
}

inline int[.] slBII(bool[.] x, int[.] y)
{/* Boolean vector compress vector */
 zxrho = sum(toi(x));
 z = genarray([zxrho], 0);
 zi = 0;
 for(i=0; i<shape(x)[0]; i++)
   if ( x[i]) {
    z[[zi]] = y[[i]];
    zi++;
   }
 return(z);
}

inline int plusslXIIFOLD(int[.] y)
{ /* First/last axis fold-based reduction of vector */
  lim = shape(y)[0]-1;
  z = with {
        (0*shape(y) <= iv < shape(y))
                : ItoI(y[lim-iv]);
       } :  fold( plusIII, ItoI(0));
  return(z);
}


inline int mpyXII(int y)
{ /* signum int/double */
   if( toI(0) == y) {
    z = 0;
  } else {
    if( toI(0) < y) {
      z = 1;
    } else {
      z = -1;
    }
  }
  return(z);
}

inline double mpyDDD(double x, double y)
{ return(DtoD(x)*DtoD(y));
}

inline int[+] mpyIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] mpyIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : mpyIII(xel,y);
  } : genarray( shape(x), 0);
  return(z);
}


inline int STSCfloorXDI(double y ,double QUADct)
{ 
/*
 ?
*/
A_19=minXDI( y,QUADct);
r_0=( A_19);
 return(r_0);
}

inline int[.] tjckXII(int[.,.] ymd,double QUADct,int QUADio)
{ 
/*
 ?
*/
A_50=slBII([true,false,false],ymd);
 A_51=plusslXIIFOLD( A_50);
 yr_0=( A_51);
 A_56=slBII([false,true,false],ymd);
 A_57=plusslXIIFOLD( A_56);
 mo_0=( A_57);
 A_62=slBII([false,false,true],ymd);
 A_63=plusslXIIFOLD( A_62);
 day_0=( A_63);
 coeff_0=( [365.0, 0.25, 0.01, 0.0025, 0.00025]);
 mlen_0=( [0, 31, 61, 92, 122, 153, 184, 214, 245, 275, 306, 337]);
 /* dsf scalar(s) */
A_70=divIID(1066,100);
 A_72=STSCfloorXDI( A_70,QUADct);
 /* dsf scalar(s) */
A_73=mpyIII(100,A_72);
 /* dsf scalar(s) */
A_75=ltIIB(yr_0,100);
 /* dsf scalar(s) */
A_76=mpyBII(A_75,A_73);
 /* dsf scalar(s) */
A_77=plusIII(-1,A_76);
 /* dsf scalar(s) */
A_79=gtIIB(mo_0,2);
 /* dsf Check needed */
A_80=plusBII(A_79,A_77);
 /* dsf Check needed */
A_81=plusIII(yr_0,A_80);
 yr_1=( A_81);
 A_83=jotdotmpyIDD(yr_1,coeff_0);
 A_91=STSCfloorCLONE4XDI( A_83,QUADct);
 A_92=plusdotmpyIIITRANSPOSE(A_91,[1, 1, -1, 1, -1]);
 dno_0=( A_92);
 /* dsf scalar(s) */
A_100=barIII(mo_0,3);
 /* dsf scalar(s) */
A_102=modIII(12,A_100);
 A_103= ABC(toi(A_102)-QUADio,shape(mlen_0)[0]);
A_105=indr(mlen_0,A_103);
/* dsf Check needed */
A_106=plusIII(day_0,A_105);
 /* dsf scalar(s) */
A_107=plusIII(dno_0,A_106);
 dno_1=( A_107);
 return(dno_1);
}

inline double BjckIID(int n , int[.] ts,double QUADct,int QUADio)
{ 
/*
 ?
*/
r_0=( false);
 A_30=iotaXII( n,QUADio);
 A_CTR31_= 0;
A_CTR31z_ = (shape(A_30)[[0]])-1;
r_2=toD(r_0);
for(; A_CTR31_ <= A_CTR31z_; A_CTR31_++){
i_0 = A_30[[A_CTR31_]];
 A_33=rhoIII([1, 3],ts);
 A_34=sl1III(i_0,A_33);
 A_37=tjckXII( A_34,QUADct,QUADio);
 /* dsf Scalar & clique */
A_38=barDDD(0.5,0.5);
 /* dsf scalar(s) */
A_39=plusDID(A_38,A_37);
 A_40=plusslXDDFOLD( A_39);
 /* dsf Scalar & clique */
A_44=plusDDD(r_2,A_40);
 r_2=( A_44);
 }
 return(r_2);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 3000);
 QUADrl_1=( 16807);
 QUADpp_1=( 17);
 QUADpw_1=( 80);
 A_60=BjckIID(n_0,[2005, 11, 24],QUADct_0,QUADio_1);
 r_0=( A_60);
 A_64=quadXDD( r_0,QUADpp_1,QUADpw_1);
 /* dsf scalar(s) */
A_65=barDDD(3295511130000.5,0.5);
 /* dsf scalar(s) */
A_67=eqDDB(r_0,A_65,QUADct_0);
 /* dsf scalar(s) */
A_68=barBBI(true,A_67);
 r_1=( A_68);
 A_72=quadXII( A_68,QUADpp_1,QUADpw_1);
 return(r_1);
}

inline int[.,.] STSCfloorCLONE4XDI(double[.,.] y ,double QUADct)
{ 
/*
 ?
*/
A_19=minXDI( y,QUADct);
r_0=( A_19);
 return(r_0);
}


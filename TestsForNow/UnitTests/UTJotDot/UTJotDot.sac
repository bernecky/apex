module UTJotDot;

use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

/* Compiled by APEX Version: CLEAR WS 2021-02-24 18:57:41.557 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


export all;

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double[+] plusDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
	( . <= iv <= .) {
        	yel = toD(y[iv]);
      		} : plusDDD(xel,yel);
	} : genarray(shape(y), 0.0d);
  return(z);
}


inline double[+] plusDDD(double x, double[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
	( . <= iv <= .) {
        	yel = toD(y[iv]);
      		} : plusDDD(xel,yel);
	} : genarray(shape(y), 0.0d);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : plusIII(xel,yel);
	} : genarray(shape(y), 0);
  return(z);
}


inline int[.] comaXII(int y)
{ /* Ravel of scalar */
  return([y]);
}

inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}




inline bool[.] takeIBB(int x, bool y)
{ /* Scalar take scalar */
  return(take([toi(x)],[y]));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline bool sameIIB(int x, int y)
{ /* Scalar match scalar */
  z = eqIIB(toI(x), toI(y));
 return(z);
}



inline bool sameIDB(int[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameBBB(bool[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqBBB(toB( x),  toB( y)))));
  return(z);
}



inline int jotdotplusIII(int x, int y)
{ /* SxS outer product */
  z = plusIII(toI(x),toI(y));
  return(z);
}


inline double[*] jotdotplusIDD(int x, double[+] y)
{ /* SxA outer product */
  z = plusDDD(toD(x),toD(y));
  return(z);
}


inline double[*] jotdotplusDID(double [+] x, int y)
{ /* AxS outer product */
  z = plusDDD(toD(x),toD(y));
  return(z);
}


inline int[*] jotdotmpyIII(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0);
 z = with {
        (. <= iv <= .) {
         xitem = toI(x[iv]);
        } : mpyIII(xitem, toI(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline bool[*] jotdoteqDDB(double [+] x, double [+] y,double QUADct)
{ /* AxA outer product */
 cell = genarray(shape(y), false);
 z = with {
        (. <= iv <= .) {
         xitem = toD(x[iv]);
        } : eqDDB(xitem, toD(y), QUADct);
        } : genarray(shape(x), cell);
 return(z);
}

inline bool[*] jotdoteqCCB(char [+] x, char [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), false);
 z = with {
        (. <= iv <= .) {
         xitem = toC(x[iv]);
        } : eqCCB(xitem, toC(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline int[*] jotdotplusIII(int x, int[+] y)
{ /* SxA outer product */
  z = plusIII(toI(x),toI(y));
  return(z);
}


inline int[*] jotdotplusIII(int [+] x, int y)
{ /* AxS outer product */
  z = plusIII(toI(x),toI(y));
  return(z);
}


inline int[*] jotdotplusIII(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0);
 z = with {
        (. <= iv <= .) {
         xitem = toI(x[iv]);
        } : plusIII(xitem, toI(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqDDB(double[+] x, double[+] y,double QUADct)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqDDB(xel,yel, QUADct);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline double[+] plusDDD(double[+] x, double y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : plusDDD(xel,y);
	} : genarray( shape(x), 0.0d);
  return(z);
}


inline int[+] mpyIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : mpyIII(xel,yel);
	} : genarray(shape(y), 0);
  return(z);
}


inline bool[+] eqDDB(double x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
	( . <= iv <= .) {
        	yel = toD(y[iv]);
      		} : eqDDB(xel,yel, QUADct);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
	( . <= iv <= .) {
        	yel = toC(y[iv]);
      		} : eqCCB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline int[+] plusIII(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : plusIII(xel,y);
	} : genarray( shape(x), 0);
  return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline bool eqBBB(bool x, bool y)
{ /* A=B on non-doubles */
 return(BtoB(x) == BtoB(y));
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline bool eqCCB(char x, char y)
{ /* A=B on non-doubles */
 return(CtoC(x) == CtoC(y));
}

inline bool[+] eqDDB(double[+] x, double y,double QUADct)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqDDB(xel,y, QUADct);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : eqIIB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqIIB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
	( . <= iv <= .) {
        	yel = toB(y[iv]);
      		} : eqBBB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqBBB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int UTJotDot_mainXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 A_68=jotdotplusIII(2,3);
 A_76=sameIIB(5,A_68);
 r_0=( A_76);
 A_79=iotaXII( 5,QUADio_0);
 /* dsf scalar(s) */
A_80=plusDID(0.5,A_79);
 /* dsf scalar(s) */
A_81=plusDDD(-2.5,A_80);
 A_82=jotdotplusIDD(2,A_81);
 A_90=iotaXII( 5,QUADio_0);
 A_92=sameIDB(A_90,A_82,QUADct_0);
 A_93=comaBBB(r_0,A_92);
 r_1=( A_93);
 A_96=iotaXII( 5,QUADio_0);
 /* dsf scalar(s) */
A_97=plusDID(0.5,A_96);
 /* dsf scalar(s) */
A_98=plusDDD(-2.5,A_97);
 A_99=jotdotplusDID(A_98,2);
 A_107=iotaXII( 5,QUADio_0);
 A_109=sameIDB(A_107,A_99,QUADct_0);
 A_110=comaBBB(r_1,A_109);
 r_2=( A_110);
 A_112=jotdotmpyIII([2, 3],[1, 2, 3]);
 A_119=rhoIII([2, 3],[2, 4, 6, 3, 6, 9]);
 A_121=sameIIB(A_119,A_112);
 A_122=comaBBB(r_2,A_121);
 r_3=( A_122);
 A_125=iotaXII( 4,QUADio_0);
 /* dsf scalar(s) */
A_126=plusDID(0.5,A_125);
 A_128=iotaXII( 4,QUADio_0);
 /* dsf scalar(s) */
A_129=plusDID(0.5,A_128);
 A_130=jotdoteqDDB(A_129,A_126,QUADct_0);
 A_138=takeIBB(5,true);
 A_139=rhoIBB([4, 4],A_138);
 A_141=sameBBB(A_139,A_130);
 A_142=comaBBB(r_3,A_141);
 r_4=( A_142);
 A_144=jotdoteqCCB(['a','b','c','d'],['a','b','c','d','e','f']);
 A_152=takeIBB(7,true);
 A_153=rhoIBB([4, 6],A_152);
 A_155=sameBBB(A_153,A_144);
 A_156=comaBBB(r_4,A_155);
 r_5=( A_156);
 A_159=iotaXII( 6,QUADio_0);
 A_160=rhoIII([2, 3],A_159);
 A_161=jotdotplusIII(2,A_160);
 A_169=iotaXII( 6,QUADio_0);
 /* dsf scalar(s) */
A_170=plusIII(2,A_169);
 A_171=rhoIII([2, 3],A_170);
 A_173=sameIIB(A_171,A_161);
 A_174=comaBBB(r_5,A_173);
 r_6=( A_174);
 A_177=iotaXII( 6,QUADio_0);
 A_178=rhoIII([2, 3],A_177);
 A_179=jotdotplusIII(A_178,2);
 A_187=iotaXII( 6,QUADio_0);
 /* dsf scalar(s) */
A_188=plusIII(2,A_187);
 A_189=rhoIII([2, 3],A_188);
 A_191=sameIIB(A_189,A_179);
 A_192=comaBBB(r_6,A_191);
 r_7=( A_192);
 A_194=comaXII( 2);
 A_195=jotdotplusIII(A_194,[2, 3, 4]);
 A_202=rhoIII([1, 3],[4, 5, 6]);
 A_204=sameIIB(A_202,A_195);
 A_205=comaBBB(r_7,A_204);
 r_8=( A_205);
 A_207=comaXII( 2);
 A_208=jotdotplusIII([2, 3, 4],A_207);
 A_215=rhoIII([3, 1],[4, 5, 6]);
 A_217=sameIIB(A_215,A_208);
 A_218=comaBBB(r_8,A_217);
 r_9=( A_218);
 A_222=quadXBB( r_9,QUADpp_0,QUADpw_0);
 A_223=andslXBBQUICKSTOP( r_9);
 /* dsf scalar(s) */
A_227=barBBI(true,A_223);
 A_230=quadXII( A_227,QUADpp_0,QUADpw_0);
 r_10=( A_230);
 return(r_10);
}


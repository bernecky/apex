
/*-----------------------------------------------*/

module UTDScalarB;

export { UTDScalarB_mainXXI};


/*
 *  type definitions
 */

external typedef sacprelude_d::SACarg;

external SACarg SACARGcopy( SACarg);
external void SACARGfree( SACarg);

external classtype World::World;
external classtype Terminal::Terminal;
external classtype TermFile::TermFile;
external typedef String::string;

external string copy_string( string);
external void free_string( string);



/*
 *  prototypes for externals (FUNDECS)
 */

external Terminal::Terminal *, TermFile::TermFile * TermFile::printf( Terminal::Terminal *_rso_69_TheTerminal { ,NN } , TermFile::TermFile *_rso_68_stdout { ,NN } , String::string FORMAT { ,NN } , ...)
/*
 *  printf ::  ---
 */;

external String::string String::to_string( char[.] A { ,NN } , int LENGTH { ,NN } )
/*
 *  to_string ::  ---
 */;

external TermFile::TermFile * ArrayIO::showarray( TermFile::TermFile *stream { ,NN } , int d { ,NN } , int[.] s { ,NN } , char[*] a { ,NN } )
/*
 *  showarray ::  ---
 */;



/*
 *  prototypes for locals (FUNDEFS)
 */

external bool[*] Array::!( bool[*] A { ,NN } )
/*
 *  ! :: { bool[*] -> ( bool[*]),
           bool -> ( bool),
           bool[+] -> ( bool[+])}
 *  dispatching to: ArrayArith::!,
 *                  ScalarArith::!
 */;

external /* sticky */
int[.], int[.], int[.], int[.] sacprelude_d::partitionSlicer( int[*] min { ,NN } , int[*] max { ,NN } , int[*] axis { ,NN } , int[*] lb { ,NN } , int[*] ub { ,NN } )
/*
 *  partitionSlicer :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}},
                         int[+] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}},
                         int[.] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}}}
 *  dispatching to: sacprelude_d::partitionSlicer
 */;

external /* sticky */
int[.] sacprelude_d::partitionIntersectMax( int[*] PWLbound1 { ,NN } , int[*] ivmin { ,NN } )
/*
 *  partitionIntersectMax :: { int[*] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[+] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[.] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])}}
 *  dispatching to: sacprelude_d::partitionIntersectMax,
 *                  sacprelude_d::partitionIntersectMax
 */;

external /* sticky */
bool[.] sacprelude_d::isPartitionIntersectNull( int[*] idxmin { ,NN } , int[*] idxmax { ,NN } , int[*] bound1 { ,NN } , int[*] bound2 { ,NN } )
/*
 *  isPartitionIntersectNull :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[+] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[.] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}},
                                  int -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[+] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[.] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])}},
                                           int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])},
                                                    int[+] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])},
                                                    int[.] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])}}},
                                  int[+] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}},
                                  int[.] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}}}
 *  dispatching to: sacprelude_d::isPartitionIntersectNull,
 *                  sacprelude_d::isPartitionIntersectNull
 */;

external /* sticky */
int[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { int[*] -> ( int[*])},
                             int -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
float[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { float[*] -> ( float[*])},
                             int -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
double[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { double[*] -> ( double[*])},
                             int -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
bool[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { bool[*] -> ( bool[*])},
                             int -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
char[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { char[*] -> ( char[*])},
                             int -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
byte[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { byte[*] -> ( byte[*])},
                             int -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
short[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { short[*] -> ( short[*])},
                             int -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
long[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { long[*] -> ( long[*])},
                             int -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
longlong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { longlong[*] -> ( longlong[*])},
                             int -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ubyte[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
                             int -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ushort[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ushort[*] -> ( ushort[*])},
                             int -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
uint[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { uint[*] -> ( uint[*])},
                             int -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ulong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ulong[*] -> ( ulong[*])},
                             int -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
ulonglong[*] sacprelude_d::_selSxADistmemLocal( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
                             int -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::_selSxADistmemLocal
 */;

external /* sticky */
int[.] sacprelude_d::partitionIntersectMin( int[*] PWLbound2 { ,NN } , int[*] ivmax { ,NN } )
/*
 *  partitionIntersectMin :: { int[*] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[+] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[.] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])}}
 *  dispatching to: sacprelude_d::partitionIntersectMin,
 *                  sacprelude_d::partitionIntersectMin
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParams( bool[*] p { ,NN } , int[*] i { ,NN } , int[*] iv { ,NN } )
/*
 *  adjustLacFunParams :: { bool[*] -> { int[*] -> { int[*] -> ( int[*]),
                                                     int[+] -> ( int[*]),
                                                     int[.] -> ( int[*])}}}
 *  dispatching to: sacprelude_d::adjustLacFunParams
 */;

external int[*] Array::/( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  / :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::/,
 *                  ArrayArith::/,
 *                  ArrayArith::/,
 *                  ScalarArith::/
 */;

external /* sticky */
int sacprelude_d::prod( int[*] v { ,NN } )
/*
 *  prod :: { int[*] -> ( int),
              int[+] -> ( int),
              int[.] -> ( int)}
 *  dispatching to: sacprelude_d::prod
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParamsReshape( bool[*] p { ,NN } , int[*] i { ,NN } , int[*] iv { ,NN } , int[*] shp { ,NN } )
/*
 *  adjustLacFunParamsReshape :: { bool[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])},
                                                            int[+] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])},
                                                            int[.] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])}}}}
 *  dispatching to: sacprelude_d::adjustLacFunParamsReshape
 */;

external int[*] Array::-( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  - :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::-,
 *                  ArrayArith::-,
 *                  ArrayArith::-,
 *                  ScalarArith::-
 */;

external /* sticky */
bool sacprelude_d::eq( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  eq :: { int[*] -> { int[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( float[*] A { ,NN } , float[*] B { ,NN } )
/*
 *  eq :: { float[*] -> { float[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  eq :: { double[*] -> { double[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  eq :: { bool[*] -> { bool[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( char[*] A { ,NN } , char[*] B { ,NN } )
/*
 *  eq :: { char[*] -> { char[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( byte[*] A { ,NN } , byte[*] B { ,NN } )
/*
 *  eq :: { byte[*] -> { byte[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( short[*] A { ,NN } , short[*] B { ,NN } )
/*
 *  eq :: { short[*] -> { short[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( long[*] A { ,NN } , long[*] B { ,NN } )
/*
 *  eq :: { long[*] -> { long[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( longlong[*] A { ,NN } , longlong[*] B { ,NN } )
/*
 *  eq :: { longlong[*] -> { longlong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ubyte[*] A { ,NN } , ubyte[*] B { ,NN } )
/*
 *  eq :: { ubyte[*] -> { ubyte[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ushort[*] A { ,NN } , ushort[*] B { ,NN } )
/*
 *  eq :: { ushort[*] -> { ushort[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( uint[*] A { ,NN } , uint[*] B { ,NN } )
/*
 *  eq :: { uint[*] -> { uint[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ulong[*] A { ,NN } , ulong[*] B { ,NN } )
/*
 *  eq :: { ulong[*] -> { ulong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external /* sticky */
bool sacprelude_d::eq( ulonglong[*] A { ,NN } , ulonglong[*] B { ,NN } )
/*
 *  eq :: { ulonglong[*] -> { ulonglong[*] -> ( bool)}}
 *  dispatching to: sacprelude_d::eq
 */;

external int[*] Array::+( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  + :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::+,
 *                  ArrayArith::+,
 *                  ArrayArith::+,
 *                  ScalarArith::+
 */;

external bool Array::!=( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  != :: { bool[*] -> { bool[*] -> ( bool),
                         bool -> ( bool)},
            bool -> { bool[*] -> ( bool),
                      bool -> ( bool)}}
 *  dispatching to: ScalarArith::!=
 */;

external /* sticky */
int[.], int[.], int[.] sacprelude_d::gridFiller( int[*] lb { ,NN } , int[*] ub { ,NN } , int[*] wdth { ,NN } , int[*] dim { ,NN } , int[*] maxwidth { ,NN } )
/*
 *  gridFiller :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}},
                    int[+] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}},
                    int[.] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}}}
 *  dispatching to: sacprelude_d::gridFiller
 */;

external /* sticky */
bool[.] sacprelude_d::isPartitionIntersect1Part( int[*] idxmin { ,NN } , int[*] idxmax { ,NN } , int[*] bound1 { ,NN } , int[*] bound2 { ,NN } )
/*
 *  isPartitionIntersect1Part :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[+] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[.] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}},
                                   int -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[+] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[.] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])}},
                                            int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])},
                                                     int[+] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])},
                                                     int[.] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])}}},
                                   int[+] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}},
                                   int[.] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}}}
 *  dispatching to: sacprelude_d::isPartitionIntersect1Part,
 *                  sacprelude_d::isPartitionIntersect1Part
 */;

external /* sticky */
int{0} sacprelude_d::zero( int[*] A { ,NN } )
/*
 *  zero :: { int[*] -> ( int{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
double{0.0...} sacprelude_d::zero( double[*] A { ,NN } )
/*
 *  zero :: { double[*] -> ( double{0.0...})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
float{0.0...} sacprelude_d::zero( float[*] A { ,NN } )
/*
 *  zero :: { float[*] -> ( float{0.0...})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
char{ } sacprelude_d::zero( char[*] A { ,NN } )
/*
 *  zero :: { char[*] -> ( char{ })}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
bool{0} sacprelude_d::zero( bool[*] A { ,NN } )
/*
 *  zero :: { bool[*] -> ( bool{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
byte{} sacprelude_d::zero( byte[*] A { ,NN } )
/*
 *  zero :: { byte[*] -> ( byte{})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
short{0} sacprelude_d::zero( short[*] A { ,NN } )
/*
 *  zero :: { short[*] -> ( short{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
long{0} sacprelude_d::zero( long[*] A { ,NN } )
/*
 *  zero :: { long[*] -> ( long{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
longlong{0} sacprelude_d::zero( longlong[*] A { ,NN } )
/*
 *  zero :: { longlong[*] -> ( longlong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ubyte{} sacprelude_d::zero( ubyte[*] A { ,NN } )
/*
 *  zero :: { ubyte[*] -> ( ubyte{})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ushort{0} sacprelude_d::zero( ushort[*] A { ,NN } )
/*
 *  zero :: { ushort[*] -> ( ushort{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
uint{0} sacprelude_d::zero( uint[*] A { ,NN } )
/*
 *  zero :: { uint[*] -> ( uint{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ulong{0} sacprelude_d::zero( ulong[*] A { ,NN } )
/*
 *  zero :: { ulong[*] -> ( ulong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
ulonglong{0} sacprelude_d::zero( ulonglong[*] A { ,NN } )
/*
 *  zero :: { ulonglong[*] -> ( ulonglong{0})}
 *  dispatching to: sacprelude_d::zero
 */;

external /* sticky */
int sacprelude_d::partitionMax( int[*] x { ,NN } , int[*] y { ,NN } )
/*
 *  partitionMax :: { int[*] -> { int[*] -> ( int),
                                  int -> ( int)},
                      int -> { int[*] -> ( int),
                               int -> ( int)}}
 *  dispatching to: sacprelude_d::partitionMax
 */;

external int Array::--( int[*] A { ,NN } )
/*
 *  -- :: { int[*] -> ( int),
            int -> ( int)}
 *  dispatching to: ScalarArith::--
 */;

external bool[*] Array::>=( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  >= :: { int[*] -> { int[*] -> ( bool[*]),
                        int -> ( bool[*]),
                        int[+] -> ( bool[+])},
            int -> { int[*] -> ( bool[*]),
                     int -> ( bool),
                     int[+] -> ( bool[+])},
            int[+] -> { int[*] -> ( bool[+]),
                        int -> ( bool[+]),
                        int[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::>=,
 *                  ArrayArith::>=,
 *                  ArrayArith::>=,
 *                  ScalarArith::>=
 */;

external bool[*] Array::&( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  & :: { bool[*] -> { bool[*] -> ( bool[*]),
                        bool -> ( bool[*]),
                        bool[+] -> ( bool[+])},
           bool -> { bool[*] -> ( bool[*]),
                     bool -> ( bool),
                     bool[+] -> ( bool[+])},
           bool[+] -> { bool[*] -> ( bool[+]),
                        bool -> ( bool[+]),
                        bool[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::&,
 *                  ArrayArith::&,
 *                  ArrayArith::&,
 *                  ScalarArith::&
 */;

external /* sticky */
int sacprelude_d::partitionMin( int[*] x { ,NN } , int[*] y { ,NN } )
/*
 *  partitionMin :: { int[*] -> { int[*] -> ( int),
                                  int -> ( int)},
                      int -> { int[*] -> ( int),
                               int -> ( int)}}
 *  dispatching to: sacprelude_d::partitionMin
 */;

external /* sticky */
int sacprelude_d::++( int[*] a { ,NN } )
/*
 *  ++ :: { int[*] -> ( int),
            int -> ( int)}
 *  dispatching to: sacprelude_d::++
 */;

external /* sticky */
int[*] sacprelude_d::sel( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { int[*] -> ( int[*])},
             int[+] -> { int[*] -> ( int[*])},
             int[.] -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
float[*] sacprelude_d::sel( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { float[*] -> ( float[*])},
             int[+] -> { float[*] -> ( float[*])},
             int[.] -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
double[*] sacprelude_d::sel( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { double[*] -> ( double[*])},
             int[+] -> { double[*] -> ( double[*])},
             int[.] -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
bool[*] sacprelude_d::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*])},
             int[.] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
char[*] sacprelude_d::sel( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { char[*] -> ( char[*])},
             int[+] -> { char[*] -> ( char[*])},
             int[.] -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
byte[*] sacprelude_d::sel( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { byte[*] -> ( byte[*])},
             int[+] -> { byte[*] -> ( byte[*])},
             int[.] -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
short[*] sacprelude_d::sel( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { short[*] -> ( short[*])},
             int[+] -> { short[*] -> ( short[*])},
             int[.] -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
long[*] sacprelude_d::sel( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { long[*] -> ( long[*])},
             int[+] -> { long[*] -> ( long[*])},
             int[.] -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
longlong[*] sacprelude_d::sel( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { longlong[*] -> ( longlong[*])},
             int[+] -> { longlong[*] -> ( longlong[*])},
             int[.] -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ubyte[*] sacprelude_d::sel( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
             int[+] -> { ubyte[*] -> ( ubyte[*])},
             int[.] -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ushort[*] sacprelude_d::sel( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ushort[*] -> ( ushort[*])},
             int[+] -> { ushort[*] -> ( ushort[*])},
             int[.] -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
uint[*] sacprelude_d::sel( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { uint[*] -> ( uint[*])},
             int[+] -> { uint[*] -> ( uint[*])},
             int[.] -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ulong[*] sacprelude_d::sel( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ulong[*] -> ( ulong[*])},
             int[+] -> { ulong[*] -> ( ulong[*])},
             int[.] -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
ulonglong[*] sacprelude_d::sel( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
             int[+] -> { ulonglong[*] -> ( ulonglong[*])},
             int[.] -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::sel
 */;

external /* sticky */
int[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { int[*] -> ( int[*])},
                             int[+] -> { int[*] -> ( int[*])},
                             int[.] -> { int[*] -> ( int[*])},
                             int[1] -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
float[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { float[*] -> ( float[*])},
                             int[+] -> { float[*] -> ( float[*])},
                             int[.] -> { float[*] -> ( float[*])},
                             int[1] -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
double[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { double[*] -> ( double[*])},
                             int[+] -> { double[*] -> ( double[*])},
                             int[.] -> { double[*] -> ( double[*])},
                             int[1] -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
bool[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { bool[*] -> ( bool[*])},
                             int[+] -> { bool[*] -> ( bool[*])},
                             int[.] -> { bool[*] -> ( bool[*])},
                             int[1] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
char[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { char[*] -> ( char[*])},
                             int[+] -> { char[*] -> ( char[*])},
                             int[.] -> { char[*] -> ( char[*])},
                             int[1] -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
byte[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { byte[*] -> ( byte[*])},
                             int[+] -> { byte[*] -> ( byte[*])},
                             int[.] -> { byte[*] -> ( byte[*])},
                             int[1] -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
short[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { short[*] -> ( short[*])},
                             int[+] -> { short[*] -> ( short[*])},
                             int[.] -> { short[*] -> ( short[*])},
                             int[1] -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
long[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { long[*] -> ( long[*])},
                             int[+] -> { long[*] -> ( long[*])},
                             int[.] -> { long[*] -> ( long[*])},
                             int[1] -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
longlong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { longlong[*] -> ( longlong[*])},
                             int[+] -> { longlong[*] -> ( longlong[*])},
                             int[.] -> { longlong[*] -> ( longlong[*])},
                             int[1] -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ubyte[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
                             int[+] -> { ubyte[*] -> ( ubyte[*])},
                             int[.] -> { ubyte[*] -> ( ubyte[*])},
                             int[1] -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ushort[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ushort[*] -> ( ushort[*])},
                             int[+] -> { ushort[*] -> ( ushort[*])},
                             int[.] -> { ushort[*] -> ( ushort[*])},
                             int[1] -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
uint[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { uint[*] -> ( uint[*])},
                             int[+] -> { uint[*] -> ( uint[*])},
                             int[.] -> { uint[*] -> ( uint[*])},
                             int[1] -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ulong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ulong[*] -> ( ulong[*])},
                             int[+] -> { ulong[*] -> ( ulong[*])},
                             int[.] -> { ulong[*] -> ( ulong[*])},
                             int[1] -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external /* sticky */
ulonglong[*] sacprelude_d::_selVxADistmemLocal( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[+] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[.] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[1] -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_d::_selVxADistmemLocal,
 *                  sacprelude_d::_selVxADistmemLocal
 */;

external World::World * World:_INIT::init_TheWorld( World::World *_OI_object { ,NN } )
/*
 *  init_TheWorld ::  ---
 */;

external World::World *, Terminal::Terminal * Terminal:_INIT::init_TheTerminal( World::World *_rso_5_TheWorld { ,NN } , Terminal::Terminal *_OI_object { ,NN } )
/*
 *  init_TheTerminal ::  ---
 */;

external Terminal::Terminal *, TermFile::TermFile * TermFile:_INIT::init_stdout( Terminal::Terminal *_rso_43_TheTerminal { ,NN } , TermFile::TermFile *_OI_object { ,NN } )
/*
 *  init_stdout ::  ---
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParams( bool[*] p { ,NN } , int[*] i { ,NN } , int[.] iv { ,NN } )
/*
 *  adjustLacFunParams ::  ---
 */;

external /* sticky */
int[*] sacprelude_d::adjustLacFunParamsReshape( bool[*] p { ,NN } , int[*] i { ,NN } , int[.] iv { ,NN } , int[.] shp { ,NN } )
/*
 *  adjustLacFunParamsReshape ::  ---
 */;

external /* sticky */
int sacprelude_d::++( int a { ,NN } )
/*
 *  ++ ::  ---
 */;

external bool[*] ArrayArith::&( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  & :: { bool[*] -> { bool[*] -> ( bool[*]),
                        bool -> ( bool[*]),
                        bool[+] -> ( bool[+])},
           bool -> { bool[*] -> ( bool[*]),
                     bool -> ( bool),
                     bool[+] -> ( bool[+])},
           bool[+] -> { bool[*] -> ( bool[+]),
                        bool -> ( bool[+]),
                        bool[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::&,
 *                  ArrayArith::&,
 *                  ArrayArith::&,
 *                  ScalarArith::&
 */;

external int sacprelude_d::*( int[*] a { ,NN } , int[*] b { ,NN } )
/*
 *  * :: { int[*] -> { int[*] -> ( int),
                       int -> ( int)},
           int -> { int[*] -> ( int),
                    int -> ( int)}}
 *  dispatching to: sacprelude_d::*
 */;

external bool sacprelude_d::and( bool[*] a { ,NN } , bool[*] b { ,NN } )
/*
 *  and :: { bool[*] -> { bool[*] -> ( bool),
                          bool -> ( bool)},
             bool -> { bool[*] -> ( bool),
                       bool -> ( bool)}}
 *  dispatching to: sacprelude_d::and
 */;

external int{1} ArrayArith::one( int[*] A { ,NN } )
/*
 *  one :: { int[*] -> ( int{1}),
             int -> ( int{1}),
             int[+] -> ( int{1}),
             int[.] -> ( int{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one
 */;

external int{1} ScalarArith::one( int[*] A { ,NN } )
/*
 *  one :: { int[*] -> ( int{1}),
             int -> ( int{1})}
 *  dispatching to: ScalarArith::one,
 *                  ScalarArith::one
 */;

external Terminal::Terminal *, TermFile::TermFile * TermFile::printf( Terminal::Terminal *_rso_13_TheTerminal { ,NN } , TermFile::TermFile *_rso_12_stdout { ,NN } , String::string[*] FORMAT { ,NN } , ...)
/*
 *  printf :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                      String::string -> ( Terminal::Terminal, TermFile::TermFile)},
                                           TermFile::TermFile -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                   String::string -> ( Terminal::Terminal, TermFile::TermFile)}},
                Terminal::Terminal -> { TermFile::TermFile[*] -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                   String::string -> ( Terminal::Terminal, TermFile::TermFile)},
                                        TermFile::TermFile -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                String::string -> ( Terminal::Terminal, TermFile::TermFile)}}}
 *  dispatching to: TermFile::printf
 */;

external String::string String::to_string( char[*] A { ,NN } , int[*] LENGTH { ,NN } )
/*
 *  to_string :: { char[*] -> { int[*] -> ( String::string),
                                int -> ( String::string)},
                   char[+] -> { int[*] -> ( String::string),
                                int -> ( String::string)},
                   char[.] -> { int[*] -> ( String::string),
                                int -> ( String::string)}}
 *  dispatching to: String::to_string
 */;

external TermFile::TermFile * ArrayIO::showarray( TermFile::TermFile *stream { ,NN } , int[*] d { ,NN } , int[*] s { ,NN } , char[*] a { ,NN } )
/*
 *  showarray :: { TermFile::TermFile[*] -> { int[*] -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                          int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                          int[.] -> { char[*] -> ( TermFile::TermFile)}},
                                              int -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[.] -> { char[*] -> ( TermFile::TermFile)}}},
                   TermFile::TermFile -> { int[*] -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[.] -> { char[*] -> ( TermFile::TermFile)}},
                                           int -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                    int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                    int[.] -> { char[*] -> ( TermFile::TermFile)}}}}
 *  dispatching to: ArrayIO::showarray
 */;

external int ArrayIO:Structures::dim( char[*] array { ,NN } )
/*
 *  dim :: { char[*] -> ( int),
             char[+] -> ( int)}
 *  dispatching to: ArrayBasics::dim,
 *                  ArrayIO:Structures::dim
 */;

external int[.] ArrayIO:Structures::shape( char[*] array { ,NN } )
/*
 *  shape :: { char[*] -> ( int[.]),
               char[+] -> ( int[.])}
 *  dispatching to: ArrayBasics::shape,
 *                  ArrayIO:Structures::shape
 */;

external char[+] ArrayFormat::format( bool[+] y { ,NN } )
/*
 *  format ::  ---
 */;

external char[1] ArrayFormat::format( bool y { ,NN } )
/*
 *  format ::  ---
 */;

external char[+] ArrayIO:ArrayFormat::format( bool[*] y { ,NN } )
/*
 *  format :: { bool[*] -> ( char[+]),
                bool -> ( char[1]),
                bool[+] -> ( char[+])}
 *  dispatching to: ArrayFormat::format,
 *                  ArrayFormat::format
 */;

external char[+] ArrayFormat::format( int[+] y { ,NN } )
/*
 *  format ::  ---
 */;

external char[.] ArrayFormat::format( int y { ,NN } )
/*
 *  format ::  ---
 */;

external char[+] ArrayIO:ArrayFormat::format( int[*] y { ,NN } )
/*
 *  format :: { int[*] -> ( char[+]),
                int -> ( char[.]),
                int[+] -> ( char[+])}
 *  dispatching to: ArrayFormat::format,
 *                  ArrayFormat::format
 */;

external bool{0} ArrayArith::zero( bool[*] A { ,NN } )
/*
 *  zero :: { bool[*] -> ( bool{0}),
              bool[+] -> ( bool{0})}
 *  dispatching to: ScalarArith::zero,
 *                  ArrayArith::zero
 */;

external bool{1} ArrayArith::one( bool[*] A { ,NN } )
/*
 *  one :: { bool[*] -> ( bool{1}),
             bool -> ( bool{1}),
             bool[+] -> ( bool{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one
 */;

external bool[*] ArrayBasics::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*])},
             int -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*])},
             int[.] -> { bool[*] -> ( bool[*])},
             int[1] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  ArrayBasics::sel
 */;

external bool[*] ArrayArith::to_bool( int[*] A { ,NN } )
/*
 *  to_bool :: { int[*] -> ( bool[*]),
                 int -> ( bool),
                 int[+] -> ( bool[+])}
 *  dispatching to: ArrayArith::to_bool,
 *                  Bool::to_bool
 */;

external int{0} ArrayArith::zero( int[*] A { ,NN } )
/*
 *  zero :: { int[*] -> ( int{0}),
              int[+] -> ( int{0})}
 *  dispatching to: ScalarArith::zero,
 *                  ArrayArith::zero
 */;



/*
 *  global objects
 */

external World::World World::TheWorld;

external Terminal::Terminal Terminal::TheTerminal;

external TermFile::TermFile TermFile::stdout;



/*
 *  function definitions (FUNDEFS)
 */



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_501_O2V__Loop_6(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_501_O2V__Loop_6( int[.] wts { ,NN } , int i { ,NN } , int[.] shp { ,NN } )
/*
 *  _dup_501_O2V__Loop_6 ::  ---
 */
{ 
  int[.] wts__SSA0_3 { , NN } ; 
  int[.] wts__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  int{1} _flat_396 { , NN } ; 
  int _flat_395 { , NN } ; 
  int _flat_394 { , NN } ; 
  int{1} _flat_393 { , NN } ; 
  int _flat_392 { , NN } ; 
  int _flat_391 { , NN } ; 
  int _flat_390 { , NN } ; 
  int{0} _flat_398 { , NN } ; 
  bool _flat_397 { , NN } ; 

  _flat_396 = 1; 
  _flat_395 = ( i wrapper:Array::+_flat_396) ; 
  _flat_394 = wrapper:UTDScalarB:Array::sel( _flat_395, shp) ; 
  _flat_393 = 1; 
  _flat_392 = ( i wrapper:Array::+_flat_393) ; 
  _flat_391 = wrapper:UTDScalarB:Array::sel( _flat_392, wts) ; 
  _flat_390 = ( _flat_391 wrapper:UTDScalarB:Array::*_flat_394) ; 
  wts__SSA0_1 = wrapper:UTDScalarB:Array::modarray( wts, i, _flat_390) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_398 = 0; 
  _flat_397 = ( i__SSA0_1 wrapper:Array::>=_flat_398) ; 
  if (_flat_397) 
  { 
    wts__SSA0_2 = UTDScalarB::_dup_501_O2V__Loop_6( wts__SSA0_1, i__SSA0_1, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_3 = ( _flat_397 ? wts__SSA0_2 : wts__SSA0_1 ); 
  return( wts__SSA0_3); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_500_O2V__Loop_4(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_500_O2V__Loop_4( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , int offset { ,NN } , int[.] shp { ,NN } )
/*
 *  _dup_500_O2V__Loop_4 ::  ---
 */
{ 
  int[.] iv__SSA0_3 { , NN } ; 
  int[.] iv__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int offset__SSA0_2 { , NN } ;  /* declared: int */
  int offset__SSA0_1 { , NN } ;  /* declared: int */
  int[.] iv__SSA0_1 { , NN } ; 
  int _flat_408 { , NN } ; 
  int _flat_407 { , NN } ; 
  int _flat_406 { , NN } ; 
  int _flat_405 { , NN } ; 
  int _flat_411 { , NN } ; 
  int _flat_410 { , NN } ; 
  int _flat_409 { , NN } ; 
  int{0} _flat_413 { , NN } ; 
  bool _flat_412 { , NN } ; 

  _flat_408 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  _flat_407 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_406 = ( offset wrapper:Array::/_flat_407) ; 
  _flat_405 = _aplmod_SxS_( _flat_406, _flat_408); 
  iv__SSA0_1 = wrapper:UTDScalarB:Array::modarray( iv, i, _flat_405) ; 
  _flat_411 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_410 = wrapper:UTDScalarB:Array::sel( i, iv__SSA0_1) ; 
  _flat_409 = ( _flat_410 wrapper:UTDScalarB:Array::*_flat_411) ; 
  offset__SSA0_1 = ( offset wrapper:Array::-_flat_409) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_413 = 0; 
  _flat_412 = ( i__SSA0_1 wrapper:Array::>=_flat_413) ; 
  if (_flat_412) 
  { 
    iv__SSA0_2 = UTDScalarB::_dup_500_O2V__Loop_4( iv__SSA0_1, wts, i__SSA0_1, offset__SSA0_2, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_3 = ( _flat_412 ? iv__SSA0_2 : iv__SSA0_1 ); 
  return( iv__SSA0_3); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_499_V2O__Loop_2(...) [ body ]
 ****************************************************************************/
int UTDScalarB::_dup_499_V2O__Loop_2( int offset { ,NN } , int wt { ,NN } , int i { ,NN } , int[.] iv { ,NN } , int[.] shp { ,NN } )
/*
 *  _dup_499_V2O__Loop_2 ::  ---
 */
{ 
  int offset__SSA0_3 { , NN } ; 
  int offset__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int wt__SSA0_1 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  int _flat_378 { , NN } ; 
  int _flat_377 { , NN } ; 
  int _flat_379 { , NN } ; 
  int{0} _flat_381 { , NN } ; 
  bool _flat_380 { , NN } ; 

  _flat_378 = wrapper:UTDScalarB:Array::sel( i, iv) ; 
  _flat_377 = ( wt wrapper:UTDScalarB:Array::*_flat_378) ; 
  offset__SSA0_1 = ( offset wrapper:Array::+_flat_377) ; 
  _flat_379 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  wt__SSA0_1 = ( wt wrapper:UTDScalarB:Array::*_flat_379) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_381 = 0; 
  _flat_380 = ( i__SSA0_1 wrapper:Array::>=_flat_381) ; 
  if (_flat_380) 
  { 
    offset__SSA0_2 = UTDScalarB::_dup_499_V2O__Loop_2( offset__SSA0_1, wt__SSA0_1, i__SSA0_1, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_3 = ( _flat_380 ? offset__SSA0_2 : offset__SSA0_1 ); 
  return( offset__SSA0_3); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::NEXXB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[14] UTDScalarB::NEXXB()
/*
 *  NEXXB :: ( bool[14])
 *  dispatching to: UTDScalarB::NEXXB
 */
{ 
  bool[14] _cwc_605 { , NN } ; 
  bool[14] _cwc_606 { , NN } ; 

  _cwc_606 = UTDScalarB::NEXXB() ; 
  _cwc_605 = _cwc_606; 
  return( _cwc_605); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::jotdotneBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB::jotdotneBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  jotdotneBBB :: { bool[*] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[+] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[.] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[4] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])}}
 *  dispatching to: UTDScalarB::jotdotneBBB,
 *                  UTDScalarB::jotdotneBBB
 */
{ 
  bool[+] _cwc_607 { , NN } ; 
  bool _cwc_668 { , NN } ; 
  int _cwc_667 { , NN } ; 
  int _cwc_666 { , NN } ; 
  bool _cwc_665 { , NN } ; 
  int _cwc_664 { , NN } ; 
  bool _cwc_663 { , NN } ; 
  bool _cwc_662 { , NN } ; 
  int{4} _cwc_661 { , NN } ; 
  int _cwc_660 { , NN } ; 
  int[1]{0} _cwc_659 { , NN } ; 
  bool _cwc_658 { , NN } ; 
  bool _cwc_657 { , NN } ; 
  int _cwc_656 { , NN } ; 
  int _cwc_655 { , NN } ; 
  bool _cwc_654 { , NN } ; 
  int _cwc_653 { , NN } ; 
  bool _cwc_652 { , NN } ; 
  bool _cwc_651 { , NN } ; 
  int{4} _cwc_650 { , NN } ; 
  int _cwc_649 { , NN } ; 
  int[1]{0} _cwc_648 { , NN } ; 
  bool _cwc_647 { , NN } ; 
  bool[4,4] _cwc_646 { , NN } ; 
  int[+] _cwc_645 { , NN } ; 
  bool[+] _cwc_644 { , NN } ; 
  int _cwc_643 { , NN } ; 
  bool[+] _cwc_642 { , NN } ; 
  int[+] _cwc_641 { , NN } ; 
  bool _cwc_640 { , NN } ; 
  int _cwc_639 { , NN } ; 
  int _cwc_638 { , NN } ; 
  bool _cwc_637 { , NN } ; 
  int _cwc_636 { , NN } ; 
  bool _cwc_635 { , NN } ; 
  bool _cwc_634 { , NN } ; 
  int{4} _cwc_633 { , NN } ; 
  int _cwc_632 { , NN } ; 
  int[1]{0} _cwc_631 { , NN } ; 
  bool _cwc_630 { , NN } ; 
  bool[+] _cwc_629 { , NN } ; 
  int[+] _cwc_628 { , NN } ; 
  bool[+] _cwc_627 { , NN } ; 
  int _cwc_626 { , NN } ; 
  bool[+] _cwc_625 { , NN } ; 
  int _cwc_624 { , NN } ; 
  bool _cwc_623 { , NN } ; 
  int _cwc_622 { , NN } ; 
  int _cwc_621 { , NN } ; 
  bool _cwc_620 { , NN } ; 
  int _cwc_619 { , NN } ; 
  bool _cwc_618 { , NN } ; 
  bool _cwc_617 { , NN } ; 
  int{4} _cwc_616 { , NN } ; 
  int _cwc_615 { , NN } ; 
  int[1]{0} _cwc_614 { , NN } ; 
  bool _cwc_613 { , NN } ; 
  bool[+] _cwc_612 { , NN } ; 
  int[+] _cwc_611 { , NN } ; 
  bool[+] _cwc_610 { , NN } ; 
  int _cwc_609 { , NN } ; 
  bool[+] _cwc_608 { , NN } ; 

  _cwc_666 = _dim_A_( x); 
  _cwc_667 = 0; 
  _cwc_668 = _gt_SxS_( _cwc_666, _cwc_667); 
  if (_cwc_668) 
  { 
    _cwc_624 = _dim_A_( x); 
    _cwc_664 = 1; 
    _cwc_665 = _eq_SxS_( _cwc_624, _cwc_664); 
    if (_cwc_665) 
    { 
      _cwc_641 = _shape_A_( x); 
      _cwc_658 = true; 
      _cwc_661 = 4; 
      _cwc_659 = [ 0 ]; 
      _cwc_660 = _sel_VxA_( _cwc_659, _cwc_641); 
      _cwc_662 = _eq_SxS_( _cwc_660, _cwc_661); 
      _cwc_663 = _and_SxS_( _cwc_662, _cwc_658); 
      if (_cwc_663) 
      { 
        _cwc_655 = _dim_A_( y); 
        _cwc_656 = 0; 
        _cwc_657 = _gt_SxS_( _cwc_655, _cwc_656); 
        if (_cwc_657) 
        { 
          _cwc_643 = _dim_A_( y); 
          _cwc_653 = 1; 
          _cwc_654 = _eq_SxS_( _cwc_643, _cwc_653); 
          if (_cwc_654) 
          { 
            _cwc_645 = _shape_A_( y); 
            _cwc_647 = true; 
            _cwc_650 = 4; 
            _cwc_648 = [ 0 ]; 
            _cwc_649 = _sel_VxA_( _cwc_648, _cwc_645); 
            _cwc_651 = _eq_SxS_( _cwc_649, _cwc_650); 
            _cwc_652 = _and_SxS_( _cwc_651, _cwc_647); 
            if (_cwc_652) 
            { 
              _cwc_646 = UTDScalarB::jotdotneBBB( x, y) ; 
              _cwc_607 = _cwc_646; 
            }
            else
            { 
              _cwc_644 = UTDScalarB::jotdotneBBB( x, y) ; 
              _cwc_607 = _cwc_644; 
            }
          }
          else
          { 
            _cwc_642 = UTDScalarB::jotdotneBBB( x, y) ; 
            _cwc_607 = _cwc_642; 
          }
        }
        else
        { 
          _cwc_607 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotneBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
      else
      { 
        _cwc_638 = _dim_A_( y); 
        _cwc_639 = 0; 
        _cwc_640 = _gt_SxS_( _cwc_638, _cwc_639); 
        if (_cwc_640) 
        { 
          _cwc_626 = _dim_A_( y); 
          _cwc_636 = 1; 
          _cwc_637 = _eq_SxS_( _cwc_626, _cwc_636); 
          if (_cwc_637) 
          { 
            _cwc_628 = _shape_A_( y); 
            _cwc_630 = true; 
            _cwc_633 = 4; 
            _cwc_631 = [ 0 ]; 
            _cwc_632 = _sel_VxA_( _cwc_631, _cwc_628); 
            _cwc_634 = _eq_SxS_( _cwc_632, _cwc_633); 
            _cwc_635 = _and_SxS_( _cwc_634, _cwc_630); 
            if (_cwc_635) 
            { 
              _cwc_629 = UTDScalarB::jotdotneBBB( x, y) ; 
              _cwc_607 = _cwc_629; 
            }
            else
            { 
              _cwc_627 = UTDScalarB::jotdotneBBB( x, y) ; 
              _cwc_607 = _cwc_627; 
            }
          }
          else
          { 
            _cwc_625 = UTDScalarB::jotdotneBBB( x, y) ; 
            _cwc_607 = _cwc_625; 
          }
        }
        else
        { 
          _cwc_607 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotneBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_621 = _dim_A_( y); 
      _cwc_622 = 0; 
      _cwc_623 = _gt_SxS_( _cwc_621, _cwc_622); 
      if (_cwc_623) 
      { 
        _cwc_609 = _dim_A_( y); 
        _cwc_619 = 1; 
        _cwc_620 = _eq_SxS_( _cwc_609, _cwc_619); 
        if (_cwc_620) 
        { 
          _cwc_611 = _shape_A_( y); 
          _cwc_613 = true; 
          _cwc_616 = 4; 
          _cwc_614 = [ 0 ]; 
          _cwc_615 = _sel_VxA_( _cwc_614, _cwc_611); 
          _cwc_617 = _eq_SxS_( _cwc_615, _cwc_616); 
          _cwc_618 = _and_SxS_( _cwc_617, _cwc_613); 
          if (_cwc_618) 
          { 
            _cwc_612 = UTDScalarB::jotdotneBBB( x, y) ; 
            _cwc_607 = _cwc_612; 
          }
          else
          { 
            _cwc_610 = UTDScalarB::jotdotneBBB( x, y) ; 
            _cwc_607 = _cwc_610; 
          }
        }
        else
        { 
          _cwc_608 = UTDScalarB::jotdotneBBB( x, y) ; 
          _cwc_607 = _cwc_608; 
        }
      }
      else
      { 
        _cwc_607 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotneBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_607 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotneBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
  }
  return( _cwc_607); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::quadXII(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
Terminal::Terminal *, TermFile::TermFile *, int[*] UTDScalarB::quadXII( Terminal::Terminal *_rso_488_TheTerminal { ,NN } , TermFile::TermFile *_rso_487_stdout { ,NN } , int[*] y { ,NN } , int[*] QUADpp { ,NN } , int[*] QUADpw { ,NN } )
/*
 *  quadXII :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> { int[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                               int -> ( Terminal::Terminal, TermFile::TermFile, int[*])},
                                                                                   int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                            int -> ( Terminal::Terminal, TermFile::TermFile, int[*])}},
                                                                       int -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                            int -> ( Terminal::Terminal, TermFile::TermFile, int)},
                                                                                int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int)}}},
                                            TermFile::TermFile -> { int[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                            int -> ( Terminal::Terminal, TermFile::TermFile, int[*])},
                                                                                int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int[*])}},
                                                                    int -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int)},
                                                                             int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                      int -> ( Terminal::Terminal, TermFile::TermFile, int)}}}},
                 Terminal::Terminal -> { TermFile::TermFile[*] -> { int[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                            int -> ( Terminal::Terminal, TermFile::TermFile, int[*])},
                                                                                int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int[*])}},
                                                                    int -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int)},
                                                                             int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                      int -> ( Terminal::Terminal, TermFile::TermFile, int)}}},
                                         TermFile::TermFile -> { int[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int[*])},
                                                                             int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                      int -> ( Terminal::Terminal, TermFile::TermFile, int[*])}},
                                                                 int -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                      int -> ( Terminal::Terminal, TermFile::TermFile, int)},
                                                                          int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                   int -> ( Terminal::Terminal, TermFile::TermFile, int)}}}}}
 *  dispatching to: UTDScalarB::quadXII,
 *                  UTDScalarB::quadXII
 */
{ 
  int[*] _cwc_671 { , NN } ; 
  TermFile::TermFile _cwc_670 { , NN } ; 
  Terminal::Terminal _cwc_669 { , NN } ; 
  bool _cwc_692 { , NN } ; 
  int _cwc_691 { , NN } ; 
  bool _cwc_690 { , NN } ; 
  int _cwc_689 { , NN } ; 
  bool _cwc_688 { , NN } ; 
  int _cwc_687 { , NN } ; 
  Terminal::Terminal _cwc_686 { , NN } ; 
  TermFile::TermFile _cwc_685 { , NN } ; 
  int _cwc_684 { , NN } ; 
  int _cwc_683 { , NN } ; 
  int _cwc_682 { , NN } ; 
  int _cwc_681 { , NN } ; 
  bool _cwc_680 { , NN } ; 
  int _cwc_679 { , NN } ; 
  bool _cwc_678 { , NN } ; 
  int _cwc_677 { , NN } ; 
  Terminal::Terminal _cwc_676 { , NN } ; 
  TermFile::TermFile _cwc_675 { , NN } ; 
  int[*] _cwc_674 { , NN } ; 
  int _cwc_673 { , NN } ; 
  int _cwc_672 { , NN } ; 

  _cwc_681 = _dim_A_( y); 
  _cwc_691 = 0; 
  _cwc_692 = _eq_SxS_( _cwc_681, _cwc_691); 
  if (_cwc_692) 
  { 
    _cwc_682 = _dim_A_( QUADpp); 
    _cwc_689 = 0; 
    _cwc_690 = _eq_SxS_( _cwc_682, _cwc_689); 
    if (_cwc_690) 
    { 
      _cwc_683 = _dim_A_( QUADpw); 
      _cwc_687 = 0; 
      _cwc_688 = _eq_SxS_( _cwc_683, _cwc_687); 
      if (_cwc_688) 
      { 
        _cwc_686, _cwc_685, _cwc_684 = UTDScalarB::quadXII( _rso_488_TheTerminal, _rso_487_stdout, y, QUADpp, QUADpw) ; 
        _cwc_669 = _cwc_686; 
        _cwc_670 = _cwc_685; 
        _cwc_671 = _cwc_684; 
      }
      else
      { 
        _cwc_669, _cwc_670, _cwc_671 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, int[*], "UTDScalarB::quadXII :: Terminal::Terminal TermFile::TermFile int[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile int[*] ", _rso_488_TheTerminal, _rso_487_stdout, y, QUADpp, QUADpw); 
      }
    }
    else
    { 
      _cwc_669, _cwc_670, _cwc_671 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, int[*], "UTDScalarB::quadXII :: Terminal::Terminal TermFile::TermFile int[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile int[*] ", _rso_488_TheTerminal, _rso_487_stdout, y, QUADpp, QUADpw); 
    }
  }
  else
  { 
    _cwc_672 = _dim_A_( QUADpp); 
    _cwc_679 = 0; 
    _cwc_680 = _eq_SxS_( _cwc_672, _cwc_679); 
    if (_cwc_680) 
    { 
      _cwc_673 = _dim_A_( QUADpw); 
      _cwc_677 = 0; 
      _cwc_678 = _eq_SxS_( _cwc_673, _cwc_677); 
      if (_cwc_678) 
      { 
        _cwc_676, _cwc_675, _cwc_674 = UTDScalarB::quadXII( _rso_488_TheTerminal, _rso_487_stdout, y, QUADpp, QUADpw) ; 
        _cwc_669 = _cwc_676; 
        _cwc_670 = _cwc_675; 
        _cwc_671 = _cwc_674; 
      }
      else
      { 
        _cwc_669, _cwc_670, _cwc_671 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, int[*], "UTDScalarB::quadXII :: Terminal::Terminal TermFile::TermFile int[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile int[*] ", _rso_488_TheTerminal, _rso_487_stdout, y, QUADpp, QUADpw); 
      }
    }
    else
    { 
      _cwc_669, _cwc_670, _cwc_671 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, int[*], "UTDScalarB::quadXII :: Terminal::Terminal TermFile::TermFile int[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile int[*] ", _rso_488_TheTerminal, _rso_487_stdout, y, QUADpp, QUADpw); 
    }
  }
  return( _cwc_669, _cwc_670, _cwc_671); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::modarray(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::modarray( int[*] array { ,NN } , int[*] v { ,NN } , int[*] val { ,NN } )
/*
 *  modarray :: { int[*] -> { int[*] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])},
                              int -> { int[*] -> ( int[*]),
                                       int -> ( int[.])},
                              int[+] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])},
                              int[.] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])}},
                  int[+] -> { int[*] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int -> { int[*] -> ( int[.]),
                                       int -> ( int[.])},
                              int[+] -> { int[*] -> ( --),
                                          int -> ( --),
                                          int[+] -> ( --)},
                              int[.] -> { int[*] -> ( --),
                                          int -> ( --),
                                          int[+] -> ( --)}},
                  int[.] -> { int[*] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int -> { int[*] -> ( int[.]),
                                       int -> ( int[.])},
                              int[+] -> { int[*] -> ( --),
                                          int -> ( --),
                                          int[+] -> ( --)},
                              int[.] -> { int[*] -> ( --),
                                          int -> ( --),
                                          int[+] -> ( --)}}}
 *  dispatching to: ArrayBasics::modarray,
 *                  ArrayBasics::modarray,
 *                  ArrayBasics::modarray,
 *                  UTDScalarB:Array::modarray
 */
{ 
  int[*] _cwc_693 { , NN } ; 
  bool _cwc_734 { , NN } ; 
  int _cwc_733 { , NN } ; 
  bool _cwc_732 { , NN } ; 
  int _cwc_731 { , NN } ; 
  bool _cwc_730 { , NN } ; 
  int _cwc_729 { , NN } ; 
  int[.] _cwc_728 { , NN } ; 
  int _cwc_727 { , NN } ; 
  int[*] _cwc_726 { , NN } ; 
  int _cwc_725 { , NN } ; 
  bool _cwc_724 { , NN } ; 
  int _cwc_723 { , NN } ; 
  bool _cwc_722 { , NN } ; 
  int _cwc_721 { , NN } ; 
  int[*] _cwc_720 { , NN } ; 
  int _cwc_719 { , NN } ; 
  bool _cwc_718 { , NN } ; 
  int _cwc_717 { , NN } ; 
  int _cwc_716 { , NN } ; 
  int[+] _cwc_715 { , NN } ; 
  int _cwc_714 { , NN } ; 
  int _cwc_713 { , NN } ; 
  bool _cwc_712 { , NN } ; 
  int _cwc_711 { , NN } ; 
  bool _cwc_710 { , NN } ; 
  int _cwc_709 { , NN } ; 
  int[*] _cwc_708 { , NN } ; 
  int _cwc_707 { , NN } ; 
  int[*] _cwc_706 { , NN } ; 
  int _cwc_705 { , NN } ; 
  bool _cwc_704 { , NN } ; 
  int _cwc_703 { , NN } ; 
  bool _cwc_702 { , NN } ; 
  int _cwc_701 { , NN } ; 
  int[*] _cwc_700 { , NN } ; 
  int _cwc_699 { , NN } ; 
  bool _cwc_698 { , NN } ; 
  int _cwc_697 { , NN } ; 
  int _cwc_696 { , NN } ; 
  int[+] _cwc_695 { , NN } ; 
  int _cwc_694 { , NN } ; 

  _cwc_713 = _dim_A_( array); 
  _cwc_733 = 1; 
  _cwc_734 = _eq_SxS_( _cwc_713, _cwc_733); 
  if (_cwc_734) 
  { 
    _cwc_725 = _dim_A_( v); 
    _cwc_731 = 0; 
    _cwc_732 = _eq_SxS_( _cwc_725, _cwc_731); 
    if (_cwc_732) 
    { 
      _cwc_727 = _dim_A_( val); 
      _cwc_729 = 0; 
      _cwc_730 = _eq_SxS_( _cwc_727, _cwc_729); 
      if (_cwc_730) 
      { 
        _cwc_728 = UTDScalarB:Array::modarray( array, v, val) ; 
        _cwc_693 = _cwc_728; 
      }
      else
      { 
        _cwc_726 = ArrayBasics::modarray( array, v, val) ; 
        _cwc_693 = _cwc_726; 
      }
    }
    else
    { 
      _cwc_714 = _dim_A_( v); 
      _cwc_723 = 1; 
      _cwc_724 = _eq_SxS_( _cwc_714, _cwc_723); 
      if (_cwc_724) 
      { 
        _cwc_719 = _dim_A_( val); 
        _cwc_721 = 0; 
        _cwc_722 = _eq_SxS_( _cwc_719, _cwc_721); 
        if (_cwc_722) 
        { 
          _cwc_720 = ArrayBasics::modarray( array, v, val) ; 
          _cwc_693 = _cwc_720; 
        }
        else
        { 
          _cwc_716 = _dim_A_( val); 
          _cwc_717 = 0; 
          _cwc_718 = _gt_SxS_( _cwc_716, _cwc_717); 
          if (_cwc_718) 
          { 
            _cwc_715 = ArrayBasics::modarray( array, v, val) ; 
            _cwc_693 = _cwc_715; 
          }
          else
          { 
            _cwc_693 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
          }
        }
      }
      else
      { 
        _cwc_693 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
      }
    }
  }
  else
  { 
    _cwc_705 = _dim_A_( v); 
    _cwc_711 = 0; 
    _cwc_712 = _eq_SxS_( _cwc_705, _cwc_711); 
    if (_cwc_712) 
    { 
      _cwc_707 = _dim_A_( val); 
      _cwc_709 = 0; 
      _cwc_710 = _eq_SxS_( _cwc_707, _cwc_709); 
      if (_cwc_710) 
      { 
        _cwc_708 = ArrayBasics::modarray( array, v, val) ; 
        _cwc_693 = _cwc_708; 
      }
      else
      { 
        _cwc_706 = ArrayBasics::modarray( array, v, val) ; 
        _cwc_693 = _cwc_706; 
      }
    }
    else
    { 
      _cwc_694 = _dim_A_( v); 
      _cwc_703 = 1; 
      _cwc_704 = _eq_SxS_( _cwc_694, _cwc_703); 
      if (_cwc_704) 
      { 
        _cwc_699 = _dim_A_( val); 
        _cwc_701 = 0; 
        _cwc_702 = _eq_SxS_( _cwc_699, _cwc_701); 
        if (_cwc_702) 
        { 
          _cwc_700 = ArrayBasics::modarray( array, v, val) ; 
          _cwc_693 = _cwc_700; 
        }
        else
        { 
          _cwc_696 = _dim_A_( val); 
          _cwc_697 = 0; 
          _cwc_698 = _gt_SxS_( _cwc_696, _cwc_697); 
          if (_cwc_698) 
          { 
            _cwc_695 = ArrayBasics::modarray( array, v, val) ; 
            _cwc_693 = _cwc_695; 
          }
          else
          { 
            _cwc_693 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
          }
        }
      }
      else
      { 
        _cwc_693 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
      }
    }
  }
  return( _cwc_693); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::notXBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::notXBB( bool[*] y { ,NN } )
/*
 *  notXBB :: { bool[*] -> ( bool[*]),
                bool -> ( bool),
                bool[+] -> ( bool[+]),
                bool[.,.,.] -> ( bool[.,.,.])}
 *  dispatching to: UTDScalarB::notXBB,
 *                  UTDScalarB::notXBB,
 *                  UTDScalarB::notXBB
 */
{ 
  bool[*] _cwc_735 { , NN } ; 
  bool _cwc_747 { , NN } ; 
  int _cwc_746 { , NN } ; 
  bool _cwc_745 { , NN } ; 
  int _cwc_744 { , NN } ; 
  bool _cwc_743 { , NN } ; 
  int _cwc_742 { , NN } ; 
  int _cwc_741 { , NN } ; 
  bool _cwc_740 { , NN } ; 
  int _cwc_739 { , NN } ; 
  bool[.,.,.] _cwc_738 { , NN } ; 
  int _cwc_737 { , NN } ; 
  bool[+] _cwc_736 { , NN } ; 

  _cwc_744 = _dim_A_( y); 
  _cwc_746 = 0; 
  _cwc_747 = _eq_SxS_( _cwc_744, _cwc_746); 
  if (_cwc_747) 
  { 
    _cwc_745 = UTDScalarB::notXBB( y) ; 
    _cwc_735 = _cwc_745; 
  }
  else
  { 
    _cwc_741 = _dim_A_( y); 
    _cwc_742 = 0; 
    _cwc_743 = _gt_SxS_( _cwc_741, _cwc_742); 
    if (_cwc_743) 
    { 
      _cwc_737 = _dim_A_( y); 
      _cwc_739 = 3; 
      _cwc_740 = _eq_SxS_( _cwc_737, _cwc_739); 
      if (_cwc_740) 
      { 
        _cwc_738 = UTDScalarB::notXBB( y) ; 
        _cwc_735 = _cwc_738; 
      }
      else
      { 
        _cwc_736 = UTDScalarB::notXBB( y) ; 
        _cwc_735 = _cwc_736; 
      }
    }
    else
    { 
      _cwc_735 = _dispatch_error_( 1, bool[*], "UTDScalarB::notXBB :: bool[*] -> bool[*] ", y); 
    }
  }
  return( _cwc_735); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::prod(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int UTDScalarB:Array::prod( int[*] arr_a { ,NN } )
/*
 *  prod :: { int[*] -> ( int),
              int[+] -> ( int),
              int[.] -> ( int),
              int[1] -> ( int),
              int[0] -> ( int)}
 *  dispatching to: ArrayTransform::prod,
 *                  UTDScalarB:Array::prod,
 *                  UTDScalarB:Array::prod,
 *                  UTDScalarB:Array::prod
 */
{ 
  int _cwc_748 { , NN } ; 
  bool _cwc_768 { , NN } ; 
  int _cwc_767 { , NN } ; 
  bool _cwc_766 { , NN } ; 
  bool _cwc_765 { , NN } ; 
  int{1} _cwc_764 { , NN } ; 
  int _cwc_763 { , NN } ; 
  int[1]{0} _cwc_762 { , NN } ; 
  bool _cwc_761 { , NN } ; 
  int _cwc_760 { , NN } ; 
  bool _cwc_759 { , NN } ; 
  bool _cwc_758 { , NN } ; 
  int{0} _cwc_757 { , NN } ; 
  int _cwc_756 { , NN } ; 
  int[1]{0} _cwc_755 { , NN } ; 
  bool _cwc_754 { , NN } ; 
  int _cwc_753 { , NN } ; 
  int[+] _cwc_752 { , NN } ; 
  int _cwc_751 { , NN } ; 
  int _cwc_750 { , NN } ; 
  int _cwc_749 { , NN } ; 

  _cwc_750 = _dim_A_( arr_a); 
  _cwc_767 = 1; 
  _cwc_768 = _eq_SxS_( _cwc_750, _cwc_767); 
  if (_cwc_768) 
  { 
    _cwc_752 = _shape_A_( arr_a); 
    _cwc_761 = true; 
    _cwc_764 = 1; 
    _cwc_762 = [ 0 ]; 
    _cwc_763 = _sel_VxA_( _cwc_762, _cwc_752); 
    _cwc_765 = _eq_SxS_( _cwc_763, _cwc_764); 
    _cwc_766 = _and_SxS_( _cwc_765, _cwc_761); 
    if (_cwc_766) 
    { 
      _cwc_760 = UTDScalarB:Array::prod( arr_a) ; 
      _cwc_748 = _cwc_760; 
    }
    else
    { 
      _cwc_754 = true; 
      _cwc_757 = 0; 
      _cwc_755 = [ 0 ]; 
      _cwc_756 = _sel_VxA_( _cwc_755, _cwc_752); 
      _cwc_758 = _eq_SxS_( _cwc_756, _cwc_757); 
      _cwc_759 = _and_SxS_( _cwc_758, _cwc_754); 
      if (_cwc_759) 
      { 
        _cwc_753 = UTDScalarB:Array::prod( arr_a) ; 
        _cwc_748 = _cwc_753; 
      }
      else
      { 
        _cwc_751 = UTDScalarB:Array::prod( arr_a) ; 
        _cwc_748 = _cwc_751; 
      }
    }
  }
  else
  { 
    _cwc_749 = ArrayTransform::prod( arr_a) ; 
    _cwc_748 = _cwc_749; 
  }
  return( _cwc_748); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::andslXBBQUICKSTOP(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool UTDScalarB::andslXBBQUICKSTOP( bool[*] y { ,NN } )
/*
 *  andslXBBQUICKSTOP :: { bool[*] -> ( bool),
                           bool[+] -> ( bool),
                           bool[.] -> ( bool),
                           bool[15] -> ( bool)}
 *  dispatching to: UTDScalarB::andslXBBQUICKSTOP,
 *                  UTDScalarB::andslXBBQUICKSTOP
 */
{ 
  bool _cwc_769 { , NN } ; 
  bool _cwc_781 { , NN } ; 
  int _cwc_780 { , NN } ; 
  bool _cwc_779 { , NN } ; 
  bool _cwc_778 { , NN } ; 
  int{15} _cwc_777 { , NN } ; 
  int _cwc_776 { , NN } ; 
  int[1]{0} _cwc_775 { , NN } ; 
  bool _cwc_774 { , NN } ; 
  bool _cwc_773 { , NN } ; 
  int[+] _cwc_772 { , NN } ; 
  bool _cwc_771 { , NN } ; 
  int _cwc_770 { , NN } ; 

  _cwc_770 = _dim_A_( y); 
  _cwc_780 = 1; 
  _cwc_781 = _eq_SxS_( _cwc_770, _cwc_780); 
  if (_cwc_781) 
  { 
    _cwc_772 = _shape_A_( y); 
    _cwc_774 = true; 
    _cwc_777 = 15; 
    _cwc_775 = [ 0 ]; 
    _cwc_776 = _sel_VxA_( _cwc_775, _cwc_772); 
    _cwc_778 = _eq_SxS_( _cwc_776, _cwc_777); 
    _cwc_779 = _and_SxS_( _cwc_778, _cwc_774); 
    if (_cwc_779) 
    { 
      _cwc_773 = UTDScalarB::andslXBBQUICKSTOP( y) ; 
      _cwc_769 = _cwc_773; 
    }
    else
    { 
      _cwc_771 = UTDScalarB::andslXBBQUICKSTOP( y) ; 
      _cwc_769 = _cwc_771; 
    }
  }
  else
  { 
    _cwc_769 = _dispatch_error_( 1, bool, "UTDScalarB::andslXBBQUICKSTOP :: bool[*] -> bool ", y); 
  }
  return( _cwc_769); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::rhoXBI(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[.] UTDScalarB::rhoXBI( bool[*] y { ,NN } )
/*
 *  rhoXBI :: { bool[*] -> ( int[.]),
                bool[+] -> ( int[.]),
                bool[.,.,.] -> ( int[3])}
 *  dispatching to: UTDScalarB::rhoXBI,
 *                  UTDScalarB::rhoXBI
 */
{ 
  int[.] _cwc_782 { , NN } ; 
  bool _cwc_790 { , NN } ; 
  int _cwc_789 { , NN } ; 
  int _cwc_788 { , NN } ; 
  bool _cwc_787 { , NN } ; 
  int _cwc_786 { , NN } ; 
  int[3] _cwc_785 { , NN } ; 
  int _cwc_784 { , NN } ; 
  int[.] _cwc_783 { , NN } ; 

  _cwc_788 = _dim_A_( y); 
  _cwc_789 = 0; 
  _cwc_790 = _gt_SxS_( _cwc_788, _cwc_789); 
  if (_cwc_790) 
  { 
    _cwc_784 = _dim_A_( y); 
    _cwc_786 = 3; 
    _cwc_787 = _eq_SxS_( _cwc_784, _cwc_786); 
    if (_cwc_787) 
    { 
      _cwc_785 = UTDScalarB::rhoXBI( y) ; 
      _cwc_782 = _cwc_785; 
    }
    else
    { 
      _cwc_783 = UTDScalarB::rhoXBI( y) ; 
      _cwc_782 = _cwc_783; 
    }
  }
  else
  { 
    _cwc_782 = _dispatch_error_( 1, int[.], "UTDScalarB::rhoXBI :: bool[*] -> int[.] ", y); 
  }
  return( _cwc_782); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::andBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::andBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  andBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                             bool -> ( bool[*]),
                             bool[+] -> ( bool[+])},
                bool -> { bool[*] -> ( bool[*]),
                          bool -> ( bool),
                          bool[+] -> ( bool[+])},
                bool[+] -> { bool[*] -> ( bool[+]),
                             bool -> ( bool[+]),
                             bool[+] -> ( bool[+])}}
 *  dispatching to: UTDScalarB::andBBB,
 *                  UTDScalarB::andBBB,
 *                  UTDScalarB::andBBB,
 *                  UTDScalarB::andBBB
 */
{ 
  bool[*] _cwc_791 { , NN } ; 
  bool _cwc_813 { , NN } ; 
  int _cwc_812 { , NN } ; 
  bool _cwc_811 { , NN } ; 
  int _cwc_810 { , NN } ; 
  bool _cwc_809 { , NN } ; 
  int _cwc_808 { , NN } ; 
  bool _cwc_807 { , NN } ; 
  int _cwc_806 { , NN } ; 
  int _cwc_805 { , NN } ; 
  bool[+] _cwc_804 { , NN } ; 
  int _cwc_803 { , NN } ; 
  bool _cwc_802 { , NN } ; 
  int _cwc_801 { , NN } ; 
  int _cwc_800 { , NN } ; 
  bool _cwc_799 { , NN } ; 
  int _cwc_798 { , NN } ; 
  bool[+] _cwc_797 { , NN } ; 
  int _cwc_796 { , NN } ; 
  bool _cwc_795 { , NN } ; 
  int _cwc_794 { , NN } ; 
  int _cwc_793 { , NN } ; 
  bool[+] _cwc_792 { , NN } ; 

  _cwc_803 = _dim_A_( x); 
  _cwc_812 = 0; 
  _cwc_813 = _eq_SxS_( _cwc_803, _cwc_812); 
  if (_cwc_813) 
  { 
    _cwc_808 = _dim_A_( y); 
    _cwc_810 = 0; 
    _cwc_811 = _eq_SxS_( _cwc_808, _cwc_810); 
    if (_cwc_811) 
    { 
      _cwc_809 = UTDScalarB::andBBB( x, y) ; 
      _cwc_791 = _cwc_809; 
    }
    else
    { 
      _cwc_805 = _dim_A_( y); 
      _cwc_806 = 0; 
      _cwc_807 = _gt_SxS_( _cwc_805, _cwc_806); 
      if (_cwc_807) 
      { 
        _cwc_804 = UTDScalarB::andBBB( x, y) ; 
        _cwc_791 = _cwc_804; 
      }
      else
      { 
        _cwc_791 = _dispatch_error_( 1, bool[*], "UTDScalarB::andBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_800 = _dim_A_( x); 
    _cwc_801 = 0; 
    _cwc_802 = _gt_SxS_( _cwc_800, _cwc_801); 
    if (_cwc_802) 
    { 
      _cwc_796 = _dim_A_( y); 
      _cwc_798 = 0; 
      _cwc_799 = _eq_SxS_( _cwc_796, _cwc_798); 
      if (_cwc_799) 
      { 
        _cwc_797 = UTDScalarB::andBBB( x, y) ; 
        _cwc_791 = _cwc_797; 
      }
      else
      { 
        _cwc_793 = _dim_A_( y); 
        _cwc_794 = 0; 
        _cwc_795 = _gt_SxS_( _cwc_793, _cwc_794); 
        if (_cwc_795) 
        { 
          _cwc_792 = UTDScalarB::andBBB( x, y) ; 
          _cwc_791 = _cwc_792; 
        }
        else
        { 
          _cwc_791 = _dispatch_error_( 1, bool[*], "UTDScalarB::andBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_791 = _dispatch_error_( 1, bool[*], "UTDScalarB::andBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_791); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::O2V(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[.] UTDScalarB::O2V( int[*] shp { ,NN } , int[*] offset { ,NN } )
/*
 *  O2V :: { int[*] -> { int[*] -> ( int[.]),
                         int -> ( int[.])},
             int[+] -> { int[*] -> ( int[.]),
                         int -> ( int[.])},
             int[.] -> { int[*] -> ( int[.]),
                         int -> ( int[.])},
             int[1] -> { int[*] -> ( int[.]),
                         int -> ( int[.])},
             int[0] -> { int[*] -> ( int[.]),
                         int -> ( int[.])}}
 *  dispatching to: UTDScalarB::O2V,
 *                  UTDScalarB::O2V,
 *                  UTDScalarB::O2V
 */
{ 
  int[.] _cwc_814 { , NN } ; 
  bool _cwc_842 { , NN } ; 
  int _cwc_841 { , NN } ; 
  bool _cwc_840 { , NN } ; 
  bool _cwc_839 { , NN } ; 
  int{1} _cwc_838 { , NN } ; 
  int _cwc_837 { , NN } ; 
  int[1]{0} _cwc_836 { , NN } ; 
  bool _cwc_835 { , NN } ; 
  bool _cwc_834 { , NN } ; 
  int _cwc_833 { , NN } ; 
  int[.] _cwc_832 { , NN } ; 
  int _cwc_831 { , NN } ; 
  bool _cwc_830 { , NN } ; 
  bool _cwc_829 { , NN } ; 
  int{0} _cwc_828 { , NN } ; 
  int _cwc_827 { , NN } ; 
  int[1]{0} _cwc_826 { , NN } ; 
  bool _cwc_825 { , NN } ; 
  bool _cwc_824 { , NN } ; 
  int _cwc_823 { , NN } ; 
  int[.] _cwc_822 { , NN } ; 
  int _cwc_821 { , NN } ; 
  int[+] _cwc_820 { , NN } ; 
  bool _cwc_819 { , NN } ; 
  int _cwc_818 { , NN } ; 
  int[.] _cwc_817 { , NN } ; 
  int _cwc_816 { , NN } ; 
  int _cwc_815 { , NN } ; 

  _cwc_815 = _dim_A_( shp); 
  _cwc_841 = 1; 
  _cwc_842 = _eq_SxS_( _cwc_815, _cwc_841); 
  if (_cwc_842) 
  { 
    _cwc_820 = _shape_A_( shp); 
    _cwc_835 = true; 
    _cwc_838 = 1; 
    _cwc_836 = [ 0 ]; 
    _cwc_837 = _sel_VxA_( _cwc_836, _cwc_820); 
    _cwc_839 = _eq_SxS_( _cwc_837, _cwc_838); 
    _cwc_840 = _and_SxS_( _cwc_839, _cwc_835); 
    if (_cwc_840) 
    { 
      _cwc_831 = _dim_A_( offset); 
      _cwc_833 = 0; 
      _cwc_834 = _eq_SxS_( _cwc_831, _cwc_833); 
      if (_cwc_834) 
      { 
        _cwc_832 = UTDScalarB::O2V( shp, offset) ; 
        _cwc_814 = _cwc_832; 
      }
      else
      { 
        _cwc_814 = _dispatch_error_( 1, int[.], "UTDScalarB::O2V :: int[*] int[*] -> int[.] ", shp, offset); 
      }
    }
    else
    { 
      _cwc_825 = true; 
      _cwc_828 = 0; 
      _cwc_826 = [ 0 ]; 
      _cwc_827 = _sel_VxA_( _cwc_826, _cwc_820); 
      _cwc_829 = _eq_SxS_( _cwc_827, _cwc_828); 
      _cwc_830 = _and_SxS_( _cwc_829, _cwc_825); 
      if (_cwc_830) 
      { 
        _cwc_821 = _dim_A_( offset); 
        _cwc_823 = 0; 
        _cwc_824 = _eq_SxS_( _cwc_821, _cwc_823); 
        if (_cwc_824) 
        { 
          _cwc_822 = UTDScalarB::O2V( shp, offset) ; 
          _cwc_814 = _cwc_822; 
        }
        else
        { 
          _cwc_814 = _dispatch_error_( 1, int[.], "UTDScalarB::O2V :: int[*] int[*] -> int[.] ", shp, offset); 
        }
      }
      else
      { 
        _cwc_816 = _dim_A_( offset); 
        _cwc_818 = 0; 
        _cwc_819 = _eq_SxS_( _cwc_816, _cwc_818); 
        if (_cwc_819) 
        { 
          _cwc_817 = UTDScalarB::O2V( shp, offset) ; 
          _cwc_814 = _cwc_817; 
        }
        else
        { 
          _cwc_814 = _dispatch_error_( 1, int[.], "UTDScalarB::O2V :: int[*] int[*] -> int[.] ", shp, offset); 
        }
      }
    }
  }
  else
  { 
    _cwc_814 = _dispatch_error_( 1, int[.], "UTDScalarB::O2V :: int[*] int[*] -> int[.] ", shp, offset); 
  }
  return( _cwc_814); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::V2O(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int UTDScalarB::V2O( int[*] shp { ,NN } , int[*] iv { ,NN } )
/*
 *  V2O :: { int[*] -> { int[*] -> ( int),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int)},
             int[+] -> { int[*] -> ( int),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int)},
             int[.] -> { int[*] -> ( int),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int)},
             int[3] -> { int[*] -> ( int),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[3] -> ( int)},
             int[2] -> { int[*] -> ( int),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[3] -> ( --),
                         int[2] -> ( int)}}
 *  dispatching to: UTDScalarB::V2O,
 *                  UTDScalarB::V2O,
 *                  UTDScalarB::V2O
 */
{ 
  int _cwc_843 { , NN } ; 
  bool _cwc_909 { , NN } ; 
  int _cwc_908 { , NN } ; 
  bool _cwc_907 { , NN } ; 
  bool _cwc_906 { , NN } ; 
  int{3} _cwc_905 { , NN } ; 
  int _cwc_904 { , NN } ; 
  int[1]{0} _cwc_903 { , NN } ; 
  bool _cwc_902 { , NN } ; 
  bool _cwc_901 { , NN } ; 
  int _cwc_900 { , NN } ; 
  bool _cwc_899 { , NN } ; 
  bool _cwc_898 { , NN } ; 
  int{3} _cwc_897 { , NN } ; 
  int _cwc_896 { , NN } ; 
  int[1]{0} _cwc_895 { , NN } ; 
  bool _cwc_894 { , NN } ; 
  int _cwc_893 { , NN } ; 
  int[+] _cwc_892 { , NN } ; 
  int _cwc_891 { , NN } ; 
  int _cwc_890 { , NN } ; 
  bool _cwc_889 { , NN } ; 
  bool _cwc_888 { , NN } ; 
  int{2} _cwc_887 { , NN } ; 
  int _cwc_886 { , NN } ; 
  int[1]{0} _cwc_885 { , NN } ; 
  bool _cwc_884 { , NN } ; 
  bool _cwc_883 { , NN } ; 
  int _cwc_882 { , NN } ; 
  bool _cwc_881 { , NN } ; 
  bool _cwc_880 { , NN } ; 
  int{3} _cwc_879 { , NN } ; 
  int _cwc_878 { , NN } ; 
  int[1]{0} _cwc_877 { , NN } ; 
  bool _cwc_876 { , NN } ; 
  int _cwc_875 { , NN } ; 
  bool _cwc_874 { , NN } ; 
  bool _cwc_873 { , NN } ; 
  int{2} _cwc_872 { , NN } ; 
  int _cwc_871 { , NN } ; 
  int[1]{0} _cwc_870 { , NN } ; 
  bool _cwc_869 { , NN } ; 
  int _cwc_868 { , NN } ; 
  int[+] _cwc_867 { , NN } ; 
  int _cwc_866 { , NN } ; 
  int _cwc_865 { , NN } ; 
  int[+] _cwc_864 { , NN } ; 
  bool _cwc_863 { , NN } ; 
  int _cwc_862 { , NN } ; 
  bool _cwc_861 { , NN } ; 
  bool _cwc_860 { , NN } ; 
  int{3} _cwc_859 { , NN } ; 
  int _cwc_858 { , NN } ; 
  int[1]{0} _cwc_857 { , NN } ; 
  bool _cwc_856 { , NN } ; 
  int _cwc_855 { , NN } ; 
  bool _cwc_854 { , NN } ; 
  bool _cwc_853 { , NN } ; 
  int{2} _cwc_852 { , NN } ; 
  int _cwc_851 { , NN } ; 
  int[1]{0} _cwc_850 { , NN } ; 
  bool _cwc_849 { , NN } ; 
  int _cwc_848 { , NN } ; 
  int[+] _cwc_847 { , NN } ; 
  int _cwc_846 { , NN } ; 
  int _cwc_845 { , NN } ; 
  int _cwc_844 { , NN } ; 

  _cwc_844 = _dim_A_( shp); 
  _cwc_908 = 1; 
  _cwc_909 = _eq_SxS_( _cwc_844, _cwc_908); 
  if (_cwc_909) 
  { 
    _cwc_864 = _shape_A_( shp); 
    _cwc_902 = true; 
    _cwc_905 = 3; 
    _cwc_903 = [ 0 ]; 
    _cwc_904 = _sel_VxA_( _cwc_903, _cwc_864); 
    _cwc_906 = _eq_SxS_( _cwc_904, _cwc_905); 
    _cwc_907 = _and_SxS_( _cwc_906, _cwc_902); 
    if (_cwc_907) 
    { 
      _cwc_890 = _dim_A_( iv); 
      _cwc_900 = 1; 
      _cwc_901 = _eq_SxS_( _cwc_890, _cwc_900); 
      if (_cwc_901) 
      { 
        _cwc_892 = _shape_A_( iv); 
        _cwc_894 = true; 
        _cwc_897 = 3; 
        _cwc_895 = [ 0 ]; 
        _cwc_896 = _sel_VxA_( _cwc_895, _cwc_892); 
        _cwc_898 = _eq_SxS_( _cwc_896, _cwc_897); 
        _cwc_899 = _and_SxS_( _cwc_898, _cwc_894); 
        if (_cwc_899) 
        { 
          _cwc_893 = UTDScalarB::V2O( shp, iv) ; 
          _cwc_843 = _cwc_893; 
        }
        else
        { 
          _cwc_891 = UTDScalarB::V2O( shp, iv) ; 
          _cwc_843 = _cwc_891; 
        }
      }
      else
      { 
        _cwc_843 = _dispatch_error_( 1, int, "UTDScalarB::V2O :: int[*] int[*] -> int ", shp, iv); 
      }
    }
    else
    { 
      _cwc_884 = true; 
      _cwc_887 = 2; 
      _cwc_885 = [ 0 ]; 
      _cwc_886 = _sel_VxA_( _cwc_885, _cwc_864); 
      _cwc_888 = _eq_SxS_( _cwc_886, _cwc_887); 
      _cwc_889 = _and_SxS_( _cwc_888, _cwc_884); 
      if (_cwc_889) 
      { 
        _cwc_865 = _dim_A_( iv); 
        _cwc_882 = 1; 
        _cwc_883 = _eq_SxS_( _cwc_865, _cwc_882); 
        if (_cwc_883) 
        { 
          _cwc_867 = _shape_A_( iv); 
          _cwc_876 = true; 
          _cwc_879 = 3; 
          _cwc_877 = [ 0 ]; 
          _cwc_878 = _sel_VxA_( _cwc_877, _cwc_867); 
          _cwc_880 = _eq_SxS_( _cwc_878, _cwc_879); 
          _cwc_881 = _and_SxS_( _cwc_880, _cwc_876); 
          if (_cwc_881) 
          { 
            _cwc_875 = UTDScalarB::V2O( shp, iv) ; 
            _cwc_843 = _cwc_875; 
          }
          else
          { 
            _cwc_869 = true; 
            _cwc_872 = 2; 
            _cwc_870 = [ 0 ]; 
            _cwc_871 = _sel_VxA_( _cwc_870, _cwc_867); 
            _cwc_873 = _eq_SxS_( _cwc_871, _cwc_872); 
            _cwc_874 = _and_SxS_( _cwc_873, _cwc_869); 
            if (_cwc_874) 
            { 
              _cwc_868 = UTDScalarB::V2O( shp, iv) ; 
              _cwc_843 = _cwc_868; 
            }
            else
            { 
              _cwc_866 = UTDScalarB::V2O( shp, iv) ; 
              _cwc_843 = _cwc_866; 
            }
          }
        }
        else
        { 
          _cwc_843 = _dispatch_error_( 1, int, "UTDScalarB::V2O :: int[*] int[*] -> int ", shp, iv); 
        }
      }
      else
      { 
        _cwc_845 = _dim_A_( iv); 
        _cwc_862 = 1; 
        _cwc_863 = _eq_SxS_( _cwc_845, _cwc_862); 
        if (_cwc_863) 
        { 
          _cwc_847 = _shape_A_( iv); 
          _cwc_856 = true; 
          _cwc_859 = 3; 
          _cwc_857 = [ 0 ]; 
          _cwc_858 = _sel_VxA_( _cwc_857, _cwc_847); 
          _cwc_860 = _eq_SxS_( _cwc_858, _cwc_859); 
          _cwc_861 = _and_SxS_( _cwc_860, _cwc_856); 
          if (_cwc_861) 
          { 
            _cwc_855 = UTDScalarB::V2O( shp, iv) ; 
            _cwc_843 = _cwc_855; 
          }
          else
          { 
            _cwc_849 = true; 
            _cwc_852 = 2; 
            _cwc_850 = [ 0 ]; 
            _cwc_851 = _sel_VxA_( _cwc_850, _cwc_847); 
            _cwc_853 = _eq_SxS_( _cwc_851, _cwc_852); 
            _cwc_854 = _and_SxS_( _cwc_853, _cwc_849); 
            if (_cwc_854) 
            { 
              _cwc_848 = UTDScalarB::V2O( shp, iv) ; 
              _cwc_843 = _cwc_848; 
            }
            else
            { 
              _cwc_846 = UTDScalarB::V2O( shp, iv) ; 
              _cwc_843 = _cwc_846; 
            }
          }
        }
        else
        { 
          _cwc_843 = _dispatch_error_( 1, int, "UTDScalarB::V2O :: int[*] int[*] -> int ", shp, iv); 
        }
      }
    }
  }
  else
  { 
    _cwc_843 = _dispatch_error_( 1, int, "UTDScalarB::V2O :: int[*] int[*] -> int ", shp, iv); 
  }
  return( _cwc_843); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::toi(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::toi( bool[*] A { ,NN } )
/*
 *  toi :: { bool[*] -> ( int[*]),
             bool -> ( int),
             bool[+] -> ( int[+])}
 *  dispatching to: ArrayArith::toi,
 *                  Bool::toi,
 *                  ScalarArith::toi
 */
{ 
  int[*] _cwc_910 { , NN } ; 
  bool _cwc_918 { , NN } ; 
  int _cwc_917 { , NN } ; 
  int _cwc_916 { , NN } ; 
  int _cwc_915 { , NN } ; 
  bool _cwc_914 { , NN } ; 
  int _cwc_913 { , NN } ; 
  int _cwc_912 { , NN } ; 
  int[+] _cwc_911 { , NN } ; 

  _cwc_915 = _dim_A_( A); 
  _cwc_917 = 0; 
  _cwc_918 = _eq_SxS_( _cwc_915, _cwc_917); 
  if (_cwc_918) 
  { 
    _cwc_916 = ScalarArith::toi( A) ; 
    _cwc_910 = _cwc_916; 
  }
  else
  { 
    _cwc_912 = _dim_A_( A); 
    _cwc_913 = 0; 
    _cwc_914 = _gt_SxS_( _cwc_912, _cwc_913); 
    if (_cwc_914) 
    { 
      _cwc_911 = ArrayArith::toi( A) ; 
      _cwc_910 = _cwc_911; 
    }
    else
    { 
      _cwc_910 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::toi :: bool[*] -> int[*] ", A); 
    }
  }
  return( _cwc_910); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::toi(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::toi( int[*] A { ,NN } )
/*
 *  toi :: { int[*] -> ( int[*]),
             int[+] -> ( int[+]),
             int[.] -> ( int[.]),
             int[3] -> ( int[3]),
             int[2] -> ( int[2])}
 *  dispatching to: ArrayArith::toi,
 *                  ArrayArith::toi,
 *                  UTDScalarB:Array::toi,
 *                  UTDScalarB:Array::toi,
 *                  UTDScalarB:Array::toi
 */
{ 
  int[*] _cwc_919 { , NN } ; 
  bool _cwc_943 { , NN } ; 
  int _cwc_942 { , NN } ; 
  int[*] _cwc_941 { , NN } ; 
  int _cwc_940 { , NN } ; 
  bool _cwc_939 { , NN } ; 
  int _cwc_938 { , NN } ; 
  bool _cwc_937 { , NN } ; 
  bool _cwc_936 { , NN } ; 
  int{3} _cwc_935 { , NN } ; 
  int _cwc_934 { , NN } ; 
  int[1]{0} _cwc_933 { , NN } ; 
  bool _cwc_932 { , NN } ; 
  int[3] _cwc_931 { , NN } ; 
  bool _cwc_930 { , NN } ; 
  bool _cwc_929 { , NN } ; 
  int{2} _cwc_928 { , NN } ; 
  int _cwc_927 { , NN } ; 
  int[1]{0} _cwc_926 { , NN } ; 
  bool _cwc_925 { , NN } ; 
  int[2] _cwc_924 { , NN } ; 
  int[+] _cwc_923 { , NN } ; 
  int[.] _cwc_922 { , NN } ; 
  int _cwc_921 { , NN } ; 
  int[+] _cwc_920 { , NN } ; 

  _cwc_940 = _dim_A_( A); 
  _cwc_942 = 0; 
  _cwc_943 = _gt_SxS_( _cwc_940, _cwc_942); 
  if (_cwc_943) 
  { 
    _cwc_921 = _dim_A_( A); 
    _cwc_938 = 1; 
    _cwc_939 = _eq_SxS_( _cwc_921, _cwc_938); 
    if (_cwc_939) 
    { 
      _cwc_923 = _shape_A_( A); 
      _cwc_932 = true; 
      _cwc_935 = 3; 
      _cwc_933 = [ 0 ]; 
      _cwc_934 = _sel_VxA_( _cwc_933, _cwc_923); 
      _cwc_936 = _eq_SxS_( _cwc_934, _cwc_935); 
      _cwc_937 = _and_SxS_( _cwc_936, _cwc_932); 
      if (_cwc_937) 
      { 
        _cwc_931 = UTDScalarB:Array::toi( A) ; 
        _cwc_919 = _cwc_931; 
      }
      else
      { 
        _cwc_925 = true; 
        _cwc_928 = 2; 
        _cwc_926 = [ 0 ]; 
        _cwc_927 = _sel_VxA_( _cwc_926, _cwc_923); 
        _cwc_929 = _eq_SxS_( _cwc_927, _cwc_928); 
        _cwc_930 = _and_SxS_( _cwc_929, _cwc_925); 
        if (_cwc_930) 
        { 
          _cwc_924 = UTDScalarB:Array::toi( A) ; 
          _cwc_919 = _cwc_924; 
        }
        else
        { 
          _cwc_922 = UTDScalarB:Array::toi( A) ; 
          _cwc_919 = _cwc_922; 
        }
      }
    }
    else
    { 
      _cwc_920 = ArrayArith::toi( A) ; 
      _cwc_919 = _cwc_920; 
    }
  }
  else
  { 
    _cwc_941 = ArrayArith::toi( A) ; 
    _cwc_919 = _cwc_941; 
  }
  return( _cwc_919); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::*(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::*( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  * :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+]),
                       int[.] -> ( int[1]),
                       int[1] -> ( int[1])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+]),
                    int[.] -> ( int[1]),
                    int[1] -> ( int[1])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::*,
 *                  ArrayArith::*,
 *                  ArrayArith::*,
 *                  ScalarArith::*,
 *                  UTDScalarB:Array::*
 */
{ 
  int[*] _cwc_944 { , NN } ; 
  bool _cwc_978 { , NN } ; 
  int _cwc_977 { , NN } ; 
  bool _cwc_976 { , NN } ; 
  int _cwc_975 { , NN } ; 
  int _cwc_974 { , NN } ; 
  int _cwc_973 { , NN } ; 
  bool _cwc_972 { , NN } ; 
  int _cwc_971 { , NN } ; 
  int _cwc_970 { , NN } ; 
  bool _cwc_969 { , NN } ; 
  int _cwc_968 { , NN } ; 
  bool _cwc_967 { , NN } ; 
  bool _cwc_966 { , NN } ; 
  int{1} _cwc_965 { , NN } ; 
  int _cwc_964 { , NN } ; 
  int[1]{0} _cwc_963 { , NN } ; 
  bool _cwc_962 { , NN } ; 
  int[1] _cwc_961 { , NN } ; 
  int[+] _cwc_960 { , NN } ; 
  int[+] _cwc_959 { , NN } ; 
  int _cwc_958 { , NN } ; 
  int[+] _cwc_957 { , NN } ; 
  int _cwc_956 { , NN } ; 
  bool _cwc_955 { , NN } ; 
  int _cwc_954 { , NN } ; 
  int _cwc_953 { , NN } ; 
  bool _cwc_952 { , NN } ; 
  int _cwc_951 { , NN } ; 
  int[+] _cwc_950 { , NN } ; 
  int _cwc_949 { , NN } ; 
  bool _cwc_948 { , NN } ; 
  int _cwc_947 { , NN } ; 
  int _cwc_946 { , NN } ; 
  int[+] _cwc_945 { , NN } ; 

  _cwc_956 = _dim_A_( A); 
  _cwc_977 = 0; 
  _cwc_978 = _eq_SxS_( _cwc_956, _cwc_977); 
  if (_cwc_978) 
  { 
    _cwc_973 = _dim_A_( B); 
    _cwc_975 = 0; 
    _cwc_976 = _eq_SxS_( _cwc_973, _cwc_975); 
    if (_cwc_976) 
    { 
      _cwc_974 = ( A ScalarArith::*B) ; 
      _cwc_944 = _cwc_974; 
    }
    else
    { 
      _cwc_970 = _dim_A_( B); 
      _cwc_971 = 0; 
      _cwc_972 = _gt_SxS_( _cwc_970, _cwc_971); 
      if (_cwc_972) 
      { 
        _cwc_958 = _dim_A_( B); 
        _cwc_968 = 1; 
        _cwc_969 = _eq_SxS_( _cwc_958, _cwc_968); 
        if (_cwc_969) 
        { 
          _cwc_960 = _shape_A_( B); 
          _cwc_962 = true; 
          _cwc_965 = 1; 
          _cwc_963 = [ 0 ]; 
          _cwc_964 = _sel_VxA_( _cwc_963, _cwc_960); 
          _cwc_966 = _eq_SxS_( _cwc_964, _cwc_965); 
          _cwc_967 = _and_SxS_( _cwc_966, _cwc_962); 
          if (_cwc_967) 
          { 
            _cwc_961 = ( A UTDScalarB:Array::*B) ; 
            _cwc_944 = _cwc_961; 
          }
          else
          { 
            _cwc_959 = ( A ArrayArith::*B) ; 
            _cwc_944 = _cwc_959; 
          }
        }
        else
        { 
          _cwc_957 = ( A ArrayArith::*B) ; 
          _cwc_944 = _cwc_957; 
        }
      }
      else
      { 
        _cwc_944 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::* :: int[*] int[*] -> int[*] ", A, B); 
      }
    }
  }
  else
  { 
    _cwc_953 = _dim_A_( A); 
    _cwc_954 = 0; 
    _cwc_955 = _gt_SxS_( _cwc_953, _cwc_954); 
    if (_cwc_955) 
    { 
      _cwc_949 = _dim_A_( B); 
      _cwc_951 = 0; 
      _cwc_952 = _eq_SxS_( _cwc_949, _cwc_951); 
      if (_cwc_952) 
      { 
        _cwc_950 = ( A ArrayArith::*B) ; 
        _cwc_944 = _cwc_950; 
      }
      else
      { 
        _cwc_946 = _dim_A_( B); 
        _cwc_947 = 0; 
        _cwc_948 = _gt_SxS_( _cwc_946, _cwc_947); 
        if (_cwc_948) 
        { 
          _cwc_945 = ( A ArrayArith::*B) ; 
          _cwc_944 = _cwc_945; 
        }
        else
        { 
          _cwc_944 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::* :: int[*] int[*] -> int[*] ", A, B); 
        }
      }
    }
    else
    { 
      _cwc_944 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::* :: int[*] int[*] -> int[*] ", A, B); 
    }
  }
  return( _cwc_944); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::sameBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool UTDScalarB::sameBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  sameBBB :: { bool[*] -> { bool[*] -> ( bool),
                              bool -> ( bool),
                              bool[+] -> ( bool),
                              bool[.,.] -> ( bool),
                              bool[.,.,.] -> ( bool)},
                 bool -> { bool[*] -> ( bool),
                           bool -> ( bool)},
                 bool[+] -> { bool[*] -> ( bool),
                              bool[+] -> ( bool),
                              bool[.,.] -> ( bool),
                              bool[.,.,.] -> ( bool)},
                 bool[.,.] -> { bool[*] -> ( bool),
                                bool[+] -> ( bool),
                                bool[.,.] -> ( bool)},
                 bool[4,4] -> { bool[*] -> ( bool),
                                bool[+] -> ( bool),
                                bool[.,.] -> ( bool)},
                 bool[.,.,.] -> { bool[*] -> ( bool),
                                  bool[+] -> ( bool),
                                  bool[.,.] -> ( --),
                                  bool[.,.,.] -> ( bool)}}
 *  dispatching to: UTDScalarB::sameBBB,
 *                  UTDScalarB::sameBBB,
 *                  UTDScalarB::sameBBB,
 *                  UTDScalarB::sameBBB
 */
{ 
  bool _cwc_979 { , NN } ; 
  bool _cwc_1044 { , NN } ; 
  int _cwc_1043 { , NN } ; 
  bool _cwc_1042 { , NN } ; 
  int _cwc_1041 { , NN } ; 
  bool _cwc_1040 { , NN } ; 
  int _cwc_1039 { , NN } ; 
  int _cwc_1038 { , NN } ; 
  bool _cwc_1037 { , NN } ; 
  int _cwc_1036 { , NN } ; 
  int _cwc_1035 { , NN } ; 
  bool _cwc_1034 { , NN } ; 
  int _cwc_1033 { , NN } ; 
  bool _cwc_1032 { , NN } ; 
  bool _cwc_1031 { , NN } ; 
  int{4} _cwc_1030 { , NN } ; 
  int _cwc_1029 { , NN } ; 
  int[1]{1} _cwc_1028 { , NN } ; 
  bool _cwc_1027 { , NN } ; 
  bool _cwc_1026 { , NN } ; 
  int{4} _cwc_1025 { , NN } ; 
  int _cwc_1024 { , NN } ; 
  int[1]{0} _cwc_1023 { , NN } ; 
  bool _cwc_1022 { , NN } ; 
  bool _cwc_1021 { , NN } ; 
  int _cwc_1020 { , NN } ; 
  int _cwc_1019 { , NN } ; 
  bool _cwc_1018 { , NN } ; 
  int _cwc_1017 { , NN } ; 
  bool _cwc_1016 { , NN } ; 
  int _cwc_1015 { , NN } ; 
  bool _cwc_1014 { , NN } ; 
  int[+] _cwc_1013 { , NN } ; 
  bool _cwc_1012 { , NN } ; 
  int _cwc_1011 { , NN } ; 
  int _cwc_1010 { , NN } ; 
  bool _cwc_1009 { , NN } ; 
  int _cwc_1008 { , NN } ; 
  bool _cwc_1007 { , NN } ; 
  int _cwc_1006 { , NN } ; 
  bool _cwc_1005 { , NN } ; 
  bool _cwc_1004 { , NN } ; 
  int _cwc_1003 { , NN } ; 
  bool _cwc_1002 { , NN } ; 
  int _cwc_1001 { , NN } ; 
  int _cwc_1000 { , NN } ; 
  bool _cwc_999 { , NN } ; 
  int _cwc_998 { , NN } ; 
  bool _cwc_997 { , NN } ; 
  bool _cwc_996 { , NN } ; 
  int _cwc_995 { , NN } ; 
  bool _cwc_994 { , NN } ; 
  int _cwc_993 { , NN } ; 
  bool _cwc_992 { , NN } ; 
  int _cwc_991 { , NN } ; 
  bool _cwc_990 { , NN } ; 
  int _cwc_989 { , NN } ; 
  int _cwc_988 { , NN } ; 
  bool _cwc_987 { , NN } ; 
  int _cwc_986 { , NN } ; 
  bool _cwc_985 { , NN } ; 
  bool _cwc_984 { , NN } ; 
  int _cwc_983 { , NN } ; 
  bool _cwc_982 { , NN } ; 
  int _cwc_981 { , NN } ; 
  bool _cwc_980 { , NN } ; 

  _cwc_1038 = _dim_A_( x); 
  _cwc_1043 = 0; 
  _cwc_1044 = _eq_SxS_( _cwc_1038, _cwc_1043); 
  if (_cwc_1044) 
  { 
    _cwc_1039 = _dim_A_( y); 
    _cwc_1041 = 0; 
    _cwc_1042 = _eq_SxS_( _cwc_1039, _cwc_1041); 
    if (_cwc_1042) 
    { 
      _cwc_1040 = UTDScalarB::sameBBB( x, y) ; 
      _cwc_979 = _cwc_1040; 
    }
    else
    { 
      _cwc_979 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
    }
  }
  else
  { 
    _cwc_1035 = _dim_A_( x); 
    _cwc_1036 = 0; 
    _cwc_1037 = _gt_SxS_( _cwc_1035, _cwc_1036); 
    if (_cwc_1037) 
    { 
      _cwc_991 = _dim_A_( x); 
      _cwc_1033 = 2; 
      _cwc_1034 = _eq_SxS_( _cwc_991, _cwc_1033); 
      if (_cwc_1034) 
      { 
        _cwc_1013 = _shape_A_( x); 
        _cwc_1022 = true; 
        _cwc_1025 = 4; 
        _cwc_1023 = [ 0 ]; 
        _cwc_1024 = _sel_VxA_( _cwc_1023, _cwc_1013); 
        _cwc_1026 = _eq_SxS_( _cwc_1024, _cwc_1025); 
        _cwc_1027 = _and_SxS_( _cwc_1026, _cwc_1022); 
        _cwc_1030 = 4; 
        _cwc_1028 = [ 1 ]; 
        _cwc_1029 = _sel_VxA_( _cwc_1028, _cwc_1013); 
        _cwc_1031 = _eq_SxS_( _cwc_1029, _cwc_1030); 
        _cwc_1032 = _and_SxS_( _cwc_1031, _cwc_1027); 
        if (_cwc_1032) 
        { 
          _cwc_1019 = _dim_A_( y); 
          _cwc_1020 = 0; 
          _cwc_1021 = _gt_SxS_( _cwc_1019, _cwc_1020); 
          if (_cwc_1021) 
          { 
            _cwc_1015 = _dim_A_( y); 
            _cwc_1017 = 2; 
            _cwc_1018 = _eq_SxS_( _cwc_1015, _cwc_1017); 
            if (_cwc_1018) 
            { 
              _cwc_1016 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_979 = _cwc_1016; 
            }
            else
            { 
              _cwc_1014 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_979 = _cwc_1014; 
            }
          }
          else
          { 
            _cwc_979 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
          }
        }
        else
        { 
          _cwc_1010 = _dim_A_( y); 
          _cwc_1011 = 0; 
          _cwc_1012 = _gt_SxS_( _cwc_1010, _cwc_1011); 
          if (_cwc_1012) 
          { 
            _cwc_1006 = _dim_A_( y); 
            _cwc_1008 = 2; 
            _cwc_1009 = _eq_SxS_( _cwc_1006, _cwc_1008); 
            if (_cwc_1009) 
            { 
              _cwc_1007 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_979 = _cwc_1007; 
            }
            else
            { 
              _cwc_1005 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_979 = _cwc_1005; 
            }
          }
          else
          { 
            _cwc_979 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_1003 = 3; 
        _cwc_1004 = _eq_SxS_( _cwc_991, _cwc_1003); 
        if (_cwc_1004) 
        { 
          _cwc_1000 = _dim_A_( y); 
          _cwc_1001 = 0; 
          _cwc_1002 = _gt_SxS_( _cwc_1000, _cwc_1001); 
          if (_cwc_1002) 
          { 
            _cwc_993 = _dim_A_( y); 
            _cwc_998 = 2; 
            _cwc_999 = _eq_SxS_( _cwc_993, _cwc_998); 
            if (_cwc_999) 
            { 
              _cwc_997 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_979 = _cwc_997; 
            }
            else
            { 
              _cwc_995 = 3; 
              _cwc_996 = _eq_SxS_( _cwc_993, _cwc_995); 
              if (_cwc_996) 
              { 
                _cwc_994 = UTDScalarB::sameBBB( x, y) ; 
                _cwc_979 = _cwc_994; 
              }
              else
              { 
                _cwc_992 = UTDScalarB::sameBBB( x, y) ; 
                _cwc_979 = _cwc_992; 
              }
            }
          }
          else
          { 
            _cwc_979 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
          }
        }
        else
        { 
          _cwc_988 = _dim_A_( y); 
          _cwc_989 = 0; 
          _cwc_990 = _gt_SxS_( _cwc_988, _cwc_989); 
          if (_cwc_990) 
          { 
            _cwc_981 = _dim_A_( y); 
            _cwc_986 = 2; 
            _cwc_987 = _eq_SxS_( _cwc_981, _cwc_986); 
            if (_cwc_987) 
            { 
              _cwc_985 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_979 = _cwc_985; 
            }
            else
            { 
              _cwc_983 = 3; 
              _cwc_984 = _eq_SxS_( _cwc_981, _cwc_983); 
              if (_cwc_984) 
              { 
                _cwc_982 = UTDScalarB::sameBBB( x, y) ; 
                _cwc_979 = _cwc_982; 
              }
              else
              { 
                _cwc_980 = UTDScalarB::sameBBB( x, y) ; 
                _cwc_979 = _cwc_980; 
              }
            }
          }
          else
          { 
            _cwc_979 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_979 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
    }
  }
  return( _cwc_979); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::all(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool UTDScalarB:Array::all( bool[*] a { ,NN } )
/*
 *  all :: { bool[*] -> ( bool),
             bool[+] -> ( bool),
             bool[.] -> ( bool),
             bool[2] -> ( bool),
             bool[3] -> ( bool),
             bool[.,.] -> ( bool),
             bool[.,.,.] -> ( bool)}
 *  dispatching to: ArrayArith::all,
 *                  ArrayTransform::all,
 *                  UTDScalarB:Array::all,
 *                  UTDScalarB:Array::all,
 *                  UTDScalarB:Array::all,
 *                  UTDScalarB:Array::all,
 *                  UTDScalarB:Array::all,
 *                  UTDScalarB:Array::all
 */
{ 
  bool _cwc_1045 { , NN } ; 
  bool _cwc_1075 { , NN } ; 
  int _cwc_1074 { , NN } ; 
  bool _cwc_1073 { , NN } ; 
  int _cwc_1072 { , NN } ; 
  bool _cwc_1071 { , NN } ; 
  int _cwc_1070 { , NN } ; 
  bool _cwc_1069 { , NN } ; 
  bool _cwc_1068 { , NN } ; 
  int{2} _cwc_1067 { , NN } ; 
  int _cwc_1066 { , NN } ; 
  int[1]{0} _cwc_1065 { , NN } ; 
  bool _cwc_1064 { , NN } ; 
  bool _cwc_1063 { , NN } ; 
  bool _cwc_1062 { , NN } ; 
  bool _cwc_1061 { , NN } ; 
  int{3} _cwc_1060 { , NN } ; 
  int _cwc_1059 { , NN } ; 
  int[1]{0} _cwc_1058 { , NN } ; 
  bool _cwc_1057 { , NN } ; 
  bool _cwc_1056 { , NN } ; 
  int[+] _cwc_1055 { , NN } ; 
  bool _cwc_1054 { , NN } ; 
  bool _cwc_1053 { , NN } ; 
  int _cwc_1052 { , NN } ; 
  bool _cwc_1051 { , NN } ; 
  bool _cwc_1050 { , NN } ; 
  int _cwc_1049 { , NN } ; 
  bool _cwc_1048 { , NN } ; 
  int _cwc_1047 { , NN } ; 
  bool _cwc_1046 { , NN } ; 

  _cwc_1072 = _dim_A_( a); 
  _cwc_1074 = 0; 
  _cwc_1075 = _gt_SxS_( _cwc_1072, _cwc_1074); 
  if (_cwc_1075) 
  { 
    _cwc_1047 = _dim_A_( a); 
    _cwc_1070 = 1; 
    _cwc_1071 = _eq_SxS_( _cwc_1047, _cwc_1070); 
    if (_cwc_1071) 
    { 
      _cwc_1055 = _shape_A_( a); 
      _cwc_1064 = true; 
      _cwc_1067 = 2; 
      _cwc_1065 = [ 0 ]; 
      _cwc_1066 = _sel_VxA_( _cwc_1065, _cwc_1055); 
      _cwc_1068 = _eq_SxS_( _cwc_1066, _cwc_1067); 
      _cwc_1069 = _and_SxS_( _cwc_1068, _cwc_1064); 
      if (_cwc_1069) 
      { 
        _cwc_1063 = UTDScalarB:Array::all( a) ; 
        _cwc_1045 = _cwc_1063; 
      }
      else
      { 
        _cwc_1057 = true; 
        _cwc_1060 = 3; 
        _cwc_1058 = [ 0 ]; 
        _cwc_1059 = _sel_VxA_( _cwc_1058, _cwc_1055); 
        _cwc_1061 = _eq_SxS_( _cwc_1059, _cwc_1060); 
        _cwc_1062 = _and_SxS_( _cwc_1061, _cwc_1057); 
        if (_cwc_1062) 
        { 
          _cwc_1056 = UTDScalarB:Array::all( a) ; 
          _cwc_1045 = _cwc_1056; 
        }
        else
        { 
          _cwc_1054 = UTDScalarB:Array::all( a) ; 
          _cwc_1045 = _cwc_1054; 
        }
      }
    }
    else
    { 
      _cwc_1052 = 2; 
      _cwc_1053 = _eq_SxS_( _cwc_1047, _cwc_1052); 
      if (_cwc_1053) 
      { 
        _cwc_1051 = UTDScalarB:Array::all( a) ; 
        _cwc_1045 = _cwc_1051; 
      }
      else
      { 
        _cwc_1049 = 3; 
        _cwc_1050 = _eq_SxS_( _cwc_1047, _cwc_1049); 
        if (_cwc_1050) 
        { 
          _cwc_1048 = UTDScalarB:Array::all( a) ; 
          _cwc_1045 = _cwc_1048; 
        }
        else
        { 
          _cwc_1046 = UTDScalarB:Array::all( a) ; 
          _cwc_1045 = _cwc_1046; 
        }
      }
    }
  }
  else
  { 
    _cwc_1073 = ArrayArith::all( a) ; 
    _cwc_1045 = _cwc_1073; 
  }
  return( _cwc_1045); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:StdIO::show(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
Terminal::Terminal *, TermFile::TermFile * UTDScalarB:StdIO::show( Terminal::Terminal *_rso_100_TheTerminal { ,NN } , TermFile::TermFile *_rso_99_stdout { ,NN } , bool[*] n { ,NN } )
/*
 *  show :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> { bool[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                    bool -> ( Terminal::Terminal, TermFile::TermFile),
                                                                    bool[+] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                    bool[.] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                    bool[15] -> ( Terminal::Terminal, TermFile::TermFile)},
                                         TermFile::TermFile -> { bool[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool[+] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool[.] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool[15] -> ( Terminal::Terminal, TermFile::TermFile)}},
              Terminal::Terminal -> { TermFile::TermFile[*] -> { bool[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool[+] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool[.] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool[15] -> ( Terminal::Terminal, TermFile::TermFile)},
                                      TermFile::TermFile -> { bool[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                              bool -> ( Terminal::Terminal, TermFile::TermFile),
                                                              bool[+] -> ( Terminal::Terminal, TermFile::TermFile),
                                                              bool[.] -> ( Terminal::Terminal, TermFile::TermFile),
                                                              bool[15] -> ( Terminal::Terminal, TermFile::TermFile)}}}
 *  dispatching to: StdIO::show,
 *                  StdIO::show,
 *                  UTDScalarB:StdIO::show
 */
{ 
  TermFile::TermFile _cwc_1077 { , NN } ; 
  Terminal::Terminal _cwc_1076 { , NN } ; 
  bool _cwc_1101 { , NN } ; 
  int _cwc_1100 { , NN } ; 
  Terminal::Terminal _cwc_1099 { , NN } ; 
  TermFile::TermFile _cwc_1098 { , NN } ; 
  int _cwc_1097 { , NN } ; 
  bool _cwc_1096 { , NN } ; 
  int _cwc_1095 { , NN } ; 
  int _cwc_1094 { , NN } ; 
  bool _cwc_1093 { , NN } ; 
  int _cwc_1092 { , NN } ; 
  bool _cwc_1091 { , NN } ; 
  bool _cwc_1090 { , NN } ; 
  int{15} _cwc_1089 { , NN } ; 
  int _cwc_1088 { , NN } ; 
  int[1]{0} _cwc_1087 { , NN } ; 
  bool _cwc_1086 { , NN } ; 
  Terminal::Terminal _cwc_1085 { , NN } ; 
  TermFile::TermFile _cwc_1084 { , NN } ; 
  int[+] _cwc_1083 { , NN } ; 
  Terminal::Terminal _cwc_1082 { , NN } ; 
  TermFile::TermFile _cwc_1081 { , NN } ; 
  int _cwc_1080 { , NN } ; 
  Terminal::Terminal _cwc_1079 { , NN } ; 
  TermFile::TermFile _cwc_1078 { , NN } ; 

  _cwc_1097 = _dim_A_( n); 
  _cwc_1100 = 0; 
  _cwc_1101 = _eq_SxS_( _cwc_1097, _cwc_1100); 
  if (_cwc_1101) 
  { 
    _cwc_1099, _cwc_1098 = StdIO::show( _rso_100_TheTerminal, _rso_99_stdout, n) ; 
    _cwc_1076 = _cwc_1099; 
    _cwc_1077 = _cwc_1098; 
  }
  else
  { 
    _cwc_1094 = _dim_A_( n); 
    _cwc_1095 = 0; 
    _cwc_1096 = _gt_SxS_( _cwc_1094, _cwc_1095); 
    if (_cwc_1096) 
    { 
      _cwc_1080 = _dim_A_( n); 
      _cwc_1092 = 1; 
      _cwc_1093 = _eq_SxS_( _cwc_1080, _cwc_1092); 
      if (_cwc_1093) 
      { 
        _cwc_1083 = _shape_A_( n); 
        _cwc_1086 = true; 
        _cwc_1089 = 15; 
        _cwc_1087 = [ 0 ]; 
        _cwc_1088 = _sel_VxA_( _cwc_1087, _cwc_1083); 
        _cwc_1090 = _eq_SxS_( _cwc_1088, _cwc_1089); 
        _cwc_1091 = _and_SxS_( _cwc_1090, _cwc_1086); 
        if (_cwc_1091) 
        { 
          _cwc_1085, _cwc_1084 = UTDScalarB:StdIO::show( _rso_100_TheTerminal, _rso_99_stdout, n) ; 
          _cwc_1076 = _cwc_1085; 
          _cwc_1077 = _cwc_1084; 
        }
        else
        { 
          _cwc_1082, _cwc_1081 = StdIO::show( _rso_100_TheTerminal, _rso_99_stdout, n) ; 
          _cwc_1076 = _cwc_1082; 
          _cwc_1077 = _cwc_1081; 
        }
      }
      else
      { 
        _cwc_1079, _cwc_1078 = StdIO::show( _rso_100_TheTerminal, _rso_99_stdout, n) ; 
        _cwc_1076 = _cwc_1079; 
        _cwc_1077 = _cwc_1078; 
      }
    }
    else
    { 
      _cwc_1076, _cwc_1077 = _dispatch_error_( 2, Terminal::Terminal, TermFile::TermFile, "UTDScalarB:StdIO::show :: Terminal::Terminal TermFile::TermFile bool[*] -> Terminal::Terminal TermFile::TermFile ", _rso_100_TheTerminal, _rso_99_stdout, n); 
    }
  }
  return( _cwc_1076, _cwc_1077); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:StdIO::show(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
Terminal::Terminal *, TermFile::TermFile * UTDScalarB:StdIO::show( Terminal::Terminal *_rso_100_TheTerminal { ,NN } , TermFile::TermFile *_rso_99_stdout { ,NN } , int[*] n { ,NN } )
/*
 *  show :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                    int -> ( Terminal::Terminal, TermFile::TermFile),
                                                                    int[+] -> ( Terminal::Terminal, TermFile::TermFile)},
                                         TermFile::TermFile -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 int -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 int[+] -> ( Terminal::Terminal, TermFile::TermFile)}},
              Terminal::Terminal -> { TermFile::TermFile[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 int -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 int[+] -> ( Terminal::Terminal, TermFile::TermFile)},
                                      TermFile::TermFile -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                              int -> ( Terminal::Terminal, TermFile::TermFile),
                                                              int[+] -> ( Terminal::Terminal, TermFile::TermFile)}}}
 *  dispatching to: StdIO::show,
 *                  StdIO::show
 */
{ 
  TermFile::TermFile _cwc_1103 { , NN } ; 
  Terminal::Terminal _cwc_1102 { , NN } ; 
  bool _cwc_1113 { , NN } ; 
  int _cwc_1112 { , NN } ; 
  Terminal::Terminal _cwc_1111 { , NN } ; 
  TermFile::TermFile _cwc_1110 { , NN } ; 
  int _cwc_1109 { , NN } ; 
  bool _cwc_1108 { , NN } ; 
  int _cwc_1107 { , NN } ; 
  int _cwc_1106 { , NN } ; 
  Terminal::Terminal _cwc_1105 { , NN } ; 
  TermFile::TermFile _cwc_1104 { , NN } ; 

  _cwc_1109 = _dim_A_( n); 
  _cwc_1112 = 0; 
  _cwc_1113 = _eq_SxS_( _cwc_1109, _cwc_1112); 
  if (_cwc_1113) 
  { 
    _cwc_1111, _cwc_1110 = StdIO::show( _rso_100_TheTerminal, _rso_99_stdout, n) ; 
    _cwc_1102 = _cwc_1111; 
    _cwc_1103 = _cwc_1110; 
  }
  else
  { 
    _cwc_1106 = _dim_A_( n); 
    _cwc_1107 = 0; 
    _cwc_1108 = _gt_SxS_( _cwc_1106, _cwc_1107); 
    if (_cwc_1108) 
    { 
      _cwc_1105, _cwc_1104 = StdIO::show( _rso_100_TheTerminal, _rso_99_stdout, n) ; 
      _cwc_1102 = _cwc_1105; 
      _cwc_1103 = _cwc_1104; 
    }
    else
    { 
      _cwc_1102, _cwc_1103 = _dispatch_error_( 2, Terminal::Terminal, TermFile::TermFile, "UTDScalarB:StdIO::show :: Terminal::Terminal TermFile::TermFile int[*] -> Terminal::Terminal TermFile::TermFile ", _rso_100_TheTerminal, _rso_99_stdout, n); 
    }
  }
  return( _cwc_1102, _cwc_1103); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::genarray(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:Array::genarray( int[*] shp { ,NN } , bool[*] val { ,NN } )
/*
 *  genarray :: { int[*] -> { bool[*] -> ( bool[*]),
                              bool -> ( bool[*])},
                  int[+] -> { bool[*] -> ( bool[*]),
                              bool -> ( bool[*])},
                  int[.] -> { bool[*] -> ( bool[*]),
                              bool -> ( bool[*])},
                  int[1] -> { bool[*] -> ( bool[.]),
                              bool -> ( bool[.])}}
 *  dispatching to: ArrayBasics::genarray,
 *                  UTDScalarB:Array::genarray,
 *                  UTDScalarB:Array::genarray
 */
{ 
  bool[*] _cwc_1114 { , NN } ; 
  bool _cwc_1134 { , NN } ; 
  int _cwc_1133 { , NN } ; 
  bool _cwc_1132 { , NN } ; 
  bool _cwc_1131 { , NN } ; 
  int{1} _cwc_1130 { , NN } ; 
  int _cwc_1129 { , NN } ; 
  int[1]{0} _cwc_1128 { , NN } ; 
  bool _cwc_1127 { , NN } ; 
  bool _cwc_1126 { , NN } ; 
  int _cwc_1125 { , NN } ; 
  bool[.] _cwc_1124 { , NN } ; 
  int _cwc_1123 { , NN } ; 
  bool[*] _cwc_1122 { , NN } ; 
  int[+] _cwc_1121 { , NN } ; 
  bool _cwc_1120 { , NN } ; 
  int _cwc_1119 { , NN } ; 
  bool[*] _cwc_1118 { , NN } ; 
  int _cwc_1117 { , NN } ; 
  bool[*] _cwc_1116 { , NN } ; 
  int _cwc_1115 { , NN } ; 

  _cwc_1115 = _dim_A_( shp); 
  _cwc_1133 = 1; 
  _cwc_1134 = _eq_SxS_( _cwc_1115, _cwc_1133); 
  if (_cwc_1134) 
  { 
    _cwc_1121 = _shape_A_( shp); 
    _cwc_1127 = true; 
    _cwc_1130 = 1; 
    _cwc_1128 = [ 0 ]; 
    _cwc_1129 = _sel_VxA_( _cwc_1128, _cwc_1121); 
    _cwc_1131 = _eq_SxS_( _cwc_1129, _cwc_1130); 
    _cwc_1132 = _and_SxS_( _cwc_1131, _cwc_1127); 
    if (_cwc_1132) 
    { 
      _cwc_1123 = _dim_A_( val); 
      _cwc_1125 = 0; 
      _cwc_1126 = _eq_SxS_( _cwc_1123, _cwc_1125); 
      if (_cwc_1126) 
      { 
        _cwc_1124 = UTDScalarB:Array::genarray( shp, val) ; 
        _cwc_1114 = _cwc_1124; 
      }
      else
      { 
        _cwc_1122 = ArrayBasics::genarray( shp, val) ; 
        _cwc_1114 = _cwc_1122; 
      }
    }
    else
    { 
      _cwc_1117 = _dim_A_( val); 
      _cwc_1119 = 0; 
      _cwc_1120 = _eq_SxS_( _cwc_1117, _cwc_1119); 
      if (_cwc_1120) 
      { 
        _cwc_1118 = UTDScalarB:Array::genarray( shp, val) ; 
        _cwc_1114 = _cwc_1118; 
      }
      else
      { 
        _cwc_1116 = ArrayBasics::genarray( shp, val) ; 
        _cwc_1114 = _cwc_1116; 
      }
    }
  }
  else
  { 
    _cwc_1114 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::genarray :: int[*] bool[*] -> bool[*] ", shp, val); 
  }
  return( _cwc_1114); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::genarray(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::genarray( int[*] shp { ,NN } , int[*] val { ,NN } )
/*
 *  genarray :: { int[*] -> { int[*] -> ( int[*]),
                              int -> ( int[.])},
                  int[+] -> { int[*] -> ( int[*]),
                              int -> ( int[.])},
                  int[.] -> { int[*] -> ( int[*]),
                              int -> ( int[.])},
                  int[1] -> { int[*] -> ( int[.]),
                              int -> ( int[.])}}
 *  dispatching to: ArrayBasics::genarray,
 *                  UTDScalarB:Array::genarray
 */
{ 
  int[*] _cwc_1135 { , NN } ; 
  bool _cwc_1155 { , NN } ; 
  int _cwc_1154 { , NN } ; 
  bool _cwc_1153 { , NN } ; 
  bool _cwc_1152 { , NN } ; 
  int{1} _cwc_1151 { , NN } ; 
  int _cwc_1150 { , NN } ; 
  int[1]{0} _cwc_1149 { , NN } ; 
  bool _cwc_1148 { , NN } ; 
  bool _cwc_1147 { , NN } ; 
  int _cwc_1146 { , NN } ; 
  int[.] _cwc_1145 { , NN } ; 
  int _cwc_1144 { , NN } ; 
  int[*] _cwc_1143 { , NN } ; 
  int[+] _cwc_1142 { , NN } ; 
  bool _cwc_1141 { , NN } ; 
  int _cwc_1140 { , NN } ; 
  int[*] _cwc_1139 { , NN } ; 
  int _cwc_1138 { , NN } ; 
  int[*] _cwc_1137 { , NN } ; 
  int _cwc_1136 { , NN } ; 

  _cwc_1136 = _dim_A_( shp); 
  _cwc_1154 = 1; 
  _cwc_1155 = _eq_SxS_( _cwc_1136, _cwc_1154); 
  if (_cwc_1155) 
  { 
    _cwc_1142 = _shape_A_( shp); 
    _cwc_1148 = true; 
    _cwc_1151 = 1; 
    _cwc_1149 = [ 0 ]; 
    _cwc_1150 = _sel_VxA_( _cwc_1149, _cwc_1142); 
    _cwc_1152 = _eq_SxS_( _cwc_1150, _cwc_1151); 
    _cwc_1153 = _and_SxS_( _cwc_1152, _cwc_1148); 
    if (_cwc_1153) 
    { 
      _cwc_1144 = _dim_A_( val); 
      _cwc_1146 = 0; 
      _cwc_1147 = _eq_SxS_( _cwc_1144, _cwc_1146); 
      if (_cwc_1147) 
      { 
        _cwc_1145 = UTDScalarB:Array::genarray( shp, val) ; 
        _cwc_1135 = _cwc_1145; 
      }
      else
      { 
        _cwc_1143 = ArrayBasics::genarray( shp, val) ; 
        _cwc_1135 = _cwc_1143; 
      }
    }
    else
    { 
      _cwc_1138 = _dim_A_( val); 
      _cwc_1140 = 0; 
      _cwc_1141 = _eq_SxS_( _cwc_1138, _cwc_1140); 
      if (_cwc_1141) 
      { 
        _cwc_1139 = ArrayBasics::genarray( shp, val) ; 
        _cwc_1135 = _cwc_1139; 
      }
      else
      { 
        _cwc_1137 = ArrayBasics::genarray( shp, val) ; 
        _cwc_1135 = _cwc_1137; 
      }
    }
  }
  else
  { 
    _cwc_1135 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::genarray :: int[*] int[*] -> int[*] ", shp, val); 
  }
  return( _cwc_1135); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::rhoIBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::rhoIBB( int[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  rhoIBB :: { int[*] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[.,.,.]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[+]),
                            bool[3] -> ( bool[.,.,.]),
                            bool[2] -> ( bool[.,.,.]),
                            bool[16] -> ( bool[.,.])},
                int[+] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[.,.,.]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[+]),
                            bool[3] -> ( bool[.,.,.]),
                            bool[2] -> ( bool[.,.,.]),
                            bool[16] -> ( bool[.,.])},
                int[.] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[.,.,.]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[+]),
                            bool[3] -> ( bool[.,.,.]),
                            bool[2] -> ( bool[.,.,.]),
                            bool[16] -> ( bool[.,.])},
                int[3] -> { bool[*] -> ( bool[.,.,.]),
                            bool -> ( bool[.,.,.]),
                            bool[+] -> ( bool[.,.,.]),
                            bool[.] -> ( bool[.,.,.]),
                            bool[3] -> ( bool[.,.,.]),
                            bool[2] -> ( bool[.,.,.])},
                int[2] -> { bool[*] -> ( bool[.,.]),
                            bool[+] -> ( bool[.,.]),
                            bool[.] -> ( bool[.,.]),
                            bool[3] -> ( --),
                            bool[2] -> ( --),
                            bool[16] -> ( bool[.,.])}}
 *  dispatching to: UTDScalarB::rhoIBB,
 *                  UTDScalarB::rhoIBB,
 *                  UTDScalarB::rhoIBB,
 *                  UTDScalarB::rhoIBB,
 *                  UTDScalarB::rhoIBB
 */
{ 
  bool[*] _cwc_1156 { , NN } ; 
  bool _cwc_1254 { , NN } ; 
  int _cwc_1253 { , NN } ; 
  bool _cwc_1252 { , NN } ; 
  bool _cwc_1251 { , NN } ; 
  int{3} _cwc_1250 { , NN } ; 
  int _cwc_1249 { , NN } ; 
  int[1]{0} _cwc_1248 { , NN } ; 
  bool _cwc_1247 { , NN } ; 
  bool _cwc_1246 { , NN } ; 
  int _cwc_1245 { , NN } ; 
  bool[.,.,.] _cwc_1244 { , NN } ; 
  int _cwc_1243 { , NN } ; 
  bool _cwc_1242 { , NN } ; 
  int _cwc_1241 { , NN } ; 
  bool _cwc_1240 { , NN } ; 
  bool _cwc_1239 { , NN } ; 
  int{3} _cwc_1238 { , NN } ; 
  int _cwc_1237 { , NN } ; 
  int[1]{0} _cwc_1236 { , NN } ; 
  bool _cwc_1235 { , NN } ; 
  bool[.,.,.] _cwc_1234 { , NN } ; 
  bool _cwc_1233 { , NN } ; 
  bool _cwc_1232 { , NN } ; 
  int{2} _cwc_1231 { , NN } ; 
  int _cwc_1230 { , NN } ; 
  int[1]{0} _cwc_1229 { , NN } ; 
  bool _cwc_1228 { , NN } ; 
  bool[.,.,.] _cwc_1227 { , NN } ; 
  int[+] _cwc_1226 { , NN } ; 
  bool[*] _cwc_1225 { , NN } ; 
  int _cwc_1224 { , NN } ; 
  bool[*] _cwc_1223 { , NN } ; 
  bool _cwc_1222 { , NN } ; 
  bool _cwc_1221 { , NN } ; 
  int{2} _cwc_1220 { , NN } ; 
  int _cwc_1219 { , NN } ; 
  int[1]{0} _cwc_1218 { , NN } ; 
  bool _cwc_1217 { , NN } ; 
  bool _cwc_1216 { , NN } ; 
  int _cwc_1215 { , NN } ; 
  bool _cwc_1214 { , NN } ; 
  bool _cwc_1213 { , NN } ; 
  int{3} _cwc_1212 { , NN } ; 
  int _cwc_1211 { , NN } ; 
  int[1]{0} _cwc_1210 { , NN } ; 
  bool _cwc_1209 { , NN } ; 
  bool[*] _cwc_1208 { , NN } ; 
  bool _cwc_1207 { , NN } ; 
  bool _cwc_1206 { , NN } ; 
  int{2} _cwc_1205 { , NN } ; 
  int _cwc_1204 { , NN } ; 
  int[1]{0} _cwc_1203 { , NN } ; 
  bool _cwc_1202 { , NN } ; 
  bool[*] _cwc_1201 { , NN } ; 
  bool _cwc_1200 { , NN } ; 
  bool _cwc_1199 { , NN } ; 
  int{16} _cwc_1198 { , NN } ; 
  int _cwc_1197 { , NN } ; 
  int[1]{0} _cwc_1196 { , NN } ; 
  bool _cwc_1195 { , NN } ; 
  bool[.,.] _cwc_1194 { , NN } ; 
  int[+] _cwc_1193 { , NN } ; 
  bool[*] _cwc_1192 { , NN } ; 
  int _cwc_1191 { , NN } ; 
  bool[*] _cwc_1190 { , NN } ; 
  int[+] _cwc_1189 { , NN } ; 
  bool _cwc_1188 { , NN } ; 
  int _cwc_1187 { , NN } ; 
  bool[*] _cwc_1186 { , NN } ; 
  int _cwc_1185 { , NN } ; 
  bool _cwc_1184 { , NN } ; 
  int _cwc_1183 { , NN } ; 
  bool _cwc_1182 { , NN } ; 
  bool _cwc_1181 { , NN } ; 
  int{3} _cwc_1180 { , NN } ; 
  int _cwc_1179 { , NN } ; 
  int[1]{0} _cwc_1178 { , NN } ; 
  bool _cwc_1177 { , NN } ; 
  bool[*] _cwc_1176 { , NN } ; 
  bool _cwc_1175 { , NN } ; 
  bool _cwc_1174 { , NN } ; 
  int{2} _cwc_1173 { , NN } ; 
  int _cwc_1172 { , NN } ; 
  int[1]{0} _cwc_1171 { , NN } ; 
  bool _cwc_1170 { , NN } ; 
  bool[*] _cwc_1169 { , NN } ; 
  bool _cwc_1168 { , NN } ; 
  bool _cwc_1167 { , NN } ; 
  int{16} _cwc_1166 { , NN } ; 
  int _cwc_1165 { , NN } ; 
  int[1]{0} _cwc_1164 { , NN } ; 
  bool _cwc_1163 { , NN } ; 
  bool[*] _cwc_1162 { , NN } ; 
  int[+] _cwc_1161 { , NN } ; 
  bool[*] _cwc_1160 { , NN } ; 
  int _cwc_1159 { , NN } ; 
  bool[*] _cwc_1158 { , NN } ; 
  int _cwc_1157 { , NN } ; 

  _cwc_1157 = _dim_A_( x); 
  _cwc_1253 = 1; 
  _cwc_1254 = _eq_SxS_( _cwc_1157, _cwc_1253); 
  if (_cwc_1254) 
  { 
    _cwc_1189 = _shape_A_( x); 
    _cwc_1247 = true; 
    _cwc_1250 = 3; 
    _cwc_1248 = [ 0 ]; 
    _cwc_1249 = _sel_VxA_( _cwc_1248, _cwc_1189); 
    _cwc_1251 = _eq_SxS_( _cwc_1249, _cwc_1250); 
    _cwc_1252 = _and_SxS_( _cwc_1251, _cwc_1247); 
    if (_cwc_1252) 
    { 
      _cwc_1243 = _dim_A_( y); 
      _cwc_1245 = 0; 
      _cwc_1246 = _eq_SxS_( _cwc_1243, _cwc_1245); 
      if (_cwc_1246) 
      { 
        _cwc_1244 = UTDScalarB::rhoIBB( x, y) ; 
        _cwc_1156 = _cwc_1244; 
      }
      else
      { 
        _cwc_1224 = _dim_A_( y); 
        _cwc_1241 = 1; 
        _cwc_1242 = _eq_SxS_( _cwc_1224, _cwc_1241); 
        if (_cwc_1242) 
        { 
          _cwc_1226 = _shape_A_( y); 
          _cwc_1235 = true; 
          _cwc_1238 = 3; 
          _cwc_1236 = [ 0 ]; 
          _cwc_1237 = _sel_VxA_( _cwc_1236, _cwc_1226); 
          _cwc_1239 = _eq_SxS_( _cwc_1237, _cwc_1238); 
          _cwc_1240 = _and_SxS_( _cwc_1239, _cwc_1235); 
          if (_cwc_1240) 
          { 
            _cwc_1234 = UTDScalarB::rhoIBB( x, y) ; 
            _cwc_1156 = _cwc_1234; 
          }
          else
          { 
            _cwc_1228 = true; 
            _cwc_1231 = 2; 
            _cwc_1229 = [ 0 ]; 
            _cwc_1230 = _sel_VxA_( _cwc_1229, _cwc_1226); 
            _cwc_1232 = _eq_SxS_( _cwc_1230, _cwc_1231); 
            _cwc_1233 = _and_SxS_( _cwc_1232, _cwc_1228); 
            if (_cwc_1233) 
            { 
              _cwc_1227 = UTDScalarB::rhoIBB( x, y) ; 
              _cwc_1156 = _cwc_1227; 
            }
            else
            { 
              _cwc_1225 = UTDScalarB::rhoIBB( x, y) ; 
              _cwc_1156 = _cwc_1225; 
            }
          }
        }
        else
        { 
          _cwc_1223 = UTDScalarB::rhoIBB( x, y) ; 
          _cwc_1156 = _cwc_1223; 
        }
      }
    }
    else
    { 
      _cwc_1217 = true; 
      _cwc_1220 = 2; 
      _cwc_1218 = [ 0 ]; 
      _cwc_1219 = _sel_VxA_( _cwc_1218, _cwc_1189); 
      _cwc_1221 = _eq_SxS_( _cwc_1219, _cwc_1220); 
      _cwc_1222 = _and_SxS_( _cwc_1221, _cwc_1217); 
      if (_cwc_1222) 
      { 
        _cwc_1191 = _dim_A_( y); 
        _cwc_1215 = 1; 
        _cwc_1216 = _eq_SxS_( _cwc_1191, _cwc_1215); 
        if (_cwc_1216) 
        { 
          _cwc_1193 = _shape_A_( y); 
          _cwc_1209 = true; 
          _cwc_1212 = 3; 
          _cwc_1210 = [ 0 ]; 
          _cwc_1211 = _sel_VxA_( _cwc_1210, _cwc_1193); 
          _cwc_1213 = _eq_SxS_( _cwc_1211, _cwc_1212); 
          _cwc_1214 = _and_SxS_( _cwc_1213, _cwc_1209); 
          if (_cwc_1214) 
          { 
            _cwc_1208 = UTDScalarB::rhoIBB( x, y) ; 
            _cwc_1156 = _cwc_1208; 
          }
          else
          { 
            _cwc_1202 = true; 
            _cwc_1205 = 2; 
            _cwc_1203 = [ 0 ]; 
            _cwc_1204 = _sel_VxA_( _cwc_1203, _cwc_1193); 
            _cwc_1206 = _eq_SxS_( _cwc_1204, _cwc_1205); 
            _cwc_1207 = _and_SxS_( _cwc_1206, _cwc_1202); 
            if (_cwc_1207) 
            { 
              _cwc_1201 = UTDScalarB::rhoIBB( x, y) ; 
              _cwc_1156 = _cwc_1201; 
            }
            else
            { 
              _cwc_1195 = true; 
              _cwc_1198 = 16; 
              _cwc_1196 = [ 0 ]; 
              _cwc_1197 = _sel_VxA_( _cwc_1196, _cwc_1193); 
              _cwc_1199 = _eq_SxS_( _cwc_1197, _cwc_1198); 
              _cwc_1200 = _and_SxS_( _cwc_1199, _cwc_1195); 
              if (_cwc_1200) 
              { 
                _cwc_1194 = UTDScalarB::rhoIBB( x, y) ; 
                _cwc_1156 = _cwc_1194; 
              }
              else
              { 
                _cwc_1192 = UTDScalarB::rhoIBB( x, y) ; 
                _cwc_1156 = _cwc_1192; 
              }
            }
          }
        }
        else
        { 
          _cwc_1190 = UTDScalarB::rhoIBB( x, y) ; 
          _cwc_1156 = _cwc_1190; 
        }
      }
      else
      { 
        _cwc_1185 = _dim_A_( y); 
        _cwc_1187 = 0; 
        _cwc_1188 = _eq_SxS_( _cwc_1185, _cwc_1187); 
        if (_cwc_1188) 
        { 
          _cwc_1186 = UTDScalarB::rhoIBB( x, y) ; 
          _cwc_1156 = _cwc_1186; 
        }
        else
        { 
          _cwc_1159 = _dim_A_( y); 
          _cwc_1183 = 1; 
          _cwc_1184 = _eq_SxS_( _cwc_1159, _cwc_1183); 
          if (_cwc_1184) 
          { 
            _cwc_1161 = _shape_A_( y); 
            _cwc_1177 = true; 
            _cwc_1180 = 3; 
            _cwc_1178 = [ 0 ]; 
            _cwc_1179 = _sel_VxA_( _cwc_1178, _cwc_1161); 
            _cwc_1181 = _eq_SxS_( _cwc_1179, _cwc_1180); 
            _cwc_1182 = _and_SxS_( _cwc_1181, _cwc_1177); 
            if (_cwc_1182) 
            { 
              _cwc_1176 = UTDScalarB::rhoIBB( x, y) ; 
              _cwc_1156 = _cwc_1176; 
            }
            else
            { 
              _cwc_1170 = true; 
              _cwc_1173 = 2; 
              _cwc_1171 = [ 0 ]; 
              _cwc_1172 = _sel_VxA_( _cwc_1171, _cwc_1161); 
              _cwc_1174 = _eq_SxS_( _cwc_1172, _cwc_1173); 
              _cwc_1175 = _and_SxS_( _cwc_1174, _cwc_1170); 
              if (_cwc_1175) 
              { 
                _cwc_1169 = UTDScalarB::rhoIBB( x, y) ; 
                _cwc_1156 = _cwc_1169; 
              }
              else
              { 
                _cwc_1163 = true; 
                _cwc_1166 = 16; 
                _cwc_1164 = [ 0 ]; 
                _cwc_1165 = _sel_VxA_( _cwc_1164, _cwc_1161); 
                _cwc_1167 = _eq_SxS_( _cwc_1165, _cwc_1166); 
                _cwc_1168 = _and_SxS_( _cwc_1167, _cwc_1163); 
                if (_cwc_1168) 
                { 
                  _cwc_1162 = UTDScalarB::rhoIBB( x, y) ; 
                  _cwc_1156 = _cwc_1162; 
                }
                else
                { 
                  _cwc_1160 = UTDScalarB::rhoIBB( x, y) ; 
                  _cwc_1156 = _cwc_1160; 
                }
              }
            }
          }
          else
          { 
            _cwc_1158 = UTDScalarB::rhoIBB( x, y) ; 
            _cwc_1156 = _cwc_1158; 
          }
        }
      }
    }
  }
  else
  { 
    _cwc_1156 = _dispatch_error_( 1, bool[*], "UTDScalarB::rhoIBB :: int[*] bool[*] -> bool[*] ", x, y); 
  }
  return( _cwc_1156); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::barBBI(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int UTDScalarB::barBBI( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  barBBI :: { bool[*] -> { bool[*] -> ( int),
                             bool -> ( int)},
                bool -> { bool[*] -> ( int),
                          bool -> ( int)}}
 *  dispatching to: UTDScalarB::barBBI
 */
{ 
  int _cwc_1255 { , NN } ; 
  bool _cwc_1262 { , NN } ; 
  int _cwc_1261 { , NN } ; 
  bool _cwc_1260 { , NN } ; 
  int _cwc_1259 { , NN } ; 
  int _cwc_1258 { , NN } ; 
  int _cwc_1257 { , NN } ; 
  int _cwc_1256 { , NN } ; 

  _cwc_1256 = _dim_A_( x); 
  _cwc_1261 = 0; 
  _cwc_1262 = _eq_SxS_( _cwc_1256, _cwc_1261); 
  if (_cwc_1262) 
  { 
    _cwc_1257 = _dim_A_( y); 
    _cwc_1259 = 0; 
    _cwc_1260 = _eq_SxS_( _cwc_1257, _cwc_1259); 
    if (_cwc_1260) 
    { 
      _cwc_1258 = UTDScalarB::barBBI( x, y) ; 
      _cwc_1255 = _cwc_1258; 
    }
    else
    { 
      _cwc_1255 = _dispatch_error_( 1, int, "UTDScalarB::barBBI :: bool[*] bool[*] -> int ", x, y); 
    }
  }
  else
  { 
    _cwc_1255 = _dispatch_error_( 1, int, "UTDScalarB::barBBI :: bool[*] bool[*] -> int ", x, y); 
  }
  return( _cwc_1255); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::eqBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::eqBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  eqBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[*]),
                            bool[+] -> ( bool[+]),
                            bool[.,.] -> ( bool[.,.]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool -> { bool[*] -> ( bool[*]),
                         bool -> ( bool),
                         bool[+] -> ( bool[+])},
               bool[+] -> { bool[*] -> ( bool[+]),
                            bool -> ( bool[+]),
                            bool[+] -> ( bool[+]),
                            bool[.,.] -> ( bool[.,.]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool[.,.] -> { bool[*] -> ( bool[.,.]),
                              bool -> ( --),
                              bool[+] -> ( bool[.,.]),
                              bool[.,.] -> ( bool[.,.])},
               bool[4,4] -> { bool[*] -> ( bool[.,.]),
                              bool -> ( --),
                              bool[+] -> ( bool[.,.]),
                              bool[.,.] -> ( bool[.,.])},
               bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                bool -> ( --),
                                bool[+] -> ( bool[.,.,.]),
                                bool[.,.] -> ( --),
                                bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB
 */
{ 
  bool[*] _cwc_1263 { , NN } ; 
  bool _cwc_1348 { , NN } ; 
  int _cwc_1347 { , NN } ; 
  bool _cwc_1346 { , NN } ; 
  int _cwc_1345 { , NN } ; 
  bool _cwc_1344 { , NN } ; 
  int _cwc_1343 { , NN } ; 
  bool _cwc_1342 { , NN } ; 
  int _cwc_1341 { , NN } ; 
  int _cwc_1340 { , NN } ; 
  bool[+] _cwc_1339 { , NN } ; 
  int _cwc_1338 { , NN } ; 
  bool _cwc_1337 { , NN } ; 
  int _cwc_1336 { , NN } ; 
  int _cwc_1335 { , NN } ; 
  bool _cwc_1334 { , NN } ; 
  int _cwc_1333 { , NN } ; 
  bool _cwc_1332 { , NN } ; 
  bool _cwc_1331 { , NN } ; 
  int{4} _cwc_1330 { , NN } ; 
  int _cwc_1329 { , NN } ; 
  int[1]{1} _cwc_1328 { , NN } ; 
  bool _cwc_1327 { , NN } ; 
  bool _cwc_1326 { , NN } ; 
  int{4} _cwc_1325 { , NN } ; 
  int _cwc_1324 { , NN } ; 
  int[1]{0} _cwc_1323 { , NN } ; 
  bool _cwc_1322 { , NN } ; 
  bool _cwc_1321 { , NN } ; 
  int _cwc_1320 { , NN } ; 
  bool[+] _cwc_1319 { , NN } ; 
  int _cwc_1318 { , NN } ; 
  bool _cwc_1317 { , NN } ; 
  int _cwc_1316 { , NN } ; 
  int _cwc_1315 { , NN } ; 
  bool _cwc_1314 { , NN } ; 
  int _cwc_1313 { , NN } ; 
  bool[.,.] _cwc_1312 { , NN } ; 
  int _cwc_1311 { , NN } ; 
  bool[+] _cwc_1310 { , NN } ; 
  int[+] _cwc_1309 { , NN } ; 
  bool _cwc_1308 { , NN } ; 
  int _cwc_1307 { , NN } ; 
  bool[+] _cwc_1306 { , NN } ; 
  int _cwc_1305 { , NN } ; 
  bool _cwc_1304 { , NN } ; 
  int _cwc_1303 { , NN } ; 
  int _cwc_1302 { , NN } ; 
  bool _cwc_1301 { , NN } ; 
  int _cwc_1300 { , NN } ; 
  bool[+] _cwc_1299 { , NN } ; 
  int _cwc_1298 { , NN } ; 
  bool[+] _cwc_1297 { , NN } ; 
  bool _cwc_1296 { , NN } ; 
  int _cwc_1295 { , NN } ; 
  bool _cwc_1294 { , NN } ; 
  int _cwc_1293 { , NN } ; 
  bool[+] _cwc_1292 { , NN } ; 
  int _cwc_1291 { , NN } ; 
  bool _cwc_1290 { , NN } ; 
  int _cwc_1289 { , NN } ; 
  int _cwc_1288 { , NN } ; 
  bool _cwc_1287 { , NN } ; 
  int _cwc_1286 { , NN } ; 
  bool[+] _cwc_1285 { , NN } ; 
  bool _cwc_1284 { , NN } ; 
  int _cwc_1283 { , NN } ; 
  bool[.,.,.] _cwc_1282 { , NN } ; 
  int _cwc_1281 { , NN } ; 
  bool[+] _cwc_1280 { , NN } ; 
  int _cwc_1279 { , NN } ; 
  bool _cwc_1278 { , NN } ; 
  int _cwc_1277 { , NN } ; 
  bool[+] _cwc_1276 { , NN } ; 
  int _cwc_1275 { , NN } ; 
  bool _cwc_1274 { , NN } ; 
  int _cwc_1273 { , NN } ; 
  int _cwc_1272 { , NN } ; 
  bool _cwc_1271 { , NN } ; 
  int _cwc_1270 { , NN } ; 
  bool[+] _cwc_1269 { , NN } ; 
  bool _cwc_1268 { , NN } ; 
  int _cwc_1267 { , NN } ; 
  bool[+] _cwc_1266 { , NN } ; 
  int _cwc_1265 { , NN } ; 
  bool[+] _cwc_1264 { , NN } ; 

  _cwc_1338 = _dim_A_( x); 
  _cwc_1347 = 0; 
  _cwc_1348 = _eq_SxS_( _cwc_1338, _cwc_1347); 
  if (_cwc_1348) 
  { 
    _cwc_1343 = _dim_A_( y); 
    _cwc_1345 = 0; 
    _cwc_1346 = _eq_SxS_( _cwc_1343, _cwc_1345); 
    if (_cwc_1346) 
    { 
      _cwc_1344 = UTDScalarB::eqBBB( x, y) ; 
      _cwc_1263 = _cwc_1344; 
    }
    else
    { 
      _cwc_1340 = _dim_A_( y); 
      _cwc_1341 = 0; 
      _cwc_1342 = _gt_SxS_( _cwc_1340, _cwc_1341); 
      if (_cwc_1342) 
      { 
        _cwc_1339 = UTDScalarB::eqBBB( x, y) ; 
        _cwc_1263 = _cwc_1339; 
      }
      else
      { 
        _cwc_1263 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_1335 = _dim_A_( x); 
    _cwc_1336 = 0; 
    _cwc_1337 = _gt_SxS_( _cwc_1335, _cwc_1336); 
    if (_cwc_1337) 
    { 
      _cwc_1279 = _dim_A_( x); 
      _cwc_1333 = 2; 
      _cwc_1334 = _eq_SxS_( _cwc_1279, _cwc_1333); 
      if (_cwc_1334) 
      { 
        _cwc_1309 = _shape_A_( x); 
        _cwc_1322 = true; 
        _cwc_1325 = 4; 
        _cwc_1323 = [ 0 ]; 
        _cwc_1324 = _sel_VxA_( _cwc_1323, _cwc_1309); 
        _cwc_1326 = _eq_SxS_( _cwc_1324, _cwc_1325); 
        _cwc_1327 = _and_SxS_( _cwc_1326, _cwc_1322); 
        _cwc_1330 = 4; 
        _cwc_1328 = [ 1 ]; 
        _cwc_1329 = _sel_VxA_( _cwc_1328, _cwc_1309); 
        _cwc_1331 = _eq_SxS_( _cwc_1329, _cwc_1330); 
        _cwc_1332 = _and_SxS_( _cwc_1331, _cwc_1327); 
        if (_cwc_1332) 
        { 
          _cwc_1318 = _dim_A_( y); 
          _cwc_1320 = 0; 
          _cwc_1321 = _eq_SxS_( _cwc_1318, _cwc_1320); 
          if (_cwc_1321) 
          { 
            _cwc_1319 = UTDScalarB::eqBBB( x, y) ; 
            _cwc_1263 = _cwc_1319; 
          }
          else
          { 
            _cwc_1315 = _dim_A_( y); 
            _cwc_1316 = 0; 
            _cwc_1317 = _gt_SxS_( _cwc_1315, _cwc_1316); 
            if (_cwc_1317) 
            { 
              _cwc_1311 = _dim_A_( y); 
              _cwc_1313 = 2; 
              _cwc_1314 = _eq_SxS_( _cwc_1311, _cwc_1313); 
              if (_cwc_1314) 
              { 
                _cwc_1312 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_1263 = _cwc_1312; 
              }
              else
              { 
                _cwc_1310 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_1263 = _cwc_1310; 
              }
            }
            else
            { 
              _cwc_1263 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
            }
          }
        }
        else
        { 
          _cwc_1305 = _dim_A_( y); 
          _cwc_1307 = 0; 
          _cwc_1308 = _eq_SxS_( _cwc_1305, _cwc_1307); 
          if (_cwc_1308) 
          { 
            _cwc_1306 = UTDScalarB::eqBBB( x, y) ; 
            _cwc_1263 = _cwc_1306; 
          }
          else
          { 
            _cwc_1302 = _dim_A_( y); 
            _cwc_1303 = 0; 
            _cwc_1304 = _gt_SxS_( _cwc_1302, _cwc_1303); 
            if (_cwc_1304) 
            { 
              _cwc_1298 = _dim_A_( y); 
              _cwc_1300 = 2; 
              _cwc_1301 = _eq_SxS_( _cwc_1298, _cwc_1300); 
              if (_cwc_1301) 
              { 
                _cwc_1299 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_1263 = _cwc_1299; 
              }
              else
              { 
                _cwc_1297 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_1263 = _cwc_1297; 
              }
            }
            else
            { 
              _cwc_1263 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
            }
          }
        }
      }
      else
      { 
        _cwc_1295 = 3; 
        _cwc_1296 = _eq_SxS_( _cwc_1279, _cwc_1295); 
        if (_cwc_1296) 
        { 
          _cwc_1291 = _dim_A_( y); 
          _cwc_1293 = 0; 
          _cwc_1294 = _eq_SxS_( _cwc_1291, _cwc_1293); 
          if (_cwc_1294) 
          { 
            _cwc_1292 = UTDScalarB::eqBBB( x, y) ; 
            _cwc_1263 = _cwc_1292; 
          }
          else
          { 
            _cwc_1288 = _dim_A_( y); 
            _cwc_1289 = 0; 
            _cwc_1290 = _gt_SxS_( _cwc_1288, _cwc_1289); 
            if (_cwc_1290) 
            { 
              _cwc_1281 = _dim_A_( y); 
              _cwc_1286 = 2; 
              _cwc_1287 = _eq_SxS_( _cwc_1281, _cwc_1286); 
              if (_cwc_1287) 
              { 
                _cwc_1285 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_1263 = _cwc_1285; 
              }
              else
              { 
                _cwc_1283 = 3; 
                _cwc_1284 = _eq_SxS_( _cwc_1281, _cwc_1283); 
                if (_cwc_1284) 
                { 
                  _cwc_1282 = UTDScalarB::eqBBB( x, y) ; 
                  _cwc_1263 = _cwc_1282; 
                }
                else
                { 
                  _cwc_1280 = UTDScalarB::eqBBB( x, y) ; 
                  _cwc_1263 = _cwc_1280; 
                }
              }
            }
            else
            { 
              _cwc_1263 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
            }
          }
        }
        else
        { 
          _cwc_1275 = _dim_A_( y); 
          _cwc_1277 = 0; 
          _cwc_1278 = _eq_SxS_( _cwc_1275, _cwc_1277); 
          if (_cwc_1278) 
          { 
            _cwc_1276 = UTDScalarB::eqBBB( x, y) ; 
            _cwc_1263 = _cwc_1276; 
          }
          else
          { 
            _cwc_1272 = _dim_A_( y); 
            _cwc_1273 = 0; 
            _cwc_1274 = _gt_SxS_( _cwc_1272, _cwc_1273); 
            if (_cwc_1274) 
            { 
              _cwc_1265 = _dim_A_( y); 
              _cwc_1270 = 2; 
              _cwc_1271 = _eq_SxS_( _cwc_1265, _cwc_1270); 
              if (_cwc_1271) 
              { 
                _cwc_1269 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_1263 = _cwc_1269; 
              }
              else
              { 
                _cwc_1267 = 3; 
                _cwc_1268 = _eq_SxS_( _cwc_1265, _cwc_1267); 
                if (_cwc_1268) 
                { 
                  _cwc_1266 = UTDScalarB::eqBBB( x, y) ; 
                  _cwc_1263 = _cwc_1266; 
                }
                else
                { 
                  _cwc_1264 = UTDScalarB::eqBBB( x, y) ; 
                  _cwc_1263 = _cwc_1264; 
                }
              }
            }
            else
            { 
              _cwc_1263 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
            }
          }
        }
      }
    }
    else
    { 
      _cwc_1263 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_1263); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::==(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool UTDScalarB:Array::==( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  == :: { bool[*] -> { bool[*] -> ( bool),
                         bool -> ( bool)},
            bool -> { bool[*] -> ( bool),
                      bool -> ( bool)}}
 *  dispatching to: ScalarArith::==
 */
{ 
  bool _cwc_1349 { , NN } ; 
  bool _cwc_1356 { , NN } ; 
  int _cwc_1355 { , NN } ; 
  bool _cwc_1354 { , NN } ; 
  int _cwc_1353 { , NN } ; 
  bool _cwc_1352 { , NN } ; 
  int _cwc_1351 { , NN } ; 
  int _cwc_1350 { , NN } ; 

  _cwc_1350 = _dim_A_( A); 
  _cwc_1355 = 0; 
  _cwc_1356 = _eq_SxS_( _cwc_1350, _cwc_1355); 
  if (_cwc_1356) 
  { 
    _cwc_1351 = _dim_A_( B); 
    _cwc_1353 = 0; 
    _cwc_1354 = _eq_SxS_( _cwc_1351, _cwc_1353); 
    if (_cwc_1354) 
    { 
      _cwc_1352 = ( A ScalarArith::==B) ; 
      _cwc_1349 = _cwc_1352; 
    }
    else
    { 
      _cwc_1349 = _dispatch_error_( 1, bool, "UTDScalarB:Array::== :: bool[*] bool[*] -> bool ", A, B); 
    }
  }
  else
  { 
    _cwc_1349 = _dispatch_error_( 1, bool, "UTDScalarB:Array::== :: bool[*] bool[*] -> bool ", A, B); 
  }
  return( _cwc_1349); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::==(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:Array::==( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  == :: { int[*] -> { int[*] -> ( bool[*]),
                        int -> ( bool[*]),
                        int[+] -> ( bool[+]),
                        int[.] -> ( bool[.]),
                        int[2] -> ( bool[2]),
                        int[3] -> ( bool[3])},
            int -> { int[*] -> ( bool[*]),
                     int -> ( bool),
                     int[+] -> ( bool[+])},
            int[+] -> { int[*] -> ( bool[+]),
                        int -> ( bool[+]),
                        int[+] -> ( bool[+]),
                        int[.] -> ( bool[.]),
                        int[2] -> ( bool[2]),
                        int[3] -> ( bool[3])},
            int[.] -> { int[*] -> ( bool[.]),
                        int -> ( --),
                        int[+] -> ( bool[.]),
                        int[.] -> ( bool[.]),
                        int[2] -> ( bool[2]),
                        int[3] -> ( bool[3])},
            int[2] -> { int[*] -> ( bool[2]),
                        int -> ( --),
                        int[+] -> ( bool[2]),
                        int[.] -> ( bool[2]),
                        int[2] -> ( bool[2])},
            int[3] -> { int[*] -> ( bool[3]),
                        int -> ( --),
                        int[+] -> ( bool[3]),
                        int[.] -> ( bool[3]),
                        int[2] -> ( --),
                        int[3] -> ( bool[3])}}
 *  dispatching to: ArrayArith::==,
 *                  ArrayArith::==,
 *                  ArrayArith::==,
 *                  ScalarArith::==,
 *                  UTDScalarB:Array::==,
 *                  UTDScalarB:Array::==,
 *                  UTDScalarB:Array::==
 */
{ 
  bool[*] _cwc_1357 { , NN } ; 
  bool _cwc_1488 { , NN } ; 
  int _cwc_1487 { , NN } ; 
  bool _cwc_1486 { , NN } ; 
  int _cwc_1485 { , NN } ; 
  bool _cwc_1484 { , NN } ; 
  int _cwc_1483 { , NN } ; 
  bool _cwc_1482 { , NN } ; 
  int _cwc_1481 { , NN } ; 
  int _cwc_1480 { , NN } ; 
  bool[+] _cwc_1479 { , NN } ; 
  int _cwc_1478 { , NN } ; 
  bool _cwc_1477 { , NN } ; 
  int _cwc_1476 { , NN } ; 
  int _cwc_1475 { , NN } ; 
  bool _cwc_1474 { , NN } ; 
  int _cwc_1473 { , NN } ; 
  bool _cwc_1472 { , NN } ; 
  bool _cwc_1471 { , NN } ; 
  int{2} _cwc_1470 { , NN } ; 
  int _cwc_1469 { , NN } ; 
  int[1]{0} _cwc_1468 { , NN } ; 
  bool _cwc_1467 { , NN } ; 
  bool _cwc_1466 { , NN } ; 
  int _cwc_1465 { , NN } ; 
  bool[+] _cwc_1464 { , NN } ; 
  int _cwc_1463 { , NN } ; 
  bool _cwc_1462 { , NN } ; 
  int _cwc_1461 { , NN } ; 
  int _cwc_1460 { , NN } ; 
  bool _cwc_1459 { , NN } ; 
  int _cwc_1458 { , NN } ; 
  bool _cwc_1457 { , NN } ; 
  bool _cwc_1456 { , NN } ; 
  int{2} _cwc_1455 { , NN } ; 
  int _cwc_1454 { , NN } ; 
  int[1]{0} _cwc_1453 { , NN } ; 
  bool _cwc_1452 { , NN } ; 
  bool[2] _cwc_1451 { , NN } ; 
  int[+] _cwc_1450 { , NN } ; 
  bool[.] _cwc_1449 { , NN } ; 
  int _cwc_1448 { , NN } ; 
  bool[+] _cwc_1447 { , NN } ; 
  bool _cwc_1446 { , NN } ; 
  bool _cwc_1445 { , NN } ; 
  int{3} _cwc_1444 { , NN } ; 
  int _cwc_1443 { , NN } ; 
  int[1]{0} _cwc_1442 { , NN } ; 
  bool _cwc_1441 { , NN } ; 
  bool _cwc_1440 { , NN } ; 
  int _cwc_1439 { , NN } ; 
  bool[+] _cwc_1438 { , NN } ; 
  int _cwc_1437 { , NN } ; 
  bool _cwc_1436 { , NN } ; 
  int _cwc_1435 { , NN } ; 
  int _cwc_1434 { , NN } ; 
  bool _cwc_1433 { , NN } ; 
  int _cwc_1432 { , NN } ; 
  bool _cwc_1431 { , NN } ; 
  bool _cwc_1430 { , NN } ; 
  int{2} _cwc_1429 { , NN } ; 
  int _cwc_1428 { , NN } ; 
  int[1]{0} _cwc_1427 { , NN } ; 
  bool _cwc_1426 { , NN } ; 
  bool[.] _cwc_1425 { , NN } ; 
  bool _cwc_1424 { , NN } ; 
  bool _cwc_1423 { , NN } ; 
  int{3} _cwc_1422 { , NN } ; 
  int _cwc_1421 { , NN } ; 
  int[1]{0} _cwc_1420 { , NN } ; 
  bool _cwc_1419 { , NN } ; 
  bool[3] _cwc_1418 { , NN } ; 
  int[+] _cwc_1417 { , NN } ; 
  bool[.] _cwc_1416 { , NN } ; 
  int _cwc_1415 { , NN } ; 
  bool[+] _cwc_1414 { , NN } ; 
  int[+] _cwc_1413 { , NN } ; 
  bool _cwc_1412 { , NN } ; 
  int _cwc_1411 { , NN } ; 
  bool[+] _cwc_1410 { , NN } ; 
  int _cwc_1409 { , NN } ; 
  bool _cwc_1408 { , NN } ; 
  int _cwc_1407 { , NN } ; 
  int _cwc_1406 { , NN } ; 
  bool _cwc_1405 { , NN } ; 
  int _cwc_1404 { , NN } ; 
  bool _cwc_1403 { , NN } ; 
  bool _cwc_1402 { , NN } ; 
  int{2} _cwc_1401 { , NN } ; 
  int _cwc_1400 { , NN } ; 
  int[1]{0} _cwc_1399 { , NN } ; 
  bool _cwc_1398 { , NN } ; 
  bool[.] _cwc_1397 { , NN } ; 
  bool _cwc_1396 { , NN } ; 
  bool _cwc_1395 { , NN } ; 
  int{3} _cwc_1394 { , NN } ; 
  int _cwc_1393 { , NN } ; 
  int[1]{0} _cwc_1392 { , NN } ; 
  bool _cwc_1391 { , NN } ; 
  bool[.] _cwc_1390 { , NN } ; 
  int[+] _cwc_1389 { , NN } ; 
  bool[.] _cwc_1388 { , NN } ; 
  int _cwc_1387 { , NN } ; 
  bool[+] _cwc_1386 { , NN } ; 
  int _cwc_1385 { , NN } ; 
  bool _cwc_1384 { , NN } ; 
  int _cwc_1383 { , NN } ; 
  bool[+] _cwc_1382 { , NN } ; 
  int _cwc_1381 { , NN } ; 
  bool _cwc_1380 { , NN } ; 
  int _cwc_1379 { , NN } ; 
  int _cwc_1378 { , NN } ; 
  bool _cwc_1377 { , NN } ; 
  int _cwc_1376 { , NN } ; 
  bool _cwc_1375 { , NN } ; 
  bool _cwc_1374 { , NN } ; 
  int{2} _cwc_1373 { , NN } ; 
  int _cwc_1372 { , NN } ; 
  int[1]{0} _cwc_1371 { , NN } ; 
  bool _cwc_1370 { , NN } ; 
  bool[+] _cwc_1369 { , NN } ; 
  bool _cwc_1368 { , NN } ; 
  bool _cwc_1367 { , NN } ; 
  int{3} _cwc_1366 { , NN } ; 
  int _cwc_1365 { , NN } ; 
  int[1]{0} _cwc_1364 { , NN } ; 
  bool _cwc_1363 { , NN } ; 
  bool[+] _cwc_1362 { , NN } ; 
  int[+] _cwc_1361 { , NN } ; 
  bool[+] _cwc_1360 { , NN } ; 
  int _cwc_1359 { , NN } ; 
  bool[+] _cwc_1358 { , NN } ; 

  _cwc_1478 = _dim_A_( A); 
  _cwc_1487 = 0; 
  _cwc_1488 = _eq_SxS_( _cwc_1478, _cwc_1487); 
  if (_cwc_1488) 
  { 
    _cwc_1483 = _dim_A_( B); 
    _cwc_1485 = 0; 
    _cwc_1486 = _eq_SxS_( _cwc_1483, _cwc_1485); 
    if (_cwc_1486) 
    { 
      _cwc_1484 = ( A ScalarArith::==B) ; 
      _cwc_1357 = _cwc_1484; 
    }
    else
    { 
      _cwc_1480 = _dim_A_( B); 
      _cwc_1481 = 0; 
      _cwc_1482 = _gt_SxS_( _cwc_1480, _cwc_1481); 
      if (_cwc_1482) 
      { 
        _cwc_1479 = ( A ArrayArith::==B) ; 
        _cwc_1357 = _cwc_1479; 
      }
      else
      { 
        _cwc_1357 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
      }
    }
  }
  else
  { 
    _cwc_1475 = _dim_A_( A); 
    _cwc_1476 = 0; 
    _cwc_1477 = _gt_SxS_( _cwc_1475, _cwc_1476); 
    if (_cwc_1477) 
    { 
      _cwc_1385 = _dim_A_( A); 
      _cwc_1473 = 1; 
      _cwc_1474 = _eq_SxS_( _cwc_1385, _cwc_1473); 
      if (_cwc_1474) 
      { 
        _cwc_1413 = _shape_A_( A); 
        _cwc_1467 = true; 
        _cwc_1470 = 2; 
        _cwc_1468 = [ 0 ]; 
        _cwc_1469 = _sel_VxA_( _cwc_1468, _cwc_1413); 
        _cwc_1471 = _eq_SxS_( _cwc_1469, _cwc_1470); 
        _cwc_1472 = _and_SxS_( _cwc_1471, _cwc_1467); 
        if (_cwc_1472) 
        { 
          _cwc_1463 = _dim_A_( B); 
          _cwc_1465 = 0; 
          _cwc_1466 = _eq_SxS_( _cwc_1463, _cwc_1465); 
          if (_cwc_1466) 
          { 
            _cwc_1464 = ( A ArrayArith::==B) ; 
            _cwc_1357 = _cwc_1464; 
          }
          else
          { 
            _cwc_1460 = _dim_A_( B); 
            _cwc_1461 = 0; 
            _cwc_1462 = _gt_SxS_( _cwc_1460, _cwc_1461); 
            if (_cwc_1462) 
            { 
              _cwc_1448 = _dim_A_( B); 
              _cwc_1458 = 1; 
              _cwc_1459 = _eq_SxS_( _cwc_1448, _cwc_1458); 
              if (_cwc_1459) 
              { 
                _cwc_1450 = _shape_A_( B); 
                _cwc_1452 = true; 
                _cwc_1455 = 2; 
                _cwc_1453 = [ 0 ]; 
                _cwc_1454 = _sel_VxA_( _cwc_1453, _cwc_1450); 
                _cwc_1456 = _eq_SxS_( _cwc_1454, _cwc_1455); 
                _cwc_1457 = _and_SxS_( _cwc_1456, _cwc_1452); 
                if (_cwc_1457) 
                { 
                  _cwc_1451 = ( A UTDScalarB:Array::==B) ; 
                  _cwc_1357 = _cwc_1451; 
                }
                else
                { 
                  _cwc_1449 = ( A UTDScalarB:Array::==B) ; 
                  _cwc_1357 = _cwc_1449; 
                }
              }
              else
              { 
                _cwc_1447 = ( A ArrayArith::==B) ; 
                _cwc_1357 = _cwc_1447; 
              }
            }
            else
            { 
              _cwc_1357 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
            }
          }
        }
        else
        { 
          _cwc_1441 = true; 
          _cwc_1444 = 3; 
          _cwc_1442 = [ 0 ]; 
          _cwc_1443 = _sel_VxA_( _cwc_1442, _cwc_1413); 
          _cwc_1445 = _eq_SxS_( _cwc_1443, _cwc_1444); 
          _cwc_1446 = _and_SxS_( _cwc_1445, _cwc_1441); 
          if (_cwc_1446) 
          { 
            _cwc_1437 = _dim_A_( B); 
            _cwc_1439 = 0; 
            _cwc_1440 = _eq_SxS_( _cwc_1437, _cwc_1439); 
            if (_cwc_1440) 
            { 
              _cwc_1438 = ( A ArrayArith::==B) ; 
              _cwc_1357 = _cwc_1438; 
            }
            else
            { 
              _cwc_1434 = _dim_A_( B); 
              _cwc_1435 = 0; 
              _cwc_1436 = _gt_SxS_( _cwc_1434, _cwc_1435); 
              if (_cwc_1436) 
              { 
                _cwc_1415 = _dim_A_( B); 
                _cwc_1432 = 1; 
                _cwc_1433 = _eq_SxS_( _cwc_1415, _cwc_1432); 
                if (_cwc_1433) 
                { 
                  _cwc_1417 = _shape_A_( B); 
                  _cwc_1426 = true; 
                  _cwc_1429 = 2; 
                  _cwc_1427 = [ 0 ]; 
                  _cwc_1428 = _sel_VxA_( _cwc_1427, _cwc_1417); 
                  _cwc_1430 = _eq_SxS_( _cwc_1428, _cwc_1429); 
                  _cwc_1431 = _and_SxS_( _cwc_1430, _cwc_1426); 
                  if (_cwc_1431) 
                  { 
                    _cwc_1425 = ( A UTDScalarB:Array::==B) ; 
                    _cwc_1357 = _cwc_1425; 
                  }
                  else
                  { 
                    _cwc_1419 = true; 
                    _cwc_1422 = 3; 
                    _cwc_1420 = [ 0 ]; 
                    _cwc_1421 = _sel_VxA_( _cwc_1420, _cwc_1417); 
                    _cwc_1423 = _eq_SxS_( _cwc_1421, _cwc_1422); 
                    _cwc_1424 = _and_SxS_( _cwc_1423, _cwc_1419); 
                    if (_cwc_1424) 
                    { 
                      _cwc_1418 = ( A UTDScalarB:Array::==B) ; 
                      _cwc_1357 = _cwc_1418; 
                    }
                    else
                    { 
                      _cwc_1416 = ( A UTDScalarB:Array::==B) ; 
                      _cwc_1357 = _cwc_1416; 
                    }
                  }
                }
                else
                { 
                  _cwc_1414 = ( A ArrayArith::==B) ; 
                  _cwc_1357 = _cwc_1414; 
                }
              }
              else
              { 
                _cwc_1357 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
              }
            }
          }
          else
          { 
            _cwc_1409 = _dim_A_( B); 
            _cwc_1411 = 0; 
            _cwc_1412 = _eq_SxS_( _cwc_1409, _cwc_1411); 
            if (_cwc_1412) 
            { 
              _cwc_1410 = ( A ArrayArith::==B) ; 
              _cwc_1357 = _cwc_1410; 
            }
            else
            { 
              _cwc_1406 = _dim_A_( B); 
              _cwc_1407 = 0; 
              _cwc_1408 = _gt_SxS_( _cwc_1406, _cwc_1407); 
              if (_cwc_1408) 
              { 
                _cwc_1387 = _dim_A_( B); 
                _cwc_1404 = 1; 
                _cwc_1405 = _eq_SxS_( _cwc_1387, _cwc_1404); 
                if (_cwc_1405) 
                { 
                  _cwc_1389 = _shape_A_( B); 
                  _cwc_1398 = true; 
                  _cwc_1401 = 2; 
                  _cwc_1399 = [ 0 ]; 
                  _cwc_1400 = _sel_VxA_( _cwc_1399, _cwc_1389); 
                  _cwc_1402 = _eq_SxS_( _cwc_1400, _cwc_1401); 
                  _cwc_1403 = _and_SxS_( _cwc_1402, _cwc_1398); 
                  if (_cwc_1403) 
                  { 
                    _cwc_1397 = ( A UTDScalarB:Array::==B) ; 
                    _cwc_1357 = _cwc_1397; 
                  }
                  else
                  { 
                    _cwc_1391 = true; 
                    _cwc_1394 = 3; 
                    _cwc_1392 = [ 0 ]; 
                    _cwc_1393 = _sel_VxA_( _cwc_1392, _cwc_1389); 
                    _cwc_1395 = _eq_SxS_( _cwc_1393, _cwc_1394); 
                    _cwc_1396 = _and_SxS_( _cwc_1395, _cwc_1391); 
                    if (_cwc_1396) 
                    { 
                      _cwc_1390 = ( A UTDScalarB:Array::==B) ; 
                      _cwc_1357 = _cwc_1390; 
                    }
                    else
                    { 
                      _cwc_1388 = ( A UTDScalarB:Array::==B) ; 
                      _cwc_1357 = _cwc_1388; 
                    }
                  }
                }
                else
                { 
                  _cwc_1386 = ( A ArrayArith::==B) ; 
                  _cwc_1357 = _cwc_1386; 
                }
              }
              else
              { 
                _cwc_1357 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
              }
            }
          }
        }
      }
      else
      { 
        _cwc_1381 = _dim_A_( B); 
        _cwc_1383 = 0; 
        _cwc_1384 = _eq_SxS_( _cwc_1381, _cwc_1383); 
        if (_cwc_1384) 
        { 
          _cwc_1382 = ( A ArrayArith::==B) ; 
          _cwc_1357 = _cwc_1382; 
        }
        else
        { 
          _cwc_1378 = _dim_A_( B); 
          _cwc_1379 = 0; 
          _cwc_1380 = _gt_SxS_( _cwc_1378, _cwc_1379); 
          if (_cwc_1380) 
          { 
            _cwc_1359 = _dim_A_( B); 
            _cwc_1376 = 1; 
            _cwc_1377 = _eq_SxS_( _cwc_1359, _cwc_1376); 
            if (_cwc_1377) 
            { 
              _cwc_1361 = _shape_A_( B); 
              _cwc_1370 = true; 
              _cwc_1373 = 2; 
              _cwc_1371 = [ 0 ]; 
              _cwc_1372 = _sel_VxA_( _cwc_1371, _cwc_1361); 
              _cwc_1374 = _eq_SxS_( _cwc_1372, _cwc_1373); 
              _cwc_1375 = _and_SxS_( _cwc_1374, _cwc_1370); 
              if (_cwc_1375) 
              { 
                _cwc_1369 = ( A ArrayArith::==B) ; 
                _cwc_1357 = _cwc_1369; 
              }
              else
              { 
                _cwc_1363 = true; 
                _cwc_1366 = 3; 
                _cwc_1364 = [ 0 ]; 
                _cwc_1365 = _sel_VxA_( _cwc_1364, _cwc_1361); 
                _cwc_1367 = _eq_SxS_( _cwc_1365, _cwc_1366); 
                _cwc_1368 = _and_SxS_( _cwc_1367, _cwc_1363); 
                if (_cwc_1368) 
                { 
                  _cwc_1362 = ( A ArrayArith::==B) ; 
                  _cwc_1357 = _cwc_1362; 
                }
                else
                { 
                  _cwc_1360 = ( A ArrayArith::==B) ; 
                  _cwc_1357 = _cwc_1360; 
                }
              }
            }
            else
            { 
              _cwc_1358 = ( A ArrayArith::==B) ; 
              _cwc_1357 = _cwc_1358; 
            }
          }
          else
          { 
            _cwc_1357 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
          }
        }
      }
    }
    else
    { 
      _cwc_1357 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
    }
  }
  return( _cwc_1357); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::shape(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[.] UTDScalarB:Array::shape( bool[*] array { ,NN } )
/*
 *  shape :: { bool[*] -> ( int[.]),
               bool -> ( int[0]{}),
               bool[+] -> ( int[.]),
               bool[.] -> ( int[1]),
               bool[3] -> ( int[1]{3}),
               bool[2] -> ( int[1]{2}),
               bool[16] -> ( int[1]{16}),
               bool[4] -> ( int[1]{4}),
               bool[15] -> ( int[1]{15}),
               bool[.,.] -> ( int[2]),
               bool[.,.,.] -> ( int[3])}
 *  dispatching to: ArrayBasics::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape
 */
{ 
  int[.] _cwc_1489 { , NN } ; 
  bool _cwc_1544 { , NN } ; 
  int _cwc_1543 { , NN } ; 
  int[0]{} _cwc_1542 { , NN } ; 
  int _cwc_1541 { , NN } ; 
  bool _cwc_1540 { , NN } ; 
  int _cwc_1539 { , NN } ; 
  int[.] _cwc_1538 { , NN } ; 
  int _cwc_1537 { , NN } ; 
  bool _cwc_1536 { , NN } ; 
  int _cwc_1535 { , NN } ; 
  bool _cwc_1534 { , NN } ; 
  bool _cwc_1533 { , NN } ; 
  int{3} _cwc_1532 { , NN } ; 
  int _cwc_1531 { , NN } ; 
  int[1]{0} _cwc_1530 { , NN } ; 
  bool _cwc_1529 { , NN } ; 
  int[1]{3} _cwc_1528 { , NN } ; 
  bool _cwc_1527 { , NN } ; 
  bool _cwc_1526 { , NN } ; 
  int{2} _cwc_1525 { , NN } ; 
  int _cwc_1524 { , NN } ; 
  int[1]{0} _cwc_1523 { , NN } ; 
  bool _cwc_1522 { , NN } ; 
  int[1]{2} _cwc_1521 { , NN } ; 
  bool _cwc_1520 { , NN } ; 
  bool _cwc_1519 { , NN } ; 
  int{16} _cwc_1518 { , NN } ; 
  int _cwc_1517 { , NN } ; 
  int[1]{0} _cwc_1516 { , NN } ; 
  bool _cwc_1515 { , NN } ; 
  int[1]{16} _cwc_1514 { , NN } ; 
  bool _cwc_1513 { , NN } ; 
  bool _cwc_1512 { , NN } ; 
  int{4} _cwc_1511 { , NN } ; 
  int _cwc_1510 { , NN } ; 
  int[1]{0} _cwc_1509 { , NN } ; 
  bool _cwc_1508 { , NN } ; 
  int[1]{4} _cwc_1507 { , NN } ; 
  bool _cwc_1506 { , NN } ; 
  bool _cwc_1505 { , NN } ; 
  int{15} _cwc_1504 { , NN } ; 
  int _cwc_1503 { , NN } ; 
  int[1]{0} _cwc_1502 { , NN } ; 
  bool _cwc_1501 { , NN } ; 
  int[1]{15} _cwc_1500 { , NN } ; 
  int[+] _cwc_1499 { , NN } ; 
  int[1] _cwc_1498 { , NN } ; 
  bool _cwc_1497 { , NN } ; 
  int _cwc_1496 { , NN } ; 
  int[2] _cwc_1495 { , NN } ; 
  bool _cwc_1494 { , NN } ; 
  int _cwc_1493 { , NN } ; 
  int[3] _cwc_1492 { , NN } ; 
  int _cwc_1491 { , NN } ; 
  int[.] _cwc_1490 { , NN } ; 

  _cwc_1541 = _dim_A_( array); 
  _cwc_1543 = 0; 
  _cwc_1544 = _eq_SxS_( _cwc_1541, _cwc_1543); 
  if (_cwc_1544) 
  { 
    _cwc_1542 = UTDScalarB:Array::shape( array) ; 
    _cwc_1489 = _cwc_1542; 
  }
  else
  { 
    _cwc_1537 = _dim_A_( array); 
    _cwc_1539 = 0; 
    _cwc_1540 = _gt_SxS_( _cwc_1537, _cwc_1539); 
    if (_cwc_1540) 
    { 
      _cwc_1491 = _dim_A_( array); 
      _cwc_1535 = 1; 
      _cwc_1536 = _eq_SxS_( _cwc_1491, _cwc_1535); 
      if (_cwc_1536) 
      { 
        _cwc_1499 = _shape_A_( array); 
        _cwc_1529 = true; 
        _cwc_1532 = 3; 
        _cwc_1530 = [ 0 ]; 
        _cwc_1531 = _sel_VxA_( _cwc_1530, _cwc_1499); 
        _cwc_1533 = _eq_SxS_( _cwc_1531, _cwc_1532); 
        _cwc_1534 = _and_SxS_( _cwc_1533, _cwc_1529); 
        if (_cwc_1534) 
        { 
          _cwc_1528 = UTDScalarB:Array::shape( array) ; 
          _cwc_1489 = _cwc_1528; 
        }
        else
        { 
          _cwc_1522 = true; 
          _cwc_1525 = 2; 
          _cwc_1523 = [ 0 ]; 
          _cwc_1524 = _sel_VxA_( _cwc_1523, _cwc_1499); 
          _cwc_1526 = _eq_SxS_( _cwc_1524, _cwc_1525); 
          _cwc_1527 = _and_SxS_( _cwc_1526, _cwc_1522); 
          if (_cwc_1527) 
          { 
            _cwc_1521 = UTDScalarB:Array::shape( array) ; 
            _cwc_1489 = _cwc_1521; 
          }
          else
          { 
            _cwc_1515 = true; 
            _cwc_1518 = 16; 
            _cwc_1516 = [ 0 ]; 
            _cwc_1517 = _sel_VxA_( _cwc_1516, _cwc_1499); 
            _cwc_1519 = _eq_SxS_( _cwc_1517, _cwc_1518); 
            _cwc_1520 = _and_SxS_( _cwc_1519, _cwc_1515); 
            if (_cwc_1520) 
            { 
              _cwc_1514 = UTDScalarB:Array::shape( array) ; 
              _cwc_1489 = _cwc_1514; 
            }
            else
            { 
              _cwc_1508 = true; 
              _cwc_1511 = 4; 
              _cwc_1509 = [ 0 ]; 
              _cwc_1510 = _sel_VxA_( _cwc_1509, _cwc_1499); 
              _cwc_1512 = _eq_SxS_( _cwc_1510, _cwc_1511); 
              _cwc_1513 = _and_SxS_( _cwc_1512, _cwc_1508); 
              if (_cwc_1513) 
              { 
                _cwc_1507 = UTDScalarB:Array::shape( array) ; 
                _cwc_1489 = _cwc_1507; 
              }
              else
              { 
                _cwc_1501 = true; 
                _cwc_1504 = 15; 
                _cwc_1502 = [ 0 ]; 
                _cwc_1503 = _sel_VxA_( _cwc_1502, _cwc_1499); 
                _cwc_1505 = _eq_SxS_( _cwc_1503, _cwc_1504); 
                _cwc_1506 = _and_SxS_( _cwc_1505, _cwc_1501); 
                if (_cwc_1506) 
                { 
                  _cwc_1500 = UTDScalarB:Array::shape( array) ; 
                  _cwc_1489 = _cwc_1500; 
                }
                else
                { 
                  _cwc_1498 = UTDScalarB:Array::shape( array) ; 
                  _cwc_1489 = _cwc_1498; 
                }
              }
            }
          }
        }
      }
      else
      { 
        _cwc_1496 = 2; 
        _cwc_1497 = _eq_SxS_( _cwc_1491, _cwc_1496); 
        if (_cwc_1497) 
        { 
          _cwc_1495 = UTDScalarB:Array::shape( array) ; 
          _cwc_1489 = _cwc_1495; 
        }
        else
        { 
          _cwc_1493 = 3; 
          _cwc_1494 = _eq_SxS_( _cwc_1491, _cwc_1493); 
          if (_cwc_1494) 
          { 
            _cwc_1492 = UTDScalarB:Array::shape( array) ; 
            _cwc_1489 = _cwc_1492; 
          }
          else
          { 
            _cwc_1490 = UTDScalarB:Array::shape( array) ; 
            _cwc_1489 = _cwc_1490; 
          }
        }
      }
    }
    else
    { 
      _cwc_1538 = ArrayBasics::shape( array) ; 
      _cwc_1489 = _cwc_1538; 
    }
  }
  return( _cwc_1489); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::shape(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[.] UTDScalarB:Array::shape( int[*] array { ,NN } )
/*
 *  shape :: { int[*] -> ( int[.]),
               int[+] -> ( int[1]),
               int[.] -> ( int[1]),
               int[3] -> ( int[1]{3}),
               int[1] -> ( int[1]{1}),
               int[2] -> ( int[1]{2}),
               int[0] -> ( int[1]{0})}
 *  dispatching to: ArrayBasics::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape
 */
{ 
  int[.] _cwc_1545 { , NN } ; 
  bool _cwc_1579 { , NN } ; 
  int _cwc_1578 { , NN } ; 
  bool _cwc_1577 { , NN } ; 
  bool _cwc_1576 { , NN } ; 
  int{3} _cwc_1575 { , NN } ; 
  int _cwc_1574 { , NN } ; 
  int[1]{0} _cwc_1573 { , NN } ; 
  bool _cwc_1572 { , NN } ; 
  int[1]{3} _cwc_1571 { , NN } ; 
  bool _cwc_1570 { , NN } ; 
  bool _cwc_1569 { , NN } ; 
  int{1} _cwc_1568 { , NN } ; 
  int _cwc_1567 { , NN } ; 
  int[1]{0} _cwc_1566 { , NN } ; 
  bool _cwc_1565 { , NN } ; 
  int[1]{1} _cwc_1564 { , NN } ; 
  bool _cwc_1563 { , NN } ; 
  bool _cwc_1562 { , NN } ; 
  int{2} _cwc_1561 { , NN } ; 
  int _cwc_1560 { , NN } ; 
  int[1]{0} _cwc_1559 { , NN } ; 
  bool _cwc_1558 { , NN } ; 
  int[1]{2} _cwc_1557 { , NN } ; 
  bool _cwc_1556 { , NN } ; 
  bool _cwc_1555 { , NN } ; 
  int{0} _cwc_1554 { , NN } ; 
  int _cwc_1553 { , NN } ; 
  int[1]{0} _cwc_1552 { , NN } ; 
  bool _cwc_1551 { , NN } ; 
  int[1]{0} _cwc_1550 { , NN } ; 
  int[+] _cwc_1549 { , NN } ; 
  int[1] _cwc_1548 { , NN } ; 
  int _cwc_1547 { , NN } ; 
  int[.] _cwc_1546 { , NN } ; 

  _cwc_1547 = _dim_A_( array); 
  _cwc_1578 = 1; 
  _cwc_1579 = _eq_SxS_( _cwc_1547, _cwc_1578); 
  if (_cwc_1579) 
  { 
    _cwc_1549 = _shape_A_( array); 
    _cwc_1572 = true; 
    _cwc_1575 = 3; 
    _cwc_1573 = [ 0 ]; 
    _cwc_1574 = _sel_VxA_( _cwc_1573, _cwc_1549); 
    _cwc_1576 = _eq_SxS_( _cwc_1574, _cwc_1575); 
    _cwc_1577 = _and_SxS_( _cwc_1576, _cwc_1572); 
    if (_cwc_1577) 
    { 
      _cwc_1571 = UTDScalarB:Array::shape( array) ; 
      _cwc_1545 = _cwc_1571; 
    }
    else
    { 
      _cwc_1565 = true; 
      _cwc_1568 = 1; 
      _cwc_1566 = [ 0 ]; 
      _cwc_1567 = _sel_VxA_( _cwc_1566, _cwc_1549); 
      _cwc_1569 = _eq_SxS_( _cwc_1567, _cwc_1568); 
      _cwc_1570 = _and_SxS_( _cwc_1569, _cwc_1565); 
      if (_cwc_1570) 
      { 
        _cwc_1564 = UTDScalarB:Array::shape( array) ; 
        _cwc_1545 = _cwc_1564; 
      }
      else
      { 
        _cwc_1558 = true; 
        _cwc_1561 = 2; 
        _cwc_1559 = [ 0 ]; 
        _cwc_1560 = _sel_VxA_( _cwc_1559, _cwc_1549); 
        _cwc_1562 = _eq_SxS_( _cwc_1560, _cwc_1561); 
        _cwc_1563 = _and_SxS_( _cwc_1562, _cwc_1558); 
        if (_cwc_1563) 
        { 
          _cwc_1557 = UTDScalarB:Array::shape( array) ; 
          _cwc_1545 = _cwc_1557; 
        }
        else
        { 
          _cwc_1551 = true; 
          _cwc_1554 = 0; 
          _cwc_1552 = [ 0 ]; 
          _cwc_1553 = _sel_VxA_( _cwc_1552, _cwc_1549); 
          _cwc_1555 = _eq_SxS_( _cwc_1553, _cwc_1554); 
          _cwc_1556 = _and_SxS_( _cwc_1555, _cwc_1551); 
          if (_cwc_1556) 
          { 
            _cwc_1550 = UTDScalarB:Array::shape( array) ; 
            _cwc_1545 = _cwc_1550; 
          }
          else
          { 
            _cwc_1548 = UTDScalarB:Array::shape( array) ; 
            _cwc_1545 = _cwc_1548; 
          }
        }
      }
    }
  }
  else
  { 
    _cwc_1546 = ArrayBasics::shape( array) ; 
    _cwc_1545 = _cwc_1546; 
  }
  return( _cwc_1545); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::to_bool(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:Array::to_bool( bool[*] i { ,NN } )
/*
 *  to_bool :: { bool[*] -> ( bool[*]),
                 bool -> ( bool),
                 bool[+] -> ( bool[+]),
                 bool[.] -> ( bool[.]),
                 bool[2] -> ( bool[2]),
                 bool[3] -> ( bool[3]),
                 bool[4] -> ( bool[4]),
                 bool[8] -> ( bool[8]),
                 bool[12] -> ( bool[12]),
                 bool[5] -> ( bool[5]),
                 bool[6] -> ( bool[6]),
                 bool[7] -> ( bool[7]),
                 bool[9] -> ( bool[9]),
                 bool[10] -> ( bool[10]),
                 bool[11] -> ( bool[11]),
                 bool[13] -> ( bool[13]),
                 bool[14] -> ( bool[14]),
                 bool[1] -> ( bool[1]),
                 bool[.,.] -> ( bool[.,.]),
                 bool[4,4] -> ( bool[4,4]),
                 bool[.,.,.] -> ( bool[.,.,.])}
 *  dispatching to: Bool::to_bool,
 *                  ArrayArith::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool
 */
{ 
  bool[*] _cwc_1580 { , NN } ; 
  bool _cwc_1711 { , NN } ; 
  int _cwc_1710 { , NN } ; 
  bool _cwc_1709 { , NN } ; 
  int _cwc_1708 { , NN } ; 
  bool _cwc_1707 { , NN } ; 
  int _cwc_1706 { , NN } ; 
  bool[*] _cwc_1705 { , NN } ; 
  int _cwc_1704 { , NN } ; 
  bool _cwc_1703 { , NN } ; 
  int _cwc_1702 { , NN } ; 
  bool _cwc_1701 { , NN } ; 
  bool _cwc_1700 { , NN } ; 
  int{2} _cwc_1699 { , NN } ; 
  int _cwc_1698 { , NN } ; 
  int[1]{0} _cwc_1697 { , NN } ; 
  bool _cwc_1696 { , NN } ; 
  bool[2] _cwc_1695 { , NN } ; 
  bool _cwc_1694 { , NN } ; 
  bool _cwc_1693 { , NN } ; 
  int{3} _cwc_1692 { , NN } ; 
  int _cwc_1691 { , NN } ; 
  int[1]{0} _cwc_1690 { , NN } ; 
  bool _cwc_1689 { , NN } ; 
  bool[3] _cwc_1688 { , NN } ; 
  bool _cwc_1687 { , NN } ; 
  bool _cwc_1686 { , NN } ; 
  int{4} _cwc_1685 { , NN } ; 
  int _cwc_1684 { , NN } ; 
  int[1]{0} _cwc_1683 { , NN } ; 
  bool _cwc_1682 { , NN } ; 
  bool[4] _cwc_1681 { , NN } ; 
  bool _cwc_1680 { , NN } ; 
  bool _cwc_1679 { , NN } ; 
  int{8} _cwc_1678 { , NN } ; 
  int _cwc_1677 { , NN } ; 
  int[1]{0} _cwc_1676 { , NN } ; 
  bool _cwc_1675 { , NN } ; 
  bool[8] _cwc_1674 { , NN } ; 
  bool _cwc_1673 { , NN } ; 
  bool _cwc_1672 { , NN } ; 
  int{12} _cwc_1671 { , NN } ; 
  int _cwc_1670 { , NN } ; 
  int[1]{0} _cwc_1669 { , NN } ; 
  bool _cwc_1668 { , NN } ; 
  bool[12] _cwc_1667 { , NN } ; 
  bool _cwc_1666 { , NN } ; 
  bool _cwc_1665 { , NN } ; 
  int{5} _cwc_1664 { , NN } ; 
  int _cwc_1663 { , NN } ; 
  int[1]{0} _cwc_1662 { , NN } ; 
  bool _cwc_1661 { , NN } ; 
  bool[5] _cwc_1660 { , NN } ; 
  bool _cwc_1659 { , NN } ; 
  bool _cwc_1658 { , NN } ; 
  int{6} _cwc_1657 { , NN } ; 
  int _cwc_1656 { , NN } ; 
  int[1]{0} _cwc_1655 { , NN } ; 
  bool _cwc_1654 { , NN } ; 
  bool[6] _cwc_1653 { , NN } ; 
  bool _cwc_1652 { , NN } ; 
  bool _cwc_1651 { , NN } ; 
  int{7} _cwc_1650 { , NN } ; 
  int _cwc_1649 { , NN } ; 
  int[1]{0} _cwc_1648 { , NN } ; 
  bool _cwc_1647 { , NN } ; 
  bool[7] _cwc_1646 { , NN } ; 
  bool _cwc_1645 { , NN } ; 
  bool _cwc_1644 { , NN } ; 
  int{9} _cwc_1643 { , NN } ; 
  int _cwc_1642 { , NN } ; 
  int[1]{0} _cwc_1641 { , NN } ; 
  bool _cwc_1640 { , NN } ; 
  bool[9] _cwc_1639 { , NN } ; 
  bool _cwc_1638 { , NN } ; 
  bool _cwc_1637 { , NN } ; 
  int{10} _cwc_1636 { , NN } ; 
  int _cwc_1635 { , NN } ; 
  int[1]{0} _cwc_1634 { , NN } ; 
  bool _cwc_1633 { , NN } ; 
  bool[10] _cwc_1632 { , NN } ; 
  bool _cwc_1631 { , NN } ; 
  bool _cwc_1630 { , NN } ; 
  int{11} _cwc_1629 { , NN } ; 
  int _cwc_1628 { , NN } ; 
  int[1]{0} _cwc_1627 { , NN } ; 
  bool _cwc_1626 { , NN } ; 
  bool[11] _cwc_1625 { , NN } ; 
  bool _cwc_1624 { , NN } ; 
  bool _cwc_1623 { , NN } ; 
  int{13} _cwc_1622 { , NN } ; 
  int _cwc_1621 { , NN } ; 
  int[1]{0} _cwc_1620 { , NN } ; 
  bool _cwc_1619 { , NN } ; 
  bool[13] _cwc_1618 { , NN } ; 
  bool _cwc_1617 { , NN } ; 
  bool _cwc_1616 { , NN } ; 
  int{14} _cwc_1615 { , NN } ; 
  int _cwc_1614 { , NN } ; 
  int[1]{0} _cwc_1613 { , NN } ; 
  bool _cwc_1612 { , NN } ; 
  bool[14] _cwc_1611 { , NN } ; 
  bool _cwc_1610 { , NN } ; 
  bool _cwc_1609 { , NN } ; 
  int{1} _cwc_1608 { , NN } ; 
  int _cwc_1607 { , NN } ; 
  int[1]{0} _cwc_1606 { , NN } ; 
  bool _cwc_1605 { , NN } ; 
  bool[1] _cwc_1604 { , NN } ; 
  int[+] _cwc_1603 { , NN } ; 
  bool[.] _cwc_1602 { , NN } ; 
  bool _cwc_1601 { , NN } ; 
  int _cwc_1600 { , NN } ; 
  bool _cwc_1599 { , NN } ; 
  bool _cwc_1598 { , NN } ; 
  int{4} _cwc_1597 { , NN } ; 
  int _cwc_1596 { , NN } ; 
  int[1]{1} _cwc_1595 { , NN } ; 
  bool _cwc_1594 { , NN } ; 
  bool _cwc_1593 { , NN } ; 
  int{4} _cwc_1592 { , NN } ; 
  int _cwc_1591 { , NN } ; 
  int[1]{0} _cwc_1590 { , NN } ; 
  bool _cwc_1589 { , NN } ; 
  bool[4,4] _cwc_1588 { , NN } ; 
  int[+] _cwc_1587 { , NN } ; 
  bool[.,.] _cwc_1586 { , NN } ; 
  bool _cwc_1585 { , NN } ; 
  int _cwc_1584 { , NN } ; 
  bool[.,.,.] _cwc_1583 { , NN } ; 
  int _cwc_1582 { , NN } ; 
  bool[+] _cwc_1581 { , NN } ; 

  _cwc_1708 = _dim_A_( i); 
  _cwc_1710 = 0; 
  _cwc_1711 = _eq_SxS_( _cwc_1708, _cwc_1710); 
  if (_cwc_1711) 
  { 
    _cwc_1709 = Bool::to_bool( i) ; 
    _cwc_1580 = _cwc_1709; 
  }
  else
  { 
    _cwc_1704 = _dim_A_( i); 
    _cwc_1706 = 0; 
    _cwc_1707 = _gt_SxS_( _cwc_1704, _cwc_1706); 
    if (_cwc_1707) 
    { 
      _cwc_1582 = _dim_A_( i); 
      _cwc_1702 = 1; 
      _cwc_1703 = _eq_SxS_( _cwc_1582, _cwc_1702); 
      if (_cwc_1703) 
      { 
        _cwc_1603 = _shape_A_( i); 
        _cwc_1696 = true; 
        _cwc_1699 = 2; 
        _cwc_1697 = [ 0 ]; 
        _cwc_1698 = _sel_VxA_( _cwc_1697, _cwc_1603); 
        _cwc_1700 = _eq_SxS_( _cwc_1698, _cwc_1699); 
        _cwc_1701 = _and_SxS_( _cwc_1700, _cwc_1696); 
        if (_cwc_1701) 
        { 
          _cwc_1695 = UTDScalarB:Array::to_bool( i) ; 
          _cwc_1580 = _cwc_1695; 
        }
        else
        { 
          _cwc_1689 = true; 
          _cwc_1692 = 3; 
          _cwc_1690 = [ 0 ]; 
          _cwc_1691 = _sel_VxA_( _cwc_1690, _cwc_1603); 
          _cwc_1693 = _eq_SxS_( _cwc_1691, _cwc_1692); 
          _cwc_1694 = _and_SxS_( _cwc_1693, _cwc_1689); 
          if (_cwc_1694) 
          { 
            _cwc_1688 = UTDScalarB:Array::to_bool( i) ; 
            _cwc_1580 = _cwc_1688; 
          }
          else
          { 
            _cwc_1682 = true; 
            _cwc_1685 = 4; 
            _cwc_1683 = [ 0 ]; 
            _cwc_1684 = _sel_VxA_( _cwc_1683, _cwc_1603); 
            _cwc_1686 = _eq_SxS_( _cwc_1684, _cwc_1685); 
            _cwc_1687 = _and_SxS_( _cwc_1686, _cwc_1682); 
            if (_cwc_1687) 
            { 
              _cwc_1681 = UTDScalarB:Array::to_bool( i) ; 
              _cwc_1580 = _cwc_1681; 
            }
            else
            { 
              _cwc_1675 = true; 
              _cwc_1678 = 8; 
              _cwc_1676 = [ 0 ]; 
              _cwc_1677 = _sel_VxA_( _cwc_1676, _cwc_1603); 
              _cwc_1679 = _eq_SxS_( _cwc_1677, _cwc_1678); 
              _cwc_1680 = _and_SxS_( _cwc_1679, _cwc_1675); 
              if (_cwc_1680) 
              { 
                _cwc_1674 = UTDScalarB:Array::to_bool( i) ; 
                _cwc_1580 = _cwc_1674; 
              }
              else
              { 
                _cwc_1668 = true; 
                _cwc_1671 = 12; 
                _cwc_1669 = [ 0 ]; 
                _cwc_1670 = _sel_VxA_( _cwc_1669, _cwc_1603); 
                _cwc_1672 = _eq_SxS_( _cwc_1670, _cwc_1671); 
                _cwc_1673 = _and_SxS_( _cwc_1672, _cwc_1668); 
                if (_cwc_1673) 
                { 
                  _cwc_1667 = UTDScalarB:Array::to_bool( i) ; 
                  _cwc_1580 = _cwc_1667; 
                }
                else
                { 
                  _cwc_1661 = true; 
                  _cwc_1664 = 5; 
                  _cwc_1662 = [ 0 ]; 
                  _cwc_1663 = _sel_VxA_( _cwc_1662, _cwc_1603); 
                  _cwc_1665 = _eq_SxS_( _cwc_1663, _cwc_1664); 
                  _cwc_1666 = _and_SxS_( _cwc_1665, _cwc_1661); 
                  if (_cwc_1666) 
                  { 
                    _cwc_1660 = UTDScalarB:Array::to_bool( i) ; 
                    _cwc_1580 = _cwc_1660; 
                  }
                  else
                  { 
                    _cwc_1654 = true; 
                    _cwc_1657 = 6; 
                    _cwc_1655 = [ 0 ]; 
                    _cwc_1656 = _sel_VxA_( _cwc_1655, _cwc_1603); 
                    _cwc_1658 = _eq_SxS_( _cwc_1656, _cwc_1657); 
                    _cwc_1659 = _and_SxS_( _cwc_1658, _cwc_1654); 
                    if (_cwc_1659) 
                    { 
                      _cwc_1653 = UTDScalarB:Array::to_bool( i) ; 
                      _cwc_1580 = _cwc_1653; 
                    }
                    else
                    { 
                      _cwc_1647 = true; 
                      _cwc_1650 = 7; 
                      _cwc_1648 = [ 0 ]; 
                      _cwc_1649 = _sel_VxA_( _cwc_1648, _cwc_1603); 
                      _cwc_1651 = _eq_SxS_( _cwc_1649, _cwc_1650); 
                      _cwc_1652 = _and_SxS_( _cwc_1651, _cwc_1647); 
                      if (_cwc_1652) 
                      { 
                        _cwc_1646 = UTDScalarB:Array::to_bool( i) ; 
                        _cwc_1580 = _cwc_1646; 
                      }
                      else
                      { 
                        _cwc_1640 = true; 
                        _cwc_1643 = 9; 
                        _cwc_1641 = [ 0 ]; 
                        _cwc_1642 = _sel_VxA_( _cwc_1641, _cwc_1603); 
                        _cwc_1644 = _eq_SxS_( _cwc_1642, _cwc_1643); 
                        _cwc_1645 = _and_SxS_( _cwc_1644, _cwc_1640); 
                        if (_cwc_1645) 
                        { 
                          _cwc_1639 = UTDScalarB:Array::to_bool( i) ; 
                          _cwc_1580 = _cwc_1639; 
                        }
                        else
                        { 
                          _cwc_1633 = true; 
                          _cwc_1636 = 10; 
                          _cwc_1634 = [ 0 ]; 
                          _cwc_1635 = _sel_VxA_( _cwc_1634, _cwc_1603); 
                          _cwc_1637 = _eq_SxS_( _cwc_1635, _cwc_1636); 
                          _cwc_1638 = _and_SxS_( _cwc_1637, _cwc_1633); 
                          if (_cwc_1638) 
                          { 
                            _cwc_1632 = UTDScalarB:Array::to_bool( i) ; 
                            _cwc_1580 = _cwc_1632; 
                          }
                          else
                          { 
                            _cwc_1626 = true; 
                            _cwc_1629 = 11; 
                            _cwc_1627 = [ 0 ]; 
                            _cwc_1628 = _sel_VxA_( _cwc_1627, _cwc_1603); 
                            _cwc_1630 = _eq_SxS_( _cwc_1628, _cwc_1629); 
                            _cwc_1631 = _and_SxS_( _cwc_1630, _cwc_1626); 
                            if (_cwc_1631) 
                            { 
                              _cwc_1625 = UTDScalarB:Array::to_bool( i) ; 
                              _cwc_1580 = _cwc_1625; 
                            }
                            else
                            { 
                              _cwc_1619 = true; 
                              _cwc_1622 = 13; 
                              _cwc_1620 = [ 0 ]; 
                              _cwc_1621 = _sel_VxA_( _cwc_1620, _cwc_1603); 
                              _cwc_1623 = _eq_SxS_( _cwc_1621, _cwc_1622); 
                              _cwc_1624 = _and_SxS_( _cwc_1623, _cwc_1619); 
                              if (_cwc_1624) 
                              { 
                                _cwc_1618 = UTDScalarB:Array::to_bool( i) ; 
                                _cwc_1580 = _cwc_1618; 
                              }
                              else
                              { 
                                _cwc_1612 = true; 
                                _cwc_1615 = 14; 
                                _cwc_1613 = [ 0 ]; 
                                _cwc_1614 = _sel_VxA_( _cwc_1613, _cwc_1603); 
                                _cwc_1616 = _eq_SxS_( _cwc_1614, _cwc_1615); 
                                _cwc_1617 = _and_SxS_( _cwc_1616, _cwc_1612); 
                                if (_cwc_1617) 
                                { 
                                  _cwc_1611 = UTDScalarB:Array::to_bool( i) ; 
                                  _cwc_1580 = _cwc_1611; 
                                }
                                else
                                { 
                                  _cwc_1605 = true; 
                                  _cwc_1608 = 1; 
                                  _cwc_1606 = [ 0 ]; 
                                  _cwc_1607 = _sel_VxA_( _cwc_1606, _cwc_1603); 
                                  _cwc_1609 = _eq_SxS_( _cwc_1607, _cwc_1608); 
                                  _cwc_1610 = _and_SxS_( _cwc_1609, _cwc_1605); 
                                  if (_cwc_1610) 
                                  { 
                                    _cwc_1604 = UTDScalarB:Array::to_bool( i) ; 
                                    _cwc_1580 = _cwc_1604; 
                                  }
                                  else
                                  { 
                                    _cwc_1602 = UTDScalarB:Array::to_bool( i) ; 
                                    _cwc_1580 = _cwc_1602; 
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      { 
        _cwc_1600 = 2; 
        _cwc_1601 = _eq_SxS_( _cwc_1582, _cwc_1600); 
        if (_cwc_1601) 
        { 
          _cwc_1587 = _shape_A_( i); 
          _cwc_1589 = true; 
          _cwc_1592 = 4; 
          _cwc_1590 = [ 0 ]; 
          _cwc_1591 = _sel_VxA_( _cwc_1590, _cwc_1587); 
          _cwc_1593 = _eq_SxS_( _cwc_1591, _cwc_1592); 
          _cwc_1594 = _and_SxS_( _cwc_1593, _cwc_1589); 
          _cwc_1597 = 4; 
          _cwc_1595 = [ 1 ]; 
          _cwc_1596 = _sel_VxA_( _cwc_1595, _cwc_1587); 
          _cwc_1598 = _eq_SxS_( _cwc_1596, _cwc_1597); 
          _cwc_1599 = _and_SxS_( _cwc_1598, _cwc_1594); 
          if (_cwc_1599) 
          { 
            _cwc_1588 = UTDScalarB:Array::to_bool( i) ; 
            _cwc_1580 = _cwc_1588; 
          }
          else
          { 
            _cwc_1586 = UTDScalarB:Array::to_bool( i) ; 
            _cwc_1580 = _cwc_1586; 
          }
        }
        else
        { 
          _cwc_1584 = 3; 
          _cwc_1585 = _eq_SxS_( _cwc_1582, _cwc_1584); 
          if (_cwc_1585) 
          { 
            _cwc_1583 = UTDScalarB:Array::to_bool( i) ; 
            _cwc_1580 = _cwc_1583; 
          }
          else
          { 
            _cwc_1581 = UTDScalarB:Array::to_bool( i) ; 
            _cwc_1580 = _cwc_1581; 
          }
        }
      }
    }
    else
    { 
      _cwc_1705 = ArrayArith::to_bool( i) ; 
      _cwc_1580 = _cwc_1705; 
    }
  }
  return( _cwc_1580); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::to_bool(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:Array::to_bool( int[*] i { ,NN } )
/*
 *  to_bool :: { int[*] -> ( bool[*]),
                 int -> ( bool),
                 int[+] -> ( bool[+])}
 *  dispatching to: ArrayArith::to_bool,
 *                  Bool::to_bool
 */
{ 
  bool[*] _cwc_1712 { , NN } ; 
  bool _cwc_1720 { , NN } ; 
  int _cwc_1719 { , NN } ; 
  bool _cwc_1718 { , NN } ; 
  int _cwc_1717 { , NN } ; 
  bool _cwc_1716 { , NN } ; 
  int _cwc_1715 { , NN } ; 
  int _cwc_1714 { , NN } ; 
  bool[+] _cwc_1713 { , NN } ; 

  _cwc_1717 = _dim_A_( i); 
  _cwc_1719 = 0; 
  _cwc_1720 = _eq_SxS_( _cwc_1717, _cwc_1719); 
  if (_cwc_1720) 
  { 
    _cwc_1718 = Bool::to_bool( i) ; 
    _cwc_1712 = _cwc_1718; 
  }
  else
  { 
    _cwc_1714 = _dim_A_( i); 
    _cwc_1715 = 0; 
    _cwc_1716 = _gt_SxS_( _cwc_1714, _cwc_1715); 
    if (_cwc_1716) 
    { 
      _cwc_1713 = ArrayArith::to_bool( i) ; 
      _cwc_1712 = _cwc_1713; 
    }
    else
    { 
      _cwc_1712 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::to_bool :: int[*] -> bool[*] ", i); 
    }
  }
  return( _cwc_1712); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::comaBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[.] UTDScalarB::comaBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  comaBBB :: { bool[*] -> { bool[*] -> ( bool[.]),
                              bool -> ( bool[.]),
                              bool[+] -> ( bool[.]),
                              bool[.] -> ( bool[.]),
                              bool[4] -> ( bool[8]),
                              bool[8] -> ( bool[12]),
                              bool[12] -> ( bool[16]),
                              bool[14] -> ( bool[15])},
                 bool -> { bool[*] -> ( bool[2]),
                           bool -> ( bool[2])},
                 bool[+] -> { bool[*] -> ( bool[.]),
                              bool -> ( bool[.]),
                              bool[+] -> ( bool[.]),
                              bool[.] -> ( bool[.]),
                              bool[4] -> ( bool[8]),
                              bool[8] -> ( bool[12]),
                              bool[12] -> ( bool[16]),
                              bool[14] -> ( bool[15])},
                 bool[.] -> { bool[*] -> ( bool[.]),
                              bool -> ( bool[.]),
                              bool[+] -> ( bool[.]),
                              bool[.] -> ( bool[.]),
                              bool[4] -> ( bool[8]),
                              bool[8] -> ( bool[12]),
                              bool[12] -> ( bool[16]),
                              bool[14] -> ( bool[15])},
                 bool[2] -> { bool[*] -> ( bool[3]),
                              bool -> ( bool[3]),
                              bool[+] -> ( --),
                              bool[.] -> ( --)},
                 bool[3] -> { bool[*] -> ( bool[4]),
                              bool -> ( bool[4]),
                              bool[+] -> ( --),
                              bool[.] -> ( --)},
                 bool[4] -> { bool[*] -> ( bool[.]),
                              bool -> ( bool[5]),
                              bool[+] -> ( bool[.]),
                              bool[.] -> ( bool[.]),
                              bool[4] -> ( bool[8]),
                              bool[8] -> ( bool[12]),
                              bool[12] -> ( bool[16])},
                 bool[5] -> { bool[*] -> ( bool[6]),
                              bool -> ( bool[6]),
                              bool[+] -> ( --),
                              bool[.] -> ( --),
                              bool[4] -> ( --),
                              bool[8] -> ( --),
                              bool[12] -> ( --)},
                 bool[6] -> { bool[*] -> ( bool[7]),
                              bool -> ( bool[7]),
                              bool[+] -> ( --),
                              bool[.] -> ( --),
                              bool[4] -> ( --),
                              bool[8] -> ( --),
                              bool[12] -> ( --)},
                 bool[7] -> { bool[*] -> ( bool[8]),
                              bool -> ( bool[8]),
                              bool[+] -> ( --),
                              bool[.] -> ( --),
                              bool[4] -> ( --),
                              bool[8] -> ( --),
                              bool[12] -> ( --)},
                 bool[8] -> { bool[*] -> ( bool[9]),
                              bool -> ( bool[9]),
                              bool[+] -> ( --),
                              bool[.] -> ( --),
                              bool[4] -> ( --),
                              bool[8] -> ( --),
                              bool[12] -> ( --)},
                 bool[9] -> { bool[*] -> ( bool[10]),
                              bool -> ( bool[10]),
                              bool[+] -> ( --),
                              bool[.] -> ( --),
                              bool[4] -> ( --),
                              bool[8] -> ( --),
                              bool[12] -> ( --)},
                 bool[10] -> { bool[*] -> ( bool[11]),
                               bool -> ( bool[11]),
                               bool[+] -> ( --),
                               bool[.] -> ( --),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --)},
                 bool[11] -> { bool[*] -> ( bool[12]),
                               bool -> ( bool[12]),
                               bool[+] -> ( --),
                               bool[.] -> ( --),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --)},
                 bool[12] -> { bool[*] -> ( bool[13]),
                               bool -> ( bool[13]),
                               bool[+] -> ( --),
                               bool[.] -> ( --),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --)},
                 bool[13] -> { bool[*] -> ( bool[14]),
                               bool -> ( bool[14]),
                               bool[+] -> ( --),
                               bool[.] -> ( --),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --)},
                 bool[1] -> { bool[*] -> ( bool[15]),
                              bool -> ( --),
                              bool[+] -> ( bool[15]),
                              bool[.] -> ( bool[15]),
                              bool[4] -> ( --),
                              bool[8] -> ( --),
                              bool[12] -> ( --),
                              bool[14] -> ( bool[15])}}
 *  dispatching to: UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB
 */
{ 
  bool[.] _cwc_1721 { , NN } ; 
  bool _cwc_2200 { , NN } ; 
  int _cwc_2199 { , NN } ; 
  bool _cwc_2198 { , NN } ; 
  int _cwc_2197 { , NN } ; 
  bool[2] _cwc_2196 { , NN } ; 
  int _cwc_2195 { , NN } ; 
  int _cwc_2194 { , NN } ; 
  bool _cwc_2193 { , NN } ; 
  int _cwc_2192 { , NN } ; 
  bool _cwc_2191 { , NN } ; 
  bool _cwc_2190 { , NN } ; 
  int{2} _cwc_2189 { , NN } ; 
  int _cwc_2188 { , NN } ; 
  int[1]{0} _cwc_2187 { , NN } ; 
  bool _cwc_2186 { , NN } ; 
  bool _cwc_2185 { , NN } ; 
  int _cwc_2184 { , NN } ; 
  bool[3] _cwc_2183 { , NN } ; 
  int _cwc_2182 { , NN } ; 
  bool _cwc_2181 { , NN } ; 
  int _cwc_2180 { , NN } ; 
  bool[.] _cwc_2179 { , NN } ; 
  int _cwc_2178 { , NN } ; 
  bool _cwc_2177 { , NN } ; 
  bool _cwc_2176 { , NN } ; 
  int{3} _cwc_2175 { , NN } ; 
  int _cwc_2174 { , NN } ; 
  int[1]{0} _cwc_2173 { , NN } ; 
  bool _cwc_2172 { , NN } ; 
  bool _cwc_2171 { , NN } ; 
  int _cwc_2170 { , NN } ; 
  bool[4] _cwc_2169 { , NN } ; 
  int _cwc_2168 { , NN } ; 
  bool _cwc_2167 { , NN } ; 
  int _cwc_2166 { , NN } ; 
  bool[.] _cwc_2165 { , NN } ; 
  int _cwc_2164 { , NN } ; 
  bool _cwc_2163 { , NN } ; 
  bool _cwc_2162 { , NN } ; 
  int{4} _cwc_2161 { , NN } ; 
  int _cwc_2160 { , NN } ; 
  int[1]{0} _cwc_2159 { , NN } ; 
  bool _cwc_2158 { , NN } ; 
  bool _cwc_2157 { , NN } ; 
  int _cwc_2156 { , NN } ; 
  bool[5] _cwc_2155 { , NN } ; 
  int _cwc_2154 { , NN } ; 
  bool _cwc_2153 { , NN } ; 
  int _cwc_2152 { , NN } ; 
  bool _cwc_2151 { , NN } ; 
  bool _cwc_2150 { , NN } ; 
  int{4} _cwc_2149 { , NN } ; 
  int _cwc_2148 { , NN } ; 
  int[1]{0} _cwc_2147 { , NN } ; 
  bool _cwc_2146 { , NN } ; 
  bool[8] _cwc_2145 { , NN } ; 
  bool _cwc_2144 { , NN } ; 
  bool _cwc_2143 { , NN } ; 
  int{8} _cwc_2142 { , NN } ; 
  int _cwc_2141 { , NN } ; 
  int[1]{0} _cwc_2140 { , NN } ; 
  bool _cwc_2139 { , NN } ; 
  bool[12] _cwc_2138 { , NN } ; 
  bool _cwc_2137 { , NN } ; 
  bool _cwc_2136 { , NN } ; 
  int{12} _cwc_2135 { , NN } ; 
  int _cwc_2134 { , NN } ; 
  int[1]{0} _cwc_2133 { , NN } ; 
  bool _cwc_2132 { , NN } ; 
  bool[16] _cwc_2131 { , NN } ; 
  int[+] _cwc_2130 { , NN } ; 
  bool[.] _cwc_2129 { , NN } ; 
  int _cwc_2128 { , NN } ; 
  bool _cwc_2127 { , NN } ; 
  bool _cwc_2126 { , NN } ; 
  int{5} _cwc_2125 { , NN } ; 
  int _cwc_2124 { , NN } ; 
  int[1]{0} _cwc_2123 { , NN } ; 
  bool _cwc_2122 { , NN } ; 
  bool _cwc_2121 { , NN } ; 
  int _cwc_2120 { , NN } ; 
  bool[6] _cwc_2119 { , NN } ; 
  int _cwc_2118 { , NN } ; 
  bool _cwc_2117 { , NN } ; 
  int _cwc_2116 { , NN } ; 
  bool _cwc_2115 { , NN } ; 
  bool _cwc_2114 { , NN } ; 
  int{4} _cwc_2113 { , NN } ; 
  int _cwc_2112 { , NN } ; 
  int[1]{0} _cwc_2111 { , NN } ; 
  bool _cwc_2110 { , NN } ; 
  bool[.] _cwc_2109 { , NN } ; 
  bool _cwc_2108 { , NN } ; 
  bool _cwc_2107 { , NN } ; 
  int{8} _cwc_2106 { , NN } ; 
  int _cwc_2105 { , NN } ; 
  int[1]{0} _cwc_2104 { , NN } ; 
  bool _cwc_2103 { , NN } ; 
  bool[.] _cwc_2102 { , NN } ; 
  bool _cwc_2101 { , NN } ; 
  bool _cwc_2100 { , NN } ; 
  int{12} _cwc_2099 { , NN } ; 
  int _cwc_2098 { , NN } ; 
  int[1]{0} _cwc_2097 { , NN } ; 
  bool _cwc_2096 { , NN } ; 
  bool[.] _cwc_2095 { , NN } ; 
  int[+] _cwc_2094 { , NN } ; 
  bool[.] _cwc_2093 { , NN } ; 
  int _cwc_2092 { , NN } ; 
  bool _cwc_2091 { , NN } ; 
  bool _cwc_2090 { , NN } ; 
  int{6} _cwc_2089 { , NN } ; 
  int _cwc_2088 { , NN } ; 
  int[1]{0} _cwc_2087 { , NN } ; 
  bool _cwc_2086 { , NN } ; 
  bool _cwc_2085 { , NN } ; 
  int _cwc_2084 { , NN } ; 
  bool[7] _cwc_2083 { , NN } ; 
  int _cwc_2082 { , NN } ; 
  bool _cwc_2081 { , NN } ; 
  int _cwc_2080 { , NN } ; 
  bool _cwc_2079 { , NN } ; 
  bool _cwc_2078 { , NN } ; 
  int{4} _cwc_2077 { , NN } ; 
  int _cwc_2076 { , NN } ; 
  int[1]{0} _cwc_2075 { , NN } ; 
  bool _cwc_2074 { , NN } ; 
  bool[.] _cwc_2073 { , NN } ; 
  bool _cwc_2072 { , NN } ; 
  bool _cwc_2071 { , NN } ; 
  int{8} _cwc_2070 { , NN } ; 
  int _cwc_2069 { , NN } ; 
  int[1]{0} _cwc_2068 { , NN } ; 
  bool _cwc_2067 { , NN } ; 
  bool[.] _cwc_2066 { , NN } ; 
  bool _cwc_2065 { , NN } ; 
  bool _cwc_2064 { , NN } ; 
  int{12} _cwc_2063 { , NN } ; 
  int _cwc_2062 { , NN } ; 
  int[1]{0} _cwc_2061 { , NN } ; 
  bool _cwc_2060 { , NN } ; 
  bool[.] _cwc_2059 { , NN } ; 
  int[+] _cwc_2058 { , NN } ; 
  bool[.] _cwc_2057 { , NN } ; 
  int _cwc_2056 { , NN } ; 
  bool _cwc_2055 { , NN } ; 
  bool _cwc_2054 { , NN } ; 
  int{7} _cwc_2053 { , NN } ; 
  int _cwc_2052 { , NN } ; 
  int[1]{0} _cwc_2051 { , NN } ; 
  bool _cwc_2050 { , NN } ; 
  bool _cwc_2049 { , NN } ; 
  int _cwc_2048 { , NN } ; 
  bool[8] _cwc_2047 { , NN } ; 
  int _cwc_2046 { , NN } ; 
  bool _cwc_2045 { , NN } ; 
  int _cwc_2044 { , NN } ; 
  bool _cwc_2043 { , NN } ; 
  bool _cwc_2042 { , NN } ; 
  int{4} _cwc_2041 { , NN } ; 
  int _cwc_2040 { , NN } ; 
  int[1]{0} _cwc_2039 { , NN } ; 
  bool _cwc_2038 { , NN } ; 
  bool[.] _cwc_2037 { , NN } ; 
  bool _cwc_2036 { , NN } ; 
  bool _cwc_2035 { , NN } ; 
  int{8} _cwc_2034 { , NN } ; 
  int _cwc_2033 { , NN } ; 
  int[1]{0} _cwc_2032 { , NN } ; 
  bool _cwc_2031 { , NN } ; 
  bool[.] _cwc_2030 { , NN } ; 
  bool _cwc_2029 { , NN } ; 
  bool _cwc_2028 { , NN } ; 
  int{12} _cwc_2027 { , NN } ; 
  int _cwc_2026 { , NN } ; 
  int[1]{0} _cwc_2025 { , NN } ; 
  bool _cwc_2024 { , NN } ; 
  bool[.] _cwc_2023 { , NN } ; 
  int[+] _cwc_2022 { , NN } ; 
  bool[.] _cwc_2021 { , NN } ; 
  int _cwc_2020 { , NN } ; 
  bool _cwc_2019 { , NN } ; 
  bool _cwc_2018 { , NN } ; 
  int{8} _cwc_2017 { , NN } ; 
  int _cwc_2016 { , NN } ; 
  int[1]{0} _cwc_2015 { , NN } ; 
  bool _cwc_2014 { , NN } ; 
  bool _cwc_2013 { , NN } ; 
  int _cwc_2012 { , NN } ; 
  bool[9] _cwc_2011 { , NN } ; 
  int _cwc_2010 { , NN } ; 
  bool _cwc_2009 { , NN } ; 
  int _cwc_2008 { , NN } ; 
  bool _cwc_2007 { , NN } ; 
  bool _cwc_2006 { , NN } ; 
  int{4} _cwc_2005 { , NN } ; 
  int _cwc_2004 { , NN } ; 
  int[1]{0} _cwc_2003 { , NN } ; 
  bool _cwc_2002 { , NN } ; 
  bool[.] _cwc_2001 { , NN } ; 
  bool _cwc_2000 { , NN } ; 
  bool _cwc_1999 { , NN } ; 
  int{8} _cwc_1998 { , NN } ; 
  int _cwc_1997 { , NN } ; 
  int[1]{0} _cwc_1996 { , NN } ; 
  bool _cwc_1995 { , NN } ; 
  bool[.] _cwc_1994 { , NN } ; 
  bool _cwc_1993 { , NN } ; 
  bool _cwc_1992 { , NN } ; 
  int{12} _cwc_1991 { , NN } ; 
  int _cwc_1990 { , NN } ; 
  int[1]{0} _cwc_1989 { , NN } ; 
  bool _cwc_1988 { , NN } ; 
  bool[.] _cwc_1987 { , NN } ; 
  int[+] _cwc_1986 { , NN } ; 
  bool[.] _cwc_1985 { , NN } ; 
  int _cwc_1984 { , NN } ; 
  bool _cwc_1983 { , NN } ; 
  bool _cwc_1982 { , NN } ; 
  int{9} _cwc_1981 { , NN } ; 
  int _cwc_1980 { , NN } ; 
  int[1]{0} _cwc_1979 { , NN } ; 
  bool _cwc_1978 { , NN } ; 
  bool _cwc_1977 { , NN } ; 
  int _cwc_1976 { , NN } ; 
  bool[10] _cwc_1975 { , NN } ; 
  int _cwc_1974 { , NN } ; 
  bool _cwc_1973 { , NN } ; 
  int _cwc_1972 { , NN } ; 
  bool _cwc_1971 { , NN } ; 
  bool _cwc_1970 { , NN } ; 
  int{4} _cwc_1969 { , NN } ; 
  int _cwc_1968 { , NN } ; 
  int[1]{0} _cwc_1967 { , NN } ; 
  bool _cwc_1966 { , NN } ; 
  bool[.] _cwc_1965 { , NN } ; 
  bool _cwc_1964 { , NN } ; 
  bool _cwc_1963 { , NN } ; 
  int{8} _cwc_1962 { , NN } ; 
  int _cwc_1961 { , NN } ; 
  int[1]{0} _cwc_1960 { , NN } ; 
  bool _cwc_1959 { , NN } ; 
  bool[.] _cwc_1958 { , NN } ; 
  bool _cwc_1957 { , NN } ; 
  bool _cwc_1956 { , NN } ; 
  int{12} _cwc_1955 { , NN } ; 
  int _cwc_1954 { , NN } ; 
  int[1]{0} _cwc_1953 { , NN } ; 
  bool _cwc_1952 { , NN } ; 
  bool[.] _cwc_1951 { , NN } ; 
  int[+] _cwc_1950 { , NN } ; 
  bool[.] _cwc_1949 { , NN } ; 
  int _cwc_1948 { , NN } ; 
  bool _cwc_1947 { , NN } ; 
  bool _cwc_1946 { , NN } ; 
  int{10} _cwc_1945 { , NN } ; 
  int _cwc_1944 { , NN } ; 
  int[1]{0} _cwc_1943 { , NN } ; 
  bool _cwc_1942 { , NN } ; 
  bool _cwc_1941 { , NN } ; 
  int _cwc_1940 { , NN } ; 
  bool[11] _cwc_1939 { , NN } ; 
  int _cwc_1938 { , NN } ; 
  bool _cwc_1937 { , NN } ; 
  int _cwc_1936 { , NN } ; 
  bool _cwc_1935 { , NN } ; 
  bool _cwc_1934 { , NN } ; 
  int{4} _cwc_1933 { , NN } ; 
  int _cwc_1932 { , NN } ; 
  int[1]{0} _cwc_1931 { , NN } ; 
  bool _cwc_1930 { , NN } ; 
  bool[.] _cwc_1929 { , NN } ; 
  bool _cwc_1928 { , NN } ; 
  bool _cwc_1927 { , NN } ; 
  int{8} _cwc_1926 { , NN } ; 
  int _cwc_1925 { , NN } ; 
  int[1]{0} _cwc_1924 { , NN } ; 
  bool _cwc_1923 { , NN } ; 
  bool[.] _cwc_1922 { , NN } ; 
  bool _cwc_1921 { , NN } ; 
  bool _cwc_1920 { , NN } ; 
  int{12} _cwc_1919 { , NN } ; 
  int _cwc_1918 { , NN } ; 
  int[1]{0} _cwc_1917 { , NN } ; 
  bool _cwc_1916 { , NN } ; 
  bool[.] _cwc_1915 { , NN } ; 
  int[+] _cwc_1914 { , NN } ; 
  bool[.] _cwc_1913 { , NN } ; 
  int _cwc_1912 { , NN } ; 
  bool _cwc_1911 { , NN } ; 
  bool _cwc_1910 { , NN } ; 
  int{11} _cwc_1909 { , NN } ; 
  int _cwc_1908 { , NN } ; 
  int[1]{0} _cwc_1907 { , NN } ; 
  bool _cwc_1906 { , NN } ; 
  bool _cwc_1905 { , NN } ; 
  int _cwc_1904 { , NN } ; 
  bool[12] _cwc_1903 { , NN } ; 
  int _cwc_1902 { , NN } ; 
  bool _cwc_1901 { , NN } ; 
  int _cwc_1900 { , NN } ; 
  bool _cwc_1899 { , NN } ; 
  bool _cwc_1898 { , NN } ; 
  int{4} _cwc_1897 { , NN } ; 
  int _cwc_1896 { , NN } ; 
  int[1]{0} _cwc_1895 { , NN } ; 
  bool _cwc_1894 { , NN } ; 
  bool[.] _cwc_1893 { , NN } ; 
  bool _cwc_1892 { , NN } ; 
  bool _cwc_1891 { , NN } ; 
  int{8} _cwc_1890 { , NN } ; 
  int _cwc_1889 { , NN } ; 
  int[1]{0} _cwc_1888 { , NN } ; 
  bool _cwc_1887 { , NN } ; 
  bool[.] _cwc_1886 { , NN } ; 
  bool _cwc_1885 { , NN } ; 
  bool _cwc_1884 { , NN } ; 
  int{12} _cwc_1883 { , NN } ; 
  int _cwc_1882 { , NN } ; 
  int[1]{0} _cwc_1881 { , NN } ; 
  bool _cwc_1880 { , NN } ; 
  bool[.] _cwc_1879 { , NN } ; 
  int[+] _cwc_1878 { , NN } ; 
  bool[.] _cwc_1877 { , NN } ; 
  int _cwc_1876 { , NN } ; 
  bool _cwc_1875 { , NN } ; 
  bool _cwc_1874 { , NN } ; 
  int{12} _cwc_1873 { , NN } ; 
  int _cwc_1872 { , NN } ; 
  int[1]{0} _cwc_1871 { , NN } ; 
  bool _cwc_1870 { , NN } ; 
  bool _cwc_1869 { , NN } ; 
  int _cwc_1868 { , NN } ; 
  bool[13] _cwc_1867 { , NN } ; 
  int _cwc_1866 { , NN } ; 
  bool _cwc_1865 { , NN } ; 
  int _cwc_1864 { , NN } ; 
  bool _cwc_1863 { , NN } ; 
  bool _cwc_1862 { , NN } ; 
  int{4} _cwc_1861 { , NN } ; 
  int _cwc_1860 { , NN } ; 
  int[1]{0} _cwc_1859 { , NN } ; 
  bool _cwc_1858 { , NN } ; 
  bool[.] _cwc_1857 { , NN } ; 
  bool _cwc_1856 { , NN } ; 
  bool _cwc_1855 { , NN } ; 
  int{8} _cwc_1854 { , NN } ; 
  int _cwc_1853 { , NN } ; 
  int[1]{0} _cwc_1852 { , NN } ; 
  bool _cwc_1851 { , NN } ; 
  bool[.] _cwc_1850 { , NN } ; 
  bool _cwc_1849 { , NN } ; 
  bool _cwc_1848 { , NN } ; 
  int{12} _cwc_1847 { , NN } ; 
  int _cwc_1846 { , NN } ; 
  int[1]{0} _cwc_1845 { , NN } ; 
  bool _cwc_1844 { , NN } ; 
  bool[.] _cwc_1843 { , NN } ; 
  int[+] _cwc_1842 { , NN } ; 
  bool[.] _cwc_1841 { , NN } ; 
  int _cwc_1840 { , NN } ; 
  bool _cwc_1839 { , NN } ; 
  bool _cwc_1838 { , NN } ; 
  int{13} _cwc_1837 { , NN } ; 
  int _cwc_1836 { , NN } ; 
  int[1]{0} _cwc_1835 { , NN } ; 
  bool _cwc_1834 { , NN } ; 
  bool _cwc_1833 { , NN } ; 
  int _cwc_1832 { , NN } ; 
  bool[14] _cwc_1831 { , NN } ; 
  int _cwc_1830 { , NN } ; 
  bool _cwc_1829 { , NN } ; 
  int _cwc_1828 { , NN } ; 
  bool _cwc_1827 { , NN } ; 
  bool _cwc_1826 { , NN } ; 
  int{4} _cwc_1825 { , NN } ; 
  int _cwc_1824 { , NN } ; 
  int[1]{0} _cwc_1823 { , NN } ; 
  bool _cwc_1822 { , NN } ; 
  bool[.] _cwc_1821 { , NN } ; 
  bool _cwc_1820 { , NN } ; 
  bool _cwc_1819 { , NN } ; 
  int{8} _cwc_1818 { , NN } ; 
  int _cwc_1817 { , NN } ; 
  int[1]{0} _cwc_1816 { , NN } ; 
  bool _cwc_1815 { , NN } ; 
  bool[.] _cwc_1814 { , NN } ; 
  bool _cwc_1813 { , NN } ; 
  bool _cwc_1812 { , NN } ; 
  int{12} _cwc_1811 { , NN } ; 
  int _cwc_1810 { , NN } ; 
  int[1]{0} _cwc_1809 { , NN } ; 
  bool _cwc_1808 { , NN } ; 
  bool[.] _cwc_1807 { , NN } ; 
  int[+] _cwc_1806 { , NN } ; 
  bool[.] _cwc_1805 { , NN } ; 
  int _cwc_1804 { , NN } ; 
  bool _cwc_1803 { , NN } ; 
  bool _cwc_1802 { , NN } ; 
  int{1} _cwc_1801 { , NN } ; 
  int _cwc_1800 { , NN } ; 
  int[1]{0} _cwc_1799 { , NN } ; 
  bool _cwc_1798 { , NN } ; 
  bool _cwc_1797 { , NN } ; 
  int _cwc_1796 { , NN } ; 
  bool[.] _cwc_1795 { , NN } ; 
  int _cwc_1794 { , NN } ; 
  bool _cwc_1793 { , NN } ; 
  int _cwc_1792 { , NN } ; 
  bool _cwc_1791 { , NN } ; 
  bool _cwc_1790 { , NN } ; 
  int{4} _cwc_1789 { , NN } ; 
  int _cwc_1788 { , NN } ; 
  int[1]{0} _cwc_1787 { , NN } ; 
  bool _cwc_1786 { , NN } ; 
  bool[.] _cwc_1785 { , NN } ; 
  bool _cwc_1784 { , NN } ; 
  bool _cwc_1783 { , NN } ; 
  int{8} _cwc_1782 { , NN } ; 
  int _cwc_1781 { , NN } ; 
  int[1]{0} _cwc_1780 { , NN } ; 
  bool _cwc_1779 { , NN } ; 
  bool[.] _cwc_1778 { , NN } ; 
  bool _cwc_1777 { , NN } ; 
  bool _cwc_1776 { , NN } ; 
  int{12} _cwc_1775 { , NN } ; 
  int _cwc_1774 { , NN } ; 
  int[1]{0} _cwc_1773 { , NN } ; 
  bool _cwc_1772 { , NN } ; 
  bool[.] _cwc_1771 { , NN } ; 
  bool _cwc_1770 { , NN } ; 
  bool _cwc_1769 { , NN } ; 
  int{14} _cwc_1768 { , NN } ; 
  int _cwc_1767 { , NN } ; 
  int[1]{0} _cwc_1766 { , NN } ; 
  bool _cwc_1765 { , NN } ; 
  bool[15] _cwc_1764 { , NN } ; 
  int[+] _cwc_1763 { , NN } ; 
  bool[.] _cwc_1762 { , NN } ; 
  int _cwc_1761 { , NN } ; 
  int[+] _cwc_1760 { , NN } ; 
  bool _cwc_1759 { , NN } ; 
  int _cwc_1758 { , NN } ; 
  bool[.] _cwc_1757 { , NN } ; 
  int _cwc_1756 { , NN } ; 
  bool _cwc_1755 { , NN } ; 
  int _cwc_1754 { , NN } ; 
  bool _cwc_1753 { , NN } ; 
  bool _cwc_1752 { , NN } ; 
  int{4} _cwc_1751 { , NN } ; 
  int _cwc_1750 { , NN } ; 
  int[1]{0} _cwc_1749 { , NN } ; 
  bool _cwc_1748 { , NN } ; 
  bool[.] _cwc_1747 { , NN } ; 
  bool _cwc_1746 { , NN } ; 
  bool _cwc_1745 { , NN } ; 
  int{8} _cwc_1744 { , NN } ; 
  int _cwc_1743 { , NN } ; 
  int[1]{0} _cwc_1742 { , NN } ; 
  bool _cwc_1741 { , NN } ; 
  bool[.] _cwc_1740 { , NN } ; 
  bool _cwc_1739 { , NN } ; 
  bool _cwc_1738 { , NN } ; 
  int{12} _cwc_1737 { , NN } ; 
  int _cwc_1736 { , NN } ; 
  int[1]{0} _cwc_1735 { , NN } ; 
  bool _cwc_1734 { , NN } ; 
  bool[.] _cwc_1733 { , NN } ; 
  bool _cwc_1732 { , NN } ; 
  bool _cwc_1731 { , NN } ; 
  int{14} _cwc_1730 { , NN } ; 
  int _cwc_1729 { , NN } ; 
  int[1]{0} _cwc_1728 { , NN } ; 
  bool _cwc_1727 { , NN } ; 
  bool[.] _cwc_1726 { , NN } ; 
  int[+] _cwc_1725 { , NN } ; 
  bool[.] _cwc_1724 { , NN } ; 
  int _cwc_1723 { , NN } ; 
  int _cwc_1722 { , NN } ; 

  _cwc_2194 = _dim_A_( x); 
  _cwc_2199 = 0; 
  _cwc_2200 = _eq_SxS_( _cwc_2194, _cwc_2199); 
  if (_cwc_2200) 
  { 
    _cwc_2195 = _dim_A_( y); 
    _cwc_2197 = 0; 
    _cwc_2198 = _eq_SxS_( _cwc_2195, _cwc_2197); 
    if (_cwc_2198) 
    { 
      _cwc_2196 = UTDScalarB::comaBBB( x, y) ; 
      _cwc_1721 = _cwc_2196; 
    }
    else
    { 
      _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
    }
  }
  else
  { 
    _cwc_1722 = _dim_A_( x); 
    _cwc_2192 = 1; 
    _cwc_2193 = _eq_SxS_( _cwc_1722, _cwc_2192); 
    if (_cwc_2193) 
    { 
      _cwc_1760 = _shape_A_( x); 
      _cwc_2186 = true; 
      _cwc_2189 = 2; 
      _cwc_2187 = [ 0 ]; 
      _cwc_2188 = _sel_VxA_( _cwc_2187, _cwc_1760); 
      _cwc_2190 = _eq_SxS_( _cwc_2188, _cwc_2189); 
      _cwc_2191 = _and_SxS_( _cwc_2190, _cwc_2186); 
      if (_cwc_2191) 
      { 
        _cwc_2182 = _dim_A_( y); 
        _cwc_2184 = 0; 
        _cwc_2185 = _eq_SxS_( _cwc_2182, _cwc_2184); 
        if (_cwc_2185) 
        { 
          _cwc_2183 = UTDScalarB::comaBBB( x, y) ; 
          _cwc_1721 = _cwc_2183; 
        }
        else
        { 
          _cwc_2178 = _dim_A_( y); 
          _cwc_2180 = 1; 
          _cwc_2181 = _eq_SxS_( _cwc_2178, _cwc_2180); 
          if (_cwc_2181) 
          { 
            _cwc_2179 = UTDScalarB::comaBBB( x, y) ; 
            _cwc_1721 = _cwc_2179; 
          }
          else
          { 
            _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_2172 = true; 
        _cwc_2175 = 3; 
        _cwc_2173 = [ 0 ]; 
        _cwc_2174 = _sel_VxA_( _cwc_2173, _cwc_1760); 
        _cwc_2176 = _eq_SxS_( _cwc_2174, _cwc_2175); 
        _cwc_2177 = _and_SxS_( _cwc_2176, _cwc_2172); 
        if (_cwc_2177) 
        { 
          _cwc_2168 = _dim_A_( y); 
          _cwc_2170 = 0; 
          _cwc_2171 = _eq_SxS_( _cwc_2168, _cwc_2170); 
          if (_cwc_2171) 
          { 
            _cwc_2169 = UTDScalarB::comaBBB( x, y) ; 
            _cwc_1721 = _cwc_2169; 
          }
          else
          { 
            _cwc_2164 = _dim_A_( y); 
            _cwc_2166 = 1; 
            _cwc_2167 = _eq_SxS_( _cwc_2164, _cwc_2166); 
            if (_cwc_2167) 
            { 
              _cwc_2165 = UTDScalarB::comaBBB( x, y) ; 
              _cwc_1721 = _cwc_2165; 
            }
            else
            { 
              _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
            }
          }
        }
        else
        { 
          _cwc_2158 = true; 
          _cwc_2161 = 4; 
          _cwc_2159 = [ 0 ]; 
          _cwc_2160 = _sel_VxA_( _cwc_2159, _cwc_1760); 
          _cwc_2162 = _eq_SxS_( _cwc_2160, _cwc_2161); 
          _cwc_2163 = _and_SxS_( _cwc_2162, _cwc_2158); 
          if (_cwc_2163) 
          { 
            _cwc_2154 = _dim_A_( y); 
            _cwc_2156 = 0; 
            _cwc_2157 = _eq_SxS_( _cwc_2154, _cwc_2156); 
            if (_cwc_2157) 
            { 
              _cwc_2155 = UTDScalarB::comaBBB( x, y) ; 
              _cwc_1721 = _cwc_2155; 
            }
            else
            { 
              _cwc_2128 = _dim_A_( y); 
              _cwc_2152 = 1; 
              _cwc_2153 = _eq_SxS_( _cwc_2128, _cwc_2152); 
              if (_cwc_2153) 
              { 
                _cwc_2130 = _shape_A_( y); 
                _cwc_2146 = true; 
                _cwc_2149 = 4; 
                _cwc_2147 = [ 0 ]; 
                _cwc_2148 = _sel_VxA_( _cwc_2147, _cwc_2130); 
                _cwc_2150 = _eq_SxS_( _cwc_2148, _cwc_2149); 
                _cwc_2151 = _and_SxS_( _cwc_2150, _cwc_2146); 
                if (_cwc_2151) 
                { 
                  _cwc_2145 = UTDScalarB::comaBBB( x, y) ; 
                  _cwc_1721 = _cwc_2145; 
                }
                else
                { 
                  _cwc_2139 = true; 
                  _cwc_2142 = 8; 
                  _cwc_2140 = [ 0 ]; 
                  _cwc_2141 = _sel_VxA_( _cwc_2140, _cwc_2130); 
                  _cwc_2143 = _eq_SxS_( _cwc_2141, _cwc_2142); 
                  _cwc_2144 = _and_SxS_( _cwc_2143, _cwc_2139); 
                  if (_cwc_2144) 
                  { 
                    _cwc_2138 = UTDScalarB::comaBBB( x, y) ; 
                    _cwc_1721 = _cwc_2138; 
                  }
                  else
                  { 
                    _cwc_2132 = true; 
                    _cwc_2135 = 12; 
                    _cwc_2133 = [ 0 ]; 
                    _cwc_2134 = _sel_VxA_( _cwc_2133, _cwc_2130); 
                    _cwc_2136 = _eq_SxS_( _cwc_2134, _cwc_2135); 
                    _cwc_2137 = _and_SxS_( _cwc_2136, _cwc_2132); 
                    if (_cwc_2137) 
                    { 
                      _cwc_2131 = UTDScalarB::comaBBB( x, y) ; 
                      _cwc_1721 = _cwc_2131; 
                    }
                    else
                    { 
                      _cwc_2129 = UTDScalarB::comaBBB( x, y) ; 
                      _cwc_1721 = _cwc_2129; 
                    }
                  }
                }
              }
              else
              { 
                _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
              }
            }
          }
          else
          { 
            _cwc_2122 = true; 
            _cwc_2125 = 5; 
            _cwc_2123 = [ 0 ]; 
            _cwc_2124 = _sel_VxA_( _cwc_2123, _cwc_1760); 
            _cwc_2126 = _eq_SxS_( _cwc_2124, _cwc_2125); 
            _cwc_2127 = _and_SxS_( _cwc_2126, _cwc_2122); 
            if (_cwc_2127) 
            { 
              _cwc_2118 = _dim_A_( y); 
              _cwc_2120 = 0; 
              _cwc_2121 = _eq_SxS_( _cwc_2118, _cwc_2120); 
              if (_cwc_2121) 
              { 
                _cwc_2119 = UTDScalarB::comaBBB( x, y) ; 
                _cwc_1721 = _cwc_2119; 
              }
              else
              { 
                _cwc_2092 = _dim_A_( y); 
                _cwc_2116 = 1; 
                _cwc_2117 = _eq_SxS_( _cwc_2092, _cwc_2116); 
                if (_cwc_2117) 
                { 
                  _cwc_2094 = _shape_A_( y); 
                  _cwc_2110 = true; 
                  _cwc_2113 = 4; 
                  _cwc_2111 = [ 0 ]; 
                  _cwc_2112 = _sel_VxA_( _cwc_2111, _cwc_2094); 
                  _cwc_2114 = _eq_SxS_( _cwc_2112, _cwc_2113); 
                  _cwc_2115 = _and_SxS_( _cwc_2114, _cwc_2110); 
                  if (_cwc_2115) 
                  { 
                    _cwc_2109 = UTDScalarB::comaBBB( x, y) ; 
                    _cwc_1721 = _cwc_2109; 
                  }
                  else
                  { 
                    _cwc_2103 = true; 
                    _cwc_2106 = 8; 
                    _cwc_2104 = [ 0 ]; 
                    _cwc_2105 = _sel_VxA_( _cwc_2104, _cwc_2094); 
                    _cwc_2107 = _eq_SxS_( _cwc_2105, _cwc_2106); 
                    _cwc_2108 = _and_SxS_( _cwc_2107, _cwc_2103); 
                    if (_cwc_2108) 
                    { 
                      _cwc_2102 = UTDScalarB::comaBBB( x, y) ; 
                      _cwc_1721 = _cwc_2102; 
                    }
                    else
                    { 
                      _cwc_2096 = true; 
                      _cwc_2099 = 12; 
                      _cwc_2097 = [ 0 ]; 
                      _cwc_2098 = _sel_VxA_( _cwc_2097, _cwc_2094); 
                      _cwc_2100 = _eq_SxS_( _cwc_2098, _cwc_2099); 
                      _cwc_2101 = _and_SxS_( _cwc_2100, _cwc_2096); 
                      if (_cwc_2101) 
                      { 
                        _cwc_2095 = UTDScalarB::comaBBB( x, y) ; 
                        _cwc_1721 = _cwc_2095; 
                      }
                      else
                      { 
                        _cwc_2093 = UTDScalarB::comaBBB( x, y) ; 
                        _cwc_1721 = _cwc_2093; 
                      }
                    }
                  }
                }
                else
                { 
                  _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                }
              }
            }
            else
            { 
              _cwc_2086 = true; 
              _cwc_2089 = 6; 
              _cwc_2087 = [ 0 ]; 
              _cwc_2088 = _sel_VxA_( _cwc_2087, _cwc_1760); 
              _cwc_2090 = _eq_SxS_( _cwc_2088, _cwc_2089); 
              _cwc_2091 = _and_SxS_( _cwc_2090, _cwc_2086); 
              if (_cwc_2091) 
              { 
                _cwc_2082 = _dim_A_( y); 
                _cwc_2084 = 0; 
                _cwc_2085 = _eq_SxS_( _cwc_2082, _cwc_2084); 
                if (_cwc_2085) 
                { 
                  _cwc_2083 = UTDScalarB::comaBBB( x, y) ; 
                  _cwc_1721 = _cwc_2083; 
                }
                else
                { 
                  _cwc_2056 = _dim_A_( y); 
                  _cwc_2080 = 1; 
                  _cwc_2081 = _eq_SxS_( _cwc_2056, _cwc_2080); 
                  if (_cwc_2081) 
                  { 
                    _cwc_2058 = _shape_A_( y); 
                    _cwc_2074 = true; 
                    _cwc_2077 = 4; 
                    _cwc_2075 = [ 0 ]; 
                    _cwc_2076 = _sel_VxA_( _cwc_2075, _cwc_2058); 
                    _cwc_2078 = _eq_SxS_( _cwc_2076, _cwc_2077); 
                    _cwc_2079 = _and_SxS_( _cwc_2078, _cwc_2074); 
                    if (_cwc_2079) 
                    { 
                      _cwc_2073 = UTDScalarB::comaBBB( x, y) ; 
                      _cwc_1721 = _cwc_2073; 
                    }
                    else
                    { 
                      _cwc_2067 = true; 
                      _cwc_2070 = 8; 
                      _cwc_2068 = [ 0 ]; 
                      _cwc_2069 = _sel_VxA_( _cwc_2068, _cwc_2058); 
                      _cwc_2071 = _eq_SxS_( _cwc_2069, _cwc_2070); 
                      _cwc_2072 = _and_SxS_( _cwc_2071, _cwc_2067); 
                      if (_cwc_2072) 
                      { 
                        _cwc_2066 = UTDScalarB::comaBBB( x, y) ; 
                        _cwc_1721 = _cwc_2066; 
                      }
                      else
                      { 
                        _cwc_2060 = true; 
                        _cwc_2063 = 12; 
                        _cwc_2061 = [ 0 ]; 
                        _cwc_2062 = _sel_VxA_( _cwc_2061, _cwc_2058); 
                        _cwc_2064 = _eq_SxS_( _cwc_2062, _cwc_2063); 
                        _cwc_2065 = _and_SxS_( _cwc_2064, _cwc_2060); 
                        if (_cwc_2065) 
                        { 
                          _cwc_2059 = UTDScalarB::comaBBB( x, y) ; 
                          _cwc_1721 = _cwc_2059; 
                        }
                        else
                        { 
                          _cwc_2057 = UTDScalarB::comaBBB( x, y) ; 
                          _cwc_1721 = _cwc_2057; 
                        }
                      }
                    }
                  }
                  else
                  { 
                    _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                  }
                }
              }
              else
              { 
                _cwc_2050 = true; 
                _cwc_2053 = 7; 
                _cwc_2051 = [ 0 ]; 
                _cwc_2052 = _sel_VxA_( _cwc_2051, _cwc_1760); 
                _cwc_2054 = _eq_SxS_( _cwc_2052, _cwc_2053); 
                _cwc_2055 = _and_SxS_( _cwc_2054, _cwc_2050); 
                if (_cwc_2055) 
                { 
                  _cwc_2046 = _dim_A_( y); 
                  _cwc_2048 = 0; 
                  _cwc_2049 = _eq_SxS_( _cwc_2046, _cwc_2048); 
                  if (_cwc_2049) 
                  { 
                    _cwc_2047 = UTDScalarB::comaBBB( x, y) ; 
                    _cwc_1721 = _cwc_2047; 
                  }
                  else
                  { 
                    _cwc_2020 = _dim_A_( y); 
                    _cwc_2044 = 1; 
                    _cwc_2045 = _eq_SxS_( _cwc_2020, _cwc_2044); 
                    if (_cwc_2045) 
                    { 
                      _cwc_2022 = _shape_A_( y); 
                      _cwc_2038 = true; 
                      _cwc_2041 = 4; 
                      _cwc_2039 = [ 0 ]; 
                      _cwc_2040 = _sel_VxA_( _cwc_2039, _cwc_2022); 
                      _cwc_2042 = _eq_SxS_( _cwc_2040, _cwc_2041); 
                      _cwc_2043 = _and_SxS_( _cwc_2042, _cwc_2038); 
                      if (_cwc_2043) 
                      { 
                        _cwc_2037 = UTDScalarB::comaBBB( x, y) ; 
                        _cwc_1721 = _cwc_2037; 
                      }
                      else
                      { 
                        _cwc_2031 = true; 
                        _cwc_2034 = 8; 
                        _cwc_2032 = [ 0 ]; 
                        _cwc_2033 = _sel_VxA_( _cwc_2032, _cwc_2022); 
                        _cwc_2035 = _eq_SxS_( _cwc_2033, _cwc_2034); 
                        _cwc_2036 = _and_SxS_( _cwc_2035, _cwc_2031); 
                        if (_cwc_2036) 
                        { 
                          _cwc_2030 = UTDScalarB::comaBBB( x, y) ; 
                          _cwc_1721 = _cwc_2030; 
                        }
                        else
                        { 
                          _cwc_2024 = true; 
                          _cwc_2027 = 12; 
                          _cwc_2025 = [ 0 ]; 
                          _cwc_2026 = _sel_VxA_( _cwc_2025, _cwc_2022); 
                          _cwc_2028 = _eq_SxS_( _cwc_2026, _cwc_2027); 
                          _cwc_2029 = _and_SxS_( _cwc_2028, _cwc_2024); 
                          if (_cwc_2029) 
                          { 
                            _cwc_2023 = UTDScalarB::comaBBB( x, y) ; 
                            _cwc_1721 = _cwc_2023; 
                          }
                          else
                          { 
                            _cwc_2021 = UTDScalarB::comaBBB( x, y) ; 
                            _cwc_1721 = _cwc_2021; 
                          }
                        }
                      }
                    }
                    else
                    { 
                      _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                    }
                  }
                }
                else
                { 
                  _cwc_2014 = true; 
                  _cwc_2017 = 8; 
                  _cwc_2015 = [ 0 ]; 
                  _cwc_2016 = _sel_VxA_( _cwc_2015, _cwc_1760); 
                  _cwc_2018 = _eq_SxS_( _cwc_2016, _cwc_2017); 
                  _cwc_2019 = _and_SxS_( _cwc_2018, _cwc_2014); 
                  if (_cwc_2019) 
                  { 
                    _cwc_2010 = _dim_A_( y); 
                    _cwc_2012 = 0; 
                    _cwc_2013 = _eq_SxS_( _cwc_2010, _cwc_2012); 
                    if (_cwc_2013) 
                    { 
                      _cwc_2011 = UTDScalarB::comaBBB( x, y) ; 
                      _cwc_1721 = _cwc_2011; 
                    }
                    else
                    { 
                      _cwc_1984 = _dim_A_( y); 
                      _cwc_2008 = 1; 
                      _cwc_2009 = _eq_SxS_( _cwc_1984, _cwc_2008); 
                      if (_cwc_2009) 
                      { 
                        _cwc_1986 = _shape_A_( y); 
                        _cwc_2002 = true; 
                        _cwc_2005 = 4; 
                        _cwc_2003 = [ 0 ]; 
                        _cwc_2004 = _sel_VxA_( _cwc_2003, _cwc_1986); 
                        _cwc_2006 = _eq_SxS_( _cwc_2004, _cwc_2005); 
                        _cwc_2007 = _and_SxS_( _cwc_2006, _cwc_2002); 
                        if (_cwc_2007) 
                        { 
                          _cwc_2001 = UTDScalarB::comaBBB( x, y) ; 
                          _cwc_1721 = _cwc_2001; 
                        }
                        else
                        { 
                          _cwc_1995 = true; 
                          _cwc_1998 = 8; 
                          _cwc_1996 = [ 0 ]; 
                          _cwc_1997 = _sel_VxA_( _cwc_1996, _cwc_1986); 
                          _cwc_1999 = _eq_SxS_( _cwc_1997, _cwc_1998); 
                          _cwc_2000 = _and_SxS_( _cwc_1999, _cwc_1995); 
                          if (_cwc_2000) 
                          { 
                            _cwc_1994 = UTDScalarB::comaBBB( x, y) ; 
                            _cwc_1721 = _cwc_1994; 
                          }
                          else
                          { 
                            _cwc_1988 = true; 
                            _cwc_1991 = 12; 
                            _cwc_1989 = [ 0 ]; 
                            _cwc_1990 = _sel_VxA_( _cwc_1989, _cwc_1986); 
                            _cwc_1992 = _eq_SxS_( _cwc_1990, _cwc_1991); 
                            _cwc_1993 = _and_SxS_( _cwc_1992, _cwc_1988); 
                            if (_cwc_1993) 
                            { 
                              _cwc_1987 = UTDScalarB::comaBBB( x, y) ; 
                              _cwc_1721 = _cwc_1987; 
                            }
                            else
                            { 
                              _cwc_1985 = UTDScalarB::comaBBB( x, y) ; 
                              _cwc_1721 = _cwc_1985; 
                            }
                          }
                        }
                      }
                      else
                      { 
                        _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                      }
                    }
                  }
                  else
                  { 
                    _cwc_1978 = true; 
                    _cwc_1981 = 9; 
                    _cwc_1979 = [ 0 ]; 
                    _cwc_1980 = _sel_VxA_( _cwc_1979, _cwc_1760); 
                    _cwc_1982 = _eq_SxS_( _cwc_1980, _cwc_1981); 
                    _cwc_1983 = _and_SxS_( _cwc_1982, _cwc_1978); 
                    if (_cwc_1983) 
                    { 
                      _cwc_1974 = _dim_A_( y); 
                      _cwc_1976 = 0; 
                      _cwc_1977 = _eq_SxS_( _cwc_1974, _cwc_1976); 
                      if (_cwc_1977) 
                      { 
                        _cwc_1975 = UTDScalarB::comaBBB( x, y) ; 
                        _cwc_1721 = _cwc_1975; 
                      }
                      else
                      { 
                        _cwc_1948 = _dim_A_( y); 
                        _cwc_1972 = 1; 
                        _cwc_1973 = _eq_SxS_( _cwc_1948, _cwc_1972); 
                        if (_cwc_1973) 
                        { 
                          _cwc_1950 = _shape_A_( y); 
                          _cwc_1966 = true; 
                          _cwc_1969 = 4; 
                          _cwc_1967 = [ 0 ]; 
                          _cwc_1968 = _sel_VxA_( _cwc_1967, _cwc_1950); 
                          _cwc_1970 = _eq_SxS_( _cwc_1968, _cwc_1969); 
                          _cwc_1971 = _and_SxS_( _cwc_1970, _cwc_1966); 
                          if (_cwc_1971) 
                          { 
                            _cwc_1965 = UTDScalarB::comaBBB( x, y) ; 
                            _cwc_1721 = _cwc_1965; 
                          }
                          else
                          { 
                            _cwc_1959 = true; 
                            _cwc_1962 = 8; 
                            _cwc_1960 = [ 0 ]; 
                            _cwc_1961 = _sel_VxA_( _cwc_1960, _cwc_1950); 
                            _cwc_1963 = _eq_SxS_( _cwc_1961, _cwc_1962); 
                            _cwc_1964 = _and_SxS_( _cwc_1963, _cwc_1959); 
                            if (_cwc_1964) 
                            { 
                              _cwc_1958 = UTDScalarB::comaBBB( x, y) ; 
                              _cwc_1721 = _cwc_1958; 
                            }
                            else
                            { 
                              _cwc_1952 = true; 
                              _cwc_1955 = 12; 
                              _cwc_1953 = [ 0 ]; 
                              _cwc_1954 = _sel_VxA_( _cwc_1953, _cwc_1950); 
                              _cwc_1956 = _eq_SxS_( _cwc_1954, _cwc_1955); 
                              _cwc_1957 = _and_SxS_( _cwc_1956, _cwc_1952); 
                              if (_cwc_1957) 
                              { 
                                _cwc_1951 = UTDScalarB::comaBBB( x, y) ; 
                                _cwc_1721 = _cwc_1951; 
                              }
                              else
                              { 
                                _cwc_1949 = UTDScalarB::comaBBB( x, y) ; 
                                _cwc_1721 = _cwc_1949; 
                              }
                            }
                          }
                        }
                        else
                        { 
                          _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                        }
                      }
                    }
                    else
                    { 
                      _cwc_1942 = true; 
                      _cwc_1945 = 10; 
                      _cwc_1943 = [ 0 ]; 
                      _cwc_1944 = _sel_VxA_( _cwc_1943, _cwc_1760); 
                      _cwc_1946 = _eq_SxS_( _cwc_1944, _cwc_1945); 
                      _cwc_1947 = _and_SxS_( _cwc_1946, _cwc_1942); 
                      if (_cwc_1947) 
                      { 
                        _cwc_1938 = _dim_A_( y); 
                        _cwc_1940 = 0; 
                        _cwc_1941 = _eq_SxS_( _cwc_1938, _cwc_1940); 
                        if (_cwc_1941) 
                        { 
                          _cwc_1939 = UTDScalarB::comaBBB( x, y) ; 
                          _cwc_1721 = _cwc_1939; 
                        }
                        else
                        { 
                          _cwc_1912 = _dim_A_( y); 
                          _cwc_1936 = 1; 
                          _cwc_1937 = _eq_SxS_( _cwc_1912, _cwc_1936); 
                          if (_cwc_1937) 
                          { 
                            _cwc_1914 = _shape_A_( y); 
                            _cwc_1930 = true; 
                            _cwc_1933 = 4; 
                            _cwc_1931 = [ 0 ]; 
                            _cwc_1932 = _sel_VxA_( _cwc_1931, _cwc_1914); 
                            _cwc_1934 = _eq_SxS_( _cwc_1932, _cwc_1933); 
                            _cwc_1935 = _and_SxS_( _cwc_1934, _cwc_1930); 
                            if (_cwc_1935) 
                            { 
                              _cwc_1929 = UTDScalarB::comaBBB( x, y) ; 
                              _cwc_1721 = _cwc_1929; 
                            }
                            else
                            { 
                              _cwc_1923 = true; 
                              _cwc_1926 = 8; 
                              _cwc_1924 = [ 0 ]; 
                              _cwc_1925 = _sel_VxA_( _cwc_1924, _cwc_1914); 
                              _cwc_1927 = _eq_SxS_( _cwc_1925, _cwc_1926); 
                              _cwc_1928 = _and_SxS_( _cwc_1927, _cwc_1923); 
                              if (_cwc_1928) 
                              { 
                                _cwc_1922 = UTDScalarB::comaBBB( x, y) ; 
                                _cwc_1721 = _cwc_1922; 
                              }
                              else
                              { 
                                _cwc_1916 = true; 
                                _cwc_1919 = 12; 
                                _cwc_1917 = [ 0 ]; 
                                _cwc_1918 = _sel_VxA_( _cwc_1917, _cwc_1914); 
                                _cwc_1920 = _eq_SxS_( _cwc_1918, _cwc_1919); 
                                _cwc_1921 = _and_SxS_( _cwc_1920, _cwc_1916); 
                                if (_cwc_1921) 
                                { 
                                  _cwc_1915 = UTDScalarB::comaBBB( x, y) ; 
                                  _cwc_1721 = _cwc_1915; 
                                }
                                else
                                { 
                                  _cwc_1913 = UTDScalarB::comaBBB( x, y) ; 
                                  _cwc_1721 = _cwc_1913; 
                                }
                              }
                            }
                          }
                          else
                          { 
                            _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                          }
                        }
                      }
                      else
                      { 
                        _cwc_1906 = true; 
                        _cwc_1909 = 11; 
                        _cwc_1907 = [ 0 ]; 
                        _cwc_1908 = _sel_VxA_( _cwc_1907, _cwc_1760); 
                        _cwc_1910 = _eq_SxS_( _cwc_1908, _cwc_1909); 
                        _cwc_1911 = _and_SxS_( _cwc_1910, _cwc_1906); 
                        if (_cwc_1911) 
                        { 
                          _cwc_1902 = _dim_A_( y); 
                          _cwc_1904 = 0; 
                          _cwc_1905 = _eq_SxS_( _cwc_1902, _cwc_1904); 
                          if (_cwc_1905) 
                          { 
                            _cwc_1903 = UTDScalarB::comaBBB( x, y) ; 
                            _cwc_1721 = _cwc_1903; 
                          }
                          else
                          { 
                            _cwc_1876 = _dim_A_( y); 
                            _cwc_1900 = 1; 
                            _cwc_1901 = _eq_SxS_( _cwc_1876, _cwc_1900); 
                            if (_cwc_1901) 
                            { 
                              _cwc_1878 = _shape_A_( y); 
                              _cwc_1894 = true; 
                              _cwc_1897 = 4; 
                              _cwc_1895 = [ 0 ]; 
                              _cwc_1896 = _sel_VxA_( _cwc_1895, _cwc_1878); 
                              _cwc_1898 = _eq_SxS_( _cwc_1896, _cwc_1897); 
                              _cwc_1899 = _and_SxS_( _cwc_1898, _cwc_1894); 
                              if (_cwc_1899) 
                              { 
                                _cwc_1893 = UTDScalarB::comaBBB( x, y) ; 
                                _cwc_1721 = _cwc_1893; 
                              }
                              else
                              { 
                                _cwc_1887 = true; 
                                _cwc_1890 = 8; 
                                _cwc_1888 = [ 0 ]; 
                                _cwc_1889 = _sel_VxA_( _cwc_1888, _cwc_1878); 
                                _cwc_1891 = _eq_SxS_( _cwc_1889, _cwc_1890); 
                                _cwc_1892 = _and_SxS_( _cwc_1891, _cwc_1887); 
                                if (_cwc_1892) 
                                { 
                                  _cwc_1886 = UTDScalarB::comaBBB( x, y) ; 
                                  _cwc_1721 = _cwc_1886; 
                                }
                                else
                                { 
                                  _cwc_1880 = true; 
                                  _cwc_1883 = 12; 
                                  _cwc_1881 = [ 0 ]; 
                                  _cwc_1882 = _sel_VxA_( _cwc_1881, _cwc_1878); 
                                  _cwc_1884 = _eq_SxS_( _cwc_1882, _cwc_1883); 
                                  _cwc_1885 = _and_SxS_( _cwc_1884, _cwc_1880); 
                                  if (_cwc_1885) 
                                  { 
                                    _cwc_1879 = UTDScalarB::comaBBB( x, y) ; 
                                    _cwc_1721 = _cwc_1879; 
                                  }
                                  else
                                  { 
                                    _cwc_1877 = UTDScalarB::comaBBB( x, y) ; 
                                    _cwc_1721 = _cwc_1877; 
                                  }
                                }
                              }
                            }
                            else
                            { 
                              _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                            }
                          }
                        }
                        else
                        { 
                          _cwc_1870 = true; 
                          _cwc_1873 = 12; 
                          _cwc_1871 = [ 0 ]; 
                          _cwc_1872 = _sel_VxA_( _cwc_1871, _cwc_1760); 
                          _cwc_1874 = _eq_SxS_( _cwc_1872, _cwc_1873); 
                          _cwc_1875 = _and_SxS_( _cwc_1874, _cwc_1870); 
                          if (_cwc_1875) 
                          { 
                            _cwc_1866 = _dim_A_( y); 
                            _cwc_1868 = 0; 
                            _cwc_1869 = _eq_SxS_( _cwc_1866, _cwc_1868); 
                            if (_cwc_1869) 
                            { 
                              _cwc_1867 = UTDScalarB::comaBBB( x, y) ; 
                              _cwc_1721 = _cwc_1867; 
                            }
                            else
                            { 
                              _cwc_1840 = _dim_A_( y); 
                              _cwc_1864 = 1; 
                              _cwc_1865 = _eq_SxS_( _cwc_1840, _cwc_1864); 
                              if (_cwc_1865) 
                              { 
                                _cwc_1842 = _shape_A_( y); 
                                _cwc_1858 = true; 
                                _cwc_1861 = 4; 
                                _cwc_1859 = [ 0 ]; 
                                _cwc_1860 = _sel_VxA_( _cwc_1859, _cwc_1842); 
                                _cwc_1862 = _eq_SxS_( _cwc_1860, _cwc_1861); 
                                _cwc_1863 = _and_SxS_( _cwc_1862, _cwc_1858); 
                                if (_cwc_1863) 
                                { 
                                  _cwc_1857 = UTDScalarB::comaBBB( x, y) ; 
                                  _cwc_1721 = _cwc_1857; 
                                }
                                else
                                { 
                                  _cwc_1851 = true; 
                                  _cwc_1854 = 8; 
                                  _cwc_1852 = [ 0 ]; 
                                  _cwc_1853 = _sel_VxA_( _cwc_1852, _cwc_1842); 
                                  _cwc_1855 = _eq_SxS_( _cwc_1853, _cwc_1854); 
                                  _cwc_1856 = _and_SxS_( _cwc_1855, _cwc_1851); 
                                  if (_cwc_1856) 
                                  { 
                                    _cwc_1850 = UTDScalarB::comaBBB( x, y) ; 
                                    _cwc_1721 = _cwc_1850; 
                                  }
                                  else
                                  { 
                                    _cwc_1844 = true; 
                                    _cwc_1847 = 12; 
                                    _cwc_1845 = [ 0 ]; 
                                    _cwc_1846 = _sel_VxA_( _cwc_1845, _cwc_1842); 
                                    _cwc_1848 = _eq_SxS_( _cwc_1846, _cwc_1847); 
                                    _cwc_1849 = _and_SxS_( _cwc_1848, _cwc_1844); 
                                    if (_cwc_1849) 
                                    { 
                                      _cwc_1843 = UTDScalarB::comaBBB( x, y) ; 
                                      _cwc_1721 = _cwc_1843; 
                                    }
                                    else
                                    { 
                                      _cwc_1841 = UTDScalarB::comaBBB( x, y) ; 
                                      _cwc_1721 = _cwc_1841; 
                                    }
                                  }
                                }
                              }
                              else
                              { 
                                _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                              }
                            }
                          }
                          else
                          { 
                            _cwc_1834 = true; 
                            _cwc_1837 = 13; 
                            _cwc_1835 = [ 0 ]; 
                            _cwc_1836 = _sel_VxA_( _cwc_1835, _cwc_1760); 
                            _cwc_1838 = _eq_SxS_( _cwc_1836, _cwc_1837); 
                            _cwc_1839 = _and_SxS_( _cwc_1838, _cwc_1834); 
                            if (_cwc_1839) 
                            { 
                              _cwc_1830 = _dim_A_( y); 
                              _cwc_1832 = 0; 
                              _cwc_1833 = _eq_SxS_( _cwc_1830, _cwc_1832); 
                              if (_cwc_1833) 
                              { 
                                _cwc_1831 = UTDScalarB::comaBBB( x, y) ; 
                                _cwc_1721 = _cwc_1831; 
                              }
                              else
                              { 
                                _cwc_1804 = _dim_A_( y); 
                                _cwc_1828 = 1; 
                                _cwc_1829 = _eq_SxS_( _cwc_1804, _cwc_1828); 
                                if (_cwc_1829) 
                                { 
                                  _cwc_1806 = _shape_A_( y); 
                                  _cwc_1822 = true; 
                                  _cwc_1825 = 4; 
                                  _cwc_1823 = [ 0 ]; 
                                  _cwc_1824 = _sel_VxA_( _cwc_1823, _cwc_1806); 
                                  _cwc_1826 = _eq_SxS_( _cwc_1824, _cwc_1825); 
                                  _cwc_1827 = _and_SxS_( _cwc_1826, _cwc_1822); 
                                  if (_cwc_1827) 
                                  { 
                                    _cwc_1821 = UTDScalarB::comaBBB( x, y) ; 
                                    _cwc_1721 = _cwc_1821; 
                                  }
                                  else
                                  { 
                                    _cwc_1815 = true; 
                                    _cwc_1818 = 8; 
                                    _cwc_1816 = [ 0 ]; 
                                    _cwc_1817 = _sel_VxA_( _cwc_1816, _cwc_1806); 
                                    _cwc_1819 = _eq_SxS_( _cwc_1817, _cwc_1818); 
                                    _cwc_1820 = _and_SxS_( _cwc_1819, _cwc_1815); 
                                    if (_cwc_1820) 
                                    { 
                                      _cwc_1814 = UTDScalarB::comaBBB( x, y) ; 
                                      _cwc_1721 = _cwc_1814; 
                                    }
                                    else
                                    { 
                                      _cwc_1808 = true; 
                                      _cwc_1811 = 12; 
                                      _cwc_1809 = [ 0 ]; 
                                      _cwc_1810 = _sel_VxA_( _cwc_1809, _cwc_1806); 
                                      _cwc_1812 = _eq_SxS_( _cwc_1810, _cwc_1811); 
                                      _cwc_1813 = _and_SxS_( _cwc_1812, _cwc_1808); 
                                      if (_cwc_1813) 
                                      { 
                                        _cwc_1807 = UTDScalarB::comaBBB( x, y) ; 
                                        _cwc_1721 = _cwc_1807; 
                                      }
                                      else
                                      { 
                                        _cwc_1805 = UTDScalarB::comaBBB( x, y) ; 
                                        _cwc_1721 = _cwc_1805; 
                                      }
                                    }
                                  }
                                }
                                else
                                { 
                                  _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                }
                              }
                            }
                            else
                            { 
                              _cwc_1798 = true; 
                              _cwc_1801 = 1; 
                              _cwc_1799 = [ 0 ]; 
                              _cwc_1800 = _sel_VxA_( _cwc_1799, _cwc_1760); 
                              _cwc_1802 = _eq_SxS_( _cwc_1800, _cwc_1801); 
                              _cwc_1803 = _and_SxS_( _cwc_1802, _cwc_1798); 
                              if (_cwc_1803) 
                              { 
                                _cwc_1794 = _dim_A_( y); 
                                _cwc_1796 = 0; 
                                _cwc_1797 = _eq_SxS_( _cwc_1794, _cwc_1796); 
                                if (_cwc_1797) 
                                { 
                                  _cwc_1795 = UTDScalarB::comaBBB( x, y) ; 
                                  _cwc_1721 = _cwc_1795; 
                                }
                                else
                                { 
                                  _cwc_1761 = _dim_A_( y); 
                                  _cwc_1792 = 1; 
                                  _cwc_1793 = _eq_SxS_( _cwc_1761, _cwc_1792); 
                                  if (_cwc_1793) 
                                  { 
                                    _cwc_1763 = _shape_A_( y); 
                                    _cwc_1786 = true; 
                                    _cwc_1789 = 4; 
                                    _cwc_1787 = [ 0 ]; 
                                    _cwc_1788 = _sel_VxA_( _cwc_1787, _cwc_1763); 
                                    _cwc_1790 = _eq_SxS_( _cwc_1788, _cwc_1789); 
                                    _cwc_1791 = _and_SxS_( _cwc_1790, _cwc_1786); 
                                    if (_cwc_1791) 
                                    { 
                                      _cwc_1785 = UTDScalarB::comaBBB( x, y) ; 
                                      _cwc_1721 = _cwc_1785; 
                                    }
                                    else
                                    { 
                                      _cwc_1779 = true; 
                                      _cwc_1782 = 8; 
                                      _cwc_1780 = [ 0 ]; 
                                      _cwc_1781 = _sel_VxA_( _cwc_1780, _cwc_1763); 
                                      _cwc_1783 = _eq_SxS_( _cwc_1781, _cwc_1782); 
                                      _cwc_1784 = _and_SxS_( _cwc_1783, _cwc_1779); 
                                      if (_cwc_1784) 
                                      { 
                                        _cwc_1778 = UTDScalarB::comaBBB( x, y) ; 
                                        _cwc_1721 = _cwc_1778; 
                                      }
                                      else
                                      { 
                                        _cwc_1772 = true; 
                                        _cwc_1775 = 12; 
                                        _cwc_1773 = [ 0 ]; 
                                        _cwc_1774 = _sel_VxA_( _cwc_1773, _cwc_1763); 
                                        _cwc_1776 = _eq_SxS_( _cwc_1774, _cwc_1775); 
                                        _cwc_1777 = _and_SxS_( _cwc_1776, _cwc_1772); 
                                        if (_cwc_1777) 
                                        { 
                                          _cwc_1771 = UTDScalarB::comaBBB( x, y) ; 
                                          _cwc_1721 = _cwc_1771; 
                                        }
                                        else
                                        { 
                                          _cwc_1765 = true; 
                                          _cwc_1768 = 14; 
                                          _cwc_1766 = [ 0 ]; 
                                          _cwc_1767 = _sel_VxA_( _cwc_1766, _cwc_1763); 
                                          _cwc_1769 = _eq_SxS_( _cwc_1767, _cwc_1768); 
                                          _cwc_1770 = _and_SxS_( _cwc_1769, _cwc_1765); 
                                          if (_cwc_1770) 
                                          { 
                                            _cwc_1764 = UTDScalarB::comaBBB( x, y) ; 
                                            _cwc_1721 = _cwc_1764; 
                                          }
                                          else
                                          { 
                                            _cwc_1762 = UTDScalarB::comaBBB( x, y) ; 
                                            _cwc_1721 = _cwc_1762; 
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else
                                  { 
                                    _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                  }
                                }
                              }
                              else
                              { 
                                _cwc_1756 = _dim_A_( y); 
                                _cwc_1758 = 0; 
                                _cwc_1759 = _eq_SxS_( _cwc_1756, _cwc_1758); 
                                if (_cwc_1759) 
                                { 
                                  _cwc_1757 = UTDScalarB::comaBBB( x, y) ; 
                                  _cwc_1721 = _cwc_1757; 
                                }
                                else
                                { 
                                  _cwc_1723 = _dim_A_( y); 
                                  _cwc_1754 = 1; 
                                  _cwc_1755 = _eq_SxS_( _cwc_1723, _cwc_1754); 
                                  if (_cwc_1755) 
                                  { 
                                    _cwc_1725 = _shape_A_( y); 
                                    _cwc_1748 = true; 
                                    _cwc_1751 = 4; 
                                    _cwc_1749 = [ 0 ]; 
                                    _cwc_1750 = _sel_VxA_( _cwc_1749, _cwc_1725); 
                                    _cwc_1752 = _eq_SxS_( _cwc_1750, _cwc_1751); 
                                    _cwc_1753 = _and_SxS_( _cwc_1752, _cwc_1748); 
                                    if (_cwc_1753) 
                                    { 
                                      _cwc_1747 = UTDScalarB::comaBBB( x, y) ; 
                                      _cwc_1721 = _cwc_1747; 
                                    }
                                    else
                                    { 
                                      _cwc_1741 = true; 
                                      _cwc_1744 = 8; 
                                      _cwc_1742 = [ 0 ]; 
                                      _cwc_1743 = _sel_VxA_( _cwc_1742, _cwc_1725); 
                                      _cwc_1745 = _eq_SxS_( _cwc_1743, _cwc_1744); 
                                      _cwc_1746 = _and_SxS_( _cwc_1745, _cwc_1741); 
                                      if (_cwc_1746) 
                                      { 
                                        _cwc_1740 = UTDScalarB::comaBBB( x, y) ; 
                                        _cwc_1721 = _cwc_1740; 
                                      }
                                      else
                                      { 
                                        _cwc_1734 = true; 
                                        _cwc_1737 = 12; 
                                        _cwc_1735 = [ 0 ]; 
                                        _cwc_1736 = _sel_VxA_( _cwc_1735, _cwc_1725); 
                                        _cwc_1738 = _eq_SxS_( _cwc_1736, _cwc_1737); 
                                        _cwc_1739 = _and_SxS_( _cwc_1738, _cwc_1734); 
                                        if (_cwc_1739) 
                                        { 
                                          _cwc_1733 = UTDScalarB::comaBBB( x, y) ; 
                                          _cwc_1721 = _cwc_1733; 
                                        }
                                        else
                                        { 
                                          _cwc_1727 = true; 
                                          _cwc_1730 = 14; 
                                          _cwc_1728 = [ 0 ]; 
                                          _cwc_1729 = _sel_VxA_( _cwc_1728, _cwc_1725); 
                                          _cwc_1731 = _eq_SxS_( _cwc_1729, _cwc_1730); 
                                          _cwc_1732 = _and_SxS_( _cwc_1731, _cwc_1727); 
                                          if (_cwc_1732) 
                                          { 
                                            _cwc_1726 = UTDScalarB::comaBBB( x, y) ; 
                                            _cwc_1721 = _cwc_1726; 
                                          }
                                          else
                                          { 
                                            _cwc_1724 = UTDScalarB::comaBBB( x, y) ; 
                                            _cwc_1721 = _cwc_1724; 
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else
                                  { 
                                    _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    { 
      _cwc_1721 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
    }
  }
  return( _cwc_1721); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::++(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB:Array::++( bool[*] arr_a { ,NN } , bool[*] arr_b { ,NN } )
/*
 *  ++ :: { bool[*] -> { bool[*] -> ( bool[+]),
                         bool -> ( bool[+]),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[.]),
                         bool[1] -> ( bool[.]),
                         bool[4] -> ( bool[8]),
                         bool[8] -> ( bool[12]),
                         bool[12] -> ( bool[16]),
                         bool[14] -> ( bool[15])},
            bool -> { bool[*] -> ( bool[+]),
                      bool -> ( bool[2]),
                      bool[+] -> ( bool[+])},
            bool[+] -> { bool[*] -> ( bool[+]),
                         bool -> ( bool[+]),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[.]),
                         bool[1] -> ( bool[.]),
                         bool[4] -> ( bool[8]),
                         bool[8] -> ( bool[12]),
                         bool[12] -> ( bool[16]),
                         bool[14] -> ( bool[15])},
            bool[.] -> { bool[*] -> ( bool[.]),
                         bool -> ( --),
                         bool[+] -> ( bool[.]),
                         bool[.] -> ( bool[.]),
                         bool[1] -> ( bool[.]),
                         bool[4] -> ( bool[8]),
                         bool[8] -> ( bool[12]),
                         bool[12] -> ( bool[16]),
                         bool[14] -> ( bool[15])},
            bool[1] -> { bool[*] -> ( bool[.]),
                         bool -> ( --),
                         bool[+] -> ( bool[.]),
                         bool[.] -> ( bool[.]),
                         bool[1] -> ( bool[2]),
                         bool[14] -> ( bool[15])},
            bool[2] -> { bool[*] -> ( bool[3]),
                         bool -> ( --),
                         bool[+] -> ( bool[3]),
                         bool[.] -> ( bool[3]),
                         bool[1] -> ( bool[3])},
            bool[3] -> { bool[*] -> ( bool[4]),
                         bool -> ( --),
                         bool[+] -> ( bool[4]),
                         bool[.] -> ( bool[4]),
                         bool[1] -> ( bool[4])},
            bool[4] -> { bool[*] -> ( bool[.]),
                         bool -> ( --),
                         bool[+] -> ( bool[.]),
                         bool[.] -> ( bool[.]),
                         bool[1] -> ( bool[5]),
                         bool[4] -> ( bool[8]),
                         bool[8] -> ( bool[12]),
                         bool[12] -> ( bool[16])},
            bool[5] -> { bool[*] -> ( bool[6]),
                         bool -> ( --),
                         bool[+] -> ( bool[6]),
                         bool[.] -> ( bool[6]),
                         bool[1] -> ( bool[6]),
                         bool[4] -> ( --),
                         bool[8] -> ( --),
                         bool[12] -> ( --)},
            bool[6] -> { bool[*] -> ( bool[7]),
                         bool -> ( --),
                         bool[+] -> ( bool[7]),
                         bool[.] -> ( bool[7]),
                         bool[1] -> ( bool[7]),
                         bool[4] -> ( --),
                         bool[8] -> ( --),
                         bool[12] -> ( --)},
            bool[7] -> { bool[*] -> ( bool[8]),
                         bool -> ( --),
                         bool[+] -> ( bool[8]),
                         bool[.] -> ( bool[8]),
                         bool[1] -> ( bool[8]),
                         bool[4] -> ( --),
                         bool[8] -> ( --),
                         bool[12] -> ( --)},
            bool[8] -> { bool[*] -> ( bool[9]),
                         bool -> ( --),
                         bool[+] -> ( bool[9]),
                         bool[.] -> ( bool[9]),
                         bool[1] -> ( bool[9]),
                         bool[4] -> ( --),
                         bool[8] -> ( --),
                         bool[12] -> ( --)},
            bool[9] -> { bool[*] -> ( bool[10]),
                         bool -> ( --),
                         bool[+] -> ( bool[10]),
                         bool[.] -> ( bool[10]),
                         bool[1] -> ( bool[10]),
                         bool[4] -> ( --),
                         bool[8] -> ( --),
                         bool[12] -> ( --)},
            bool[10] -> { bool[*] -> ( bool[11]),
                          bool -> ( --),
                          bool[+] -> ( bool[11]),
                          bool[.] -> ( bool[11]),
                          bool[1] -> ( bool[11]),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --)},
            bool[11] -> { bool[*] -> ( bool[12]),
                          bool -> ( --),
                          bool[+] -> ( bool[12]),
                          bool[.] -> ( bool[12]),
                          bool[1] -> ( bool[12]),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --)},
            bool[12] -> { bool[*] -> ( bool[13]),
                          bool -> ( --),
                          bool[+] -> ( bool[13]),
                          bool[.] -> ( bool[13]),
                          bool[1] -> ( bool[13]),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --)},
            bool[13] -> { bool[*] -> ( bool[14]),
                          bool -> ( --),
                          bool[+] -> ( bool[14]),
                          bool[.] -> ( bool[14]),
                          bool[1] -> ( bool[14]),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --)}}
 *  dispatching to: ArrayTransform::++,
 *                  ArrayTransform::++,
 *                  ArrayTransform::++,
 *                  ArrayTransform::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++
 */
{ 
  bool[+] _cwc_2201 { , NN } ; 
  bool _cwc_2870 { , NN } ; 
  int _cwc_2869 { , NN } ; 
  bool _cwc_2868 { , NN } ; 
  int _cwc_2867 { , NN } ; 
  bool[2] _cwc_2866 { , NN } ; 
  int _cwc_2865 { , NN } ; 
  bool _cwc_2864 { , NN } ; 
  int _cwc_2863 { , NN } ; 
  int _cwc_2862 { , NN } ; 
  bool[+] _cwc_2861 { , NN } ; 
  int _cwc_2860 { , NN } ; 
  bool _cwc_2859 { , NN } ; 
  int _cwc_2858 { , NN } ; 
  int _cwc_2857 { , NN } ; 
  bool _cwc_2856 { , NN } ; 
  int _cwc_2855 { , NN } ; 
  bool _cwc_2854 { , NN } ; 
  bool _cwc_2853 { , NN } ; 
  int{1} _cwc_2852 { , NN } ; 
  int _cwc_2851 { , NN } ; 
  int[1]{0} _cwc_2850 { , NN } ; 
  bool _cwc_2849 { , NN } ; 
  bool _cwc_2848 { , NN } ; 
  int _cwc_2847 { , NN } ; 
  bool[+] _cwc_2846 { , NN } ; 
  int _cwc_2845 { , NN } ; 
  bool _cwc_2844 { , NN } ; 
  int _cwc_2843 { , NN } ; 
  int _cwc_2842 { , NN } ; 
  bool _cwc_2841 { , NN } ; 
  int _cwc_2840 { , NN } ; 
  bool _cwc_2839 { , NN } ; 
  bool _cwc_2838 { , NN } ; 
  int{1} _cwc_2837 { , NN } ; 
  int _cwc_2836 { , NN } ; 
  int[1]{0} _cwc_2835 { , NN } ; 
  bool _cwc_2834 { , NN } ; 
  bool[2] _cwc_2833 { , NN } ; 
  bool _cwc_2832 { , NN } ; 
  bool _cwc_2831 { , NN } ; 
  int{14} _cwc_2830 { , NN } ; 
  int _cwc_2829 { , NN } ; 
  int[1]{0} _cwc_2828 { , NN } ; 
  bool _cwc_2827 { , NN } ; 
  bool[15] _cwc_2826 { , NN } ; 
  int[+] _cwc_2825 { , NN } ; 
  bool[.] _cwc_2824 { , NN } ; 
  int _cwc_2823 { , NN } ; 
  bool[+] _cwc_2822 { , NN } ; 
  bool _cwc_2821 { , NN } ; 
  bool _cwc_2820 { , NN } ; 
  int{2} _cwc_2819 { , NN } ; 
  int _cwc_2818 { , NN } ; 
  int[1]{0} _cwc_2817 { , NN } ; 
  bool _cwc_2816 { , NN } ; 
  bool _cwc_2815 { , NN } ; 
  int _cwc_2814 { , NN } ; 
  bool[+] _cwc_2813 { , NN } ; 
  int _cwc_2812 { , NN } ; 
  bool _cwc_2811 { , NN } ; 
  int _cwc_2810 { , NN } ; 
  int _cwc_2809 { , NN } ; 
  bool _cwc_2808 { , NN } ; 
  int _cwc_2807 { , NN } ; 
  bool _cwc_2806 { , NN } ; 
  bool _cwc_2805 { , NN } ; 
  int{1} _cwc_2804 { , NN } ; 
  int _cwc_2803 { , NN } ; 
  int[1]{0} _cwc_2802 { , NN } ; 
  bool _cwc_2801 { , NN } ; 
  bool[3] _cwc_2800 { , NN } ; 
  int[+] _cwc_2799 { , NN } ; 
  bool[.] _cwc_2798 { , NN } ; 
  int _cwc_2797 { , NN } ; 
  bool[+] _cwc_2796 { , NN } ; 
  bool _cwc_2795 { , NN } ; 
  bool _cwc_2794 { , NN } ; 
  int{3} _cwc_2793 { , NN } ; 
  int _cwc_2792 { , NN } ; 
  int[1]{0} _cwc_2791 { , NN } ; 
  bool _cwc_2790 { , NN } ; 
  bool _cwc_2789 { , NN } ; 
  int _cwc_2788 { , NN } ; 
  bool[+] _cwc_2787 { , NN } ; 
  int _cwc_2786 { , NN } ; 
  bool _cwc_2785 { , NN } ; 
  int _cwc_2784 { , NN } ; 
  int _cwc_2783 { , NN } ; 
  bool _cwc_2782 { , NN } ; 
  int _cwc_2781 { , NN } ; 
  bool _cwc_2780 { , NN } ; 
  bool _cwc_2779 { , NN } ; 
  int{1} _cwc_2778 { , NN } ; 
  int _cwc_2777 { , NN } ; 
  int[1]{0} _cwc_2776 { , NN } ; 
  bool _cwc_2775 { , NN } ; 
  bool[4] _cwc_2774 { , NN } ; 
  int[+] _cwc_2773 { , NN } ; 
  bool[.] _cwc_2772 { , NN } ; 
  int _cwc_2771 { , NN } ; 
  bool[+] _cwc_2770 { , NN } ; 
  bool _cwc_2769 { , NN } ; 
  bool _cwc_2768 { , NN } ; 
  int{4} _cwc_2767 { , NN } ; 
  int _cwc_2766 { , NN } ; 
  int[1]{0} _cwc_2765 { , NN } ; 
  bool _cwc_2764 { , NN } ; 
  bool _cwc_2763 { , NN } ; 
  int _cwc_2762 { , NN } ; 
  bool[+] _cwc_2761 { , NN } ; 
  int _cwc_2760 { , NN } ; 
  bool _cwc_2759 { , NN } ; 
  int _cwc_2758 { , NN } ; 
  int _cwc_2757 { , NN } ; 
  bool _cwc_2756 { , NN } ; 
  int _cwc_2755 { , NN } ; 
  bool _cwc_2754 { , NN } ; 
  bool _cwc_2753 { , NN } ; 
  int{1} _cwc_2752 { , NN } ; 
  int _cwc_2751 { , NN } ; 
  int[1]{0} _cwc_2750 { , NN } ; 
  bool _cwc_2749 { , NN } ; 
  bool[5] _cwc_2748 { , NN } ; 
  bool _cwc_2747 { , NN } ; 
  bool _cwc_2746 { , NN } ; 
  int{4} _cwc_2745 { , NN } ; 
  int _cwc_2744 { , NN } ; 
  int[1]{0} _cwc_2743 { , NN } ; 
  bool _cwc_2742 { , NN } ; 
  bool[8] _cwc_2741 { , NN } ; 
  bool _cwc_2740 { , NN } ; 
  bool _cwc_2739 { , NN } ; 
  int{8} _cwc_2738 { , NN } ; 
  int _cwc_2737 { , NN } ; 
  int[1]{0} _cwc_2736 { , NN } ; 
  bool _cwc_2735 { , NN } ; 
  bool[12] _cwc_2734 { , NN } ; 
  bool _cwc_2733 { , NN } ; 
  bool _cwc_2732 { , NN } ; 
  int{12} _cwc_2731 { , NN } ; 
  int _cwc_2730 { , NN } ; 
  int[1]{0} _cwc_2729 { , NN } ; 
  bool _cwc_2728 { , NN } ; 
  bool[16] _cwc_2727 { , NN } ; 
  int[+] _cwc_2726 { , NN } ; 
  bool[.] _cwc_2725 { , NN } ; 
  int _cwc_2724 { , NN } ; 
  bool[+] _cwc_2723 { , NN } ; 
  bool _cwc_2722 { , NN } ; 
  bool _cwc_2721 { , NN } ; 
  int{5} _cwc_2720 { , NN } ; 
  int _cwc_2719 { , NN } ; 
  int[1]{0} _cwc_2718 { , NN } ; 
  bool _cwc_2717 { , NN } ; 
  bool _cwc_2716 { , NN } ; 
  int _cwc_2715 { , NN } ; 
  bool[+] _cwc_2714 { , NN } ; 
  int _cwc_2713 { , NN } ; 
  bool _cwc_2712 { , NN } ; 
  int _cwc_2711 { , NN } ; 
  int _cwc_2710 { , NN } ; 
  bool _cwc_2709 { , NN } ; 
  int _cwc_2708 { , NN } ; 
  bool _cwc_2707 { , NN } ; 
  bool _cwc_2706 { , NN } ; 
  int{1} _cwc_2705 { , NN } ; 
  int _cwc_2704 { , NN } ; 
  int[1]{0} _cwc_2703 { , NN } ; 
  bool _cwc_2702 { , NN } ; 
  bool[6] _cwc_2701 { , NN } ; 
  bool _cwc_2700 { , NN } ; 
  bool _cwc_2699 { , NN } ; 
  int{4} _cwc_2698 { , NN } ; 
  int _cwc_2697 { , NN } ; 
  int[1]{0} _cwc_2696 { , NN } ; 
  bool _cwc_2695 { , NN } ; 
  bool[.] _cwc_2694 { , NN } ; 
  bool _cwc_2693 { , NN } ; 
  bool _cwc_2692 { , NN } ; 
  int{8} _cwc_2691 { , NN } ; 
  int _cwc_2690 { , NN } ; 
  int[1]{0} _cwc_2689 { , NN } ; 
  bool _cwc_2688 { , NN } ; 
  bool[.] _cwc_2687 { , NN } ; 
  bool _cwc_2686 { , NN } ; 
  bool _cwc_2685 { , NN } ; 
  int{12} _cwc_2684 { , NN } ; 
  int _cwc_2683 { , NN } ; 
  int[1]{0} _cwc_2682 { , NN } ; 
  bool _cwc_2681 { , NN } ; 
  bool[.] _cwc_2680 { , NN } ; 
  int[+] _cwc_2679 { , NN } ; 
  bool[.] _cwc_2678 { , NN } ; 
  int _cwc_2677 { , NN } ; 
  bool[+] _cwc_2676 { , NN } ; 
  bool _cwc_2675 { , NN } ; 
  bool _cwc_2674 { , NN } ; 
  int{6} _cwc_2673 { , NN } ; 
  int _cwc_2672 { , NN } ; 
  int[1]{0} _cwc_2671 { , NN } ; 
  bool _cwc_2670 { , NN } ; 
  bool _cwc_2669 { , NN } ; 
  int _cwc_2668 { , NN } ; 
  bool[+] _cwc_2667 { , NN } ; 
  int _cwc_2666 { , NN } ; 
  bool _cwc_2665 { , NN } ; 
  int _cwc_2664 { , NN } ; 
  int _cwc_2663 { , NN } ; 
  bool _cwc_2662 { , NN } ; 
  int _cwc_2661 { , NN } ; 
  bool _cwc_2660 { , NN } ; 
  bool _cwc_2659 { , NN } ; 
  int{1} _cwc_2658 { , NN } ; 
  int _cwc_2657 { , NN } ; 
  int[1]{0} _cwc_2656 { , NN } ; 
  bool _cwc_2655 { , NN } ; 
  bool[7] _cwc_2654 { , NN } ; 
  bool _cwc_2653 { , NN } ; 
  bool _cwc_2652 { , NN } ; 
  int{4} _cwc_2651 { , NN } ; 
  int _cwc_2650 { , NN } ; 
  int[1]{0} _cwc_2649 { , NN } ; 
  bool _cwc_2648 { , NN } ; 
  bool[.] _cwc_2647 { , NN } ; 
  bool _cwc_2646 { , NN } ; 
  bool _cwc_2645 { , NN } ; 
  int{8} _cwc_2644 { , NN } ; 
  int _cwc_2643 { , NN } ; 
  int[1]{0} _cwc_2642 { , NN } ; 
  bool _cwc_2641 { , NN } ; 
  bool[.] _cwc_2640 { , NN } ; 
  bool _cwc_2639 { , NN } ; 
  bool _cwc_2638 { , NN } ; 
  int{12} _cwc_2637 { , NN } ; 
  int _cwc_2636 { , NN } ; 
  int[1]{0} _cwc_2635 { , NN } ; 
  bool _cwc_2634 { , NN } ; 
  bool[.] _cwc_2633 { , NN } ; 
  int[+] _cwc_2632 { , NN } ; 
  bool[.] _cwc_2631 { , NN } ; 
  int _cwc_2630 { , NN } ; 
  bool[+] _cwc_2629 { , NN } ; 
  bool _cwc_2628 { , NN } ; 
  bool _cwc_2627 { , NN } ; 
  int{7} _cwc_2626 { , NN } ; 
  int _cwc_2625 { , NN } ; 
  int[1]{0} _cwc_2624 { , NN } ; 
  bool _cwc_2623 { , NN } ; 
  bool _cwc_2622 { , NN } ; 
  int _cwc_2621 { , NN } ; 
  bool[+] _cwc_2620 { , NN } ; 
  int _cwc_2619 { , NN } ; 
  bool _cwc_2618 { , NN } ; 
  int _cwc_2617 { , NN } ; 
  int _cwc_2616 { , NN } ; 
  bool _cwc_2615 { , NN } ; 
  int _cwc_2614 { , NN } ; 
  bool _cwc_2613 { , NN } ; 
  bool _cwc_2612 { , NN } ; 
  int{1} _cwc_2611 { , NN } ; 
  int _cwc_2610 { , NN } ; 
  int[1]{0} _cwc_2609 { , NN } ; 
  bool _cwc_2608 { , NN } ; 
  bool[8] _cwc_2607 { , NN } ; 
  bool _cwc_2606 { , NN } ; 
  bool _cwc_2605 { , NN } ; 
  int{4} _cwc_2604 { , NN } ; 
  int _cwc_2603 { , NN } ; 
  int[1]{0} _cwc_2602 { , NN } ; 
  bool _cwc_2601 { , NN } ; 
  bool[.] _cwc_2600 { , NN } ; 
  bool _cwc_2599 { , NN } ; 
  bool _cwc_2598 { , NN } ; 
  int{8} _cwc_2597 { , NN } ; 
  int _cwc_2596 { , NN } ; 
  int[1]{0} _cwc_2595 { , NN } ; 
  bool _cwc_2594 { , NN } ; 
  bool[.] _cwc_2593 { , NN } ; 
  bool _cwc_2592 { , NN } ; 
  bool _cwc_2591 { , NN } ; 
  int{12} _cwc_2590 { , NN } ; 
  int _cwc_2589 { , NN } ; 
  int[1]{0} _cwc_2588 { , NN } ; 
  bool _cwc_2587 { , NN } ; 
  bool[.] _cwc_2586 { , NN } ; 
  int[+] _cwc_2585 { , NN } ; 
  bool[.] _cwc_2584 { , NN } ; 
  int _cwc_2583 { , NN } ; 
  bool[+] _cwc_2582 { , NN } ; 
  bool _cwc_2581 { , NN } ; 
  bool _cwc_2580 { , NN } ; 
  int{8} _cwc_2579 { , NN } ; 
  int _cwc_2578 { , NN } ; 
  int[1]{0} _cwc_2577 { , NN } ; 
  bool _cwc_2576 { , NN } ; 
  bool _cwc_2575 { , NN } ; 
  int _cwc_2574 { , NN } ; 
  bool[+] _cwc_2573 { , NN } ; 
  int _cwc_2572 { , NN } ; 
  bool _cwc_2571 { , NN } ; 
  int _cwc_2570 { , NN } ; 
  int _cwc_2569 { , NN } ; 
  bool _cwc_2568 { , NN } ; 
  int _cwc_2567 { , NN } ; 
  bool _cwc_2566 { , NN } ; 
  bool _cwc_2565 { , NN } ; 
  int{1} _cwc_2564 { , NN } ; 
  int _cwc_2563 { , NN } ; 
  int[1]{0} _cwc_2562 { , NN } ; 
  bool _cwc_2561 { , NN } ; 
  bool[9] _cwc_2560 { , NN } ; 
  bool _cwc_2559 { , NN } ; 
  bool _cwc_2558 { , NN } ; 
  int{4} _cwc_2557 { , NN } ; 
  int _cwc_2556 { , NN } ; 
  int[1]{0} _cwc_2555 { , NN } ; 
  bool _cwc_2554 { , NN } ; 
  bool[.] _cwc_2553 { , NN } ; 
  bool _cwc_2552 { , NN } ; 
  bool _cwc_2551 { , NN } ; 
  int{8} _cwc_2550 { , NN } ; 
  int _cwc_2549 { , NN } ; 
  int[1]{0} _cwc_2548 { , NN } ; 
  bool _cwc_2547 { , NN } ; 
  bool[.] _cwc_2546 { , NN } ; 
  bool _cwc_2545 { , NN } ; 
  bool _cwc_2544 { , NN } ; 
  int{12} _cwc_2543 { , NN } ; 
  int _cwc_2542 { , NN } ; 
  int[1]{0} _cwc_2541 { , NN } ; 
  bool _cwc_2540 { , NN } ; 
  bool[.] _cwc_2539 { , NN } ; 
  int[+] _cwc_2538 { , NN } ; 
  bool[.] _cwc_2537 { , NN } ; 
  int _cwc_2536 { , NN } ; 
  bool[+] _cwc_2535 { , NN } ; 
  bool _cwc_2534 { , NN } ; 
  bool _cwc_2533 { , NN } ; 
  int{9} _cwc_2532 { , NN } ; 
  int _cwc_2531 { , NN } ; 
  int[1]{0} _cwc_2530 { , NN } ; 
  bool _cwc_2529 { , NN } ; 
  bool _cwc_2528 { , NN } ; 
  int _cwc_2527 { , NN } ; 
  bool[+] _cwc_2526 { , NN } ; 
  int _cwc_2525 { , NN } ; 
  bool _cwc_2524 { , NN } ; 
  int _cwc_2523 { , NN } ; 
  int _cwc_2522 { , NN } ; 
  bool _cwc_2521 { , NN } ; 
  int _cwc_2520 { , NN } ; 
  bool _cwc_2519 { , NN } ; 
  bool _cwc_2518 { , NN } ; 
  int{1} _cwc_2517 { , NN } ; 
  int _cwc_2516 { , NN } ; 
  int[1]{0} _cwc_2515 { , NN } ; 
  bool _cwc_2514 { , NN } ; 
  bool[10] _cwc_2513 { , NN } ; 
  bool _cwc_2512 { , NN } ; 
  bool _cwc_2511 { , NN } ; 
  int{4} _cwc_2510 { , NN } ; 
  int _cwc_2509 { , NN } ; 
  int[1]{0} _cwc_2508 { , NN } ; 
  bool _cwc_2507 { , NN } ; 
  bool[.] _cwc_2506 { , NN } ; 
  bool _cwc_2505 { , NN } ; 
  bool _cwc_2504 { , NN } ; 
  int{8} _cwc_2503 { , NN } ; 
  int _cwc_2502 { , NN } ; 
  int[1]{0} _cwc_2501 { , NN } ; 
  bool _cwc_2500 { , NN } ; 
  bool[.] _cwc_2499 { , NN } ; 
  bool _cwc_2498 { , NN } ; 
  bool _cwc_2497 { , NN } ; 
  int{12} _cwc_2496 { , NN } ; 
  int _cwc_2495 { , NN } ; 
  int[1]{0} _cwc_2494 { , NN } ; 
  bool _cwc_2493 { , NN } ; 
  bool[.] _cwc_2492 { , NN } ; 
  int[+] _cwc_2491 { , NN } ; 
  bool[.] _cwc_2490 { , NN } ; 
  int _cwc_2489 { , NN } ; 
  bool[+] _cwc_2488 { , NN } ; 
  bool _cwc_2487 { , NN } ; 
  bool _cwc_2486 { , NN } ; 
  int{10} _cwc_2485 { , NN } ; 
  int _cwc_2484 { , NN } ; 
  int[1]{0} _cwc_2483 { , NN } ; 
  bool _cwc_2482 { , NN } ; 
  bool _cwc_2481 { , NN } ; 
  int _cwc_2480 { , NN } ; 
  bool[+] _cwc_2479 { , NN } ; 
  int _cwc_2478 { , NN } ; 
  bool _cwc_2477 { , NN } ; 
  int _cwc_2476 { , NN } ; 
  int _cwc_2475 { , NN } ; 
  bool _cwc_2474 { , NN } ; 
  int _cwc_2473 { , NN } ; 
  bool _cwc_2472 { , NN } ; 
  bool _cwc_2471 { , NN } ; 
  int{1} _cwc_2470 { , NN } ; 
  int _cwc_2469 { , NN } ; 
  int[1]{0} _cwc_2468 { , NN } ; 
  bool _cwc_2467 { , NN } ; 
  bool[11] _cwc_2466 { , NN } ; 
  bool _cwc_2465 { , NN } ; 
  bool _cwc_2464 { , NN } ; 
  int{4} _cwc_2463 { , NN } ; 
  int _cwc_2462 { , NN } ; 
  int[1]{0} _cwc_2461 { , NN } ; 
  bool _cwc_2460 { , NN } ; 
  bool[.] _cwc_2459 { , NN } ; 
  bool _cwc_2458 { , NN } ; 
  bool _cwc_2457 { , NN } ; 
  int{8} _cwc_2456 { , NN } ; 
  int _cwc_2455 { , NN } ; 
  int[1]{0} _cwc_2454 { , NN } ; 
  bool _cwc_2453 { , NN } ; 
  bool[.] _cwc_2452 { , NN } ; 
  bool _cwc_2451 { , NN } ; 
  bool _cwc_2450 { , NN } ; 
  int{12} _cwc_2449 { , NN } ; 
  int _cwc_2448 { , NN } ; 
  int[1]{0} _cwc_2447 { , NN } ; 
  bool _cwc_2446 { , NN } ; 
  bool[.] _cwc_2445 { , NN } ; 
  int[+] _cwc_2444 { , NN } ; 
  bool[.] _cwc_2443 { , NN } ; 
  int _cwc_2442 { , NN } ; 
  bool[+] _cwc_2441 { , NN } ; 
  bool _cwc_2440 { , NN } ; 
  bool _cwc_2439 { , NN } ; 
  int{11} _cwc_2438 { , NN } ; 
  int _cwc_2437 { , NN } ; 
  int[1]{0} _cwc_2436 { , NN } ; 
  bool _cwc_2435 { , NN } ; 
  bool _cwc_2434 { , NN } ; 
  int _cwc_2433 { , NN } ; 
  bool[+] _cwc_2432 { , NN } ; 
  int _cwc_2431 { , NN } ; 
  bool _cwc_2430 { , NN } ; 
  int _cwc_2429 { , NN } ; 
  int _cwc_2428 { , NN } ; 
  bool _cwc_2427 { , NN } ; 
  int _cwc_2426 { , NN } ; 
  bool _cwc_2425 { , NN } ; 
  bool _cwc_2424 { , NN } ; 
  int{1} _cwc_2423 { , NN } ; 
  int _cwc_2422 { , NN } ; 
  int[1]{0} _cwc_2421 { , NN } ; 
  bool _cwc_2420 { , NN } ; 
  bool[12] _cwc_2419 { , NN } ; 
  bool _cwc_2418 { , NN } ; 
  bool _cwc_2417 { , NN } ; 
  int{4} _cwc_2416 { , NN } ; 
  int _cwc_2415 { , NN } ; 
  int[1]{0} _cwc_2414 { , NN } ; 
  bool _cwc_2413 { , NN } ; 
  bool[.] _cwc_2412 { , NN } ; 
  bool _cwc_2411 { , NN } ; 
  bool _cwc_2410 { , NN } ; 
  int{8} _cwc_2409 { , NN } ; 
  int _cwc_2408 { , NN } ; 
  int[1]{0} _cwc_2407 { , NN } ; 
  bool _cwc_2406 { , NN } ; 
  bool[.] _cwc_2405 { , NN } ; 
  bool _cwc_2404 { , NN } ; 
  bool _cwc_2403 { , NN } ; 
  int{12} _cwc_2402 { , NN } ; 
  int _cwc_2401 { , NN } ; 
  int[1]{0} _cwc_2400 { , NN } ; 
  bool _cwc_2399 { , NN } ; 
  bool[.] _cwc_2398 { , NN } ; 
  int[+] _cwc_2397 { , NN } ; 
  bool[.] _cwc_2396 { , NN } ; 
  int _cwc_2395 { , NN } ; 
  bool[+] _cwc_2394 { , NN } ; 
  bool _cwc_2393 { , NN } ; 
  bool _cwc_2392 { , NN } ; 
  int{12} _cwc_2391 { , NN } ; 
  int _cwc_2390 { , NN } ; 
  int[1]{0} _cwc_2389 { , NN } ; 
  bool _cwc_2388 { , NN } ; 
  bool _cwc_2387 { , NN } ; 
  int _cwc_2386 { , NN } ; 
  bool[+] _cwc_2385 { , NN } ; 
  int _cwc_2384 { , NN } ; 
  bool _cwc_2383 { , NN } ; 
  int _cwc_2382 { , NN } ; 
  int _cwc_2381 { , NN } ; 
  bool _cwc_2380 { , NN } ; 
  int _cwc_2379 { , NN } ; 
  bool _cwc_2378 { , NN } ; 
  bool _cwc_2377 { , NN } ; 
  int{1} _cwc_2376 { , NN } ; 
  int _cwc_2375 { , NN } ; 
  int[1]{0} _cwc_2374 { , NN } ; 
  bool _cwc_2373 { , NN } ; 
  bool[13] _cwc_2372 { , NN } ; 
  bool _cwc_2371 { , NN } ; 
  bool _cwc_2370 { , NN } ; 
  int{4} _cwc_2369 { , NN } ; 
  int _cwc_2368 { , NN } ; 
  int[1]{0} _cwc_2367 { , NN } ; 
  bool _cwc_2366 { , NN } ; 
  bool[.] _cwc_2365 { , NN } ; 
  bool _cwc_2364 { , NN } ; 
  bool _cwc_2363 { , NN } ; 
  int{8} _cwc_2362 { , NN } ; 
  int _cwc_2361 { , NN } ; 
  int[1]{0} _cwc_2360 { , NN } ; 
  bool _cwc_2359 { , NN } ; 
  bool[.] _cwc_2358 { , NN } ; 
  bool _cwc_2357 { , NN } ; 
  bool _cwc_2356 { , NN } ; 
  int{12} _cwc_2355 { , NN } ; 
  int _cwc_2354 { , NN } ; 
  int[1]{0} _cwc_2353 { , NN } ; 
  bool _cwc_2352 { , NN } ; 
  bool[.] _cwc_2351 { , NN } ; 
  int[+] _cwc_2350 { , NN } ; 
  bool[.] _cwc_2349 { , NN } ; 
  int _cwc_2348 { , NN } ; 
  bool[+] _cwc_2347 { , NN } ; 
  bool _cwc_2346 { , NN } ; 
  bool _cwc_2345 { , NN } ; 
  int{13} _cwc_2344 { , NN } ; 
  int _cwc_2343 { , NN } ; 
  int[1]{0} _cwc_2342 { , NN } ; 
  bool _cwc_2341 { , NN } ; 
  bool _cwc_2340 { , NN } ; 
  int _cwc_2339 { , NN } ; 
  bool[+] _cwc_2338 { , NN } ; 
  int _cwc_2337 { , NN } ; 
  bool _cwc_2336 { , NN } ; 
  int _cwc_2335 { , NN } ; 
  int _cwc_2334 { , NN } ; 
  bool _cwc_2333 { , NN } ; 
  int _cwc_2332 { , NN } ; 
  bool _cwc_2331 { , NN } ; 
  bool _cwc_2330 { , NN } ; 
  int{1} _cwc_2329 { , NN } ; 
  int _cwc_2328 { , NN } ; 
  int[1]{0} _cwc_2327 { , NN } ; 
  bool _cwc_2326 { , NN } ; 
  bool[14] _cwc_2325 { , NN } ; 
  bool _cwc_2324 { , NN } ; 
  bool _cwc_2323 { , NN } ; 
  int{4} _cwc_2322 { , NN } ; 
  int _cwc_2321 { , NN } ; 
  int[1]{0} _cwc_2320 { , NN } ; 
  bool _cwc_2319 { , NN } ; 
  bool[.] _cwc_2318 { , NN } ; 
  bool _cwc_2317 { , NN } ; 
  bool _cwc_2316 { , NN } ; 
  int{8} _cwc_2315 { , NN } ; 
  int _cwc_2314 { , NN } ; 
  int[1]{0} _cwc_2313 { , NN } ; 
  bool _cwc_2312 { , NN } ; 
  bool[.] _cwc_2311 { , NN } ; 
  bool _cwc_2310 { , NN } ; 
  bool _cwc_2309 { , NN } ; 
  int{12} _cwc_2308 { , NN } ; 
  int _cwc_2307 { , NN } ; 
  int[1]{0} _cwc_2306 { , NN } ; 
  bool _cwc_2305 { , NN } ; 
  bool[.] _cwc_2304 { , NN } ; 
  int[+] _cwc_2303 { , NN } ; 
  bool[.] _cwc_2302 { , NN } ; 
  int _cwc_2301 { , NN } ; 
  bool[+] _cwc_2300 { , NN } ; 
  int[+] _cwc_2299 { , NN } ; 
  bool _cwc_2298 { , NN } ; 
  int _cwc_2297 { , NN } ; 
  bool[+] _cwc_2296 { , NN } ; 
  int _cwc_2295 { , NN } ; 
  bool _cwc_2294 { , NN } ; 
  int _cwc_2293 { , NN } ; 
  int _cwc_2292 { , NN } ; 
  bool _cwc_2291 { , NN } ; 
  int _cwc_2290 { , NN } ; 
  bool _cwc_2289 { , NN } ; 
  bool _cwc_2288 { , NN } ; 
  int{1} _cwc_2287 { , NN } ; 
  int _cwc_2286 { , NN } ; 
  int[1]{0} _cwc_2285 { , NN } ; 
  bool _cwc_2284 { , NN } ; 
  bool[.] _cwc_2283 { , NN } ; 
  bool _cwc_2282 { , NN } ; 
  bool _cwc_2281 { , NN } ; 
  int{4} _cwc_2280 { , NN } ; 
  int _cwc_2279 { , NN } ; 
  int[1]{0} _cwc_2278 { , NN } ; 
  bool _cwc_2277 { , NN } ; 
  bool[.] _cwc_2276 { , NN } ; 
  bool _cwc_2275 { , NN } ; 
  bool _cwc_2274 { , NN } ; 
  int{8} _cwc_2273 { , NN } ; 
  int _cwc_2272 { , NN } ; 
  int[1]{0} _cwc_2271 { , NN } ; 
  bool _cwc_2270 { , NN } ; 
  bool[.] _cwc_2269 { , NN } ; 
  bool _cwc_2268 { , NN } ; 
  bool _cwc_2267 { , NN } ; 
  int{12} _cwc_2266 { , NN } ; 
  int _cwc_2265 { , NN } ; 
  int[1]{0} _cwc_2264 { , NN } ; 
  bool _cwc_2263 { , NN } ; 
  bool[.] _cwc_2262 { , NN } ; 
  bool _cwc_2261 { , NN } ; 
  bool _cwc_2260 { , NN } ; 
  int{14} _cwc_2259 { , NN } ; 
  int _cwc_2258 { , NN } ; 
  int[1]{0} _cwc_2257 { , NN } ; 
  bool _cwc_2256 { , NN } ; 
  bool[.] _cwc_2255 { , NN } ; 
  int[+] _cwc_2254 { , NN } ; 
  bool[.] _cwc_2253 { , NN } ; 
  int _cwc_2252 { , NN } ; 
  bool[+] _cwc_2251 { , NN } ; 
  int _cwc_2250 { , NN } ; 
  bool _cwc_2249 { , NN } ; 
  int _cwc_2248 { , NN } ; 
  bool[+] _cwc_2247 { , NN } ; 
  int _cwc_2246 { , NN } ; 
  bool _cwc_2245 { , NN } ; 
  int _cwc_2244 { , NN } ; 
  int _cwc_2243 { , NN } ; 
  bool _cwc_2242 { , NN } ; 
  int _cwc_2241 { , NN } ; 
  bool _cwc_2240 { , NN } ; 
  bool _cwc_2239 { , NN } ; 
  int{1} _cwc_2238 { , NN } ; 
  int _cwc_2237 { , NN } ; 
  int[1]{0} _cwc_2236 { , NN } ; 
  bool _cwc_2235 { , NN } ; 
  bool[+] _cwc_2234 { , NN } ; 
  bool _cwc_2233 { , NN } ; 
  bool _cwc_2232 { , NN } ; 
  int{4} _cwc_2231 { , NN } ; 
  int _cwc_2230 { , NN } ; 
  int[1]{0} _cwc_2229 { , NN } ; 
  bool _cwc_2228 { , NN } ; 
  bool[+] _cwc_2227 { , NN } ; 
  bool _cwc_2226 { , NN } ; 
  bool _cwc_2225 { , NN } ; 
  int{8} _cwc_2224 { , NN } ; 
  int _cwc_2223 { , NN } ; 
  int[1]{0} _cwc_2222 { , NN } ; 
  bool _cwc_2221 { , NN } ; 
  bool[+] _cwc_2220 { , NN } ; 
  bool _cwc_2219 { , NN } ; 
  bool _cwc_2218 { , NN } ; 
  int{12} _cwc_2217 { , NN } ; 
  int _cwc_2216 { , NN } ; 
  int[1]{0} _cwc_2215 { , NN } ; 
  bool _cwc_2214 { , NN } ; 
  bool[+] _cwc_2213 { , NN } ; 
  bool _cwc_2212 { , NN } ; 
  bool _cwc_2211 { , NN } ; 
  int{14} _cwc_2210 { , NN } ; 
  int _cwc_2209 { , NN } ; 
  int[1]{0} _cwc_2208 { , NN } ; 
  bool _cwc_2207 { , NN } ; 
  bool[+] _cwc_2206 { , NN } ; 
  int[+] _cwc_2205 { , NN } ; 
  bool[+] _cwc_2204 { , NN } ; 
  int _cwc_2203 { , NN } ; 
  bool[+] _cwc_2202 { , NN } ; 

  _cwc_2860 = _dim_A_( arr_a); 
  _cwc_2869 = 0; 
  _cwc_2870 = _eq_SxS_( _cwc_2860, _cwc_2869); 
  if (_cwc_2870) 
  { 
    _cwc_2865 = _dim_A_( arr_b); 
    _cwc_2867 = 0; 
    _cwc_2868 = _eq_SxS_( _cwc_2865, _cwc_2867); 
    if (_cwc_2868) 
    { 
      _cwc_2866 = ( arr_a ArrayTransform::++arr_b) ; 
      _cwc_2201 = _cwc_2866; 
    }
    else
    { 
      _cwc_2862 = _dim_A_( arr_b); 
      _cwc_2863 = 0; 
      _cwc_2864 = _gt_SxS_( _cwc_2862, _cwc_2863); 
      if (_cwc_2864) 
      { 
        _cwc_2861 = ( arr_a ArrayTransform::++arr_b) ; 
        _cwc_2201 = _cwc_2861; 
      }
      else
      { 
        _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
      }
    }
  }
  else
  { 
    _cwc_2857 = _dim_A_( arr_a); 
    _cwc_2858 = 0; 
    _cwc_2859 = _gt_SxS_( _cwc_2857, _cwc_2858); 
    if (_cwc_2859) 
    { 
      _cwc_2250 = _dim_A_( arr_a); 
      _cwc_2855 = 1; 
      _cwc_2856 = _eq_SxS_( _cwc_2250, _cwc_2855); 
      if (_cwc_2856) 
      { 
        _cwc_2299 = _shape_A_( arr_a); 
        _cwc_2849 = true; 
        _cwc_2852 = 1; 
        _cwc_2850 = [ 0 ]; 
        _cwc_2851 = _sel_VxA_( _cwc_2850, _cwc_2299); 
        _cwc_2853 = _eq_SxS_( _cwc_2851, _cwc_2852); 
        _cwc_2854 = _and_SxS_( _cwc_2853, _cwc_2849); 
        if (_cwc_2854) 
        { 
          _cwc_2845 = _dim_A_( arr_b); 
          _cwc_2847 = 0; 
          _cwc_2848 = _eq_SxS_( _cwc_2845, _cwc_2847); 
          if (_cwc_2848) 
          { 
            _cwc_2846 = ( arr_a ArrayTransform::++arr_b) ; 
            _cwc_2201 = _cwc_2846; 
          }
          else
          { 
            _cwc_2842 = _dim_A_( arr_b); 
            _cwc_2843 = 0; 
            _cwc_2844 = _gt_SxS_( _cwc_2842, _cwc_2843); 
            if (_cwc_2844) 
            { 
              _cwc_2823 = _dim_A_( arr_b); 
              _cwc_2840 = 1; 
              _cwc_2841 = _eq_SxS_( _cwc_2823, _cwc_2840); 
              if (_cwc_2841) 
              { 
                _cwc_2825 = _shape_A_( arr_b); 
                _cwc_2834 = true; 
                _cwc_2837 = 1; 
                _cwc_2835 = [ 0 ]; 
                _cwc_2836 = _sel_VxA_( _cwc_2835, _cwc_2825); 
                _cwc_2838 = _eq_SxS_( _cwc_2836, _cwc_2837); 
                _cwc_2839 = _and_SxS_( _cwc_2838, _cwc_2834); 
                if (_cwc_2839) 
                { 
                  _cwc_2833 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                  _cwc_2201 = _cwc_2833; 
                }
                else
                { 
                  _cwc_2827 = true; 
                  _cwc_2830 = 14; 
                  _cwc_2828 = [ 0 ]; 
                  _cwc_2829 = _sel_VxA_( _cwc_2828, _cwc_2825); 
                  _cwc_2831 = _eq_SxS_( _cwc_2829, _cwc_2830); 
                  _cwc_2832 = _and_SxS_( _cwc_2831, _cwc_2827); 
                  if (_cwc_2832) 
                  { 
                    _cwc_2826 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                    _cwc_2201 = _cwc_2826; 
                  }
                  else
                  { 
                    _cwc_2824 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                    _cwc_2201 = _cwc_2824; 
                  }
                }
              }
              else
              { 
                _cwc_2822 = ( arr_a ArrayTransform::++arr_b) ; 
                _cwc_2201 = _cwc_2822; 
              }
            }
            else
            { 
              _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
            }
          }
        }
        else
        { 
          _cwc_2816 = true; 
          _cwc_2819 = 2; 
          _cwc_2817 = [ 0 ]; 
          _cwc_2818 = _sel_VxA_( _cwc_2817, _cwc_2299); 
          _cwc_2820 = _eq_SxS_( _cwc_2818, _cwc_2819); 
          _cwc_2821 = _and_SxS_( _cwc_2820, _cwc_2816); 
          if (_cwc_2821) 
          { 
            _cwc_2812 = _dim_A_( arr_b); 
            _cwc_2814 = 0; 
            _cwc_2815 = _eq_SxS_( _cwc_2812, _cwc_2814); 
            if (_cwc_2815) 
            { 
              _cwc_2813 = ( arr_a ArrayTransform::++arr_b) ; 
              _cwc_2201 = _cwc_2813; 
            }
            else
            { 
              _cwc_2809 = _dim_A_( arr_b); 
              _cwc_2810 = 0; 
              _cwc_2811 = _gt_SxS_( _cwc_2809, _cwc_2810); 
              if (_cwc_2811) 
              { 
                _cwc_2797 = _dim_A_( arr_b); 
                _cwc_2807 = 1; 
                _cwc_2808 = _eq_SxS_( _cwc_2797, _cwc_2807); 
                if (_cwc_2808) 
                { 
                  _cwc_2799 = _shape_A_( arr_b); 
                  _cwc_2801 = true; 
                  _cwc_2804 = 1; 
                  _cwc_2802 = [ 0 ]; 
                  _cwc_2803 = _sel_VxA_( _cwc_2802, _cwc_2799); 
                  _cwc_2805 = _eq_SxS_( _cwc_2803, _cwc_2804); 
                  _cwc_2806 = _and_SxS_( _cwc_2805, _cwc_2801); 
                  if (_cwc_2806) 
                  { 
                    _cwc_2800 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                    _cwc_2201 = _cwc_2800; 
                  }
                  else
                  { 
                    _cwc_2798 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                    _cwc_2201 = _cwc_2798; 
                  }
                }
                else
                { 
                  _cwc_2796 = ( arr_a ArrayTransform::++arr_b) ; 
                  _cwc_2201 = _cwc_2796; 
                }
              }
              else
              { 
                _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
              }
            }
          }
          else
          { 
            _cwc_2790 = true; 
            _cwc_2793 = 3; 
            _cwc_2791 = [ 0 ]; 
            _cwc_2792 = _sel_VxA_( _cwc_2791, _cwc_2299); 
            _cwc_2794 = _eq_SxS_( _cwc_2792, _cwc_2793); 
            _cwc_2795 = _and_SxS_( _cwc_2794, _cwc_2790); 
            if (_cwc_2795) 
            { 
              _cwc_2786 = _dim_A_( arr_b); 
              _cwc_2788 = 0; 
              _cwc_2789 = _eq_SxS_( _cwc_2786, _cwc_2788); 
              if (_cwc_2789) 
              { 
                _cwc_2787 = ( arr_a ArrayTransform::++arr_b) ; 
                _cwc_2201 = _cwc_2787; 
              }
              else
              { 
                _cwc_2783 = _dim_A_( arr_b); 
                _cwc_2784 = 0; 
                _cwc_2785 = _gt_SxS_( _cwc_2783, _cwc_2784); 
                if (_cwc_2785) 
                { 
                  _cwc_2771 = _dim_A_( arr_b); 
                  _cwc_2781 = 1; 
                  _cwc_2782 = _eq_SxS_( _cwc_2771, _cwc_2781); 
                  if (_cwc_2782) 
                  { 
                    _cwc_2773 = _shape_A_( arr_b); 
                    _cwc_2775 = true; 
                    _cwc_2778 = 1; 
                    _cwc_2776 = [ 0 ]; 
                    _cwc_2777 = _sel_VxA_( _cwc_2776, _cwc_2773); 
                    _cwc_2779 = _eq_SxS_( _cwc_2777, _cwc_2778); 
                    _cwc_2780 = _and_SxS_( _cwc_2779, _cwc_2775); 
                    if (_cwc_2780) 
                    { 
                      _cwc_2774 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                      _cwc_2201 = _cwc_2774; 
                    }
                    else
                    { 
                      _cwc_2772 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                      _cwc_2201 = _cwc_2772; 
                    }
                  }
                  else
                  { 
                    _cwc_2770 = ( arr_a ArrayTransform::++arr_b) ; 
                    _cwc_2201 = _cwc_2770; 
                  }
                }
                else
                { 
                  _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                }
              }
            }
            else
            { 
              _cwc_2764 = true; 
              _cwc_2767 = 4; 
              _cwc_2765 = [ 0 ]; 
              _cwc_2766 = _sel_VxA_( _cwc_2765, _cwc_2299); 
              _cwc_2768 = _eq_SxS_( _cwc_2766, _cwc_2767); 
              _cwc_2769 = _and_SxS_( _cwc_2768, _cwc_2764); 
              if (_cwc_2769) 
              { 
                _cwc_2760 = _dim_A_( arr_b); 
                _cwc_2762 = 0; 
                _cwc_2763 = _eq_SxS_( _cwc_2760, _cwc_2762); 
                if (_cwc_2763) 
                { 
                  _cwc_2761 = ( arr_a ArrayTransform::++arr_b) ; 
                  _cwc_2201 = _cwc_2761; 
                }
                else
                { 
                  _cwc_2757 = _dim_A_( arr_b); 
                  _cwc_2758 = 0; 
                  _cwc_2759 = _gt_SxS_( _cwc_2757, _cwc_2758); 
                  if (_cwc_2759) 
                  { 
                    _cwc_2724 = _dim_A_( arr_b); 
                    _cwc_2755 = 1; 
                    _cwc_2756 = _eq_SxS_( _cwc_2724, _cwc_2755); 
                    if (_cwc_2756) 
                    { 
                      _cwc_2726 = _shape_A_( arr_b); 
                      _cwc_2749 = true; 
                      _cwc_2752 = 1; 
                      _cwc_2750 = [ 0 ]; 
                      _cwc_2751 = _sel_VxA_( _cwc_2750, _cwc_2726); 
                      _cwc_2753 = _eq_SxS_( _cwc_2751, _cwc_2752); 
                      _cwc_2754 = _and_SxS_( _cwc_2753, _cwc_2749); 
                      if (_cwc_2754) 
                      { 
                        _cwc_2748 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                        _cwc_2201 = _cwc_2748; 
                      }
                      else
                      { 
                        _cwc_2742 = true; 
                        _cwc_2745 = 4; 
                        _cwc_2743 = [ 0 ]; 
                        _cwc_2744 = _sel_VxA_( _cwc_2743, _cwc_2726); 
                        _cwc_2746 = _eq_SxS_( _cwc_2744, _cwc_2745); 
                        _cwc_2747 = _and_SxS_( _cwc_2746, _cwc_2742); 
                        if (_cwc_2747) 
                        { 
                          _cwc_2741 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                          _cwc_2201 = _cwc_2741; 
                        }
                        else
                        { 
                          _cwc_2735 = true; 
                          _cwc_2738 = 8; 
                          _cwc_2736 = [ 0 ]; 
                          _cwc_2737 = _sel_VxA_( _cwc_2736, _cwc_2726); 
                          _cwc_2739 = _eq_SxS_( _cwc_2737, _cwc_2738); 
                          _cwc_2740 = _and_SxS_( _cwc_2739, _cwc_2735); 
                          if (_cwc_2740) 
                          { 
                            _cwc_2734 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                            _cwc_2201 = _cwc_2734; 
                          }
                          else
                          { 
                            _cwc_2728 = true; 
                            _cwc_2731 = 12; 
                            _cwc_2729 = [ 0 ]; 
                            _cwc_2730 = _sel_VxA_( _cwc_2729, _cwc_2726); 
                            _cwc_2732 = _eq_SxS_( _cwc_2730, _cwc_2731); 
                            _cwc_2733 = _and_SxS_( _cwc_2732, _cwc_2728); 
                            if (_cwc_2733) 
                            { 
                              _cwc_2727 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                              _cwc_2201 = _cwc_2727; 
                            }
                            else
                            { 
                              _cwc_2725 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                              _cwc_2201 = _cwc_2725; 
                            }
                          }
                        }
                      }
                    }
                    else
                    { 
                      _cwc_2723 = ( arr_a ArrayTransform::++arr_b) ; 
                      _cwc_2201 = _cwc_2723; 
                    }
                  }
                  else
                  { 
                    _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                  }
                }
              }
              else
              { 
                _cwc_2717 = true; 
                _cwc_2720 = 5; 
                _cwc_2718 = [ 0 ]; 
                _cwc_2719 = _sel_VxA_( _cwc_2718, _cwc_2299); 
                _cwc_2721 = _eq_SxS_( _cwc_2719, _cwc_2720); 
                _cwc_2722 = _and_SxS_( _cwc_2721, _cwc_2717); 
                if (_cwc_2722) 
                { 
                  _cwc_2713 = _dim_A_( arr_b); 
                  _cwc_2715 = 0; 
                  _cwc_2716 = _eq_SxS_( _cwc_2713, _cwc_2715); 
                  if (_cwc_2716) 
                  { 
                    _cwc_2714 = ( arr_a ArrayTransform::++arr_b) ; 
                    _cwc_2201 = _cwc_2714; 
                  }
                  else
                  { 
                    _cwc_2710 = _dim_A_( arr_b); 
                    _cwc_2711 = 0; 
                    _cwc_2712 = _gt_SxS_( _cwc_2710, _cwc_2711); 
                    if (_cwc_2712) 
                    { 
                      _cwc_2677 = _dim_A_( arr_b); 
                      _cwc_2708 = 1; 
                      _cwc_2709 = _eq_SxS_( _cwc_2677, _cwc_2708); 
                      if (_cwc_2709) 
                      { 
                        _cwc_2679 = _shape_A_( arr_b); 
                        _cwc_2702 = true; 
                        _cwc_2705 = 1; 
                        _cwc_2703 = [ 0 ]; 
                        _cwc_2704 = _sel_VxA_( _cwc_2703, _cwc_2679); 
                        _cwc_2706 = _eq_SxS_( _cwc_2704, _cwc_2705); 
                        _cwc_2707 = _and_SxS_( _cwc_2706, _cwc_2702); 
                        if (_cwc_2707) 
                        { 
                          _cwc_2701 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                          _cwc_2201 = _cwc_2701; 
                        }
                        else
                        { 
                          _cwc_2695 = true; 
                          _cwc_2698 = 4; 
                          _cwc_2696 = [ 0 ]; 
                          _cwc_2697 = _sel_VxA_( _cwc_2696, _cwc_2679); 
                          _cwc_2699 = _eq_SxS_( _cwc_2697, _cwc_2698); 
                          _cwc_2700 = _and_SxS_( _cwc_2699, _cwc_2695); 
                          if (_cwc_2700) 
                          { 
                            _cwc_2694 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                            _cwc_2201 = _cwc_2694; 
                          }
                          else
                          { 
                            _cwc_2688 = true; 
                            _cwc_2691 = 8; 
                            _cwc_2689 = [ 0 ]; 
                            _cwc_2690 = _sel_VxA_( _cwc_2689, _cwc_2679); 
                            _cwc_2692 = _eq_SxS_( _cwc_2690, _cwc_2691); 
                            _cwc_2693 = _and_SxS_( _cwc_2692, _cwc_2688); 
                            if (_cwc_2693) 
                            { 
                              _cwc_2687 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                              _cwc_2201 = _cwc_2687; 
                            }
                            else
                            { 
                              _cwc_2681 = true; 
                              _cwc_2684 = 12; 
                              _cwc_2682 = [ 0 ]; 
                              _cwc_2683 = _sel_VxA_( _cwc_2682, _cwc_2679); 
                              _cwc_2685 = _eq_SxS_( _cwc_2683, _cwc_2684); 
                              _cwc_2686 = _and_SxS_( _cwc_2685, _cwc_2681); 
                              if (_cwc_2686) 
                              { 
                                _cwc_2680 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                _cwc_2201 = _cwc_2680; 
                              }
                              else
                              { 
                                _cwc_2678 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                _cwc_2201 = _cwc_2678; 
                              }
                            }
                          }
                        }
                      }
                      else
                      { 
                        _cwc_2676 = ( arr_a ArrayTransform::++arr_b) ; 
                        _cwc_2201 = _cwc_2676; 
                      }
                    }
                    else
                    { 
                      _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                    }
                  }
                }
                else
                { 
                  _cwc_2670 = true; 
                  _cwc_2673 = 6; 
                  _cwc_2671 = [ 0 ]; 
                  _cwc_2672 = _sel_VxA_( _cwc_2671, _cwc_2299); 
                  _cwc_2674 = _eq_SxS_( _cwc_2672, _cwc_2673); 
                  _cwc_2675 = _and_SxS_( _cwc_2674, _cwc_2670); 
                  if (_cwc_2675) 
                  { 
                    _cwc_2666 = _dim_A_( arr_b); 
                    _cwc_2668 = 0; 
                    _cwc_2669 = _eq_SxS_( _cwc_2666, _cwc_2668); 
                    if (_cwc_2669) 
                    { 
                      _cwc_2667 = ( arr_a ArrayTransform::++arr_b) ; 
                      _cwc_2201 = _cwc_2667; 
                    }
                    else
                    { 
                      _cwc_2663 = _dim_A_( arr_b); 
                      _cwc_2664 = 0; 
                      _cwc_2665 = _gt_SxS_( _cwc_2663, _cwc_2664); 
                      if (_cwc_2665) 
                      { 
                        _cwc_2630 = _dim_A_( arr_b); 
                        _cwc_2661 = 1; 
                        _cwc_2662 = _eq_SxS_( _cwc_2630, _cwc_2661); 
                        if (_cwc_2662) 
                        { 
                          _cwc_2632 = _shape_A_( arr_b); 
                          _cwc_2655 = true; 
                          _cwc_2658 = 1; 
                          _cwc_2656 = [ 0 ]; 
                          _cwc_2657 = _sel_VxA_( _cwc_2656, _cwc_2632); 
                          _cwc_2659 = _eq_SxS_( _cwc_2657, _cwc_2658); 
                          _cwc_2660 = _and_SxS_( _cwc_2659, _cwc_2655); 
                          if (_cwc_2660) 
                          { 
                            _cwc_2654 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                            _cwc_2201 = _cwc_2654; 
                          }
                          else
                          { 
                            _cwc_2648 = true; 
                            _cwc_2651 = 4; 
                            _cwc_2649 = [ 0 ]; 
                            _cwc_2650 = _sel_VxA_( _cwc_2649, _cwc_2632); 
                            _cwc_2652 = _eq_SxS_( _cwc_2650, _cwc_2651); 
                            _cwc_2653 = _and_SxS_( _cwc_2652, _cwc_2648); 
                            if (_cwc_2653) 
                            { 
                              _cwc_2647 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                              _cwc_2201 = _cwc_2647; 
                            }
                            else
                            { 
                              _cwc_2641 = true; 
                              _cwc_2644 = 8; 
                              _cwc_2642 = [ 0 ]; 
                              _cwc_2643 = _sel_VxA_( _cwc_2642, _cwc_2632); 
                              _cwc_2645 = _eq_SxS_( _cwc_2643, _cwc_2644); 
                              _cwc_2646 = _and_SxS_( _cwc_2645, _cwc_2641); 
                              if (_cwc_2646) 
                              { 
                                _cwc_2640 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                _cwc_2201 = _cwc_2640; 
                              }
                              else
                              { 
                                _cwc_2634 = true; 
                                _cwc_2637 = 12; 
                                _cwc_2635 = [ 0 ]; 
                                _cwc_2636 = _sel_VxA_( _cwc_2635, _cwc_2632); 
                                _cwc_2638 = _eq_SxS_( _cwc_2636, _cwc_2637); 
                                _cwc_2639 = _and_SxS_( _cwc_2638, _cwc_2634); 
                                if (_cwc_2639) 
                                { 
                                  _cwc_2633 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                  _cwc_2201 = _cwc_2633; 
                                }
                                else
                                { 
                                  _cwc_2631 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                  _cwc_2201 = _cwc_2631; 
                                }
                              }
                            }
                          }
                        }
                        else
                        { 
                          _cwc_2629 = ( arr_a ArrayTransform::++arr_b) ; 
                          _cwc_2201 = _cwc_2629; 
                        }
                      }
                      else
                      { 
                        _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                      }
                    }
                  }
                  else
                  { 
                    _cwc_2623 = true; 
                    _cwc_2626 = 7; 
                    _cwc_2624 = [ 0 ]; 
                    _cwc_2625 = _sel_VxA_( _cwc_2624, _cwc_2299); 
                    _cwc_2627 = _eq_SxS_( _cwc_2625, _cwc_2626); 
                    _cwc_2628 = _and_SxS_( _cwc_2627, _cwc_2623); 
                    if (_cwc_2628) 
                    { 
                      _cwc_2619 = _dim_A_( arr_b); 
                      _cwc_2621 = 0; 
                      _cwc_2622 = _eq_SxS_( _cwc_2619, _cwc_2621); 
                      if (_cwc_2622) 
                      { 
                        _cwc_2620 = ( arr_a ArrayTransform::++arr_b) ; 
                        _cwc_2201 = _cwc_2620; 
                      }
                      else
                      { 
                        _cwc_2616 = _dim_A_( arr_b); 
                        _cwc_2617 = 0; 
                        _cwc_2618 = _gt_SxS_( _cwc_2616, _cwc_2617); 
                        if (_cwc_2618) 
                        { 
                          _cwc_2583 = _dim_A_( arr_b); 
                          _cwc_2614 = 1; 
                          _cwc_2615 = _eq_SxS_( _cwc_2583, _cwc_2614); 
                          if (_cwc_2615) 
                          { 
                            _cwc_2585 = _shape_A_( arr_b); 
                            _cwc_2608 = true; 
                            _cwc_2611 = 1; 
                            _cwc_2609 = [ 0 ]; 
                            _cwc_2610 = _sel_VxA_( _cwc_2609, _cwc_2585); 
                            _cwc_2612 = _eq_SxS_( _cwc_2610, _cwc_2611); 
                            _cwc_2613 = _and_SxS_( _cwc_2612, _cwc_2608); 
                            if (_cwc_2613) 
                            { 
                              _cwc_2607 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                              _cwc_2201 = _cwc_2607; 
                            }
                            else
                            { 
                              _cwc_2601 = true; 
                              _cwc_2604 = 4; 
                              _cwc_2602 = [ 0 ]; 
                              _cwc_2603 = _sel_VxA_( _cwc_2602, _cwc_2585); 
                              _cwc_2605 = _eq_SxS_( _cwc_2603, _cwc_2604); 
                              _cwc_2606 = _and_SxS_( _cwc_2605, _cwc_2601); 
                              if (_cwc_2606) 
                              { 
                                _cwc_2600 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                _cwc_2201 = _cwc_2600; 
                              }
                              else
                              { 
                                _cwc_2594 = true; 
                                _cwc_2597 = 8; 
                                _cwc_2595 = [ 0 ]; 
                                _cwc_2596 = _sel_VxA_( _cwc_2595, _cwc_2585); 
                                _cwc_2598 = _eq_SxS_( _cwc_2596, _cwc_2597); 
                                _cwc_2599 = _and_SxS_( _cwc_2598, _cwc_2594); 
                                if (_cwc_2599) 
                                { 
                                  _cwc_2593 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                  _cwc_2201 = _cwc_2593; 
                                }
                                else
                                { 
                                  _cwc_2587 = true; 
                                  _cwc_2590 = 12; 
                                  _cwc_2588 = [ 0 ]; 
                                  _cwc_2589 = _sel_VxA_( _cwc_2588, _cwc_2585); 
                                  _cwc_2591 = _eq_SxS_( _cwc_2589, _cwc_2590); 
                                  _cwc_2592 = _and_SxS_( _cwc_2591, _cwc_2587); 
                                  if (_cwc_2592) 
                                  { 
                                    _cwc_2586 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                    _cwc_2201 = _cwc_2586; 
                                  }
                                  else
                                  { 
                                    _cwc_2584 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                    _cwc_2201 = _cwc_2584; 
                                  }
                                }
                              }
                            }
                          }
                          else
                          { 
                            _cwc_2582 = ( arr_a ArrayTransform::++arr_b) ; 
                            _cwc_2201 = _cwc_2582; 
                          }
                        }
                        else
                        { 
                          _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                        }
                      }
                    }
                    else
                    { 
                      _cwc_2576 = true; 
                      _cwc_2579 = 8; 
                      _cwc_2577 = [ 0 ]; 
                      _cwc_2578 = _sel_VxA_( _cwc_2577, _cwc_2299); 
                      _cwc_2580 = _eq_SxS_( _cwc_2578, _cwc_2579); 
                      _cwc_2581 = _and_SxS_( _cwc_2580, _cwc_2576); 
                      if (_cwc_2581) 
                      { 
                        _cwc_2572 = _dim_A_( arr_b); 
                        _cwc_2574 = 0; 
                        _cwc_2575 = _eq_SxS_( _cwc_2572, _cwc_2574); 
                        if (_cwc_2575) 
                        { 
                          _cwc_2573 = ( arr_a ArrayTransform::++arr_b) ; 
                          _cwc_2201 = _cwc_2573; 
                        }
                        else
                        { 
                          _cwc_2569 = _dim_A_( arr_b); 
                          _cwc_2570 = 0; 
                          _cwc_2571 = _gt_SxS_( _cwc_2569, _cwc_2570); 
                          if (_cwc_2571) 
                          { 
                            _cwc_2536 = _dim_A_( arr_b); 
                            _cwc_2567 = 1; 
                            _cwc_2568 = _eq_SxS_( _cwc_2536, _cwc_2567); 
                            if (_cwc_2568) 
                            { 
                              _cwc_2538 = _shape_A_( arr_b); 
                              _cwc_2561 = true; 
                              _cwc_2564 = 1; 
                              _cwc_2562 = [ 0 ]; 
                              _cwc_2563 = _sel_VxA_( _cwc_2562, _cwc_2538); 
                              _cwc_2565 = _eq_SxS_( _cwc_2563, _cwc_2564); 
                              _cwc_2566 = _and_SxS_( _cwc_2565, _cwc_2561); 
                              if (_cwc_2566) 
                              { 
                                _cwc_2560 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                _cwc_2201 = _cwc_2560; 
                              }
                              else
                              { 
                                _cwc_2554 = true; 
                                _cwc_2557 = 4; 
                                _cwc_2555 = [ 0 ]; 
                                _cwc_2556 = _sel_VxA_( _cwc_2555, _cwc_2538); 
                                _cwc_2558 = _eq_SxS_( _cwc_2556, _cwc_2557); 
                                _cwc_2559 = _and_SxS_( _cwc_2558, _cwc_2554); 
                                if (_cwc_2559) 
                                { 
                                  _cwc_2553 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                  _cwc_2201 = _cwc_2553; 
                                }
                                else
                                { 
                                  _cwc_2547 = true; 
                                  _cwc_2550 = 8; 
                                  _cwc_2548 = [ 0 ]; 
                                  _cwc_2549 = _sel_VxA_( _cwc_2548, _cwc_2538); 
                                  _cwc_2551 = _eq_SxS_( _cwc_2549, _cwc_2550); 
                                  _cwc_2552 = _and_SxS_( _cwc_2551, _cwc_2547); 
                                  if (_cwc_2552) 
                                  { 
                                    _cwc_2546 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                    _cwc_2201 = _cwc_2546; 
                                  }
                                  else
                                  { 
                                    _cwc_2540 = true; 
                                    _cwc_2543 = 12; 
                                    _cwc_2541 = [ 0 ]; 
                                    _cwc_2542 = _sel_VxA_( _cwc_2541, _cwc_2538); 
                                    _cwc_2544 = _eq_SxS_( _cwc_2542, _cwc_2543); 
                                    _cwc_2545 = _and_SxS_( _cwc_2544, _cwc_2540); 
                                    if (_cwc_2545) 
                                    { 
                                      _cwc_2539 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                      _cwc_2201 = _cwc_2539; 
                                    }
                                    else
                                    { 
                                      _cwc_2537 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                      _cwc_2201 = _cwc_2537; 
                                    }
                                  }
                                }
                              }
                            }
                            else
                            { 
                              _cwc_2535 = ( arr_a ArrayTransform::++arr_b) ; 
                              _cwc_2201 = _cwc_2535; 
                            }
                          }
                          else
                          { 
                            _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                          }
                        }
                      }
                      else
                      { 
                        _cwc_2529 = true; 
                        _cwc_2532 = 9; 
                        _cwc_2530 = [ 0 ]; 
                        _cwc_2531 = _sel_VxA_( _cwc_2530, _cwc_2299); 
                        _cwc_2533 = _eq_SxS_( _cwc_2531, _cwc_2532); 
                        _cwc_2534 = _and_SxS_( _cwc_2533, _cwc_2529); 
                        if (_cwc_2534) 
                        { 
                          _cwc_2525 = _dim_A_( arr_b); 
                          _cwc_2527 = 0; 
                          _cwc_2528 = _eq_SxS_( _cwc_2525, _cwc_2527); 
                          if (_cwc_2528) 
                          { 
                            _cwc_2526 = ( arr_a ArrayTransform::++arr_b) ; 
                            _cwc_2201 = _cwc_2526; 
                          }
                          else
                          { 
                            _cwc_2522 = _dim_A_( arr_b); 
                            _cwc_2523 = 0; 
                            _cwc_2524 = _gt_SxS_( _cwc_2522, _cwc_2523); 
                            if (_cwc_2524) 
                            { 
                              _cwc_2489 = _dim_A_( arr_b); 
                              _cwc_2520 = 1; 
                              _cwc_2521 = _eq_SxS_( _cwc_2489, _cwc_2520); 
                              if (_cwc_2521) 
                              { 
                                _cwc_2491 = _shape_A_( arr_b); 
                                _cwc_2514 = true; 
                                _cwc_2517 = 1; 
                                _cwc_2515 = [ 0 ]; 
                                _cwc_2516 = _sel_VxA_( _cwc_2515, _cwc_2491); 
                                _cwc_2518 = _eq_SxS_( _cwc_2516, _cwc_2517); 
                                _cwc_2519 = _and_SxS_( _cwc_2518, _cwc_2514); 
                                if (_cwc_2519) 
                                { 
                                  _cwc_2513 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                  _cwc_2201 = _cwc_2513; 
                                }
                                else
                                { 
                                  _cwc_2507 = true; 
                                  _cwc_2510 = 4; 
                                  _cwc_2508 = [ 0 ]; 
                                  _cwc_2509 = _sel_VxA_( _cwc_2508, _cwc_2491); 
                                  _cwc_2511 = _eq_SxS_( _cwc_2509, _cwc_2510); 
                                  _cwc_2512 = _and_SxS_( _cwc_2511, _cwc_2507); 
                                  if (_cwc_2512) 
                                  { 
                                    _cwc_2506 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                    _cwc_2201 = _cwc_2506; 
                                  }
                                  else
                                  { 
                                    _cwc_2500 = true; 
                                    _cwc_2503 = 8; 
                                    _cwc_2501 = [ 0 ]; 
                                    _cwc_2502 = _sel_VxA_( _cwc_2501, _cwc_2491); 
                                    _cwc_2504 = _eq_SxS_( _cwc_2502, _cwc_2503); 
                                    _cwc_2505 = _and_SxS_( _cwc_2504, _cwc_2500); 
                                    if (_cwc_2505) 
                                    { 
                                      _cwc_2499 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                      _cwc_2201 = _cwc_2499; 
                                    }
                                    else
                                    { 
                                      _cwc_2493 = true; 
                                      _cwc_2496 = 12; 
                                      _cwc_2494 = [ 0 ]; 
                                      _cwc_2495 = _sel_VxA_( _cwc_2494, _cwc_2491); 
                                      _cwc_2497 = _eq_SxS_( _cwc_2495, _cwc_2496); 
                                      _cwc_2498 = _and_SxS_( _cwc_2497, _cwc_2493); 
                                      if (_cwc_2498) 
                                      { 
                                        _cwc_2492 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                        _cwc_2201 = _cwc_2492; 
                                      }
                                      else
                                      { 
                                        _cwc_2490 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                        _cwc_2201 = _cwc_2490; 
                                      }
                                    }
                                  }
                                }
                              }
                              else
                              { 
                                _cwc_2488 = ( arr_a ArrayTransform::++arr_b) ; 
                                _cwc_2201 = _cwc_2488; 
                              }
                            }
                            else
                            { 
                              _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                            }
                          }
                        }
                        else
                        { 
                          _cwc_2482 = true; 
                          _cwc_2485 = 10; 
                          _cwc_2483 = [ 0 ]; 
                          _cwc_2484 = _sel_VxA_( _cwc_2483, _cwc_2299); 
                          _cwc_2486 = _eq_SxS_( _cwc_2484, _cwc_2485); 
                          _cwc_2487 = _and_SxS_( _cwc_2486, _cwc_2482); 
                          if (_cwc_2487) 
                          { 
                            _cwc_2478 = _dim_A_( arr_b); 
                            _cwc_2480 = 0; 
                            _cwc_2481 = _eq_SxS_( _cwc_2478, _cwc_2480); 
                            if (_cwc_2481) 
                            { 
                              _cwc_2479 = ( arr_a ArrayTransform::++arr_b) ; 
                              _cwc_2201 = _cwc_2479; 
                            }
                            else
                            { 
                              _cwc_2475 = _dim_A_( arr_b); 
                              _cwc_2476 = 0; 
                              _cwc_2477 = _gt_SxS_( _cwc_2475, _cwc_2476); 
                              if (_cwc_2477) 
                              { 
                                _cwc_2442 = _dim_A_( arr_b); 
                                _cwc_2473 = 1; 
                                _cwc_2474 = _eq_SxS_( _cwc_2442, _cwc_2473); 
                                if (_cwc_2474) 
                                { 
                                  _cwc_2444 = _shape_A_( arr_b); 
                                  _cwc_2467 = true; 
                                  _cwc_2470 = 1; 
                                  _cwc_2468 = [ 0 ]; 
                                  _cwc_2469 = _sel_VxA_( _cwc_2468, _cwc_2444); 
                                  _cwc_2471 = _eq_SxS_( _cwc_2469, _cwc_2470); 
                                  _cwc_2472 = _and_SxS_( _cwc_2471, _cwc_2467); 
                                  if (_cwc_2472) 
                                  { 
                                    _cwc_2466 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                    _cwc_2201 = _cwc_2466; 
                                  }
                                  else
                                  { 
                                    _cwc_2460 = true; 
                                    _cwc_2463 = 4; 
                                    _cwc_2461 = [ 0 ]; 
                                    _cwc_2462 = _sel_VxA_( _cwc_2461, _cwc_2444); 
                                    _cwc_2464 = _eq_SxS_( _cwc_2462, _cwc_2463); 
                                    _cwc_2465 = _and_SxS_( _cwc_2464, _cwc_2460); 
                                    if (_cwc_2465) 
                                    { 
                                      _cwc_2459 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                      _cwc_2201 = _cwc_2459; 
                                    }
                                    else
                                    { 
                                      _cwc_2453 = true; 
                                      _cwc_2456 = 8; 
                                      _cwc_2454 = [ 0 ]; 
                                      _cwc_2455 = _sel_VxA_( _cwc_2454, _cwc_2444); 
                                      _cwc_2457 = _eq_SxS_( _cwc_2455, _cwc_2456); 
                                      _cwc_2458 = _and_SxS_( _cwc_2457, _cwc_2453); 
                                      if (_cwc_2458) 
                                      { 
                                        _cwc_2452 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                        _cwc_2201 = _cwc_2452; 
                                      }
                                      else
                                      { 
                                        _cwc_2446 = true; 
                                        _cwc_2449 = 12; 
                                        _cwc_2447 = [ 0 ]; 
                                        _cwc_2448 = _sel_VxA_( _cwc_2447, _cwc_2444); 
                                        _cwc_2450 = _eq_SxS_( _cwc_2448, _cwc_2449); 
                                        _cwc_2451 = _and_SxS_( _cwc_2450, _cwc_2446); 
                                        if (_cwc_2451) 
                                        { 
                                          _cwc_2445 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_2201 = _cwc_2445; 
                                        }
                                        else
                                        { 
                                          _cwc_2443 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_2201 = _cwc_2443; 
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                { 
                                  _cwc_2441 = ( arr_a ArrayTransform::++arr_b) ; 
                                  _cwc_2201 = _cwc_2441; 
                                }
                              }
                              else
                              { 
                                _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                              }
                            }
                          }
                          else
                          { 
                            _cwc_2435 = true; 
                            _cwc_2438 = 11; 
                            _cwc_2436 = [ 0 ]; 
                            _cwc_2437 = _sel_VxA_( _cwc_2436, _cwc_2299); 
                            _cwc_2439 = _eq_SxS_( _cwc_2437, _cwc_2438); 
                            _cwc_2440 = _and_SxS_( _cwc_2439, _cwc_2435); 
                            if (_cwc_2440) 
                            { 
                              _cwc_2431 = _dim_A_( arr_b); 
                              _cwc_2433 = 0; 
                              _cwc_2434 = _eq_SxS_( _cwc_2431, _cwc_2433); 
                              if (_cwc_2434) 
                              { 
                                _cwc_2432 = ( arr_a ArrayTransform::++arr_b) ; 
                                _cwc_2201 = _cwc_2432; 
                              }
                              else
                              { 
                                _cwc_2428 = _dim_A_( arr_b); 
                                _cwc_2429 = 0; 
                                _cwc_2430 = _gt_SxS_( _cwc_2428, _cwc_2429); 
                                if (_cwc_2430) 
                                { 
                                  _cwc_2395 = _dim_A_( arr_b); 
                                  _cwc_2426 = 1; 
                                  _cwc_2427 = _eq_SxS_( _cwc_2395, _cwc_2426); 
                                  if (_cwc_2427) 
                                  { 
                                    _cwc_2397 = _shape_A_( arr_b); 
                                    _cwc_2420 = true; 
                                    _cwc_2423 = 1; 
                                    _cwc_2421 = [ 0 ]; 
                                    _cwc_2422 = _sel_VxA_( _cwc_2421, _cwc_2397); 
                                    _cwc_2424 = _eq_SxS_( _cwc_2422, _cwc_2423); 
                                    _cwc_2425 = _and_SxS_( _cwc_2424, _cwc_2420); 
                                    if (_cwc_2425) 
                                    { 
                                      _cwc_2419 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                      _cwc_2201 = _cwc_2419; 
                                    }
                                    else
                                    { 
                                      _cwc_2413 = true; 
                                      _cwc_2416 = 4; 
                                      _cwc_2414 = [ 0 ]; 
                                      _cwc_2415 = _sel_VxA_( _cwc_2414, _cwc_2397); 
                                      _cwc_2417 = _eq_SxS_( _cwc_2415, _cwc_2416); 
                                      _cwc_2418 = _and_SxS_( _cwc_2417, _cwc_2413); 
                                      if (_cwc_2418) 
                                      { 
                                        _cwc_2412 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                        _cwc_2201 = _cwc_2412; 
                                      }
                                      else
                                      { 
                                        _cwc_2406 = true; 
                                        _cwc_2409 = 8; 
                                        _cwc_2407 = [ 0 ]; 
                                        _cwc_2408 = _sel_VxA_( _cwc_2407, _cwc_2397); 
                                        _cwc_2410 = _eq_SxS_( _cwc_2408, _cwc_2409); 
                                        _cwc_2411 = _and_SxS_( _cwc_2410, _cwc_2406); 
                                        if (_cwc_2411) 
                                        { 
                                          _cwc_2405 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_2201 = _cwc_2405; 
                                        }
                                        else
                                        { 
                                          _cwc_2399 = true; 
                                          _cwc_2402 = 12; 
                                          _cwc_2400 = [ 0 ]; 
                                          _cwc_2401 = _sel_VxA_( _cwc_2400, _cwc_2397); 
                                          _cwc_2403 = _eq_SxS_( _cwc_2401, _cwc_2402); 
                                          _cwc_2404 = _and_SxS_( _cwc_2403, _cwc_2399); 
                                          if (_cwc_2404) 
                                          { 
                                            _cwc_2398 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                            _cwc_2201 = _cwc_2398; 
                                          }
                                          else
                                          { 
                                            _cwc_2396 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                            _cwc_2201 = _cwc_2396; 
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else
                                  { 
                                    _cwc_2394 = ( arr_a ArrayTransform::++arr_b) ; 
                                    _cwc_2201 = _cwc_2394; 
                                  }
                                }
                                else
                                { 
                                  _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                }
                              }
                            }
                            else
                            { 
                              _cwc_2388 = true; 
                              _cwc_2391 = 12; 
                              _cwc_2389 = [ 0 ]; 
                              _cwc_2390 = _sel_VxA_( _cwc_2389, _cwc_2299); 
                              _cwc_2392 = _eq_SxS_( _cwc_2390, _cwc_2391); 
                              _cwc_2393 = _and_SxS_( _cwc_2392, _cwc_2388); 
                              if (_cwc_2393) 
                              { 
                                _cwc_2384 = _dim_A_( arr_b); 
                                _cwc_2386 = 0; 
                                _cwc_2387 = _eq_SxS_( _cwc_2384, _cwc_2386); 
                                if (_cwc_2387) 
                                { 
                                  _cwc_2385 = ( arr_a ArrayTransform::++arr_b) ; 
                                  _cwc_2201 = _cwc_2385; 
                                }
                                else
                                { 
                                  _cwc_2381 = _dim_A_( arr_b); 
                                  _cwc_2382 = 0; 
                                  _cwc_2383 = _gt_SxS_( _cwc_2381, _cwc_2382); 
                                  if (_cwc_2383) 
                                  { 
                                    _cwc_2348 = _dim_A_( arr_b); 
                                    _cwc_2379 = 1; 
                                    _cwc_2380 = _eq_SxS_( _cwc_2348, _cwc_2379); 
                                    if (_cwc_2380) 
                                    { 
                                      _cwc_2350 = _shape_A_( arr_b); 
                                      _cwc_2373 = true; 
                                      _cwc_2376 = 1; 
                                      _cwc_2374 = [ 0 ]; 
                                      _cwc_2375 = _sel_VxA_( _cwc_2374, _cwc_2350); 
                                      _cwc_2377 = _eq_SxS_( _cwc_2375, _cwc_2376); 
                                      _cwc_2378 = _and_SxS_( _cwc_2377, _cwc_2373); 
                                      if (_cwc_2378) 
                                      { 
                                        _cwc_2372 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                        _cwc_2201 = _cwc_2372; 
                                      }
                                      else
                                      { 
                                        _cwc_2366 = true; 
                                        _cwc_2369 = 4; 
                                        _cwc_2367 = [ 0 ]; 
                                        _cwc_2368 = _sel_VxA_( _cwc_2367, _cwc_2350); 
                                        _cwc_2370 = _eq_SxS_( _cwc_2368, _cwc_2369); 
                                        _cwc_2371 = _and_SxS_( _cwc_2370, _cwc_2366); 
                                        if (_cwc_2371) 
                                        { 
                                          _cwc_2365 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_2201 = _cwc_2365; 
                                        }
                                        else
                                        { 
                                          _cwc_2359 = true; 
                                          _cwc_2362 = 8; 
                                          _cwc_2360 = [ 0 ]; 
                                          _cwc_2361 = _sel_VxA_( _cwc_2360, _cwc_2350); 
                                          _cwc_2363 = _eq_SxS_( _cwc_2361, _cwc_2362); 
                                          _cwc_2364 = _and_SxS_( _cwc_2363, _cwc_2359); 
                                          if (_cwc_2364) 
                                          { 
                                            _cwc_2358 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                            _cwc_2201 = _cwc_2358; 
                                          }
                                          else
                                          { 
                                            _cwc_2352 = true; 
                                            _cwc_2355 = 12; 
                                            _cwc_2353 = [ 0 ]; 
                                            _cwc_2354 = _sel_VxA_( _cwc_2353, _cwc_2350); 
                                            _cwc_2356 = _eq_SxS_( _cwc_2354, _cwc_2355); 
                                            _cwc_2357 = _and_SxS_( _cwc_2356, _cwc_2352); 
                                            if (_cwc_2357) 
                                            { 
                                              _cwc_2351 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                              _cwc_2201 = _cwc_2351; 
                                            }
                                            else
                                            { 
                                              _cwc_2349 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                              _cwc_2201 = _cwc_2349; 
                                            }
                                          }
                                        }
                                      }
                                    }
                                    else
                                    { 
                                      _cwc_2347 = ( arr_a ArrayTransform::++arr_b) ; 
                                      _cwc_2201 = _cwc_2347; 
                                    }
                                  }
                                  else
                                  { 
                                    _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                  }
                                }
                              }
                              else
                              { 
                                _cwc_2341 = true; 
                                _cwc_2344 = 13; 
                                _cwc_2342 = [ 0 ]; 
                                _cwc_2343 = _sel_VxA_( _cwc_2342, _cwc_2299); 
                                _cwc_2345 = _eq_SxS_( _cwc_2343, _cwc_2344); 
                                _cwc_2346 = _and_SxS_( _cwc_2345, _cwc_2341); 
                                if (_cwc_2346) 
                                { 
                                  _cwc_2337 = _dim_A_( arr_b); 
                                  _cwc_2339 = 0; 
                                  _cwc_2340 = _eq_SxS_( _cwc_2337, _cwc_2339); 
                                  if (_cwc_2340) 
                                  { 
                                    _cwc_2338 = ( arr_a ArrayTransform::++arr_b) ; 
                                    _cwc_2201 = _cwc_2338; 
                                  }
                                  else
                                  { 
                                    _cwc_2334 = _dim_A_( arr_b); 
                                    _cwc_2335 = 0; 
                                    _cwc_2336 = _gt_SxS_( _cwc_2334, _cwc_2335); 
                                    if (_cwc_2336) 
                                    { 
                                      _cwc_2301 = _dim_A_( arr_b); 
                                      _cwc_2332 = 1; 
                                      _cwc_2333 = _eq_SxS_( _cwc_2301, _cwc_2332); 
                                      if (_cwc_2333) 
                                      { 
                                        _cwc_2303 = _shape_A_( arr_b); 
                                        _cwc_2326 = true; 
                                        _cwc_2329 = 1; 
                                        _cwc_2327 = [ 0 ]; 
                                        _cwc_2328 = _sel_VxA_( _cwc_2327, _cwc_2303); 
                                        _cwc_2330 = _eq_SxS_( _cwc_2328, _cwc_2329); 
                                        _cwc_2331 = _and_SxS_( _cwc_2330, _cwc_2326); 
                                        if (_cwc_2331) 
                                        { 
                                          _cwc_2325 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_2201 = _cwc_2325; 
                                        }
                                        else
                                        { 
                                          _cwc_2319 = true; 
                                          _cwc_2322 = 4; 
                                          _cwc_2320 = [ 0 ]; 
                                          _cwc_2321 = _sel_VxA_( _cwc_2320, _cwc_2303); 
                                          _cwc_2323 = _eq_SxS_( _cwc_2321, _cwc_2322); 
                                          _cwc_2324 = _and_SxS_( _cwc_2323, _cwc_2319); 
                                          if (_cwc_2324) 
                                          { 
                                            _cwc_2318 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                            _cwc_2201 = _cwc_2318; 
                                          }
                                          else
                                          { 
                                            _cwc_2312 = true; 
                                            _cwc_2315 = 8; 
                                            _cwc_2313 = [ 0 ]; 
                                            _cwc_2314 = _sel_VxA_( _cwc_2313, _cwc_2303); 
                                            _cwc_2316 = _eq_SxS_( _cwc_2314, _cwc_2315); 
                                            _cwc_2317 = _and_SxS_( _cwc_2316, _cwc_2312); 
                                            if (_cwc_2317) 
                                            { 
                                              _cwc_2311 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                              _cwc_2201 = _cwc_2311; 
                                            }
                                            else
                                            { 
                                              _cwc_2305 = true; 
                                              _cwc_2308 = 12; 
                                              _cwc_2306 = [ 0 ]; 
                                              _cwc_2307 = _sel_VxA_( _cwc_2306, _cwc_2303); 
                                              _cwc_2309 = _eq_SxS_( _cwc_2307, _cwc_2308); 
                                              _cwc_2310 = _and_SxS_( _cwc_2309, _cwc_2305); 
                                              if (_cwc_2310) 
                                              { 
                                                _cwc_2304 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                _cwc_2201 = _cwc_2304; 
                                              }
                                              else
                                              { 
                                                _cwc_2302 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                _cwc_2201 = _cwc_2302; 
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      { 
                                        _cwc_2300 = ( arr_a ArrayTransform::++arr_b) ; 
                                        _cwc_2201 = _cwc_2300; 
                                      }
                                    }
                                    else
                                    { 
                                      _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                    }
                                  }
                                }
                                else
                                { 
                                  _cwc_2295 = _dim_A_( arr_b); 
                                  _cwc_2297 = 0; 
                                  _cwc_2298 = _eq_SxS_( _cwc_2295, _cwc_2297); 
                                  if (_cwc_2298) 
                                  { 
                                    _cwc_2296 = ( arr_a ArrayTransform::++arr_b) ; 
                                    _cwc_2201 = _cwc_2296; 
                                  }
                                  else
                                  { 
                                    _cwc_2292 = _dim_A_( arr_b); 
                                    _cwc_2293 = 0; 
                                    _cwc_2294 = _gt_SxS_( _cwc_2292, _cwc_2293); 
                                    if (_cwc_2294) 
                                    { 
                                      _cwc_2252 = _dim_A_( arr_b); 
                                      _cwc_2290 = 1; 
                                      _cwc_2291 = _eq_SxS_( _cwc_2252, _cwc_2290); 
                                      if (_cwc_2291) 
                                      { 
                                        _cwc_2254 = _shape_A_( arr_b); 
                                        _cwc_2284 = true; 
                                        _cwc_2287 = 1; 
                                        _cwc_2285 = [ 0 ]; 
                                        _cwc_2286 = _sel_VxA_( _cwc_2285, _cwc_2254); 
                                        _cwc_2288 = _eq_SxS_( _cwc_2286, _cwc_2287); 
                                        _cwc_2289 = _and_SxS_( _cwc_2288, _cwc_2284); 
                                        if (_cwc_2289) 
                                        { 
                                          _cwc_2283 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_2201 = _cwc_2283; 
                                        }
                                        else
                                        { 
                                          _cwc_2277 = true; 
                                          _cwc_2280 = 4; 
                                          _cwc_2278 = [ 0 ]; 
                                          _cwc_2279 = _sel_VxA_( _cwc_2278, _cwc_2254); 
                                          _cwc_2281 = _eq_SxS_( _cwc_2279, _cwc_2280); 
                                          _cwc_2282 = _and_SxS_( _cwc_2281, _cwc_2277); 
                                          if (_cwc_2282) 
                                          { 
                                            _cwc_2276 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                            _cwc_2201 = _cwc_2276; 
                                          }
                                          else
                                          { 
                                            _cwc_2270 = true; 
                                            _cwc_2273 = 8; 
                                            _cwc_2271 = [ 0 ]; 
                                            _cwc_2272 = _sel_VxA_( _cwc_2271, _cwc_2254); 
                                            _cwc_2274 = _eq_SxS_( _cwc_2272, _cwc_2273); 
                                            _cwc_2275 = _and_SxS_( _cwc_2274, _cwc_2270); 
                                            if (_cwc_2275) 
                                            { 
                                              _cwc_2269 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                              _cwc_2201 = _cwc_2269; 
                                            }
                                            else
                                            { 
                                              _cwc_2263 = true; 
                                              _cwc_2266 = 12; 
                                              _cwc_2264 = [ 0 ]; 
                                              _cwc_2265 = _sel_VxA_( _cwc_2264, _cwc_2254); 
                                              _cwc_2267 = _eq_SxS_( _cwc_2265, _cwc_2266); 
                                              _cwc_2268 = _and_SxS_( _cwc_2267, _cwc_2263); 
                                              if (_cwc_2268) 
                                              { 
                                                _cwc_2262 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                _cwc_2201 = _cwc_2262; 
                                              }
                                              else
                                              { 
                                                _cwc_2256 = true; 
                                                _cwc_2259 = 14; 
                                                _cwc_2257 = [ 0 ]; 
                                                _cwc_2258 = _sel_VxA_( _cwc_2257, _cwc_2254); 
                                                _cwc_2260 = _eq_SxS_( _cwc_2258, _cwc_2259); 
                                                _cwc_2261 = _and_SxS_( _cwc_2260, _cwc_2256); 
                                                if (_cwc_2261) 
                                                { 
                                                  _cwc_2255 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                  _cwc_2201 = _cwc_2255; 
                                                }
                                                else
                                                { 
                                                  _cwc_2253 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                  _cwc_2201 = _cwc_2253; 
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      { 
                                        _cwc_2251 = ( arr_a ArrayTransform::++arr_b) ; 
                                        _cwc_2201 = _cwc_2251; 
                                      }
                                    }
                                    else
                                    { 
                                      _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      { 
        _cwc_2246 = _dim_A_( arr_b); 
        _cwc_2248 = 0; 
        _cwc_2249 = _eq_SxS_( _cwc_2246, _cwc_2248); 
        if (_cwc_2249) 
        { 
          _cwc_2247 = ( arr_a ArrayTransform::++arr_b) ; 
          _cwc_2201 = _cwc_2247; 
        }
        else
        { 
          _cwc_2243 = _dim_A_( arr_b); 
          _cwc_2244 = 0; 
          _cwc_2245 = _gt_SxS_( _cwc_2243, _cwc_2244); 
          if (_cwc_2245) 
          { 
            _cwc_2203 = _dim_A_( arr_b); 
            _cwc_2241 = 1; 
            _cwc_2242 = _eq_SxS_( _cwc_2203, _cwc_2241); 
            if (_cwc_2242) 
            { 
              _cwc_2205 = _shape_A_( arr_b); 
              _cwc_2235 = true; 
              _cwc_2238 = 1; 
              _cwc_2236 = [ 0 ]; 
              _cwc_2237 = _sel_VxA_( _cwc_2236, _cwc_2205); 
              _cwc_2239 = _eq_SxS_( _cwc_2237, _cwc_2238); 
              _cwc_2240 = _and_SxS_( _cwc_2239, _cwc_2235); 
              if (_cwc_2240) 
              { 
                _cwc_2234 = ( arr_a ArrayTransform::++arr_b) ; 
                _cwc_2201 = _cwc_2234; 
              }
              else
              { 
                _cwc_2228 = true; 
                _cwc_2231 = 4; 
                _cwc_2229 = [ 0 ]; 
                _cwc_2230 = _sel_VxA_( _cwc_2229, _cwc_2205); 
                _cwc_2232 = _eq_SxS_( _cwc_2230, _cwc_2231); 
                _cwc_2233 = _and_SxS_( _cwc_2232, _cwc_2228); 
                if (_cwc_2233) 
                { 
                  _cwc_2227 = ( arr_a ArrayTransform::++arr_b) ; 
                  _cwc_2201 = _cwc_2227; 
                }
                else
                { 
                  _cwc_2221 = true; 
                  _cwc_2224 = 8; 
                  _cwc_2222 = [ 0 ]; 
                  _cwc_2223 = _sel_VxA_( _cwc_2222, _cwc_2205); 
                  _cwc_2225 = _eq_SxS_( _cwc_2223, _cwc_2224); 
                  _cwc_2226 = _and_SxS_( _cwc_2225, _cwc_2221); 
                  if (_cwc_2226) 
                  { 
                    _cwc_2220 = ( arr_a ArrayTransform::++arr_b) ; 
                    _cwc_2201 = _cwc_2220; 
                  }
                  else
                  { 
                    _cwc_2214 = true; 
                    _cwc_2217 = 12; 
                    _cwc_2215 = [ 0 ]; 
                    _cwc_2216 = _sel_VxA_( _cwc_2215, _cwc_2205); 
                    _cwc_2218 = _eq_SxS_( _cwc_2216, _cwc_2217); 
                    _cwc_2219 = _and_SxS_( _cwc_2218, _cwc_2214); 
                    if (_cwc_2219) 
                    { 
                      _cwc_2213 = ( arr_a ArrayTransform::++arr_b) ; 
                      _cwc_2201 = _cwc_2213; 
                    }
                    else
                    { 
                      _cwc_2207 = true; 
                      _cwc_2210 = 14; 
                      _cwc_2208 = [ 0 ]; 
                      _cwc_2209 = _sel_VxA_( _cwc_2208, _cwc_2205); 
                      _cwc_2211 = _eq_SxS_( _cwc_2209, _cwc_2210); 
                      _cwc_2212 = _and_SxS_( _cwc_2211, _cwc_2207); 
                      if (_cwc_2212) 
                      { 
                        _cwc_2206 = ( arr_a ArrayTransform::++arr_b) ; 
                        _cwc_2201 = _cwc_2206; 
                      }
                      else
                      { 
                        _cwc_2204 = ( arr_a ArrayTransform::++arr_b) ; 
                        _cwc_2201 = _cwc_2204; 
                      }
                    }
                  }
                }
              }
            }
            else
            { 
              _cwc_2202 = ( arr_a ArrayTransform::++arr_b) ; 
              _cwc_2201 = _cwc_2202; 
            }
          }
          else
          { 
            _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
          }
        }
      }
    }
    else
    { 
      _cwc_2201 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
    }
  }
  return( _cwc_2201); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::sel(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:Array::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*]),
                         bool -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[4] -> ( bool),
                         bool[15] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[4,4] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*]),
                         bool -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[4] -> ( bool),
                         bool[15] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[4,4] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int[.] -> { bool[*] -> ( bool[*]),
                         bool -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[4] -> ( bool),
                         bool[15] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[4,4] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int[1] -> { bool[*] -> ( bool),
                         bool -> ( --),
                         bool[+] -> ( bool),
                         bool[.] -> ( bool),
                         bool[4] -> ( bool),
                         bool[15] -> ( bool)},
             int[2] -> { bool[*] -> ( bool),
                         bool -> ( --),
                         bool[+] -> ( bool),
                         bool[.] -> ( --),
                         bool[4] -> ( --),
                         bool[.,.] -> ( bool),
                         bool[4,4] -> ( bool)},
             int[3] -> { bool[*] -> ( bool),
                         bool -> ( --),
                         bool[+] -> ( bool),
                         bool[.] -> ( --),
                         bool[4] -> ( --),
                         bool[.,.] -> ( --),
                         bool[4,4] -> ( --),
                         bool[.,.,.] -> ( bool)}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel
 */
{ 
  bool[*] _cwc_2871 { , NN } ; 
  bool _cwc_3049 { , NN } ; 
  int _cwc_3048 { , NN } ; 
  bool[*] _cwc_3047 { , NN } ; 
  int _cwc_3046 { , NN } ; 
  bool _cwc_3045 { , NN } ; 
  int _cwc_3044 { , NN } ; 
  bool _cwc_3043 { , NN } ; 
  bool _cwc_3042 { , NN } ; 
  int{1} _cwc_3041 { , NN } ; 
  int _cwc_3040 { , NN } ; 
  int[1]{0} _cwc_3039 { , NN } ; 
  bool _cwc_3038 { , NN } ; 
  bool _cwc_3037 { , NN } ; 
  int _cwc_3036 { , NN } ; 
  bool[*] _cwc_3035 { , NN } ; 
  int _cwc_3034 { , NN } ; 
  bool _cwc_3033 { , NN } ; 
  int _cwc_3032 { , NN } ; 
  bool[*] _cwc_3031 { , NN } ; 
  int _cwc_3030 { , NN } ; 
  bool _cwc_3029 { , NN } ; 
  int _cwc_3028 { , NN } ; 
  bool _cwc_3027 { , NN } ; 
  bool _cwc_3026 { , NN } ; 
  int{4} _cwc_3025 { , NN } ; 
  int _cwc_3024 { , NN } ; 
  int[1]{0} _cwc_3023 { , NN } ; 
  bool _cwc_3022 { , NN } ; 
  bool _cwc_3021 { , NN } ; 
  bool _cwc_3020 { , NN } ; 
  bool _cwc_3019 { , NN } ; 
  int{15} _cwc_3018 { , NN } ; 
  int _cwc_3017 { , NN } ; 
  int[1]{0} _cwc_3016 { , NN } ; 
  bool _cwc_3015 { , NN } ; 
  bool _cwc_3014 { , NN } ; 
  int[+] _cwc_3013 { , NN } ; 
  bool _cwc_3012 { , NN } ; 
  int _cwc_3011 { , NN } ; 
  bool[*] _cwc_3010 { , NN } ; 
  bool _cwc_3009 { , NN } ; 
  bool _cwc_3008 { , NN } ; 
  int{2} _cwc_3007 { , NN } ; 
  int _cwc_3006 { , NN } ; 
  int[1]{0} _cwc_3005 { , NN } ; 
  bool _cwc_3004 { , NN } ; 
  bool _cwc_3003 { , NN } ; 
  int _cwc_3002 { , NN } ; 
  bool[*] _cwc_3001 { , NN } ; 
  int _cwc_3000 { , NN } ; 
  bool _cwc_2999 { , NN } ; 
  int _cwc_2998 { , NN } ; 
  bool[*] _cwc_2997 { , NN } ; 
  int _cwc_2996 { , NN } ; 
  bool _cwc_2995 { , NN } ; 
  int _cwc_2994 { , NN } ; 
  bool _cwc_2993 { , NN } ; 
  bool _cwc_2992 { , NN } ; 
  int{4} _cwc_2991 { , NN } ; 
  int _cwc_2990 { , NN } ; 
  int[1]{0} _cwc_2989 { , NN } ; 
  bool _cwc_2988 { , NN } ; 
  bool[*] _cwc_2987 { , NN } ; 
  int[+] _cwc_2986 { , NN } ; 
  bool[*] _cwc_2985 { , NN } ; 
  bool _cwc_2984 { , NN } ; 
  int _cwc_2983 { , NN } ; 
  bool _cwc_2982 { , NN } ; 
  bool _cwc_2981 { , NN } ; 
  int{4} _cwc_2980 { , NN } ; 
  int _cwc_2979 { , NN } ; 
  int[1]{1} _cwc_2978 { , NN } ; 
  bool _cwc_2977 { , NN } ; 
  bool _cwc_2976 { , NN } ; 
  int{4} _cwc_2975 { , NN } ; 
  int _cwc_2974 { , NN } ; 
  int[1]{0} _cwc_2973 { , NN } ; 
  bool _cwc_2972 { , NN } ; 
  bool _cwc_2971 { , NN } ; 
  int[+] _cwc_2970 { , NN } ; 
  bool _cwc_2969 { , NN } ; 
  int _cwc_2968 { , NN } ; 
  bool[*] _cwc_2967 { , NN } ; 
  bool _cwc_2966 { , NN } ; 
  bool _cwc_2965 { , NN } ; 
  int{3} _cwc_2964 { , NN } ; 
  int _cwc_2963 { , NN } ; 
  int[1]{0} _cwc_2962 { , NN } ; 
  bool _cwc_2961 { , NN } ; 
  bool _cwc_2960 { , NN } ; 
  int _cwc_2959 { , NN } ; 
  bool[*] _cwc_2958 { , NN } ; 
  int _cwc_2957 { , NN } ; 
  bool _cwc_2956 { , NN } ; 
  int _cwc_2955 { , NN } ; 
  bool[*] _cwc_2954 { , NN } ; 
  int _cwc_2953 { , NN } ; 
  bool _cwc_2952 { , NN } ; 
  int _cwc_2951 { , NN } ; 
  bool _cwc_2950 { , NN } ; 
  bool _cwc_2949 { , NN } ; 
  int{4} _cwc_2948 { , NN } ; 
  int _cwc_2947 { , NN } ; 
  int[1]{0} _cwc_2946 { , NN } ; 
  bool _cwc_2945 { , NN } ; 
  bool[*] _cwc_2944 { , NN } ; 
  int[+] _cwc_2943 { , NN } ; 
  bool[*] _cwc_2942 { , NN } ; 
  bool _cwc_2941 { , NN } ; 
  int _cwc_2940 { , NN } ; 
  bool _cwc_2939 { , NN } ; 
  bool _cwc_2938 { , NN } ; 
  int{4} _cwc_2937 { , NN } ; 
  int _cwc_2936 { , NN } ; 
  int[1]{1} _cwc_2935 { , NN } ; 
  bool _cwc_2934 { , NN } ; 
  bool _cwc_2933 { , NN } ; 
  int{4} _cwc_2932 { , NN } ; 
  int _cwc_2931 { , NN } ; 
  int[1]{0} _cwc_2930 { , NN } ; 
  bool _cwc_2929 { , NN } ; 
  bool[*] _cwc_2928 { , NN } ; 
  int[+] _cwc_2927 { , NN } ; 
  bool[*] _cwc_2926 { , NN } ; 
  bool _cwc_2925 { , NN } ; 
  int _cwc_2924 { , NN } ; 
  bool _cwc_2923 { , NN } ; 
  int _cwc_2922 { , NN } ; 
  bool[*] _cwc_2921 { , NN } ; 
  int[+] _cwc_2920 { , NN } ; 
  bool _cwc_2919 { , NN } ; 
  int _cwc_2918 { , NN } ; 
  bool[*] _cwc_2917 { , NN } ; 
  int _cwc_2916 { , NN } ; 
  bool _cwc_2915 { , NN } ; 
  int _cwc_2914 { , NN } ; 
  bool[*] _cwc_2913 { , NN } ; 
  int _cwc_2912 { , NN } ; 
  bool _cwc_2911 { , NN } ; 
  int _cwc_2910 { , NN } ; 
  bool _cwc_2909 { , NN } ; 
  bool _cwc_2908 { , NN } ; 
  int{4} _cwc_2907 { , NN } ; 
  int _cwc_2906 { , NN } ; 
  int[1]{0} _cwc_2905 { , NN } ; 
  bool _cwc_2904 { , NN } ; 
  bool[*] _cwc_2903 { , NN } ; 
  bool _cwc_2902 { , NN } ; 
  bool _cwc_2901 { , NN } ; 
  int{15} _cwc_2900 { , NN } ; 
  int _cwc_2899 { , NN } ; 
  int[1]{0} _cwc_2898 { , NN } ; 
  bool _cwc_2897 { , NN } ; 
  bool[*] _cwc_2896 { , NN } ; 
  int[+] _cwc_2895 { , NN } ; 
  bool[*] _cwc_2894 { , NN } ; 
  bool _cwc_2893 { , NN } ; 
  int _cwc_2892 { , NN } ; 
  bool _cwc_2891 { , NN } ; 
  bool _cwc_2890 { , NN } ; 
  int{4} _cwc_2889 { , NN } ; 
  int _cwc_2888 { , NN } ; 
  int[1]{1} _cwc_2887 { , NN } ; 
  bool _cwc_2886 { , NN } ; 
  bool _cwc_2885 { , NN } ; 
  int{4} _cwc_2884 { , NN } ; 
  int _cwc_2883 { , NN } ; 
  int[1]{0} _cwc_2882 { , NN } ; 
  bool _cwc_2881 { , NN } ; 
  bool[*] _cwc_2880 { , NN } ; 
  int[+] _cwc_2879 { , NN } ; 
  bool[*] _cwc_2878 { , NN } ; 
  bool _cwc_2877 { , NN } ; 
  int _cwc_2876 { , NN } ; 
  bool[*] _cwc_2875 { , NN } ; 
  int _cwc_2874 { , NN } ; 
  bool[*] _cwc_2873 { , NN } ; 
  int _cwc_2872 { , NN } ; 

  _cwc_3046 = _dim_A_( idx); 
  _cwc_3048 = 0; 
  _cwc_3049 = _eq_SxS_( _cwc_3046, _cwc_3048); 
  if (_cwc_3049) 
  { 
    _cwc_3047 = ArrayBasics::sel( idx, array) ; 
    _cwc_2871 = _cwc_3047; 
  }
  else
  { 
    _cwc_2872 = _dim_A_( idx); 
    _cwc_3044 = 1; 
    _cwc_3045 = _eq_SxS_( _cwc_2872, _cwc_3044); 
    if (_cwc_3045) 
    { 
      _cwc_2920 = _shape_A_( idx); 
      _cwc_3038 = true; 
      _cwc_3041 = 1; 
      _cwc_3039 = [ 0 ]; 
      _cwc_3040 = _sel_VxA_( _cwc_3039, _cwc_2920); 
      _cwc_3042 = _eq_SxS_( _cwc_3040, _cwc_3041); 
      _cwc_3043 = _and_SxS_( _cwc_3042, _cwc_3038); 
      if (_cwc_3043) 
      { 
        _cwc_3034 = _dim_A_( array); 
        _cwc_3036 = 0; 
        _cwc_3037 = _eq_SxS_( _cwc_3034, _cwc_3036); 
        if (_cwc_3037) 
        { 
          _cwc_3035 = UTDScalarB:Array::sel( idx, array) ; 
          _cwc_2871 = _cwc_3035; 
        }
        else
        { 
          _cwc_3030 = _dim_A_( array); 
          _cwc_3032 = 0; 
          _cwc_3033 = _gt_SxS_( _cwc_3030, _cwc_3032); 
          if (_cwc_3033) 
          { 
            _cwc_3011 = _dim_A_( array); 
            _cwc_3028 = 1; 
            _cwc_3029 = _eq_SxS_( _cwc_3011, _cwc_3028); 
            if (_cwc_3029) 
            { 
              _cwc_3013 = _shape_A_( array); 
              _cwc_3022 = true; 
              _cwc_3025 = 4; 
              _cwc_3023 = [ 0 ]; 
              _cwc_3024 = _sel_VxA_( _cwc_3023, _cwc_3013); 
              _cwc_3026 = _eq_SxS_( _cwc_3024, _cwc_3025); 
              _cwc_3027 = _and_SxS_( _cwc_3026, _cwc_3022); 
              if (_cwc_3027) 
              { 
                _cwc_3021 = UTDScalarB:Array::sel( idx, array) ; 
                _cwc_2871 = _cwc_3021; 
              }
              else
              { 
                _cwc_3015 = true; 
                _cwc_3018 = 15; 
                _cwc_3016 = [ 0 ]; 
                _cwc_3017 = _sel_VxA_( _cwc_3016, _cwc_3013); 
                _cwc_3019 = _eq_SxS_( _cwc_3017, _cwc_3018); 
                _cwc_3020 = _and_SxS_( _cwc_3019, _cwc_3015); 
                if (_cwc_3020) 
                { 
                  _cwc_3014 = UTDScalarB:Array::sel( idx, array) ; 
                  _cwc_2871 = _cwc_3014; 
                }
                else
                { 
                  _cwc_3012 = UTDScalarB:Array::sel( idx, array) ; 
                  _cwc_2871 = _cwc_3012; 
                }
              }
            }
            else
            { 
              _cwc_3010 = UTDScalarB:Array::sel( idx, array) ; 
              _cwc_2871 = _cwc_3010; 
            }
          }
          else
          { 
            _cwc_3031 = ArrayBasics::sel( idx, array) ; 
            _cwc_2871 = _cwc_3031; 
          }
        }
      }
      else
      { 
        _cwc_3004 = true; 
        _cwc_3007 = 2; 
        _cwc_3005 = [ 0 ]; 
        _cwc_3006 = _sel_VxA_( _cwc_3005, _cwc_2920); 
        _cwc_3008 = _eq_SxS_( _cwc_3006, _cwc_3007); 
        _cwc_3009 = _and_SxS_( _cwc_3008, _cwc_3004); 
        if (_cwc_3009) 
        { 
          _cwc_3000 = _dim_A_( array); 
          _cwc_3002 = 0; 
          _cwc_3003 = _eq_SxS_( _cwc_3000, _cwc_3002); 
          if (_cwc_3003) 
          { 
            _cwc_3001 = UTDScalarB:Array::sel( idx, array) ; 
            _cwc_2871 = _cwc_3001; 
          }
          else
          { 
            _cwc_2996 = _dim_A_( array); 
            _cwc_2998 = 0; 
            _cwc_2999 = _gt_SxS_( _cwc_2996, _cwc_2998); 
            if (_cwc_2999) 
            { 
              _cwc_2968 = _dim_A_( array); 
              _cwc_2994 = 1; 
              _cwc_2995 = _eq_SxS_( _cwc_2968, _cwc_2994); 
              if (_cwc_2995) 
              { 
                _cwc_2986 = _shape_A_( array); 
                _cwc_2988 = true; 
                _cwc_2991 = 4; 
                _cwc_2989 = [ 0 ]; 
                _cwc_2990 = _sel_VxA_( _cwc_2989, _cwc_2986); 
                _cwc_2992 = _eq_SxS_( _cwc_2990, _cwc_2991); 
                _cwc_2993 = _and_SxS_( _cwc_2992, _cwc_2988); 
                if (_cwc_2993) 
                { 
                  _cwc_2987 = UTDScalarB:Array::sel( idx, array) ; 
                  _cwc_2871 = _cwc_2987; 
                }
                else
                { 
                  _cwc_2985 = UTDScalarB:Array::sel( idx, array) ; 
                  _cwc_2871 = _cwc_2985; 
                }
              }
              else
              { 
                _cwc_2983 = 2; 
                _cwc_2984 = _eq_SxS_( _cwc_2968, _cwc_2983); 
                if (_cwc_2984) 
                { 
                  _cwc_2970 = _shape_A_( array); 
                  _cwc_2972 = true; 
                  _cwc_2975 = 4; 
                  _cwc_2973 = [ 0 ]; 
                  _cwc_2974 = _sel_VxA_( _cwc_2973, _cwc_2970); 
                  _cwc_2976 = _eq_SxS_( _cwc_2974, _cwc_2975); 
                  _cwc_2977 = _and_SxS_( _cwc_2976, _cwc_2972); 
                  _cwc_2980 = 4; 
                  _cwc_2978 = [ 1 ]; 
                  _cwc_2979 = _sel_VxA_( _cwc_2978, _cwc_2970); 
                  _cwc_2981 = _eq_SxS_( _cwc_2979, _cwc_2980); 
                  _cwc_2982 = _and_SxS_( _cwc_2981, _cwc_2977); 
                  if (_cwc_2982) 
                  { 
                    _cwc_2971 = UTDScalarB:Array::sel( idx, array) ; 
                    _cwc_2871 = _cwc_2971; 
                  }
                  else
                  { 
                    _cwc_2969 = UTDScalarB:Array::sel( idx, array) ; 
                    _cwc_2871 = _cwc_2969; 
                  }
                }
                else
                { 
                  _cwc_2967 = UTDScalarB:Array::sel( idx, array) ; 
                  _cwc_2871 = _cwc_2967; 
                }
              }
            }
            else
            { 
              _cwc_2997 = ArrayBasics::sel( idx, array) ; 
              _cwc_2871 = _cwc_2997; 
            }
          }
        }
        else
        { 
          _cwc_2961 = true; 
          _cwc_2964 = 3; 
          _cwc_2962 = [ 0 ]; 
          _cwc_2963 = _sel_VxA_( _cwc_2962, _cwc_2920); 
          _cwc_2965 = _eq_SxS_( _cwc_2963, _cwc_2964); 
          _cwc_2966 = _and_SxS_( _cwc_2965, _cwc_2961); 
          if (_cwc_2966) 
          { 
            _cwc_2957 = _dim_A_( array); 
            _cwc_2959 = 0; 
            _cwc_2960 = _eq_SxS_( _cwc_2957, _cwc_2959); 
            if (_cwc_2960) 
            { 
              _cwc_2958 = UTDScalarB:Array::sel( idx, array) ; 
              _cwc_2871 = _cwc_2958; 
            }
            else
            { 
              _cwc_2953 = _dim_A_( array); 
              _cwc_2955 = 0; 
              _cwc_2956 = _gt_SxS_( _cwc_2953, _cwc_2955); 
              if (_cwc_2956) 
              { 
                _cwc_2922 = _dim_A_( array); 
                _cwc_2951 = 1; 
                _cwc_2952 = _eq_SxS_( _cwc_2922, _cwc_2951); 
                if (_cwc_2952) 
                { 
                  _cwc_2943 = _shape_A_( array); 
                  _cwc_2945 = true; 
                  _cwc_2948 = 4; 
                  _cwc_2946 = [ 0 ]; 
                  _cwc_2947 = _sel_VxA_( _cwc_2946, _cwc_2943); 
                  _cwc_2949 = _eq_SxS_( _cwc_2947, _cwc_2948); 
                  _cwc_2950 = _and_SxS_( _cwc_2949, _cwc_2945); 
                  if (_cwc_2950) 
                  { 
                    _cwc_2944 = UTDScalarB:Array::sel( idx, array) ; 
                    _cwc_2871 = _cwc_2944; 
                  }
                  else
                  { 
                    _cwc_2942 = UTDScalarB:Array::sel( idx, array) ; 
                    _cwc_2871 = _cwc_2942; 
                  }
                }
                else
                { 
                  _cwc_2940 = 2; 
                  _cwc_2941 = _eq_SxS_( _cwc_2922, _cwc_2940); 
                  if (_cwc_2941) 
                  { 
                    _cwc_2927 = _shape_A_( array); 
                    _cwc_2929 = true; 
                    _cwc_2932 = 4; 
                    _cwc_2930 = [ 0 ]; 
                    _cwc_2931 = _sel_VxA_( _cwc_2930, _cwc_2927); 
                    _cwc_2933 = _eq_SxS_( _cwc_2931, _cwc_2932); 
                    _cwc_2934 = _and_SxS_( _cwc_2933, _cwc_2929); 
                    _cwc_2937 = 4; 
                    _cwc_2935 = [ 1 ]; 
                    _cwc_2936 = _sel_VxA_( _cwc_2935, _cwc_2927); 
                    _cwc_2938 = _eq_SxS_( _cwc_2936, _cwc_2937); 
                    _cwc_2939 = _and_SxS_( _cwc_2938, _cwc_2934); 
                    if (_cwc_2939) 
                    { 
                      _cwc_2928 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_2871 = _cwc_2928; 
                    }
                    else
                    { 
                      _cwc_2926 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_2871 = _cwc_2926; 
                    }
                  }
                  else
                  { 
                    _cwc_2924 = 3; 
                    _cwc_2925 = _eq_SxS_( _cwc_2922, _cwc_2924); 
                    if (_cwc_2925) 
                    { 
                      _cwc_2923 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_2871 = _cwc_2923; 
                    }
                    else
                    { 
                      _cwc_2921 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_2871 = _cwc_2921; 
                    }
                  }
                }
              }
              else
              { 
                _cwc_2954 = ArrayBasics::sel( idx, array) ; 
                _cwc_2871 = _cwc_2954; 
              }
            }
          }
          else
          { 
            _cwc_2916 = _dim_A_( array); 
            _cwc_2918 = 0; 
            _cwc_2919 = _eq_SxS_( _cwc_2916, _cwc_2918); 
            if (_cwc_2919) 
            { 
              _cwc_2917 = UTDScalarB:Array::sel( idx, array) ; 
              _cwc_2871 = _cwc_2917; 
            }
            else
            { 
              _cwc_2912 = _dim_A_( array); 
              _cwc_2914 = 0; 
              _cwc_2915 = _gt_SxS_( _cwc_2912, _cwc_2914); 
              if (_cwc_2915) 
              { 
                _cwc_2874 = _dim_A_( array); 
                _cwc_2910 = 1; 
                _cwc_2911 = _eq_SxS_( _cwc_2874, _cwc_2910); 
                if (_cwc_2911) 
                { 
                  _cwc_2895 = _shape_A_( array); 
                  _cwc_2904 = true; 
                  _cwc_2907 = 4; 
                  _cwc_2905 = [ 0 ]; 
                  _cwc_2906 = _sel_VxA_( _cwc_2905, _cwc_2895); 
                  _cwc_2908 = _eq_SxS_( _cwc_2906, _cwc_2907); 
                  _cwc_2909 = _and_SxS_( _cwc_2908, _cwc_2904); 
                  if (_cwc_2909) 
                  { 
                    _cwc_2903 = UTDScalarB:Array::sel( idx, array) ; 
                    _cwc_2871 = _cwc_2903; 
                  }
                  else
                  { 
                    _cwc_2897 = true; 
                    _cwc_2900 = 15; 
                    _cwc_2898 = [ 0 ]; 
                    _cwc_2899 = _sel_VxA_( _cwc_2898, _cwc_2895); 
                    _cwc_2901 = _eq_SxS_( _cwc_2899, _cwc_2900); 
                    _cwc_2902 = _and_SxS_( _cwc_2901, _cwc_2897); 
                    if (_cwc_2902) 
                    { 
                      _cwc_2896 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_2871 = _cwc_2896; 
                    }
                    else
                    { 
                      _cwc_2894 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_2871 = _cwc_2894; 
                    }
                  }
                }
                else
                { 
                  _cwc_2892 = 2; 
                  _cwc_2893 = _eq_SxS_( _cwc_2874, _cwc_2892); 
                  if (_cwc_2893) 
                  { 
                    _cwc_2879 = _shape_A_( array); 
                    _cwc_2881 = true; 
                    _cwc_2884 = 4; 
                    _cwc_2882 = [ 0 ]; 
                    _cwc_2883 = _sel_VxA_( _cwc_2882, _cwc_2879); 
                    _cwc_2885 = _eq_SxS_( _cwc_2883, _cwc_2884); 
                    _cwc_2886 = _and_SxS_( _cwc_2885, _cwc_2881); 
                    _cwc_2889 = 4; 
                    _cwc_2887 = [ 1 ]; 
                    _cwc_2888 = _sel_VxA_( _cwc_2887, _cwc_2879); 
                    _cwc_2890 = _eq_SxS_( _cwc_2888, _cwc_2889); 
                    _cwc_2891 = _and_SxS_( _cwc_2890, _cwc_2886); 
                    if (_cwc_2891) 
                    { 
                      _cwc_2880 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_2871 = _cwc_2880; 
                    }
                    else
                    { 
                      _cwc_2878 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_2871 = _cwc_2878; 
                    }
                  }
                  else
                  { 
                    _cwc_2876 = 3; 
                    _cwc_2877 = _eq_SxS_( _cwc_2874, _cwc_2876); 
                    if (_cwc_2877) 
                    { 
                      _cwc_2875 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_2871 = _cwc_2875; 
                    }
                    else
                    { 
                      _cwc_2873 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_2871 = _cwc_2873; 
                    }
                  }
                }
              }
              else
              { 
                _cwc_2913 = ArrayBasics::sel( idx, array) ; 
                _cwc_2871 = _cwc_2913; 
              }
            }
          }
        }
      }
    }
    else
    { 
      _cwc_2871 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::sel :: int[*] bool[*] -> bool[*] ", idx, array); 
    }
  }
  return( _cwc_2871); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::sel(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::sel( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { int[*] -> ( int[*]),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[1] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int),
                         int[0] -> ( int)},
             int -> { int[*] -> ( int[*]),
                      int[+] -> ( int),
                      int[.] -> ( int),
                      int[1] -> ( int),
                      int[3] -> ( int),
                      int[2] -> ( int),
                      int[0] -> ( int)},
             int[+] -> { int[*] -> ( int[*])},
             int[.] -> { int[*] -> ( int[*])}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel
 */
{ 
  int[*] _cwc_3050 { , NN } ; 
  bool _cwc_3091 { , NN } ; 
  int _cwc_3090 { , NN } ; 
  bool _cwc_3089 { , NN } ; 
  int _cwc_3088 { , NN } ; 
  bool _cwc_3087 { , NN } ; 
  bool _cwc_3086 { , NN } ; 
  int{1} _cwc_3085 { , NN } ; 
  int _cwc_3084 { , NN } ; 
  int[1]{0} _cwc_3083 { , NN } ; 
  bool _cwc_3082 { , NN } ; 
  int _cwc_3081 { , NN } ; 
  bool _cwc_3080 { , NN } ; 
  bool _cwc_3079 { , NN } ; 
  int{3} _cwc_3078 { , NN } ; 
  int _cwc_3077 { , NN } ; 
  int[1]{0} _cwc_3076 { , NN } ; 
  bool _cwc_3075 { , NN } ; 
  int _cwc_3074 { , NN } ; 
  bool _cwc_3073 { , NN } ; 
  bool _cwc_3072 { , NN } ; 
  int{2} _cwc_3071 { , NN } ; 
  int _cwc_3070 { , NN } ; 
  int[1]{0} _cwc_3069 { , NN } ; 
  bool _cwc_3068 { , NN } ; 
  int _cwc_3067 { , NN } ; 
  bool _cwc_3066 { , NN } ; 
  bool _cwc_3065 { , NN } ; 
  int{0} _cwc_3064 { , NN } ; 
  int _cwc_3063 { , NN } ; 
  int[1]{0} _cwc_3062 { , NN } ; 
  bool _cwc_3061 { , NN } ; 
  int _cwc_3060 { , NN } ; 
  int[+] _cwc_3059 { , NN } ; 
  int _cwc_3058 { , NN } ; 
  int _cwc_3057 { , NN } ; 
  int[*] _cwc_3056 { , NN } ; 
  int _cwc_3055 { , NN } ; 
  bool _cwc_3054 { , NN } ; 
  int _cwc_3053 { , NN } ; 
  int[*] _cwc_3052 { , NN } ; 
  int _cwc_3051 { , NN } ; 

  _cwc_3055 = _dim_A_( idx); 
  _cwc_3090 = 0; 
  _cwc_3091 = _eq_SxS_( _cwc_3055, _cwc_3090); 
  if (_cwc_3091) 
  { 
    _cwc_3057 = _dim_A_( array); 
    _cwc_3088 = 1; 
    _cwc_3089 = _eq_SxS_( _cwc_3057, _cwc_3088); 
    if (_cwc_3089) 
    { 
      _cwc_3059 = _shape_A_( array); 
      _cwc_3082 = true; 
      _cwc_3085 = 1; 
      _cwc_3083 = [ 0 ]; 
      _cwc_3084 = _sel_VxA_( _cwc_3083, _cwc_3059); 
      _cwc_3086 = _eq_SxS_( _cwc_3084, _cwc_3085); 
      _cwc_3087 = _and_SxS_( _cwc_3086, _cwc_3082); 
      if (_cwc_3087) 
      { 
        _cwc_3081 = UTDScalarB:Array::sel( idx, array) ; 
        _cwc_3050 = _cwc_3081; 
      }
      else
      { 
        _cwc_3075 = true; 
        _cwc_3078 = 3; 
        _cwc_3076 = [ 0 ]; 
        _cwc_3077 = _sel_VxA_( _cwc_3076, _cwc_3059); 
        _cwc_3079 = _eq_SxS_( _cwc_3077, _cwc_3078); 
        _cwc_3080 = _and_SxS_( _cwc_3079, _cwc_3075); 
        if (_cwc_3080) 
        { 
          _cwc_3074 = UTDScalarB:Array::sel( idx, array) ; 
          _cwc_3050 = _cwc_3074; 
        }
        else
        { 
          _cwc_3068 = true; 
          _cwc_3071 = 2; 
          _cwc_3069 = [ 0 ]; 
          _cwc_3070 = _sel_VxA_( _cwc_3069, _cwc_3059); 
          _cwc_3072 = _eq_SxS_( _cwc_3070, _cwc_3071); 
          _cwc_3073 = _and_SxS_( _cwc_3072, _cwc_3068); 
          if (_cwc_3073) 
          { 
            _cwc_3067 = UTDScalarB:Array::sel( idx, array) ; 
            _cwc_3050 = _cwc_3067; 
          }
          else
          { 
            _cwc_3061 = true; 
            _cwc_3064 = 0; 
            _cwc_3062 = [ 0 ]; 
            _cwc_3063 = _sel_VxA_( _cwc_3062, _cwc_3059); 
            _cwc_3065 = _eq_SxS_( _cwc_3063, _cwc_3064); 
            _cwc_3066 = _and_SxS_( _cwc_3065, _cwc_3061); 
            if (_cwc_3066) 
            { 
              _cwc_3060 = UTDScalarB:Array::sel( idx, array) ; 
              _cwc_3050 = _cwc_3060; 
            }
            else
            { 
              _cwc_3058 = UTDScalarB:Array::sel( idx, array) ; 
              _cwc_3050 = _cwc_3058; 
            }
          }
        }
      }
    }
    else
    { 
      _cwc_3056 = ArrayBasics::sel( idx, array) ; 
      _cwc_3050 = _cwc_3056; 
    }
  }
  else
  { 
    _cwc_3051 = _dim_A_( idx); 
    _cwc_3053 = 1; 
    _cwc_3054 = _eq_SxS_( _cwc_3051, _cwc_3053); 
    if (_cwc_3054) 
    { 
      _cwc_3052 = ArrayBasics::sel( idx, array) ; 
      _cwc_3050 = _cwc_3052; 
    }
    else
    { 
      _cwc_3050 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::sel :: int[*] int[*] -> int[*] ", idx, array); 
    }
  }
  return( _cwc_3050); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::quadXBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
Terminal::Terminal *, TermFile::TermFile *, bool[*] UTDScalarB::quadXBB( Terminal::Terminal *_rso_490_TheTerminal { ,NN } , TermFile::TermFile *_rso_489_stdout { ,NN } , bool[*] y { ,NN } , int[*] QUADpp { ,NN } , int[*] QUADpw { ,NN } )
/*
 *  quadXBB :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> { bool[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                                int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])},
                                                                                    int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])}},
                                                                       bool[+] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                                int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                                    int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}},
                                                                       bool[.] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                                int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                                    int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}},
                                                                       bool[15] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                                 int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                                     int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                              int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}}},
                                            TermFile::TermFile -> { bool[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])}},
                                                                    bool[+] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}},
                                                                    bool[.] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}},
                                                                    bool[15] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                              int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                                  int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                           int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}}}},
                 Terminal::Terminal -> { TermFile::TermFile[*] -> { bool[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])}},
                                                                    bool[+] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}},
                                                                    bool[.] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}},
                                                                    bool[15] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                              int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                                  int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                           int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}}},
                                         TermFile::TermFile -> { bool[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])},
                                                                              int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                       int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])}},
                                                                 bool[+] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                              int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                       int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}},
                                                                 bool[.] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                              int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                       int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}},
                                                                 bool[15] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                           int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])},
                                                                               int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[15]),
                                                                                        int -> ( Terminal::Terminal, TermFile::TermFile, bool[15])}}}}}
 *  dispatching to: UTDScalarB::quadXBB,
 *                  UTDScalarB::quadXBB
 */
{ 
  bool[*] _cwc_3094 { , NN } ; 
  TermFile::TermFile _cwc_3093 { , NN } ; 
  Terminal::Terminal _cwc_3092 { , NN } ; 
  bool _cwc_3131 { , NN } ; 
  int _cwc_3130 { , NN } ; 
  bool _cwc_3129 { , NN } ; 
  bool _cwc_3128 { , NN } ; 
  int{15} _cwc_3127 { , NN } ; 
  int _cwc_3126 { , NN } ; 
  int[1]{0} _cwc_3125 { , NN } ; 
  bool _cwc_3124 { , NN } ; 
  bool _cwc_3123 { , NN } ; 
  int _cwc_3122 { , NN } ; 
  bool _cwc_3121 { , NN } ; 
  int _cwc_3120 { , NN } ; 
  Terminal::Terminal _cwc_3119 { , NN } ; 
  TermFile::TermFile _cwc_3118 { , NN } ; 
  bool[15] _cwc_3117 { , NN } ; 
  int _cwc_3116 { , NN } ; 
  int _cwc_3115 { , NN } ; 
  int[+] _cwc_3114 { , NN } ; 
  bool _cwc_3113 { , NN } ; 
  int _cwc_3112 { , NN } ; 
  bool _cwc_3111 { , NN } ; 
  int _cwc_3110 { , NN } ; 
  Terminal::Terminal _cwc_3109 { , NN } ; 
  TermFile::TermFile _cwc_3108 { , NN } ; 
  bool[*] _cwc_3107 { , NN } ; 
  int _cwc_3106 { , NN } ; 
  int _cwc_3105 { , NN } ; 
  int _cwc_3104 { , NN } ; 
  bool _cwc_3103 { , NN } ; 
  int _cwc_3102 { , NN } ; 
  bool _cwc_3101 { , NN } ; 
  int _cwc_3100 { , NN } ; 
  Terminal::Terminal _cwc_3099 { , NN } ; 
  TermFile::TermFile _cwc_3098 { , NN } ; 
  bool[*] _cwc_3097 { , NN } ; 
  int _cwc_3096 { , NN } ; 
  int _cwc_3095 { , NN } ; 

  _cwc_3104 = _dim_A_( y); 
  _cwc_3130 = 1; 
  _cwc_3131 = _eq_SxS_( _cwc_3104, _cwc_3130); 
  if (_cwc_3131) 
  { 
    _cwc_3114 = _shape_A_( y); 
    _cwc_3124 = true; 
    _cwc_3127 = 15; 
    _cwc_3125 = [ 0 ]; 
    _cwc_3126 = _sel_VxA_( _cwc_3125, _cwc_3114); 
    _cwc_3128 = _eq_SxS_( _cwc_3126, _cwc_3127); 
    _cwc_3129 = _and_SxS_( _cwc_3128, _cwc_3124); 
    if (_cwc_3129) 
    { 
      _cwc_3115 = _dim_A_( QUADpp); 
      _cwc_3122 = 0; 
      _cwc_3123 = _eq_SxS_( _cwc_3115, _cwc_3122); 
      if (_cwc_3123) 
      { 
        _cwc_3116 = _dim_A_( QUADpw); 
        _cwc_3120 = 0; 
        _cwc_3121 = _eq_SxS_( _cwc_3116, _cwc_3120); 
        if (_cwc_3121) 
        { 
          _cwc_3119, _cwc_3118, _cwc_3117 = UTDScalarB::quadXBB( _rso_490_TheTerminal, _rso_489_stdout, y, QUADpp, QUADpw) ; 
          _cwc_3092 = _cwc_3119; 
          _cwc_3093 = _cwc_3118; 
          _cwc_3094 = _cwc_3117; 
        }
        else
        { 
          _cwc_3092, _cwc_3093, _cwc_3094 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, bool[*], "UTDScalarB::quadXBB :: Terminal::Terminal TermFile::TermFile bool[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile bool[*] ", _rso_490_TheTerminal, _rso_489_stdout, y, QUADpp, QUADpw); 
        }
      }
      else
      { 
        _cwc_3092, _cwc_3093, _cwc_3094 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, bool[*], "UTDScalarB::quadXBB :: Terminal::Terminal TermFile::TermFile bool[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile bool[*] ", _rso_490_TheTerminal, _rso_489_stdout, y, QUADpp, QUADpw); 
      }
    }
    else
    { 
      _cwc_3105 = _dim_A_( QUADpp); 
      _cwc_3112 = 0; 
      _cwc_3113 = _eq_SxS_( _cwc_3105, _cwc_3112); 
      if (_cwc_3113) 
      { 
        _cwc_3106 = _dim_A_( QUADpw); 
        _cwc_3110 = 0; 
        _cwc_3111 = _eq_SxS_( _cwc_3106, _cwc_3110); 
        if (_cwc_3111) 
        { 
          _cwc_3109, _cwc_3108, _cwc_3107 = UTDScalarB::quadXBB( _rso_490_TheTerminal, _rso_489_stdout, y, QUADpp, QUADpw) ; 
          _cwc_3092 = _cwc_3109; 
          _cwc_3093 = _cwc_3108; 
          _cwc_3094 = _cwc_3107; 
        }
        else
        { 
          _cwc_3092, _cwc_3093, _cwc_3094 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, bool[*], "UTDScalarB::quadXBB :: Terminal::Terminal TermFile::TermFile bool[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile bool[*] ", _rso_490_TheTerminal, _rso_489_stdout, y, QUADpp, QUADpw); 
        }
      }
      else
      { 
        _cwc_3092, _cwc_3093, _cwc_3094 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, bool[*], "UTDScalarB::quadXBB :: Terminal::Terminal TermFile::TermFile bool[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile bool[*] ", _rso_490_TheTerminal, _rso_489_stdout, y, QUADpp, QUADpw); 
      }
    }
  }
  else
  { 
    _cwc_3095 = _dim_A_( QUADpp); 
    _cwc_3102 = 0; 
    _cwc_3103 = _eq_SxS_( _cwc_3095, _cwc_3102); 
    if (_cwc_3103) 
    { 
      _cwc_3096 = _dim_A_( QUADpw); 
      _cwc_3100 = 0; 
      _cwc_3101 = _eq_SxS_( _cwc_3096, _cwc_3100); 
      if (_cwc_3101) 
      { 
        _cwc_3099, _cwc_3098, _cwc_3097 = UTDScalarB::quadXBB( _rso_490_TheTerminal, _rso_489_stdout, y, QUADpp, QUADpw) ; 
        _cwc_3092 = _cwc_3099; 
        _cwc_3093 = _cwc_3098; 
        _cwc_3094 = _cwc_3097; 
      }
      else
      { 
        _cwc_3092, _cwc_3093, _cwc_3094 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, bool[*], "UTDScalarB::quadXBB :: Terminal::Terminal TermFile::TermFile bool[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile bool[*] ", _rso_490_TheTerminal, _rso_489_stdout, y, QUADpp, QUADpw); 
      }
    }
    else
    { 
      _cwc_3092, _cwc_3093, _cwc_3094 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, bool[*], "UTDScalarB::quadXBB :: Terminal::Terminal TermFile::TermFile bool[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile bool[*] ", _rso_490_TheTerminal, _rso_489_stdout, y, QUADpp, QUADpw); 
    }
  }
  return( _cwc_3092, _cwc_3093, _cwc_3094); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::neBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::neBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  neBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[*]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[4]),
                            bool[4] -> ( bool[4]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool -> { bool[*] -> ( bool[*]),
                         bool -> ( bool),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[4]),
                         bool[4] -> ( bool[4])},
               bool[+] -> { bool[*] -> ( bool[+]),
                            bool -> ( bool[+]),
                            bool[+] -> ( bool[+]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                bool -> ( bool[.,.,.]),
                                bool[+] -> ( bool[.,.,.]),
                                bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB
 */
{ 
  bool[*] _cwc_3132 { , NN } ; 
  bool _cwc_3185 { , NN } ; 
  int _cwc_3184 { , NN } ; 
  bool _cwc_3183 { , NN } ; 
  int _cwc_3182 { , NN } ; 
  bool _cwc_3181 { , NN } ; 
  int _cwc_3180 { , NN } ; 
  bool _cwc_3179 { , NN } ; 
  int _cwc_3178 { , NN } ; 
  int _cwc_3177 { , NN } ; 
  bool _cwc_3176 { , NN } ; 
  int _cwc_3175 { , NN } ; 
  bool _cwc_3174 { , NN } ; 
  bool _cwc_3173 { , NN } ; 
  int{4} _cwc_3172 { , NN } ; 
  int _cwc_3171 { , NN } ; 
  int[1]{0} _cwc_3170 { , NN } ; 
  bool _cwc_3169 { , NN } ; 
  bool[4] _cwc_3168 { , NN } ; 
  int[+] _cwc_3167 { , NN } ; 
  bool[+] _cwc_3166 { , NN } ; 
  int _cwc_3165 { , NN } ; 
  bool[+] _cwc_3164 { , NN } ; 
  int _cwc_3163 { , NN } ; 
  bool _cwc_3162 { , NN } ; 
  int _cwc_3161 { , NN } ; 
  int _cwc_3160 { , NN } ; 
  bool _cwc_3159 { , NN } ; 
  int _cwc_3158 { , NN } ; 
  bool _cwc_3157 { , NN } ; 
  int _cwc_3156 { , NN } ; 
  bool[.,.,.] _cwc_3155 { , NN } ; 
  int _cwc_3154 { , NN } ; 
  bool _cwc_3153 { , NN } ; 
  int _cwc_3152 { , NN } ; 
  int _cwc_3151 { , NN } ; 
  bool _cwc_3150 { , NN } ; 
  int _cwc_3149 { , NN } ; 
  bool[.,.,.] _cwc_3148 { , NN } ; 
  int _cwc_3147 { , NN } ; 
  bool[+] _cwc_3146 { , NN } ; 
  int _cwc_3145 { , NN } ; 
  bool _cwc_3144 { , NN } ; 
  int _cwc_3143 { , NN } ; 
  bool[+] _cwc_3142 { , NN } ; 
  int _cwc_3141 { , NN } ; 
  bool _cwc_3140 { , NN } ; 
  int _cwc_3139 { , NN } ; 
  int _cwc_3138 { , NN } ; 
  bool _cwc_3137 { , NN } ; 
  int _cwc_3136 { , NN } ; 
  bool[+] _cwc_3135 { , NN } ; 
  int _cwc_3134 { , NN } ; 
  bool[+] _cwc_3133 { , NN } ; 

  _cwc_3163 = _dim_A_( x); 
  _cwc_3184 = 0; 
  _cwc_3185 = _eq_SxS_( _cwc_3163, _cwc_3184); 
  if (_cwc_3185) 
  { 
    _cwc_3180 = _dim_A_( y); 
    _cwc_3182 = 0; 
    _cwc_3183 = _eq_SxS_( _cwc_3180, _cwc_3182); 
    if (_cwc_3183) 
    { 
      _cwc_3181 = UTDScalarB::neBBB( x, y) ; 
      _cwc_3132 = _cwc_3181; 
    }
    else
    { 
      _cwc_3177 = _dim_A_( y); 
      _cwc_3178 = 0; 
      _cwc_3179 = _gt_SxS_( _cwc_3177, _cwc_3178); 
      if (_cwc_3179) 
      { 
        _cwc_3165 = _dim_A_( y); 
        _cwc_3175 = 1; 
        _cwc_3176 = _eq_SxS_( _cwc_3165, _cwc_3175); 
        if (_cwc_3176) 
        { 
          _cwc_3167 = _shape_A_( y); 
          _cwc_3169 = true; 
          _cwc_3172 = 4; 
          _cwc_3170 = [ 0 ]; 
          _cwc_3171 = _sel_VxA_( _cwc_3170, _cwc_3167); 
          _cwc_3173 = _eq_SxS_( _cwc_3171, _cwc_3172); 
          _cwc_3174 = _and_SxS_( _cwc_3173, _cwc_3169); 
          if (_cwc_3174) 
          { 
            _cwc_3168 = UTDScalarB::neBBB( x, y) ; 
            _cwc_3132 = _cwc_3168; 
          }
          else
          { 
            _cwc_3166 = UTDScalarB::neBBB( x, y) ; 
            _cwc_3132 = _cwc_3166; 
          }
        }
        else
        { 
          _cwc_3164 = UTDScalarB::neBBB( x, y) ; 
          _cwc_3132 = _cwc_3164; 
        }
      }
      else
      { 
        _cwc_3132 = _dispatch_error_( 1, bool[*], "UTDScalarB::neBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_3160 = _dim_A_( x); 
    _cwc_3161 = 0; 
    _cwc_3162 = _gt_SxS_( _cwc_3160, _cwc_3161); 
    if (_cwc_3162) 
    { 
      _cwc_3145 = _dim_A_( x); 
      _cwc_3158 = 3; 
      _cwc_3159 = _eq_SxS_( _cwc_3145, _cwc_3158); 
      if (_cwc_3159) 
      { 
        _cwc_3154 = _dim_A_( y); 
        _cwc_3156 = 0; 
        _cwc_3157 = _eq_SxS_( _cwc_3154, _cwc_3156); 
        if (_cwc_3157) 
        { 
          _cwc_3155 = UTDScalarB::neBBB( x, y) ; 
          _cwc_3132 = _cwc_3155; 
        }
        else
        { 
          _cwc_3151 = _dim_A_( y); 
          _cwc_3152 = 0; 
          _cwc_3153 = _gt_SxS_( _cwc_3151, _cwc_3152); 
          if (_cwc_3153) 
          { 
            _cwc_3147 = _dim_A_( y); 
            _cwc_3149 = 3; 
            _cwc_3150 = _eq_SxS_( _cwc_3147, _cwc_3149); 
            if (_cwc_3150) 
            { 
              _cwc_3148 = UTDScalarB::neBBB( x, y) ; 
              _cwc_3132 = _cwc_3148; 
            }
            else
            { 
              _cwc_3146 = UTDScalarB::neBBB( x, y) ; 
              _cwc_3132 = _cwc_3146; 
            }
          }
          else
          { 
            _cwc_3132 = _dispatch_error_( 1, bool[*], "UTDScalarB::neBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_3141 = _dim_A_( y); 
        _cwc_3143 = 0; 
        _cwc_3144 = _eq_SxS_( _cwc_3141, _cwc_3143); 
        if (_cwc_3144) 
        { 
          _cwc_3142 = UTDScalarB::neBBB( x, y) ; 
          _cwc_3132 = _cwc_3142; 
        }
        else
        { 
          _cwc_3138 = _dim_A_( y); 
          _cwc_3139 = 0; 
          _cwc_3140 = _gt_SxS_( _cwc_3138, _cwc_3139); 
          if (_cwc_3140) 
          { 
            _cwc_3134 = _dim_A_( y); 
            _cwc_3136 = 3; 
            _cwc_3137 = _eq_SxS_( _cwc_3134, _cwc_3136); 
            if (_cwc_3137) 
            { 
              _cwc_3135 = UTDScalarB::neBBB( x, y) ; 
              _cwc_3132 = _cwc_3135; 
            }
            else
            { 
              _cwc_3133 = UTDScalarB::neBBB( x, y) ; 
              _cwc_3132 = _cwc_3133; 
            }
          }
          else
          { 
            _cwc_3132 = _dispatch_error_( 1, bool[*], "UTDScalarB::neBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_3132 = _dispatch_error_( 1, bool[*], "UTDScalarB::neBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_3132); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::UTDScalarB_mainXXI(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
Terminal::Terminal *, TermFile::TermFile *, int UTDScalarB::UTDScalarB_mainXXI( Terminal::Terminal *_rso_492_TheTerminal { ,NN } , TermFile::TermFile *_rso_491_stdout { ,NN } )
/*
 *  UTDScalarB_mainXXI :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                       TermFile::TermFile -> ( Terminal::Terminal, TermFile::TermFile, int)},
                            Terminal::Terminal -> { TermFile::TermFile[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                    TermFile::TermFile -> ( Terminal::Terminal, TermFile::TermFile, int)}}
 *  dispatching to: UTDScalarB::UTDScalarB_mainXXI
 */
{ 
  int _cwc_3188 { , NN } ; 
  TermFile::TermFile _cwc_3187 { , NN } ; 
  Terminal::Terminal _cwc_3186 { , NN } ; 
  Terminal::Terminal _cwc_3191 { , NN } ; 
  TermFile::TermFile _cwc_3190 { , NN } ; 
  int _cwc_3189 { , NN } ; 

  _cwc_3191, _cwc_3190, _cwc_3189 = UTDScalarB::UTDScalarB_mainXXI( _rso_492_TheTerminal, _rso_491_stdout) ; 
  _cwc_3186 = _cwc_3191; 
  _cwc_3187 = _cwc_3190; 
  _cwc_3188 = _cwc_3189; 
  return( _cwc_3186, _cwc_3187, _cwc_3188); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::rhoBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[.] UTDScalarB::rhoBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  rhoBBB :: { bool[*] -> { bool[*] -> ( bool[.]),
                             bool -> ( bool[.])},
                bool -> { bool[*] -> ( bool[.]),
                          bool -> ( bool[.])}}
 *  dispatching to: UTDScalarB::rhoBBB
 */
{ 
  bool[.] _cwc_3192 { , NN } ; 
  bool _cwc_3199 { , NN } ; 
  int _cwc_3198 { , NN } ; 
  bool _cwc_3197 { , NN } ; 
  int _cwc_3196 { , NN } ; 
  bool[.] _cwc_3195 { , NN } ; 
  int _cwc_3194 { , NN } ; 
  int _cwc_3193 { , NN } ; 

  _cwc_3193 = _dim_A_( x); 
  _cwc_3198 = 0; 
  _cwc_3199 = _eq_SxS_( _cwc_3193, _cwc_3198); 
  if (_cwc_3199) 
  { 
    _cwc_3194 = _dim_A_( y); 
    _cwc_3196 = 0; 
    _cwc_3197 = _eq_SxS_( _cwc_3194, _cwc_3196); 
    if (_cwc_3197) 
    { 
      _cwc_3195 = UTDScalarB::rhoBBB( x, y) ; 
      _cwc_3192 = _cwc_3195; 
    }
    else
    { 
      _cwc_3192 = _dispatch_error_( 1, bool[.], "UTDScalarB::rhoBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
    }
  }
  else
  { 
    _cwc_3192 = _dispatch_error_( 1, bool[.], "UTDScalarB::rhoBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
  }
  return( _cwc_3192); 
}



/****************************************************************************
 * UTDScalarB::notXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::notXBB( bool y { ,NN } )
/*
 *  notXBB ::  ---
 */
{ 
  bool _flat_2__SSA0_1 { , NN } ; 
  bool _flat_2 { , NN } ; 
  bool _flat_3 { , NN } ; 

  _flat_3 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_2 = ( wrapper:Array::!_flat_3) ; 
  _flat_2__SSA0_1 = _type_conv_( bool, _flat_2); 
  return( _flat_2__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::notXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::notXBB( bool[+] y { ,NN } )
/*
 *  notXBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_10 { , NN } ; 
  bool[*] _flat_11 { , NN } ; 
  bool[*] _flat_12 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_4 { , NN } ; 
  bool{0} _flat_5 { , NN } ; 
  int[.] _flat_6 { , NN } ; 
  int{0} _flat_7 { , NN } ; 
  int[.] _flat_8 { , NN } ; 
  int[.] _flat_9 { , NN } ; 

  _flat_9 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_8 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_7 = 0; 
  _flat_6 = _mul_SxV_( _flat_7, _flat_8); 
  _flat_5 = false; 
  _flat_4 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_6 <= iv < _flat_9)
        { 
          _flat_12 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_11 = wrapper:UTDScalarB:Array::to_bool( _flat_12) ; 
          _flat_10 = wrapper:UTDScalarB::notXBB( _flat_11) ; 
        } : _flat_10 ; 
         } :
      genarray( _flat_4, _flat_5); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::andBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  andBBB ::  ---
 */
{ 
  bool _flat_13__SSA0_1 { , NN } ; 
  bool _flat_13 { , NN } ; 

  _flat_13 = ( x wrapper:Array::&y) ; 
  _flat_13__SSA0_1 = _type_conv_( bool, _flat_13); 
  return( _flat_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::eqBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  bool _flat_14__SSA0_1 { , NN } ; 
  bool _flat_14 { , NN } ; 

  _flat_14 = ( x wrapper:UTDScalarB:Array::==y) ; 
  _flat_14__SSA0_1 = _type_conv_( bool, _flat_14); 
  return( _flat_14__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::neBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  bool _flat_25__SSA0_1 { , NN } ; 
  bool _flat_25 { , NN } ; 

  _flat_25 = ( x wrapper:Array::!=y) ; 
  _flat_25__SSA0_1 = _type_conv_( bool, _flat_25); 
  return( _flat_25__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::barBBI(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB::barBBI( bool x { ,NN } , bool y { ,NN } )
/*
 *  barBBI ::  ---
 */
{ 
  int _flat_29__SSA0_1 { , NN } ; 
  int _flat_29 { , NN } ; 
  int _flat_30 { , NN } ; 
  int _flat_31 { , NN } ; 

  _flat_31 = wrapper:UTDScalarB:Array::toi( y) ; 
  _flat_30 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_29 = ( _flat_30 wrapper:Array::-_flat_31) ; 
  _flat_29__SSA0_1 = _type_conv_( int, _flat_29); 
  return( _flat_29__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::andBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  andBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_38 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_32 { , NN } ; 
  bool{0} _flat_33 { , NN } ; 
  int[.] _flat_34 { , NN } ; 
  int{0} _flat_35 { , NN } ; 
  int[.] _flat_36 { , NN } ; 
  int[.] _flat_37 { , NN } ; 

  _flat_37 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_36 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_35 = 0; 
  _flat_34 = _mul_SxV_( _flat_35, _flat_36); 
  _flat_33 = false; 
  _flat_32 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_34 <= iv < _flat_37)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_38 = wrapper:UTDScalarB::andBBB( xel, y) ; 
        } : _flat_38 ; 
         } :
      genarray( _flat_32, _flat_33); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::andBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  andBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_42 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_39 { , NN } ; 
  int[.] _flat_40 { , NN } ; 
  int{0} _flat_41 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_41 = 0; 
  _flat_40 = _mul_SxV_( _flat_41, sy); 
  _flat_39 = false; 
  z = with {
        /* Partn */
        (_flat_40 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_42 = wrapper:UTDScalarB::andBBB( xel, yel) ; 
        } : _flat_42 ; 
         } :
      genarray( sy, _flat_39); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::eqBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_49 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_43 { , NN } ; 
  bool{0} _flat_44 { , NN } ; 
  int[.] _flat_45 { , NN } ; 
  int{0} _flat_46 { , NN } ; 
  int[.] _flat_47 { , NN } ; 
  int[.] _flat_48 { , NN } ; 

  _flat_48 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_47 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_46 = 0; 
  _flat_45 = _mul_SxV_( _flat_46, _flat_47); 
  _flat_44 = false; 
  _flat_43 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_45 <= iv < _flat_48)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_49 = wrapper:UTDScalarB::eqBBB( xel, y) ; 
        } : _flat_49 ; 
         } :
      genarray( _flat_43, _flat_44); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::eqBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_53 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_50 { , NN } ; 
  int[.] _flat_51 { , NN } ; 
  int{0} _flat_52 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_52 = 0; 
  _flat_51 = _mul_SxV_( _flat_52, sy); 
  _flat_50 = false; 
  z = with {
        /* Partn */
        (_flat_51 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_53 = wrapper:UTDScalarB::eqBBB( xel, yel) ; 
        } : _flat_53 ; 
         } :
      genarray( sy, _flat_50); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::neBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_115 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_109 { , NN } ; 
  bool{0} _flat_110 { , NN } ; 
  int[.] _flat_111 { , NN } ; 
  int{0} _flat_112 { , NN } ; 
  int[.] _flat_113 { , NN } ; 
  int[.] _flat_114 { , NN } ; 

  _flat_114 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_113 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_112 = 0; 
  _flat_111 = _mul_SxV_( _flat_112, _flat_113); 
  _flat_110 = false; 
  _flat_109 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_111 <= iv < _flat_114)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_115 = wrapper:UTDScalarB::neBBB( xel, y) ; 
        } : _flat_115 ; 
         } :
      genarray( _flat_109, _flat_110); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::neBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_119 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_116 { , NN } ; 
  int[.] _flat_117 { , NN } ; 
  int{0} _flat_118 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_118 = 0; 
  _flat_117 = _mul_SxV_( _flat_118, sy); 
  _flat_116 = false; 
  z = with {
        /* Partn */
        (_flat_117 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_119 = wrapper:UTDScalarB::neBBB( xel, yel) ; 
        } : _flat_119 ; 
         } :
      genarray( sy, _flat_116); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB::rhoBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  rhoBBB ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  int[1] _flat_142 { , NN } ; 
  int _flat_143 { , NN } ; 

  _flat_143 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_142 = [ _flat_143 ]; 
  z = wrapper:UTDScalarB:Array::genarray( _flat_142, y) ; 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoIBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] UTDScalarB::rhoIBB( int[.] x { ,NN } , bool[*] y { ,NN } )
/*
 *  rhoIBB ::  ---
 */
{ 
  int offset__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] el { , NN } ; 
  int[.] _flat_153 { , NN } ; 
  int[.] _flat_154 { , NN } ; 
  int _flat_151 { , NN } ; 
  int[.] _flat_152 { , NN } ; 
  int offset { , NN } ; 
  int[.] _flat_150 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_144 { , NN } ; 
  bool{0} _flat_145 { , NN } ; 
  int[.] _flat_146 { , NN } ; 
  int{0} _flat_147 { , NN } ; 
  int[.] _flat_148 { , NN } ; 
  int[.] _flat_149 { , NN } ; 

  _flat_149 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_148 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_147 = 0; 
  _flat_146 = _mul_SxV_( _flat_147, _flat_148); 
  _flat_145 = false; 
  _flat_144 = wrapper:UTDScalarB:Array::toi( x) ; 
  z = with {
        /* Partn */
        (_flat_146 <= iv < _flat_149)
        { 
          _flat_150 = wrapper:UTDScalarB:Array::toi( x) ; 
          offset = wrapper:UTDScalarB::V2O( _flat_150, iv) ; 
          _flat_152 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_151 = wrapper:UTDScalarB:Array::prod( _flat_152) ; 
          offset__SSA0_1 = _aplmod_SxS_( offset, _flat_151); 
          _flat_154 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_153 = wrapper:UTDScalarB::O2V( _flat_154, offset__SSA0_1) ; 
          el = wrapper:UTDScalarB:Array::sel( _flat_153, y) ; 
        } : el ; 
         } :
      genarray( _flat_144, _flat_145); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::rhoXBI(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB::rhoXBI( bool[+] y { ,NN } )
/*
 *  rhoXBI ::  ---
 */
{ 
  int[.] _flat_155__SSA0_1 { , NN } ; 
  int[.] _flat_155 { , NN } ; 

  _flat_155 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_155__SSA0_1 = _type_conv_( int[.], _flat_155); 
  return( _flat_155__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::quadXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile *, bool[*] UTDScalarB::quadXBB( Terminal::Terminal *_rso_494_TheTerminal { ,NN } , TermFile::TermFile *_rso_493_stdout { ,NN } , bool[*] y { ,NN } , int QUADpp { ,NN } , int QUADpw { ,NN } )
/*
 *  quadXBB ::  ---
 */
{ 
  TermFile::TermFile _rso_493_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_494_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_494_TheTerminal__SSA0_1, _rso_493_stdout__SSA0_1 = wrapper:UTDScalarB:StdIO::show( _rso_494_TheTerminal, _rso_493_stdout, y) ; 
  return( _rso_494_TheTerminal__SSA0_1, _rso_493_stdout__SSA0_1, y); 
}



/****************************************************************************
 * UTDScalarB::quadXII(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile *, int[*] UTDScalarB::quadXII( Terminal::Terminal *_rso_496_TheTerminal { ,NN } , TermFile::TermFile *_rso_495_stdout { ,NN } , int[*] y { ,NN } , int QUADpp { ,NN } , int QUADpw { ,NN } )
/*
 *  quadXII ::  ---
 */
{ 
  TermFile::TermFile _rso_495_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_496_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_496_TheTerminal__SSA0_1, _rso_495_stdout__SSA0_1 = wrapper:UTDScalarB:StdIO::show( _rso_496_TheTerminal, _rso_495_stdout, y) ; 
  return( _rso_496_TheTerminal__SSA0_1, _rso_495_stdout__SSA0_1, y); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[2] UTDScalarB::comaBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[2] _flat_156__SSA0_1 { , NN } ; 
  bool[2] _flat_156 { , NN } ; 
  bool[1] _flat_157 { , NN } ; 
  bool _flat_158 { , NN } ; 
  bool[1] _flat_159 { , NN } ; 
  bool _flat_160 { , NN } ; 

  _flat_160 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_159 = [ _flat_160 ]; 
  _flat_158 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_157 = [ _flat_158 ]; 
  _flat_156 = ( _flat_157 wrapper:UTDScalarB:Array::++_flat_159) ; 
  _flat_156__SSA0_1 = _type_conv_( bool[2], _flat_156); 
  return( _flat_156__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB::comaBBB( bool[.] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[.] _flat_161__SSA0_1 { , NN } ; 
  bool[.] _flat_161 { , NN } ; 
  bool[.] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB::comaBBB( bool[.] x { ,NN } , bool[.] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[.] _flat_165__SSA0_1 { , NN } ; 
  bool[.] _flat_165 { , NN } ; 
  bool[.] _flat_166 { , NN } ; 
  bool[.] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::sameBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::sameBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  sameBBB ::  ---
 */
{ 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  bool _flat_168 { , NN } ; 
  bool _flat_169 { , NN } ; 

  _flat_169 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_168 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  z = wrapper:UTDScalarB::eqBBB( _flat_168, _flat_169) ; 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::sameBBB__Cond_1(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::sameBBB__Cond_1( bool _flat_170 { ,NN } , bool[+] y { ,NN } , bool[+] x { ,NN } )
/*
 *  sameBBB__Cond_1 ::  ---
 */
{ 
  bool _hce_1__SSA0_2 { , NN } ; 
  bool{0} _hce_1__SSA0_1 { , NN } ; 
  int[.] _flat_175 { , NN } ; 
  int[.] _flat_174 { , NN } ; 
  bool[.] _flat_173 { , NN } ; 
  bool _hce_1 { , NN } ; 

  if (_flat_170) 
  { 
    _flat_175 = _shape_A_( y); 
    _flat_174 = _shape_A_( x); 
    _flat_173 = ( _flat_174 wrapper:UTDScalarB:Array::==_flat_175) ; 
    _hce_1 = wrapper:UTDScalarB:Array::all( _flat_173) ; 
  }
  else
  { 
    _hce_1__SSA0_1 = false; 
  }
  _hce_1__SSA0_2 = ( _flat_170 ? _hce_1 : _hce_1__SSA0_1 ); 
  return( _hce_1__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::sameBBB__Cond_0(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::sameBBB__Cond_0( bool _hce_1 { ,NN } , bool[+] y { ,NN } , bool[+] x { ,NN } )
/*
 *  sameBBB__Cond_0 ::  ---
 */
{ 
  bool _hce_0__SSA0_2 { , NN } ; 
  bool{0} _hce_0__SSA0_1 { , NN } ; 
  bool[+] _flat_178 { , NN } ; 
  bool[+] _flat_177 { , NN } ; 
  bool[+] _flat_176 { , NN } ; 
  bool _hce_0 { , NN } ; 

  if (_hce_1) 
  { 
    _flat_178 = wrapper:UTDScalarB:Array::to_bool( y) ; 
    _flat_177 = wrapper:UTDScalarB:Array::to_bool( x) ; 
    _flat_176 = wrapper:UTDScalarB::eqBBB( _flat_177, _flat_178) ; 
    _hce_0 = wrapper:UTDScalarB:Array::all( _flat_176) ; 
  }
  else
  { 
    _hce_0__SSA0_1 = false; 
  }
  _hce_0__SSA0_2 = ( _hce_1 ? _hce_0 : _hce_0__SSA0_1 ); 
  return( _hce_0__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::sameBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::sameBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  sameBBB ::  ---
 */
{ 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  bool _hce_0 { , NN } ; 
  bool _hce_1 { , NN } ; 
  bool _flat_170 { , NN } ; 
  int _flat_171 { , NN } ; 
  int _flat_172 { , NN } ; 

  _flat_172 = _dim_A_( y); 
  _flat_171 = _dim_A_( x); 
  _flat_170 = ( _flat_171 wrapper:UTDScalarB:Array::==_flat_172) ; 
  _hce_1 = UTDScalarB::sameBBB__Cond_1( _flat_170, y, x) ; 
  _hce_0 = UTDScalarB::sameBBB__Cond_0( _hce_1, y, x) ; 
  z = _hce_0; 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotneBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::jotdotneBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  jotdotneBBB ::  ---
 */
{ 
  bool[+] z { , NN } ; 
  bool[+] _flat_257 { , NN } ; 
  bool[+] _flat_258 { , NN } ; 
  bool[*] xitem { , NN } ; 
  bool[*] _flat_256 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_251 { , NN } ; 
  int[.] _flat_252 { , NN } ; 
  int{0} _flat_253 { , NN } ; 
  int[.] _flat_254 { , NN } ; 
  int[.] _flat_255 { , NN } ; 
  bool[*] cell { , NN } ; 
  int[.] _flat_249 { , NN } ; 
  bool{0} _flat_250 { , NN } ; 

  _flat_250 = false; 
  _flat_249 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_249, _flat_250) ; 
  _flat_255 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_254 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_253 = 0; 
  _flat_252 = _mul_SxV_( _flat_253, _flat_254); 
  _flat_251 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_252 <= iv < _flat_255)
        { 
          _flat_256 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_256) ; 
          _flat_258 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_257 = wrapper:UTDScalarB::neBBB( xitem, _flat_258) ; 
        } : _flat_257 ; 
         } :
      genarray( _flat_251, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::andslXBBQUICKSTOP(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::andslXBBQUICKSTOP( bool[.] y { ,NN } )
/*
 *  andslXBBQUICKSTOP ::  ---
 */
{ 
  int _eat_518 { , NN } ; 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  bool _flat_287 { , NN } ; 
  int[1] iv { , NN } ; 
  bool _flat_279 { , NN } ; 
  int{1} _flat_280 { , NN } ; 
  bool _flat_281 { , NN } ; 
  int{0} _flat_282 { , NN } ; 
  int[1] _flat_283 { , NN } ; 
  int{0} _flat_284 { , NN } ; 
  int[1] _flat_285 { , NN } ; 
  int[1] _flat_286 { , NN } ; 

  _flat_286 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_285 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_284 = 0; 
  _flat_283 = ( _flat_284 wrapper:UTDScalarB:Array::*_flat_285) ; 
  _flat_282 = 0; 
  _flat_281 = wrapper:UTDScalarB:Array::to_bool( _flat_282) ; 
  _flat_280 = 1; 
  _flat_279 = wrapper:UTDScalarB:Array::to_bool( _flat_280) ; 
  z = with {
        /* Partn */
        (_flat_283 <= iv=[_eat_518] < _flat_286)
        { 
          _flat_287 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
        } : _flat_287 ; 
         } :
      foldfix( UTDScalarB::andBBB(), _flat_279, _flat_281); 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::andBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  andBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_295 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_294 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_288 { , NN } ; 
  bool{0} _flat_289 { , NN } ; 
  int[.] _flat_290 { , NN } ; 
  int{0} _flat_291 { , NN } ; 
  int[.] _flat_292 { , NN } ; 
  int[.] _flat_293 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_293 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_292 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_291 = 0; 
  _flat_290 = _mul_SxV_( _flat_291, _flat_292); 
  _flat_289 = false; 
  _flat_288 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_290 <= iv < _flat_293)
        { 
          _flat_294 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_294) ; 
          _flat_295 = wrapper:UTDScalarB::andBBB( xel, yel) ; 
        } : _flat_295 ; 
         } :
      genarray( _flat_288, _flat_289); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::eqBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_303 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_302 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_296 { , NN } ; 
  bool{0} _flat_297 { , NN } ; 
  int[.] _flat_298 { , NN } ; 
  int{0} _flat_299 { , NN } ; 
  int[.] _flat_300 { , NN } ; 
  int[.] _flat_301 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_301 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_300 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_299 = 0; 
  _flat_298 = _mul_SxV_( _flat_299, _flat_300); 
  _flat_297 = false; 
  _flat_296 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_298 <= iv < _flat_301)
        { 
          _flat_302 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_302) ; 
          _flat_303 = wrapper:UTDScalarB::eqBBB( xel, yel) ; 
        } : _flat_303 ; 
         } :
      genarray( _flat_296, _flat_297); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::neBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_351 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_350 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_344 { , NN } ; 
  bool{0} _flat_345 { , NN } ; 
  int[.] _flat_346 { , NN } ; 
  int{0} _flat_347 { , NN } ; 
  int[.] _flat_348 { , NN } ; 
  int[.] _flat_349 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_349 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_348 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_347 = 0; 
  _flat_346 = _mul_SxV_( _flat_347, _flat_348); 
  _flat_345 = false; 
  _flat_344 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_346 <= iv < _flat_349)
        { 
          _flat_350 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_350) ; 
          _flat_351 = wrapper:UTDScalarB::neBBB( xel, yel) ; 
        } : _flat_351 ; 
         } :
      genarray( _flat_344, _flat_345); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::V2O__Cond_3(...) [ body ]
 ****************************************************************************/
int UTDScalarB::V2O__Cond_3( int{0} offset { ,NN } , int{1} wt { ,NN } , int i { ,NN } , bool _flat_375 { ,NN } , int[.] iv { ,NN } , int[.] shp { ,NN } )
/*
 *  V2O__Cond_3 ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 

  if (_flat_375) 
  { 
    offset__SSA0_1 = UTDScalarB::_dup_499_V2O__Loop_2( offset, wt, i, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_2 = ( _flat_375 ? offset__SSA0_1 : offset ); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::V2O(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB::V2O( int[.] shp { ,NN } , int[.] iv { ,NN } )
/*
 *  V2O ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool _flat_375 { , NN } ; 
  int{0} _flat_376 { , NN } ; 
  int i { , NN } ; 
  int _flat_371 { , NN } ; 
  int{0} _flat_372 { , NN } ; 
  int[1] _flat_373 { , NN } ; 
  int{1} _flat_374 { , NN } ; 
  int{1} wt { , NN } ; 
  int{0} offset { , NN } ; 

  offset = 0; 
  wt = 1; 
  _flat_374 = 1; 
  _flat_373 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_372 = 0; 
  _flat_371 = wrapper:UTDScalarB:Array::sel( _flat_372, _flat_373) ; 
  i = ( _flat_371 wrapper:Array::-_flat_374) ; 
  _flat_376 = 0; 
  _flat_375 = ( i wrapper:Array::>=_flat_376) ; 
  offset__SSA0_1 = UTDScalarB::V2O__Cond_3( offset, wt, i, _flat_375, iv, shp) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::O2V__Cond_7(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::O2V__Cond_7( int[.] wts { ,NN } , int i { ,NN } , bool _flat_388 { ,NN } , int[.] shp { ,NN } )
/*
 *  O2V__Cond_7 ::  ---
 */
{ 
  int[.] wts__SSA0_2 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 

  if (_flat_388) 
  { 
    wts__SSA0_1 = UTDScalarB::_dup_501_O2V__Loop_6( wts, i, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_2 = ( _flat_388 ? wts__SSA0_1 : wts ); 
  return( wts__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::O2V__Cond_5(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::O2V__Cond_5( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , bool _flat_403 { ,NN } , int offset { ,NN } , int[.] shp { ,NN } )
/*
 *  O2V__Cond_5 ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 

  if (_flat_403) 
  { 
    iv__SSA0_1 = UTDScalarB::_dup_500_O2V__Loop_4( iv, wts, i, offset, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_2 = ( _flat_403 ? iv__SSA0_1 : iv ); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::O2V(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB::O2V( int[.] shp { ,NN } , int offset { ,NN } )
/*
 *  O2V ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  bool _flat_403 { , NN } ; 
  int{0} _flat_404 { , NN } ; 
  int _flat_399 { , NN } ; 
  int{0} _flat_400 { , NN } ; 
  int[1] _flat_401 { , NN } ; 
  int{1} _flat_402 { , NN } ; 
  bool _flat_388 { , NN } ; 
  int{0} _flat_389 { , NN } ; 
  int i { , NN } ; 
  int _flat_384 { , NN } ; 
  int{0} _flat_385 { , NN } ; 
  int[1] _flat_386 { , NN } ; 
  int{2} _flat_387 { , NN } ; 
  int[.] wts { , NN } ; 
  int[.] iv { , NN } ; 
  int[1] _flat_382 { , NN } ; 
  int{1} _flat_383 { , NN } ; 

  _flat_383 = 1; 
  _flat_382 = wrapper:UTDScalarB:Array::shape( shp) ; 
  iv = wrapper:UTDScalarB:Array::genarray( _flat_382, _flat_383) ; 
  wts = iv; 
  _flat_387 = 2; 
  _flat_386 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_385 = 0; 
  _flat_384 = wrapper:UTDScalarB:Array::sel( _flat_385, _flat_386) ; 
  i = ( _flat_384 wrapper:Array::-_flat_387) ; 
  _flat_389 = 0; 
  _flat_388 = ( i wrapper:Array::>=_flat_389) ; 
  wts__SSA0_1 = UTDScalarB::O2V__Cond_7( wts, i, _flat_388, shp) ; 
  _flat_402 = 1; 
  _flat_401 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_400 = 0; 
  _flat_399 = wrapper:UTDScalarB:Array::sel( _flat_400, _flat_401) ; 
  i__SSA0_1 = ( _flat_399 wrapper:Array::-_flat_402) ; 
  _flat_404 = 0; 
  _flat_403 = ( i__SSA0_1 wrapper:Array::>=_flat_404) ; 
  iv__SSA0_1 = UTDScalarB::O2V__Cond_5( iv, wts__SSA0_1, i__SSA0_1, _flat_403, offset, shp) ; 
  iv__SSA0_2 = _type_conv_( int[.], iv__SSA0_1); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::NEXXB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::NEXXB()
/*
 *  NEXXB ::  ---
 */
{ 
  bool[14] r_13__SSA0_1 { , NN } ; 
  bool[14] r_13 { , NN } ; 
  bool[14] A_174 { , NN } ; 
  bool A_173 { , NN } ; 
  bool[.,.,.] A_171 { , NN } ; 
  bool[13] r_12 { , NN } ; 
  bool[13] A_168 { , NN } ; 
  bool A_167 { , NN } ; 
  bool[.,.,.] A_165 { , NN } ; 
  bool[12] r_11 { , NN } ; 
  bool[12] A_162 { , NN } ; 
  bool A_161 { , NN } ; 
  bool[.,.,.] A_159 { , NN } ; 
  bool[11] r_10 { , NN } ; 
  bool[11] A_156 { , NN } ; 
  bool A_155 { , NN } ; 
  bool[.,.,.] A_153 { , NN } ; 
  bool[10] r_9 { , NN } ; 
  bool[10] A_150 { , NN } ; 
  bool A_149 { , NN } ; 
  bool[.,.,.] A_147 { , NN } ; 
  bool[9] r_8 { , NN } ; 
  bool[9] A_144 { , NN } ; 
  bool A_143 { , NN } ; 
  bool[.,.,.] A_141 { , NN } ; 
  bool[8] r_7 { , NN } ; 
  bool[8] A_138 { , NN } ; 
  bool A_137 { , NN } ; 
  bool[.,.,.] A_135 { , NN } ; 
  bool[.,.,.] A_133 { , NN } ; 
  bool[.,.,.] A_132 { , NN } ; 
  bool{1} _flat_483 { , NN } ; 
  int[3] A_131 { , NN } ; 
  bool[7] r_6 { , NN } ; 
  bool[7] A_129 { , NN } ; 
  bool A_128 { , NN } ; 
  bool[.,.,.] A_126 { , NN } ; 
  bool[.,.,.] A_124 { , NN } ; 
  bool[6] r_5 { , NN } ; 
  bool[6] A_122 { , NN } ; 
  bool A_121 { , NN } ; 
  bool[.,.,.] A_119 { , NN } ; 
  bool[5] r_4 { , NN } ; 
  bool[5] A_116 { , NN } ; 
  bool A_115 { , NN } ; 
  bool[4,4] A_106 { , NN } ; 
  bool[.,.] A_105 { , NN } ; 
  int[2]{4,4} _flat_480 { , NN } ; 
  int{4} _flat_481 { , NN } ; 
  int{4} _flat_482 { , NN } ; 
  bool[16] A_104 { , NN } ; 
  bool[4]{0,1...} _flat_475 { , NN } ; 
  bool{0} _flat_476 { , NN } ; 
  bool{1} _flat_477 { , NN } ; 
  bool{0} _flat_478 { , NN } ; 
  bool{1} _flat_479 { , NN } ; 
  bool[12] A_103 { , NN } ; 
  bool[4]{0,1...} _flat_470 { , NN } ; 
  bool{0} _flat_471 { , NN } ; 
  bool{1} _flat_472 { , NN } ; 
  bool{0} _flat_473 { , NN } ; 
  bool{1} _flat_474 { , NN } ; 
  bool[8] A_102 { , NN } ; 
  bool[4]{1,0...} _flat_460 { , NN } ; 
  bool{1} _flat_461 { , NN } ; 
  bool{0} _flat_462 { , NN } ; 
  bool{1} _flat_463 { , NN } ; 
  bool{0} _flat_464 { , NN } ; 
  bool[4]{1,0...} _flat_465 { , NN } ; 
  bool{1} _flat_466 { , NN } ; 
  bool{0} _flat_467 { , NN } ; 
  bool{1} _flat_468 { , NN } ; 
  bool{0} _flat_469 { , NN } ; 
  bool[4] r_3 { , NN } ; 
  bool[4] A_100 { , NN } ; 
  bool A_99 { , NN } ; 
  bool{0} _flat_459 { , NN } ; 
  bool A_97 { , NN } ; 
  bool[3] r_2 { , NN } ; 
  bool[3] A_94 { , NN } ; 
  bool A_93 { , NN } ; 
  bool{1} _flat_458 { , NN } ; 
  bool A_91 { , NN } ; 
  bool[2] r_1 { , NN } ; 
  bool[2] A_88 { , NN } ; 
  bool A_87 { , NN } ; 
  bool{1} _flat_457 { , NN } ; 
  bool A_85 { , NN } ; 
  bool r_0 { , NN } ; 
  bool A_82 { , NN } ; 
  bool{0} _flat_456 { , NN } ; 
  bool A_80 { , NN } ; 
  bool[.,.,.] BM230_0 { , NN } ; 
  bool[.,.,.] A_77 { , NN } ; 
  int[3]{2,3...} _flat_449 { , NN } ; 
  int{2} _flat_450 { , NN } ; 
  int{3} _flat_451 { , NN } ; 
  int{0} _flat_452 { , NN } ; 
  bool[2]{0,1} _flat_453 { , NN } ; 
  bool{0} _flat_454 { , NN } ; 
  bool{1} _flat_455 { , NN } ; 
  bool[.,.,.] BM304_0 { , NN } ; 
  bool[.,.,.] A_75 { , NN } ; 
  int[3]{3,0...} _flat_442 { , NN } ; 
  int{3} _flat_443 { , NN } ; 
  int{0} _flat_444 { , NN } ; 
  int{4} _flat_445 { , NN } ; 
  bool[2]{0,1} _flat_446 { , NN } ; 
  bool{0} _flat_447 { , NN } ; 
  bool{1} _flat_448 { , NN } ; 
  bool[.,.,.] BM034_0 { , NN } ; 
  bool[.,.,.] A_73 { , NN } ; 
  int[3]{0,3...} _flat_435 { , NN } ; 
  int{0} _flat_436 { , NN } ; 
  int{3} _flat_437 { , NN } ; 
  int{4} _flat_438 { , NN } ; 
  bool[2]{0,1} _flat_439 { , NN } ; 
  bool{0} _flat_440 { , NN } ; 
  bool{1} _flat_441 { , NN } ; 
  bool[.,.,.] BM234_0 { , NN } ; 
  bool[.,.,.] A_71 { , NN } ; 
  int[3]{2,3...} _flat_427 { , NN } ; 
  int{2} _flat_428 { , NN } ; 
  int{3} _flat_429 { , NN } ; 
  int{4} _flat_430 { , NN } ; 
  bool[3]{0,1...} _flat_431 { , NN } ; 
  bool{0} _flat_432 { , NN } ; 
  bool{1} _flat_433 { , NN } ; 
  bool{0} _flat_434 { , NN } ; 
  bool[.] BVS0_0 { , NN } ; 
  bool[.] A_69 { , NN } ; 
  bool{0} _flat_425 { , NN } ; 
  bool{0} _flat_426 { , NN } ; 
  bool[4]{0,1...} BVR_0 { , NN } ; 
  bool{0} _flat_421 { , NN } ; 
  bool{1} _flat_422 { , NN } ; 
  bool{0} _flat_423 { , NN } ; 
  bool{1} _flat_424 { , NN } ; 
  bool[4]{0,0...} BVL_0 { , NN } ; 
  bool{0} _flat_417 { , NN } ; 
  bool{0} _flat_418 { , NN } ; 
  bool{1} _flat_419 { , NN } ; 
  bool{1} _flat_420 { , NN } ; 
  bool{1} BS1_0 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  BS1_0 = true; 
  _flat_420 = true; 
  _flat_419 = true; 
  _flat_418 = false; 
  _flat_417 = false; 
  BVL_0 = [ _flat_417, _flat_418, _flat_419, _flat_420 ]; 
  _flat_424 = true; 
  _flat_423 = false; 
  _flat_422 = true; 
  _flat_421 = false; 
  BVR_0 = [ _flat_421, _flat_422, _flat_423, _flat_424 ]; 
  _flat_426 = false; 
  _flat_425 = false; 
  A_69 = wrapper:UTDScalarB::rhoBBB( _flat_425, _flat_426) ; 
  BVS0_0 = A_69; 
  _flat_434 = false; 
  _flat_433 = true; 
  _flat_432 = false; 
  _flat_431 = [ _flat_432, _flat_433, _flat_434 ]; 
  _flat_430 = 4; 
  _flat_429 = 3; 
  _flat_428 = 2; 
  _flat_427 = [ _flat_428, _flat_429, _flat_430 ]; 
  A_71 = wrapper:UTDScalarB::rhoIBB( _flat_427, _flat_431) ; 
  BM234_0 = A_71; 
  _flat_441 = true; 
  _flat_440 = false; 
  _flat_439 = [ _flat_440, _flat_441 ]; 
  _flat_438 = 4; 
  _flat_437 = 3; 
  _flat_436 = 0; 
  _flat_435 = [ _flat_436, _flat_437, _flat_438 ]; 
  A_73 = wrapper:UTDScalarB::rhoIBB( _flat_435, _flat_439) ; 
  BM034_0 = A_73; 
  _flat_448 = true; 
  _flat_447 = false; 
  _flat_446 = [ _flat_447, _flat_448 ]; 
  _flat_445 = 4; 
  _flat_444 = 0; 
  _flat_443 = 3; 
  _flat_442 = [ _flat_443, _flat_444, _flat_445 ]; 
  A_75 = wrapper:UTDScalarB::rhoIBB( _flat_442, _flat_446) ; 
  BM304_0 = A_75; 
  _flat_455 = true; 
  _flat_454 = false; 
  _flat_453 = [ _flat_454, _flat_455 ]; 
  _flat_452 = 0; 
  _flat_451 = 3; 
  _flat_450 = 2; 
  _flat_449 = [ _flat_450, _flat_451, _flat_452 ]; 
  A_77 = wrapper:UTDScalarB::rhoIBB( _flat_449, _flat_453) ; 
  BM230_0 = A_77; 
  A_80 = wrapper:UTDScalarB::neBBB( BS0_0, BS0_0) ; 
  _flat_456 = false; 
  A_82 = wrapper:UTDScalarB::sameBBB( A_80, _flat_456) ; 
  r_0 = A_82; 
  A_85 = wrapper:UTDScalarB::neBBB( BS0_0, BS1_0) ; 
  _flat_457 = true; 
  A_87 = wrapper:UTDScalarB::sameBBB( A_85, _flat_457) ; 
  A_88 = wrapper:UTDScalarB::comaBBB( r_0, A_87) ; 
  r_1 = A_88; 
  A_91 = wrapper:UTDScalarB::neBBB( BS1_0, BS0_0) ; 
  _flat_458 = true; 
  A_93 = wrapper:UTDScalarB::sameBBB( A_91, _flat_458) ; 
  A_94 = wrapper:UTDScalarB::comaBBB( r_1, A_93) ; 
  r_2 = A_94; 
  A_97 = wrapper:UTDScalarB::neBBB( BS1_0, BS1_0) ; 
  _flat_459 = false; 
  A_99 = wrapper:UTDScalarB::sameBBB( A_97, _flat_459) ; 
  A_100 = wrapper:UTDScalarB::comaBBB( r_2, A_99) ; 
  r_3 = A_100; 
  _flat_469 = false; 
  _flat_468 = true; 
  _flat_467 = false; 
  _flat_466 = true; 
  _flat_465 = [ _flat_466, _flat_467, _flat_468, _flat_469 ]; 
  _flat_464 = false; 
  _flat_463 = true; 
  _flat_462 = false; 
  _flat_461 = true; 
  _flat_460 = [ _flat_461, _flat_462, _flat_463, _flat_464 ]; 
  A_102 = wrapper:UTDScalarB::comaBBB( _flat_460, _flat_465) ; 
  _flat_474 = true; 
  _flat_473 = false; 
  _flat_472 = true; 
  _flat_471 = false; 
  _flat_470 = [ _flat_471, _flat_472, _flat_473, _flat_474 ]; 
  A_103 = wrapper:UTDScalarB::comaBBB( _flat_470, A_102) ; 
  _flat_479 = true; 
  _flat_478 = false; 
  _flat_477 = true; 
  _flat_476 = false; 
  _flat_475 = [ _flat_476, _flat_477, _flat_478, _flat_479 ]; 
  A_104 = wrapper:UTDScalarB::comaBBB( _flat_475, A_103) ; 
  _flat_482 = 4; 
  _flat_481 = 4; 
  _flat_480 = [ _flat_481, _flat_482 ]; 
  A_105 = wrapper:UTDScalarB::rhoIBB( _flat_480, A_104) ; 
  A_106 = wrapper:UTDScalarB::jotdotneBBB( BVL_0, BVR_0) ; 
  A_115 = wrapper:UTDScalarB::sameBBB( A_106, A_105) ; 
  A_116 = wrapper:UTDScalarB::comaBBB( r_3, A_115) ; 
  r_4 = A_116; 
  A_119 = wrapper:UTDScalarB::neBBB( BM234_0, BS0_0) ; 
  A_121 = wrapper:UTDScalarB::sameBBB( A_119, BM234_0) ; 
  A_122 = wrapper:UTDScalarB::comaBBB( r_4, A_121) ; 
  r_5 = A_122; 
  A_124 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_126 = wrapper:UTDScalarB::neBBB( BM234_0, BS1_0) ; 
  A_128 = wrapper:UTDScalarB::sameBBB( A_126, A_124) ; 
  A_129 = wrapper:UTDScalarB::comaBBB( r_5, A_128) ; 
  r_6 = A_129; 
  A_131 = wrapper:UTDScalarB::rhoXBI( BM234_0) ; 
  _flat_483 = true; 
  A_132 = wrapper:UTDScalarB::rhoIBB( A_131, _flat_483) ; 
  A_133 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_135 = wrapper:UTDScalarB::neBBB( BM234_0, A_133) ; 
  A_137 = wrapper:UTDScalarB::sameBBB( A_135, A_132) ; 
  A_138 = wrapper:UTDScalarB::comaBBB( r_6, A_137) ; 
  r_7 = A_138; 
  A_141 = wrapper:UTDScalarB::neBBB( BM034_0, BS1_0) ; 
  A_143 = wrapper:UTDScalarB::sameBBB( A_141, BM034_0) ; 
  A_144 = wrapper:UTDScalarB::comaBBB( r_7, A_143) ; 
  r_8 = A_144; 
  A_147 = wrapper:UTDScalarB::neBBB( BM034_0, BM034_0) ; 
  A_149 = wrapper:UTDScalarB::sameBBB( A_147, BM034_0) ; 
  A_150 = wrapper:UTDScalarB::comaBBB( r_8, A_149) ; 
  r_9 = A_150; 
  A_153 = wrapper:UTDScalarB::neBBB( BM304_0, BS1_0) ; 
  A_155 = wrapper:UTDScalarB::sameBBB( A_153, BM304_0) ; 
  A_156 = wrapper:UTDScalarB::comaBBB( r_9, A_155) ; 
  r_10 = A_156; 
  A_159 = wrapper:UTDScalarB::neBBB( BM304_0, BM304_0) ; 
  A_161 = wrapper:UTDScalarB::sameBBB( A_159, BM304_0) ; 
  A_162 = wrapper:UTDScalarB::comaBBB( r_10, A_161) ; 
  r_11 = A_162; 
  A_165 = wrapper:UTDScalarB::neBBB( BM230_0, BS1_0) ; 
  A_167 = wrapper:UTDScalarB::sameBBB( A_165, BM230_0) ; 
  A_168 = wrapper:UTDScalarB::comaBBB( r_11, A_167) ; 
  r_12 = A_168; 
  A_171 = wrapper:UTDScalarB::neBBB( BM230_0, BM230_0) ; 
  A_173 = wrapper:UTDScalarB::sameBBB( A_171, BM230_0) ; 
  A_174 = wrapper:UTDScalarB::comaBBB( r_12, A_173) ; 
  r_13 = A_174; 
  r_13__SSA0_1 = _type_conv_( bool[.], r_13); 
  return( r_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::UTDScalarB_mainXXI(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile *, int UTDScalarB::UTDScalarB_mainXXI( Terminal::Terminal *_rso_498_TheTerminal { ,NN } , TermFile::TermFile *_rso_497_stdout { ,NN } )
/*
 *  UTDScalarB_mainXXI ::  ---
 */
{ 
  int r_10__SSA0_1 { , NN } ; 
  TermFile::TermFile _rso_497_stdout__SSA0_2 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_498_TheTerminal__SSA0_2 { , NN } ;  /* declared: Terminal::Terminal */
  TermFile::TermFile _rso_497_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_498_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */
  int A_94 { , NN } ; 
  int r_10 { , NN } ; 
  int A_90 { , NN } ; 
  bool{1} _flat_486 { , NN } ; 
  bool A_86 { , NN } ; 
  bool[15] A_85 { , NN } ; 
  bool[15] r_9 { , NN } ; 
  bool[15] A_81 { , NN } ; 
  bool[14] A_80 { , NN } ; 
  bool[1]{1} r_8 { , NN } ; 
  bool[1]{1} A_78 { , NN } ; 
  bool{1} _flat_485 { , NN } ; 
  int{168...} QUADrl_0 { , NN } ; 
  int{80} QUADpw_0 { , NN } ; 
  int{10} QUADpp_0 { , NN } ; 
  double{0.0...} QUADct_0 { , NN } ; 
  int QUADio_0 { , NN } ; 
  bool{0} _flat_484 { , NN } ; 

  _flat_484 = false; 
  QUADio_0 = wrapper:UTDScalarB:Array::toi( _flat_484) ; 
  QUADct_0 = 1.0000000000000000303737455634003709136034716842278413651001756079494953155517578125e-13; 
  QUADpp_0 = 10; 
  QUADpw_0 = 80; 
  QUADrl_0 = 16807; 
  _flat_485 = true; 
  A_78 = [ _flat_485 ]; 
  r_8 = A_78; 
  A_80 = wrapper:UTDScalarB::NEXXB() ; 
  A_81 = wrapper:UTDScalarB::comaBBB( r_8, A_80) ; 
  r_9 = A_81; 
  _rso_498_TheTerminal__SSA0_1, _rso_497_stdout__SSA0_1, A_85 = wrapper:UTDScalarB::quadXBB( _rso_498_TheTerminal, _rso_497_stdout, r_9, QUADpp_0, QUADpw_0) ; 
  A_86 = wrapper:UTDScalarB::andslXBBQUICKSTOP( r_9) ; 
  _flat_486 = true; 
  A_90 = wrapper:UTDScalarB::barBBI( _flat_486, A_86) ; 
  r_10 = A_90; 
  _rso_498_TheTerminal__SSA0_2, _rso_497_stdout__SSA0_2, A_94 = wrapper:UTDScalarB::quadXII( _rso_498_TheTerminal__SSA0_1, _rso_497_stdout__SSA0_1, A_90, QUADpp_0, QUADpw_0) ; 
  r_10__SSA0_1 = _type_conv_( int, r_10); 
  return( _rso_498_TheTerminal__SSA0_2, _rso_497_stdout__SSA0_2, r_10__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::!(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::!( bool[+] A { ,NN } )
/*
 *  ! ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1300 { , NN } ; 
  bool _flat_1301 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1296 { , NN } ; 
  bool{0} _flat_1297 { , NN } ; 
  int[.] _flat_1298 { , NN } ; 
  int{0} _flat_1299 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1299 = 0; 
  _flat_1298 = _mul_SxV_( _flat_1299, shp); 
  _flat_1297 = wrapper:ArrayArith::zero( A) ; 
  _flat_1296 = _not_S_( _flat_1297); 
  res = with {
        /* Partn */
        (_flat_1298 <= iv < shp)
        { 
          _flat_1301 = _sel_VxA_( iv, A); 
          _flat_1300 = _not_S_( _flat_1301); 
        } : _flat_1300 ; 
         } :
      genarray( shp, _flat_1296); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::!(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::!( bool A { ,NN } )
/*
 *  ! ::  ---
 */
{ 
  bool _flat_100__SSA0_1 { , NN } ; 
  bool _flat_100 { , NN } ; 

  _flat_100 = _not_S_( A); 
  _flat_100__SSA0_1 = _type_conv_( bool, _flat_100); 
  return( _flat_100__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::to_bool(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::to_bool( int[+] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1334 { , NN } ; 
  int _flat_1335 { , NN } ; 
  int[.] iv { , NN } ; 
  bool _flat_1330 { , NN } ; 
  int{0} _flat_1331 { , NN } ; 
  int[.] _flat_1332 { , NN } ; 
  int{0} _flat_1333 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1333 = 0; 
  _flat_1332 = _mul_SxV_( _flat_1333, shp); 
  _flat_1331 = wrapper:ArrayArith::zero( A) ; 
  _flat_1330 = wrapper:ArrayArith::to_bool( _flat_1331) ; 
  res = with {
        /* Partn */
        (_flat_1332 <= iv < shp)
        { 
          _flat_1335 = _sel_VxA_( iv, A); 
          _flat_1334 = wrapper:ArrayArith::to_bool( _flat_1335) ; 
        } : _flat_1334 ; 
         } :
      genarray( shp, _flat_1330); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * Bool::to_bool(...) [ body ]
 ****************************************************************************/
inline
bool Bool::to_bool( int i { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_8 { , NN } ; 
  int{1} _flat_9 { , NN } ; 

  _flat_9 = 1; 
  _flat_8 = _eq_SxS_( _flat_9, i); 
  res = Bool::to_bool__Cond_6( _flat_8, i) ; 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::to_bool(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayArith::to_bool( bool[*] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * Bool::to_bool(...) [ body ]
 ****************************************************************************/
inline
bool Bool::to_bool( bool i { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  bool i__SSA0_1 { , NN } ;  /* declared: bool */

  i__SSA0_1 = _type_conv_( bool, i); 
  return( i__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::shape(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayBasics::shape( int[*] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_6__SSA0_1 { , NN } ; 
  int[.] _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::shape(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayBasics::shape( bool[*] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_11__SSA0_1 { , NN } ; 
  int[.] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::sel( int[.] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[.] _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1] _flat_21 { , NN } ; 
  int[.] _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::sel( int idx { ,NN } , int[*] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int[*] _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::sel( int[.] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1] _flat_66 { , NN } ; 
  int[.] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::sel( int idx { ,NN } , bool[*] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] _flat_82 { , NN } ; 
  int[1] _flat_83 { , NN } ; 

  _flat_83 = [ idx ]; 
  _flat_82 = wrapper:ArrayBasics::sel( _flat_83, A) ; 
  return( _flat_82); 
}



/****************************************************************************
 * ArrayArith::&(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::&( bool[+] A { ,NN } , bool[+] B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1285 { , NN } ; 
  bool _flat_1286 { , NN } ; 
  bool _flat_1287 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1280 { , NN } ; 
  bool{1} _flat_1281 { , NN } ; 
  bool{1} _flat_1282 { , NN } ; 
  int[.] _flat_1283 { , NN } ; 
  int{0} _flat_1284 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_1284 = 0; 
  _flat_1283 = _mul_SxV_( _flat_1284, shp); 
  _flat_1282 = wrapper:ArrayArith::one( B) ; 
  _flat_1281 = wrapper:ArrayArith::one( A) ; 
  _flat_1280 = _and_SxS_( _flat_1281, _flat_1282); 
  res = with {
        /* Partn */
        (_flat_1283 <= iv < shp)
        { 
          _flat_1287 = _sel_VxA_( iv, B); 
          _flat_1286 = _sel_VxA_( iv, A); 
          _flat_1285 = _and_SxS_( _flat_1286, _flat_1287); 
        } : _flat_1285 ; 
         } :
      genarray( shp, _flat_1280); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::&(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::&( bool[+] A { ,NN } , bool B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1321 { , NN } ; 
  bool _flat_1322 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1316 { , NN } ; 
  bool{1} _flat_1317 { , NN } ; 
  bool{1} _flat_1318 { , NN } ; 
  int[.] _flat_1319 { , NN } ; 
  int{0} _flat_1320 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1320 = 0; 
  _flat_1319 = _mul_SxV_( _flat_1320, shp); 
  _flat_1318 = wrapper:ArrayArith::one( B) ; 
  _flat_1317 = wrapper:ArrayArith::one( A) ; 
  _flat_1316 = _and_SxS_( _flat_1317, _flat_1318); 
  res = with {
        /* Partn */
        (_flat_1319 <= iv < shp)
        { 
          _flat_1322 = _sel_VxA_( iv, A); 
          _flat_1321 = _and_SxS_( _flat_1322, B); 
        } : _flat_1321 ; 
         } :
      genarray( shp, _flat_1316); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::&(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::&( bool A { ,NN } , bool[+] B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1307 { , NN } ; 
  bool _flat_1308 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1302 { , NN } ; 
  bool{1} _flat_1303 { , NN } ; 
  bool{1} _flat_1304 { , NN } ; 
  int[.] _flat_1305 { , NN } ; 
  int{0} _flat_1306 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_1306 = 0; 
  _flat_1305 = _mul_SxV_( _flat_1306, shp); 
  _flat_1304 = wrapper:ArrayArith::one( B) ; 
  _flat_1303 = wrapper:ArrayArith::one( A) ; 
  _flat_1302 = _and_SxS_( _flat_1303, _flat_1304); 
  res = with {
        /* Partn */
        (_flat_1305 <= iv < shp)
        { 
          _flat_1308 = _sel_VxA_( iv, B); 
          _flat_1307 = _and_SxS_( A, _flat_1308); 
        } : _flat_1307 ; 
         } :
      genarray( shp, _flat_1302); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::&(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::&( bool A { ,NN } , bool B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool _flat_98__SSA0_1 { , NN } ; 
  bool _flat_98 { , NN } ; 

  _flat_98 = _and_SxS_( A, B); 
  _flat_98__SSA0_1 = _type_conv_( bool, _flat_98); 
  return( _flat_98__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::==(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::==( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_625 { , NN } ; 
  int _flat_626 { , NN } ; 
  int _flat_627 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_620 { , NN } ; 
  int{1} _flat_621 { , NN } ; 
  int{1} _flat_622 { , NN } ; 
  int[.] _flat_623 { , NN } ; 
  int{0} _flat_624 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_624 = 0; 
  _flat_623 = _mul_SxV_( _flat_624, shp); 
  _flat_622 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_621 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_620 = _eq_SxS_( _flat_621, _flat_622); 
  res = with {
        /* Partn */
        (_flat_623 <= iv < shp)
        { 
          _flat_627 = _sel_VxA_( iv, B); 
          _flat_626 = _sel_VxA_( iv, A); 
          _flat_625 = _eq_SxS_( _flat_626, _flat_627); 
        } : _flat_625 ; 
         } :
      genarray( shp, _flat_620); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::==(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::==( int[+] A { ,NN } , int B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int _flat_716 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_710 { , NN } ; 
  int{1} _flat_711 { , NN } ; 
  int{1} _flat_712 { , NN } ; 
  int[.] _flat_713 { , NN } ; 
  int{0} _flat_714 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_714 = 0; 
  _flat_713 = _mul_SxV_( _flat_714, shp); 
  _flat_712 = wrapper:ArrayArith::one( B) ; 
  _flat_711 = wrapper:ArrayArith::one( A) ; 
  _flat_710 = _eq_SxS_( _flat_711, _flat_712); 
  res = with {
        /* Partn */
        (_flat_713 <= iv < shp)
        { 
          _flat_716 = _sel_VxA_( iv, A); 
          _flat_715 = _eq_SxS_( _flat_716, B); 
        } : _flat_715 ; 
         } :
      genarray( shp, _flat_710); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::==(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::==( int A { ,NN } , int[+] B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_673 { , NN } ; 
  int _flat_674 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_668 { , NN } ; 
  int{1} _flat_669 { , NN } ; 
  int{1} _flat_670 { , NN } ; 
  int[.] _flat_671 { , NN } ; 
  int{0} _flat_672 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_672 = 0; 
  _flat_671 = _mul_SxV_( _flat_672, shp); 
  _flat_670 = wrapper:ArrayArith::one( B) ; 
  _flat_669 = wrapper:ArrayArith::one( A) ; 
  _flat_668 = _eq_SxS_( _flat_669, _flat_670); 
  res = with {
        /* Partn */
        (_flat_671 <= iv < shp)
        { 
          _flat_674 = _sel_VxA_( iv, B); 
          _flat_673 = _eq_SxS_( A, _flat_674); 
        } : _flat_673 ; 
         } :
      genarray( shp, _flat_668); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::==(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::==( int A { ,NN } , int B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  bool _flat_62__SSA0_1 { , NN } ; 
  bool _flat_62 { , NN } ; 

  _flat_62 = _eq_SxS_( A, B); 
  _flat_62__SSA0_1 = _type_conv_( bool, _flat_62); 
  return( _flat_62__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::==(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::==( bool A { ,NN } , bool B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  bool _flat_92__SSA0_1 { , NN } ; 
  bool _flat_92 { , NN } ; 

  _flat_92 = _eq_SxS_( A, B); 
  _flat_92__SSA0_1 = _type_conv_( bool, _flat_92); 
  return( _flat_92__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::!=(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::!=( bool A { ,NN } , bool B { ,NN } )
/*
 *  != ::  ---
 */
{ 
  bool _flat_93__SSA0_1 { , NN } ; 
  bool _flat_93 { , NN } ; 

  _flat_93 = _neq_SxS_( A, B); 
  _flat_93__SSA0_1 = _type_conv_( bool, _flat_93); 
  return( _flat_93__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::-(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::-( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_13 { , NN } ; 
  int _flat_14 { , NN } ; 
  int _flat_15 { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_8 { , NN } ; 
  int{1} _flat_9 { , NN } ; 
  int{1} _flat_10 { , NN } ; 
  int[.] _flat_11 { , NN } ; 
  int{0} _flat_12 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_12 = 0; 
  _flat_11 = _mul_SxV_( _flat_12, shp); 
  _flat_10 = wrapper:ArrayArith::one( B) ; 
  _flat_9 = wrapper:ArrayArith::one( A) ; 
  _flat_8 = _sub_SxS_( _flat_9, _flat_10); 
  res = with {
        /* Partn */
        (_flat_11 <= iv < shp)
        { 
          _flat_15 = _sel_VxA_( iv, B); 
          _flat_14 = _sel_VxA_( iv, A); 
          _flat_13 = _sub_SxS_( _flat_14, _flat_15); 
        } : _flat_13 ; 
         } :
      genarray( shp, _flat_8); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::-(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::-( int[+] A { ,NN } , int B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_114 { , NN } ; 
  int _flat_115 { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_109 { , NN } ; 
  int{1} _flat_110 { , NN } ; 
  int{1} _flat_111 { , NN } ; 
  int[.] _flat_112 { , NN } ; 
  int{0} _flat_113 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_113 = 0; 
  _flat_112 = _mul_SxV_( _flat_113, shp); 
  _flat_111 = wrapper:ArrayArith::one( B) ; 
  _flat_110 = wrapper:ArrayArith::one( A) ; 
  _flat_109 = _sub_SxS_( _flat_110, _flat_111); 
  res = with {
        /* Partn */
        (_flat_112 <= iv < shp)
        { 
          _flat_115 = _sel_VxA_( iv, A); 
          _flat_114 = _sub_SxS_( _flat_115, B); 
        } : _flat_114 ; 
         } :
      genarray( shp, _flat_109); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::-(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::-( int A { ,NN } , int[+] B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_72 { , NN } ; 
  int _flat_73 { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_67 { , NN } ; 
  int{1} _flat_68 { , NN } ; 
  int{1} _flat_69 { , NN } ; 
  int[.] _flat_70 { , NN } ; 
  int{0} _flat_71 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_71 = 0; 
  _flat_70 = _mul_SxV_( _flat_71, shp); 
  _flat_69 = wrapper:ArrayArith::one( B) ; 
  _flat_68 = wrapper:ArrayArith::one( A) ; 
  _flat_67 = _sub_SxS_( _flat_68, _flat_69); 
  res = with {
        /* Partn */
        (_flat_70 <= iv < shp)
        { 
          _flat_73 = _sel_VxA_( iv, B); 
          _flat_72 = _sub_SxS_( A, _flat_73); 
        } : _flat_72 ; 
         } :
      genarray( shp, _flat_67); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::-(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::-( int A { ,NN } , int B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  int _flat_13__SSA0_1 { , NN } ; 
  int _flat_13 { , NN } ; 

  _flat_13 = _sub_SxS_( A, B); 
  _flat_13__SSA0_1 = _type_conv_( int, _flat_13); 
  return( _flat_13__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::toi(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::toi( int[+] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_1370 { , NN } ; 
  int _flat_1371 { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_1366 { , NN } ; 
  int{0} _flat_1367 { , NN } ; 
  int[.] _flat_1368 { , NN } ; 
  int{0} _flat_1369 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1369 = 0; 
  _flat_1368 = _mul_SxV_( _flat_1369, shp); 
  _flat_1367 = wrapper:UTDScalarB:ArrayArith::zero( A) ; 
  _flat_1366 = _toi_S_( _flat_1367); 
  res = with {
        /* Partn */
        (_flat_1368 <= iv < shp)
        { 
          _flat_1371 = _sel_VxA_( iv, A); 
          _flat_1370 = _toi_S_( _flat_1371); 
        } : _flat_1370 ; 
         } :
      genarray( shp, _flat_1366); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::toi(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayArith::toi( int[*] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * ArrayArith::toi(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::toi( bool[+] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_1730 { , NN } ; 
  bool _flat_1731 { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_1726 { , NN } ; 
  bool{0} _flat_1727 { , NN } ; 
  int[.] _flat_1728 { , NN } ; 
  int{0} _flat_1729 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1729 = 0; 
  _flat_1728 = _mul_SxV_( _flat_1729, shp); 
  _flat_1727 = wrapper:ArrayArith::zero( A) ; 
  _flat_1726 = _toi_S_( _flat_1727); 
  res = with {
        /* Partn */
        (_flat_1728 <= iv < shp)
        { 
          _flat_1731 = _sel_VxA_( iv, A); 
          _flat_1730 = _toi_S_( _flat_1731); 
        } : _flat_1730 ; 
         } :
      genarray( shp, _flat_1726); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::toi(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::toi( bool A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int _flat_127__SSA0_1 { , NN } ; 
  int _flat_127 { , NN } ; 

  _flat_127 = _toi_S_( A); 
  _flat_127__SSA0_1 = _type_conv_( int, _flat_127); 
  return( _flat_127__SSA0_1); 
}



/****************************************************************************
 * Bool::toi(...) [ body ]
 ****************************************************************************/
inline
int Bool::toi( bool b { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 

  res = Bool::toi__Cond_0( b) ; 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::genarray(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::genarray( int[.] shp { ,NN } , int[*] val { ,NN } )
/*
 *  genarray ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_84 { , NN } ; 
  int{0} _flat_85 { , NN } ; 

  _flat_85 = 0; 
  _flat_84 = _mul_SxV_( _flat_85, shp); 
  res = with {
        /* Partn */
        (_flat_84 <= iv < shp)
        { 
        } : val ; 
         } :
      genarray( shp, val); 
  return( res); 
}



/****************************************************************************
 * ArrayBasics::genarray(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::genarray( int[.] shp { ,NN } , bool[*] val { ,NN } )
/*
 *  genarray ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_94 { , NN } ; 
  int{0} _flat_95 { , NN } ; 

  _flat_95 = 0; 
  _flat_94 = _mul_SxV_( _flat_95, shp); 
  res = with {
        /* Partn */
        (_flat_94 <= iv < shp)
        { 
        } : val ; 
         } :
      genarray( shp, val); 
  return( res); 
}



/****************************************************************************
 * ArrayTransform::prod(...) [ body ]
 ****************************************************************************/
inline
int ArrayTransform::prod( int[*] arr_a { ,NN } )
/*
 *  prod ::  ---
 */
{ 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 
  int _flat_1721 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_1716 { , NN } ; 
  int[.] _flat_1717 { , NN } ; 
  int{0} _flat_1718 { , NN } ; 
  int[.] _flat_1719 { , NN } ; 
  int[.] _flat_1720 { , NN } ; 

  _flat_1720 = _shape_A_( arr_a); 
  _flat_1719 = _shape_A_( arr_a); 
  _flat_1718 = 0; 
  _flat_1717 = _mul_SxV_( _flat_1718, _flat_1719); 
  _flat_1716 = 1; 
  res = with {
        /* Partn */
        (_flat_1717 <= iv < _flat_1720)
        { 
          _flat_1721 = _sel_VxA_( iv, arr_a); 
        } : _flat_1721 ; 
         } :
      fold( UTDScalarB:ArrayArith::*(), _flat_1716); 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayIO::show(...) [ body ]
 ****************************************************************************/
inline
TermFile::TermFile * ArrayIO::show( TermFile::TermFile *_rso_97_stdout { ,NN } , int[+] arr { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_97_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  int _flat_72 { , NN } ; 
  int[.] _flat_73 { , NN } ; 
  char[+] carr { , NN } ; 

  carr = wrapper:ArrayIO:ArrayFormat::format( arr) ; 
  _flat_73 = wrapper:ArrayIO:Structures::shape( carr) ; 
  _flat_72 = wrapper:ArrayIO:Structures::dim( carr) ; 
  _rso_97_stdout__SSA0_1 = wrapper:ArrayIO::showarray( _rso_97_stdout, _flat_72, _flat_73, carr) ; 
  return( _rso_97_stdout__SSA0_1); 
}



/****************************************************************************
 * StdIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * StdIO::show( Terminal::Terminal *_rso_340_TheTerminal { ,NN } , TermFile::TermFile *_rso_339_stdout { ,NN } , int[+] arr { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_339_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */

  _rso_339_stdout__SSA0_1 = ArrayIO::show( _rso_339_stdout, arr) ; 
  return( _rso_340_TheTerminal, _rso_339_stdout__SSA0_1); 
}



/****************************************************************************
 * ScalarIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * ScalarIO::show( Terminal::Terminal *_rso_981_TheTerminal { ,NN } , TermFile::TermFile *_rso_980_stdout { ,NN } , int n { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_980_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_981_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */
  String::string _flat_222 { , NN } ; 
  char[4]{%,d...} _flat_223 { , NN } ; 
  char{%} _flat_224 { , NN } ; 
  char{d} _flat_225 { , NN } ; 
  char{
} _flat_226 { , NN } ; 
  char{} _flat_227 { , NN } ; 
  int{3} _flat_228 { , NN } ; 

  _flat_228 = 3; 
  _flat_227 = '\0'; 
  _flat_226 = '\n'; 
  _flat_225 = 'd'; 
  _flat_224 = '%'; 
  _flat_223 = [ _flat_224, _flat_225, _flat_226, _flat_227 ]; 
  _flat_222 = wrapper:String::to_string( _flat_223, _flat_228) ; 
  _rso_981_TheTerminal__SSA0_1, _rso_980_stdout__SSA0_1 = wrapper:TermFile::printf( _rso_981_TheTerminal, _rso_980_stdout, _flat_222, n) ; 
  return( _rso_981_TheTerminal__SSA0_1, _rso_980_stdout__SSA0_1); 
}



/****************************************************************************
 * StdIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * StdIO::show( Terminal::Terminal *_rso_338_TheTerminal { ,NN } , TermFile::TermFile *_rso_337_stdout { ,NN } , int n { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_337_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_338_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_338_TheTerminal__SSA0_1, _rso_337_stdout__SSA0_1 = ScalarIO::show( _rso_338_TheTerminal, _rso_337_stdout, n) ; 
  return( _rso_338_TheTerminal__SSA0_1, _rso_337_stdout__SSA0_1); 
}



/****************************************************************************
 * ArrayIO::show(...) [ body ]
 ****************************************************************************/
inline
TermFile::TermFile * ArrayIO::show( TermFile::TermFile *_rso_100_stdout { ,NN } , bool[+] arr { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_100_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  int _flat_78 { , NN } ; 
  int[.] _flat_79 { , NN } ; 
  char[+] carr { , NN } ; 

  carr = wrapper:ArrayIO:ArrayFormat::format( arr) ; 
  _flat_79 = wrapper:ArrayIO:Structures::shape( carr) ; 
  _flat_78 = wrapper:ArrayIO:Structures::dim( carr) ; 
  _rso_100_stdout__SSA0_1 = wrapper:ArrayIO::showarray( _rso_100_stdout, _flat_78, _flat_79, carr) ; 
  return( _rso_100_stdout__SSA0_1); 
}



/****************************************************************************
 * StdIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * StdIO::show( Terminal::Terminal *_rso_322_TheTerminal { ,NN } , TermFile::TermFile *_rso_321_stdout { ,NN } , bool[+] arr { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_321_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */

  _rso_321_stdout__SSA0_1 = ArrayIO::show( _rso_321_stdout, arr) ; 
  return( _rso_322_TheTerminal, _rso_321_stdout__SSA0_1); 
}



/****************************************************************************
 * ScalarIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * ScalarIO::show( Terminal::Terminal *_rso_991_TheTerminal { ,NN } , TermFile::TermFile *_rso_990_stdout { ,NN } , bool n { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_990_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_991_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */
  String::string _flat_258 { , NN } ; 
  char[4]{%,d...} _flat_259 { , NN } ; 
  char{%} _flat_260 { , NN } ; 
  char{d} _flat_261 { , NN } ; 
  char{
} _flat_262 { , NN } ; 
  char{} _flat_263 { , NN } ; 
  int{3} _flat_264 { , NN } ; 

  _flat_264 = 3; 
  _flat_263 = '\0'; 
  _flat_262 = '\n'; 
  _flat_261 = 'd'; 
  _flat_260 = '%'; 
  _flat_259 = [ _flat_260, _flat_261, _flat_262, _flat_263 ]; 
  _flat_258 = wrapper:String::to_string( _flat_259, _flat_264) ; 
  _rso_991_TheTerminal__SSA0_1, _rso_990_stdout__SSA0_1 = wrapper:TermFile::printf( _rso_991_TheTerminal, _rso_990_stdout, _flat_258, n) ; 
  return( _rso_991_TheTerminal__SSA0_1, _rso_990_stdout__SSA0_1); 
}



/****************************************************************************
 * StdIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * StdIO::show( Terminal::Terminal *_rso_320_TheTerminal { ,NN } , TermFile::TermFile *_rso_319_stdout { ,NN } , bool n { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_319_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_320_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_320_TheTerminal__SSA0_1, _rso_319_stdout__SSA0_1 = ScalarIO::show( _rso_320_TheTerminal, _rso_319_stdout, n) ; 
  return( _rso_320_TheTerminal__SSA0_1, _rso_319_stdout__SSA0_1); 
}



/****************************************************************************
 * ArrayTransform::++(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayTransform::++( bool[+] arr_a { ,NN } , bool[+] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  bool[+] res__SSA0_2 { , NN } ; 
  bool[*] res__SSA0_1 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[.] _flat_725 { , NN } ; 
  int[.] _flat_723 { , NN } ; 
  int[.] offset { , NN } ; 
  int[.] _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[.] _flat_722 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[.] _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[.] _flat_714 { , NN } ; 
  int[.] new_shp { , NN } ; 
  int[.] _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int _flat_702 { , NN } ; 
  int _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[.] _flat_706 { , NN } ; 
  int _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[.] _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1 < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * ArrayTransform::++(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayTransform::++( bool[+] arr_a { ,NN } , bool arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  bool[+] res__SSA0_2 { , NN } ; 
  bool[*] res__SSA0_1 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  int[.] _flat_746 { , NN } ; 
  int[.] offset { , NN } ; 
  int[.] _flat_739 { , NN } ; 
  int{0} _flat_740 { , NN } ; 
  int{0} _flat_741 { , NN } ; 
  int _flat_742 { , NN } ; 
  int[1]{0} _flat_743 { , NN } ; 
  int{0} _flat_744 { , NN } ; 
  int[.] _flat_745 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_738 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_734 { , NN } ; 
  int[.] _flat_735 { , NN } ; 
  int{0} _flat_736 { , NN } ; 
  int[.] _flat_737 { , NN } ; 
  int[.] new_shp { , NN } ; 
  int[.] _flat_726 { , NN } ; 
  int{0} _flat_727 { , NN } ; 
  int _flat_728 { , NN } ; 
  int _flat_729 { , NN } ; 
  int[1]{0} _flat_730 { , NN } ; 
  int{0} _flat_731 { , NN } ; 
  int[.] _flat_732 { , NN } ; 
  int{1} _flat_733 { , NN } ; 

  _flat_733 = 1; 
  _flat_732 = _shape_A_( arr_a); 
  _flat_731 = 0; 
  _flat_730 = [ _flat_731 ]; 
  _flat_729 = _sel_VxA_( _flat_730, _flat_732); 
  _flat_728 = _add_SxS_( _flat_729, _flat_733); 
  _flat_727 = 0; 
  _flat_726 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_726, _flat_727, _flat_728); 
  _flat_737 = _shape_A_( arr_a); 
  _flat_736 = 0; 
  _flat_735 = _mul_SxV_( _flat_736, new_shp); 
  _flat_734 = false; 
  res = with {
        /* Partn */
        (_flat_735 <= iv < _flat_737)
        { 
          _flat_738 = _sel_VxA_( iv, arr_a); 
        } : _flat_738 ; 
         } :
      genarray( new_shp, _flat_734); 
  _flat_745 = _shape_A_( arr_a); 
  _flat_744 = 0; 
  _flat_743 = [ _flat_744 ]; 
  _flat_742 = _sel_VxA_( _flat_743, _flat_745); 
  _flat_741 = 0; 
  _flat_740 = 0; 
  _flat_739 = _mul_SxV_( _flat_740, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_739, _flat_741, _flat_742); 
  _flat_746 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1 < _flat_746)
        { 
        } : arr_b ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * ArrayTransform::++(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayTransform::++( bool arr_a { ,NN } , bool[+] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  bool[+] res__SSA0_2 { , NN } ; 
  bool[*] res__SSA0_1 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  int[.] _flat_767 { , NN } ; 
  int[.] offset { , NN } ; 
  int[.] _flat_760 { , NN } ; 
  int{0} _flat_761 { , NN } ; 
  int{0} _flat_762 { , NN } ; 
  int _flat_763 { , NN } ; 
  int[1]{0} _flat_764 { , NN } ; 
  int{0} _flat_765 { , NN } ; 
  int[.] _flat_766 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_759 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_755 { , NN } ; 
  int[.] _flat_756 { , NN } ; 
  int{0} _flat_757 { , NN } ; 
  int[.] _flat_758 { , NN } ; 
  int[.] new_shp { , NN } ; 
  int[.] _flat_747 { , NN } ; 
  int{0} _flat_748 { , NN } ; 
  int _flat_749 { , NN } ; 
  int{1} _flat_750 { , NN } ; 
  int _flat_751 { , NN } ; 
  int[1]{0} _flat_752 { , NN } ; 
  int{0} _flat_753 { , NN } ; 
  int[.] _flat_754 { , NN } ; 

  _flat_754 = _shape_A_( arr_b); 
  _flat_753 = 0; 
  _flat_752 = [ _flat_753 ]; 
  _flat_751 = _sel_VxA_( _flat_752, _flat_754); 
  _flat_750 = 1; 
  _flat_749 = _add_SxS_( _flat_750, _flat_751); 
  _flat_748 = 0; 
  _flat_747 = _shape_A_( arr_b); 
  new_shp = _idx_modarray_AxSxS_( _flat_747, _flat_748, _flat_749); 
  _flat_758 = _shape_A_( arr_b); 
  _flat_757 = 0; 
  _flat_756 = _mul_SxV_( _flat_757, new_shp); 
  _flat_755 = false; 
  res = with {
        /* Partn */
        (_flat_756 <= iv < _flat_758)
        { 
          _flat_759 = _sel_VxA_( iv, arr_b); 
        } : _flat_759 ; 
         } :
      genarray( new_shp, _flat_755); 
  _flat_766 = _shape_A_( arr_b); 
  _flat_765 = 0; 
  _flat_764 = [ _flat_765 ]; 
  _flat_763 = _sel_VxA_( _flat_764, _flat_766); 
  _flat_762 = 0; 
  _flat_761 = 0; 
  _flat_760 = _mul_SxV_( _flat_761, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_760, _flat_762, _flat_763); 
  _flat_767 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1 < _flat_767)
        { 
        } : arr_a ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * ArrayTransform::++(...) [ body ]
 ****************************************************************************/
inline
bool[2] ArrayTransform::++( bool arr_a { ,NN } , bool arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  bool[2] res__SSA0_1 { , NN } ; 
  bool[2] res { , NN } ; 

  res = [ arr_a, arr_b ]; 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayTransform::all(...) [ body ]
 ****************************************************************************/
inline
bool ArrayTransform::all( bool[*] arr_a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1793 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1788 { , NN } ; 
  int[.] _flat_1789 { , NN } ; 
  int{0} _flat_1790 { , NN } ; 
  int[.] _flat_1791 { , NN } ; 
  int[.] _flat_1792 { , NN } ; 

  _flat_1792 = _shape_A_( arr_a); 
  _flat_1791 = _shape_A_( arr_a); 
  _flat_1790 = 0; 
  _flat_1789 = _mul_SxV_( _flat_1790, _flat_1791); 
  _flat_1788 = true; 
  res = with {
        /* Partn */
        (_flat_1789 <= iv < _flat_1792)
        { 
          _flat_1793 = _sel_VxA_( iv, arr_a); 
        } : _flat_1793 ; 
         } :
      fold( ArrayArith::&(), _flat_1788); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::all(...) [ body ]
 ****************************************************************************/
inline
bool ArrayArith::all( bool[*] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool[*] _flat_1797 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[.] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[.] _flat_1795 { , NN } ; 
  int[.] _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::*( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_21 { , NN } ; 
  int _flat_22 { , NN } ; 
  int _flat_23 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_16 { , NN } ; 
  int{1} _flat_17 { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[.] _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_20 = 0; 
  _flat_19 = _mul_SxV_( _flat_20, shp); 
  _flat_18 = wrapper:ArrayArith::one( B) ; 
  _flat_17 = wrapper:ArrayArith::one( A) ; 
  _flat_16 = _mul_SxS_( _flat_17, _flat_18); 
  res = with {
        /* Partn */
        (_flat_19 <= iv < shp)
        { 
          _flat_23 = _sel_VxA_( iv, B); 
          _flat_22 = _sel_VxA_( iv, A); 
          _flat_21 = _mul_SxS_( _flat_22, _flat_23); 
        } : _flat_21 ; 
         } :
      genarray( shp, _flat_16); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::*( int[+] A { ,NN } , int B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_121 { , NN } ; 
  int _flat_122 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_116 { , NN } ; 
  int{1} _flat_117 { , NN } ; 
  int{1} _flat_118 { , NN } ; 
  int[.] _flat_119 { , NN } ; 
  int{0} _flat_120 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_120 = 0; 
  _flat_119 = _mul_SxV_( _flat_120, shp); 
  _flat_118 = wrapper:ArrayArith::one( B) ; 
  _flat_117 = wrapper:ArrayArith::one( A) ; 
  _flat_116 = _mul_SxS_( _flat_117, _flat_118); 
  res = with {
        /* Partn */
        (_flat_119 <= iv < shp)
        { 
          _flat_122 = _sel_VxA_( iv, A); 
          _flat_121 = _mul_SxS_( _flat_122, B); 
        } : _flat_121 ; 
         } :
      genarray( shp, _flat_116); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::*( int A { ,NN } , int[+] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[.] _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::*(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::*( int A { ,NN } , int B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _flat_14__SSA0_1 { , NN } ; 
  int _flat_14 { , NN } ; 

  _flat_14 = _mul_SxS_( A, B); 
  _flat_14__SSA0_1 = _type_conv_( int, _flat_14); 
  return( _flat_14__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::>=(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::>=( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  >= ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_665 { , NN } ; 
  int _flat_666 { , NN } ; 
  int _flat_667 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_660 { , NN } ; 
  int{1} _flat_661 { , NN } ; 
  int{1} _flat_662 { , NN } ; 
  int[.] _flat_663 { , NN } ; 
  int{0} _flat_664 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_664 = 0; 
  _flat_663 = _mul_SxV_( _flat_664, shp); 
  _flat_662 = wrapper:ArrayArith::one( B) ; 
  _flat_661 = wrapper:ArrayArith::one( A) ; 
  _flat_660 = _ge_SxS_( _flat_661, _flat_662); 
  res = with {
        /* Partn */
        (_flat_663 <= iv < shp)
        { 
          _flat_667 = _sel_VxA_( iv, B); 
          _flat_666 = _sel_VxA_( iv, A); 
          _flat_665 = _ge_SxS_( _flat_666, _flat_667); 
        } : _flat_665 ; 
         } :
      genarray( shp, _flat_660); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::>=(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::>=( int[+] A { ,NN } , int B { ,NN } )
/*
 *  >= ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_750 { , NN } ; 
  int _flat_751 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_745 { , NN } ; 
  int{1} _flat_746 { , NN } ; 
  int{1} _flat_747 { , NN } ; 
  int[.] _flat_748 { , NN } ; 
  int{0} _flat_749 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_749 = 0; 
  _flat_748 = _mul_SxV_( _flat_749, shp); 
  _flat_747 = wrapper:ArrayArith::one( B) ; 
  _flat_746 = wrapper:ArrayArith::one( A) ; 
  _flat_745 = _ge_SxS_( _flat_746, _flat_747); 
  res = with {
        /* Partn */
        (_flat_748 <= iv < shp)
        { 
          _flat_751 = _sel_VxA_( iv, A); 
          _flat_750 = _ge_SxS_( _flat_751, B); 
        } : _flat_750 ; 
         } :
      genarray( shp, _flat_745); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::>=(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::>=( int A { ,NN } , int[+] B { ,NN } )
/*
 *  >= ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_708 { , NN } ; 
  int _flat_709 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_703 { , NN } ; 
  int{1} _flat_704 { , NN } ; 
  int{1} _flat_705 { , NN } ; 
  int[.] _flat_706 { , NN } ; 
  int{0} _flat_707 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_707 = 0; 
  _flat_706 = _mul_SxV_( _flat_707, shp); 
  _flat_705 = wrapper:ArrayArith::one( B) ; 
  _flat_704 = wrapper:ArrayArith::one( A) ; 
  _flat_703 = _ge_SxS_( _flat_704, _flat_705); 
  res = with {
        /* Partn */
        (_flat_706 <= iv < shp)
        { 
          _flat_709 = _sel_VxA_( iv, B); 
          _flat_708 = _ge_SxS_( A, _flat_709); 
        } : _flat_708 ; 
         } :
      genarray( shp, _flat_703); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::>=(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::>=( int A { ,NN } , int B { ,NN } )
/*
 *  >= ::  ---
 */
{ 
  bool _flat_67__SSA0_1 { , NN } ; 
  bool _flat_67 { , NN } ; 

  _flat_67 = _ge_SxS_( A, B); 
  _flat_67__SSA0_1 = _type_conv_( bool, _flat_67); 
  return( _flat_67__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::+(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::+( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  + ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_5 { , NN } ; 
  int _flat_6 { , NN } ; 
  int _flat_7 { , NN } ; 
  int[.] iv { , NN } ; 
  int{2} _flat_0 { , NN } ; 
  int{1} _flat_1 { , NN } ; 
  int{1} _flat_2 { , NN } ; 
  int[.] _flat_3 { , NN } ; 
  int{0} _flat_4 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_4 = 0; 
  _flat_3 = _mul_SxV_( _flat_4, shp); 
  _flat_2 = wrapper:ArrayArith::one( B) ; 
  _flat_1 = wrapper:ArrayArith::one( A) ; 
  _flat_0 = _add_SxS_( _flat_1, _flat_2); 
  res = with {
        /* Partn */
        (_flat_3 <= iv < shp)
        { 
          _flat_7 = _sel_VxA_( iv, B); 
          _flat_6 = _sel_VxA_( iv, A); 
          _flat_5 = _add_SxS_( _flat_6, _flat_7); 
        } : _flat_5 ; 
         } :
      genarray( shp, _flat_0); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::+(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::+( int[+] A { ,NN } , int B { ,NN } )
/*
 *  + ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_107 { , NN } ; 
  int _flat_108 { , NN } ; 
  int[.] iv { , NN } ; 
  int{2} _flat_102 { , NN } ; 
  int{1} _flat_103 { , NN } ; 
  int{1} _flat_104 { , NN } ; 
  int[.] _flat_105 { , NN } ; 
  int{0} _flat_106 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_106 = 0; 
  _flat_105 = _mul_SxV_( _flat_106, shp); 
  _flat_104 = wrapper:ArrayArith::one( B) ; 
  _flat_103 = wrapper:ArrayArith::one( A) ; 
  _flat_102 = _add_SxS_( _flat_103, _flat_104); 
  res = with {
        /* Partn */
        (_flat_105 <= iv < shp)
        { 
          _flat_108 = _sel_VxA_( iv, A); 
          _flat_107 = _add_SxS_( _flat_108, B); 
        } : _flat_107 ; 
         } :
      genarray( shp, _flat_102); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::+(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::+( int A { ,NN } , int[+] B { ,NN } )
/*
 *  + ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_65 { , NN } ; 
  int _flat_66 { , NN } ; 
  int[.] iv { , NN } ; 
  int{2} _flat_60 { , NN } ; 
  int{1} _flat_61 { , NN } ; 
  int{1} _flat_62 { , NN } ; 
  int[.] _flat_63 { , NN } ; 
  int{0} _flat_64 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_64 = 0; 
  _flat_63 = _mul_SxV_( _flat_64, shp); 
  _flat_62 = wrapper:ArrayArith::one( B) ; 
  _flat_61 = wrapper:ArrayArith::one( A) ; 
  _flat_60 = _add_SxS_( _flat_61, _flat_62); 
  res = with {
        /* Partn */
        (_flat_63 <= iv < shp)
        { 
          _flat_66 = _sel_VxA_( iv, B); 
          _flat_65 = _add_SxS_( A, _flat_66); 
        } : _flat_65 ; 
         } :
      genarray( shp, _flat_60); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::+(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::+( int A { ,NN } , int B { ,NN } )
/*
 *  + ::  ---
 */
{ 
  int _flat_12__SSA0_1 { , NN } ; 
  int _flat_12 { , NN } ; 

  _flat_12 = _add_SxS_( A, B); 
  _flat_12__SSA0_1 = _type_conv_( int, _flat_12); 
  return( _flat_12__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::--(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::--( int A { ,NN } )
/*
 *  -- ::  ---
 */
{ 
  int _flat_48__SSA0_1 { , NN } ; 
  int _flat_48 { , NN } ; 
  int{1} _flat_49 { , NN } ; 

  _flat_49 = wrapper:ScalarArith::one( A) ; 
  _flat_48 = _sub_SxS_( A, _flat_49); 
  _flat_48__SSA0_1 = _type_conv_( int, _flat_48); 
  return( _flat_48__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::modarray(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayBasics::modarray( int[*] array { ,NN } , int[.] v { ,NN } , int[+] val { ,NN } )
/*
 *  modarray ::  ---
 */
{ 
  int[+] res { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_99 { , NN } ; 
  int{1} _flat_100 { , NN } ; 

  _flat_100 = 1; 
  _flat_99 = _add_VxS_( v, _flat_100); 
  res = with {
        /* Partn */
        (v <= iv < _flat_99)
        { 
        } : val ; 
         } :
      modarray( array); 
  return( res); 
}



/****************************************************************************
 * ArrayBasics::modarray(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::modarray( int[*] array { ,NN } , int[.] v { ,NN } , int val { ,NN } )
/*
 *  modarray ::  ---
 */
{ 
  int[*] _flat_96 { , NN } ; 

  _flat_96 = _modarray_AxVxS_( array, v, val); 
  return( _flat_96); 
}



/****************************************************************************
 * ArrayBasics::modarray(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::modarray( int[*] array { ,NN } , int v { ,NN } , int[*] val { ,NN } )
/*
 *  modarray ::  ---
 */
{ 
  int[*] _flat_97 { , NN } ; 
  int[1] _flat_98 { , NN } ; 

  _flat_98 = [ v ]; 
  _flat_97 = wrapper:UTDScalarB:ArrayBasics::modarray( array, _flat_98, val) ; 
  return( _flat_97); 
}



/****************************************************************************
 * ArrayArith::/(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::/( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  / ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_29 { , NN } ; 
  int _flat_30 { , NN } ; 
  int _flat_31 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_24 { , NN } ; 
  int{1} _flat_25 { , NN } ; 
  int{1} _flat_26 { , NN } ; 
  int[.] _flat_27 { , NN } ; 
  int{0} _flat_28 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_28 = 0; 
  _flat_27 = _mul_SxV_( _flat_28, shp); 
  _flat_26 = wrapper:ArrayArith::one( B) ; 
  _flat_25 = wrapper:ArrayArith::one( A) ; 
  _flat_24 = _div_SxS_( _flat_25, _flat_26); 
  res = with {
        /* Partn */
        (_flat_27 <= iv < shp)
        { 
          _flat_31 = _sel_VxA_( iv, B); 
          _flat_30 = _sel_VxA_( iv, A); 
          _flat_29 = _div_SxS_( _flat_30, _flat_31); 
        } : _flat_29 ; 
         } :
      genarray( shp, _flat_24); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::/(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::/( int[+] A { ,NN } , int B { ,NN } )
/*
 *  / ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_128 { , NN } ; 
  int _flat_129 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_123 { , NN } ; 
  int{1} _flat_124 { , NN } ; 
  int{1} _flat_125 { , NN } ; 
  int[.] _flat_126 { , NN } ; 
  int{0} _flat_127 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_127 = 0; 
  _flat_126 = _mul_SxV_( _flat_127, shp); 
  _flat_125 = wrapper:ArrayArith::one( B) ; 
  _flat_124 = wrapper:ArrayArith::one( A) ; 
  _flat_123 = _div_SxS_( _flat_124, _flat_125); 
  res = with {
        /* Partn */
        (_flat_126 <= iv < shp)
        { 
          _flat_129 = _sel_VxA_( iv, A); 
          _flat_128 = _div_SxS_( _flat_129, B); 
        } : _flat_128 ; 
         } :
      genarray( shp, _flat_123); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::/(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::/( int A { ,NN } , int[+] B { ,NN } )
/*
 *  / ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_86 { , NN } ; 
  int _flat_87 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_81 { , NN } ; 
  int{1} _flat_82 { , NN } ; 
  int{1} _flat_83 { , NN } ; 
  int[.] _flat_84 { , NN } ; 
  int{0} _flat_85 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_85 = 0; 
  _flat_84 = _mul_SxV_( _flat_85, shp); 
  _flat_83 = wrapper:ArrayArith::one( B) ; 
  _flat_82 = wrapper:ArrayArith::one( A) ; 
  _flat_81 = _div_SxS_( _flat_82, _flat_83); 
  res = with {
        /* Partn */
        (_flat_84 <= iv < shp)
        { 
          _flat_87 = _sel_VxA_( iv, B); 
          _flat_86 = _div_SxS_( A, _flat_87); 
        } : _flat_86 ; 
         } :
      genarray( shp, _flat_81); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::/(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::/( int A { ,NN } , int B { ,NN } )
/*
 *  / ::  ---
 */
{ 
  int _flat_15__SSA0_1 { , NN } ; 
  int _flat_15 { , NN } ; 

  _flat_15 = _div_SxS_( A, B); 
  _flat_15__SSA0_1 = _type_conv_( int, _flat_15); 
  return( _flat_15__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_d::sel( int[.] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ulonglong[*] res { , NN } ; 
  ulonglong _flat_127 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulonglong{0} _flat_124 { , NN } ; 
  int[.] _flat_125 { , NN } ; 
  int{0} _flat_126 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_119 { , NN } ; 
  int[1]{0} _flat_120 { , NN } ; 
  int{0} _flat_121 { , NN } ; 
  int[1] _flat_122 { , NN } ; 
  int[.] _flat_123 { , NN } ; 

  _flat_123 = _shape_A_( array); 
  _flat_122 = _shape_A_( idx); 
  _flat_121 = 0; 
  _flat_120 = [ _flat_121 ]; 
  _flat_119 = _sel_VxA_( _flat_120, _flat_122); 
  new_shape = _drop_SxV_( _flat_119, _flat_123); 
  _flat_126 = 0; 
  _flat_125 = _mul_SxV_( _flat_126, new_shape); 
  _flat_124 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_125 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_127 = _sel_VxA_( new_idx, array); 
        } : _flat_127 ; 
         } :
      genarray( new_shape, _flat_124); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_d::sel( int[.] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ulong[*] res { , NN } ; 
  ulong _flat_118 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulong{0} _flat_115 { , NN } ; 
  int[.] _flat_116 { , NN } ; 
  int{0} _flat_117 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_110 { , NN } ; 
  int[1]{0} _flat_111 { , NN } ; 
  int{0} _flat_112 { , NN } ; 
  int[1] _flat_113 { , NN } ; 
  int[.] _flat_114 { , NN } ; 

  _flat_114 = _shape_A_( array); 
  _flat_113 = _shape_A_( idx); 
  _flat_112 = 0; 
  _flat_111 = [ _flat_112 ]; 
  _flat_110 = _sel_VxA_( _flat_111, _flat_113); 
  new_shape = _drop_SxV_( _flat_110, _flat_114); 
  _flat_117 = 0; 
  _flat_116 = _mul_SxV_( _flat_117, new_shape); 
  _flat_115 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_116 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_118 = _sel_VxA_( new_idx, array); 
        } : _flat_118 ; 
         } :
      genarray( new_shape, _flat_115); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_d::sel( int[.] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  uint[*] res { , NN } ; 
  uint _flat_109 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  uint{0} _flat_106 { , NN } ; 
  int[.] _flat_107 { , NN } ; 
  int{0} _flat_108 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_101 { , NN } ; 
  int[1]{0} _flat_102 { , NN } ; 
  int{0} _flat_103 { , NN } ; 
  int[1] _flat_104 { , NN } ; 
  int[.] _flat_105 { , NN } ; 

  _flat_105 = _shape_A_( array); 
  _flat_104 = _shape_A_( idx); 
  _flat_103 = 0; 
  _flat_102 = [ _flat_103 ]; 
  _flat_101 = _sel_VxA_( _flat_102, _flat_104); 
  new_shape = _drop_SxV_( _flat_101, _flat_105); 
  _flat_108 = 0; 
  _flat_107 = _mul_SxV_( _flat_108, new_shape); 
  _flat_106 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_107 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_109 = _sel_VxA_( new_idx, array); 
        } : _flat_109 ; 
         } :
      genarray( new_shape, _flat_106); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_d::sel( int[.] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ushort[*] res { , NN } ; 
  ushort _flat_100 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ushort{0} _flat_97 { , NN } ; 
  int[.] _flat_98 { , NN } ; 
  int{0} _flat_99 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_92 { , NN } ; 
  int[1]{0} _flat_93 { , NN } ; 
  int{0} _flat_94 { , NN } ; 
  int[1] _flat_95 { , NN } ; 
  int[.] _flat_96 { , NN } ; 

  _flat_96 = _shape_A_( array); 
  _flat_95 = _shape_A_( idx); 
  _flat_94 = 0; 
  _flat_93 = [ _flat_94 ]; 
  _flat_92 = _sel_VxA_( _flat_93, _flat_95); 
  new_shape = _drop_SxV_( _flat_92, _flat_96); 
  _flat_99 = 0; 
  _flat_98 = _mul_SxV_( _flat_99, new_shape); 
  _flat_97 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_98 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_100 = _sel_VxA_( new_idx, array); 
        } : _flat_100 ; 
         } :
      genarray( new_shape, _flat_97); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_d::sel( int[.] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ubyte[*] res { , NN } ; 
  ubyte _flat_91 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ubyte{} _flat_88 { , NN } ; 
  int[.] _flat_89 { , NN } ; 
  int{0} _flat_90 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_83 { , NN } ; 
  int[1]{0} _flat_84 { , NN } ; 
  int{0} _flat_85 { , NN } ; 
  int[1] _flat_86 { , NN } ; 
  int[.] _flat_87 { , NN } ; 

  _flat_87 = _shape_A_( array); 
  _flat_86 = _shape_A_( idx); 
  _flat_85 = 0; 
  _flat_84 = [ _flat_85 ]; 
  _flat_83 = _sel_VxA_( _flat_84, _flat_86); 
  new_shape = _drop_SxV_( _flat_83, _flat_87); 
  _flat_90 = 0; 
  _flat_89 = _mul_SxV_( _flat_90, new_shape); 
  _flat_88 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_89 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_91 = _sel_VxA_( new_idx, array); 
        } : _flat_91 ; 
         } :
      genarray( new_shape, _flat_88); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_d::sel( int[.] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  longlong[*] res { , NN } ; 
  longlong _flat_82 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  longlong{0} _flat_79 { , NN } ; 
  int[.] _flat_80 { , NN } ; 
  int{0} _flat_81 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_74 { , NN } ; 
  int[1]{0} _flat_75 { , NN } ; 
  int{0} _flat_76 { , NN } ; 
  int[1] _flat_77 { , NN } ; 
  int[.] _flat_78 { , NN } ; 

  _flat_78 = _shape_A_( array); 
  _flat_77 = _shape_A_( idx); 
  _flat_76 = 0; 
  _flat_75 = [ _flat_76 ]; 
  _flat_74 = _sel_VxA_( _flat_75, _flat_77); 
  new_shape = _drop_SxV_( _flat_74, _flat_78); 
  _flat_81 = 0; 
  _flat_80 = _mul_SxV_( _flat_81, new_shape); 
  _flat_79 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_80 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_82 = _sel_VxA_( new_idx, array); 
        } : _flat_82 ; 
         } :
      genarray( new_shape, _flat_79); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_d::sel( int[.] idx { ,NN } , long[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  long[*] res { , NN } ; 
  long _flat_73 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  long{0} _flat_70 { , NN } ; 
  int[.] _flat_71 { , NN } ; 
  int{0} _flat_72 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_65 { , NN } ; 
  int[1]{0} _flat_66 { , NN } ; 
  int{0} _flat_67 { , NN } ; 
  int[1] _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 

  _flat_69 = _shape_A_( array); 
  _flat_68 = _shape_A_( idx); 
  _flat_67 = 0; 
  _flat_66 = [ _flat_67 ]; 
  _flat_65 = _sel_VxA_( _flat_66, _flat_68); 
  new_shape = _drop_SxV_( _flat_65, _flat_69); 
  _flat_72 = 0; 
  _flat_71 = _mul_SxV_( _flat_72, new_shape); 
  _flat_70 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_71 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_73 = _sel_VxA_( new_idx, array); 
        } : _flat_73 ; 
         } :
      genarray( new_shape, _flat_70); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_d::sel( int[.] idx { ,NN } , short[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  short[*] res { , NN } ; 
  short _flat_64 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  short{0} _flat_61 { , NN } ; 
  int[.] _flat_62 { , NN } ; 
  int{0} _flat_63 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_56 { , NN } ; 
  int[1]{0} _flat_57 { , NN } ; 
  int{0} _flat_58 { , NN } ; 
  int[1] _flat_59 { , NN } ; 
  int[.] _flat_60 { , NN } ; 

  _flat_60 = _shape_A_( array); 
  _flat_59 = _shape_A_( idx); 
  _flat_58 = 0; 
  _flat_57 = [ _flat_58 ]; 
  _flat_56 = _sel_VxA_( _flat_57, _flat_59); 
  new_shape = _drop_SxV_( _flat_56, _flat_60); 
  _flat_63 = 0; 
  _flat_62 = _mul_SxV_( _flat_63, new_shape); 
  _flat_61 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_62 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_64 = _sel_VxA_( new_idx, array); 
        } : _flat_64 ; 
         } :
      genarray( new_shape, _flat_61); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_d::sel( int[.] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  byte[*] res { , NN } ; 
  byte _flat_55 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  byte{} _flat_52 { , NN } ; 
  int[.] _flat_53 { , NN } ; 
  int{0} _flat_54 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_47 { , NN } ; 
  int[1]{0} _flat_48 { , NN } ; 
  int{0} _flat_49 { , NN } ; 
  int[1] _flat_50 { , NN } ; 
  int[.] _flat_51 { , NN } ; 

  _flat_51 = _shape_A_( array); 
  _flat_50 = _shape_A_( idx); 
  _flat_49 = 0; 
  _flat_48 = [ _flat_49 ]; 
  _flat_47 = _sel_VxA_( _flat_48, _flat_50); 
  new_shape = _drop_SxV_( _flat_47, _flat_51); 
  _flat_54 = 0; 
  _flat_53 = _mul_SxV_( _flat_54, new_shape); 
  _flat_52 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_53 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_55 = _sel_VxA_( new_idx, array); 
        } : _flat_55 ; 
         } :
      genarray( new_shape, _flat_52); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_d::sel( int[.] idx { ,NN } , char[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  char[*] res { , NN } ; 
  char _flat_46 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  char{ } _flat_43 { , NN } ; 
  int[.] _flat_44 { , NN } ; 
  int{0} _flat_45 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_38 { , NN } ; 
  int[1]{0} _flat_39 { , NN } ; 
  int{0} _flat_40 { , NN } ; 
  int[1] _flat_41 { , NN } ; 
  int[.] _flat_42 { , NN } ; 

  _flat_42 = _shape_A_( array); 
  _flat_41 = _shape_A_( idx); 
  _flat_40 = 0; 
  _flat_39 = [ _flat_40 ]; 
  _flat_38 = _sel_VxA_( _flat_39, _flat_41); 
  new_shape = _drop_SxV_( _flat_38, _flat_42); 
  _flat_45 = 0; 
  _flat_44 = _mul_SxV_( _flat_45, new_shape); 
  _flat_43 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_44 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_46 = _sel_VxA_( new_idx, array); 
        } : _flat_46 ; 
         } :
      genarray( new_shape, _flat_43); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_d::sel( int[.] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_37 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_34 { , NN } ; 
  int[.] _flat_35 { , NN } ; 
  int{0} _flat_36 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_29 { , NN } ; 
  int[1]{0} _flat_30 { , NN } ; 
  int{0} _flat_31 { , NN } ; 
  int[1] _flat_32 { , NN } ; 
  int[.] _flat_33 { , NN } ; 

  _flat_33 = _shape_A_( array); 
  _flat_32 = _shape_A_( idx); 
  _flat_31 = 0; 
  _flat_30 = [ _flat_31 ]; 
  _flat_29 = _sel_VxA_( _flat_30, _flat_32); 
  new_shape = _drop_SxV_( _flat_29, _flat_33); 
  _flat_36 = 0; 
  _flat_35 = _mul_SxV_( _flat_36, new_shape); 
  _flat_34 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_35 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_37 = _sel_VxA_( new_idx, array); 
        } : _flat_37 ; 
         } :
      genarray( new_shape, _flat_34); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_d::sel( int[.] idx { ,NN } , double[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  double[*] res { , NN } ; 
  double _flat_28 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_25 { , NN } ; 
  int[.] _flat_26 { , NN } ; 
  int{0} _flat_27 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_20 { , NN } ; 
  int[1]{0} _flat_21 { , NN } ; 
  int{0} _flat_22 { , NN } ; 
  int[1] _flat_23 { , NN } ; 
  int[.] _flat_24 { , NN } ; 

  _flat_24 = _shape_A_( array); 
  _flat_23 = _shape_A_( idx); 
  _flat_22 = 0; 
  _flat_21 = [ _flat_22 ]; 
  _flat_20 = _sel_VxA_( _flat_21, _flat_23); 
  new_shape = _drop_SxV_( _flat_20, _flat_24); 
  _flat_27 = 0; 
  _flat_26 = _mul_SxV_( _flat_27, new_shape); 
  _flat_25 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_26 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_28 = _sel_VxA_( new_idx, array); 
        } : _flat_28 ; 
         } :
      genarray( new_shape, _flat_25); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_d::sel( int[.] idx { ,NN } , float[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  float[*] res { , NN } ; 
  float _flat_19 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  float{0.0...} _flat_16 { , NN } ; 
  int[.] _flat_17 { , NN } ; 
  int{0} _flat_18 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_11 { , NN } ; 
  int[1]{0} _flat_12 { , NN } ; 
  int{0} _flat_13 { , NN } ; 
  int[1] _flat_14 { , NN } ; 
  int[.] _flat_15 { , NN } ; 

  _flat_15 = _shape_A_( array); 
  _flat_14 = _shape_A_( idx); 
  _flat_13 = 0; 
  _flat_12 = [ _flat_13 ]; 
  _flat_11 = _sel_VxA_( _flat_12, _flat_14); 
  new_shape = _drop_SxV_( _flat_11, _flat_15); 
  _flat_18 = 0; 
  _flat_17 = _mul_SxV_( _flat_18, new_shape); 
  _flat_16 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_17 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_19 = _sel_VxA_( new_idx, array); 
        } : _flat_19 ; 
         } :
      genarray( new_shape, _flat_16); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_d::sel( int[.] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_10 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_7 { , NN } ; 
  int[.] _flat_8 { , NN } ; 
  int{0} _flat_9 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_2 { , NN } ; 
  int[1]{0} _flat_3 { , NN } ; 
  int{0} _flat_4 { , NN } ; 
  int[1] _flat_5 { , NN } ; 
  int[.] _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_5 = _shape_A_( idx); 
  _flat_4 = 0; 
  _flat_3 = [ _flat_4 ]; 
  _flat_2 = _sel_VxA_( _flat_3, _flat_5); 
  new_shape = _drop_SxV_( _flat_2, _flat_6); 
  _flat_9 = 0; 
  _flat_8 = _mul_SxV_( _flat_9, new_shape); 
  _flat_7 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_8 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_10 = _sel_VxA_( new_idx, array); 
        } : _flat_10 ; 
         } :
      genarray( new_shape, _flat_7); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulonglong[*] res { , NN } ; 
  ulonglong _flat_253 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulonglong{0} _flat_250 { , NN } ; 
  int[.] _flat_251 { , NN } ; 
  int{0} _flat_252 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_245 { , NN } ; 
  int[1]{0} _flat_246 { , NN } ; 
  int{0} _flat_247 { , NN } ; 
  int[1]{1} _flat_248 { , NN } ; 
  int[.] _flat_249 { , NN } ; 

  _flat_249 = _shape_A_( array); 
  _flat_248 = _shape_A_( idx); 
  _flat_247 = 0; 
  _flat_246 = [ _flat_247 ]; 
  _flat_245 = _sel_VxA_( _flat_246, _flat_248); 
  new_shape = _drop_SxV_( _flat_245, _flat_249); 
  _flat_252 = 0; 
  _flat_251 = _mul_SxV_( _flat_252, new_shape); 
  _flat_250 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_251 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_253 = _sel_VxA_( new_idx, array); 
        } : _flat_253 ; 
         } :
      genarray( new_shape, _flat_250); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulonglong[*] res { , NN } ; 
  ulonglong _flat_253 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulonglong{0} _flat_250 { , NN } ; 
  int[.] _flat_251 { , NN } ; 
  int{0} _flat_252 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_245 { , NN } ; 
  int[1]{0} _flat_246 { , NN } ; 
  int{0} _flat_247 { , NN } ; 
  int[1] _flat_248 { , NN } ; 
  int[.] _flat_249 { , NN } ; 

  _flat_249 = _shape_A_( array); 
  _flat_248 = _shape_A_( idx); 
  _flat_247 = 0; 
  _flat_246 = [ _flat_247 ]; 
  _flat_245 = _sel_VxA_( _flat_246, _flat_248); 
  new_shape = _drop_SxV_( _flat_245, _flat_249); 
  _flat_252 = 0; 
  _flat_251 = _mul_SxV_( _flat_252, new_shape); 
  _flat_250 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_251 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_253 = _sel_VxA_( new_idx, array); 
        } : _flat_253 ; 
         } :
      genarray( new_shape, _flat_250); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulong[*] res { , NN } ; 
  ulong _flat_244 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulong{0} _flat_241 { , NN } ; 
  int[.] _flat_242 { , NN } ; 
  int{0} _flat_243 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_236 { , NN } ; 
  int[1]{0} _flat_237 { , NN } ; 
  int{0} _flat_238 { , NN } ; 
  int[1]{1} _flat_239 { , NN } ; 
  int[.] _flat_240 { , NN } ; 

  _flat_240 = _shape_A_( array); 
  _flat_239 = _shape_A_( idx); 
  _flat_238 = 0; 
  _flat_237 = [ _flat_238 ]; 
  _flat_236 = _sel_VxA_( _flat_237, _flat_239); 
  new_shape = _drop_SxV_( _flat_236, _flat_240); 
  _flat_243 = 0; 
  _flat_242 = _mul_SxV_( _flat_243, new_shape); 
  _flat_241 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_242 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_244 = _sel_VxA_( new_idx, array); 
        } : _flat_244 ; 
         } :
      genarray( new_shape, _flat_241); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulong[*] res { , NN } ; 
  ulong _flat_244 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulong{0} _flat_241 { , NN } ; 
  int[.] _flat_242 { , NN } ; 
  int{0} _flat_243 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_236 { , NN } ; 
  int[1]{0} _flat_237 { , NN } ; 
  int{0} _flat_238 { , NN } ; 
  int[1] _flat_239 { , NN } ; 
  int[.] _flat_240 { , NN } ; 

  _flat_240 = _shape_A_( array); 
  _flat_239 = _shape_A_( idx); 
  _flat_238 = 0; 
  _flat_237 = [ _flat_238 ]; 
  _flat_236 = _sel_VxA_( _flat_237, _flat_239); 
  new_shape = _drop_SxV_( _flat_236, _flat_240); 
  _flat_243 = 0; 
  _flat_242 = _mul_SxV_( _flat_243, new_shape); 
  _flat_241 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_242 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_244 = _sel_VxA_( new_idx, array); 
        } : _flat_244 ; 
         } :
      genarray( new_shape, _flat_241); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  uint[*] res { , NN } ; 
  uint _flat_235 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  uint{0} _flat_232 { , NN } ; 
  int[.] _flat_233 { , NN } ; 
  int{0} _flat_234 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_227 { , NN } ; 
  int[1]{0} _flat_228 { , NN } ; 
  int{0} _flat_229 { , NN } ; 
  int[1]{1} _flat_230 { , NN } ; 
  int[.] _flat_231 { , NN } ; 

  _flat_231 = _shape_A_( array); 
  _flat_230 = _shape_A_( idx); 
  _flat_229 = 0; 
  _flat_228 = [ _flat_229 ]; 
  _flat_227 = _sel_VxA_( _flat_228, _flat_230); 
  new_shape = _drop_SxV_( _flat_227, _flat_231); 
  _flat_234 = 0; 
  _flat_233 = _mul_SxV_( _flat_234, new_shape); 
  _flat_232 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_233 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_235 = _sel_VxA_( new_idx, array); 
        } : _flat_235 ; 
         } :
      genarray( new_shape, _flat_232); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  uint[*] res { , NN } ; 
  uint _flat_235 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  uint{0} _flat_232 { , NN } ; 
  int[.] _flat_233 { , NN } ; 
  int{0} _flat_234 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_227 { , NN } ; 
  int[1]{0} _flat_228 { , NN } ; 
  int{0} _flat_229 { , NN } ; 
  int[1] _flat_230 { , NN } ; 
  int[.] _flat_231 { , NN } ; 

  _flat_231 = _shape_A_( array); 
  _flat_230 = _shape_A_( idx); 
  _flat_229 = 0; 
  _flat_228 = [ _flat_229 ]; 
  _flat_227 = _sel_VxA_( _flat_228, _flat_230); 
  new_shape = _drop_SxV_( _flat_227, _flat_231); 
  _flat_234 = 0; 
  _flat_233 = _mul_SxV_( _flat_234, new_shape); 
  _flat_232 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_233 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_235 = _sel_VxA_( new_idx, array); 
        } : _flat_235 ; 
         } :
      genarray( new_shape, _flat_232); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ushort[*] res { , NN } ; 
  ushort _flat_226 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ushort{0} _flat_223 { , NN } ; 
  int[.] _flat_224 { , NN } ; 
  int{0} _flat_225 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_218 { , NN } ; 
  int[1]{0} _flat_219 { , NN } ; 
  int{0} _flat_220 { , NN } ; 
  int[1]{1} _flat_221 { , NN } ; 
  int[.] _flat_222 { , NN } ; 

  _flat_222 = _shape_A_( array); 
  _flat_221 = _shape_A_( idx); 
  _flat_220 = 0; 
  _flat_219 = [ _flat_220 ]; 
  _flat_218 = _sel_VxA_( _flat_219, _flat_221); 
  new_shape = _drop_SxV_( _flat_218, _flat_222); 
  _flat_225 = 0; 
  _flat_224 = _mul_SxV_( _flat_225, new_shape); 
  _flat_223 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_224 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_226 = _sel_VxA_( new_idx, array); 
        } : _flat_226 ; 
         } :
      genarray( new_shape, _flat_223); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ushort[*] res { , NN } ; 
  ushort _flat_226 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ushort{0} _flat_223 { , NN } ; 
  int[.] _flat_224 { , NN } ; 
  int{0} _flat_225 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_218 { , NN } ; 
  int[1]{0} _flat_219 { , NN } ; 
  int{0} _flat_220 { , NN } ; 
  int[1] _flat_221 { , NN } ; 
  int[.] _flat_222 { , NN } ; 

  _flat_222 = _shape_A_( array); 
  _flat_221 = _shape_A_( idx); 
  _flat_220 = 0; 
  _flat_219 = [ _flat_220 ]; 
  _flat_218 = _sel_VxA_( _flat_219, _flat_221); 
  new_shape = _drop_SxV_( _flat_218, _flat_222); 
  _flat_225 = 0; 
  _flat_224 = _mul_SxV_( _flat_225, new_shape); 
  _flat_223 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_224 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_226 = _sel_VxA_( new_idx, array); 
        } : _flat_226 ; 
         } :
      genarray( new_shape, _flat_223); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ubyte[*] res { , NN } ; 
  ubyte _flat_217 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ubyte{} _flat_214 { , NN } ; 
  int[.] _flat_215 { , NN } ; 
  int{0} _flat_216 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_209 { , NN } ; 
  int[1]{0} _flat_210 { , NN } ; 
  int{0} _flat_211 { , NN } ; 
  int[1]{1} _flat_212 { , NN } ; 
  int[.] _flat_213 { , NN } ; 

  _flat_213 = _shape_A_( array); 
  _flat_212 = _shape_A_( idx); 
  _flat_211 = 0; 
  _flat_210 = [ _flat_211 ]; 
  _flat_209 = _sel_VxA_( _flat_210, _flat_212); 
  new_shape = _drop_SxV_( _flat_209, _flat_213); 
  _flat_216 = 0; 
  _flat_215 = _mul_SxV_( _flat_216, new_shape); 
  _flat_214 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_215 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_217 = _sel_VxA_( new_idx, array); 
        } : _flat_217 ; 
         } :
      genarray( new_shape, _flat_214); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ubyte[*] res { , NN } ; 
  ubyte _flat_217 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ubyte{} _flat_214 { , NN } ; 
  int[.] _flat_215 { , NN } ; 
  int{0} _flat_216 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_209 { , NN } ; 
  int[1]{0} _flat_210 { , NN } ; 
  int{0} _flat_211 { , NN } ; 
  int[1] _flat_212 { , NN } ; 
  int[.] _flat_213 { , NN } ; 

  _flat_213 = _shape_A_( array); 
  _flat_212 = _shape_A_( idx); 
  _flat_211 = 0; 
  _flat_210 = [ _flat_211 ]; 
  _flat_209 = _sel_VxA_( _flat_210, _flat_212); 
  new_shape = _drop_SxV_( _flat_209, _flat_213); 
  _flat_216 = 0; 
  _flat_215 = _mul_SxV_( _flat_216, new_shape); 
  _flat_214 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_215 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_217 = _sel_VxA_( new_idx, array); 
        } : _flat_217 ; 
         } :
      genarray( new_shape, _flat_214); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  longlong[*] res { , NN } ; 
  longlong _flat_208 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  longlong{0} _flat_205 { , NN } ; 
  int[.] _flat_206 { , NN } ; 
  int{0} _flat_207 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_200 { , NN } ; 
  int[1]{0} _flat_201 { , NN } ; 
  int{0} _flat_202 { , NN } ; 
  int[1]{1} _flat_203 { , NN } ; 
  int[.] _flat_204 { , NN } ; 

  _flat_204 = _shape_A_( array); 
  _flat_203 = _shape_A_( idx); 
  _flat_202 = 0; 
  _flat_201 = [ _flat_202 ]; 
  _flat_200 = _sel_VxA_( _flat_201, _flat_203); 
  new_shape = _drop_SxV_( _flat_200, _flat_204); 
  _flat_207 = 0; 
  _flat_206 = _mul_SxV_( _flat_207, new_shape); 
  _flat_205 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_206 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_208 = _sel_VxA_( new_idx, array); 
        } : _flat_208 ; 
         } :
      genarray( new_shape, _flat_205); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  longlong[*] res { , NN } ; 
  longlong _flat_208 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  longlong{0} _flat_205 { , NN } ; 
  int[.] _flat_206 { , NN } ; 
  int{0} _flat_207 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_200 { , NN } ; 
  int[1]{0} _flat_201 { , NN } ; 
  int{0} _flat_202 { , NN } ; 
  int[1] _flat_203 { , NN } ; 
  int[.] _flat_204 { , NN } ; 

  _flat_204 = _shape_A_( array); 
  _flat_203 = _shape_A_( idx); 
  _flat_202 = 0; 
  _flat_201 = [ _flat_202 ]; 
  _flat_200 = _sel_VxA_( _flat_201, _flat_203); 
  new_shape = _drop_SxV_( _flat_200, _flat_204); 
  _flat_207 = 0; 
  _flat_206 = _mul_SxV_( _flat_207, new_shape); 
  _flat_205 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_206 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_208 = _sel_VxA_( new_idx, array); 
        } : _flat_208 ; 
         } :
      genarray( new_shape, _flat_205); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  long[*] res { , NN } ; 
  long _flat_199 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  long{0} _flat_196 { , NN } ; 
  int[.] _flat_197 { , NN } ; 
  int{0} _flat_198 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_191 { , NN } ; 
  int[1]{0} _flat_192 { , NN } ; 
  int{0} _flat_193 { , NN } ; 
  int[1]{1} _flat_194 { , NN } ; 
  int[.] _flat_195 { , NN } ; 

  _flat_195 = _shape_A_( array); 
  _flat_194 = _shape_A_( idx); 
  _flat_193 = 0; 
  _flat_192 = [ _flat_193 ]; 
  _flat_191 = _sel_VxA_( _flat_192, _flat_194); 
  new_shape = _drop_SxV_( _flat_191, _flat_195); 
  _flat_198 = 0; 
  _flat_197 = _mul_SxV_( _flat_198, new_shape); 
  _flat_196 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_197 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_199 = _sel_VxA_( new_idx, array); 
        } : _flat_199 ; 
         } :
      genarray( new_shape, _flat_196); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  long[*] res { , NN } ; 
  long _flat_199 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  long{0} _flat_196 { , NN } ; 
  int[.] _flat_197 { , NN } ; 
  int{0} _flat_198 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_191 { , NN } ; 
  int[1]{0} _flat_192 { , NN } ; 
  int{0} _flat_193 { , NN } ; 
  int[1] _flat_194 { , NN } ; 
  int[.] _flat_195 { , NN } ; 

  _flat_195 = _shape_A_( array); 
  _flat_194 = _shape_A_( idx); 
  _flat_193 = 0; 
  _flat_192 = [ _flat_193 ]; 
  _flat_191 = _sel_VxA_( _flat_192, _flat_194); 
  new_shape = _drop_SxV_( _flat_191, _flat_195); 
  _flat_198 = 0; 
  _flat_197 = _mul_SxV_( _flat_198, new_shape); 
  _flat_196 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_197 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_199 = _sel_VxA_( new_idx, array); 
        } : _flat_199 ; 
         } :
      genarray( new_shape, _flat_196); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  short[*] res { , NN } ; 
  short _flat_190 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  short{0} _flat_187 { , NN } ; 
  int[.] _flat_188 { , NN } ; 
  int{0} _flat_189 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_182 { , NN } ; 
  int[1]{0} _flat_183 { , NN } ; 
  int{0} _flat_184 { , NN } ; 
  int[1]{1} _flat_185 { , NN } ; 
  int[.] _flat_186 { , NN } ; 

  _flat_186 = _shape_A_( array); 
  _flat_185 = _shape_A_( idx); 
  _flat_184 = 0; 
  _flat_183 = [ _flat_184 ]; 
  _flat_182 = _sel_VxA_( _flat_183, _flat_185); 
  new_shape = _drop_SxV_( _flat_182, _flat_186); 
  _flat_189 = 0; 
  _flat_188 = _mul_SxV_( _flat_189, new_shape); 
  _flat_187 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_188 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_190 = _sel_VxA_( new_idx, array); 
        } : _flat_190 ; 
         } :
      genarray( new_shape, _flat_187); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  short[*] res { , NN } ; 
  short _flat_190 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  short{0} _flat_187 { , NN } ; 
  int[.] _flat_188 { , NN } ; 
  int{0} _flat_189 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_182 { , NN } ; 
  int[1]{0} _flat_183 { , NN } ; 
  int{0} _flat_184 { , NN } ; 
  int[1] _flat_185 { , NN } ; 
  int[.] _flat_186 { , NN } ; 

  _flat_186 = _shape_A_( array); 
  _flat_185 = _shape_A_( idx); 
  _flat_184 = 0; 
  _flat_183 = [ _flat_184 ]; 
  _flat_182 = _sel_VxA_( _flat_183, _flat_185); 
  new_shape = _drop_SxV_( _flat_182, _flat_186); 
  _flat_189 = 0; 
  _flat_188 = _mul_SxV_( _flat_189, new_shape); 
  _flat_187 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_188 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_190 = _sel_VxA_( new_idx, array); 
        } : _flat_190 ; 
         } :
      genarray( new_shape, _flat_187); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  byte[*] res { , NN } ; 
  byte _flat_181 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  byte{} _flat_178 { , NN } ; 
  int[.] _flat_179 { , NN } ; 
  int{0} _flat_180 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_173 { , NN } ; 
  int[1]{0} _flat_174 { , NN } ; 
  int{0} _flat_175 { , NN } ; 
  int[1]{1} _flat_176 { , NN } ; 
  int[.] _flat_177 { , NN } ; 

  _flat_177 = _shape_A_( array); 
  _flat_176 = _shape_A_( idx); 
  _flat_175 = 0; 
  _flat_174 = [ _flat_175 ]; 
  _flat_173 = _sel_VxA_( _flat_174, _flat_176); 
  new_shape = _drop_SxV_( _flat_173, _flat_177); 
  _flat_180 = 0; 
  _flat_179 = _mul_SxV_( _flat_180, new_shape); 
  _flat_178 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_179 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_181 = _sel_VxA_( new_idx, array); 
        } : _flat_181 ; 
         } :
      genarray( new_shape, _flat_178); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  byte[*] res { , NN } ; 
  byte _flat_181 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  byte{} _flat_178 { , NN } ; 
  int[.] _flat_179 { , NN } ; 
  int{0} _flat_180 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_173 { , NN } ; 
  int[1]{0} _flat_174 { , NN } ; 
  int{0} _flat_175 { , NN } ; 
  int[1] _flat_176 { , NN } ; 
  int[.] _flat_177 { , NN } ; 

  _flat_177 = _shape_A_( array); 
  _flat_176 = _shape_A_( idx); 
  _flat_175 = 0; 
  _flat_174 = [ _flat_175 ]; 
  _flat_173 = _sel_VxA_( _flat_174, _flat_176); 
  new_shape = _drop_SxV_( _flat_173, _flat_177); 
  _flat_180 = 0; 
  _flat_179 = _mul_SxV_( _flat_180, new_shape); 
  _flat_178 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_179 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_181 = _sel_VxA_( new_idx, array); 
        } : _flat_181 ; 
         } :
      genarray( new_shape, _flat_178); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  char[*] res { , NN } ; 
  char _flat_172 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  char{ } _flat_169 { , NN } ; 
  int[.] _flat_170 { , NN } ; 
  int{0} _flat_171 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_164 { , NN } ; 
  int[1]{0} _flat_165 { , NN } ; 
  int{0} _flat_166 { , NN } ; 
  int[1]{1} _flat_167 { , NN } ; 
  int[.] _flat_168 { , NN } ; 

  _flat_168 = _shape_A_( array); 
  _flat_167 = _shape_A_( idx); 
  _flat_166 = 0; 
  _flat_165 = [ _flat_166 ]; 
  _flat_164 = _sel_VxA_( _flat_165, _flat_167); 
  new_shape = _drop_SxV_( _flat_164, _flat_168); 
  _flat_171 = 0; 
  _flat_170 = _mul_SxV_( _flat_171, new_shape); 
  _flat_169 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_170 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_172 = _sel_VxA_( new_idx, array); 
        } : _flat_172 ; 
         } :
      genarray( new_shape, _flat_169); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  char[*] res { , NN } ; 
  char _flat_172 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  char{ } _flat_169 { , NN } ; 
  int[.] _flat_170 { , NN } ; 
  int{0} _flat_171 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_164 { , NN } ; 
  int[1]{0} _flat_165 { , NN } ; 
  int{0} _flat_166 { , NN } ; 
  int[1] _flat_167 { , NN } ; 
  int[.] _flat_168 { , NN } ; 

  _flat_168 = _shape_A_( array); 
  _flat_167 = _shape_A_( idx); 
  _flat_166 = 0; 
  _flat_165 = [ _flat_166 ]; 
  _flat_164 = _sel_VxA_( _flat_165, _flat_167); 
  new_shape = _drop_SxV_( _flat_164, _flat_168); 
  _flat_171 = 0; 
  _flat_170 = _mul_SxV_( _flat_171, new_shape); 
  _flat_169 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_170 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_172 = _sel_VxA_( new_idx, array); 
        } : _flat_172 ; 
         } :
      genarray( new_shape, _flat_169); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_163 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_160 { , NN } ; 
  int[.] _flat_161 { , NN } ; 
  int{0} _flat_162 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_155 { , NN } ; 
  int[1]{0} _flat_156 { , NN } ; 
  int{0} _flat_157 { , NN } ; 
  int[1]{1} _flat_158 { , NN } ; 
  int[.] _flat_159 { , NN } ; 

  _flat_159 = _shape_A_( array); 
  _flat_158 = _shape_A_( idx); 
  _flat_157 = 0; 
  _flat_156 = [ _flat_157 ]; 
  _flat_155 = _sel_VxA_( _flat_156, _flat_158); 
  new_shape = _drop_SxV_( _flat_155, _flat_159); 
  _flat_162 = 0; 
  _flat_161 = _mul_SxV_( _flat_162, new_shape); 
  _flat_160 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_161 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_163 = _sel_VxA_( new_idx, array); 
        } : _flat_163 ; 
         } :
      genarray( new_shape, _flat_160); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_163 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_160 { , NN } ; 
  int[.] _flat_161 { , NN } ; 
  int{0} _flat_162 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_155 { , NN } ; 
  int[1]{0} _flat_156 { , NN } ; 
  int{0} _flat_157 { , NN } ; 
  int[1] _flat_158 { , NN } ; 
  int[.] _flat_159 { , NN } ; 

  _flat_159 = _shape_A_( array); 
  _flat_158 = _shape_A_( idx); 
  _flat_157 = 0; 
  _flat_156 = [ _flat_157 ]; 
  _flat_155 = _sel_VxA_( _flat_156, _flat_158); 
  new_shape = _drop_SxV_( _flat_155, _flat_159); 
  _flat_162 = 0; 
  _flat_161 = _mul_SxV_( _flat_162, new_shape); 
  _flat_160 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_161 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_163 = _sel_VxA_( new_idx, array); 
        } : _flat_163 ; 
         } :
      genarray( new_shape, _flat_160); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  double[*] res { , NN } ; 
  double _flat_154 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_151 { , NN } ; 
  int[.] _flat_152 { , NN } ; 
  int{0} _flat_153 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_146 { , NN } ; 
  int[1]{0} _flat_147 { , NN } ; 
  int{0} _flat_148 { , NN } ; 
  int[1]{1} _flat_149 { , NN } ; 
  int[.] _flat_150 { , NN } ; 

  _flat_150 = _shape_A_( array); 
  _flat_149 = _shape_A_( idx); 
  _flat_148 = 0; 
  _flat_147 = [ _flat_148 ]; 
  _flat_146 = _sel_VxA_( _flat_147, _flat_149); 
  new_shape = _drop_SxV_( _flat_146, _flat_150); 
  _flat_153 = 0; 
  _flat_152 = _mul_SxV_( _flat_153, new_shape); 
  _flat_151 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_152 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_154 = _sel_VxA_( new_idx, array); 
        } : _flat_154 ; 
         } :
      genarray( new_shape, _flat_151); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  double[*] res { , NN } ; 
  double _flat_154 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_151 { , NN } ; 
  int[.] _flat_152 { , NN } ; 
  int{0} _flat_153 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_146 { , NN } ; 
  int[1]{0} _flat_147 { , NN } ; 
  int{0} _flat_148 { , NN } ; 
  int[1] _flat_149 { , NN } ; 
  int[.] _flat_150 { , NN } ; 

  _flat_150 = _shape_A_( array); 
  _flat_149 = _shape_A_( idx); 
  _flat_148 = 0; 
  _flat_147 = [ _flat_148 ]; 
  _flat_146 = _sel_VxA_( _flat_147, _flat_149); 
  new_shape = _drop_SxV_( _flat_146, _flat_150); 
  _flat_153 = 0; 
  _flat_152 = _mul_SxV_( _flat_153, new_shape); 
  _flat_151 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_152 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_154 = _sel_VxA_( new_idx, array); 
        } : _flat_154 ; 
         } :
      genarray( new_shape, _flat_151); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  float[*] res { , NN } ; 
  float _flat_145 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  float{0.0...} _flat_142 { , NN } ; 
  int[.] _flat_143 { , NN } ; 
  int{0} _flat_144 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_137 { , NN } ; 
  int[1]{0} _flat_138 { , NN } ; 
  int{0} _flat_139 { , NN } ; 
  int[1]{1} _flat_140 { , NN } ; 
  int[.] _flat_141 { , NN } ; 

  _flat_141 = _shape_A_( array); 
  _flat_140 = _shape_A_( idx); 
  _flat_139 = 0; 
  _flat_138 = [ _flat_139 ]; 
  _flat_137 = _sel_VxA_( _flat_138, _flat_140); 
  new_shape = _drop_SxV_( _flat_137, _flat_141); 
  _flat_144 = 0; 
  _flat_143 = _mul_SxV_( _flat_144, new_shape); 
  _flat_142 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_143 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_145 = _sel_VxA_( new_idx, array); 
        } : _flat_145 ; 
         } :
      genarray( new_shape, _flat_142); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  float[*] res { , NN } ; 
  float _flat_145 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  float{0.0...} _flat_142 { , NN } ; 
  int[.] _flat_143 { , NN } ; 
  int{0} _flat_144 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_137 { , NN } ; 
  int[1]{0} _flat_138 { , NN } ; 
  int{0} _flat_139 { , NN } ; 
  int[1] _flat_140 { , NN } ; 
  int[.] _flat_141 { , NN } ; 

  _flat_141 = _shape_A_( array); 
  _flat_140 = _shape_A_( idx); 
  _flat_139 = 0; 
  _flat_138 = [ _flat_139 ]; 
  _flat_137 = _sel_VxA_( _flat_138, _flat_140); 
  new_shape = _drop_SxV_( _flat_137, _flat_141); 
  _flat_144 = 0; 
  _flat_143 = _mul_SxV_( _flat_144, new_shape); 
  _flat_142 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_143 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_145 = _sel_VxA_( new_idx, array); 
        } : _flat_145 ; 
         } :
      genarray( new_shape, _flat_142); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_d::_selVxADistmemLocal( int[1] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_136 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_133 { , NN } ; 
  int[.] _flat_134 { , NN } ; 
  int{0} _flat_135 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_128 { , NN } ; 
  int[1]{0} _flat_129 { , NN } ; 
  int{0} _flat_130 { , NN } ; 
  int[1]{1} _flat_131 { , NN } ; 
  int[.] _flat_132 { , NN } ; 

  _flat_132 = _shape_A_( array); 
  _flat_131 = _shape_A_( idx); 
  _flat_130 = 0; 
  _flat_129 = [ _flat_130 ]; 
  _flat_128 = _sel_VxA_( _flat_129, _flat_131); 
  new_shape = _drop_SxV_( _flat_128, _flat_132); 
  _flat_135 = 0; 
  _flat_134 = _mul_SxV_( _flat_135, new_shape); 
  _flat_133 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_134 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_136 = _sel_VxA_( new_idx, array); 
        } : _flat_136 ; 
         } :
      genarray( new_shape, _flat_133); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_d::_selVxADistmemLocal( int[.] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_136 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_133 { , NN } ; 
  int[.] _flat_134 { , NN } ; 
  int{0} _flat_135 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_128 { , NN } ; 
  int[1]{0} _flat_129 { , NN } ; 
  int{0} _flat_130 { , NN } ; 
  int[1] _flat_131 { , NN } ; 
  int[.] _flat_132 { , NN } ; 

  _flat_132 = _shape_A_( array); 
  _flat_131 = _shape_A_( idx); 
  _flat_130 = 0; 
  _flat_129 = [ _flat_130 ]; 
  _flat_128 = _sel_VxA_( _flat_129, _flat_131); 
  new_shape = _drop_SxV_( _flat_128, _flat_132); 
  _flat_135 = 0; 
  _flat_134 = _mul_SxV_( _flat_135, new_shape); 
  _flat_133 = wrapper:sacprelude_d::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_134 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_136 = _sel_VxA_( new_idx, array); 
        } : _flat_136 ; 
         } :
      genarray( new_shape, _flat_133); 
  return( res); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ulonglong[*] _flat_280 { , NN } ; 
  int[1] _flat_281 { , NN } ; 

  _flat_281 = [ idx ]; 
  _flat_280 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_281, array) ; 
  return( _flat_280); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ulong[*] _flat_278 { , NN } ; 
  int[1] _flat_279 { , NN } ; 

  _flat_279 = [ idx ]; 
  _flat_278 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_279, array) ; 
  return( _flat_278); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  uint[*] _flat_276 { , NN } ; 
  int[1] _flat_277 { , NN } ; 

  _flat_277 = [ idx ]; 
  _flat_276 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_277, array) ; 
  return( _flat_276); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ushort[*] _flat_274 { , NN } ; 
  int[1] _flat_275 { , NN } ; 

  _flat_275 = [ idx ]; 
  _flat_274 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_275, array) ; 
  return( _flat_274); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ubyte[*] _flat_272 { , NN } ; 
  int[1] _flat_273 { , NN } ; 

  _flat_273 = [ idx ]; 
  _flat_272 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_273, array) ; 
  return( _flat_272); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  longlong[*] _flat_270 { , NN } ; 
  int[1] _flat_271 { , NN } ; 

  _flat_271 = [ idx ]; 
  _flat_270 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_271, array) ; 
  return( _flat_270); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  long[*] _flat_268 { , NN } ; 
  int[1] _flat_269 { , NN } ; 

  _flat_269 = [ idx ]; 
  _flat_268 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_269, array) ; 
  return( _flat_268); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  short[*] _flat_266 { , NN } ; 
  int[1] _flat_267 { , NN } ; 

  _flat_267 = [ idx ]; 
  _flat_266 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_267, array) ; 
  return( _flat_266); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  byte[*] _flat_264 { , NN } ; 
  int[1] _flat_265 { , NN } ; 

  _flat_265 = [ idx ]; 
  _flat_264 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_265, array) ; 
  return( _flat_264); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  char[*] _flat_262 { , NN } ; 
  int[1] _flat_263 { , NN } ; 

  _flat_263 = [ idx ]; 
  _flat_262 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_263, array) ; 
  return( _flat_262); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  bool[*] _flat_260 { , NN } ; 
  int[1] _flat_261 { , NN } ; 

  _flat_261 = [ idx ]; 
  _flat_260 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_261, array) ; 
  return( _flat_260); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  double[*] _flat_258 { , NN } ; 
  int[1] _flat_259 { , NN } ; 

  _flat_259 = [ idx ]; 
  _flat_258 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_259, array) ; 
  return( _flat_258); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  float[*] _flat_256 { , NN } ; 
  int[1] _flat_257 { , NN } ; 

  _flat_257 = [ idx ]; 
  _flat_256 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_257, array) ; 
  return( _flat_256); 
}



/****************************************************************************
 * sacprelude_d::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_d::_selSxADistmemLocal( int idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  int[*] _flat_254 { , NN } ; 
  int[1] _flat_255 { , NN } ; 

  _flat_255 = [ idx ]; 
  _flat_254 = wrapper:sacprelude_d::_selVxADistmemLocal( _flat_255, array) ; 
  return( _flat_254); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong{0} sacprelude_d::zero( ulonglong[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ulonglong{0} _flat_295__SSA0_1 { , NN } ; 
  ulonglong{0} _flat_295 { , NN } ; 

  _flat_295 = 0ULL; 
  _flat_295__SSA0_1 = _type_conv_( ulonglong, _flat_295); 
  return( _flat_295__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong{0} sacprelude_d::zero( ulong[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ulong{0} _flat_294__SSA0_1 { , NN } ; 
  ulong{0} _flat_294 { , NN } ; 

  _flat_294 = 0ul; 
  _flat_294__SSA0_1 = _type_conv_( ulong, _flat_294); 
  return( _flat_294__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint{0} sacprelude_d::zero( uint[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  uint{0} _flat_293__SSA0_1 { , NN } ; 
  uint{0} _flat_293 { , NN } ; 

  _flat_293 = 0ui; 
  _flat_293__SSA0_1 = _type_conv_( uint, _flat_293); 
  return( _flat_293__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort{0} sacprelude_d::zero( ushort[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ushort{0} _flat_292__SSA0_1 { , NN } ; 
  ushort{0} _flat_292 { , NN } ; 

  _flat_292 = 0us; 
  _flat_292__SSA0_1 = _type_conv_( ushort, _flat_292); 
  return( _flat_292__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte{} sacprelude_d::zero( ubyte[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ubyte{} _flat_291__SSA0_1 { , NN } ; 
  ubyte{} _flat_291 { , NN } ; 

  _flat_291 = 0ub; 
  _flat_291__SSA0_1 = _type_conv_( ubyte, _flat_291); 
  return( _flat_291__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong{0} sacprelude_d::zero( longlong[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  longlong{0} _flat_290__SSA0_1 { , NN } ; 
  longlong{0} _flat_290 { , NN } ; 

  _flat_290 = 0LL; 
  _flat_290__SSA0_1 = _type_conv_( longlong, _flat_290); 
  return( _flat_290__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long{0} sacprelude_d::zero( long[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  long{0} _flat_289__SSA0_1 { , NN } ; 
  long{0} _flat_289 { , NN } ; 

  _flat_289 = 0l; 
  _flat_289__SSA0_1 = _type_conv_( long, _flat_289); 
  return( _flat_289__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short{0} sacprelude_d::zero( short[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  short{0} _flat_288__SSA0_1 { , NN } ; 
  short{0} _flat_288 { , NN } ; 

  _flat_288 = 0s; 
  _flat_288__SSA0_1 = _type_conv_( short, _flat_288); 
  return( _flat_288__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte{} sacprelude_d::zero( byte[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  byte{} _flat_287__SSA0_1 { , NN } ; 
  byte{} _flat_287 { , NN } ; 

  _flat_287 = 0b; 
  _flat_287__SSA0_1 = _type_conv_( byte, _flat_287); 
  return( _flat_287__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool{0} sacprelude_d::zero( bool[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  bool{0} _flat_286__SSA0_1 { , NN } ; 
  bool{0} _flat_286 { , NN } ; 

  _flat_286 = false; 
  _flat_286__SSA0_1 = _type_conv_( bool, _flat_286); 
  return( _flat_286__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char{ } sacprelude_d::zero( char[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  char{ } _flat_285__SSA0_1 { , NN } ; 
  char{ } _flat_285 { , NN } ; 

  _flat_285 = ' '; 
  _flat_285__SSA0_1 = _type_conv_( char, _flat_285); 
  return( _flat_285__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float{0.0...} sacprelude_d::zero( float[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  float{0.0...} _flat_284__SSA0_1 { , NN } ; 
  float{0.0...} _flat_284 { , NN } ; 

  _flat_284 = 0.0f; 
  _flat_284__SSA0_1 = _type_conv_( float, _flat_284); 
  return( _flat_284__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double{0.0...} sacprelude_d::zero( double[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  double{0.0...} _flat_283__SSA0_1 { , NN } ; 
  double{0.0...} _flat_283 { , NN } ; 

  _flat_283 = 0.0; 
  _flat_283__SSA0_1 = _type_conv_( double, _flat_283); 
  return( _flat_283__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{0} sacprelude_d::zero( int[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_282__SSA0_1 { , NN } ; 
  int{0} _flat_282 { , NN } ; 

  _flat_282 = 0; 
  _flat_282__SSA0_1 = _type_conv_( int, _flat_282); 
  return( _flat_282__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( ulonglong[*] A { ,NN } , ulonglong[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_408 { , NN } ; 
  ulonglong _flat_409 { , NN } ; 
  ulonglong _flat_410 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_403 { , NN } ; 
  int[.] _flat_404 { , NN } ; 
  int{0} _flat_405 { , NN } ; 
  int[.] _flat_406 { , NN } ; 
  int[.] _flat_407 { , NN } ; 

  _flat_407 = _shape_A_( A); 
  _flat_406 = _shape_A_( A); 
  _flat_405 = 0; 
  _flat_404 = _mul_SxV_( _flat_405, _flat_406); 
  _flat_403 = true; 
  res = with {
        /* Partn */
        (_flat_404 <= iv < _flat_407)
        { 
          _flat_410 = _sel_VxA_( iv, B); 
          _flat_409 = _sel_VxA_( iv, A); 
          _flat_408 = _eq_SxS_( _flat_409, _flat_410); 
        } : _flat_408 ; 
         } :
      fold( sacprelude_d::and(), _flat_403); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( ulong[*] A { ,NN } , ulong[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_400 { , NN } ; 
  ulong _flat_401 { , NN } ; 
  ulong _flat_402 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_395 { , NN } ; 
  int[.] _flat_396 { , NN } ; 
  int{0} _flat_397 { , NN } ; 
  int[.] _flat_398 { , NN } ; 
  int[.] _flat_399 { , NN } ; 

  _flat_399 = _shape_A_( A); 
  _flat_398 = _shape_A_( A); 
  _flat_397 = 0; 
  _flat_396 = _mul_SxV_( _flat_397, _flat_398); 
  _flat_395 = true; 
  res = with {
        /* Partn */
        (_flat_396 <= iv < _flat_399)
        { 
          _flat_402 = _sel_VxA_( iv, B); 
          _flat_401 = _sel_VxA_( iv, A); 
          _flat_400 = _eq_SxS_( _flat_401, _flat_402); 
        } : _flat_400 ; 
         } :
      fold( sacprelude_d::and(), _flat_395); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( uint[*] A { ,NN } , uint[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_392 { , NN } ; 
  uint _flat_393 { , NN } ; 
  uint _flat_394 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_387 { , NN } ; 
  int[.] _flat_388 { , NN } ; 
  int{0} _flat_389 { , NN } ; 
  int[.] _flat_390 { , NN } ; 
  int[.] _flat_391 { , NN } ; 

  _flat_391 = _shape_A_( A); 
  _flat_390 = _shape_A_( A); 
  _flat_389 = 0; 
  _flat_388 = _mul_SxV_( _flat_389, _flat_390); 
  _flat_387 = true; 
  res = with {
        /* Partn */
        (_flat_388 <= iv < _flat_391)
        { 
          _flat_394 = _sel_VxA_( iv, B); 
          _flat_393 = _sel_VxA_( iv, A); 
          _flat_392 = _eq_SxS_( _flat_393, _flat_394); 
        } : _flat_392 ; 
         } :
      fold( sacprelude_d::and(), _flat_387); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( ushort[*] A { ,NN } , ushort[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_384 { , NN } ; 
  ushort _flat_385 { , NN } ; 
  ushort _flat_386 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_379 { , NN } ; 
  int[.] _flat_380 { , NN } ; 
  int{0} _flat_381 { , NN } ; 
  int[.] _flat_382 { , NN } ; 
  int[.] _flat_383 { , NN } ; 

  _flat_383 = _shape_A_( A); 
  _flat_382 = _shape_A_( A); 
  _flat_381 = 0; 
  _flat_380 = _mul_SxV_( _flat_381, _flat_382); 
  _flat_379 = true; 
  res = with {
        /* Partn */
        (_flat_380 <= iv < _flat_383)
        { 
          _flat_386 = _sel_VxA_( iv, B); 
          _flat_385 = _sel_VxA_( iv, A); 
          _flat_384 = _eq_SxS_( _flat_385, _flat_386); 
        } : _flat_384 ; 
         } :
      fold( sacprelude_d::and(), _flat_379); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( ubyte[*] A { ,NN } , ubyte[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_376 { , NN } ; 
  ubyte _flat_377 { , NN } ; 
  ubyte _flat_378 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_371 { , NN } ; 
  int[.] _flat_372 { , NN } ; 
  int{0} _flat_373 { , NN } ; 
  int[.] _flat_374 { , NN } ; 
  int[.] _flat_375 { , NN } ; 

  _flat_375 = _shape_A_( A); 
  _flat_374 = _shape_A_( A); 
  _flat_373 = 0; 
  _flat_372 = _mul_SxV_( _flat_373, _flat_374); 
  _flat_371 = true; 
  res = with {
        /* Partn */
        (_flat_372 <= iv < _flat_375)
        { 
          _flat_378 = _sel_VxA_( iv, B); 
          _flat_377 = _sel_VxA_( iv, A); 
          _flat_376 = _eq_SxS_( _flat_377, _flat_378); 
        } : _flat_376 ; 
         } :
      fold( sacprelude_d::and(), _flat_371); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( longlong[*] A { ,NN } , longlong[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_368 { , NN } ; 
  longlong _flat_369 { , NN } ; 
  longlong _flat_370 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_363 { , NN } ; 
  int[.] _flat_364 { , NN } ; 
  int{0} _flat_365 { , NN } ; 
  int[.] _flat_366 { , NN } ; 
  int[.] _flat_367 { , NN } ; 

  _flat_367 = _shape_A_( A); 
  _flat_366 = _shape_A_( A); 
  _flat_365 = 0; 
  _flat_364 = _mul_SxV_( _flat_365, _flat_366); 
  _flat_363 = true; 
  res = with {
        /* Partn */
        (_flat_364 <= iv < _flat_367)
        { 
          _flat_370 = _sel_VxA_( iv, B); 
          _flat_369 = _sel_VxA_( iv, A); 
          _flat_368 = _eq_SxS_( _flat_369, _flat_370); 
        } : _flat_368 ; 
         } :
      fold( sacprelude_d::and(), _flat_363); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( long[*] A { ,NN } , long[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_360 { , NN } ; 
  long _flat_361 { , NN } ; 
  long _flat_362 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_355 { , NN } ; 
  int[.] _flat_356 { , NN } ; 
  int{0} _flat_357 { , NN } ; 
  int[.] _flat_358 { , NN } ; 
  int[.] _flat_359 { , NN } ; 

  _flat_359 = _shape_A_( A); 
  _flat_358 = _shape_A_( A); 
  _flat_357 = 0; 
  _flat_356 = _mul_SxV_( _flat_357, _flat_358); 
  _flat_355 = true; 
  res = with {
        /* Partn */
        (_flat_356 <= iv < _flat_359)
        { 
          _flat_362 = _sel_VxA_( iv, B); 
          _flat_361 = _sel_VxA_( iv, A); 
          _flat_360 = _eq_SxS_( _flat_361, _flat_362); 
        } : _flat_360 ; 
         } :
      fold( sacprelude_d::and(), _flat_355); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( short[*] A { ,NN } , short[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_352 { , NN } ; 
  short _flat_353 { , NN } ; 
  short _flat_354 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_347 { , NN } ; 
  int[.] _flat_348 { , NN } ; 
  int{0} _flat_349 { , NN } ; 
  int[.] _flat_350 { , NN } ; 
  int[.] _flat_351 { , NN } ; 

  _flat_351 = _shape_A_( A); 
  _flat_350 = _shape_A_( A); 
  _flat_349 = 0; 
  _flat_348 = _mul_SxV_( _flat_349, _flat_350); 
  _flat_347 = true; 
  res = with {
        /* Partn */
        (_flat_348 <= iv < _flat_351)
        { 
          _flat_354 = _sel_VxA_( iv, B); 
          _flat_353 = _sel_VxA_( iv, A); 
          _flat_352 = _eq_SxS_( _flat_353, _flat_354); 
        } : _flat_352 ; 
         } :
      fold( sacprelude_d::and(), _flat_347); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( byte[*] A { ,NN } , byte[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_344 { , NN } ; 
  byte _flat_345 { , NN } ; 
  byte _flat_346 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_339 { , NN } ; 
  int[.] _flat_340 { , NN } ; 
  int{0} _flat_341 { , NN } ; 
  int[.] _flat_342 { , NN } ; 
  int[.] _flat_343 { , NN } ; 

  _flat_343 = _shape_A_( A); 
  _flat_342 = _shape_A_( A); 
  _flat_341 = 0; 
  _flat_340 = _mul_SxV_( _flat_341, _flat_342); 
  _flat_339 = true; 
  res = with {
        /* Partn */
        (_flat_340 <= iv < _flat_343)
        { 
          _flat_346 = _sel_VxA_( iv, B); 
          _flat_345 = _sel_VxA_( iv, A); 
          _flat_344 = _eq_SxS_( _flat_345, _flat_346); 
        } : _flat_344 ; 
         } :
      fold( sacprelude_d::and(), _flat_339); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( char[*] A { ,NN } , char[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_336 { , NN } ; 
  char _flat_337 { , NN } ; 
  char _flat_338 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_331 { , NN } ; 
  int[.] _flat_332 { , NN } ; 
  int{0} _flat_333 { , NN } ; 
  int[.] _flat_334 { , NN } ; 
  int[.] _flat_335 { , NN } ; 

  _flat_335 = _shape_A_( A); 
  _flat_334 = _shape_A_( A); 
  _flat_333 = 0; 
  _flat_332 = _mul_SxV_( _flat_333, _flat_334); 
  _flat_331 = true; 
  res = with {
        /* Partn */
        (_flat_332 <= iv < _flat_335)
        { 
          _flat_338 = _sel_VxA_( iv, B); 
          _flat_337 = _sel_VxA_( iv, A); 
          _flat_336 = _eq_SxS_( _flat_337, _flat_338); 
        } : _flat_336 ; 
         } :
      fold( sacprelude_d::and(), _flat_331); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_328 { , NN } ; 
  bool _flat_329 { , NN } ; 
  bool _flat_330 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_323 { , NN } ; 
  int[.] _flat_324 { , NN } ; 
  int{0} _flat_325 { , NN } ; 
  int[.] _flat_326 { , NN } ; 
  int[.] _flat_327 { , NN } ; 

  _flat_327 = _shape_A_( A); 
  _flat_326 = _shape_A_( A); 
  _flat_325 = 0; 
  _flat_324 = _mul_SxV_( _flat_325, _flat_326); 
  _flat_323 = true; 
  res = with {
        /* Partn */
        (_flat_324 <= iv < _flat_327)
        { 
          _flat_330 = _sel_VxA_( iv, B); 
          _flat_329 = _sel_VxA_( iv, A); 
          _flat_328 = _eq_SxS_( _flat_329, _flat_330); 
        } : _flat_328 ; 
         } :
      fold( sacprelude_d::and(), _flat_323); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_320 { , NN } ; 
  double _flat_321 { , NN } ; 
  double _flat_322 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_315 { , NN } ; 
  int[.] _flat_316 { , NN } ; 
  int{0} _flat_317 { , NN } ; 
  int[.] _flat_318 { , NN } ; 
  int[.] _flat_319 { , NN } ; 

  _flat_319 = _shape_A_( A); 
  _flat_318 = _shape_A_( A); 
  _flat_317 = 0; 
  _flat_316 = _mul_SxV_( _flat_317, _flat_318); 
  _flat_315 = true; 
  res = with {
        /* Partn */
        (_flat_316 <= iv < _flat_319)
        { 
          _flat_322 = _sel_VxA_( iv, B); 
          _flat_321 = _sel_VxA_( iv, A); 
          _flat_320 = _eq_SxS_( _flat_321, _flat_322); 
        } : _flat_320 ; 
         } :
      fold( sacprelude_d::and(), _flat_315); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( float[*] A { ,NN } , float[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_312 { , NN } ; 
  float _flat_313 { , NN } ; 
  float _flat_314 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_307 { , NN } ; 
  int[.] _flat_308 { , NN } ; 
  int{0} _flat_309 { , NN } ; 
  int[.] _flat_310 { , NN } ; 
  int[.] _flat_311 { , NN } ; 

  _flat_311 = _shape_A_( A); 
  _flat_310 = _shape_A_( A); 
  _flat_309 = 0; 
  _flat_308 = _mul_SxV_( _flat_309, _flat_310); 
  _flat_307 = true; 
  res = with {
        /* Partn */
        (_flat_308 <= iv < _flat_311)
        { 
          _flat_314 = _sel_VxA_( iv, B); 
          _flat_313 = _sel_VxA_( iv, A); 
          _flat_312 = _eq_SxS_( _flat_313, _flat_314); 
        } : _flat_312 ; 
         } :
      fold( sacprelude_d::and(), _flat_307); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_d::eq( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_304 { , NN } ; 
  int _flat_305 { , NN } ; 
  int _flat_306 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_299 { , NN } ; 
  int[.] _flat_300 { , NN } ; 
  int{0} _flat_301 { , NN } ; 
  int[.] _flat_302 { , NN } ; 
  int[.] _flat_303 { , NN } ; 

  _flat_303 = _shape_A_( A); 
  _flat_302 = _shape_A_( A); 
  _flat_301 = 0; 
  _flat_300 = _mul_SxV_( _flat_301, _flat_302); 
  _flat_299 = true; 
  res = with {
        /* Partn */
        (_flat_300 <= iv < _flat_303)
        { 
          _flat_306 = _sel_VxA_( iv, B); 
          _flat_305 = _sel_VxA_( iv, A); 
          _flat_304 = _eq_SxS_( _flat_305, _flat_306); 
        } : _flat_304 ; 
         } :
      fold( sacprelude_d::and(), _flat_299); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::isPartitionIntersectNull(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_d::isPartitionIntersectNull( int[.] idxmin { ,NN } , int[.] idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersectNull ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_459 { , NN } ; 
  bool[.] _flat_460 { , NN } ; 

  _flat_460 = _ge_VxV_( idxmin, bound2); 
  _flat_459 = _lt_VxV_( idxmax, bound1); 
  z = _or_VxV_( _flat_459, _flat_460); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::isPartitionIntersectNull(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_d::isPartitionIntersectNull( int idxmin { ,NN } , int idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersectNull ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_461 { , NN } ; 
  bool[.] _flat_462 { , NN } ; 

  _flat_462 = _ge_SxV_( idxmin, bound2); 
  _flat_461 = _lt_SxV_( idxmax, bound1); 
  z = _or_VxV_( _flat_461, _flat_462); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionMin(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int sacprelude_d::partitionMin( int x { ,NN } , int y { ,NN } )
/*
 *  partitionMin ::  ---
 */
{ 
  int z__SSA0_1 { , NN } ; 
  int z { , NN } ; 

  z = _min_SxS_( x, y); 
  z__SSA0_1 = _type_conv_( int, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionMax(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int sacprelude_d::partitionMax( int x { ,NN } , int y { ,NN } )
/*
 *  partitionMax ::  ---
 */
{ 
  int z__SSA0_1 { , NN } ; 
  int z { , NN } ; 

  z = _max_SxS_( x, y); 
  z__SSA0_1 = _type_conv_( int, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::isPartitionIntersect1Part(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_d::isPartitionIntersect1Part( int[.] idxmin { ,NN } , int[.] idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersect1Part ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_463 { , NN } ; 
  bool[.] _flat_464 { , NN } ; 

  _flat_464 = _le_VxV_( idxmax, bound2); 
  _flat_463 = _ge_VxV_( idxmin, bound1); 
  z = _and_VxV_( _flat_463, _flat_464); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::isPartitionIntersect1Part(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_d::isPartitionIntersect1Part( int idxmin { ,NN } , int idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersect1Part ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_465 { , NN } ; 
  bool[.] _flat_466 { , NN } ; 

  _flat_466 = _le_SxV_( idxmax, bound2); 
  _flat_465 = _ge_SxV_( idxmin, bound1); 
  z = _and_VxV_( _flat_465, _flat_466); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionIntersectMax(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_d::partitionIntersectMax( int[.] PWLbound1 { ,NN } , int[.] ivmin { ,NN } )
/*
 *  partitionIntersectMax ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _max_VxV_( PWLbound1, ivmin); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionIntersectMax(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_d::partitionIntersectMax( int[.] PWLbound1 { ,NN } , int ivmin { ,NN } )
/*
 *  partitionIntersectMax ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _max_VxS_( PWLbound1, ivmin); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionIntersectMin(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_d::partitionIntersectMin( int[.] PWLbound2 { ,NN } , int[.] ivmax { ,NN } )
/*
 *  partitionIntersectMin ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _min_VxV_( PWLbound2, ivmax); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionIntersectMin(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_d::partitionIntersectMin( int[.] PWLbound2 { ,NN } , int ivmax { ,NN } )
/*
 *  partitionIntersectMin ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _min_VxS_( PWLbound2, ivmax); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::prod(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int sacprelude_d::prod( int[.] v { ,NN } )
/*
 *  prod ::  ---
 */
{ 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 
  int _flat_417 { , NN } ; 
  int[1] _flat_418 { , NN } ; 
  int i { , NN } ; 
  int[1] _flat_416 { , NN } ; 
  int{1} _flat_412 { , NN } ; 
  int[1]{0} _flat_413 { , NN } ; 
  int{0} _flat_414 { , NN } ; 
  int[1] _flat_415 { , NN } ; 

  _flat_415 = _shape_A_( v); 
  _flat_414 = 0; 
  _flat_413 = [ _flat_414 ]; 
  _flat_412 = 1; 
  res = with {
        /* Partn */
        (_flat_413 <= _flat_416=[i] < _flat_415)
        { 
          _flat_418 = [ i ]; 
          _flat_417 = _sel_VxA_( _flat_418, v); 
        } : _flat_417 ; 
         } :
      fold( sacprelude_d::*(), _flat_412); 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::partitionSlicer(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.], int[.], int[.], int[.] sacprelude_d::partitionSlicer( int[.] min { ,NN } , int[.] max { ,NN } , int axis { ,NN } , int[.] lb { ,NN } , int[.] ub { ,NN } )
/*
 *  partitionSlicer ::  ---
 */
{ 
  int[.] max_lower__SSA0_1 { , NN } ; 
  int[.] min_upper__SSA0_1 { , NN } ; 
  int[.] new_min__SSA0_1 { , NN } ; 
  int[.] new_max__SSA0_1 { , NN } ; 
  int[.] new_max { , NN } ; 
  int[1] _flat_440 { , NN } ; 
  int[.] new_min { , NN } ; 
  int[1] _flat_439 { , NN } ; 
  int[.] min_upper { , NN } ; 
  int[1] _flat_438 { , NN } ; 
  int[.] max_lower { , NN } ; 
  int[1] _flat_437 { , NN } ; 
  int ub_i { , NN } ; 
  int _flat_435 { , NN } ; 
  int[1] _flat_436 { , NN } ; 
  int lb_i { , NN } ; 
  int[1] _flat_434 { , NN } ; 

  _flat_434 = [ axis ]; 
  lb_i = _sel_VxA_( _flat_434, lb); 
  _flat_436 = [ axis ]; 
  _flat_435 = _sel_VxA_( _flat_436, ub); 
  ub_i = wrapper:sacprelude_d::partitionMax( lb_i, _flat_435) ; 
  _flat_437 = [ axis ]; 
  max_lower = _modarray_AxVxS_( max, _flat_437, lb_i); 
  _flat_438 = [ axis ]; 
  min_upper = _modarray_AxVxS_( min, _flat_438, ub_i); 
  _flat_439 = [ axis ]; 
  new_min = _modarray_AxVxS_( min, _flat_439, lb_i); 
  _flat_440 = [ axis ]; 
  new_max = _modarray_AxVxS_( max, _flat_440, ub_i); 
  new_max__SSA0_1 = _type_conv_( int[.], new_max); 
  new_min__SSA0_1 = _type_conv_( int[.], new_min); 
  min_upper__SSA0_1 = _type_conv_( int[.], min_upper); 
  max_lower__SSA0_1 = _type_conv_( int[.], max_lower); 
  return( max_lower__SSA0_1, min_upper__SSA0_1, new_min__SSA0_1, new_max__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::gridFiller(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.], int[.], int[.] sacprelude_d::gridFiller( int[.] lb { ,NN } , int[.] ub { ,NN } , int[.] wdth { ,NN } , int dim { ,NN } , int[.] maxwidth { ,NN } )
/*
 *  gridFiller ::  ---
 */
{ 
  int[.] nlb__SSA0_1 { , NN } ; 
  int[.] nwidth__SSA0_1 { , NN } ; 
  int[.] nmaxwidth__SSA0_1 { , NN } ; 
  int[.] nmaxwidth { , NN } ; 
  int[1] _flat_456 { , NN } ; 
  int _flat_457 { , NN } ; 
  int[1] _flat_458 { , NN } ; 
  int[.] nwidth { , NN } ; 
  int[1] _flat_455 { , NN } ; 
  int[.] nlb { , NN } ; 
  int[1] _flat_454 { , NN } ; 
  int w_dim { , NN } ; 
  int _flat_448 { , NN } ; 
  int _flat_449 { , NN } ; 
  int[1] _flat_450 { , NN } ; 
  int _flat_451 { , NN } ; 
  int[1] _flat_452 { , NN } ; 
  int{0} _flat_453 { , NN } ; 
  int l_dim { , NN } ; 
  int _flat_441 { , NN } ; 
  int _flat_442 { , NN } ; 
  int[1] _flat_443 { , NN } ; 
  int _flat_444 { , NN } ; 
  int[1] _flat_445 { , NN } ; 
  int _flat_446 { , NN } ; 
  int[1] _flat_447 { , NN } ; 

  _flat_447 = [ dim ]; 
  _flat_446 = _sel_VxA_( _flat_447, ub); 
  _flat_445 = [ dim ]; 
  _flat_444 = _sel_VxA_( _flat_445, wdth); 
  _flat_443 = [ dim ]; 
  _flat_442 = _sel_VxA_( _flat_443, lb); 
  _flat_441 = _add_SxS_( _flat_442, _flat_444); 
  l_dim = wrapper:sacprelude_d::partitionMin( _flat_441, _flat_446) ; 
  _flat_453 = 0; 
  _flat_452 = [ dim ]; 
  _flat_451 = _sel_VxA_( _flat_452, wdth); 
  _flat_450 = [ dim ]; 
  _flat_449 = _sel_VxA_( _flat_450, maxwidth); 
  _flat_448 = _sub_SxS_( _flat_449, _flat_451); 
  w_dim = wrapper:sacprelude_d::partitionMax( _flat_448, _flat_453) ; 
  _flat_454 = [ dim ]; 
  nlb = _modarray_AxVxS_( lb, _flat_454, l_dim); 
  _flat_455 = [ dim ]; 
  nwidth = _modarray_AxVxS_( maxwidth, _flat_455, w_dim); 
  _flat_458 = [ dim ]; 
  _flat_457 = _sel_VxA_( _flat_458, wdth); 
  _flat_456 = [ dim ]; 
  nmaxwidth = _modarray_AxVxS_( maxwidth, _flat_456, _flat_457); 
  nmaxwidth__SSA0_1 = _type_conv_( int[.], nmaxwidth); 
  nwidth__SSA0_1 = _type_conv_( int[.], nwidth); 
  nlb__SSA0_1 = _type_conv_( int[.], nlb); 
  return( nlb__SSA0_1, nwidth__SSA0_1, nmaxwidth__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::quadXII(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile *, int UTDScalarB::quadXII( Terminal::Terminal *_rso_496_TheTerminal { ,NN } , TermFile::TermFile *_rso_495_stdout { ,NN } , int y { ,NN } , int QUADpp { ,NN } , int QUADpw { ,NN } )
/*
 *  quadXII ::  ---
 */
{ 
  TermFile::TermFile _rso_495_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_496_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_496_TheTerminal__SSA0_1, _rso_495_stdout__SSA0_1 = wrapper:UTDScalarB:StdIO::show( _rso_496_TheTerminal, _rso_495_stdout, y) ; 
  return( _rso_496_TheTerminal__SSA0_1, _rso_495_stdout__SSA0_1, y); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::sel( int[1] idx { ,NN } , bool[15] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0]{} _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[1]{15} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{15} UTDScalarB:Array::shape( bool[15] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{15} _flat_11__SSA0_1 { , NN } ; 
  int[1]{15} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andslXBBQUICKSTOP(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::andslXBBQUICKSTOP( bool[15] y { ,NN } )
/*
 *  andslXBBQUICKSTOP ::  ---
 */
{ 
  int _eat_519 { , NN } ; 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  bool _flat_287 { , NN } ; 
  int[1] iv { , NN } ; 
  bool _flat_279 { , NN } ; 
  int{1} _flat_280 { , NN } ; 
  bool _flat_281 { , NN } ; 
  int{0} _flat_282 { , NN } ; 
  int[1] _flat_283 { , NN } ; 
  int{0} _flat_284 { , NN } ; 
  int[1]{15} _flat_285 { , NN } ; 
  int[1]{15} _flat_286 { , NN } ; 

  _flat_286 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_285 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_284 = 0; 
  _flat_283 = ( _flat_284 wrapper:UTDScalarB:Array::*_flat_285) ; 
  _flat_282 = 0; 
  _flat_281 = wrapper:UTDScalarB:Array::to_bool( _flat_282) ; 
  _flat_280 = 1; 
  _flat_279 = wrapper:UTDScalarB:Array::to_bool( _flat_280) ; 
  z = with {
        /* Partn */
        (_flat_283 <= iv=[_eat_519] < _flat_286)
        { 
          _flat_287 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
        } : _flat_287 ; 
         } :
      foldfix( UTDScalarB::andBBB(), _flat_279, _flat_281); 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:StdIO::show(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile * UTDScalarB:StdIO::show( Terminal::Terminal *_rso_322_TheTerminal { ,NN } , TermFile::TermFile *_rso_321_stdout { ,NN } , bool[15] arr { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_321_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */

  _rso_321_stdout__SSA0_1 = ArrayIO::show( _rso_321_stdout, arr) ; 
  return( _rso_322_TheTerminal, _rso_321_stdout__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::quadXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile *, bool[15] UTDScalarB::quadXBB( Terminal::Terminal *_rso_494_TheTerminal { ,NN } , TermFile::TermFile *_rso_493_stdout { ,NN } , bool[15] y { ,NN } , int QUADpp { ,NN } , int QUADpw { ,NN } )
/*
 *  quadXBB ::  ---
 */
{ 
  TermFile::TermFile _rso_493_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_494_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_494_TheTerminal__SSA0_1, _rso_493_stdout__SSA0_1 = wrapper:UTDScalarB:StdIO::show( _rso_494_TheTerminal, _rso_493_stdout, y) ; 
  return( _rso_494_TheTerminal__SSA0_1, _rso_493_stdout__SSA0_1, y); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[15] UTDScalarB:Array::++( bool[1] arr_a { ,NN } , bool[14] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_521 { , NN } ; 
  int _eat_520 { , NN } ; 
  bool[15] res__SSA0_2 { , NN } ; 
  bool[15] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{15} _flat_723 { , NN } ; 
  int[1]{1} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{1} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{1} _flat_722 { , NN } ; 
  bool[15] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{1} _flat_714 { , NN } ; 
  int[1]{15} new_shp { , NN } ; 
  int[1]{1} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{15} _flat_702 { , NN } ; 
  int{1} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{1} _flat_706 { , NN } ; 
  int{14} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{14} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_520] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_521] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[1] UTDScalarB:Array::to_bool( bool[1] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB:Array::to_bool( bool[14] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[15] UTDScalarB::comaBBB( bool[1] x { ,NN } , bool[14] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[15] _flat_165__SSA0_1 { , NN } ; 
  bool[15] _flat_165 { , NN } ; 
  bool[1] _flat_166 { , NN } ; 
  bool[14] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB:Array::++( bool[13] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_523 { , NN } ; 
  int _eat_522 { , NN } ; 
  bool[14] res__SSA0_2 { , NN } ; 
  bool[14] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{14} _flat_723 { , NN } ; 
  int[1]{13} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{13} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{13} _flat_722 { , NN } ; 
  bool[14] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{13} _flat_714 { , NN } ; 
  int[1]{14} new_shp { , NN } ; 
  int[1]{13} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{14} _flat_702 { , NN } ; 
  int{13} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{13} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_522] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_523] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[13] UTDScalarB:Array::to_bool( bool[13] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::comaBBB( bool[13] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[14] _flat_161__SSA0_1 { , NN } ; 
  bool[14] _flat_161 { , NN } ; 
  bool[13] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[13] UTDScalarB:Array::++( bool[12] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_525 { , NN } ; 
  int _eat_524 { , NN } ; 
  bool[13] res__SSA0_2 { , NN } ; 
  bool[13] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{13} _flat_723 { , NN } ; 
  int[1]{12} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{12} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{12} _flat_722 { , NN } ; 
  bool[13] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{12} _flat_714 { , NN } ; 
  int[1]{13} new_shp { , NN } ; 
  int[1]{12} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{13} _flat_702 { , NN } ; 
  int{12} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{12} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_524] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_525] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[13] UTDScalarB::comaBBB( bool[12] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[13] _flat_161__SSA0_1 { , NN } ; 
  bool[13] _flat_161 { , NN } ; 
  bool[12] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[12] UTDScalarB:Array::++( bool[11] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_527 { , NN } ; 
  int _eat_526 { , NN } ; 
  bool[12] res__SSA0_2 { , NN } ; 
  bool[12] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{12} _flat_723 { , NN } ; 
  int[1]{11} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{11} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{11} _flat_722 { , NN } ; 
  bool[12] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{11} _flat_714 { , NN } ; 
  int[1]{12} new_shp { , NN } ; 
  int[1]{11} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{12} _flat_702 { , NN } ; 
  int{11} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{11} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_526] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_527] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[11] UTDScalarB:Array::to_bool( bool[11] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[12] UTDScalarB::comaBBB( bool[11] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[12] _flat_161__SSA0_1 { , NN } ; 
  bool[12] _flat_161 { , NN } ; 
  bool[11] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[11] UTDScalarB:Array::++( bool[10] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_529 { , NN } ; 
  int _eat_528 { , NN } ; 
  bool[11] res__SSA0_2 { , NN } ; 
  bool[11] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{11} _flat_723 { , NN } ; 
  int[1]{10} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{10} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{10} _flat_722 { , NN } ; 
  bool[11] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{10} _flat_714 { , NN } ; 
  int[1]{11} new_shp { , NN } ; 
  int[1]{10} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{11} _flat_702 { , NN } ; 
  int{10} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{10} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_528] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_529] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[10] UTDScalarB:Array::to_bool( bool[10] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[11] UTDScalarB::comaBBB( bool[10] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[11] _flat_161__SSA0_1 { , NN } ; 
  bool[11] _flat_161 { , NN } ; 
  bool[10] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[10] UTDScalarB:Array::++( bool[9] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_531 { , NN } ; 
  int _eat_530 { , NN } ; 
  bool[10] res__SSA0_2 { , NN } ; 
  bool[10] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{10} _flat_723 { , NN } ; 
  int[1]{9} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{9} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{9} _flat_722 { , NN } ; 
  bool[10] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{9} _flat_714 { , NN } ; 
  int[1]{10} new_shp { , NN } ; 
  int[1]{9} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{10} _flat_702 { , NN } ; 
  int{9} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{9} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_530] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_531] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[9] UTDScalarB:Array::to_bool( bool[9] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[10] UTDScalarB::comaBBB( bool[9] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[10] _flat_161__SSA0_1 { , NN } ; 
  bool[10] _flat_161 { , NN } ; 
  bool[9] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[9] UTDScalarB:Array::++( bool[8] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_533 { , NN } ; 
  int _eat_532 { , NN } ; 
  bool[9] res__SSA0_2 { , NN } ; 
  bool[9] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{9} _flat_723 { , NN } ; 
  int[1]{8} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{8} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{8} _flat_722 { , NN } ; 
  bool[9] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{8} _flat_714 { , NN } ; 
  int[1]{9} new_shp { , NN } ; 
  int[1]{8} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{9} _flat_702 { , NN } ; 
  int{8} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{8} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_532] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_533] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[9] UTDScalarB::comaBBB( bool[8] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[9] _flat_161__SSA0_1 { , NN } ; 
  bool[9] _flat_161 { , NN } ; 
  bool[8] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[8] UTDScalarB:Array::++( bool[7] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_535 { , NN } ; 
  int _eat_534 { , NN } ; 
  bool[8] res__SSA0_2 { , NN } ; 
  bool[8] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{8} _flat_723 { , NN } ; 
  int[1]{7} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{7} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{7} _flat_722 { , NN } ; 
  bool[8] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{7} _flat_714 { , NN } ; 
  int[1]{8} new_shp { , NN } ; 
  int[1]{7} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{8} _flat_702 { , NN } ; 
  int{7} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{7} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_534] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_535] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[7] UTDScalarB:Array::to_bool( bool[7] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[8] UTDScalarB::comaBBB( bool[7] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[8] _flat_161__SSA0_1 { , NN } ; 
  bool[8] _flat_161 { , NN } ; 
  bool[7] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::neBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  int _eat_538 { , NN } ; 
  int _eat_537 { , NN } ; 
  int _eat_536 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_119 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_116 { , NN } ; 
  int[3] _flat_117 { , NN } ; 
  int{0} _flat_118 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_118 = 0; 
  _flat_117 = _mul_SxV_( _flat_118, sy); 
  _flat_116 = false; 
  z = with {
        /* Partn */
        (_flat_117 <= iv=[_eat_538, _eat_537, _eat_536] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_119 = wrapper:UTDScalarB::neBBB( xel, yel) ; 
        } : _flat_119 ; 
         } :
      genarray( sy, _flat_116); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] UTDScalarB:Array::sel( int[.] idx { ,NN } , bool array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1] _flat_66 { , NN } ; 
  int[0]{} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:ArrayBasics::sel( int[1] idx { ,NN } , int[0] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[0]{} _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[1]{0} _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::sel( int idx { ,NN } , int[0] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{0} UTDScalarB:Array::shape( int[0] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{0} _flat_6__SSA0_1 { , NN } ; 
  int[1]{0} _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::O2V(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB::O2V( int[0] shp { ,NN } , int offset { ,NN } )
/*
 *  O2V ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  bool _flat_403 { , NN } ; 
  int{0} _flat_404 { , NN } ; 
  int _flat_399 { , NN } ; 
  int{0} _flat_400 { , NN } ; 
  int[1]{0} _flat_401 { , NN } ; 
  int{1} _flat_402 { , NN } ; 
  bool _flat_388 { , NN } ; 
  int{0} _flat_389 { , NN } ; 
  int i { , NN } ; 
  int _flat_384 { , NN } ; 
  int{0} _flat_385 { , NN } ; 
  int[1]{0} _flat_386 { , NN } ; 
  int{2} _flat_387 { , NN } ; 
  int[.] wts { , NN } ; 
  int[.] iv { , NN } ; 
  int[1]{0} _flat_382 { , NN } ; 
  int{1} _flat_383 { , NN } ; 

  _flat_383 = 1; 
  _flat_382 = wrapper:UTDScalarB:Array::shape( shp) ; 
  iv = wrapper:UTDScalarB:Array::genarray( _flat_382, _flat_383) ; 
  wts = iv; 
  _flat_387 = 2; 
  _flat_386 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_385 = 0; 
  _flat_384 = wrapper:UTDScalarB:Array::sel( _flat_385, _flat_386) ; 
  i = ( _flat_384 wrapper:Array::-_flat_387) ; 
  _flat_389 = 0; 
  _flat_388 = ( i wrapper:Array::>=_flat_389) ; 
  wts__SSA0_1 = UTDScalarB::_dup_515_O2V__Cond_7( wts, i, _flat_388, shp) ; 
  _flat_402 = 1; 
  _flat_401 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_400 = 0; 
  _flat_399 = wrapper:UTDScalarB:Array::sel( _flat_400, _flat_401) ; 
  i__SSA0_1 = ( _flat_399 wrapper:Array::-_flat_402) ; 
  _flat_404 = 0; 
  _flat_403 = ( i__SSA0_1 wrapper:Array::>=_flat_404) ; 
  iv__SSA0_1 = UTDScalarB::_dup_517_O2V__Cond_5( iv, wts__SSA0_1, i__SSA0_1, _flat_403, offset, shp) ; 
  iv__SSA0_2 = _type_conv_( int[.], iv__SSA0_1); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::prod(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::prod( int[0] arr_a { ,NN } )
/*
 *  prod ::  ---
 */
{ 
  int _eat_539 { , NN } ; 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 
  int _flat_1721 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_1716 { , NN } ; 
  int[1]{0} _flat_1717 { , NN } ; 
  int{0} _flat_1718 { , NN } ; 
  int[1]{0} _flat_1719 { , NN } ; 
  int[1]{0} _flat_1720 { , NN } ; 

  _flat_1720 = _shape_A_( arr_a); 
  _flat_1719 = _shape_A_( arr_a); 
  _flat_1718 = 0; 
  _flat_1717 = _mul_SxV_( _flat_1718, _flat_1719); 
  _flat_1716 = 1; 
  res = with {
        /* Partn */
        (_flat_1717 <= iv=[_eat_539] < _flat_1720)
        { 
          _flat_1721 = _sel_VxA_( iv, arr_a); 
        } : _flat_1721 ; 
         } :
      fold( UTDScalarB:ArrayArith::*(), _flat_1716); 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[0]{} UTDScalarB:Array::shape( bool array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[0]{} _flat_11__SSA0_1 { , NN } ; 
  int[0]{} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoIBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::rhoIBB( int[3] x { ,NN } , bool y { ,NN } )
/*
 *  rhoIBB ::  ---
 */
{ 
  int _eat_542 { , NN } ; 
  int _eat_541 { , NN } ; 
  int _eat_540 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool[*] el { , NN } ; 
  int[.] _flat_153 { , NN } ; 
  int[0]{} _flat_154 { , NN } ; 
  int _flat_151 { , NN } ; 
  int[0]{} _flat_152 { , NN } ; 
  int offset { , NN } ; 
  int[3] _flat_150 { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_144 { , NN } ; 
  bool{0} _flat_145 { , NN } ; 
  int[3] _flat_146 { , NN } ; 
  int{0} _flat_147 { , NN } ; 
  int[3] _flat_148 { , NN } ; 
  int[3] _flat_149 { , NN } ; 

  _flat_149 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_148 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_147 = 0; 
  _flat_146 = _mul_SxV_( _flat_147, _flat_148); 
  _flat_145 = false; 
  _flat_144 = wrapper:UTDScalarB:Array::toi( x) ; 
  z = with {
        /* Partn */
        (_flat_146 <= iv=[_eat_542, _eat_541, _eat_540] < _flat_149)
        { 
          _flat_150 = wrapper:UTDScalarB:Array::toi( x) ; 
          offset = wrapper:UTDScalarB::V2O( _flat_150, iv) ; 
          _flat_152 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_151 = wrapper:UTDScalarB:Array::prod( _flat_152) ; 
          offset__SSA0_1 = _aplmod_SxS_( offset, _flat_151); 
          _flat_154 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_153 = wrapper:UTDScalarB::O2V( _flat_154, offset__SSA0_1) ; 
          el = wrapper:UTDScalarB:Array::sel( _flat_153, y) ; 
        } : el ; 
         } :
      genarray( _flat_144, _flat_145); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::rhoXBI(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[3] UTDScalarB::rhoXBI( bool[.,.,.] y { ,NN } )
/*
 *  rhoXBI ::  ---
 */
{ 
  int[3] _flat_155__SSA0_1 { , NN } ; 
  int[3] _flat_155 { , NN } ; 

  _flat_155 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_155__SSA0_1 = _type_conv_( int[.], _flat_155); 
  return( _flat_155__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[7] UTDScalarB:Array::++( bool[6] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_544 { , NN } ; 
  int _eat_543 { , NN } ; 
  bool[7] res__SSA0_2 { , NN } ; 
  bool[7] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{7} _flat_723 { , NN } ; 
  int[1]{6} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{6} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{6} _flat_722 { , NN } ; 
  bool[7] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{6} _flat_714 { , NN } ; 
  int[1]{7} new_shp { , NN } ; 
  int[1]{6} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{7} _flat_702 { , NN } ; 
  int{6} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{6} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_543] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_544] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[6] UTDScalarB:Array::to_bool( bool[6] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[7] UTDScalarB::comaBBB( bool[6] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[7] _flat_161__SSA0_1 { , NN } ; 
  bool[7] _flat_161 { , NN } ; 
  bool[6] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::notXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::notXBB( bool[.,.,.] y { ,NN } )
/*
 *  notXBB ::  ---
 */
{ 
  int _eat_547 { , NN } ; 
  int _eat_546 { , NN } ; 
  int _eat_545 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_10 { , NN } ; 
  bool _flat_11 { , NN } ; 
  bool _flat_12 { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_4 { , NN } ; 
  bool{0} _flat_5 { , NN } ; 
  int[3] _flat_6 { , NN } ; 
  int{0} _flat_7 { , NN } ; 
  int[3] _flat_8 { , NN } ; 
  int[3] _flat_9 { , NN } ; 

  _flat_9 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_8 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_7 = 0; 
  _flat_6 = _mul_SxV_( _flat_7, _flat_8); 
  _flat_5 = false; 
  _flat_4 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_6 <= iv=[_eat_547, _eat_546, _eat_545] < _flat_9)
        { 
          _flat_12 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_11 = wrapper:UTDScalarB:Array::to_bool( _flat_12) ; 
          _flat_10 = wrapper:UTDScalarB::notXBB( _flat_11) ; 
        } : _flat_10 ; 
         } :
      genarray( _flat_4, _flat_5); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[6] UTDScalarB:Array::++( bool[5] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_549 { , NN } ; 
  int _eat_548 { , NN } ; 
  bool[6] res__SSA0_2 { , NN } ; 
  bool[6] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{6} _flat_723 { , NN } ; 
  int[1]{5} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{5} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{5} _flat_722 { , NN } ; 
  bool[6] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{5} _flat_714 { , NN } ; 
  int[1]{6} new_shp { , NN } ; 
  int[1]{5} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{6} _flat_702 { , NN } ; 
  int{5} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{5} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_548] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_549] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[5] UTDScalarB:Array::to_bool( bool[5] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[6] UTDScalarB::comaBBB( bool[5] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[6] _flat_161__SSA0_1 { , NN } ; 
  bool[6] _flat_161 { , NN } ; 
  bool[5] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:ArrayArith::sel( int[3] idx { ,NN } , bool[.,.,.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[3] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{3} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{3} _flat_66 { , NN } ; 
  int[3] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::*(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[3] UTDScalarB:ArrayArith::*( int A { ,NN } , int[3] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_1821 { , NN } ; 
  int[3] res__SSA0_1 { , NN } ; 
  int[3] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1]{0} _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1]{3} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_1821] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[3] UTDScalarB:ArrayArith::shape( bool[.,.,.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[3] _flat_11__SSA0_1 { , NN } ; 
  int[3] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[.,.,.] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  int _eat_552 { , NN } ; 
  int _eat_551 { , NN } ; 
  int _eat_550 { , NN } ; 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1797 { , NN } ; 
  int[3] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[3] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[3] _flat_1795 { , NN } ; 
  int[3] _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv=[_eat_552, _eat_551, _eat_550] < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::eqBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  int _eat_555 { , NN } ; 
  int _eat_554 { , NN } ; 
  int _eat_553 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_53 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_50 { , NN } ; 
  int[3] _flat_51 { , NN } ; 
  int{0} _flat_52 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_52 = 0; 
  _flat_51 = _mul_SxV_( _flat_52, sy); 
  _flat_50 = false; 
  z = with {
        /* Partn */
        (_flat_51 <= iv=[_eat_555, _eat_554, _eat_553] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_53 = wrapper:UTDScalarB::eqBBB( xel, yel) ; 
        } : _flat_53 ; 
         } :
      genarray( sy, _flat_50); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB:Array::to_bool( bool[.,.,.] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:ArrayArith::sel( int[1] idx { ,NN } , bool[3] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0]{} _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[1]{3} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{3} UTDScalarB:ArrayArith::shape( bool[3] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{3} _flat_11__SSA0_1 { , NN } ; 
  int[1]{3} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[3] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  int _eat_556 { , NN } ; 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1797 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[1] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[1]{3} _flat_1795 { , NN } ; 
  int[1]{3} _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv=[_eat_556] < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::one(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{1} UTDScalarB:ArrayArith::one( int[3] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::==(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[3] UTDScalarB:Array::==( int[3] A { ,NN } , int[3] B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  int _eat_557 { , NN } ; 
  bool[3] res__SSA0_1 { , NN } ; 
  bool[3] res { , NN } ; 
  bool _flat_625 { , NN } ; 
  int _flat_626 { , NN } ; 
  int _flat_627 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_620 { , NN } ; 
  int{1} _flat_621 { , NN } ; 
  int{1} _flat_622 { , NN } ; 
  int[1]{0} _flat_623 { , NN } ; 
  int{0} _flat_624 { , NN } ; 
  int[1]{3} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_624 = 0; 
  _flat_623 = _mul_SxV_( _flat_624, shp); 
  _flat_622 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_621 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_620 = _eq_SxS_( _flat_621, _flat_622); 
  res = with {
        /* Partn */
        (_flat_623 <= iv=[_eat_557] < shp)
        { 
          _flat_627 = _sel_VxA_( iv, B); 
          _flat_626 = _sel_VxA_( iv, A); 
          _flat_625 = _eq_SxS_( _flat_626, _flat_627); 
        } : _flat_625 ; 
         } :
      genarray( shp, _flat_620); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::sameBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::sameBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  sameBBB ::  ---
 */
{ 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  bool _hce_0 { , NN } ; 
  bool _hce_1 { , NN } ; 
  bool _flat_170 { , NN } ; 
  int{3} _flat_171 { , NN } ; 
  int{3} _flat_172 { , NN } ; 

  _flat_172 = _dim_A_( y); 
  _flat_171 = _dim_A_( x); 
  _flat_170 = ( _flat_171 wrapper:UTDScalarB:Array::==_flat_172) ; 
  _hce_1 = UTDScalarB::_dup_512_sameBBB__Cond_1( _flat_170, y, x) ; 
  _hce_0 = UTDScalarB::_dup_513_sameBBB__Cond_0( _hce_1, y, x) ; 
  z = _hce_0; 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::sel( int[3] idx { ,NN } , bool[.,.,.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[3] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{3} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{3} _flat_66 { , NN } ; 
  int[3] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[3] UTDScalarB:Array::shape( bool[.,.,.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[3] _flat_11__SSA0_1 { , NN } ; 
  int[3] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::neBBB( bool[.,.,.] x { ,NN } , bool y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  int _eat_560 { , NN } ; 
  int _eat_559 { , NN } ; 
  int _eat_558 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_115 { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_109 { , NN } ; 
  bool{0} _flat_110 { , NN } ; 
  int[3] _flat_111 { , NN } ; 
  int{0} _flat_112 { , NN } ; 
  int[3] _flat_113 { , NN } ; 
  int[3] _flat_114 { , NN } ; 

  _flat_114 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_113 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_112 = 0; 
  _flat_111 = _mul_SxV_( _flat_112, _flat_113); 
  _flat_110 = false; 
  _flat_109 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_111 <= iv=[_eat_560, _eat_559, _eat_558] < _flat_114)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_115 = wrapper:UTDScalarB::neBBB( xel, y) ; 
        } : _flat_115 ; 
         } :
      genarray( _flat_109, _flat_110); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[5] UTDScalarB:Array::++( bool[4] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_562 { , NN } ; 
  int _eat_561 { , NN } ; 
  bool[5] res__SSA0_2 { , NN } ; 
  bool[5] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{5} _flat_723 { , NN } ; 
  int[1]{4} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{4} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{4} _flat_722 { , NN } ; 
  bool[5] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{4} _flat_714 { , NN } ; 
  int[1]{5} new_shp { , NN } ; 
  int[1]{4} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{5} _flat_702 { , NN } ; 
  int{4} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{4} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_561] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_562] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[5] UTDScalarB::comaBBB( bool[4] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[5] _flat_161__SSA0_1 { , NN } ; 
  bool[5] _flat_161 { , NN } ; 
  bool[4] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:ArrayArith::sel( int[2] idx { ,NN } , bool[.,.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[2] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{2} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{2} _flat_66 { , NN } ; 
  int[2] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::*(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[2] UTDScalarB:ArrayArith::*( int A { ,NN } , int[2] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_1821 { , NN } ; 
  int[2] res__SSA0_1 { , NN } ; 
  int[2] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1]{0} _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1]{2} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_1821] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[2] UTDScalarB:ArrayArith::shape( bool[.,.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[2] _flat_11__SSA0_1 { , NN } ; 
  int[2] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[.,.] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  int _eat_564 { , NN } ; 
  int _eat_563 { , NN } ; 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1797 { , NN } ; 
  int[2] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[2] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[2] _flat_1795 { , NN } ; 
  int[2] _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv=[_eat_564, _eat_563] < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::sel( int[2] idx { ,NN } , bool[.,.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[2] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{2} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{2} _flat_66 { , NN } ; 
  int[2] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::sel( int[2] idx { ,NN } , bool[4,4] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[2] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0]{} _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{2} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{2} _flat_66 { , NN } ; 
  int[2]{4,4} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[2] UTDScalarB:Array::shape( bool[.,.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[2] _flat_11__SSA0_1 { , NN } ; 
  int[2] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.] UTDScalarB::eqBBB( bool[4,4] x { ,NN } , bool[.,.] y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  int _eat_566 { , NN } ; 
  int _eat_565 { , NN } ; 
  bool[.,.] z__SSA0_1 { , NN } ; 
  bool[.,.] z { , NN } ; 
  bool _flat_53 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[2] iv { , NN } ; 
  bool{0} _flat_50 { , NN } ; 
  int[2] _flat_51 { , NN } ; 
  int{0} _flat_52 { , NN } ; 
  int[2] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_52 = 0; 
  _flat_51 = _mul_SxV_( _flat_52, sy); 
  _flat_50 = false; 
  z = with {
        /* Partn */
        (_flat_51 <= iv=[_eat_566, _eat_565] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_53 = wrapper:UTDScalarB::eqBBB( xel, yel) ; 
        } : _flat_53 ; 
         } :
      genarray( sy, _flat_50); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB:Array::to_bool( bool[4,4] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.] UTDScalarB:Array::to_bool( bool[.,.] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:ArrayArith::sel( int[1] idx { ,NN } , bool[2] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0]{} _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[1]{2} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{2} UTDScalarB:ArrayArith::shape( bool[2] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{2} _flat_11__SSA0_1 { , NN } ; 
  int[1]{2} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[2] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  int _eat_567 { , NN } ; 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1797 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[1] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[1]{2} _flat_1795 { , NN } ; 
  int[1]{2} _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv=[_eat_567] < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::one(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{1} UTDScalarB:ArrayArith::one( int[2] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::==(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[2] UTDScalarB:Array::==( int[2] A { ,NN } , int[2] B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  int _eat_568 { , NN } ; 
  bool[2] res__SSA0_1 { , NN } ; 
  bool[2] res { , NN } ; 
  bool _flat_625 { , NN } ; 
  int _flat_626 { , NN } ; 
  int _flat_627 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_620 { , NN } ; 
  int{1} _flat_621 { , NN } ; 
  int{1} _flat_622 { , NN } ; 
  int[1]{0} _flat_623 { , NN } ; 
  int{0} _flat_624 { , NN } ; 
  int[1]{2} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_624 = 0; 
  _flat_623 = _mul_SxV_( _flat_624, shp); 
  _flat_622 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_621 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_620 = _eq_SxS_( _flat_621, _flat_622); 
  res = with {
        /* Partn */
        (_flat_623 <= iv=[_eat_568] < shp)
        { 
          _flat_627 = _sel_VxA_( iv, B); 
          _flat_626 = _sel_VxA_( iv, A); 
          _flat_625 = _eq_SxS_( _flat_626, _flat_627); 
        } : _flat_625 ; 
         } :
      genarray( shp, _flat_620); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::sameBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::sameBBB( bool[4,4] x { ,NN } , bool[.,.] y { ,NN } )
/*
 *  sameBBB ::  ---
 */
{ 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  bool _hce_0 { , NN } ; 
  bool _hce_1 { , NN } ; 
  bool _flat_170 { , NN } ; 
  int{2} _flat_171 { , NN } ; 
  int{2} _flat_172 { , NN } ; 

  _flat_172 = _dim_A_( y); 
  _flat_171 = _dim_A_( x); 
  _flat_170 = ( _flat_171 wrapper:UTDScalarB:Array::==_flat_172) ; 
  _hce_1 = UTDScalarB::_dup_510_sameBBB__Cond_1( _flat_170, y, x) ; 
  _hce_0 = UTDScalarB::_dup_511_sameBBB__Cond_0( _hce_1, y, x) ; 
  z = _hce_0; 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::neBBB( bool x { ,NN } , bool[4] y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  int _eat_569 { , NN } ; 
  bool[4] z__SSA0_1 { , NN } ; 
  bool[4] z { , NN } ; 
  bool _flat_351 { , NN } ; 
  bool yel { , NN } ; 
  bool _flat_350 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_344 { , NN } ; 
  bool{0} _flat_345 { , NN } ; 
  int[1]{0} _flat_346 { , NN } ; 
  int{0} _flat_347 { , NN } ; 
  int[1]{4} _flat_348 { , NN } ; 
  int[1]{4} _flat_349 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_349 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_348 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_347 = 0; 
  _flat_346 = _mul_SxV_( _flat_347, _flat_348); 
  _flat_345 = false; 
  _flat_344 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_346 <= iv=[_eat_569] < _flat_349)
        { 
          _flat_350 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_350) ; 
          _flat_351 = wrapper:UTDScalarB::neBBB( xel, yel) ; 
        } : _flat_351 ; 
         } :
      genarray( _flat_344, _flat_345); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::sel( int[1] idx { ,NN } , bool[4] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0]{} _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[1]{4} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{4} UTDScalarB:Array::shape( bool[4] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{4} _flat_11__SSA0_1 { , NN } ; 
  int[1]{4} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotneBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB::jotdotneBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  jotdotneBBB ::  ---
 */
{ 
  int _eat_570 { , NN } ; 
  bool[4,4] z { , NN } ; 
  bool[4] _flat_257 { , NN } ; 
  bool[4] _flat_258 { , NN } ; 
  bool xitem { , NN } ; 
  bool _flat_256 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_251 { , NN } ; 
  int[1]{0} _flat_252 { , NN } ; 
  int{0} _flat_253 { , NN } ; 
  int[1]{4} _flat_254 { , NN } ; 
  int[1]{4} _flat_255 { , NN } ; 
  bool[.] cell { , NN } ; 
  int[1]{4} _flat_249 { , NN } ; 
  bool{0} _flat_250 { , NN } ; 

  _flat_250 = false; 
  _flat_249 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_249, _flat_250) ; 
  _flat_255 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_254 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_253 = 0; 
  _flat_252 = _mul_SxV_( _flat_253, _flat_254); 
  _flat_251 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_252 <= iv=[_eat_570] < _flat_255)
        { 
          _flat_256 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_256) ; 
          _flat_258 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_257 = wrapper:UTDScalarB::neBBB( xitem, _flat_258) ; 
        } : _flat_257 ; 
         } :
      genarray( _flat_251, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{16} UTDScalarB:Array::shape( bool[16] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{16} _flat_11__SSA0_1 { , NN } ; 
  int[1]{16} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:ArrayBasics::sel( int[1] idx { ,NN } , int[2] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[0]{} _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[1]{2} _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::sel( int idx { ,NN } , int[2] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{2} UTDScalarB:Array::shape( int[2] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{2} _flat_6__SSA0_1 { , NN } ; 
  int[1]{2} _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::V2O(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB::V2O( int[2] shp { ,NN } , int[2] iv { ,NN } )
/*
 *  V2O ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool _flat_375 { , NN } ; 
  int{0} _flat_376 { , NN } ; 
  int i { , NN } ; 
  int _flat_371 { , NN } ; 
  int{0} _flat_372 { , NN } ; 
  int[1]{2} _flat_373 { , NN } ; 
  int{1} _flat_374 { , NN } ; 
  int{1} wt { , NN } ; 
  int{0} offset { , NN } ; 

  offset = 0; 
  wt = 1; 
  _flat_374 = 1; 
  _flat_373 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_372 = 0; 
  _flat_371 = wrapper:UTDScalarB:Array::sel( _flat_372, _flat_373) ; 
  i = ( _flat_371 wrapper:Array::-_flat_374) ; 
  _flat_376 = 0; 
  _flat_375 = ( i wrapper:Array::>=_flat_376) ; 
  offset__SSA0_1 = UTDScalarB::_dup_509_V2O__Cond_3( offset, wt, i, _flat_375, iv, shp) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{0} UTDScalarB:ArrayArith::zero( int[2] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_0__SSA0_1 { , NN } ; 
  int{0} _flat_0 { , NN } ; 

  _flat_0 = 0; 
  _flat_0__SSA0_1 = _type_conv_( int, _flat_0); 
  return( _flat_0__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::toi(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[2] UTDScalarB:Array::toi( int[2] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int _eat_571 { , NN } ; 
  int[2] res__SSA0_1 { , NN } ; 
  int[2] res { , NN } ; 
  int _flat_1370 { , NN } ; 
  int _flat_1371 { , NN } ; 
  int[1] iv { , NN } ; 
  int{0} _flat_1366 { , NN } ; 
  int{0} _flat_1367 { , NN } ; 
  int[1]{0} _flat_1368 { , NN } ; 
  int{0} _flat_1369 { , NN } ; 
  int[1]{2} shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1369 = 0; 
  _flat_1368 = _mul_SxV_( _flat_1369, shp); 
  _flat_1367 = wrapper:UTDScalarB:ArrayArith::zero( A) ; 
  _flat_1366 = _toi_S_( _flat_1367); 
  res = with {
        /* Partn */
        (_flat_1368 <= iv=[_eat_571] < shp)
        { 
          _flat_1371 = _sel_VxA_( iv, A); 
          _flat_1370 = _toi_S_( _flat_1371); 
        } : _flat_1370 ; 
         } :
      genarray( shp, _flat_1366); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoIBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.] UTDScalarB::rhoIBB( int[2] x { ,NN } , bool[16] y { ,NN } )
/*
 *  rhoIBB ::  ---
 */
{ 
  int _eat_573 { , NN } ; 
  int _eat_572 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool[.,.] z { , NN } ; 
  bool[*] el { , NN } ; 
  int[.] _flat_153 { , NN } ; 
  int[1]{16} _flat_154 { , NN } ; 
  int _flat_151 { , NN } ; 
  int[1]{16} _flat_152 { , NN } ; 
  int offset { , NN } ; 
  int[2] _flat_150 { , NN } ; 
  int[2] iv { , NN } ; 
  int[2] _flat_144 { , NN } ; 
  bool{0} _flat_145 { , NN } ; 
  int[2] _flat_146 { , NN } ; 
  int{0} _flat_147 { , NN } ; 
  int[2] _flat_148 { , NN } ; 
  int[2] _flat_149 { , NN } ; 

  _flat_149 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_148 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_147 = 0; 
  _flat_146 = _mul_SxV_( _flat_147, _flat_148); 
  _flat_145 = false; 
  _flat_144 = wrapper:UTDScalarB:Array::toi( x) ; 
  z = with {
        /* Partn */
        (_flat_146 <= iv=[_eat_573, _eat_572] < _flat_149)
        { 
          _flat_150 = wrapper:UTDScalarB:Array::toi( x) ; 
          offset = wrapper:UTDScalarB::V2O( _flat_150, iv) ; 
          _flat_152 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_151 = wrapper:UTDScalarB:Array::prod( _flat_152) ; 
          offset__SSA0_1 = _aplmod_SxS_( offset, _flat_151); 
          _flat_154 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_153 = wrapper:UTDScalarB::O2V( _flat_154, offset__SSA0_1) ; 
          el = wrapper:UTDScalarB:Array::sel( _flat_153, y) ; 
        } : el ; 
         } :
      genarray( _flat_144, _flat_145); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[16] UTDScalarB:Array::++( bool[4] arr_a { ,NN } , bool[12] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_575 { , NN } ; 
  int _eat_574 { , NN } ; 
  bool[16] res__SSA0_2 { , NN } ; 
  bool[16] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{16} _flat_723 { , NN } ; 
  int[1]{4} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{4} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{4} _flat_722 { , NN } ; 
  bool[16] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{4} _flat_714 { , NN } ; 
  int[1]{16} new_shp { , NN } ; 
  int[1]{4} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{16} _flat_702 { , NN } ; 
  int{4} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{4} _flat_706 { , NN } ; 
  int{12} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{12} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_574] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_575] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[12] UTDScalarB:Array::to_bool( bool[12] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[16] UTDScalarB::comaBBB( bool[4] x { ,NN } , bool[12] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[16] _flat_165__SSA0_1 { , NN } ; 
  bool[16] _flat_165 { , NN } ; 
  bool[4] _flat_166 { , NN } ; 
  bool[12] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[12] UTDScalarB:Array::++( bool[4] arr_a { ,NN } , bool[8] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_577 { , NN } ; 
  int _eat_576 { , NN } ; 
  bool[12] res__SSA0_2 { , NN } ; 
  bool[12] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{12} _flat_723 { , NN } ; 
  int[1]{4} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{4} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{4} _flat_722 { , NN } ; 
  bool[12] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{4} _flat_714 { , NN } ; 
  int[1]{12} new_shp { , NN } ; 
  int[1]{4} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{12} _flat_702 { , NN } ; 
  int{4} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{4} _flat_706 { , NN } ; 
  int{8} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{8} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_576] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_577] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[8] UTDScalarB:Array::to_bool( bool[8] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[12] UTDScalarB::comaBBB( bool[4] x { ,NN } , bool[8] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[12] _flat_165__SSA0_1 { , NN } ; 
  bool[12] _flat_165 { , NN } ; 
  bool[4] _flat_166 { , NN } ; 
  bool[8] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[8] UTDScalarB:Array::++( bool[4] arr_a { ,NN } , bool[4] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_579 { , NN } ; 
  int _eat_578 { , NN } ; 
  bool[8] res__SSA0_2 { , NN } ; 
  bool[8] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{8} _flat_723 { , NN } ; 
  int[1]{4} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{4} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{4} _flat_722 { , NN } ; 
  bool[8] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{4} _flat_714 { , NN } ; 
  int[1]{8} new_shp { , NN } ; 
  int[1]{4} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{8} _flat_702 { , NN } ; 
  int{4} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{4} _flat_706 { , NN } ; 
  int{4} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{4} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_578] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_579] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB:Array::to_bool( bool[4] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[8] UTDScalarB::comaBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[8] _flat_165__SSA0_1 { , NN } ; 
  bool[8] _flat_165 { , NN } ; 
  bool[4] _flat_166 { , NN } ; 
  bool[4] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB:Array::++( bool[3] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_581 { , NN } ; 
  int _eat_580 { , NN } ; 
  bool[4] res__SSA0_2 { , NN } ; 
  bool[4] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{4} _flat_723 { , NN } ; 
  int[1]{3} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{3} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{3} _flat_722 { , NN } ; 
  bool[4] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{3} _flat_714 { , NN } ; 
  int[1]{4} new_shp { , NN } ; 
  int[1]{3} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{4} _flat_702 { , NN } ; 
  int{3} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{3} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_580] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_581] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[3] UTDScalarB:Array::to_bool( bool[3] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::comaBBB( bool[3] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[4] _flat_161__SSA0_1 { , NN } ; 
  bool[4] _flat_161 { , NN } ; 
  bool[3] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[3] UTDScalarB:Array::++( bool[2] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_583 { , NN } ; 
  int _eat_582 { , NN } ; 
  bool[3] res__SSA0_2 { , NN } ; 
  bool[3] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{3} _flat_723 { , NN } ; 
  int[1]{2} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{2} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{2} _flat_722 { , NN } ; 
  bool[3] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{2} _flat_714 { , NN } ; 
  int[1]{3} new_shp { , NN } ; 
  int[1]{2} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{3} _flat_702 { , NN } ; 
  int{2} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{2} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_582] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_583] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[2] UTDScalarB:Array::to_bool( bool[2] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[3] UTDScalarB::comaBBB( bool[2] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[3] _flat_161__SSA0_1 { , NN } ; 
  bool[3] _flat_161 { , NN } ; 
  bool[2] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{2} UTDScalarB:Array::shape( bool[2] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{2} _flat_11__SSA0_1 { , NN } ; 
  int[1]{2} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoIBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::rhoIBB( int[3] x { ,NN } , bool[2] y { ,NN } )
/*
 *  rhoIBB ::  ---
 */
{ 
  int _eat_586 { , NN } ; 
  int _eat_585 { , NN } ; 
  int _eat_584 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool[*] el { , NN } ; 
  int[.] _flat_153 { , NN } ; 
  int[1]{2} _flat_154 { , NN } ; 
  int _flat_151 { , NN } ; 
  int[1]{2} _flat_152 { , NN } ; 
  int offset { , NN } ; 
  int[3] _flat_150 { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_144 { , NN } ; 
  bool{0} _flat_145 { , NN } ; 
  int[3] _flat_146 { , NN } ; 
  int{0} _flat_147 { , NN } ; 
  int[3] _flat_148 { , NN } ; 
  int[3] _flat_149 { , NN } ; 

  _flat_149 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_148 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_147 = 0; 
  _flat_146 = _mul_SxV_( _flat_147, _flat_148); 
  _flat_145 = false; 
  _flat_144 = wrapper:UTDScalarB:Array::toi( x) ; 
  z = with {
        /* Partn */
        (_flat_146 <= iv=[_eat_586, _eat_585, _eat_584] < _flat_149)
        { 
          _flat_150 = wrapper:UTDScalarB:Array::toi( x) ; 
          offset = wrapper:UTDScalarB::V2O( _flat_150, iv) ; 
          _flat_152 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_151 = wrapper:UTDScalarB:Array::prod( _flat_152) ; 
          offset__SSA0_1 = _aplmod_SxS_( offset, _flat_151); 
          _flat_154 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_153 = wrapper:UTDScalarB::O2V( _flat_154, offset__SSA0_1) ; 
          el = wrapper:UTDScalarB:Array::sel( _flat_153, y) ; 
        } : el ; 
         } :
      genarray( _flat_144, _flat_145); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{1} UTDScalarB:Array::shape( int[1] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{1} _flat_6__SSA0_1 { , NN } ; 
  int[1]{1} _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::O2V(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB::O2V( int[1] shp { ,NN } , int offset { ,NN } )
/*
 *  O2V ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  bool _flat_403 { , NN } ; 
  int{0} _flat_404 { , NN } ; 
  int _flat_399 { , NN } ; 
  int{0} _flat_400 { , NN } ; 
  int[1]{1} _flat_401 { , NN } ; 
  int{1} _flat_402 { , NN } ; 
  bool _flat_388 { , NN } ; 
  int{0} _flat_389 { , NN } ; 
  int i { , NN } ; 
  int _flat_384 { , NN } ; 
  int{0} _flat_385 { , NN } ; 
  int[1]{1} _flat_386 { , NN } ; 
  int{2} _flat_387 { , NN } ; 
  int[.] wts { , NN } ; 
  int[.] iv { , NN } ; 
  int[1]{1} _flat_382 { , NN } ; 
  int{1} _flat_383 { , NN } ; 

  _flat_383 = 1; 
  _flat_382 = wrapper:UTDScalarB:Array::shape( shp) ; 
  iv = wrapper:UTDScalarB:Array::genarray( _flat_382, _flat_383) ; 
  wts = iv; 
  _flat_387 = 2; 
  _flat_386 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_385 = 0; 
  _flat_384 = wrapper:UTDScalarB:Array::sel( _flat_385, _flat_386) ; 
  i = ( _flat_384 wrapper:Array::-_flat_387) ; 
  _flat_389 = 0; 
  _flat_388 = ( i wrapper:Array::>=_flat_389) ; 
  wts__SSA0_1 = UTDScalarB::_dup_505_O2V__Cond_7( wts, i, _flat_388, shp) ; 
  _flat_402 = 1; 
  _flat_401 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_400 = 0; 
  _flat_399 = wrapper:UTDScalarB:Array::sel( _flat_400, _flat_401) ; 
  i__SSA0_1 = ( _flat_399 wrapper:Array::-_flat_402) ; 
  _flat_404 = 0; 
  _flat_403 = ( i__SSA0_1 wrapper:Array::>=_flat_404) ; 
  iv__SSA0_1 = UTDScalarB::_dup_507_O2V__Cond_5( iv, wts__SSA0_1, i__SSA0_1, _flat_403, offset, shp) ; 
  iv__SSA0_2 = _type_conv_( int[.], iv__SSA0_1); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::prod(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::prod( int[1] arr_a { ,NN } )
/*
 *  prod ::  ---
 */
{ 
  int _eat_587 { , NN } ; 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 
  int _flat_1721 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_1716 { , NN } ; 
  int[1]{0} _flat_1717 { , NN } ; 
  int{0} _flat_1718 { , NN } ; 
  int[1]{1} _flat_1719 { , NN } ; 
  int[1]{1} _flat_1720 { , NN } ; 

  _flat_1720 = _shape_A_( arr_a); 
  _flat_1719 = _shape_A_( arr_a); 
  _flat_1718 = 0; 
  _flat_1717 = _mul_SxV_( _flat_1718, _flat_1719); 
  _flat_1716 = 1; 
  res = with {
        /* Partn */
        (_flat_1717 <= iv=[_eat_587] < _flat_1720)
        { 
          _flat_1721 = _sel_VxA_( iv, arr_a); 
        } : _flat_1721 ; 
         } :
      fold( UTDScalarB:ArrayArith::*(), _flat_1716); 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{3} UTDScalarB:Array::shape( bool[3] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{3} _flat_11__SSA0_1 { , NN } ; 
  int[1]{3} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:ArrayBasics::sel( int[1] idx { ,NN } , int[3] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[0]{} _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[1]{3} _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::sel( int idx { ,NN } , int[3] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{3} UTDScalarB:Array::shape( int[3] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{3} _flat_6__SSA0_1 { , NN } ; 
  int[1]{3} _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::V2O(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB::V2O( int[3] shp { ,NN } , int[3] iv { ,NN } )
/*
 *  V2O ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool _flat_375 { , NN } ; 
  int{0} _flat_376 { , NN } ; 
  int i { , NN } ; 
  int _flat_371 { , NN } ; 
  int{0} _flat_372 { , NN } ; 
  int[1]{3} _flat_373 { , NN } ; 
  int{1} _flat_374 { , NN } ; 
  int{1} wt { , NN } ; 
  int{0} offset { , NN } ; 

  offset = 0; 
  wt = 1; 
  _flat_374 = 1; 
  _flat_373 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_372 = 0; 
  _flat_371 = wrapper:UTDScalarB:Array::sel( _flat_372, _flat_373) ; 
  i = ( _flat_371 wrapper:Array::-_flat_374) ; 
  _flat_376 = 0; 
  _flat_375 = ( i wrapper:Array::>=_flat_376) ; 
  offset__SSA0_1 = UTDScalarB::_dup_503_V2O__Cond_3( offset, wt, i, _flat_375, iv, shp) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{0} UTDScalarB:ArrayArith::zero( int[3] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_0__SSA0_1 { , NN } ; 
  int{0} _flat_0 { , NN } ; 

  _flat_0 = 0; 
  _flat_0__SSA0_1 = _type_conv_( int, _flat_0); 
  return( _flat_0__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::toi(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[3] UTDScalarB:Array::toi( int[3] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int _eat_588 { , NN } ; 
  int[3] res__SSA0_1 { , NN } ; 
  int[3] res { , NN } ; 
  int _flat_1370 { , NN } ; 
  int _flat_1371 { , NN } ; 
  int[1] iv { , NN } ; 
  int{0} _flat_1366 { , NN } ; 
  int{0} _flat_1367 { , NN } ; 
  int[1]{0} _flat_1368 { , NN } ; 
  int{0} _flat_1369 { , NN } ; 
  int[1]{3} shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1369 = 0; 
  _flat_1368 = _mul_SxV_( _flat_1369, shp); 
  _flat_1367 = wrapper:UTDScalarB:ArrayArith::zero( A) ; 
  _flat_1366 = _toi_S_( _flat_1367); 
  res = with {
        /* Partn */
        (_flat_1368 <= iv=[_eat_588] < shp)
        { 
          _flat_1371 = _sel_VxA_( iv, A); 
          _flat_1370 = _toi_S_( _flat_1371); 
        } : _flat_1370 ; 
         } :
      genarray( shp, _flat_1366); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoIBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::rhoIBB( int[3] x { ,NN } , bool[3] y { ,NN } )
/*
 *  rhoIBB ::  ---
 */
{ 
  int _eat_591 { , NN } ; 
  int _eat_590 { , NN } ; 
  int _eat_589 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool[*] el { , NN } ; 
  int[.] _flat_153 { , NN } ; 
  int[1]{3} _flat_154 { , NN } ; 
  int _flat_151 { , NN } ; 
  int[1]{3} _flat_152 { , NN } ; 
  int offset { , NN } ; 
  int[3] _flat_150 { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_144 { , NN } ; 
  bool{0} _flat_145 { , NN } ; 
  int[3] _flat_146 { , NN } ; 
  int{0} _flat_147 { , NN } ; 
  int[3] _flat_148 { , NN } ; 
  int[3] _flat_149 { , NN } ; 

  _flat_149 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_148 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_147 = 0; 
  _flat_146 = _mul_SxV_( _flat_147, _flat_148); 
  _flat_145 = false; 
  _flat_144 = wrapper:UTDScalarB:Array::toi( x) ; 
  z = with {
        /* Partn */
        (_flat_146 <= iv=[_eat_591, _eat_590, _eat_589] < _flat_149)
        { 
          _flat_150 = wrapper:UTDScalarB:Array::toi( x) ; 
          offset = wrapper:UTDScalarB::V2O( _flat_150, iv) ; 
          _flat_152 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_151 = wrapper:UTDScalarB:Array::prod( _flat_152) ; 
          offset__SSA0_1 = _aplmod_SxS_( offset, _flat_151); 
          _flat_154 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_153 = wrapper:UTDScalarB::O2V( _flat_154, offset__SSA0_1) ; 
          el = wrapper:UTDScalarB:Array::sel( _flat_153, y) ; 
        } : el ; 
         } :
      genarray( _flat_144, _flat_145); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::sel( int[1] idx { ,NN } , bool[.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[1] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::*(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1] UTDScalarB:Array::*( int A { ,NN } , int[1] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_592 { , NN } ; 
  int[1] res__SSA0_1 { , NN } ; 
  int[1] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1]{0} _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1]{1} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_592] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1] UTDScalarB:Array::shape( bool[.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1] _flat_11__SSA0_1 { , NN } ; 
  int[1] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::genarray(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] UTDScalarB:Array::genarray( int[.] shp { ,NN } , bool val { ,NN } )
/*
 *  genarray ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_94 { , NN } ; 
  int{0} _flat_95 { , NN } ; 

  _flat_95 = 0; 
  _flat_94 = _mul_SxV_( _flat_95, shp); 
  res = with {
        /* Partn */
        (_flat_94 <= iv < shp)
        { 
        } : val ; 
         } :
      genarray( shp, val); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] UTDScalarB:ArrayArith::sel( int[.] idx { ,NN } , bool[+] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1] _flat_66 { , NN } ; 
  int[.] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:ArrayArith::shape( bool[+] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_11__SSA0_1 { , NN } ; 
  int[.] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[+] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool[*] _flat_1797 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[.] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[.] _flat_1795 { , NN } ; 
  int[.] _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB:Array::to_bool( bool[+] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:ArrayArith::sel( int[1] idx { ,NN } , bool[.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[1] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::one(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{1} UTDScalarB:ArrayArith::one( int[1] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::*(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1] UTDScalarB:ArrayArith::*( int A { ,NN } , int[1] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_1821 { , NN } ; 
  int[1] res__SSA0_1 { , NN } ; 
  int[1] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1]{0} _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1]{1} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_1821] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1] UTDScalarB:ArrayArith::shape( bool[.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1] _flat_11__SSA0_1 { , NN } ; 
  int[1] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[.] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  int _eat_593 { , NN } ; 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1797 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[1] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[1] _flat_1795 { , NN } ; 
  int[1] _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv=[_eat_593] < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::==(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::==( int[.] A { ,NN } , int[.] B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  int _eat_594 { , NN } ; 
  bool[.] res__SSA0_1 { , NN } ; 
  bool[.] res { , NN } ; 
  bool _flat_625 { , NN } ; 
  int _flat_626 { , NN } ; 
  int _flat_627 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_620 { , NN } ; 
  int{1} _flat_621 { , NN } ; 
  int{1} _flat_622 { , NN } ; 
  int[1] _flat_623 { , NN } ; 
  int{0} _flat_624 { , NN } ; 
  int[1] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_624 = 0; 
  _flat_623 = _mul_SxV_( _flat_624, shp); 
  _flat_622 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_621 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_620 = _eq_SxS_( _flat_621, _flat_622); 
  res = with {
        /* Partn */
        (_flat_623 <= iv=[_eat_594] < shp)
        { 
          _flat_627 = _sel_VxA_( iv, B); 
          _flat_626 = _sel_VxA_( iv, A); 
          _flat_625 = _eq_SxS_( _flat_626, _flat_627); 
        } : _flat_625 ; 
         } :
      genarray( shp, _flat_620); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::++( bool[.] arr_a { ,NN } , bool[.] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_596 { , NN } ; 
  int _eat_595 { , NN } ; 
  bool[.] res__SSA0_2 { , NN } ; 
  bool[.] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1] _flat_723 { , NN } ; 
  int[1] offset { , NN } ; 
  int[1] _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1] _flat_722 { , NN } ; 
  bool[.] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1] _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1] _flat_714 { , NN } ; 
  int[1] new_shp { , NN } ; 
  int[1] _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int _flat_702 { , NN } ; 
  int _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1] _flat_706 { , NN } ; 
  int _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1] _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_595] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_596] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::++( bool[.] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_598 { , NN } ; 
  int _eat_597 { , NN } ; 
  bool[.] res__SSA0_2 { , NN } ; 
  bool[.] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1] _flat_723 { , NN } ; 
  int[1] offset { , NN } ; 
  int[1] _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1] _flat_722 { , NN } ; 
  bool[.] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1] _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1] _flat_714 { , NN } ; 
  int[1] new_shp { , NN } ; 
  int[1] _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int _flat_702 { , NN } ; 
  int _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1] _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_597] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_598] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::to_bool( bool[.] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[2] UTDScalarB:Array::++( bool[1] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_600 { , NN } ; 
  int _eat_599 { , NN } ; 
  bool[2] res__SSA0_2 { , NN } ; 
  bool[2] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{2} _flat_723 { , NN } ; 
  int[1]{1} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{1} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{1} _flat_722 { , NN } ; 
  bool[2] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{1} _flat_714 { , NN } ; 
  int[1]{2} new_shp { , NN } ; 
  int[1]{1} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{2} _flat_702 { , NN } ; 
  int{1} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{1} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_599] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_600] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::modarray(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:ArrayBasics::modarray( int[.] array { ,NN } , int[1] v { ,NN } , int val { ,NN } )
/*
 *  modarray ::  ---
 */
{ 
  int[.] _flat_96 { , NN } ; 

  _flat_96 = _modarray_AxVxS_( array, v, val); 
  return( _flat_96); 
}



/****************************************************************************
 * UTDScalarB:Array::modarray(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:Array::modarray( int[.] array { ,NN } , int v { ,NN } , int val { ,NN } )
/*
 *  modarray ::  ---
 */
{ 
  int[.] _flat_97 { , NN } ; 
  int[1] _flat_98 { , NN } ; 

  _flat_98 = [ v ]; 
  _flat_97 = wrapper:UTDScalarB:ArrayBasics::modarray( array, _flat_98, val) ; 
  return( _flat_97); 
}



/****************************************************************************
 * UTDScalarB:Array::genarray(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:Array::genarray( int[1] shp { ,NN } , int val { ,NN } )
/*
 *  genarray ::  ---
 */
{ 
  int _eat_601 { , NN } ; 
  int[.] res { , NN } ; 
  int[1] iv { , NN } ; 
  int[1] _flat_84 { , NN } ; 
  int{0} _flat_85 { , NN } ; 

  _flat_85 = 0; 
  _flat_84 = _mul_SxV_( _flat_85, shp); 
  res = with {
        /* Partn */
        (_flat_84 <= iv=[_eat_601] < shp)
        { 
        } : val ; 
         } :
      genarray( shp, val); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::prod(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::prod( int[.] arr_a { ,NN } )
/*
 *  prod ::  ---
 */
{ 
  int _eat_602 { , NN } ; 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 
  int _flat_1721 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_1716 { , NN } ; 
  int[1] _flat_1717 { , NN } ; 
  int{0} _flat_1718 { , NN } ; 
  int[1] _flat_1719 { , NN } ; 
  int[1] _flat_1720 { , NN } ; 

  _flat_1720 = _shape_A_( arr_a); 
  _flat_1719 = _shape_A_( arr_a); 
  _flat_1718 = 0; 
  _flat_1717 = _mul_SxV_( _flat_1718, _flat_1719); 
  _flat_1716 = 1; 
  res = with {
        /* Partn */
        (_flat_1717 <= iv=[_eat_602] < _flat_1720)
        { 
          _flat_1721 = _sel_VxA_( iv, arr_a); 
        } : _flat_1721 ; 
         } :
      fold( UTDScalarB:ArrayArith::*(), _flat_1716); 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:ArrayBasics::sel( int[1] idx { ,NN } , int[.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[0] _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[1] _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::sel( int idx { ,NN } , int[.] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:ArrayBasics::sel( int[1] idx { ,NN } , int[1] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[0]{} _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[1]{1} _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::sel( int idx { ,NN } , int[1] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1] UTDScalarB:Array::shape( int[.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1] _flat_6__SSA0_1 { , NN } ; 
  int[1] _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{0} UTDScalarB:ArrayArith::zero( int[.] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_0__SSA0_1 { , NN } ; 
  int{0} _flat_0 { , NN } ; 

  _flat_0 = 0; 
  _flat_0__SSA0_1 = _type_conv_( int, _flat_0); 
  return( _flat_0__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::toi(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:Array::toi( int[.] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int _eat_603 { , NN } ; 
  int[.] res__SSA0_1 { , NN } ; 
  int[.] res { , NN } ; 
  int _flat_1370 { , NN } ; 
  int _flat_1371 { , NN } ; 
  int[1] iv { , NN } ; 
  int{0} _flat_1366 { , NN } ; 
  int{0} _flat_1367 { , NN } ; 
  int[1] _flat_1368 { , NN } ; 
  int{0} _flat_1369 { , NN } ; 
  int[1] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1369 = 0; 
  _flat_1368 = _mul_SxV_( _flat_1369, shp); 
  _flat_1367 = wrapper:UTDScalarB:ArrayArith::zero( A) ; 
  _flat_1366 = _toi_S_( _flat_1367); 
  res = with {
        /* Partn */
        (_flat_1368 <= iv=[_eat_603] < shp)
        { 
          _flat_1371 = _sel_VxA_( iv, A); 
          _flat_1370 = _toi_S_( _flat_1371); 
        } : _flat_1370 ; 
         } :
      genarray( shp, _flat_1366); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::genarray(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::genarray( int[1] shp { ,NN } , bool val { ,NN } )
/*
 *  genarray ::  ---
 */
{ 
  int _eat_604 { , NN } ; 
  bool[.] res { , NN } ; 
  int[1] iv { , NN } ; 
  int[1] _flat_94 { , NN } ; 
  int{0} _flat_95 { , NN } ; 

  _flat_95 = 0; 
  _flat_94 = _mul_SxV_( _flat_95, shp); 
  res = with {
        /* Partn */
        (_flat_94 <= iv=[_eat_604] < shp)
        { 
        } : val ; 
         } :
      genarray( shp, val); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] UTDScalarB:Array::sel( int[.] idx { ,NN } , bool[+] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1] _flat_66 { , NN } ; 
  int[.] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:Array::shape( bool[+] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_11__SSA0_1 { , NN } ; 
  int[.] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_517_O2V__Cond_5(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_517_O2V__Cond_5( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , bool _flat_403 { ,NN } , int offset { ,NN } , int[0] shp { ,NN } )
/*
 *  _dup_517_O2V__Cond_5 ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 

  if (_flat_403) 
  { 
    iv__SSA0_1 = UTDScalarB::_dup_516_O2V__Loop_4( iv, wts, i, offset, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_2 = ( _flat_403 ? iv__SSA0_1 : iv ); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_516_O2V__Loop_4(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_516_O2V__Loop_4( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , int offset { ,NN } , int[0] shp { ,NN } )
/*
 *  _dup_516_O2V__Loop_4 ::  ---
 */
{ 
  int[.] iv__SSA0_3 { , NN } ; 
  int[.] iv__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int offset__SSA0_2 { , NN } ;  /* declared: int */
  int offset__SSA0_1 { , NN } ;  /* declared: int */
  int[.] iv__SSA0_1 { , NN } ; 
  int _flat_408 { , NN } ; 
  int _flat_407 { , NN } ; 
  int _flat_406 { , NN } ; 
  int _flat_405 { , NN } ; 
  int _flat_411 { , NN } ; 
  int _flat_410 { , NN } ; 
  int _flat_409 { , NN } ; 
  int{0} _flat_413 { , NN } ; 
  bool _flat_412 { , NN } ; 

  _flat_408 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  _flat_407 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_406 = ( offset wrapper:Array::/_flat_407) ; 
  _flat_405 = _aplmod_SxS_( _flat_406, _flat_408); 
  iv__SSA0_1 = wrapper:UTDScalarB:Array::modarray( iv, i, _flat_405) ; 
  _flat_411 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_410 = wrapper:UTDScalarB:Array::sel( i, iv__SSA0_1) ; 
  _flat_409 = ( _flat_410 wrapper:UTDScalarB:Array::*_flat_411) ; 
  offset__SSA0_1 = ( offset wrapper:Array::-_flat_409) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_413 = 0; 
  _flat_412 = ( i__SSA0_1 wrapper:Array::>=_flat_413) ; 
  if (_flat_412) 
  { 
    iv__SSA0_2 = UTDScalarB::_dup_516_O2V__Loop_4( iv__SSA0_1, wts, i__SSA0_1, offset__SSA0_2, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_3 = ( _flat_412 ? iv__SSA0_2 : iv__SSA0_1 ); 
  return( iv__SSA0_3); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_515_O2V__Cond_7(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_515_O2V__Cond_7( int[.] wts { ,NN } , int i { ,NN } , bool _flat_388 { ,NN } , int[0] shp { ,NN } )
/*
 *  _dup_515_O2V__Cond_7 ::  ---
 */
{ 
  int[.] wts__SSA0_2 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 

  if (_flat_388) 
  { 
    wts__SSA0_1 = UTDScalarB::_dup_514_O2V__Loop_6( wts, i, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_2 = ( _flat_388 ? wts__SSA0_1 : wts ); 
  return( wts__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_514_O2V__Loop_6(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_514_O2V__Loop_6( int[.] wts { ,NN } , int i { ,NN } , int[0] shp { ,NN } )
/*
 *  _dup_514_O2V__Loop_6 ::  ---
 */
{ 
  int[.] wts__SSA0_3 { , NN } ; 
  int[.] wts__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  int{1} _flat_396 { , NN } ; 
  int _flat_395 { , NN } ; 
  int _flat_394 { , NN } ; 
  int{1} _flat_393 { , NN } ; 
  int _flat_392 { , NN } ; 
  int _flat_391 { , NN } ; 
  int _flat_390 { , NN } ; 
  int{0} _flat_398 { , NN } ; 
  bool _flat_397 { , NN } ; 

  _flat_396 = 1; 
  _flat_395 = ( i wrapper:Array::+_flat_396) ; 
  _flat_394 = wrapper:UTDScalarB:Array::sel( _flat_395, shp) ; 
  _flat_393 = 1; 
  _flat_392 = ( i wrapper:Array::+_flat_393) ; 
  _flat_391 = wrapper:UTDScalarB:Array::sel( _flat_392, wts) ; 
  _flat_390 = ( _flat_391 wrapper:UTDScalarB:Array::*_flat_394) ; 
  wts__SSA0_1 = wrapper:UTDScalarB:Array::modarray( wts, i, _flat_390) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_398 = 0; 
  _flat_397 = ( i__SSA0_1 wrapper:Array::>=_flat_398) ; 
  if (_flat_397) 
  { 
    wts__SSA0_2 = UTDScalarB::_dup_514_O2V__Loop_6( wts__SSA0_1, i__SSA0_1, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_3 = ( _flat_397 ? wts__SSA0_2 : wts__SSA0_1 ); 
  return( wts__SSA0_3); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_513_sameBBB__Cond_0(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::_dup_513_sameBBB__Cond_0( bool _hce_1 { ,NN } , bool[.,.,.] y { ,NN } , bool[.,.,.] x { ,NN } )
/*
 *  _dup_513_sameBBB__Cond_0 ::  ---
 */
{ 
  bool _hce_0__SSA0_2 { , NN } ; 
  bool{0} _hce_0__SSA0_1 { , NN } ; 
  bool[.,.,.] _flat_178 { , NN } ; 
  bool[.,.,.] _flat_177 { , NN } ; 
  bool[.,.,.] _flat_176 { , NN } ; 
  bool _hce_0 { , NN } ; 

  if (_hce_1) 
  { 
    _flat_178 = wrapper:UTDScalarB:Array::to_bool( y) ; 
    _flat_177 = wrapper:UTDScalarB:Array::to_bool( x) ; 
    _flat_176 = wrapper:UTDScalarB::eqBBB( _flat_177, _flat_178) ; 
    _hce_0 = wrapper:UTDScalarB:Array::all( _flat_176) ; 
  }
  else
  { 
    _hce_0__SSA0_1 = false; 
  }
  _hce_0__SSA0_2 = ( _hce_1 ? _hce_0 : _hce_0__SSA0_1 ); 
  return( _hce_0__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_512_sameBBB__Cond_1(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::_dup_512_sameBBB__Cond_1( bool _flat_170 { ,NN } , bool[.,.,.] y { ,NN } , bool[.,.,.] x { ,NN } )
/*
 *  _dup_512_sameBBB__Cond_1 ::  ---
 */
{ 
  bool _hce_1__SSA0_2 { , NN } ; 
  bool{0} _hce_1__SSA0_1 { , NN } ; 
  int[3] _flat_175 { , NN } ; 
  int[3] _flat_174 { , NN } ; 
  bool[3] _flat_173 { , NN } ; 
  bool _hce_1 { , NN } ; 

  if (_flat_170) 
  { 
    _flat_175 = _shape_A_( y); 
    _flat_174 = _shape_A_( x); 
    _flat_173 = ( _flat_174 wrapper:UTDScalarB:Array::==_flat_175) ; 
    _hce_1 = wrapper:UTDScalarB:Array::all( _flat_173) ; 
  }
  else
  { 
    _hce_1__SSA0_1 = false; 
  }
  _hce_1__SSA0_2 = ( _flat_170 ? _hce_1 : _hce_1__SSA0_1 ); 
  return( _hce_1__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_511_sameBBB__Cond_0(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::_dup_511_sameBBB__Cond_0( bool _hce_1 { ,NN } , bool[.,.] y { ,NN } , bool[4,4] x { ,NN } )
/*
 *  _dup_511_sameBBB__Cond_0 ::  ---
 */
{ 
  bool _hce_0__SSA0_2 { , NN } ; 
  bool{0} _hce_0__SSA0_1 { , NN } ; 
  bool[.,.] _flat_178 { , NN } ; 
  bool[4,4] _flat_177 { , NN } ; 
  bool[.,.] _flat_176 { , NN } ; 
  bool _hce_0 { , NN } ; 

  if (_hce_1) 
  { 
    _flat_178 = wrapper:UTDScalarB:Array::to_bool( y) ; 
    _flat_177 = wrapper:UTDScalarB:Array::to_bool( x) ; 
    _flat_176 = wrapper:UTDScalarB::eqBBB( _flat_177, _flat_178) ; 
    _hce_0 = wrapper:UTDScalarB:Array::all( _flat_176) ; 
  }
  else
  { 
    _hce_0__SSA0_1 = false; 
  }
  _hce_0__SSA0_2 = ( _hce_1 ? _hce_0 : _hce_0__SSA0_1 ); 
  return( _hce_0__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_510_sameBBB__Cond_1(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::_dup_510_sameBBB__Cond_1( bool _flat_170 { ,NN } , bool[.,.] y { ,NN } , bool[4,4] x { ,NN } )
/*
 *  _dup_510_sameBBB__Cond_1 ::  ---
 */
{ 
  bool _hce_1__SSA0_2 { , NN } ; 
  bool{0} _hce_1__SSA0_1 { , NN } ; 
  int[2] _flat_175 { , NN } ; 
  int[2]{4,4} _flat_174 { , NN } ; 
  bool[2] _flat_173 { , NN } ; 
  bool _hce_1 { , NN } ; 

  if (_flat_170) 
  { 
    _flat_175 = _shape_A_( y); 
    _flat_174 = _shape_A_( x); 
    _flat_173 = ( _flat_174 wrapper:UTDScalarB:Array::==_flat_175) ; 
    _hce_1 = wrapper:UTDScalarB:Array::all( _flat_173) ; 
  }
  else
  { 
    _hce_1__SSA0_1 = false; 
  }
  _hce_1__SSA0_2 = ( _flat_170 ? _hce_1 : _hce_1__SSA0_1 ); 
  return( _hce_1__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_509_V2O__Cond_3(...) [ body ]
 ****************************************************************************/
int UTDScalarB::_dup_509_V2O__Cond_3( int{0} offset { ,NN } , int{1} wt { ,NN } , int i { ,NN } , bool _flat_375 { ,NN } , int[2] iv { ,NN } , int[2] shp { ,NN } )
/*
 *  _dup_509_V2O__Cond_3 ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 

  if (_flat_375) 
  { 
    offset__SSA0_1 = UTDScalarB::_dup_508_V2O__Loop_2( offset, wt, i, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_2 = ( _flat_375 ? offset__SSA0_1 : offset ); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_508_V2O__Loop_2(...) [ body ]
 ****************************************************************************/
int UTDScalarB::_dup_508_V2O__Loop_2( int offset { ,NN } , int wt { ,NN } , int i { ,NN } , int[2] iv { ,NN } , int[2] shp { ,NN } )
/*
 *  _dup_508_V2O__Loop_2 ::  ---
 */
{ 
  int offset__SSA0_3 { , NN } ; 
  int offset__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int wt__SSA0_1 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  int _flat_378 { , NN } ; 
  int _flat_377 { , NN } ; 
  int _flat_379 { , NN } ; 
  int{0} _flat_381 { , NN } ; 
  bool _flat_380 { , NN } ; 

  _flat_378 = wrapper:UTDScalarB:Array::sel( i, iv) ; 
  _flat_377 = ( wt wrapper:UTDScalarB:Array::*_flat_378) ; 
  offset__SSA0_1 = ( offset wrapper:Array::+_flat_377) ; 
  _flat_379 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  wt__SSA0_1 = ( wt wrapper:UTDScalarB:Array::*_flat_379) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_381 = 0; 
  _flat_380 = ( i__SSA0_1 wrapper:Array::>=_flat_381) ; 
  if (_flat_380) 
  { 
    offset__SSA0_2 = UTDScalarB::_dup_508_V2O__Loop_2( offset__SSA0_1, wt__SSA0_1, i__SSA0_1, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_3 = ( _flat_380 ? offset__SSA0_2 : offset__SSA0_1 ); 
  return( offset__SSA0_3); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_507_O2V__Cond_5(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_507_O2V__Cond_5( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , bool _flat_403 { ,NN } , int offset { ,NN } , int[1] shp { ,NN } )
/*
 *  _dup_507_O2V__Cond_5 ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 

  if (_flat_403) 
  { 
    iv__SSA0_1 = UTDScalarB::_dup_506_O2V__Loop_4( iv, wts, i, offset, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_2 = ( _flat_403 ? iv__SSA0_1 : iv ); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_506_O2V__Loop_4(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_506_O2V__Loop_4( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , int offset { ,NN } , int[1] shp { ,NN } )
/*
 *  _dup_506_O2V__Loop_4 ::  ---
 */
{ 
  int[.] iv__SSA0_3 { , NN } ; 
  int[.] iv__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int offset__SSA0_2 { , NN } ;  /* declared: int */
  int offset__SSA0_1 { , NN } ;  /* declared: int */
  int[.] iv__SSA0_1 { , NN } ; 
  int _flat_408 { , NN } ; 
  int _flat_407 { , NN } ; 
  int _flat_406 { , NN } ; 
  int _flat_405 { , NN } ; 
  int _flat_411 { , NN } ; 
  int _flat_410 { , NN } ; 
  int _flat_409 { , NN } ; 
  int{0} _flat_413 { , NN } ; 
  bool _flat_412 { , NN } ; 

  _flat_408 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  _flat_407 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_406 = ( offset wrapper:Array::/_flat_407) ; 
  _flat_405 = _aplmod_SxS_( _flat_406, _flat_408); 
  iv__SSA0_1 = wrapper:UTDScalarB:Array::modarray( iv, i, _flat_405) ; 
  _flat_411 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_410 = wrapper:UTDScalarB:Array::sel( i, iv__SSA0_1) ; 
  _flat_409 = ( _flat_410 wrapper:UTDScalarB:Array::*_flat_411) ; 
  offset__SSA0_1 = ( offset wrapper:Array::-_flat_409) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_413 = 0; 
  _flat_412 = ( i__SSA0_1 wrapper:Array::>=_flat_413) ; 
  if (_flat_412) 
  { 
    iv__SSA0_2 = UTDScalarB::_dup_506_O2V__Loop_4( iv__SSA0_1, wts, i__SSA0_1, offset__SSA0_2, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_3 = ( _flat_412 ? iv__SSA0_2 : iv__SSA0_1 ); 
  return( iv__SSA0_3); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_505_O2V__Cond_7(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_505_O2V__Cond_7( int[.] wts { ,NN } , int i { ,NN } , bool _flat_388 { ,NN } , int[1] shp { ,NN } )
/*
 *  _dup_505_O2V__Cond_7 ::  ---
 */
{ 
  int[.] wts__SSA0_2 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 

  if (_flat_388) 
  { 
    wts__SSA0_1 = UTDScalarB::_dup_504_O2V__Loop_6( wts, i, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_2 = ( _flat_388 ? wts__SSA0_1 : wts ); 
  return( wts__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_504_O2V__Loop_6(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_504_O2V__Loop_6( int[.] wts { ,NN } , int i { ,NN } , int[1] shp { ,NN } )
/*
 *  _dup_504_O2V__Loop_6 ::  ---
 */
{ 
  int[.] wts__SSA0_3 { , NN } ; 
  int[.] wts__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  int{1} _flat_396 { , NN } ; 
  int _flat_395 { , NN } ; 
  int _flat_394 { , NN } ; 
  int{1} _flat_393 { , NN } ; 
  int _flat_392 { , NN } ; 
  int _flat_391 { , NN } ; 
  int _flat_390 { , NN } ; 
  int{0} _flat_398 { , NN } ; 
  bool _flat_397 { , NN } ; 

  _flat_396 = 1; 
  _flat_395 = ( i wrapper:Array::+_flat_396) ; 
  _flat_394 = wrapper:UTDScalarB:Array::sel( _flat_395, shp) ; 
  _flat_393 = 1; 
  _flat_392 = ( i wrapper:Array::+_flat_393) ; 
  _flat_391 = wrapper:UTDScalarB:Array::sel( _flat_392, wts) ; 
  _flat_390 = ( _flat_391 wrapper:UTDScalarB:Array::*_flat_394) ; 
  wts__SSA0_1 = wrapper:UTDScalarB:Array::modarray( wts, i, _flat_390) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_398 = 0; 
  _flat_397 = ( i__SSA0_1 wrapper:Array::>=_flat_398) ; 
  if (_flat_397) 
  { 
    wts__SSA0_2 = UTDScalarB::_dup_504_O2V__Loop_6( wts__SSA0_1, i__SSA0_1, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_3 = ( _flat_397 ? wts__SSA0_2 : wts__SSA0_1 ); 
  return( wts__SSA0_3); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_503_V2O__Cond_3(...) [ body ]
 ****************************************************************************/
int UTDScalarB::_dup_503_V2O__Cond_3( int{0} offset { ,NN } , int{1} wt { ,NN } , int i { ,NN } , bool _flat_375 { ,NN } , int[3] iv { ,NN } , int[3] shp { ,NN } )
/*
 *  _dup_503_V2O__Cond_3 ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 

  if (_flat_375) 
  { 
    offset__SSA0_1 = UTDScalarB::_dup_502_V2O__Loop_2( offset, wt, i, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_2 = ( _flat_375 ? offset__SSA0_1 : offset ); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_502_V2O__Loop_2(...) [ body ]
 ****************************************************************************/
int UTDScalarB::_dup_502_V2O__Loop_2( int offset { ,NN } , int wt { ,NN } , int i { ,NN } , int[3] iv { ,NN } , int[3] shp { ,NN } )
/*
 *  _dup_502_V2O__Loop_2 ::  ---
 */
{ 
  int offset__SSA0_3 { , NN } ; 
  int offset__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int wt__SSA0_1 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  int _flat_378 { , NN } ; 
  int _flat_377 { , NN } ; 
  int _flat_379 { , NN } ; 
  int{0} _flat_381 { , NN } ; 
  bool _flat_380 { , NN } ; 

  _flat_378 = wrapper:UTDScalarB:Array::sel( i, iv) ; 
  _flat_377 = ( wt wrapper:UTDScalarB:Array::*_flat_378) ; 
  offset__SSA0_1 = ( offset wrapper:Array::+_flat_377) ; 
  _flat_379 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  wt__SSA0_1 = ( wt wrapper:UTDScalarB:Array::*_flat_379) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_381 = 0; 
  _flat_380 = ( i__SSA0_1 wrapper:Array::>=_flat_381) ; 
  if (_flat_380) 
  { 
    offset__SSA0_2 = UTDScalarB::_dup_502_V2O__Loop_2( offset__SSA0_1, wt__SSA0_1, i__SSA0_1, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_3 = ( _flat_380 ? offset__SSA0_2 : offset__SSA0_1 ); 
  return( offset__SSA0_3); 
}



/****************************************************************************
 * ArrayArith::zero(...) [ body ]
 ****************************************************************************/
inline
int{0} ArrayArith::zero( int[+] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_0__SSA0_1 { , NN } ; 
  int{0} _flat_0 { , NN } ; 

  _flat_0 = 0; 
  _flat_0__SSA0_1 = _type_conv_( int, _flat_0); 
  return( _flat_0__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::zero(...) [ body ]
 ****************************************************************************/
inline
int{0} ScalarArith::zero( int[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_0__SSA0_1 { , NN } ; 
  int{0} _flat_0 { , NN } ; 

  _flat_0 = 0; 
  _flat_0__SSA0_1 = _type_conv_( int, _flat_0); 
  return( _flat_0__SSA0_1); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayArith::zero(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int{0} UTDScalarB:ArrayArith::zero( int[*] A { ,NN } )
/*
 *  zero :: { int[*] -> ( int{0}),
              int[+] -> ( int{0}),
              int[.] -> ( int{0}),
              int[3] -> ( int{0}),
              int[2] -> ( int{0})}
 *  dispatching to: ScalarArith::zero,
 *                  ArrayArith::zero,
 *                  UTDScalarB:ArrayArith::zero,
 *                  UTDScalarB:ArrayArith::zero,
 *                  UTDScalarB:ArrayArith::zero
 */
{ 
  int{0} _cwc_3200 { , NN } ; 
  bool _cwc_3224 { , NN } ; 
  int _cwc_3223 { , NN } ; 
  int{0} _cwc_3222 { , NN } ; 
  int _cwc_3221 { , NN } ; 
  bool _cwc_3220 { , NN } ; 
  int _cwc_3219 { , NN } ; 
  bool _cwc_3218 { , NN } ; 
  bool _cwc_3217 { , NN } ; 
  int{3} _cwc_3216 { , NN } ; 
  int _cwc_3215 { , NN } ; 
  int[1]{0} _cwc_3214 { , NN } ; 
  bool _cwc_3213 { , NN } ; 
  int{0} _cwc_3212 { , NN } ; 
  bool _cwc_3211 { , NN } ; 
  bool _cwc_3210 { , NN } ; 
  int{2} _cwc_3209 { , NN } ; 
  int _cwc_3208 { , NN } ; 
  int[1]{0} _cwc_3207 { , NN } ; 
  bool _cwc_3206 { , NN } ; 
  int{0} _cwc_3205 { , NN } ; 
  int[+] _cwc_3204 { , NN } ; 
  int{0} _cwc_3203 { , NN } ; 
  int _cwc_3202 { , NN } ; 
  int{0} _cwc_3201 { , NN } ; 

  _cwc_3221 = _dim_A_( A); 
  _cwc_3223 = 0; 
  _cwc_3224 = _gt_SxS_( _cwc_3221, _cwc_3223); 
  if (_cwc_3224) 
  { 
    _cwc_3202 = _dim_A_( A); 
    _cwc_3219 = 1; 
    _cwc_3220 = _eq_SxS_( _cwc_3202, _cwc_3219); 
    if (_cwc_3220) 
    { 
      _cwc_3204 = _shape_A_( A); 
      _cwc_3213 = true; 
      _cwc_3216 = 3; 
      _cwc_3214 = [ 0 ]; 
      _cwc_3215 = _sel_VxA_( _cwc_3214, _cwc_3204); 
      _cwc_3217 = _eq_SxS_( _cwc_3215, _cwc_3216); 
      _cwc_3218 = _and_SxS_( _cwc_3217, _cwc_3213); 
      if (_cwc_3218) 
      { 
        _cwc_3212 = UTDScalarB:ArrayArith::zero( A) ; 
        _cwc_3200 = _cwc_3212; 
      }
      else
      { 
        _cwc_3206 = true; 
        _cwc_3209 = 2; 
        _cwc_3207 = [ 0 ]; 
        _cwc_3208 = _sel_VxA_( _cwc_3207, _cwc_3204); 
        _cwc_3210 = _eq_SxS_( _cwc_3208, _cwc_3209); 
        _cwc_3211 = _and_SxS_( _cwc_3210, _cwc_3206); 
        if (_cwc_3211) 
        { 
          _cwc_3205 = UTDScalarB:ArrayArith::zero( A) ; 
          _cwc_3200 = _cwc_3205; 
        }
        else
        { 
          _cwc_3203 = UTDScalarB:ArrayArith::zero( A) ; 
          _cwc_3200 = _cwc_3203; 
        }
      }
    }
    else
    { 
      _cwc_3201 = ArrayArith::zero( A) ; 
      _cwc_3200 = _cwc_3201; 
    }
  }
  else
  { 
    _cwc_3222 = ScalarArith::zero( A) ; 
    _cwc_3200 = _cwc_3222; 
  }
  return( _cwc_3200); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::sel( int[1] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[.] _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[.] _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayBasics::sel(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:ArrayBasics::sel( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { int[*] -> ( int[*]),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[1] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int),
                         int[0] -> ( int)},
             int -> { int[*] -> ( int[*])},
             int[+] -> { int[*] -> ( int[*]),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[1] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int),
                         int[0] -> ( int)},
             int[.] -> { int[*] -> ( int[*]),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[1] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int),
                         int[0] -> ( int)},
             int[1] -> { int[*] -> ( int[*]),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[1] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int),
                         int[0] -> ( int)}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  UTDScalarB:ArrayBasics::sel,
 *                  UTDScalarB:ArrayBasics::sel,
 *                  UTDScalarB:ArrayBasics::sel,
 *                  UTDScalarB:ArrayBasics::sel,
 *                  UTDScalarB:ArrayBasics::sel
 */
{ 
  int[*] _cwc_3225 { , NN } ; 
  bool _cwc_3307 { , NN } ; 
  int _cwc_3306 { , NN } ; 
  int[*] _cwc_3305 { , NN } ; 
  int _cwc_3304 { , NN } ; 
  bool _cwc_3303 { , NN } ; 
  int _cwc_3302 { , NN } ; 
  bool _cwc_3301 { , NN } ; 
  bool _cwc_3300 { , NN } ; 
  int{1} _cwc_3299 { , NN } ; 
  int _cwc_3298 { , NN } ; 
  int[1]{0} _cwc_3297 { , NN } ; 
  bool _cwc_3296 { , NN } ; 
  bool _cwc_3295 { , NN } ; 
  int _cwc_3294 { , NN } ; 
  bool _cwc_3293 { , NN } ; 
  bool _cwc_3292 { , NN } ; 
  int{1} _cwc_3291 { , NN } ; 
  int _cwc_3290 { , NN } ; 
  int[1]{0} _cwc_3289 { , NN } ; 
  bool _cwc_3288 { , NN } ; 
  int _cwc_3287 { , NN } ; 
  bool _cwc_3286 { , NN } ; 
  bool _cwc_3285 { , NN } ; 
  int{3} _cwc_3284 { , NN } ; 
  int _cwc_3283 { , NN } ; 
  int[1]{0} _cwc_3282 { , NN } ; 
  bool _cwc_3281 { , NN } ; 
  int _cwc_3280 { , NN } ; 
  bool _cwc_3279 { , NN } ; 
  bool _cwc_3278 { , NN } ; 
  int{2} _cwc_3277 { , NN } ; 
  int _cwc_3276 { , NN } ; 
  int[1]{0} _cwc_3275 { , NN } ; 
  bool _cwc_3274 { , NN } ; 
  int _cwc_3273 { , NN } ; 
  bool _cwc_3272 { , NN } ; 
  bool _cwc_3271 { , NN } ; 
  int{0} _cwc_3270 { , NN } ; 
  int _cwc_3269 { , NN } ; 
  int[1]{0} _cwc_3268 { , NN } ; 
  bool _cwc_3267 { , NN } ; 
  int _cwc_3266 { , NN } ; 
  int[+] _cwc_3265 { , NN } ; 
  int _cwc_3264 { , NN } ; 
  int _cwc_3263 { , NN } ; 
  int[*] _cwc_3262 { , NN } ; 
  int[+] _cwc_3261 { , NN } ; 
  bool _cwc_3260 { , NN } ; 
  int _cwc_3259 { , NN } ; 
  bool _cwc_3258 { , NN } ; 
  bool _cwc_3257 { , NN } ; 
  int{1} _cwc_3256 { , NN } ; 
  int _cwc_3255 { , NN } ; 
  int[1]{0} _cwc_3254 { , NN } ; 
  bool _cwc_3253 { , NN } ; 
  int[*] _cwc_3252 { , NN } ; 
  bool _cwc_3251 { , NN } ; 
  bool _cwc_3250 { , NN } ; 
  int{3} _cwc_3249 { , NN } ; 
  int _cwc_3248 { , NN } ; 
  int[1]{0} _cwc_3247 { , NN } ; 
  bool _cwc_3246 { , NN } ; 
  int[*] _cwc_3245 { , NN } ; 
  bool _cwc_3244 { , NN } ; 
  bool _cwc_3243 { , NN } ; 
  int{2} _cwc_3242 { , NN } ; 
  int _cwc_3241 { , NN } ; 
  int[1]{0} _cwc_3240 { , NN } ; 
  bool _cwc_3239 { , NN } ; 
  int[*] _cwc_3238 { , NN } ; 
  bool _cwc_3237 { , NN } ; 
  bool _cwc_3236 { , NN } ; 
  int{0} _cwc_3235 { , NN } ; 
  int _cwc_3234 { , NN } ; 
  int[1]{0} _cwc_3233 { , NN } ; 
  bool _cwc_3232 { , NN } ; 
  int[*] _cwc_3231 { , NN } ; 
  int[+] _cwc_3230 { , NN } ; 
  int[*] _cwc_3229 { , NN } ; 
  int _cwc_3228 { , NN } ; 
  int[*] _cwc_3227 { , NN } ; 
  int _cwc_3226 { , NN } ; 

  _cwc_3304 = _dim_A_( idx); 
  _cwc_3306 = 0; 
  _cwc_3307 = _eq_SxS_( _cwc_3304, _cwc_3306); 
  if (_cwc_3307) 
  { 
    _cwc_3305 = ArrayBasics::sel( idx, array) ; 
    _cwc_3225 = _cwc_3305; 
  }
  else
  { 
    _cwc_3226 = _dim_A_( idx); 
    _cwc_3302 = 1; 
    _cwc_3303 = _eq_SxS_( _cwc_3226, _cwc_3302); 
    if (_cwc_3303) 
    { 
      _cwc_3261 = _shape_A_( idx); 
      _cwc_3296 = true; 
      _cwc_3299 = 1; 
      _cwc_3297 = [ 0 ]; 
      _cwc_3298 = _sel_VxA_( _cwc_3297, _cwc_3261); 
      _cwc_3300 = _eq_SxS_( _cwc_3298, _cwc_3299); 
      _cwc_3301 = _and_SxS_( _cwc_3300, _cwc_3296); 
      if (_cwc_3301) 
      { 
        _cwc_3263 = _dim_A_( array); 
        _cwc_3294 = 1; 
        _cwc_3295 = _eq_SxS_( _cwc_3263, _cwc_3294); 
        if (_cwc_3295) 
        { 
          _cwc_3265 = _shape_A_( array); 
          _cwc_3288 = true; 
          _cwc_3291 = 1; 
          _cwc_3289 = [ 0 ]; 
          _cwc_3290 = _sel_VxA_( _cwc_3289, _cwc_3265); 
          _cwc_3292 = _eq_SxS_( _cwc_3290, _cwc_3291); 
          _cwc_3293 = _and_SxS_( _cwc_3292, _cwc_3288); 
          if (_cwc_3293) 
          { 
            _cwc_3287 = UTDScalarB:ArrayBasics::sel( idx, array) ; 
            _cwc_3225 = _cwc_3287; 
          }
          else
          { 
            _cwc_3281 = true; 
            _cwc_3284 = 3; 
            _cwc_3282 = [ 0 ]; 
            _cwc_3283 = _sel_VxA_( _cwc_3282, _cwc_3265); 
            _cwc_3285 = _eq_SxS_( _cwc_3283, _cwc_3284); 
            _cwc_3286 = _and_SxS_( _cwc_3285, _cwc_3281); 
            if (_cwc_3286) 
            { 
              _cwc_3280 = UTDScalarB:ArrayBasics::sel( idx, array) ; 
              _cwc_3225 = _cwc_3280; 
            }
            else
            { 
              _cwc_3274 = true; 
              _cwc_3277 = 2; 
              _cwc_3275 = [ 0 ]; 
              _cwc_3276 = _sel_VxA_( _cwc_3275, _cwc_3265); 
              _cwc_3278 = _eq_SxS_( _cwc_3276, _cwc_3277); 
              _cwc_3279 = _and_SxS_( _cwc_3278, _cwc_3274); 
              if (_cwc_3279) 
              { 
                _cwc_3273 = UTDScalarB:ArrayBasics::sel( idx, array) ; 
                _cwc_3225 = _cwc_3273; 
              }
              else
              { 
                _cwc_3267 = true; 
                _cwc_3270 = 0; 
                _cwc_3268 = [ 0 ]; 
                _cwc_3269 = _sel_VxA_( _cwc_3268, _cwc_3265); 
                _cwc_3271 = _eq_SxS_( _cwc_3269, _cwc_3270); 
                _cwc_3272 = _and_SxS_( _cwc_3271, _cwc_3267); 
                if (_cwc_3272) 
                { 
                  _cwc_3266 = UTDScalarB:ArrayBasics::sel( idx, array) ; 
                  _cwc_3225 = _cwc_3266; 
                }
                else
                { 
                  _cwc_3264 = UTDScalarB:ArrayBasics::sel( idx, array) ; 
                  _cwc_3225 = _cwc_3264; 
                }
              }
            }
          }
        }
        else
        { 
          _cwc_3262 = ArrayBasics::sel( idx, array) ; 
          _cwc_3225 = _cwc_3262; 
        }
      }
      else
      { 
        _cwc_3228 = _dim_A_( array); 
        _cwc_3259 = 1; 
        _cwc_3260 = _eq_SxS_( _cwc_3228, _cwc_3259); 
        if (_cwc_3260) 
        { 
          _cwc_3230 = _shape_A_( array); 
          _cwc_3253 = true; 
          _cwc_3256 = 1; 
          _cwc_3254 = [ 0 ]; 
          _cwc_3255 = _sel_VxA_( _cwc_3254, _cwc_3230); 
          _cwc_3257 = _eq_SxS_( _cwc_3255, _cwc_3256); 
          _cwc_3258 = _and_SxS_( _cwc_3257, _cwc_3253); 
          if (_cwc_3258) 
          { 
            _cwc_3252 = ArrayBasics::sel( idx, array) ; 
            _cwc_3225 = _cwc_3252; 
          }
          else
          { 
            _cwc_3246 = true; 
            _cwc_3249 = 3; 
            _cwc_3247 = [ 0 ]; 
            _cwc_3248 = _sel_VxA_( _cwc_3247, _cwc_3230); 
            _cwc_3250 = _eq_SxS_( _cwc_3248, _cwc_3249); 
            _cwc_3251 = _and_SxS_( _cwc_3250, _cwc_3246); 
            if (_cwc_3251) 
            { 
              _cwc_3245 = ArrayBasics::sel( idx, array) ; 
              _cwc_3225 = _cwc_3245; 
            }
            else
            { 
              _cwc_3239 = true; 
              _cwc_3242 = 2; 
              _cwc_3240 = [ 0 ]; 
              _cwc_3241 = _sel_VxA_( _cwc_3240, _cwc_3230); 
              _cwc_3243 = _eq_SxS_( _cwc_3241, _cwc_3242); 
              _cwc_3244 = _and_SxS_( _cwc_3243, _cwc_3239); 
              if (_cwc_3244) 
              { 
                _cwc_3238 = ArrayBasics::sel( idx, array) ; 
                _cwc_3225 = _cwc_3238; 
              }
              else
              { 
                _cwc_3232 = true; 
                _cwc_3235 = 0; 
                _cwc_3233 = [ 0 ]; 
                _cwc_3234 = _sel_VxA_( _cwc_3233, _cwc_3230); 
                _cwc_3236 = _eq_SxS_( _cwc_3234, _cwc_3235); 
                _cwc_3237 = _and_SxS_( _cwc_3236, _cwc_3232); 
                if (_cwc_3237) 
                { 
                  _cwc_3231 = ArrayBasics::sel( idx, array) ; 
                  _cwc_3225 = _cwc_3231; 
                }
                else
                { 
                  _cwc_3229 = ArrayBasics::sel( idx, array) ; 
                  _cwc_3225 = _cwc_3229; 
                }
              }
            }
          }
        }
        else
        { 
          _cwc_3227 = ArrayBasics::sel( idx, array) ; 
          _cwc_3225 = _cwc_3227; 
        }
      }
    }
    else
    { 
      _cwc_3225 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::sel :: int[*] int[*] -> int[*] ", idx, array); 
    }
  }
  return( _cwc_3225); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayArith::*( int A { ,NN } , int[.] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_1821 { , NN } ; 
  int[.] res__SSA0_1 { , NN } ; 
  int[.] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1] _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_1821] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayArith::*(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:ArrayArith::*( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  * :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+]),
                       int[.] -> ( int[.]),
                       int[1] -> ( int[1]),
                       int[2] -> ( int[2]),
                       int[3] -> ( int[3])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+]),
                    int[.] -> ( int[.]),
                    int[1] -> ( int[1]),
                    int[2] -> ( int[2]),
                    int[3] -> ( int[3])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::*,
 *                  ArrayArith::*,
 *                  ArrayArith::*,
 *                  ScalarArith::*,
 *                  ArrayArith::*,
 *                  UTDScalarB:ArrayArith::*,
 *                  UTDScalarB:ArrayArith::*,
 *                  UTDScalarB:ArrayArith::*
 */
{ 
  int[*] _cwc_3308 { , NN } ; 
  bool _cwc_3356 { , NN } ; 
  int _cwc_3355 { , NN } ; 
  bool _cwc_3354 { , NN } ; 
  int _cwc_3353 { , NN } ; 
  int _cwc_3352 { , NN } ; 
  int _cwc_3351 { , NN } ; 
  bool _cwc_3350 { , NN } ; 
  int _cwc_3349 { , NN } ; 
  int _cwc_3348 { , NN } ; 
  bool _cwc_3347 { , NN } ; 
  int _cwc_3346 { , NN } ; 
  bool _cwc_3345 { , NN } ; 
  bool _cwc_3344 { , NN } ; 
  int{1} _cwc_3343 { , NN } ; 
  int _cwc_3342 { , NN } ; 
  int[1]{0} _cwc_3341 { , NN } ; 
  bool _cwc_3340 { , NN } ; 
  int[1] _cwc_3339 { , NN } ; 
  bool _cwc_3338 { , NN } ; 
  bool _cwc_3337 { , NN } ; 
  int{2} _cwc_3336 { , NN } ; 
  int _cwc_3335 { , NN } ; 
  int[1]{0} _cwc_3334 { , NN } ; 
  bool _cwc_3333 { , NN } ; 
  int[2] _cwc_3332 { , NN } ; 
  bool _cwc_3331 { , NN } ; 
  bool _cwc_3330 { , NN } ; 
  int{3} _cwc_3329 { , NN } ; 
  int _cwc_3328 { , NN } ; 
  int[1]{0} _cwc_3327 { , NN } ; 
  bool _cwc_3326 { , NN } ; 
  int[3] _cwc_3325 { , NN } ; 
  int[+] _cwc_3324 { , NN } ; 
  int[.] _cwc_3323 { , NN } ; 
  int _cwc_3322 { , NN } ; 
  int[+] _cwc_3321 { , NN } ; 
  int _cwc_3320 { , NN } ; 
  bool _cwc_3319 { , NN } ; 
  int _cwc_3318 { , NN } ; 
  int _cwc_3317 { , NN } ; 
  bool _cwc_3316 { , NN } ; 
  int _cwc_3315 { , NN } ; 
  int[+] _cwc_3314 { , NN } ; 
  int _cwc_3313 { , NN } ; 
  bool _cwc_3312 { , NN } ; 
  int _cwc_3311 { , NN } ; 
  int _cwc_3310 { , NN } ; 
  int[+] _cwc_3309 { , NN } ; 

  _cwc_3320 = _dim_A_( A); 
  _cwc_3355 = 0; 
  _cwc_3356 = _eq_SxS_( _cwc_3320, _cwc_3355); 
  if (_cwc_3356) 
  { 
    _cwc_3351 = _dim_A_( B); 
    _cwc_3353 = 0; 
    _cwc_3354 = _eq_SxS_( _cwc_3351, _cwc_3353); 
    if (_cwc_3354) 
    { 
      _cwc_3352 = ( A ScalarArith::*B) ; 
      _cwc_3308 = _cwc_3352; 
    }
    else
    { 
      _cwc_3348 = _dim_A_( B); 
      _cwc_3349 = 0; 
      _cwc_3350 = _gt_SxS_( _cwc_3348, _cwc_3349); 
      if (_cwc_3350) 
      { 
        _cwc_3322 = _dim_A_( B); 
        _cwc_3346 = 1; 
        _cwc_3347 = _eq_SxS_( _cwc_3322, _cwc_3346); 
        if (_cwc_3347) 
        { 
          _cwc_3324 = _shape_A_( B); 
          _cwc_3340 = true; 
          _cwc_3343 = 1; 
          _cwc_3341 = [ 0 ]; 
          _cwc_3342 = _sel_VxA_( _cwc_3341, _cwc_3324); 
          _cwc_3344 = _eq_SxS_( _cwc_3342, _cwc_3343); 
          _cwc_3345 = _and_SxS_( _cwc_3344, _cwc_3340); 
          if (_cwc_3345) 
          { 
            _cwc_3339 = ( A UTDScalarB:ArrayArith::*B) ; 
            _cwc_3308 = _cwc_3339; 
          }
          else
          { 
            _cwc_3333 = true; 
            _cwc_3336 = 2; 
            _cwc_3334 = [ 0 ]; 
            _cwc_3335 = _sel_VxA_( _cwc_3334, _cwc_3324); 
            _cwc_3337 = _eq_SxS_( _cwc_3335, _cwc_3336); 
            _cwc_3338 = _and_SxS_( _cwc_3337, _cwc_3333); 
            if (_cwc_3338) 
            { 
              _cwc_3332 = ( A UTDScalarB:ArrayArith::*B) ; 
              _cwc_3308 = _cwc_3332; 
            }
            else
            { 
              _cwc_3326 = true; 
              _cwc_3329 = 3; 
              _cwc_3327 = [ 0 ]; 
              _cwc_3328 = _sel_VxA_( _cwc_3327, _cwc_3324); 
              _cwc_3330 = _eq_SxS_( _cwc_3328, _cwc_3329); 
              _cwc_3331 = _and_SxS_( _cwc_3330, _cwc_3326); 
              if (_cwc_3331) 
              { 
                _cwc_3325 = ( A UTDScalarB:ArrayArith::*B) ; 
                _cwc_3308 = _cwc_3325; 
              }
              else
              { 
                _cwc_3323 = ( A ArrayArith::*B) ; 
                _cwc_3308 = _cwc_3323; 
              }
            }
          }
        }
        else
        { 
          _cwc_3321 = ( A ArrayArith::*B) ; 
          _cwc_3308 = _cwc_3321; 
        }
      }
      else
      { 
        _cwc_3308 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayArith::* :: int[*] int[*] -> int[*] ", A, B); 
      }
    }
  }
  else
  { 
    _cwc_3317 = _dim_A_( A); 
    _cwc_3318 = 0; 
    _cwc_3319 = _gt_SxS_( _cwc_3317, _cwc_3318); 
    if (_cwc_3319) 
    { 
      _cwc_3313 = _dim_A_( B); 
      _cwc_3315 = 0; 
      _cwc_3316 = _eq_SxS_( _cwc_3313, _cwc_3315); 
      if (_cwc_3316) 
      { 
        _cwc_3314 = ( A ArrayArith::*B) ; 
        _cwc_3308 = _cwc_3314; 
      }
      else
      { 
        _cwc_3310 = _dim_A_( B); 
        _cwc_3311 = 0; 
        _cwc_3312 = _gt_SxS_( _cwc_3310, _cwc_3311); 
        if (_cwc_3312) 
        { 
          _cwc_3309 = ( A ArrayArith::*B) ; 
          _cwc_3308 = _cwc_3309; 
        }
        else
        { 
          _cwc_3308 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayArith::* :: int[*] int[*] -> int[*] ", A, B); 
        }
      }
    }
    else
    { 
      _cwc_3308 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayArith::* :: int[*] int[*] -> int[*] ", A, B); 
    }
  }
  return( _cwc_3308); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayBasics::modarray(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:ArrayBasics::modarray( int[*] array { ,NN } , int[*] v { ,NN } , int[*] val { ,NN } )
/*
 *  modarray :: { int[*] -> { int[*] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])},
                              int -> { int[*] -> ( int[*])},
                              int[+] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])},
                              int[.] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])},
                              int[1] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)}},
                  int[+] -> { int[*] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int -> { int[*] -> ( --)},
                              int[+] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int[.] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int[1] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)}},
                  int[.] -> { int[*] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int -> { int[*] -> ( --)},
                              int[+] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int[.] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int[1] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)}}}
 *  dispatching to: ArrayBasics::modarray,
 *                  ArrayBasics::modarray,
 *                  ArrayBasics::modarray,
 *                  UTDScalarB:ArrayBasics::modarray
 */
{ 
  int[*] _cwc_3357 { , NN } ; 
  bool _cwc_3420 { , NN } ; 
  int _cwc_3419 { , NN } ; 
  bool _cwc_3418 { , NN } ; 
  int _cwc_3417 { , NN } ; 
  int[*] _cwc_3416 { , NN } ; 
  int _cwc_3415 { , NN } ; 
  bool _cwc_3414 { , NN } ; 
  int _cwc_3413 { , NN } ; 
  bool _cwc_3412 { , NN } ; 
  bool _cwc_3411 { , NN } ; 
  int{1} _cwc_3410 { , NN } ; 
  int _cwc_3409 { , NN } ; 
  int[1]{0} _cwc_3408 { , NN } ; 
  bool _cwc_3407 { , NN } ; 
  bool _cwc_3406 { , NN } ; 
  int _cwc_3405 { , NN } ; 
  int[.] _cwc_3404 { , NN } ; 
  int _cwc_3403 { , NN } ; 
  bool _cwc_3402 { , NN } ; 
  int _cwc_3401 { , NN } ; 
  int _cwc_3400 { , NN } ; 
  int[+] _cwc_3399 { , NN } ; 
  int[+] _cwc_3398 { , NN } ; 
  bool _cwc_3397 { , NN } ; 
  int _cwc_3396 { , NN } ; 
  int[*] _cwc_3395 { , NN } ; 
  int _cwc_3394 { , NN } ; 
  bool _cwc_3393 { , NN } ; 
  int _cwc_3392 { , NN } ; 
  int _cwc_3391 { , NN } ; 
  int[+] _cwc_3390 { , NN } ; 
  int _cwc_3389 { , NN } ; 
  int _cwc_3388 { , NN } ; 
  bool _cwc_3387 { , NN } ; 
  int _cwc_3386 { , NN } ; 
  int[*] _cwc_3385 { , NN } ; 
  int _cwc_3384 { , NN } ; 
  bool _cwc_3383 { , NN } ; 
  int _cwc_3382 { , NN } ; 
  bool _cwc_3381 { , NN } ; 
  bool _cwc_3380 { , NN } ; 
  int{1} _cwc_3379 { , NN } ; 
  int _cwc_3378 { , NN } ; 
  int[1]{0} _cwc_3377 { , NN } ; 
  bool _cwc_3376 { , NN } ; 
  bool _cwc_3375 { , NN } ; 
  int _cwc_3374 { , NN } ; 
  int[*] _cwc_3373 { , NN } ; 
  int _cwc_3372 { , NN } ; 
  bool _cwc_3371 { , NN } ; 
  int _cwc_3370 { , NN } ; 
  int _cwc_3369 { , NN } ; 
  int[+] _cwc_3368 { , NN } ; 
  int[+] _cwc_3367 { , NN } ; 
  bool _cwc_3366 { , NN } ; 
  int _cwc_3365 { , NN } ; 
  int[*] _cwc_3364 { , NN } ; 
  int _cwc_3363 { , NN } ; 
  bool _cwc_3362 { , NN } ; 
  int _cwc_3361 { , NN } ; 
  int _cwc_3360 { , NN } ; 
  int[+] _cwc_3359 { , NN } ; 
  int _cwc_3358 { , NN } ; 

  _cwc_3388 = _dim_A_( array); 
  _cwc_3419 = 1; 
  _cwc_3420 = _eq_SxS_( _cwc_3388, _cwc_3419); 
  if (_cwc_3420) 
  { 
    _cwc_3415 = _dim_A_( v); 
    _cwc_3417 = 0; 
    _cwc_3418 = _eq_SxS_( _cwc_3415, _cwc_3417); 
    if (_cwc_3418) 
    { 
      _cwc_3416 = ArrayBasics::modarray( array, v, val) ; 
      _cwc_3357 = _cwc_3416; 
    }
    else
    { 
      _cwc_3389 = _dim_A_( v); 
      _cwc_3413 = 1; 
      _cwc_3414 = _eq_SxS_( _cwc_3389, _cwc_3413); 
      if (_cwc_3414) 
      { 
        _cwc_3398 = _shape_A_( v); 
        _cwc_3407 = true; 
        _cwc_3410 = 1; 
        _cwc_3408 = [ 0 ]; 
        _cwc_3409 = _sel_VxA_( _cwc_3408, _cwc_3398); 
        _cwc_3411 = _eq_SxS_( _cwc_3409, _cwc_3410); 
        _cwc_3412 = _and_SxS_( _cwc_3411, _cwc_3407); 
        if (_cwc_3412) 
        { 
          _cwc_3403 = _dim_A_( val); 
          _cwc_3405 = 0; 
          _cwc_3406 = _eq_SxS_( _cwc_3403, _cwc_3405); 
          if (_cwc_3406) 
          { 
            _cwc_3404 = UTDScalarB:ArrayBasics::modarray( array, v, val) ; 
            _cwc_3357 = _cwc_3404; 
          }
          else
          { 
            _cwc_3400 = _dim_A_( val); 
            _cwc_3401 = 0; 
            _cwc_3402 = _gt_SxS_( _cwc_3400, _cwc_3401); 
            if (_cwc_3402) 
            { 
              _cwc_3399 = ArrayBasics::modarray( array, v, val) ; 
              _cwc_3357 = _cwc_3399; 
            }
            else
            { 
              _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
            }
          }
        }
        else
        { 
          _cwc_3394 = _dim_A_( val); 
          _cwc_3396 = 0; 
          _cwc_3397 = _eq_SxS_( _cwc_3394, _cwc_3396); 
          if (_cwc_3397) 
          { 
            _cwc_3395 = ArrayBasics::modarray( array, v, val) ; 
            _cwc_3357 = _cwc_3395; 
          }
          else
          { 
            _cwc_3391 = _dim_A_( val); 
            _cwc_3392 = 0; 
            _cwc_3393 = _gt_SxS_( _cwc_3391, _cwc_3392); 
            if (_cwc_3393) 
            { 
              _cwc_3390 = ArrayBasics::modarray( array, v, val) ; 
              _cwc_3357 = _cwc_3390; 
            }
            else
            { 
              _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
            }
          }
        }
      }
      else
      { 
        _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
      }
    }
  }
  else
  { 
    _cwc_3384 = _dim_A_( v); 
    _cwc_3386 = 0; 
    _cwc_3387 = _eq_SxS_( _cwc_3384, _cwc_3386); 
    if (_cwc_3387) 
    { 
      _cwc_3385 = ArrayBasics::modarray( array, v, val) ; 
      _cwc_3357 = _cwc_3385; 
    }
    else
    { 
      _cwc_3358 = _dim_A_( v); 
      _cwc_3382 = 1; 
      _cwc_3383 = _eq_SxS_( _cwc_3358, _cwc_3382); 
      if (_cwc_3383) 
      { 
        _cwc_3367 = _shape_A_( v); 
        _cwc_3376 = true; 
        _cwc_3379 = 1; 
        _cwc_3377 = [ 0 ]; 
        _cwc_3378 = _sel_VxA_( _cwc_3377, _cwc_3367); 
        _cwc_3380 = _eq_SxS_( _cwc_3378, _cwc_3379); 
        _cwc_3381 = _and_SxS_( _cwc_3380, _cwc_3376); 
        if (_cwc_3381) 
        { 
          _cwc_3372 = _dim_A_( val); 
          _cwc_3374 = 0; 
          _cwc_3375 = _eq_SxS_( _cwc_3372, _cwc_3374); 
          if (_cwc_3375) 
          { 
            _cwc_3373 = ArrayBasics::modarray( array, v, val) ; 
            _cwc_3357 = _cwc_3373; 
          }
          else
          { 
            _cwc_3369 = _dim_A_( val); 
            _cwc_3370 = 0; 
            _cwc_3371 = _gt_SxS_( _cwc_3369, _cwc_3370); 
            if (_cwc_3371) 
            { 
              _cwc_3368 = ArrayBasics::modarray( array, v, val) ; 
              _cwc_3357 = _cwc_3368; 
            }
            else
            { 
              _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
            }
          }
        }
        else
        { 
          _cwc_3363 = _dim_A_( val); 
          _cwc_3365 = 0; 
          _cwc_3366 = _eq_SxS_( _cwc_3363, _cwc_3365); 
          if (_cwc_3366) 
          { 
            _cwc_3364 = ArrayBasics::modarray( array, v, val) ; 
            _cwc_3357 = _cwc_3364; 
          }
          else
          { 
            _cwc_3360 = _dim_A_( val); 
            _cwc_3361 = 0; 
            _cwc_3362 = _gt_SxS_( _cwc_3360, _cwc_3361); 
            if (_cwc_3362) 
            { 
              _cwc_3359 = ArrayBasics::modarray( array, v, val) ; 
              _cwc_3357 = _cwc_3359; 
            }
            else
            { 
              _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
            }
          }
        }
      }
      else
      { 
        _cwc_3357 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
      }
    }
  }
  return( _cwc_3357); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ArrayArith::one( int[.] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ArrayArith::one( int[+] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ScalarArith::one( int[*] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ArrayArith::one( int A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayArith::one(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int{1} UTDScalarB:ArrayArith::one( int[*] A { ,NN } )
/*
 *  one :: { int[*] -> ( int{1}),
             int -> ( int{1}),
             int[+] -> ( int{1}),
             int[.] -> ( int{1}),
             int[1] -> ( int{1}),
             int[2] -> ( int{1}),
             int[3] -> ( int{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one,
 *                  UTDScalarB:ArrayArith::one,
 *                  UTDScalarB:ArrayArith::one,
 *                  UTDScalarB:ArrayArith::one
 */
{ 
  int{1} _cwc_3421 { , NN } ; 
  bool _cwc_3456 { , NN } ; 
  int _cwc_3455 { , NN } ; 
  int{1} _cwc_3454 { , NN } ; 
  int _cwc_3453 { , NN } ; 
  bool _cwc_3452 { , NN } ; 
  int _cwc_3451 { , NN } ; 
  int{1} _cwc_3450 { , NN } ; 
  int _cwc_3449 { , NN } ; 
  bool _cwc_3448 { , NN } ; 
  int _cwc_3447 { , NN } ; 
  bool _cwc_3446 { , NN } ; 
  bool _cwc_3445 { , NN } ; 
  int{1} _cwc_3444 { , NN } ; 
  int _cwc_3443 { , NN } ; 
  int[1]{0} _cwc_3442 { , NN } ; 
  bool _cwc_3441 { , NN } ; 
  int{1} _cwc_3440 { , NN } ; 
  bool _cwc_3439 { , NN } ; 
  bool _cwc_3438 { , NN } ; 
  int{2} _cwc_3437 { , NN } ; 
  int _cwc_3436 { , NN } ; 
  int[1]{0} _cwc_3435 { , NN } ; 
  bool _cwc_3434 { , NN } ; 
  int{1} _cwc_3433 { , NN } ; 
  bool _cwc_3432 { , NN } ; 
  bool _cwc_3431 { , NN } ; 
  int{3} _cwc_3430 { , NN } ; 
  int _cwc_3429 { , NN } ; 
  int[1]{0} _cwc_3428 { , NN } ; 
  bool _cwc_3427 { , NN } ; 
  int{1} _cwc_3426 { , NN } ; 
  int[+] _cwc_3425 { , NN } ; 
  int{1} _cwc_3424 { , NN } ; 
  int _cwc_3423 { , NN } ; 
  int{1} _cwc_3422 { , NN } ; 

  _cwc_3453 = _dim_A_( A); 
  _cwc_3455 = 0; 
  _cwc_3456 = _eq_SxS_( _cwc_3453, _cwc_3455); 
  if (_cwc_3456) 
  { 
    _cwc_3454 = ArrayArith::one( A) ; 
    _cwc_3421 = _cwc_3454; 
  }
  else
  { 
    _cwc_3449 = _dim_A_( A); 
    _cwc_3451 = 0; 
    _cwc_3452 = _gt_SxS_( _cwc_3449, _cwc_3451); 
    if (_cwc_3452) 
    { 
      _cwc_3423 = _dim_A_( A); 
      _cwc_3447 = 1; 
      _cwc_3448 = _eq_SxS_( _cwc_3423, _cwc_3447); 
      if (_cwc_3448) 
      { 
        _cwc_3425 = _shape_A_( A); 
        _cwc_3441 = true; 
        _cwc_3444 = 1; 
        _cwc_3442 = [ 0 ]; 
        _cwc_3443 = _sel_VxA_( _cwc_3442, _cwc_3425); 
        _cwc_3445 = _eq_SxS_( _cwc_3443, _cwc_3444); 
        _cwc_3446 = _and_SxS_( _cwc_3445, _cwc_3441); 
        if (_cwc_3446) 
        { 
          _cwc_3440 = UTDScalarB:ArrayArith::one( A) ; 
          _cwc_3421 = _cwc_3440; 
        }
        else
        { 
          _cwc_3434 = true; 
          _cwc_3437 = 2; 
          _cwc_3435 = [ 0 ]; 
          _cwc_3436 = _sel_VxA_( _cwc_3435, _cwc_3425); 
          _cwc_3438 = _eq_SxS_( _cwc_3436, _cwc_3437); 
          _cwc_3439 = _and_SxS_( _cwc_3438, _cwc_3434); 
          if (_cwc_3439) 
          { 
            _cwc_3433 = UTDScalarB:ArrayArith::one( A) ; 
            _cwc_3421 = _cwc_3433; 
          }
          else
          { 
            _cwc_3427 = true; 
            _cwc_3430 = 3; 
            _cwc_3428 = [ 0 ]; 
            _cwc_3429 = _sel_VxA_( _cwc_3428, _cwc_3425); 
            _cwc_3431 = _eq_SxS_( _cwc_3429, _cwc_3430); 
            _cwc_3432 = _and_SxS_( _cwc_3431, _cwc_3427); 
            if (_cwc_3432) 
            { 
              _cwc_3426 = UTDScalarB:ArrayArith::one( A) ; 
              _cwc_3421 = _cwc_3426; 
            }
            else
            { 
              _cwc_3424 = ArrayArith::one( A) ; 
              _cwc_3421 = _cwc_3424; 
            }
          }
        }
      }
      else
      { 
        _cwc_3422 = ArrayArith::one( A) ; 
        _cwc_3421 = _cwc_3422; 
      }
    }
    else
    { 
      _cwc_3450 = ScalarArith::one( A) ; 
      _cwc_3421 = _cwc_3450; 
    }
  }
  return( _cwc_3421); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayArith::sel(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:ArrayArith::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[2] -> ( bool),
                         bool[3] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[2] -> ( bool),
                         bool[3] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int[.] -> { bool[*] -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[2] -> ( bool),
                         bool[3] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int[1] -> { bool[*] -> ( bool),
                         bool[+] -> ( bool),
                         bool[.] -> ( bool),
                         bool[2] -> ( bool),
                         bool[3] -> ( bool)},
             int[2] -> { bool[*] -> ( bool),
                         bool[+] -> ( bool),
                         bool[.] -> ( --),
                         bool[2] -> ( --),
                         bool[.,.] -> ( bool)},
             int[3] -> { bool[*] -> ( bool),
                         bool[+] -> ( bool),
                         bool[.] -> ( --),
                         bool[2] -> ( --),
                         bool[3] -> ( --),
                         bool[.,.] -> ( --),
                         bool[.,.,.] -> ( bool)}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  UTDScalarB:ArrayArith::sel,
 *                  UTDScalarB:ArrayArith::sel,
 *                  UTDScalarB:ArrayArith::sel,
 *                  UTDScalarB:ArrayArith::sel,
 *                  UTDScalarB:ArrayArith::sel,
 *                  UTDScalarB:ArrayArith::sel
 */
{ 
  bool[*] _cwc_3457 { , NN } ; 
  bool _cwc_3587 { , NN } ; 
  int _cwc_3586 { , NN } ; 
  bool[*] _cwc_3585 { , NN } ; 
  int _cwc_3584 { , NN } ; 
  bool _cwc_3583 { , NN } ; 
  int _cwc_3582 { , NN } ; 
  bool _cwc_3581 { , NN } ; 
  bool _cwc_3580 { , NN } ; 
  int{1} _cwc_3579 { , NN } ; 
  int _cwc_3578 { , NN } ; 
  int[1]{0} _cwc_3577 { , NN } ; 
  bool _cwc_3576 { , NN } ; 
  bool _cwc_3575 { , NN } ; 
  int _cwc_3574 { , NN } ; 
  bool[*] _cwc_3573 { , NN } ; 
  int _cwc_3572 { , NN } ; 
  bool _cwc_3571 { , NN } ; 
  int _cwc_3570 { , NN } ; 
  bool _cwc_3569 { , NN } ; 
  bool _cwc_3568 { , NN } ; 
  int{2} _cwc_3567 { , NN } ; 
  int _cwc_3566 { , NN } ; 
  int[1]{0} _cwc_3565 { , NN } ; 
  bool _cwc_3564 { , NN } ; 
  bool _cwc_3563 { , NN } ; 
  bool _cwc_3562 { , NN } ; 
  bool _cwc_3561 { , NN } ; 
  int{3} _cwc_3560 { , NN } ; 
  int _cwc_3559 { , NN } ; 
  int[1]{0} _cwc_3558 { , NN } ; 
  bool _cwc_3557 { , NN } ; 
  bool _cwc_3556 { , NN } ; 
  int[+] _cwc_3555 { , NN } ; 
  bool _cwc_3554 { , NN } ; 
  int _cwc_3553 { , NN } ; 
  bool[*] _cwc_3552 { , NN } ; 
  bool _cwc_3551 { , NN } ; 
  bool _cwc_3550 { , NN } ; 
  int{2} _cwc_3549 { , NN } ; 
  int _cwc_3548 { , NN } ; 
  int[1]{0} _cwc_3547 { , NN } ; 
  bool _cwc_3546 { , NN } ; 
  bool _cwc_3545 { , NN } ; 
  int _cwc_3544 { , NN } ; 
  bool[*] _cwc_3543 { , NN } ; 
  int _cwc_3542 { , NN } ; 
  bool _cwc_3541 { , NN } ; 
  int _cwc_3540 { , NN } ; 
  bool _cwc_3539 { , NN } ; 
  bool _cwc_3538 { , NN } ; 
  int{2} _cwc_3537 { , NN } ; 
  int _cwc_3536 { , NN } ; 
  int[1]{0} _cwc_3535 { , NN } ; 
  bool _cwc_3534 { , NN } ; 
  bool[*] _cwc_3533 { , NN } ; 
  int[+] _cwc_3532 { , NN } ; 
  bool[*] _cwc_3531 { , NN } ; 
  bool _cwc_3530 { , NN } ; 
  int _cwc_3529 { , NN } ; 
  bool _cwc_3528 { , NN } ; 
  int _cwc_3527 { , NN } ; 
  bool[*] _cwc_3526 { , NN } ; 
  bool _cwc_3525 { , NN } ; 
  bool _cwc_3524 { , NN } ; 
  int{3} _cwc_3523 { , NN } ; 
  int _cwc_3522 { , NN } ; 
  int[1]{0} _cwc_3521 { , NN } ; 
  bool _cwc_3520 { , NN } ; 
  bool _cwc_3519 { , NN } ; 
  int _cwc_3518 { , NN } ; 
  bool[*] _cwc_3517 { , NN } ; 
  int _cwc_3516 { , NN } ; 
  bool _cwc_3515 { , NN } ; 
  int _cwc_3514 { , NN } ; 
  bool _cwc_3513 { , NN } ; 
  bool _cwc_3512 { , NN } ; 
  int{2} _cwc_3511 { , NN } ; 
  int _cwc_3510 { , NN } ; 
  int[1]{0} _cwc_3509 { , NN } ; 
  bool _cwc_3508 { , NN } ; 
  bool[*] _cwc_3507 { , NN } ; 
  bool _cwc_3506 { , NN } ; 
  bool _cwc_3505 { , NN } ; 
  int{3} _cwc_3504 { , NN } ; 
  int _cwc_3503 { , NN } ; 
  int[1]{0} _cwc_3502 { , NN } ; 
  bool _cwc_3501 { , NN } ; 
  bool[*] _cwc_3500 { , NN } ; 
  int[+] _cwc_3499 { , NN } ; 
  bool[*] _cwc_3498 { , NN } ; 
  bool _cwc_3497 { , NN } ; 
  int _cwc_3496 { , NN } ; 
  bool[*] _cwc_3495 { , NN } ; 
  bool _cwc_3494 { , NN } ; 
  int _cwc_3493 { , NN } ; 
  bool _cwc_3492 { , NN } ; 
  int _cwc_3491 { , NN } ; 
  bool[*] _cwc_3490 { , NN } ; 
  int[+] _cwc_3489 { , NN } ; 
  bool _cwc_3488 { , NN } ; 
  int _cwc_3487 { , NN } ; 
  bool[*] _cwc_3486 { , NN } ; 
  int _cwc_3485 { , NN } ; 
  bool _cwc_3484 { , NN } ; 
  int _cwc_3483 { , NN } ; 
  bool _cwc_3482 { , NN } ; 
  bool _cwc_3481 { , NN } ; 
  int{2} _cwc_3480 { , NN } ; 
  int _cwc_3479 { , NN } ; 
  int[1]{0} _cwc_3478 { , NN } ; 
  bool _cwc_3477 { , NN } ; 
  bool[*] _cwc_3476 { , NN } ; 
  bool _cwc_3475 { , NN } ; 
  bool _cwc_3474 { , NN } ; 
  int{3} _cwc_3473 { , NN } ; 
  int _cwc_3472 { , NN } ; 
  int[1]{0} _cwc_3471 { , NN } ; 
  bool _cwc_3470 { , NN } ; 
  bool[*] _cwc_3469 { , NN } ; 
  int[+] _cwc_3468 { , NN } ; 
  bool[*] _cwc_3467 { , NN } ; 
  bool _cwc_3466 { , NN } ; 
  int _cwc_3465 { , NN } ; 
  bool[*] _cwc_3464 { , NN } ; 
  bool _cwc_3463 { , NN } ; 
  int _cwc_3462 { , NN } ; 
  bool[*] _cwc_3461 { , NN } ; 
  int _cwc_3460 { , NN } ; 
  bool[*] _cwc_3459 { , NN } ; 
  int _cwc_3458 { , NN } ; 

  _cwc_3584 = _dim_A_( idx); 
  _cwc_3586 = 0; 
  _cwc_3587 = _eq_SxS_( _cwc_3584, _cwc_3586); 
  if (_cwc_3587) 
  { 
    _cwc_3585 = ArrayBasics::sel( idx, array) ; 
    _cwc_3457 = _cwc_3585; 
  }
  else
  { 
    _cwc_3458 = _dim_A_( idx); 
    _cwc_3582 = 1; 
    _cwc_3583 = _eq_SxS_( _cwc_3458, _cwc_3582); 
    if (_cwc_3583) 
    { 
      _cwc_3489 = _shape_A_( idx); 
      _cwc_3576 = true; 
      _cwc_3579 = 1; 
      _cwc_3577 = [ 0 ]; 
      _cwc_3578 = _sel_VxA_( _cwc_3577, _cwc_3489); 
      _cwc_3580 = _eq_SxS_( _cwc_3578, _cwc_3579); 
      _cwc_3581 = _and_SxS_( _cwc_3580, _cwc_3576); 
      if (_cwc_3581) 
      { 
        _cwc_3572 = _dim_A_( array); 
        _cwc_3574 = 0; 
        _cwc_3575 = _gt_SxS_( _cwc_3572, _cwc_3574); 
        if (_cwc_3575) 
        { 
          _cwc_3553 = _dim_A_( array); 
          _cwc_3570 = 1; 
          _cwc_3571 = _eq_SxS_( _cwc_3553, _cwc_3570); 
          if (_cwc_3571) 
          { 
            _cwc_3555 = _shape_A_( array); 
            _cwc_3564 = true; 
            _cwc_3567 = 2; 
            _cwc_3565 = [ 0 ]; 
            _cwc_3566 = _sel_VxA_( _cwc_3565, _cwc_3555); 
            _cwc_3568 = _eq_SxS_( _cwc_3566, _cwc_3567); 
            _cwc_3569 = _and_SxS_( _cwc_3568, _cwc_3564); 
            if (_cwc_3569) 
            { 
              _cwc_3563 = UTDScalarB:ArrayArith::sel( idx, array) ; 
              _cwc_3457 = _cwc_3563; 
            }
            else
            { 
              _cwc_3557 = true; 
              _cwc_3560 = 3; 
              _cwc_3558 = [ 0 ]; 
              _cwc_3559 = _sel_VxA_( _cwc_3558, _cwc_3555); 
              _cwc_3561 = _eq_SxS_( _cwc_3559, _cwc_3560); 
              _cwc_3562 = _and_SxS_( _cwc_3561, _cwc_3557); 
              if (_cwc_3562) 
              { 
                _cwc_3556 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_3457 = _cwc_3556; 
              }
              else
              { 
                _cwc_3554 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_3457 = _cwc_3554; 
              }
            }
          }
          else
          { 
            _cwc_3552 = UTDScalarB:ArrayArith::sel( idx, array) ; 
            _cwc_3457 = _cwc_3552; 
          }
        }
        else
        { 
          _cwc_3573 = ArrayBasics::sel( idx, array) ; 
          _cwc_3457 = _cwc_3573; 
        }
      }
      else
      { 
        _cwc_3546 = true; 
        _cwc_3549 = 2; 
        _cwc_3547 = [ 0 ]; 
        _cwc_3548 = _sel_VxA_( _cwc_3547, _cwc_3489); 
        _cwc_3550 = _eq_SxS_( _cwc_3548, _cwc_3549); 
        _cwc_3551 = _and_SxS_( _cwc_3550, _cwc_3546); 
        if (_cwc_3551) 
        { 
          _cwc_3542 = _dim_A_( array); 
          _cwc_3544 = 0; 
          _cwc_3545 = _gt_SxS_( _cwc_3542, _cwc_3544); 
          if (_cwc_3545) 
          { 
            _cwc_3527 = _dim_A_( array); 
            _cwc_3540 = 1; 
            _cwc_3541 = _eq_SxS_( _cwc_3527, _cwc_3540); 
            if (_cwc_3541) 
            { 
              _cwc_3532 = _shape_A_( array); 
              _cwc_3534 = true; 
              _cwc_3537 = 2; 
              _cwc_3535 = [ 0 ]; 
              _cwc_3536 = _sel_VxA_( _cwc_3535, _cwc_3532); 
              _cwc_3538 = _eq_SxS_( _cwc_3536, _cwc_3537); 
              _cwc_3539 = _and_SxS_( _cwc_3538, _cwc_3534); 
              if (_cwc_3539) 
              { 
                _cwc_3533 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_3457 = _cwc_3533; 
              }
              else
              { 
                _cwc_3531 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_3457 = _cwc_3531; 
              }
            }
            else
            { 
              _cwc_3529 = 2; 
              _cwc_3530 = _eq_SxS_( _cwc_3527, _cwc_3529); 
              if (_cwc_3530) 
              { 
                _cwc_3528 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_3457 = _cwc_3528; 
              }
              else
              { 
                _cwc_3526 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_3457 = _cwc_3526; 
              }
            }
          }
          else
          { 
            _cwc_3543 = ArrayBasics::sel( idx, array) ; 
            _cwc_3457 = _cwc_3543; 
          }
        }
        else
        { 
          _cwc_3520 = true; 
          _cwc_3523 = 3; 
          _cwc_3521 = [ 0 ]; 
          _cwc_3522 = _sel_VxA_( _cwc_3521, _cwc_3489); 
          _cwc_3524 = _eq_SxS_( _cwc_3522, _cwc_3523); 
          _cwc_3525 = _and_SxS_( _cwc_3524, _cwc_3520); 
          if (_cwc_3525) 
          { 
            _cwc_3516 = _dim_A_( array); 
            _cwc_3518 = 0; 
            _cwc_3519 = _gt_SxS_( _cwc_3516, _cwc_3518); 
            if (_cwc_3519) 
            { 
              _cwc_3491 = _dim_A_( array); 
              _cwc_3514 = 1; 
              _cwc_3515 = _eq_SxS_( _cwc_3491, _cwc_3514); 
              if (_cwc_3515) 
              { 
                _cwc_3499 = _shape_A_( array); 
                _cwc_3508 = true; 
                _cwc_3511 = 2; 
                _cwc_3509 = [ 0 ]; 
                _cwc_3510 = _sel_VxA_( _cwc_3509, _cwc_3499); 
                _cwc_3512 = _eq_SxS_( _cwc_3510, _cwc_3511); 
                _cwc_3513 = _and_SxS_( _cwc_3512, _cwc_3508); 
                if (_cwc_3513) 
                { 
                  _cwc_3507 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                  _cwc_3457 = _cwc_3507; 
                }
                else
                { 
                  _cwc_3501 = true; 
                  _cwc_3504 = 3; 
                  _cwc_3502 = [ 0 ]; 
                  _cwc_3503 = _sel_VxA_( _cwc_3502, _cwc_3499); 
                  _cwc_3505 = _eq_SxS_( _cwc_3503, _cwc_3504); 
                  _cwc_3506 = _and_SxS_( _cwc_3505, _cwc_3501); 
                  if (_cwc_3506) 
                  { 
                    _cwc_3500 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_3457 = _cwc_3500; 
                  }
                  else
                  { 
                    _cwc_3498 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_3457 = _cwc_3498; 
                  }
                }
              }
              else
              { 
                _cwc_3496 = 2; 
                _cwc_3497 = _eq_SxS_( _cwc_3491, _cwc_3496); 
                if (_cwc_3497) 
                { 
                  _cwc_3495 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                  _cwc_3457 = _cwc_3495; 
                }
                else
                { 
                  _cwc_3493 = 3; 
                  _cwc_3494 = _eq_SxS_( _cwc_3491, _cwc_3493); 
                  if (_cwc_3494) 
                  { 
                    _cwc_3492 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_3457 = _cwc_3492; 
                  }
                  else
                  { 
                    _cwc_3490 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_3457 = _cwc_3490; 
                  }
                }
              }
            }
            else
            { 
              _cwc_3517 = ArrayBasics::sel( idx, array) ; 
              _cwc_3457 = _cwc_3517; 
            }
          }
          else
          { 
            _cwc_3485 = _dim_A_( array); 
            _cwc_3487 = 0; 
            _cwc_3488 = _gt_SxS_( _cwc_3485, _cwc_3487); 
            if (_cwc_3488) 
            { 
              _cwc_3460 = _dim_A_( array); 
              _cwc_3483 = 1; 
              _cwc_3484 = _eq_SxS_( _cwc_3460, _cwc_3483); 
              if (_cwc_3484) 
              { 
                _cwc_3468 = _shape_A_( array); 
                _cwc_3477 = true; 
                _cwc_3480 = 2; 
                _cwc_3478 = [ 0 ]; 
                _cwc_3479 = _sel_VxA_( _cwc_3478, _cwc_3468); 
                _cwc_3481 = _eq_SxS_( _cwc_3479, _cwc_3480); 
                _cwc_3482 = _and_SxS_( _cwc_3481, _cwc_3477); 
                if (_cwc_3482) 
                { 
                  _cwc_3476 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                  _cwc_3457 = _cwc_3476; 
                }
                else
                { 
                  _cwc_3470 = true; 
                  _cwc_3473 = 3; 
                  _cwc_3471 = [ 0 ]; 
                  _cwc_3472 = _sel_VxA_( _cwc_3471, _cwc_3468); 
                  _cwc_3474 = _eq_SxS_( _cwc_3472, _cwc_3473); 
                  _cwc_3475 = _and_SxS_( _cwc_3474, _cwc_3470); 
                  if (_cwc_3475) 
                  { 
                    _cwc_3469 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_3457 = _cwc_3469; 
                  }
                  else
                  { 
                    _cwc_3467 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_3457 = _cwc_3467; 
                  }
                }
              }
              else
              { 
                _cwc_3465 = 2; 
                _cwc_3466 = _eq_SxS_( _cwc_3460, _cwc_3465); 
                if (_cwc_3466) 
                { 
                  _cwc_3464 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                  _cwc_3457 = _cwc_3464; 
                }
                else
                { 
                  _cwc_3462 = 3; 
                  _cwc_3463 = _eq_SxS_( _cwc_3460, _cwc_3462); 
                  if (_cwc_3463) 
                  { 
                    _cwc_3461 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_3457 = _cwc_3461; 
                  }
                  else
                  { 
                    _cwc_3459 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_3457 = _cwc_3459; 
                  }
                }
              }
            }
            else
            { 
              _cwc_3486 = ArrayBasics::sel( idx, array) ; 
              _cwc_3457 = _cwc_3486; 
            }
          }
        }
      }
    }
    else
    { 
      _cwc_3457 = _dispatch_error_( 1, bool[*], "UTDScalarB:ArrayArith::sel :: int[*] bool[*] -> bool[*] ", idx, array); 
    }
  }
  return( _cwc_3457); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayArith::shape(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[.] UTDScalarB:ArrayArith::shape( bool[*] array { ,NN } )
/*
 *  shape :: { bool[*] -> ( int[.]),
               bool[+] -> ( int[.]),
               bool[.] -> ( int[1]),
               bool[2] -> ( int[1]{2}),
               bool[3] -> ( int[1]{3}),
               bool[.,.] -> ( int[2]),
               bool[.,.,.] -> ( int[3])}
 *  dispatching to: ArrayBasics::shape,
 *                  UTDScalarB:ArrayArith::shape,
 *                  UTDScalarB:ArrayArith::shape,
 *                  UTDScalarB:ArrayArith::shape,
 *                  UTDScalarB:ArrayArith::shape,
 *                  UTDScalarB:ArrayArith::shape,
 *                  UTDScalarB:ArrayArith::shape
 */
{ 
  int[.] _cwc_3588 { , NN } ; 
  bool _cwc_3618 { , NN } ; 
  int _cwc_3617 { , NN } ; 
  int[.] _cwc_3616 { , NN } ; 
  int _cwc_3615 { , NN } ; 
  bool _cwc_3614 { , NN } ; 
  int _cwc_3613 { , NN } ; 
  bool _cwc_3612 { , NN } ; 
  bool _cwc_3611 { , NN } ; 
  int{2} _cwc_3610 { , NN } ; 
  int _cwc_3609 { , NN } ; 
  int[1]{0} _cwc_3608 { , NN } ; 
  bool _cwc_3607 { , NN } ; 
  int[1]{2} _cwc_3606 { , NN } ; 
  bool _cwc_3605 { , NN } ; 
  bool _cwc_3604 { , NN } ; 
  int{3} _cwc_3603 { , NN } ; 
  int _cwc_3602 { , NN } ; 
  int[1]{0} _cwc_3601 { , NN } ; 
  bool _cwc_3600 { , NN } ; 
  int[1]{3} _cwc_3599 { , NN } ; 
  int[+] _cwc_3598 { , NN } ; 
  int[1] _cwc_3597 { , NN } ; 
  bool _cwc_3596 { , NN } ; 
  int _cwc_3595 { , NN } ; 
  int[2] _cwc_3594 { , NN } ; 
  bool _cwc_3593 { , NN } ; 
  int _cwc_3592 { , NN } ; 
  int[3] _cwc_3591 { , NN } ; 
  int _cwc_3590 { , NN } ; 
  int[.] _cwc_3589 { , NN } ; 

  _cwc_3615 = _dim_A_( array); 
  _cwc_3617 = 0; 
  _cwc_3618 = _gt_SxS_( _cwc_3615, _cwc_3617); 
  if (_cwc_3618) 
  { 
    _cwc_3590 = _dim_A_( array); 
    _cwc_3613 = 1; 
    _cwc_3614 = _eq_SxS_( _cwc_3590, _cwc_3613); 
    if (_cwc_3614) 
    { 
      _cwc_3598 = _shape_A_( array); 
      _cwc_3607 = true; 
      _cwc_3610 = 2; 
      _cwc_3608 = [ 0 ]; 
      _cwc_3609 = _sel_VxA_( _cwc_3608, _cwc_3598); 
      _cwc_3611 = _eq_SxS_( _cwc_3609, _cwc_3610); 
      _cwc_3612 = _and_SxS_( _cwc_3611, _cwc_3607); 
      if (_cwc_3612) 
      { 
        _cwc_3606 = UTDScalarB:ArrayArith::shape( array) ; 
        _cwc_3588 = _cwc_3606; 
      }
      else
      { 
        _cwc_3600 = true; 
        _cwc_3603 = 3; 
        _cwc_3601 = [ 0 ]; 
        _cwc_3602 = _sel_VxA_( _cwc_3601, _cwc_3598); 
        _cwc_3604 = _eq_SxS_( _cwc_3602, _cwc_3603); 
        _cwc_3605 = _and_SxS_( _cwc_3604, _cwc_3600); 
        if (_cwc_3605) 
        { 
          _cwc_3599 = UTDScalarB:ArrayArith::shape( array) ; 
          _cwc_3588 = _cwc_3599; 
        }
        else
        { 
          _cwc_3597 = UTDScalarB:ArrayArith::shape( array) ; 
          _cwc_3588 = _cwc_3597; 
        }
      }
    }
    else
    { 
      _cwc_3595 = 2; 
      _cwc_3596 = _eq_SxS_( _cwc_3590, _cwc_3595); 
      if (_cwc_3596) 
      { 
        _cwc_3594 = UTDScalarB:ArrayArith::shape( array) ; 
        _cwc_3588 = _cwc_3594; 
      }
      else
      { 
        _cwc_3592 = 3; 
        _cwc_3593 = _eq_SxS_( _cwc_3590, _cwc_3592); 
        if (_cwc_3593) 
        { 
          _cwc_3591 = UTDScalarB:ArrayArith::shape( array) ; 
          _cwc_3588 = _cwc_3591; 
        }
        else
        { 
          _cwc_3589 = UTDScalarB:ArrayArith::shape( array) ; 
          _cwc_3588 = _cwc_3589; 
        }
      }
    }
  }
  else
  { 
    _cwc_3616 = ArrayBasics::shape( array) ; 
    _cwc_3588 = _cwc_3616; 
  }
  return( _cwc_3588); 
}



/****************************************************************************
 * sacprelude_d::*(...) [ body ]
 ****************************************************************************/
inline
int sacprelude_d::*( int a { ,NN } , int b { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _flat_411__SSA0_1 { , NN } ; 
  int _flat_411 { , NN } ; 

  _flat_411 = _mul_SxS_( a, b); 
  _flat_411__SSA0_1 = _type_conv_( int, _flat_411); 
  return( _flat_411__SSA0_1); 
}



/****************************************************************************
 * sacprelude_d::and(...) [ body ]
 ****************************************************************************/
inline
bool sacprelude_d::and( bool a { ,NN } , bool b { ,NN } )
/*
 *  and ::  ---
 */
{ 
  bool _flat_298__SSA0_1 { , NN } ; 
  bool _flat_298 { , NN } ; 

  _flat_298 = _and_SxS_( a, b); 
  _flat_298__SSA0_1 = _type_conv_( bool, _flat_298); 
  return( _flat_298__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ScalarArith::one( int A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ArrayIO:Structures::dim(...) [ body ]
 ****************************************************************************/
inline
int ArrayIO:Structures::dim( char[+] array { ,NN } )
/*
 *  dim ::  ---
 */
{ 
  int _flat_4__SSA0_1 { , NN } ; 
  int _flat_4 { , NN } ; 

  _flat_4 = _dim_A_( array); 
  _flat_4__SSA0_1 = _type_conv_( int, _flat_4); 
  return( _flat_4__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::dim(...) [ body ]
 ****************************************************************************/
inline
int ArrayBasics::dim( char[*] array { ,NN } )
/*
 *  dim ::  ---
 */
{ 
  int _flat_4__SSA0_1 { , NN } ; 
  int _flat_4 { , NN } ; 

  _flat_4 = _dim_A_( array); 
  _flat_4__SSA0_1 = _type_conv_( int, _flat_4); 
  return( _flat_4__SSA0_1); 
}



/****************************************************************************
 * ArrayIO:Structures::shape(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayIO:Structures::shape( char[+] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_10__SSA0_1 { , NN } ; 
  int[.] _flat_10 { , NN } ; 

  _flat_10 = _shape_A_( array); 
  _flat_10__SSA0_1 = _type_conv_( int[.], _flat_10); 
  return( _flat_10__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::shape(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayBasics::shape( char[*] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_10__SSA0_1 { , NN } ; 
  int[.] _flat_10 { , NN } ; 

  _flat_10 = _shape_A_( array); 
  _flat_10__SSA0_1 = _type_conv_( int[.], _flat_10); 
  return( _flat_10__SSA0_1); 
}



/****************************************************************************
 * Cond function:
 * Bool::toi__Cond_0(...) [ body ]
 ****************************************************************************/
int Bool::toi__Cond_0( bool b { ,NN } )
/*
 *  toi__Cond_0 ::  ---
 */
{ 
  int res__SSA0_2 { , NN } ; 
  int{0} res__SSA0_1 { , NN } ; 
  int{1} res { , NN } ; 

  if (b) 
  { 
    res = 1; 
  }
  else
  { 
    res__SSA0_1 = 0; 
  }
  res__SSA0_2 = ( b ? res : res__SSA0_1 ); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * ArrayArith::zero(...) [ body ]
 ****************************************************************************/
inline
bool{0} ArrayArith::zero( bool[+] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  bool{0} _flat_5__SSA0_1 { , NN } ; 
  bool{0} _flat_5 { , NN } ; 

  _flat_5 = false; 
  _flat_5__SSA0_1 = _type_conv_( bool, _flat_5); 
  return( _flat_5__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::zero(...) [ body ]
 ****************************************************************************/
inline
bool{0} ScalarArith::zero( bool[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  bool{0} _flat_5__SSA0_1 { , NN } ; 
  bool{0} _flat_5 { , NN } ; 

  _flat_5 = false; 
  _flat_5__SSA0_1 = _type_conv_( bool, _flat_5); 
  return( _flat_5__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
bool{1} ArrayArith::one( bool[+] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  bool{1} _flat_11__SSA0_1 { , NN } ; 
  bool{1} _flat_11 { , NN } ; 

  _flat_11 = true; 
  _flat_11__SSA0_1 = _type_conv_( bool, _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::one(...) [ body ]
 ****************************************************************************/
inline
bool{1} ScalarArith::one( bool[*] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  bool{1} _flat_11__SSA0_1 { , NN } ; 
  bool{1} _flat_11 { , NN } ; 

  _flat_11 = true; 
  _flat_11__SSA0_1 = _type_conv_( bool, _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
bool{1} ArrayArith::one( bool A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  bool{1} _flat_11__SSA0_1 { , NN } ; 
  bool{1} _flat_11 { , NN } ; 

  _flat_11 = true; 
  _flat_11__SSA0_1 = _type_conv_( bool, _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::sel( int[1] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[.] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * Cond function:
 * Bool::to_bool__Cond_6(...) [ body ]
 ****************************************************************************/
bool Bool::to_bool__Cond_6( bool _flat_8 { ,NN } , int i { ,NN } )
/*
 *  to_bool__Cond_6 ::  ---
 */
{ 
  bool res__SSA0_2 { , NN } ; 
  bool{0} res__SSA0_1 { , NN } ; 
  bool{1} res { , NN } ; 
  int{0} _flat_11 { , NN } ; 
  bool _flat_10 { , NN } ; 

  if (_flat_8) 
  { 
    res = true; 
  }
  else
  { 
    _flat_11 = 0; 
    _flat_10 = _eq_SxS_( _flat_11, i); 
    res__SSA0_1 = Bool::_dup_50_to_bool__Cond_5( _flat_10) ; 
  }
  res__SSA0_2 = ( _flat_8 ? res : res__SSA0_1 ); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * Bool::_dup_50_to_bool__Cond_5(...) [ body ]
 ****************************************************************************/
bool{0} Bool::_dup_50_to_bool__Cond_5( bool _flat_10 { ,NN } )
/*
 *  _dup_50_to_bool__Cond_5 ::  ---
 */
{ 
  bool{0} res__SSA0_2 { , NN } ; 
  bool{0} res__SSA0_1 { , NN } ; 
  bool{0} res { , NN } ; 

  if (_flat_10) 
  { 
    res = false; 
  }
  else
  { 
    res__SSA0_1 = false; 
  }
  res__SSA0_2 = ( _flat_10 ? res : res__SSA0_1 ); 
  return( res__SSA0_2); 
}


/*-----------------------------------------------*/

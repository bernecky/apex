
/*-----------------------------------------------*/

module UTDScalarB;

export all;


/*
 *  type definitions
 */

external typedef sacprelude_p::SACarg;

external SACarg SACARGcopy( SACarg);
external void SACARGfree( SACarg);

external classtype World::World;
external classtype Terminal::Terminal;
external classtype TermFile::TermFile;
external typedef String::string;

external string copy_string( string);
external void free_string( string);



/*
 *  prototypes for externals (FUNDECS)
 */

external Terminal::Terminal *, TermFile::TermFile * TermFile::printf( Terminal::Terminal *_rso_69_TheTerminal { ,NN } , TermFile::TermFile *_rso_68_stdout { ,NN } , String::string FORMAT { ,NN } , ...)
/*
 *  printf ::  ---
 */;

external String::string String::to_string( char[.] A { ,NN } , int LENGTH { ,NN } )
/*
 *  to_string ::  ---
 */;

external TermFile::TermFile * ArrayIO::showarray( TermFile::TermFile *stream { ,NN } , int d { ,NN } , int[.] s { ,NN } , char[*] a { ,NN } )
/*
 *  showarray ::  ---
 */;



/*
 *  prototypes for locals (FUNDEFS)
 */

external bool[*] Array::!( bool[*] A { ,NN } )
/*
 *  ! :: { bool[*] -> ( bool[*]),
           bool -> ( bool),
           bool[+] -> ( bool[+])}
 *  dispatching to: ArrayArith::!,
 *                  ScalarArith::!
 */;

external /* sticky */
int[.], int[.], int[.], int[.] sacprelude_p::partitionSlicer( int[*] min { ,NN } , int[*] max { ,NN } , int[*] axis { ,NN } , int[*] lb { ,NN } , int[*] ub { ,NN } )
/*
 *  partitionSlicer :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}},
                         int[+] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}},
                         int[.] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}},
                                     int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])},
                                                             int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                         int[.] -> ( int[.], int[.], int[.], int[.])}},
                                                 int -> { int[*] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[+] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])},
                                                          int[.] -> { int[*] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[+] -> ( int[.], int[.], int[.], int[.]),
                                                                      int[.] -> ( int[.], int[.], int[.], int[.])}}}}}
 *  dispatching to: sacprelude_p::partitionSlicer
 */;

external /* sticky */
int[.] sacprelude_p::partitionIntersectMax( int[*] PWLbound1 { ,NN } , int[*] ivmin { ,NN } )
/*
 *  partitionIntersectMax :: { int[*] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[+] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[.] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])}}
 *  dispatching to: sacprelude_p::partitionIntersectMax,
 *                  sacprelude_p::partitionIntersectMax
 */;

external /* sticky */
bool[.] sacprelude_p::isPartitionIntersectNull( int[*] idxmin { ,NN } , int[*] idxmax { ,NN } , int[*] bound1 { ,NN } , int[*] bound2 { ,NN } )
/*
 *  isPartitionIntersectNull :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[+] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[.] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}},
                                  int -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[+] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])},
                                                       int[.] -> { int[*] -> ( bool[.]),
                                                                   int[+] -> ( bool[.]),
                                                                   int[.] -> ( bool[.])}},
                                           int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])},
                                                    int[+] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])},
                                                    int[.] -> { int[*] -> ( bool[.]),
                                                                int[+] -> ( bool[.]),
                                                                int[.] -> ( bool[.])}}},
                                  int[+] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}},
                                  int[.] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}},
                                              int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[+] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])},
                                                          int[.] -> { int[*] -> ( bool[.]),
                                                                      int[+] -> ( bool[.]),
                                                                      int[.] -> ( bool[.])}}}}
 *  dispatching to: sacprelude_p::isPartitionIntersectNull,
 *                  sacprelude_p::isPartitionIntersectNull
 */;

external /* sticky */
int[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { int[*] -> ( int[*])},
                             int -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
float[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { float[*] -> ( float[*])},
                             int -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
double[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { double[*] -> ( double[*])},
                             int -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
bool[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { bool[*] -> ( bool[*])},
                             int -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
char[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { char[*] -> ( char[*])},
                             int -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
byte[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { byte[*] -> ( byte[*])},
                             int -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
short[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { short[*] -> ( short[*])},
                             int -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
long[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { long[*] -> ( long[*])},
                             int -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
longlong[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { longlong[*] -> ( longlong[*])},
                             int -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
ubyte[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
                             int -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
ushort[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ushort[*] -> ( ushort[*])},
                             int -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
uint[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { uint[*] -> ( uint[*])},
                             int -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
ulong[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ulong[*] -> ( ulong[*])},
                             int -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
ulonglong[*] sacprelude_p::_selSxADistmemLocal( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
                             int -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_p::_selSxADistmemLocal
 */;

external /* sticky */
int[.] sacprelude_p::partitionIntersectMin( int[*] PWLbound2 { ,NN } , int[*] ivmax { ,NN } )
/*
 *  partitionIntersectMin :: { int[*] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[+] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])},
                               int[.] -> { int[*] -> ( int[.]),
                                           int -> ( int[.]),
                                           int[+] -> ( int[.]),
                                           int[.] -> ( int[.])}}
 *  dispatching to: sacprelude_p::partitionIntersectMin,
 *                  sacprelude_p::partitionIntersectMin
 */;

external /* sticky */
int[*] sacprelude_p::adjustLacFunParams( bool[*] p { ,NN } , int[*] i { ,NN } , int[*] iv { ,NN } )
/*
 *  adjustLacFunParams :: { bool[*] -> { int[*] -> { int[*] -> ( int[*]),
                                                     int[+] -> ( int[*]),
                                                     int[.] -> ( int[*])}}}
 *  dispatching to: sacprelude_p::adjustLacFunParams
 */;

external int[*] Array::/( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  / :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::/,
 *                  ArrayArith::/,
 *                  ArrayArith::/,
 *                  ScalarArith::/
 */;

external /* sticky */
int sacprelude_p::prod( int[*] v { ,NN } )
/*
 *  prod :: { int[*] -> ( int),
              int[+] -> ( int),
              int[.] -> ( int)}
 *  dispatching to: sacprelude_p::prod
 */;

external /* sticky */
int[*] sacprelude_p::adjustLacFunParamsReshape( bool[*] p { ,NN } , int[*] i { ,NN } , int[*] iv { ,NN } , int[*] shp { ,NN } )
/*
 *  adjustLacFunParamsReshape :: { bool[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])},
                                                            int[+] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])},
                                                            int[.] -> { int[*] -> ( int[*]),
                                                                        int[+] -> ( int[*]),
                                                                        int[.] -> ( int[*])}}}}
 *  dispatching to: sacprelude_p::adjustLacFunParamsReshape
 */;

external double[*] Array::-( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  - :: { double[*] -> { double[*] -> ( double[*]),
                          double -> ( double[*]),
                          double[+] -> ( double[+])},
           double -> { double[*] -> ( double[*]),
                       double -> ( double),
                       double[+] -> ( double[+])},
           double[+] -> { double[*] -> ( double[+]),
                          double -> ( double[+]),
                          double[+] -> ( double[+])}}
 *  dispatching to: ArrayArith::-,
 *                  ArrayArith::-,
 *                  ArrayArith::-,
 *                  ScalarArith::-
 */;

external int[*] Array::-( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  - :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::-,
 *                  ArrayArith::-,
 *                  ArrayArith::-,
 *                  ScalarArith::-
 */;

external /* sticky */
bool sacprelude_p::eq( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  eq :: { int[*] -> { int[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( float[*] A { ,NN } , float[*] B { ,NN } )
/*
 *  eq :: { float[*] -> { float[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  eq :: { double[*] -> { double[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  eq :: { bool[*] -> { bool[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( char[*] A { ,NN } , char[*] B { ,NN } )
/*
 *  eq :: { char[*] -> { char[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( byte[*] A { ,NN } , byte[*] B { ,NN } )
/*
 *  eq :: { byte[*] -> { byte[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( short[*] A { ,NN } , short[*] B { ,NN } )
/*
 *  eq :: { short[*] -> { short[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( long[*] A { ,NN } , long[*] B { ,NN } )
/*
 *  eq :: { long[*] -> { long[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( longlong[*] A { ,NN } , longlong[*] B { ,NN } )
/*
 *  eq :: { longlong[*] -> { longlong[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( ubyte[*] A { ,NN } , ubyte[*] B { ,NN } )
/*
 *  eq :: { ubyte[*] -> { ubyte[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( ushort[*] A { ,NN } , ushort[*] B { ,NN } )
/*
 *  eq :: { ushort[*] -> { ushort[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( uint[*] A { ,NN } , uint[*] B { ,NN } )
/*
 *  eq :: { uint[*] -> { uint[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( ulong[*] A { ,NN } , ulong[*] B { ,NN } )
/*
 *  eq :: { ulong[*] -> { ulong[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external /* sticky */
bool sacprelude_p::eq( ulonglong[*] A { ,NN } , ulonglong[*] B { ,NN } )
/*
 *  eq :: { ulonglong[*] -> { ulonglong[*] -> ( bool)}}
 *  dispatching to: sacprelude_p::eq
 */;

external int[*] Array::+( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  + :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::+,
 *                  ArrayArith::+,
 *                  ArrayArith::+,
 *                  ScalarArith::+
 */;

external bool Array::!=( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  != :: { bool[*] -> { bool[*] -> ( bool),
                         bool -> ( bool)},
            bool -> { bool[*] -> ( bool),
                      bool -> ( bool)}}
 *  dispatching to: ScalarArith::!=
 */;

external /* sticky */
int[.], int[.], int[.] sacprelude_p::gridFiller( int[*] lb { ,NN } , int[*] ub { ,NN } , int[*] wdth { ,NN } , int[*] dim { ,NN } , int[*] maxwidth { ,NN } )
/*
 *  gridFiller :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}},
                    int[+] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}},
                    int[.] -> { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[+] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}},
                                int[.] -> { int[*] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[+] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}},
                                            int[.] -> { int[*] -> { int[*] -> ( int[.], int[.], int[.]),
                                                                    int[+] -> ( int[.], int[.], int[.]),
                                                                    int[.] -> ( int[.], int[.], int[.])},
                                                        int -> { int[*] -> ( int[.], int[.], int[.]),
                                                                 int[+] -> ( int[.], int[.], int[.]),
                                                                 int[.] -> ( int[.], int[.], int[.])}}}}}
 *  dispatching to: sacprelude_p::gridFiller
 */;

external /* sticky */
bool[.] sacprelude_p::isPartitionIntersect1Part( int[*] idxmin { ,NN } , int[*] idxmax { ,NN } , int[*] bound1 { ,NN } , int[*] bound2 { ,NN } )
/*
 *  isPartitionIntersect1Part :: { int[*] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[+] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[.] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}},
                                   int -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[+] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])},
                                                        int[.] -> { int[*] -> ( bool[.]),
                                                                    int[+] -> ( bool[.]),
                                                                    int[.] -> ( bool[.])}},
                                            int -> { int[*] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])},
                                                     int[+] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])},
                                                     int[.] -> { int[*] -> ( bool[.]),
                                                                 int[+] -> ( bool[.]),
                                                                 int[.] -> ( bool[.])}}},
                                   int[+] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}},
                                   int[.] -> { int[*] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[+] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}},
                                               int[.] -> { int[*] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[+] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])},
                                                           int[.] -> { int[*] -> ( bool[.]),
                                                                       int[+] -> ( bool[.]),
                                                                       int[.] -> ( bool[.])}}}}
 *  dispatching to: sacprelude_p::isPartitionIntersect1Part,
 *                  sacprelude_p::isPartitionIntersect1Part
 */;

external /* sticky */
int{0} sacprelude_p::zero( int[*] A { ,NN } )
/*
 *  zero :: { int[*] -> ( int{0})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
double{0.0...} sacprelude_p::zero( double[*] A { ,NN } )
/*
 *  zero :: { double[*] -> ( double{0.0...})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
float{0.0...} sacprelude_p::zero( float[*] A { ,NN } )
/*
 *  zero :: { float[*] -> ( float{0.0...})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
char{ } sacprelude_p::zero( char[*] A { ,NN } )
/*
 *  zero :: { char[*] -> ( char{ })}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
bool{0} sacprelude_p::zero( bool[*] A { ,NN } )
/*
 *  zero :: { bool[*] -> ( bool{0})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
byte{} sacprelude_p::zero( byte[*] A { ,NN } )
/*
 *  zero :: { byte[*] -> ( byte{})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
short{0} sacprelude_p::zero( short[*] A { ,NN } )
/*
 *  zero :: { short[*] -> ( short{0})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
long{0} sacprelude_p::zero( long[*] A { ,NN } )
/*
 *  zero :: { long[*] -> ( long{0})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
longlong{0} sacprelude_p::zero( longlong[*] A { ,NN } )
/*
 *  zero :: { longlong[*] -> ( longlong{0})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
ubyte{} sacprelude_p::zero( ubyte[*] A { ,NN } )
/*
 *  zero :: { ubyte[*] -> ( ubyte{})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
ushort{0} sacprelude_p::zero( ushort[*] A { ,NN } )
/*
 *  zero :: { ushort[*] -> ( ushort{0})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
uint{0} sacprelude_p::zero( uint[*] A { ,NN } )
/*
 *  zero :: { uint[*] -> ( uint{0})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
ulong{0} sacprelude_p::zero( ulong[*] A { ,NN } )
/*
 *  zero :: { ulong[*] -> ( ulong{0})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
ulonglong{0} sacprelude_p::zero( ulonglong[*] A { ,NN } )
/*
 *  zero :: { ulonglong[*] -> ( ulonglong{0})}
 *  dispatching to: sacprelude_p::zero
 */;

external /* sticky */
int sacprelude_p::partitionMax( int[*] x { ,NN } , int[*] y { ,NN } )
/*
 *  partitionMax :: { int[*] -> { int[*] -> ( int),
                                  int -> ( int)},
                      int -> { int[*] -> ( int),
                               int -> ( int)}}
 *  dispatching to: sacprelude_p::partitionMax
 */;

external int Array::--( int[*] A { ,NN } )
/*
 *  -- :: { int[*] -> ( int),
            int -> ( int)}
 *  dispatching to: ScalarArith::--
 */;

external bool[*] Array::|( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  | :: { bool[*] -> { bool[*] -> ( bool[*]),
                        bool -> ( bool[*]),
                        bool[+] -> ( bool[+])},
           bool -> { bool[*] -> ( bool[*]),
                     bool -> ( bool),
                     bool[+] -> ( bool[+])},
           bool[+] -> { bool[*] -> ( bool[+]),
                        bool -> ( bool[+]),
                        bool[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::|,
 *                  ArrayArith::|,
 *                  ArrayArith::|,
 *                  ScalarArith::|
 */;

external double[*] Array::abs( double[*] A { ,NN } )
/*
 *  abs :: { double[*] -> ( double[*]),
             double -> ( double),
             double[+] -> ( double[+])}
 *  dispatching to: ArrayArith::abs,
 *                  ScalarArith::abs
 */;

external bool[*] Array::>=( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  >= :: { int[*] -> { int[*] -> ( bool[*]),
                        int -> ( bool[*]),
                        int[+] -> ( bool[+])},
            int -> { int[*] -> ( bool[*]),
                     int -> ( bool),
                     int[+] -> ( bool[+])},
            int[+] -> { int[*] -> ( bool[+]),
                        int -> ( bool[+]),
                        int[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::>=,
 *                  ArrayArith::>=,
 *                  ArrayArith::>=,
 *                  ScalarArith::>=
 */;

external bool[*] Array::&( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  & :: { bool[*] -> { bool[*] -> ( bool[*]),
                        bool -> ( bool[*]),
                        bool[+] -> ( bool[+])},
           bool -> { bool[*] -> ( bool[*]),
                     bool -> ( bool),
                     bool[+] -> ( bool[+])},
           bool[+] -> { bool[*] -> ( bool[+]),
                        bool -> ( bool[+]),
                        bool[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::&,
 *                  ArrayArith::&,
 *                  ArrayArith::&,
 *                  ScalarArith::&
 */;

external /* sticky */
int sacprelude_p::partitionMin( int[*] x { ,NN } , int[*] y { ,NN } )
/*
 *  partitionMin :: { int[*] -> { int[*] -> ( int),
                                  int -> ( int)},
                      int -> { int[*] -> ( int),
                               int -> ( int)}}
 *  dispatching to: sacprelude_p::partitionMin
 */;

external double[*] Array::max( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  max :: { double[*] -> { double[*] -> ( double[*]),
                            double -> ( double[*]),
                            double[+] -> ( double[+])},
             double -> { double[*] -> ( double[*]),
                         double -> ( double),
                         double[+] -> ( double[+])},
             double[+] -> { double[*] -> ( double[+]),
                            double -> ( double[+]),
                            double[+] -> ( double[+])}}
 *  dispatching to: ArrayArith::max,
 *                  ArrayArith::max,
 *                  ArrayArith::max,
 *                  ScalarArith::max
 */;

external bool[*] Array::<=( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  <= :: { double[*] -> { double[*] -> ( bool[*]),
                           double -> ( bool[*]),
                           double[+] -> ( bool[+])},
            double -> { double[*] -> ( bool[*]),
                        double -> ( bool),
                        double[+] -> ( bool[+])},
            double[+] -> { double[*] -> ( bool[+]),
                           double -> ( bool[+]),
                           double[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::<=,
 *                  ArrayArith::<=,
 *                  ArrayArith::<=,
 *                  ScalarArith::<=
 */;

external /* sticky */
int sacprelude_p::++( int[*] a { ,NN } )
/*
 *  ++ :: { int[*] -> ( int),
            int -> ( int)}
 *  dispatching to: sacprelude_p::++
 */;

external /* sticky */
int[*] sacprelude_p::sel( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { int[*] -> ( int[*])},
             int[+] -> { int[*] -> ( int[*])},
             int[.] -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
float[*] sacprelude_p::sel( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { float[*] -> ( float[*])},
             int[+] -> { float[*] -> ( float[*])},
             int[.] -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
double[*] sacprelude_p::sel( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { double[*] -> ( double[*])},
             int[+] -> { double[*] -> ( double[*])},
             int[.] -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
bool[*] sacprelude_p::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*])},
             int[.] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
char[*] sacprelude_p::sel( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { char[*] -> ( char[*])},
             int[+] -> { char[*] -> ( char[*])},
             int[.] -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
byte[*] sacprelude_p::sel( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { byte[*] -> ( byte[*])},
             int[+] -> { byte[*] -> ( byte[*])},
             int[.] -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
short[*] sacprelude_p::sel( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { short[*] -> ( short[*])},
             int[+] -> { short[*] -> ( short[*])},
             int[.] -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
long[*] sacprelude_p::sel( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { long[*] -> ( long[*])},
             int[+] -> { long[*] -> ( long[*])},
             int[.] -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
longlong[*] sacprelude_p::sel( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { longlong[*] -> ( longlong[*])},
             int[+] -> { longlong[*] -> ( longlong[*])},
             int[.] -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
ubyte[*] sacprelude_p::sel( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
             int[+] -> { ubyte[*] -> ( ubyte[*])},
             int[.] -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
ushort[*] sacprelude_p::sel( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ushort[*] -> ( ushort[*])},
             int[+] -> { ushort[*] -> ( ushort[*])},
             int[.] -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
uint[*] sacprelude_p::sel( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { uint[*] -> ( uint[*])},
             int[+] -> { uint[*] -> ( uint[*])},
             int[.] -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
ulong[*] sacprelude_p::sel( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ulong[*] -> ( ulong[*])},
             int[+] -> { ulong[*] -> ( ulong[*])},
             int[.] -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
ulonglong[*] sacprelude_p::sel( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
             int[+] -> { ulonglong[*] -> ( ulonglong[*])},
             int[.] -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_p::sel
 */;

external /* sticky */
int[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { int[*] -> ( int[*])},
                             int[+] -> { int[*] -> ( int[*])},
                             int[.] -> { int[*] -> ( int[*])},
                             int[1] -> { int[*] -> ( int[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
float[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { float[*] -> ( float[*])},
                             int[+] -> { float[*] -> ( float[*])},
                             int[.] -> { float[*] -> ( float[*])},
                             int[1] -> { float[*] -> ( float[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
double[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { double[*] -> ( double[*])},
                             int[+] -> { double[*] -> ( double[*])},
                             int[.] -> { double[*] -> ( double[*])},
                             int[1] -> { double[*] -> ( double[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
bool[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { bool[*] -> ( bool[*])},
                             int[+] -> { bool[*] -> ( bool[*])},
                             int[.] -> { bool[*] -> ( bool[*])},
                             int[1] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
char[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { char[*] -> ( char[*])},
                             int[+] -> { char[*] -> ( char[*])},
                             int[.] -> { char[*] -> ( char[*])},
                             int[1] -> { char[*] -> ( char[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
byte[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { byte[*] -> ( byte[*])},
                             int[+] -> { byte[*] -> ( byte[*])},
                             int[.] -> { byte[*] -> ( byte[*])},
                             int[1] -> { byte[*] -> ( byte[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
short[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { short[*] -> ( short[*])},
                             int[+] -> { short[*] -> ( short[*])},
                             int[.] -> { short[*] -> ( short[*])},
                             int[1] -> { short[*] -> ( short[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
long[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { long[*] -> ( long[*])},
                             int[+] -> { long[*] -> ( long[*])},
                             int[.] -> { long[*] -> ( long[*])},
                             int[1] -> { long[*] -> ( long[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
longlong[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { longlong[*] -> ( longlong[*])},
                             int[+] -> { longlong[*] -> ( longlong[*])},
                             int[.] -> { longlong[*] -> ( longlong[*])},
                             int[1] -> { longlong[*] -> ( longlong[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
ubyte[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ubyte[*] -> ( ubyte[*])},
                             int[+] -> { ubyte[*] -> ( ubyte[*])},
                             int[.] -> { ubyte[*] -> ( ubyte[*])},
                             int[1] -> { ubyte[*] -> ( ubyte[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
ushort[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ushort[*] -> ( ushort[*])},
                             int[+] -> { ushort[*] -> ( ushort[*])},
                             int[.] -> { ushort[*] -> ( ushort[*])},
                             int[1] -> { ushort[*] -> ( ushort[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
uint[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { uint[*] -> ( uint[*])},
                             int[+] -> { uint[*] -> ( uint[*])},
                             int[.] -> { uint[*] -> ( uint[*])},
                             int[1] -> { uint[*] -> ( uint[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
ulong[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ulong[*] -> ( ulong[*])},
                             int[+] -> { ulong[*] -> ( ulong[*])},
                             int[.] -> { ulong[*] -> ( ulong[*])},
                             int[1] -> { ulong[*] -> ( ulong[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external /* sticky */
ulonglong[*] sacprelude_p::_selVxADistmemLocal( int[*] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal :: { int[*] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[+] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[.] -> { ulonglong[*] -> ( ulonglong[*])},
                             int[1] -> { ulonglong[*] -> ( ulonglong[*])}}
 *  dispatching to: sacprelude_p::_selVxADistmemLocal,
 *                  sacprelude_p::_selVxADistmemLocal
 */;

external World::World * World:_INIT::init_TheWorld( World::World *_OI_object { ,NN } )
/*
 *  init_TheWorld ::  ---
 */;

external World::World *, Terminal::Terminal * Terminal:_INIT::init_TheTerminal( World::World *_rso_5_TheWorld { ,NN } , Terminal::Terminal *_OI_object { ,NN } )
/*
 *  init_TheTerminal ::  ---
 */;

external Terminal::Terminal *, TermFile::TermFile * TermFile:_INIT::init_stdout( Terminal::Terminal *_rso_43_TheTerminal { ,NN } , TermFile::TermFile *_OI_object { ,NN } )
/*
 *  init_stdout ::  ---
 */;

external /* sticky */
int[*] sacprelude_p::adjustLacFunParams( bool[*] p { ,NN } , int[*] i { ,NN } , int[.] iv { ,NN } )
/*
 *  adjustLacFunParams ::  ---
 */;

external /* sticky */
int[*] sacprelude_p::adjustLacFunParamsReshape( bool[*] p { ,NN } , int[*] i { ,NN } , int[.] iv { ,NN } , int[.] shp { ,NN } )
/*
 *  adjustLacFunParamsReshape ::  ---
 */;

external /* sticky */
int sacprelude_p::++( int a { ,NN } )
/*
 *  ++ ::  ---
 */;

external bool[*] ArrayArith::&( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  & :: { bool[*] -> { bool[*] -> ( bool[*]),
                        bool -> ( bool[*]),
                        bool[+] -> ( bool[+])},
           bool -> { bool[*] -> ( bool[*]),
                     bool -> ( bool),
                     bool[+] -> ( bool[+])},
           bool[+] -> { bool[*] -> ( bool[+]),
                        bool -> ( bool[+]),
                        bool[+] -> ( bool[+])}}
 *  dispatching to: ArrayArith::&,
 *                  ArrayArith::&,
 *                  ArrayArith::&,
 *                  ScalarArith::&
 */;

external int sacprelude_p::*( int[*] a { ,NN } , int[*] b { ,NN } )
/*
 *  * :: { int[*] -> { int[*] -> ( int),
                       int -> ( int)},
           int -> { int[*] -> ( int),
                    int -> ( int)}}
 *  dispatching to: sacprelude_p::*
 */;

external bool sacprelude_p::and( bool[*] a { ,NN } , bool[*] b { ,NN } )
/*
 *  and :: { bool[*] -> { bool[*] -> ( bool),
                          bool -> ( bool)},
             bool -> { bool[*] -> ( bool),
                       bool -> ( bool)}}
 *  dispatching to: sacprelude_p::and
 */;

external double{1.0...} ArrayArith::one( double[*] A { ,NN } )
/*
 *  one :: { double[*] -> ( double{1.0...}),
             double -> ( double{1.0...}),
             double[+] -> ( double{1.0...})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one
 */;

external double{0.0...} ArrayArith::zero( double[*] A { ,NN } )
/*
 *  zero :: { double[*] -> ( double{0.0...}),
              double[+] -> ( double{0.0...})}
 *  dispatching to: ScalarArith::zero,
 *                  ArrayArith::zero
 */;

external int{1} ArrayArith::one( int[*] A { ,NN } )
/*
 *  one :: { int[*] -> ( int{1}),
             int -> ( int{1}),
             int[+] -> ( int{1}),
             int[.] -> ( int{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one
 */;

external int{1} ScalarArith::one( int[*] A { ,NN } )
/*
 *  one :: { int[*] -> ( int{1}),
             int -> ( int{1})}
 *  dispatching to: ScalarArith::one,
 *                  ScalarArith::one
 */;

external Terminal::Terminal *, TermFile::TermFile * TermFile::printf( Terminal::Terminal *_rso_13_TheTerminal { ,NN } , TermFile::TermFile *_rso_12_stdout { ,NN } , String::string[*] FORMAT { ,NN } , ...)
/*
 *  printf :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                      String::string -> ( Terminal::Terminal, TermFile::TermFile)},
                                           TermFile::TermFile -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                   String::string -> ( Terminal::Terminal, TermFile::TermFile)}},
                Terminal::Terminal -> { TermFile::TermFile[*] -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                   String::string -> ( Terminal::Terminal, TermFile::TermFile)},
                                        TermFile::TermFile -> { String::string[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                String::string -> ( Terminal::Terminal, TermFile::TermFile)}}}
 *  dispatching to: TermFile::printf
 */;

external String::string String::to_string( char[*] A { ,NN } , int[*] LENGTH { ,NN } )
/*
 *  to_string :: { char[*] -> { int[*] -> ( String::string),
                                int -> ( String::string)},
                   char[+] -> { int[*] -> ( String::string),
                                int -> ( String::string)},
                   char[.] -> { int[*] -> ( String::string),
                                int -> ( String::string)}}
 *  dispatching to: String::to_string
 */;

external TermFile::TermFile * ArrayIO::showarray( TermFile::TermFile *stream { ,NN } , int[*] d { ,NN } , int[*] s { ,NN } , char[*] a { ,NN } )
/*
 *  showarray :: { TermFile::TermFile[*] -> { int[*] -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                          int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                          int[.] -> { char[*] -> ( TermFile::TermFile)}},
                                              int -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[.] -> { char[*] -> ( TermFile::TermFile)}}},
                   TermFile::TermFile -> { int[*] -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                       int[.] -> { char[*] -> ( TermFile::TermFile)}},
                                           int -> { int[*] -> { char[*] -> ( TermFile::TermFile)},
                                                    int[+] -> { char[*] -> ( TermFile::TermFile)},
                                                    int[.] -> { char[*] -> ( TermFile::TermFile)}}}}
 *  dispatching to: ArrayIO::showarray
 */;

external int ArrayIO:Structures::dim( char[*] array { ,NN } )
/*
 *  dim :: { char[*] -> ( int),
             char[+] -> ( int)}
 *  dispatching to: ArrayBasics::dim,
 *                  ArrayIO:Structures::dim
 */;

external int[.] ArrayIO:Structures::shape( char[*] array { ,NN } )
/*
 *  shape :: { char[*] -> ( int[.]),
               char[+] -> ( int[.])}
 *  dispatching to: ArrayBasics::shape,
 *                  ArrayIO:Structures::shape
 */;

external char[+] ArrayFormat::format( bool[+] y { ,NN } )
/*
 *  format ::  ---
 */;

external char[1] ArrayFormat::format( bool y { ,NN } )
/*
 *  format ::  ---
 */;

external char[+] ArrayIO:ArrayFormat::format( bool[*] y { ,NN } )
/*
 *  format :: { bool[*] -> ( char[+]),
                bool -> ( char[1]),
                bool[+] -> ( char[+])}
 *  dispatching to: ArrayFormat::format,
 *                  ArrayFormat::format
 */;

external char[+] ArrayFormat::format( int[+] y { ,NN } )
/*
 *  format ::  ---
 */;

external char[.] ArrayFormat::format( int y { ,NN } )
/*
 *  format ::  ---
 */;

external char[+] ArrayIO:ArrayFormat::format( int[*] y { ,NN } )
/*
 *  format :: { int[*] -> ( char[+]),
                int -> ( char[.]),
                int[+] -> ( char[+])}
 *  dispatching to: ArrayFormat::format,
 *                  ArrayFormat::format
 */;

external bool{0} ArrayArith::zero( bool[*] A { ,NN } )
/*
 *  zero :: { bool[*] -> ( bool{0}),
              bool[+] -> ( bool{0})}
 *  dispatching to: ScalarArith::zero,
 *                  ArrayArith::zero
 */;

external bool{1} ArrayArith::one( bool[*] A { ,NN } )
/*
 *  one :: { bool[*] -> ( bool{1}),
             bool -> ( bool{1}),
             bool[+] -> ( bool{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one
 */;

external bool[*] ArrayBasics::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*])},
             int -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*])},
             int[.] -> { bool[*] -> ( bool[*])},
             int[1] -> { bool[*] -> ( bool[*])}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  ArrayBasics::sel
 */;

external bool[*] ArrayArith::to_bool( int[*] A { ,NN } )
/*
 *  to_bool :: { int[*] -> ( bool[*]),
                 int -> ( bool),
                 int[+] -> ( bool[+])}
 *  dispatching to: ArrayArith::to_bool,
 *                  Bool::to_bool
 */;

external int{0} ArrayArith::zero( int[*] A { ,NN } )
/*
 *  zero :: { int[*] -> ( int{0}),
              int[+] -> ( int{0})}
 *  dispatching to: ScalarArith::zero,
 *                  ArrayArith::zero
 */;



/*
 *  global objects
 */

external World::World World::TheWorld;

external Terminal::Terminal Terminal::TheTerminal;

external TermFile::TermFile TermFile::stdout;



/*
 *  function definitions (FUNDEFS)
 */



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_1146_O2V__Loop_6(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_1146_O2V__Loop_6( int[.] wts { ,NN } , int i { ,NN } , int[.] shp { ,NN } )
/*
 *  _dup_1146_O2V__Loop_6 ::  ---
 */
{ 
  int[.] wts__SSA0_3 { , NN } ; 
  int[.] wts__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  int{1} _flat_396 { , NN } ; 
  int _flat_395 { , NN } ; 
  int _flat_394 { , NN } ; 
  int{1} _flat_393 { , NN } ; 
  int _flat_392 { , NN } ; 
  int _flat_391 { , NN } ; 
  int _flat_390 { , NN } ; 
  int{0} _flat_398 { , NN } ; 
  bool _flat_397 { , NN } ; 

  _flat_396 = 1; 
  _flat_395 = ( i wrapper:Array::+_flat_396) ; 
  _flat_394 = wrapper:UTDScalarB:Array::sel( _flat_395, shp) ; 
  _flat_393 = 1; 
  _flat_392 = ( i wrapper:Array::+_flat_393) ; 
  _flat_391 = wrapper:UTDScalarB:Array::sel( _flat_392, wts) ; 
  _flat_390 = ( _flat_391 wrapper:UTDScalarB:Array::*_flat_394) ; 
  wts__SSA0_1 = wrapper:UTDScalarB:Array::modarray( wts, i, _flat_390) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_398 = 0; 
  _flat_397 = ( i__SSA0_1 wrapper:Array::>=_flat_398) ; 
  if (_flat_397) 
  { 
    wts__SSA0_2 = UTDScalarB::_dup_1146_O2V__Loop_6( wts__SSA0_1, i__SSA0_1, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_3 = ( _flat_397 ? wts__SSA0_2 : wts__SSA0_1 ); 
  return( wts__SSA0_3); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_1145_O2V__Loop_4(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_1145_O2V__Loop_4( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , int offset { ,NN } , int[.] shp { ,NN } )
/*
 *  _dup_1145_O2V__Loop_4 ::  ---
 */
{ 
  int[.] iv__SSA0_3 { , NN } ; 
  int[.] iv__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int offset__SSA0_2 { , NN } ;  /* declared: int */
  int offset__SSA0_1 { , NN } ;  /* declared: int */
  int[.] iv__SSA0_1 { , NN } ; 
  int _flat_408 { , NN } ; 
  int _flat_407 { , NN } ; 
  int _flat_406 { , NN } ; 
  int _flat_405 { , NN } ; 
  int _flat_411 { , NN } ; 
  int _flat_410 { , NN } ; 
  int _flat_409 { , NN } ; 
  int{0} _flat_413 { , NN } ; 
  bool _flat_412 { , NN } ; 

  _flat_408 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  _flat_407 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_406 = ( offset wrapper:Array::/_flat_407) ; 
  _flat_405 = _aplmod_SxS_( _flat_406, _flat_408); 
  iv__SSA0_1 = wrapper:UTDScalarB:Array::modarray( iv, i, _flat_405) ; 
  _flat_411 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_410 = wrapper:UTDScalarB:Array::sel( i, iv__SSA0_1) ; 
  _flat_409 = ( _flat_410 wrapper:UTDScalarB:Array::*_flat_411) ; 
  offset__SSA0_1 = ( offset wrapper:Array::-_flat_409) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_413 = 0; 
  _flat_412 = ( i__SSA0_1 wrapper:Array::>=_flat_413) ; 
  if (_flat_412) 
  { 
    iv__SSA0_2 = UTDScalarB::_dup_1145_O2V__Loop_4( iv__SSA0_1, wts, i__SSA0_1, offset__SSA0_2, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_3 = ( _flat_412 ? iv__SSA0_2 : iv__SSA0_1 ); 
  return( iv__SSA0_3); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_1144_V2O__Loop_2(...) [ body ]
 ****************************************************************************/
int UTDScalarB::_dup_1144_V2O__Loop_2( int offset { ,NN } , int wt { ,NN } , int i { ,NN } , int[.] iv { ,NN } , int[.] shp { ,NN } )
/*
 *  _dup_1144_V2O__Loop_2 ::  ---
 */
{ 
  int offset__SSA0_3 { , NN } ; 
  int offset__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int wt__SSA0_1 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  int _flat_378 { , NN } ; 
  int _flat_377 { , NN } ; 
  int _flat_379 { , NN } ; 
  int{0} _flat_381 { , NN } ; 
  bool _flat_380 { , NN } ; 

  _flat_378 = wrapper:UTDScalarB:Array::sel( i, iv) ; 
  _flat_377 = ( wt wrapper:UTDScalarB:Array::*_flat_378) ; 
  offset__SSA0_1 = ( offset wrapper:Array::+_flat_377) ; 
  _flat_379 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  wt__SSA0_1 = ( wt wrapper:UTDScalarB:Array::*_flat_379) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_381 = 0; 
  _flat_380 = ( i__SSA0_1 wrapper:Array::>=_flat_381) ; 
  if (_flat_380) 
  { 
    offset__SSA0_2 = UTDScalarB::_dup_1144_V2O__Loop_2( offset__SSA0_1, wt__SSA0_1, i__SSA0_1, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_3 = ( _flat_380 ? offset__SSA0_2 : offset__SSA0_1 ); 
  return( offset__SSA0_3); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::leBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::leBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  leBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[*]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[4]),
                            bool[4] -> ( bool[4]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool -> { bool[*] -> ( bool[*]),
                         bool -> ( bool),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[4]),
                         bool[4] -> ( bool[4])},
               bool[+] -> { bool[*] -> ( bool[+]),
                            bool -> ( bool[+]),
                            bool[+] -> ( bool[+]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                bool -> ( bool[.,.,.]),
                                bool[+] -> ( bool[.,.,.]),
                                bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::leBBB,
 *                  UTDScalarB::leBBB,
 *                  UTDScalarB::leBBB,
 *                  UTDScalarB::leBBB,
 *                  UTDScalarB::leBBB,
 *                  UTDScalarB::leBBB,
 *                  UTDScalarB::leBBB
 */
{ 
  bool[*] _cwc_1336 { , NN } ; 
  bool _cwc_1389 { , NN } ; 
  int _cwc_1388 { , NN } ; 
  bool _cwc_1387 { , NN } ; 
  int _cwc_1386 { , NN } ; 
  bool _cwc_1385 { , NN } ; 
  int _cwc_1384 { , NN } ; 
  bool _cwc_1383 { , NN } ; 
  int _cwc_1382 { , NN } ; 
  int _cwc_1381 { , NN } ; 
  bool _cwc_1380 { , NN } ; 
  int _cwc_1379 { , NN } ; 
  bool _cwc_1378 { , NN } ; 
  bool _cwc_1377 { , NN } ; 
  int{4} _cwc_1376 { , NN } ; 
  int _cwc_1375 { , NN } ; 
  int[1]{0} _cwc_1374 { , NN } ; 
  bool _cwc_1373 { , NN } ; 
  bool[4] _cwc_1372 { , NN } ; 
  int[+] _cwc_1371 { , NN } ; 
  bool[+] _cwc_1370 { , NN } ; 
  int _cwc_1369 { , NN } ; 
  bool[+] _cwc_1368 { , NN } ; 
  int _cwc_1367 { , NN } ; 
  bool _cwc_1366 { , NN } ; 
  int _cwc_1365 { , NN } ; 
  int _cwc_1364 { , NN } ; 
  bool _cwc_1363 { , NN } ; 
  int _cwc_1362 { , NN } ; 
  bool _cwc_1361 { , NN } ; 
  int _cwc_1360 { , NN } ; 
  bool[.,.,.] _cwc_1359 { , NN } ; 
  int _cwc_1358 { , NN } ; 
  bool _cwc_1357 { , NN } ; 
  int _cwc_1356 { , NN } ; 
  int _cwc_1355 { , NN } ; 
  bool _cwc_1354 { , NN } ; 
  int _cwc_1353 { , NN } ; 
  bool[.,.,.] _cwc_1352 { , NN } ; 
  int _cwc_1351 { , NN } ; 
  bool[+] _cwc_1350 { , NN } ; 
  int _cwc_1349 { , NN } ; 
  bool _cwc_1348 { , NN } ; 
  int _cwc_1347 { , NN } ; 
  bool[+] _cwc_1346 { , NN } ; 
  int _cwc_1345 { , NN } ; 
  bool _cwc_1344 { , NN } ; 
  int _cwc_1343 { , NN } ; 
  int _cwc_1342 { , NN } ; 
  bool _cwc_1341 { , NN } ; 
  int _cwc_1340 { , NN } ; 
  bool[+] _cwc_1339 { , NN } ; 
  int _cwc_1338 { , NN } ; 
  bool[+] _cwc_1337 { , NN } ; 

  _cwc_1367 = _dim_A_( x); 
  _cwc_1388 = 0; 
  _cwc_1389 = _eq_SxS_( _cwc_1367, _cwc_1388); 
  if (_cwc_1389) 
  { 
    _cwc_1384 = _dim_A_( y); 
    _cwc_1386 = 0; 
    _cwc_1387 = _eq_SxS_( _cwc_1384, _cwc_1386); 
    if (_cwc_1387) 
    { 
      _cwc_1385 = UTDScalarB::leBBB( x, y) ; 
      _cwc_1336 = _cwc_1385; 
    }
    else
    { 
      _cwc_1381 = _dim_A_( y); 
      _cwc_1382 = 0; 
      _cwc_1383 = _gt_SxS_( _cwc_1381, _cwc_1382); 
      if (_cwc_1383) 
      { 
        _cwc_1369 = _dim_A_( y); 
        _cwc_1379 = 1; 
        _cwc_1380 = _eq_SxS_( _cwc_1369, _cwc_1379); 
        if (_cwc_1380) 
        { 
          _cwc_1371 = _shape_A_( y); 
          _cwc_1373 = true; 
          _cwc_1376 = 4; 
          _cwc_1374 = [ 0 ]; 
          _cwc_1375 = _sel_VxA_( _cwc_1374, _cwc_1371); 
          _cwc_1377 = _eq_SxS_( _cwc_1375, _cwc_1376); 
          _cwc_1378 = _and_SxS_( _cwc_1377, _cwc_1373); 
          if (_cwc_1378) 
          { 
            _cwc_1372 = UTDScalarB::leBBB( x, y) ; 
            _cwc_1336 = _cwc_1372; 
          }
          else
          { 
            _cwc_1370 = UTDScalarB::leBBB( x, y) ; 
            _cwc_1336 = _cwc_1370; 
          }
        }
        else
        { 
          _cwc_1368 = UTDScalarB::leBBB( x, y) ; 
          _cwc_1336 = _cwc_1368; 
        }
      }
      else
      { 
        _cwc_1336 = _dispatch_error_( 1, bool[*], "UTDScalarB::leBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_1364 = _dim_A_( x); 
    _cwc_1365 = 0; 
    _cwc_1366 = _gt_SxS_( _cwc_1364, _cwc_1365); 
    if (_cwc_1366) 
    { 
      _cwc_1349 = _dim_A_( x); 
      _cwc_1362 = 3; 
      _cwc_1363 = _eq_SxS_( _cwc_1349, _cwc_1362); 
      if (_cwc_1363) 
      { 
        _cwc_1358 = _dim_A_( y); 
        _cwc_1360 = 0; 
        _cwc_1361 = _eq_SxS_( _cwc_1358, _cwc_1360); 
        if (_cwc_1361) 
        { 
          _cwc_1359 = UTDScalarB::leBBB( x, y) ; 
          _cwc_1336 = _cwc_1359; 
        }
        else
        { 
          _cwc_1355 = _dim_A_( y); 
          _cwc_1356 = 0; 
          _cwc_1357 = _gt_SxS_( _cwc_1355, _cwc_1356); 
          if (_cwc_1357) 
          { 
            _cwc_1351 = _dim_A_( y); 
            _cwc_1353 = 3; 
            _cwc_1354 = _eq_SxS_( _cwc_1351, _cwc_1353); 
            if (_cwc_1354) 
            { 
              _cwc_1352 = UTDScalarB::leBBB( x, y) ; 
              _cwc_1336 = _cwc_1352; 
            }
            else
            { 
              _cwc_1350 = UTDScalarB::leBBB( x, y) ; 
              _cwc_1336 = _cwc_1350; 
            }
          }
          else
          { 
            _cwc_1336 = _dispatch_error_( 1, bool[*], "UTDScalarB::leBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_1345 = _dim_A_( y); 
        _cwc_1347 = 0; 
        _cwc_1348 = _eq_SxS_( _cwc_1345, _cwc_1347); 
        if (_cwc_1348) 
        { 
          _cwc_1346 = UTDScalarB::leBBB( x, y) ; 
          _cwc_1336 = _cwc_1346; 
        }
        else
        { 
          _cwc_1342 = _dim_A_( y); 
          _cwc_1343 = 0; 
          _cwc_1344 = _gt_SxS_( _cwc_1342, _cwc_1343); 
          if (_cwc_1344) 
          { 
            _cwc_1338 = _dim_A_( y); 
            _cwc_1340 = 3; 
            _cwc_1341 = _eq_SxS_( _cwc_1338, _cwc_1340); 
            if (_cwc_1341) 
            { 
              _cwc_1339 = UTDScalarB::leBBB( x, y) ; 
              _cwc_1336 = _cwc_1339; 
            }
            else
            { 
              _cwc_1337 = UTDScalarB::leBBB( x, y) ; 
              _cwc_1336 = _cwc_1337; 
            }
          }
          else
          { 
            _cwc_1336 = _dispatch_error_( 1, bool[*], "UTDScalarB::leBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_1336 = _dispatch_error_( 1, bool[*], "UTDScalarB::leBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_1336); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::NEXXB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[14] UTDScalarB::NEXXB()
/*
 *  NEXXB :: ( bool[14])
 *  dispatching to: UTDScalarB::NEXXB
 */
{ 
  bool[14] _cwc_1390 { , NN } ; 
  bool[14] _cwc_1391 { , NN } ; 

  _cwc_1391 = UTDScalarB::NEXXB() ; 
  _cwc_1390 = _cwc_1391; 
  return( _cwc_1390); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::jotdotneBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB::jotdotneBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  jotdotneBBB :: { bool[*] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[+] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[.] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[4] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])}}
 *  dispatching to: UTDScalarB::jotdotneBBB,
 *                  UTDScalarB::jotdotneBBB
 */
{ 
  bool[+] _cwc_1392 { , NN } ; 
  bool _cwc_1453 { , NN } ; 
  int _cwc_1452 { , NN } ; 
  int _cwc_1451 { , NN } ; 
  bool _cwc_1450 { , NN } ; 
  int _cwc_1449 { , NN } ; 
  bool _cwc_1448 { , NN } ; 
  bool _cwc_1447 { , NN } ; 
  int{4} _cwc_1446 { , NN } ; 
  int _cwc_1445 { , NN } ; 
  int[1]{0} _cwc_1444 { , NN } ; 
  bool _cwc_1443 { , NN } ; 
  bool _cwc_1442 { , NN } ; 
  int _cwc_1441 { , NN } ; 
  int _cwc_1440 { , NN } ; 
  bool _cwc_1439 { , NN } ; 
  int _cwc_1438 { , NN } ; 
  bool _cwc_1437 { , NN } ; 
  bool _cwc_1436 { , NN } ; 
  int{4} _cwc_1435 { , NN } ; 
  int _cwc_1434 { , NN } ; 
  int[1]{0} _cwc_1433 { , NN } ; 
  bool _cwc_1432 { , NN } ; 
  bool[4,4] _cwc_1431 { , NN } ; 
  int[+] _cwc_1430 { , NN } ; 
  bool[+] _cwc_1429 { , NN } ; 
  int _cwc_1428 { , NN } ; 
  bool[+] _cwc_1427 { , NN } ; 
  int[+] _cwc_1426 { , NN } ; 
  bool _cwc_1425 { , NN } ; 
  int _cwc_1424 { , NN } ; 
  int _cwc_1423 { , NN } ; 
  bool _cwc_1422 { , NN } ; 
  int _cwc_1421 { , NN } ; 
  bool _cwc_1420 { , NN } ; 
  bool _cwc_1419 { , NN } ; 
  int{4} _cwc_1418 { , NN } ; 
  int _cwc_1417 { , NN } ; 
  int[1]{0} _cwc_1416 { , NN } ; 
  bool _cwc_1415 { , NN } ; 
  bool[+] _cwc_1414 { , NN } ; 
  int[+] _cwc_1413 { , NN } ; 
  bool[+] _cwc_1412 { , NN } ; 
  int _cwc_1411 { , NN } ; 
  bool[+] _cwc_1410 { , NN } ; 
  int _cwc_1409 { , NN } ; 
  bool _cwc_1408 { , NN } ; 
  int _cwc_1407 { , NN } ; 
  int _cwc_1406 { , NN } ; 
  bool _cwc_1405 { , NN } ; 
  int _cwc_1404 { , NN } ; 
  bool _cwc_1403 { , NN } ; 
  bool _cwc_1402 { , NN } ; 
  int{4} _cwc_1401 { , NN } ; 
  int _cwc_1400 { , NN } ; 
  int[1]{0} _cwc_1399 { , NN } ; 
  bool _cwc_1398 { , NN } ; 
  bool[+] _cwc_1397 { , NN } ; 
  int[+] _cwc_1396 { , NN } ; 
  bool[+] _cwc_1395 { , NN } ; 
  int _cwc_1394 { , NN } ; 
  bool[+] _cwc_1393 { , NN } ; 

  _cwc_1451 = _dim_A_( x); 
  _cwc_1452 = 0; 
  _cwc_1453 = _gt_SxS_( _cwc_1451, _cwc_1452); 
  if (_cwc_1453) 
  { 
    _cwc_1409 = _dim_A_( x); 
    _cwc_1449 = 1; 
    _cwc_1450 = _eq_SxS_( _cwc_1409, _cwc_1449); 
    if (_cwc_1450) 
    { 
      _cwc_1426 = _shape_A_( x); 
      _cwc_1443 = true; 
      _cwc_1446 = 4; 
      _cwc_1444 = [ 0 ]; 
      _cwc_1445 = _sel_VxA_( _cwc_1444, _cwc_1426); 
      _cwc_1447 = _eq_SxS_( _cwc_1445, _cwc_1446); 
      _cwc_1448 = _and_SxS_( _cwc_1447, _cwc_1443); 
      if (_cwc_1448) 
      { 
        _cwc_1440 = _dim_A_( y); 
        _cwc_1441 = 0; 
        _cwc_1442 = _gt_SxS_( _cwc_1440, _cwc_1441); 
        if (_cwc_1442) 
        { 
          _cwc_1428 = _dim_A_( y); 
          _cwc_1438 = 1; 
          _cwc_1439 = _eq_SxS_( _cwc_1428, _cwc_1438); 
          if (_cwc_1439) 
          { 
            _cwc_1430 = _shape_A_( y); 
            _cwc_1432 = true; 
            _cwc_1435 = 4; 
            _cwc_1433 = [ 0 ]; 
            _cwc_1434 = _sel_VxA_( _cwc_1433, _cwc_1430); 
            _cwc_1436 = _eq_SxS_( _cwc_1434, _cwc_1435); 
            _cwc_1437 = _and_SxS_( _cwc_1436, _cwc_1432); 
            if (_cwc_1437) 
            { 
              _cwc_1431 = UTDScalarB::jotdotneBBB( x, y) ; 
              _cwc_1392 = _cwc_1431; 
            }
            else
            { 
              _cwc_1429 = UTDScalarB::jotdotneBBB( x, y) ; 
              _cwc_1392 = _cwc_1429; 
            }
          }
          else
          { 
            _cwc_1427 = UTDScalarB::jotdotneBBB( x, y) ; 
            _cwc_1392 = _cwc_1427; 
          }
        }
        else
        { 
          _cwc_1392 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotneBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
      else
      { 
        _cwc_1423 = _dim_A_( y); 
        _cwc_1424 = 0; 
        _cwc_1425 = _gt_SxS_( _cwc_1423, _cwc_1424); 
        if (_cwc_1425) 
        { 
          _cwc_1411 = _dim_A_( y); 
          _cwc_1421 = 1; 
          _cwc_1422 = _eq_SxS_( _cwc_1411, _cwc_1421); 
          if (_cwc_1422) 
          { 
            _cwc_1413 = _shape_A_( y); 
            _cwc_1415 = true; 
            _cwc_1418 = 4; 
            _cwc_1416 = [ 0 ]; 
            _cwc_1417 = _sel_VxA_( _cwc_1416, _cwc_1413); 
            _cwc_1419 = _eq_SxS_( _cwc_1417, _cwc_1418); 
            _cwc_1420 = _and_SxS_( _cwc_1419, _cwc_1415); 
            if (_cwc_1420) 
            { 
              _cwc_1414 = UTDScalarB::jotdotneBBB( x, y) ; 
              _cwc_1392 = _cwc_1414; 
            }
            else
            { 
              _cwc_1412 = UTDScalarB::jotdotneBBB( x, y) ; 
              _cwc_1392 = _cwc_1412; 
            }
          }
          else
          { 
            _cwc_1410 = UTDScalarB::jotdotneBBB( x, y) ; 
            _cwc_1392 = _cwc_1410; 
          }
        }
        else
        { 
          _cwc_1392 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotneBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_1406 = _dim_A_( y); 
      _cwc_1407 = 0; 
      _cwc_1408 = _gt_SxS_( _cwc_1406, _cwc_1407); 
      if (_cwc_1408) 
      { 
        _cwc_1394 = _dim_A_( y); 
        _cwc_1404 = 1; 
        _cwc_1405 = _eq_SxS_( _cwc_1394, _cwc_1404); 
        if (_cwc_1405) 
        { 
          _cwc_1396 = _shape_A_( y); 
          _cwc_1398 = true; 
          _cwc_1401 = 4; 
          _cwc_1399 = [ 0 ]; 
          _cwc_1400 = _sel_VxA_( _cwc_1399, _cwc_1396); 
          _cwc_1402 = _eq_SxS_( _cwc_1400, _cwc_1401); 
          _cwc_1403 = _and_SxS_( _cwc_1402, _cwc_1398); 
          if (_cwc_1403) 
          { 
            _cwc_1397 = UTDScalarB::jotdotneBBB( x, y) ; 
            _cwc_1392 = _cwc_1397; 
          }
          else
          { 
            _cwc_1395 = UTDScalarB::jotdotneBBB( x, y) ; 
            _cwc_1392 = _cwc_1395; 
          }
        }
        else
        { 
          _cwc_1393 = UTDScalarB::jotdotneBBB( x, y) ; 
          _cwc_1392 = _cwc_1393; 
        }
      }
      else
      { 
        _cwc_1392 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotneBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_1392 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotneBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
  }
  return( _cwc_1392); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::quadXII(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
Terminal::Terminal *, TermFile::TermFile *, int[*] UTDScalarB::quadXII( Terminal::Terminal *_rso_1133_TheTerminal { ,NN } , TermFile::TermFile *_rso_1132_stdout { ,NN } , int[*] y { ,NN } , int[*] QUADpp { ,NN } , int[*] QUADpw { ,NN } )
/*
 *  quadXII :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> { int[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                               int -> ( Terminal::Terminal, TermFile::TermFile, int[*])},
                                                                                   int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                            int -> ( Terminal::Terminal, TermFile::TermFile, int[*])}},
                                                                       int -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                            int -> ( Terminal::Terminal, TermFile::TermFile, int)},
                                                                                int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int)}}},
                                            TermFile::TermFile -> { int[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                            int -> ( Terminal::Terminal, TermFile::TermFile, int[*])},
                                                                                int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int[*])}},
                                                                    int -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int)},
                                                                             int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                      int -> ( Terminal::Terminal, TermFile::TermFile, int)}}}},
                 Terminal::Terminal -> { TermFile::TermFile[*] -> { int[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                            int -> ( Terminal::Terminal, TermFile::TermFile, int[*])},
                                                                                int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int[*])}},
                                                                    int -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int)},
                                                                             int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                      int -> ( Terminal::Terminal, TermFile::TermFile, int)}}},
                                         TermFile::TermFile -> { int[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                         int -> ( Terminal::Terminal, TermFile::TermFile, int[*])},
                                                                             int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int[*]),
                                                                                      int -> ( Terminal::Terminal, TermFile::TermFile, int[*])}},
                                                                 int -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                      int -> ( Terminal::Terminal, TermFile::TermFile, int)},
                                                                          int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                                                   int -> ( Terminal::Terminal, TermFile::TermFile, int)}}}}}
 *  dispatching to: UTDScalarB::quadXII,
 *                  UTDScalarB::quadXII
 */
{ 
  int[*] _cwc_1456 { , NN } ; 
  TermFile::TermFile _cwc_1455 { , NN } ; 
  Terminal::Terminal _cwc_1454 { , NN } ; 
  bool _cwc_1477 { , NN } ; 
  int _cwc_1476 { , NN } ; 
  bool _cwc_1475 { , NN } ; 
  int _cwc_1474 { , NN } ; 
  bool _cwc_1473 { , NN } ; 
  int _cwc_1472 { , NN } ; 
  Terminal::Terminal _cwc_1471 { , NN } ; 
  TermFile::TermFile _cwc_1470 { , NN } ; 
  int _cwc_1469 { , NN } ; 
  int _cwc_1468 { , NN } ; 
  int _cwc_1467 { , NN } ; 
  int _cwc_1466 { , NN } ; 
  bool _cwc_1465 { , NN } ; 
  int _cwc_1464 { , NN } ; 
  bool _cwc_1463 { , NN } ; 
  int _cwc_1462 { , NN } ; 
  Terminal::Terminal _cwc_1461 { , NN } ; 
  TermFile::TermFile _cwc_1460 { , NN } ; 
  int[*] _cwc_1459 { , NN } ; 
  int _cwc_1458 { , NN } ; 
  int _cwc_1457 { , NN } ; 

  _cwc_1466 = _dim_A_( y); 
  _cwc_1476 = 0; 
  _cwc_1477 = _eq_SxS_( _cwc_1466, _cwc_1476); 
  if (_cwc_1477) 
  { 
    _cwc_1467 = _dim_A_( QUADpp); 
    _cwc_1474 = 0; 
    _cwc_1475 = _eq_SxS_( _cwc_1467, _cwc_1474); 
    if (_cwc_1475) 
    { 
      _cwc_1468 = _dim_A_( QUADpw); 
      _cwc_1472 = 0; 
      _cwc_1473 = _eq_SxS_( _cwc_1468, _cwc_1472); 
      if (_cwc_1473) 
      { 
        _cwc_1471, _cwc_1470, _cwc_1469 = UTDScalarB::quadXII( _rso_1133_TheTerminal, _rso_1132_stdout, y, QUADpp, QUADpw) ; 
        _cwc_1454 = _cwc_1471; 
        _cwc_1455 = _cwc_1470; 
        _cwc_1456 = _cwc_1469; 
      }
      else
      { 
        _cwc_1454, _cwc_1455, _cwc_1456 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, int[*], "UTDScalarB::quadXII :: Terminal::Terminal TermFile::TermFile int[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile int[*] ", _rso_1133_TheTerminal, _rso_1132_stdout, y, QUADpp, QUADpw); 
      }
    }
    else
    { 
      _cwc_1454, _cwc_1455, _cwc_1456 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, int[*], "UTDScalarB::quadXII :: Terminal::Terminal TermFile::TermFile int[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile int[*] ", _rso_1133_TheTerminal, _rso_1132_stdout, y, QUADpp, QUADpw); 
    }
  }
  else
  { 
    _cwc_1457 = _dim_A_( QUADpp); 
    _cwc_1464 = 0; 
    _cwc_1465 = _eq_SxS_( _cwc_1457, _cwc_1464); 
    if (_cwc_1465) 
    { 
      _cwc_1458 = _dim_A_( QUADpw); 
      _cwc_1462 = 0; 
      _cwc_1463 = _eq_SxS_( _cwc_1458, _cwc_1462); 
      if (_cwc_1463) 
      { 
        _cwc_1461, _cwc_1460, _cwc_1459 = UTDScalarB::quadXII( _rso_1133_TheTerminal, _rso_1132_stdout, y, QUADpp, QUADpw) ; 
        _cwc_1454 = _cwc_1461; 
        _cwc_1455 = _cwc_1460; 
        _cwc_1456 = _cwc_1459; 
      }
      else
      { 
        _cwc_1454, _cwc_1455, _cwc_1456 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, int[*], "UTDScalarB::quadXII :: Terminal::Terminal TermFile::TermFile int[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile int[*] ", _rso_1133_TheTerminal, _rso_1132_stdout, y, QUADpp, QUADpw); 
      }
    }
    else
    { 
      _cwc_1454, _cwc_1455, _cwc_1456 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, int[*], "UTDScalarB::quadXII :: Terminal::Terminal TermFile::TermFile int[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile int[*] ", _rso_1133_TheTerminal, _rso_1132_stdout, y, QUADpp, QUADpw); 
    }
  }
  return( _cwc_1454, _cwc_1455, _cwc_1456); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::orBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::orBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  orBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[*]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[4]),
                            bool[4] -> ( bool[4]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool -> { bool[*] -> ( bool[*]),
                         bool -> ( bool),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[4]),
                         bool[4] -> ( bool[4])},
               bool[+] -> { bool[*] -> ( bool[+]),
                            bool -> ( bool[+]),
                            bool[+] -> ( bool[+]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                bool -> ( bool[.,.,.]),
                                bool[+] -> ( bool[.,.,.]),
                                bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::orBBB,
 *                  UTDScalarB::orBBB,
 *                  UTDScalarB::orBBB,
 *                  UTDScalarB::orBBB,
 *                  UTDScalarB::orBBB,
 *                  UTDScalarB::orBBB,
 *                  UTDScalarB::orBBB
 */
{ 
  bool[*] _cwc_1478 { , NN } ; 
  bool _cwc_1531 { , NN } ; 
  int _cwc_1530 { , NN } ; 
  bool _cwc_1529 { , NN } ; 
  int _cwc_1528 { , NN } ; 
  bool _cwc_1527 { , NN } ; 
  int _cwc_1526 { , NN } ; 
  bool _cwc_1525 { , NN } ; 
  int _cwc_1524 { , NN } ; 
  int _cwc_1523 { , NN } ; 
  bool _cwc_1522 { , NN } ; 
  int _cwc_1521 { , NN } ; 
  bool _cwc_1520 { , NN } ; 
  bool _cwc_1519 { , NN } ; 
  int{4} _cwc_1518 { , NN } ; 
  int _cwc_1517 { , NN } ; 
  int[1]{0} _cwc_1516 { , NN } ; 
  bool _cwc_1515 { , NN } ; 
  bool[4] _cwc_1514 { , NN } ; 
  int[+] _cwc_1513 { , NN } ; 
  bool[+] _cwc_1512 { , NN } ; 
  int _cwc_1511 { , NN } ; 
  bool[+] _cwc_1510 { , NN } ; 
  int _cwc_1509 { , NN } ; 
  bool _cwc_1508 { , NN } ; 
  int _cwc_1507 { , NN } ; 
  int _cwc_1506 { , NN } ; 
  bool _cwc_1505 { , NN } ; 
  int _cwc_1504 { , NN } ; 
  bool _cwc_1503 { , NN } ; 
  int _cwc_1502 { , NN } ; 
  bool[.,.,.] _cwc_1501 { , NN } ; 
  int _cwc_1500 { , NN } ; 
  bool _cwc_1499 { , NN } ; 
  int _cwc_1498 { , NN } ; 
  int _cwc_1497 { , NN } ; 
  bool _cwc_1496 { , NN } ; 
  int _cwc_1495 { , NN } ; 
  bool[.,.,.] _cwc_1494 { , NN } ; 
  int _cwc_1493 { , NN } ; 
  bool[+] _cwc_1492 { , NN } ; 
  int _cwc_1491 { , NN } ; 
  bool _cwc_1490 { , NN } ; 
  int _cwc_1489 { , NN } ; 
  bool[+] _cwc_1488 { , NN } ; 
  int _cwc_1487 { , NN } ; 
  bool _cwc_1486 { , NN } ; 
  int _cwc_1485 { , NN } ; 
  int _cwc_1484 { , NN } ; 
  bool _cwc_1483 { , NN } ; 
  int _cwc_1482 { , NN } ; 
  bool[+] _cwc_1481 { , NN } ; 
  int _cwc_1480 { , NN } ; 
  bool[+] _cwc_1479 { , NN } ; 

  _cwc_1509 = _dim_A_( x); 
  _cwc_1530 = 0; 
  _cwc_1531 = _eq_SxS_( _cwc_1509, _cwc_1530); 
  if (_cwc_1531) 
  { 
    _cwc_1526 = _dim_A_( y); 
    _cwc_1528 = 0; 
    _cwc_1529 = _eq_SxS_( _cwc_1526, _cwc_1528); 
    if (_cwc_1529) 
    { 
      _cwc_1527 = UTDScalarB::orBBB( x, y) ; 
      _cwc_1478 = _cwc_1527; 
    }
    else
    { 
      _cwc_1523 = _dim_A_( y); 
      _cwc_1524 = 0; 
      _cwc_1525 = _gt_SxS_( _cwc_1523, _cwc_1524); 
      if (_cwc_1525) 
      { 
        _cwc_1511 = _dim_A_( y); 
        _cwc_1521 = 1; 
        _cwc_1522 = _eq_SxS_( _cwc_1511, _cwc_1521); 
        if (_cwc_1522) 
        { 
          _cwc_1513 = _shape_A_( y); 
          _cwc_1515 = true; 
          _cwc_1518 = 4; 
          _cwc_1516 = [ 0 ]; 
          _cwc_1517 = _sel_VxA_( _cwc_1516, _cwc_1513); 
          _cwc_1519 = _eq_SxS_( _cwc_1517, _cwc_1518); 
          _cwc_1520 = _and_SxS_( _cwc_1519, _cwc_1515); 
          if (_cwc_1520) 
          { 
            _cwc_1514 = UTDScalarB::orBBB( x, y) ; 
            _cwc_1478 = _cwc_1514; 
          }
          else
          { 
            _cwc_1512 = UTDScalarB::orBBB( x, y) ; 
            _cwc_1478 = _cwc_1512; 
          }
        }
        else
        { 
          _cwc_1510 = UTDScalarB::orBBB( x, y) ; 
          _cwc_1478 = _cwc_1510; 
        }
      }
      else
      { 
        _cwc_1478 = _dispatch_error_( 1, bool[*], "UTDScalarB::orBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_1506 = _dim_A_( x); 
    _cwc_1507 = 0; 
    _cwc_1508 = _gt_SxS_( _cwc_1506, _cwc_1507); 
    if (_cwc_1508) 
    { 
      _cwc_1491 = _dim_A_( x); 
      _cwc_1504 = 3; 
      _cwc_1505 = _eq_SxS_( _cwc_1491, _cwc_1504); 
      if (_cwc_1505) 
      { 
        _cwc_1500 = _dim_A_( y); 
        _cwc_1502 = 0; 
        _cwc_1503 = _eq_SxS_( _cwc_1500, _cwc_1502); 
        if (_cwc_1503) 
        { 
          _cwc_1501 = UTDScalarB::orBBB( x, y) ; 
          _cwc_1478 = _cwc_1501; 
        }
        else
        { 
          _cwc_1497 = _dim_A_( y); 
          _cwc_1498 = 0; 
          _cwc_1499 = _gt_SxS_( _cwc_1497, _cwc_1498); 
          if (_cwc_1499) 
          { 
            _cwc_1493 = _dim_A_( y); 
            _cwc_1495 = 3; 
            _cwc_1496 = _eq_SxS_( _cwc_1493, _cwc_1495); 
            if (_cwc_1496) 
            { 
              _cwc_1494 = UTDScalarB::orBBB( x, y) ; 
              _cwc_1478 = _cwc_1494; 
            }
            else
            { 
              _cwc_1492 = UTDScalarB::orBBB( x, y) ; 
              _cwc_1478 = _cwc_1492; 
            }
          }
          else
          { 
            _cwc_1478 = _dispatch_error_( 1, bool[*], "UTDScalarB::orBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_1487 = _dim_A_( y); 
        _cwc_1489 = 0; 
        _cwc_1490 = _eq_SxS_( _cwc_1487, _cwc_1489); 
        if (_cwc_1490) 
        { 
          _cwc_1488 = UTDScalarB::orBBB( x, y) ; 
          _cwc_1478 = _cwc_1488; 
        }
        else
        { 
          _cwc_1484 = _dim_A_( y); 
          _cwc_1485 = 0; 
          _cwc_1486 = _gt_SxS_( _cwc_1484, _cwc_1485); 
          if (_cwc_1486) 
          { 
            _cwc_1480 = _dim_A_( y); 
            _cwc_1482 = 3; 
            _cwc_1483 = _eq_SxS_( _cwc_1480, _cwc_1482); 
            if (_cwc_1483) 
            { 
              _cwc_1481 = UTDScalarB::orBBB( x, y) ; 
              _cwc_1478 = _cwc_1481; 
            }
            else
            { 
              _cwc_1479 = UTDScalarB::orBBB( x, y) ; 
              _cwc_1478 = _cwc_1479; 
            }
          }
          else
          { 
            _cwc_1478 = _dispatch_error_( 1, bool[*], "UTDScalarB::orBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_1478 = _dispatch_error_( 1, bool[*], "UTDScalarB::orBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_1478); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::ltBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::ltBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  ltBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[*]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[4]),
                            bool[4] -> ( bool[4]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool -> { bool[*] -> ( bool[*]),
                         bool -> ( bool),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[4]),
                         bool[4] -> ( bool[4])},
               bool[+] -> { bool[*] -> ( bool[+]),
                            bool -> ( bool[+]),
                            bool[+] -> ( bool[+]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                bool -> ( bool[.,.,.]),
                                bool[+] -> ( bool[.,.,.]),
                                bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::ltBBB,
 *                  UTDScalarB::ltBBB,
 *                  UTDScalarB::ltBBB,
 *                  UTDScalarB::ltBBB,
 *                  UTDScalarB::ltBBB,
 *                  UTDScalarB::ltBBB,
 *                  UTDScalarB::ltBBB
 */
{ 
  bool[*] _cwc_1532 { , NN } ; 
  bool _cwc_1585 { , NN } ; 
  int _cwc_1584 { , NN } ; 
  bool _cwc_1583 { , NN } ; 
  int _cwc_1582 { , NN } ; 
  bool _cwc_1581 { , NN } ; 
  int _cwc_1580 { , NN } ; 
  bool _cwc_1579 { , NN } ; 
  int _cwc_1578 { , NN } ; 
  int _cwc_1577 { , NN } ; 
  bool _cwc_1576 { , NN } ; 
  int _cwc_1575 { , NN } ; 
  bool _cwc_1574 { , NN } ; 
  bool _cwc_1573 { , NN } ; 
  int{4} _cwc_1572 { , NN } ; 
  int _cwc_1571 { , NN } ; 
  int[1]{0} _cwc_1570 { , NN } ; 
  bool _cwc_1569 { , NN } ; 
  bool[4] _cwc_1568 { , NN } ; 
  int[+] _cwc_1567 { , NN } ; 
  bool[+] _cwc_1566 { , NN } ; 
  int _cwc_1565 { , NN } ; 
  bool[+] _cwc_1564 { , NN } ; 
  int _cwc_1563 { , NN } ; 
  bool _cwc_1562 { , NN } ; 
  int _cwc_1561 { , NN } ; 
  int _cwc_1560 { , NN } ; 
  bool _cwc_1559 { , NN } ; 
  int _cwc_1558 { , NN } ; 
  bool _cwc_1557 { , NN } ; 
  int _cwc_1556 { , NN } ; 
  bool[.,.,.] _cwc_1555 { , NN } ; 
  int _cwc_1554 { , NN } ; 
  bool _cwc_1553 { , NN } ; 
  int _cwc_1552 { , NN } ; 
  int _cwc_1551 { , NN } ; 
  bool _cwc_1550 { , NN } ; 
  int _cwc_1549 { , NN } ; 
  bool[.,.,.] _cwc_1548 { , NN } ; 
  int _cwc_1547 { , NN } ; 
  bool[+] _cwc_1546 { , NN } ; 
  int _cwc_1545 { , NN } ; 
  bool _cwc_1544 { , NN } ; 
  int _cwc_1543 { , NN } ; 
  bool[+] _cwc_1542 { , NN } ; 
  int _cwc_1541 { , NN } ; 
  bool _cwc_1540 { , NN } ; 
  int _cwc_1539 { , NN } ; 
  int _cwc_1538 { , NN } ; 
  bool _cwc_1537 { , NN } ; 
  int _cwc_1536 { , NN } ; 
  bool[+] _cwc_1535 { , NN } ; 
  int _cwc_1534 { , NN } ; 
  bool[+] _cwc_1533 { , NN } ; 

  _cwc_1563 = _dim_A_( x); 
  _cwc_1584 = 0; 
  _cwc_1585 = _eq_SxS_( _cwc_1563, _cwc_1584); 
  if (_cwc_1585) 
  { 
    _cwc_1580 = _dim_A_( y); 
    _cwc_1582 = 0; 
    _cwc_1583 = _eq_SxS_( _cwc_1580, _cwc_1582); 
    if (_cwc_1583) 
    { 
      _cwc_1581 = UTDScalarB::ltBBB( x, y) ; 
      _cwc_1532 = _cwc_1581; 
    }
    else
    { 
      _cwc_1577 = _dim_A_( y); 
      _cwc_1578 = 0; 
      _cwc_1579 = _gt_SxS_( _cwc_1577, _cwc_1578); 
      if (_cwc_1579) 
      { 
        _cwc_1565 = _dim_A_( y); 
        _cwc_1575 = 1; 
        _cwc_1576 = _eq_SxS_( _cwc_1565, _cwc_1575); 
        if (_cwc_1576) 
        { 
          _cwc_1567 = _shape_A_( y); 
          _cwc_1569 = true; 
          _cwc_1572 = 4; 
          _cwc_1570 = [ 0 ]; 
          _cwc_1571 = _sel_VxA_( _cwc_1570, _cwc_1567); 
          _cwc_1573 = _eq_SxS_( _cwc_1571, _cwc_1572); 
          _cwc_1574 = _and_SxS_( _cwc_1573, _cwc_1569); 
          if (_cwc_1574) 
          { 
            _cwc_1568 = UTDScalarB::ltBBB( x, y) ; 
            _cwc_1532 = _cwc_1568; 
          }
          else
          { 
            _cwc_1566 = UTDScalarB::ltBBB( x, y) ; 
            _cwc_1532 = _cwc_1566; 
          }
        }
        else
        { 
          _cwc_1564 = UTDScalarB::ltBBB( x, y) ; 
          _cwc_1532 = _cwc_1564; 
        }
      }
      else
      { 
        _cwc_1532 = _dispatch_error_( 1, bool[*], "UTDScalarB::ltBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_1560 = _dim_A_( x); 
    _cwc_1561 = 0; 
    _cwc_1562 = _gt_SxS_( _cwc_1560, _cwc_1561); 
    if (_cwc_1562) 
    { 
      _cwc_1545 = _dim_A_( x); 
      _cwc_1558 = 3; 
      _cwc_1559 = _eq_SxS_( _cwc_1545, _cwc_1558); 
      if (_cwc_1559) 
      { 
        _cwc_1554 = _dim_A_( y); 
        _cwc_1556 = 0; 
        _cwc_1557 = _eq_SxS_( _cwc_1554, _cwc_1556); 
        if (_cwc_1557) 
        { 
          _cwc_1555 = UTDScalarB::ltBBB( x, y) ; 
          _cwc_1532 = _cwc_1555; 
        }
        else
        { 
          _cwc_1551 = _dim_A_( y); 
          _cwc_1552 = 0; 
          _cwc_1553 = _gt_SxS_( _cwc_1551, _cwc_1552); 
          if (_cwc_1553) 
          { 
            _cwc_1547 = _dim_A_( y); 
            _cwc_1549 = 3; 
            _cwc_1550 = _eq_SxS_( _cwc_1547, _cwc_1549); 
            if (_cwc_1550) 
            { 
              _cwc_1548 = UTDScalarB::ltBBB( x, y) ; 
              _cwc_1532 = _cwc_1548; 
            }
            else
            { 
              _cwc_1546 = UTDScalarB::ltBBB( x, y) ; 
              _cwc_1532 = _cwc_1546; 
            }
          }
          else
          { 
            _cwc_1532 = _dispatch_error_( 1, bool[*], "UTDScalarB::ltBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_1541 = _dim_A_( y); 
        _cwc_1543 = 0; 
        _cwc_1544 = _eq_SxS_( _cwc_1541, _cwc_1543); 
        if (_cwc_1544) 
        { 
          _cwc_1542 = UTDScalarB::ltBBB( x, y) ; 
          _cwc_1532 = _cwc_1542; 
        }
        else
        { 
          _cwc_1538 = _dim_A_( y); 
          _cwc_1539 = 0; 
          _cwc_1540 = _gt_SxS_( _cwc_1538, _cwc_1539); 
          if (_cwc_1540) 
          { 
            _cwc_1534 = _dim_A_( y); 
            _cwc_1536 = 3; 
            _cwc_1537 = _eq_SxS_( _cwc_1534, _cwc_1536); 
            if (_cwc_1537) 
            { 
              _cwc_1535 = UTDScalarB::ltBBB( x, y) ; 
              _cwc_1532 = _cwc_1535; 
            }
            else
            { 
              _cwc_1533 = UTDScalarB::ltBBB( x, y) ; 
              _cwc_1532 = _cwc_1533; 
            }
          }
          else
          { 
            _cwc_1532 = _dispatch_error_( 1, bool[*], "UTDScalarB::ltBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_1532 = _dispatch_error_( 1, bool[*], "UTDScalarB::ltBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_1532); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::modarray(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::modarray( int[*] array { ,NN } , int[*] v { ,NN } , int[*] val { ,NN } )
/*
 *  modarray :: { int[*] -> { int[*] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])},
                              int -> { int[*] -> ( int[*]),
                                       int -> ( int[.])},
                              int[+] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])},
                              int[.] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])}},
                  int[+] -> { int[*] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int -> { int[*] -> ( int[.]),
                                       int -> ( int[.])},
                              int[+] -> { int[*] -> ( --),
                                          int -> ( --),
                                          int[+] -> ( --)},
                              int[.] -> { int[*] -> ( --),
                                          int -> ( --),
                                          int[+] -> ( --)}},
                  int[.] -> { int[*] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int -> { int[*] -> ( int[.]),
                                       int -> ( int[.])},
                              int[+] -> { int[*] -> ( --),
                                          int -> ( --),
                                          int[+] -> ( --)},
                              int[.] -> { int[*] -> ( --),
                                          int -> ( --),
                                          int[+] -> ( --)}}}
 *  dispatching to: ArrayBasics::modarray,
 *                  ArrayBasics::modarray,
 *                  ArrayBasics::modarray,
 *                  UTDScalarB:Array::modarray
 */
{ 
  int[*] _cwc_1586 { , NN } ; 
  bool _cwc_1627 { , NN } ; 
  int _cwc_1626 { , NN } ; 
  bool _cwc_1625 { , NN } ; 
  int _cwc_1624 { , NN } ; 
  bool _cwc_1623 { , NN } ; 
  int _cwc_1622 { , NN } ; 
  int[.] _cwc_1621 { , NN } ; 
  int _cwc_1620 { , NN } ; 
  int[*] _cwc_1619 { , NN } ; 
  int _cwc_1618 { , NN } ; 
  bool _cwc_1617 { , NN } ; 
  int _cwc_1616 { , NN } ; 
  bool _cwc_1615 { , NN } ; 
  int _cwc_1614 { , NN } ; 
  int[*] _cwc_1613 { , NN } ; 
  int _cwc_1612 { , NN } ; 
  bool _cwc_1611 { , NN } ; 
  int _cwc_1610 { , NN } ; 
  int _cwc_1609 { , NN } ; 
  int[+] _cwc_1608 { , NN } ; 
  int _cwc_1607 { , NN } ; 
  int _cwc_1606 { , NN } ; 
  bool _cwc_1605 { , NN } ; 
  int _cwc_1604 { , NN } ; 
  bool _cwc_1603 { , NN } ; 
  int _cwc_1602 { , NN } ; 
  int[*] _cwc_1601 { , NN } ; 
  int _cwc_1600 { , NN } ; 
  int[*] _cwc_1599 { , NN } ; 
  int _cwc_1598 { , NN } ; 
  bool _cwc_1597 { , NN } ; 
  int _cwc_1596 { , NN } ; 
  bool _cwc_1595 { , NN } ; 
  int _cwc_1594 { , NN } ; 
  int[*] _cwc_1593 { , NN } ; 
  int _cwc_1592 { , NN } ; 
  bool _cwc_1591 { , NN } ; 
  int _cwc_1590 { , NN } ; 
  int _cwc_1589 { , NN } ; 
  int[+] _cwc_1588 { , NN } ; 
  int _cwc_1587 { , NN } ; 

  _cwc_1606 = _dim_A_( array); 
  _cwc_1626 = 1; 
  _cwc_1627 = _eq_SxS_( _cwc_1606, _cwc_1626); 
  if (_cwc_1627) 
  { 
    _cwc_1618 = _dim_A_( v); 
    _cwc_1624 = 0; 
    _cwc_1625 = _eq_SxS_( _cwc_1618, _cwc_1624); 
    if (_cwc_1625) 
    { 
      _cwc_1620 = _dim_A_( val); 
      _cwc_1622 = 0; 
      _cwc_1623 = _eq_SxS_( _cwc_1620, _cwc_1622); 
      if (_cwc_1623) 
      { 
        _cwc_1621 = UTDScalarB:Array::modarray( array, v, val) ; 
        _cwc_1586 = _cwc_1621; 
      }
      else
      { 
        _cwc_1619 = ArrayBasics::modarray( array, v, val) ; 
        _cwc_1586 = _cwc_1619; 
      }
    }
    else
    { 
      _cwc_1607 = _dim_A_( v); 
      _cwc_1616 = 1; 
      _cwc_1617 = _eq_SxS_( _cwc_1607, _cwc_1616); 
      if (_cwc_1617) 
      { 
        _cwc_1612 = _dim_A_( val); 
        _cwc_1614 = 0; 
        _cwc_1615 = _eq_SxS_( _cwc_1612, _cwc_1614); 
        if (_cwc_1615) 
        { 
          _cwc_1613 = ArrayBasics::modarray( array, v, val) ; 
          _cwc_1586 = _cwc_1613; 
        }
        else
        { 
          _cwc_1609 = _dim_A_( val); 
          _cwc_1610 = 0; 
          _cwc_1611 = _gt_SxS_( _cwc_1609, _cwc_1610); 
          if (_cwc_1611) 
          { 
            _cwc_1608 = ArrayBasics::modarray( array, v, val) ; 
            _cwc_1586 = _cwc_1608; 
          }
          else
          { 
            _cwc_1586 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
          }
        }
      }
      else
      { 
        _cwc_1586 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
      }
    }
  }
  else
  { 
    _cwc_1598 = _dim_A_( v); 
    _cwc_1604 = 0; 
    _cwc_1605 = _eq_SxS_( _cwc_1598, _cwc_1604); 
    if (_cwc_1605) 
    { 
      _cwc_1600 = _dim_A_( val); 
      _cwc_1602 = 0; 
      _cwc_1603 = _eq_SxS_( _cwc_1600, _cwc_1602); 
      if (_cwc_1603) 
      { 
        _cwc_1601 = ArrayBasics::modarray( array, v, val) ; 
        _cwc_1586 = _cwc_1601; 
      }
      else
      { 
        _cwc_1599 = ArrayBasics::modarray( array, v, val) ; 
        _cwc_1586 = _cwc_1599; 
      }
    }
    else
    { 
      _cwc_1587 = _dim_A_( v); 
      _cwc_1596 = 1; 
      _cwc_1597 = _eq_SxS_( _cwc_1587, _cwc_1596); 
      if (_cwc_1597) 
      { 
        _cwc_1592 = _dim_A_( val); 
        _cwc_1594 = 0; 
        _cwc_1595 = _eq_SxS_( _cwc_1592, _cwc_1594); 
        if (_cwc_1595) 
        { 
          _cwc_1593 = ArrayBasics::modarray( array, v, val) ; 
          _cwc_1586 = _cwc_1593; 
        }
        else
        { 
          _cwc_1589 = _dim_A_( val); 
          _cwc_1590 = 0; 
          _cwc_1591 = _gt_SxS_( _cwc_1589, _cwc_1590); 
          if (_cwc_1591) 
          { 
            _cwc_1588 = ArrayBasics::modarray( array, v, val) ; 
            _cwc_1586 = _cwc_1588; 
          }
          else
          { 
            _cwc_1586 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
          }
        }
      }
      else
      { 
        _cwc_1586 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
      }
    }
  }
  return( _cwc_1586); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::reshape(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:Array::reshape( int[*] shp { ,NN } , bool[*] A { ,NN } )
/*
 *  reshape :: { int[*] -> { bool[*] -> ( bool[*]),
                             bool[+] -> ( bool[.])},
                 int[+] -> { bool[*] -> ( bool[*]),
                             bool[+] -> ( bool[.])},
                 int[.] -> { bool[*] -> ( bool[*]),
                             bool[+] -> ( bool[.])},
                 int[1] -> { bool[*] -> ( bool[.]),
                             bool[+] -> ( bool[.])}}
 *  dispatching to: ArrayBasics::reshape,
 *                  UTDScalarB:Array::reshape
 */
{ 
  bool[*] _cwc_1628 { , NN } ; 
  bool _cwc_1648 { , NN } ; 
  int _cwc_1647 { , NN } ; 
  bool _cwc_1646 { , NN } ; 
  bool _cwc_1645 { , NN } ; 
  int{1} _cwc_1644 { , NN } ; 
  int _cwc_1643 { , NN } ; 
  int[1]{0} _cwc_1642 { , NN } ; 
  bool _cwc_1641 { , NN } ; 
  bool _cwc_1640 { , NN } ; 
  int _cwc_1639 { , NN } ; 
  bool[*] _cwc_1638 { , NN } ; 
  int _cwc_1637 { , NN } ; 
  bool[.] _cwc_1636 { , NN } ; 
  int[+] _cwc_1635 { , NN } ; 
  bool _cwc_1634 { , NN } ; 
  int _cwc_1633 { , NN } ; 
  bool[*] _cwc_1632 { , NN } ; 
  int _cwc_1631 { , NN } ; 
  bool[*] _cwc_1630 { , NN } ; 
  int _cwc_1629 { , NN } ; 

  _cwc_1629 = _dim_A_( shp); 
  _cwc_1647 = 1; 
  _cwc_1648 = _eq_SxS_( _cwc_1629, _cwc_1647); 
  if (_cwc_1648) 
  { 
    _cwc_1635 = _shape_A_( shp); 
    _cwc_1641 = true; 
    _cwc_1644 = 1; 
    _cwc_1642 = [ 0 ]; 
    _cwc_1643 = _sel_VxA_( _cwc_1642, _cwc_1635); 
    _cwc_1645 = _eq_SxS_( _cwc_1643, _cwc_1644); 
    _cwc_1646 = _and_SxS_( _cwc_1645, _cwc_1641); 
    if (_cwc_1646) 
    { 
      _cwc_1637 = _dim_A_( A); 
      _cwc_1639 = 0; 
      _cwc_1640 = _gt_SxS_( _cwc_1637, _cwc_1639); 
      if (_cwc_1640) 
      { 
        _cwc_1636 = UTDScalarB:Array::reshape( shp, A) ; 
        _cwc_1628 = _cwc_1636; 
      }
      else
      { 
        _cwc_1638 = ArrayBasics::reshape( shp, A) ; 
        _cwc_1628 = _cwc_1638; 
      }
    }
    else
    { 
      _cwc_1631 = _dim_A_( A); 
      _cwc_1633 = 0; 
      _cwc_1634 = _gt_SxS_( _cwc_1631, _cwc_1633); 
      if (_cwc_1634) 
      { 
        _cwc_1630 = ArrayBasics::reshape( shp, A) ; 
        _cwc_1628 = _cwc_1630; 
      }
      else
      { 
        _cwc_1632 = ArrayBasics::reshape( shp, A) ; 
        _cwc_1628 = _cwc_1632; 
      }
    }
  }
  else
  { 
    _cwc_1628 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::reshape :: int[*] bool[*] -> bool[*] ", shp, A); 
  }
  return( _cwc_1628); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::LEXXB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[14] UTDScalarB::LEXXB()
/*
 *  LEXXB :: ( bool[14])
 *  dispatching to: UTDScalarB::LEXXB
 */
{ 
  bool[14] _cwc_1649 { , NN } ; 
  bool[14] _cwc_1650 { , NN } ; 

  _cwc_1650 = UTDScalarB::LEXXB() ; 
  _cwc_1649 = _cwc_1650; 
  return( _cwc_1649); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::jotdotleBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB::jotdotleBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  jotdotleBBB :: { bool[*] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[+] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[.] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[4] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])}}
 *  dispatching to: UTDScalarB::jotdotleBBB,
 *                  UTDScalarB::jotdotleBBB
 */
{ 
  bool[+] _cwc_1651 { , NN } ; 
  bool _cwc_1712 { , NN } ; 
  int _cwc_1711 { , NN } ; 
  int _cwc_1710 { , NN } ; 
  bool _cwc_1709 { , NN } ; 
  int _cwc_1708 { , NN } ; 
  bool _cwc_1707 { , NN } ; 
  bool _cwc_1706 { , NN } ; 
  int{4} _cwc_1705 { , NN } ; 
  int _cwc_1704 { , NN } ; 
  int[1]{0} _cwc_1703 { , NN } ; 
  bool _cwc_1702 { , NN } ; 
  bool _cwc_1701 { , NN } ; 
  int _cwc_1700 { , NN } ; 
  int _cwc_1699 { , NN } ; 
  bool _cwc_1698 { , NN } ; 
  int _cwc_1697 { , NN } ; 
  bool _cwc_1696 { , NN } ; 
  bool _cwc_1695 { , NN } ; 
  int{4} _cwc_1694 { , NN } ; 
  int _cwc_1693 { , NN } ; 
  int[1]{0} _cwc_1692 { , NN } ; 
  bool _cwc_1691 { , NN } ; 
  bool[4,4] _cwc_1690 { , NN } ; 
  int[+] _cwc_1689 { , NN } ; 
  bool[+] _cwc_1688 { , NN } ; 
  int _cwc_1687 { , NN } ; 
  bool[+] _cwc_1686 { , NN } ; 
  int[+] _cwc_1685 { , NN } ; 
  bool _cwc_1684 { , NN } ; 
  int _cwc_1683 { , NN } ; 
  int _cwc_1682 { , NN } ; 
  bool _cwc_1681 { , NN } ; 
  int _cwc_1680 { , NN } ; 
  bool _cwc_1679 { , NN } ; 
  bool _cwc_1678 { , NN } ; 
  int{4} _cwc_1677 { , NN } ; 
  int _cwc_1676 { , NN } ; 
  int[1]{0} _cwc_1675 { , NN } ; 
  bool _cwc_1674 { , NN } ; 
  bool[+] _cwc_1673 { , NN } ; 
  int[+] _cwc_1672 { , NN } ; 
  bool[+] _cwc_1671 { , NN } ; 
  int _cwc_1670 { , NN } ; 
  bool[+] _cwc_1669 { , NN } ; 
  int _cwc_1668 { , NN } ; 
  bool _cwc_1667 { , NN } ; 
  int _cwc_1666 { , NN } ; 
  int _cwc_1665 { , NN } ; 
  bool _cwc_1664 { , NN } ; 
  int _cwc_1663 { , NN } ; 
  bool _cwc_1662 { , NN } ; 
  bool _cwc_1661 { , NN } ; 
  int{4} _cwc_1660 { , NN } ; 
  int _cwc_1659 { , NN } ; 
  int[1]{0} _cwc_1658 { , NN } ; 
  bool _cwc_1657 { , NN } ; 
  bool[+] _cwc_1656 { , NN } ; 
  int[+] _cwc_1655 { , NN } ; 
  bool[+] _cwc_1654 { , NN } ; 
  int _cwc_1653 { , NN } ; 
  bool[+] _cwc_1652 { , NN } ; 

  _cwc_1710 = _dim_A_( x); 
  _cwc_1711 = 0; 
  _cwc_1712 = _gt_SxS_( _cwc_1710, _cwc_1711); 
  if (_cwc_1712) 
  { 
    _cwc_1668 = _dim_A_( x); 
    _cwc_1708 = 1; 
    _cwc_1709 = _eq_SxS_( _cwc_1668, _cwc_1708); 
    if (_cwc_1709) 
    { 
      _cwc_1685 = _shape_A_( x); 
      _cwc_1702 = true; 
      _cwc_1705 = 4; 
      _cwc_1703 = [ 0 ]; 
      _cwc_1704 = _sel_VxA_( _cwc_1703, _cwc_1685); 
      _cwc_1706 = _eq_SxS_( _cwc_1704, _cwc_1705); 
      _cwc_1707 = _and_SxS_( _cwc_1706, _cwc_1702); 
      if (_cwc_1707) 
      { 
        _cwc_1699 = _dim_A_( y); 
        _cwc_1700 = 0; 
        _cwc_1701 = _gt_SxS_( _cwc_1699, _cwc_1700); 
        if (_cwc_1701) 
        { 
          _cwc_1687 = _dim_A_( y); 
          _cwc_1697 = 1; 
          _cwc_1698 = _eq_SxS_( _cwc_1687, _cwc_1697); 
          if (_cwc_1698) 
          { 
            _cwc_1689 = _shape_A_( y); 
            _cwc_1691 = true; 
            _cwc_1694 = 4; 
            _cwc_1692 = [ 0 ]; 
            _cwc_1693 = _sel_VxA_( _cwc_1692, _cwc_1689); 
            _cwc_1695 = _eq_SxS_( _cwc_1693, _cwc_1694); 
            _cwc_1696 = _and_SxS_( _cwc_1695, _cwc_1691); 
            if (_cwc_1696) 
            { 
              _cwc_1690 = UTDScalarB::jotdotleBBB( x, y) ; 
              _cwc_1651 = _cwc_1690; 
            }
            else
            { 
              _cwc_1688 = UTDScalarB::jotdotleBBB( x, y) ; 
              _cwc_1651 = _cwc_1688; 
            }
          }
          else
          { 
            _cwc_1686 = UTDScalarB::jotdotleBBB( x, y) ; 
            _cwc_1651 = _cwc_1686; 
          }
        }
        else
        { 
          _cwc_1651 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotleBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
      else
      { 
        _cwc_1682 = _dim_A_( y); 
        _cwc_1683 = 0; 
        _cwc_1684 = _gt_SxS_( _cwc_1682, _cwc_1683); 
        if (_cwc_1684) 
        { 
          _cwc_1670 = _dim_A_( y); 
          _cwc_1680 = 1; 
          _cwc_1681 = _eq_SxS_( _cwc_1670, _cwc_1680); 
          if (_cwc_1681) 
          { 
            _cwc_1672 = _shape_A_( y); 
            _cwc_1674 = true; 
            _cwc_1677 = 4; 
            _cwc_1675 = [ 0 ]; 
            _cwc_1676 = _sel_VxA_( _cwc_1675, _cwc_1672); 
            _cwc_1678 = _eq_SxS_( _cwc_1676, _cwc_1677); 
            _cwc_1679 = _and_SxS_( _cwc_1678, _cwc_1674); 
            if (_cwc_1679) 
            { 
              _cwc_1673 = UTDScalarB::jotdotleBBB( x, y) ; 
              _cwc_1651 = _cwc_1673; 
            }
            else
            { 
              _cwc_1671 = UTDScalarB::jotdotleBBB( x, y) ; 
              _cwc_1651 = _cwc_1671; 
            }
          }
          else
          { 
            _cwc_1669 = UTDScalarB::jotdotleBBB( x, y) ; 
            _cwc_1651 = _cwc_1669; 
          }
        }
        else
        { 
          _cwc_1651 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotleBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_1665 = _dim_A_( y); 
      _cwc_1666 = 0; 
      _cwc_1667 = _gt_SxS_( _cwc_1665, _cwc_1666); 
      if (_cwc_1667) 
      { 
        _cwc_1653 = _dim_A_( y); 
        _cwc_1663 = 1; 
        _cwc_1664 = _eq_SxS_( _cwc_1653, _cwc_1663); 
        if (_cwc_1664) 
        { 
          _cwc_1655 = _shape_A_( y); 
          _cwc_1657 = true; 
          _cwc_1660 = 4; 
          _cwc_1658 = [ 0 ]; 
          _cwc_1659 = _sel_VxA_( _cwc_1658, _cwc_1655); 
          _cwc_1661 = _eq_SxS_( _cwc_1659, _cwc_1660); 
          _cwc_1662 = _and_SxS_( _cwc_1661, _cwc_1657); 
          if (_cwc_1662) 
          { 
            _cwc_1656 = UTDScalarB::jotdotleBBB( x, y) ; 
            _cwc_1651 = _cwc_1656; 
          }
          else
          { 
            _cwc_1654 = UTDScalarB::jotdotleBBB( x, y) ; 
            _cwc_1651 = _cwc_1654; 
          }
        }
        else
        { 
          _cwc_1652 = UTDScalarB::jotdotleBBB( x, y) ; 
          _cwc_1651 = _cwc_1652; 
        }
      }
      else
      { 
        _cwc_1651 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotleBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_1651 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotleBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
  }
  return( _cwc_1651); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::notXBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::notXBB( bool[*] y { ,NN } )
/*
 *  notXBB :: { bool[*] -> ( bool[*]),
                bool -> ( bool),
                bool[+] -> ( bool[+]),
                bool[.,.,.] -> ( bool[.,.,.]),
                bool[.,.] -> ( bool[.,.])}
 *  dispatching to: UTDScalarB::notXBB,
 *                  UTDScalarB::notXBB,
 *                  UTDScalarB::notXBB,
 *                  UTDScalarB::notXBB
 */
{ 
  bool[*] _cwc_1713 { , NN } ; 
  bool _cwc_1728 { , NN } ; 
  int _cwc_1727 { , NN } ; 
  bool _cwc_1726 { , NN } ; 
  int _cwc_1725 { , NN } ; 
  bool _cwc_1724 { , NN } ; 
  int _cwc_1723 { , NN } ; 
  int _cwc_1722 { , NN } ; 
  bool _cwc_1721 { , NN } ; 
  int _cwc_1720 { , NN } ; 
  bool[.,.,.] _cwc_1719 { , NN } ; 
  bool _cwc_1718 { , NN } ; 
  int _cwc_1717 { , NN } ; 
  bool[.,.] _cwc_1716 { , NN } ; 
  int _cwc_1715 { , NN } ; 
  bool[+] _cwc_1714 { , NN } ; 

  _cwc_1725 = _dim_A_( y); 
  _cwc_1727 = 0; 
  _cwc_1728 = _eq_SxS_( _cwc_1725, _cwc_1727); 
  if (_cwc_1728) 
  { 
    _cwc_1726 = UTDScalarB::notXBB( y) ; 
    _cwc_1713 = _cwc_1726; 
  }
  else
  { 
    _cwc_1722 = _dim_A_( y); 
    _cwc_1723 = 0; 
    _cwc_1724 = _gt_SxS_( _cwc_1722, _cwc_1723); 
    if (_cwc_1724) 
    { 
      _cwc_1715 = _dim_A_( y); 
      _cwc_1720 = 3; 
      _cwc_1721 = _eq_SxS_( _cwc_1715, _cwc_1720); 
      if (_cwc_1721) 
      { 
        _cwc_1719 = UTDScalarB::notXBB( y) ; 
        _cwc_1713 = _cwc_1719; 
      }
      else
      { 
        _cwc_1717 = 2; 
        _cwc_1718 = _eq_SxS_( _cwc_1715, _cwc_1717); 
        if (_cwc_1718) 
        { 
          _cwc_1716 = UTDScalarB::notXBB( y) ; 
          _cwc_1713 = _cwc_1716; 
        }
        else
        { 
          _cwc_1714 = UTDScalarB::notXBB( y) ; 
          _cwc_1713 = _cwc_1714; 
        }
      }
    }
    else
    { 
      _cwc_1713 = _dispatch_error_( 1, bool[*], "UTDScalarB::notXBB :: bool[*] -> bool[*] ", y); 
    }
  }
  return( _cwc_1713); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::prod(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int UTDScalarB:Array::prod( int[*] arr_a { ,NN } )
/*
 *  prod :: { int[*] -> ( int),
              int[+] -> ( int),
              int[.] -> ( int),
              int[1] -> ( int),
              int[0] -> ( int)}
 *  dispatching to: ArrayTransform::prod,
 *                  UTDScalarB:Array::prod,
 *                  UTDScalarB:Array::prod,
 *                  UTDScalarB:Array::prod
 */
{ 
  int _cwc_1729 { , NN } ; 
  bool _cwc_1749 { , NN } ; 
  int _cwc_1748 { , NN } ; 
  bool _cwc_1747 { , NN } ; 
  bool _cwc_1746 { , NN } ; 
  int{1} _cwc_1745 { , NN } ; 
  int _cwc_1744 { , NN } ; 
  int[1]{0} _cwc_1743 { , NN } ; 
  bool _cwc_1742 { , NN } ; 
  int _cwc_1741 { , NN } ; 
  bool _cwc_1740 { , NN } ; 
  bool _cwc_1739 { , NN } ; 
  int{0} _cwc_1738 { , NN } ; 
  int _cwc_1737 { , NN } ; 
  int[1]{0} _cwc_1736 { , NN } ; 
  bool _cwc_1735 { , NN } ; 
  int _cwc_1734 { , NN } ; 
  int[+] _cwc_1733 { , NN } ; 
  int _cwc_1732 { , NN } ; 
  int _cwc_1731 { , NN } ; 
  int _cwc_1730 { , NN } ; 

  _cwc_1731 = _dim_A_( arr_a); 
  _cwc_1748 = 1; 
  _cwc_1749 = _eq_SxS_( _cwc_1731, _cwc_1748); 
  if (_cwc_1749) 
  { 
    _cwc_1733 = _shape_A_( arr_a); 
    _cwc_1742 = true; 
    _cwc_1745 = 1; 
    _cwc_1743 = [ 0 ]; 
    _cwc_1744 = _sel_VxA_( _cwc_1743, _cwc_1733); 
    _cwc_1746 = _eq_SxS_( _cwc_1744, _cwc_1745); 
    _cwc_1747 = _and_SxS_( _cwc_1746, _cwc_1742); 
    if (_cwc_1747) 
    { 
      _cwc_1741 = UTDScalarB:Array::prod( arr_a) ; 
      _cwc_1729 = _cwc_1741; 
    }
    else
    { 
      _cwc_1735 = true; 
      _cwc_1738 = 0; 
      _cwc_1736 = [ 0 ]; 
      _cwc_1737 = _sel_VxA_( _cwc_1736, _cwc_1733); 
      _cwc_1739 = _eq_SxS_( _cwc_1737, _cwc_1738); 
      _cwc_1740 = _and_SxS_( _cwc_1739, _cwc_1735); 
      if (_cwc_1740) 
      { 
        _cwc_1734 = UTDScalarB:Array::prod( arr_a) ; 
        _cwc_1729 = _cwc_1734; 
      }
      else
      { 
        _cwc_1732 = UTDScalarB:Array::prod( arr_a) ; 
        _cwc_1729 = _cwc_1732; 
      }
    }
  }
  else
  { 
    _cwc_1730 = ArrayTransform::prod( arr_a) ; 
    _cwc_1729 = _cwc_1730; 
  }
  return( _cwc_1729); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::ORXXB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[14] UTDScalarB::ORXXB()
/*
 *  ORXXB :: ( bool[14])
 *  dispatching to: UTDScalarB::ORXXB
 */
{ 
  bool[14] _cwc_1750 { , NN } ; 
  bool[14] _cwc_1751 { , NN } ; 

  _cwc_1751 = UTDScalarB::ORXXB() ; 
  _cwc_1750 = _cwc_1751; 
  return( _cwc_1750); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::andslXBBQUICKSTOP(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool UTDScalarB::andslXBBQUICKSTOP( bool[*] y { ,NN } )
/*
 *  andslXBBQUICKSTOP :: { bool[*] -> ( bool),
                           bool[+] -> ( bool),
                           bool[.] -> ( bool)}
 *  dispatching to: UTDScalarB::andslXBBQUICKSTOP
 */
{ 
  bool _cwc_1752 { , NN } ; 
  bool _cwc_1756 { , NN } ; 
  int _cwc_1755 { , NN } ; 
  bool _cwc_1754 { , NN } ; 
  int _cwc_1753 { , NN } ; 

  _cwc_1753 = _dim_A_( y); 
  _cwc_1755 = 1; 
  _cwc_1756 = _eq_SxS_( _cwc_1753, _cwc_1755); 
  if (_cwc_1756) 
  { 
    _cwc_1754 = UTDScalarB::andslXBBQUICKSTOP( y) ; 
    _cwc_1752 = _cwc_1754; 
  }
  else
  { 
    _cwc_1752 = _dispatch_error_( 1, bool, "UTDScalarB::andslXBBQUICKSTOP :: bool[*] -> bool ", y); 
  }
  return( _cwc_1752); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::jotdotorBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB::jotdotorBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  jotdotorBBB :: { bool[*] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[+] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[.] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[4] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])}}
 *  dispatching to: UTDScalarB::jotdotorBBB,
 *                  UTDScalarB::jotdotorBBB
 */
{ 
  bool[+] _cwc_1757 { , NN } ; 
  bool _cwc_1818 { , NN } ; 
  int _cwc_1817 { , NN } ; 
  int _cwc_1816 { , NN } ; 
  bool _cwc_1815 { , NN } ; 
  int _cwc_1814 { , NN } ; 
  bool _cwc_1813 { , NN } ; 
  bool _cwc_1812 { , NN } ; 
  int{4} _cwc_1811 { , NN } ; 
  int _cwc_1810 { , NN } ; 
  int[1]{0} _cwc_1809 { , NN } ; 
  bool _cwc_1808 { , NN } ; 
  bool _cwc_1807 { , NN } ; 
  int _cwc_1806 { , NN } ; 
  int _cwc_1805 { , NN } ; 
  bool _cwc_1804 { , NN } ; 
  int _cwc_1803 { , NN } ; 
  bool _cwc_1802 { , NN } ; 
  bool _cwc_1801 { , NN } ; 
  int{4} _cwc_1800 { , NN } ; 
  int _cwc_1799 { , NN } ; 
  int[1]{0} _cwc_1798 { , NN } ; 
  bool _cwc_1797 { , NN } ; 
  bool[4,4] _cwc_1796 { , NN } ; 
  int[+] _cwc_1795 { , NN } ; 
  bool[+] _cwc_1794 { , NN } ; 
  int _cwc_1793 { , NN } ; 
  bool[+] _cwc_1792 { , NN } ; 
  int[+] _cwc_1791 { , NN } ; 
  bool _cwc_1790 { , NN } ; 
  int _cwc_1789 { , NN } ; 
  int _cwc_1788 { , NN } ; 
  bool _cwc_1787 { , NN } ; 
  int _cwc_1786 { , NN } ; 
  bool _cwc_1785 { , NN } ; 
  bool _cwc_1784 { , NN } ; 
  int{4} _cwc_1783 { , NN } ; 
  int _cwc_1782 { , NN } ; 
  int[1]{0} _cwc_1781 { , NN } ; 
  bool _cwc_1780 { , NN } ; 
  bool[+] _cwc_1779 { , NN } ; 
  int[+] _cwc_1778 { , NN } ; 
  bool[+] _cwc_1777 { , NN } ; 
  int _cwc_1776 { , NN } ; 
  bool[+] _cwc_1775 { , NN } ; 
  int _cwc_1774 { , NN } ; 
  bool _cwc_1773 { , NN } ; 
  int _cwc_1772 { , NN } ; 
  int _cwc_1771 { , NN } ; 
  bool _cwc_1770 { , NN } ; 
  int _cwc_1769 { , NN } ; 
  bool _cwc_1768 { , NN } ; 
  bool _cwc_1767 { , NN } ; 
  int{4} _cwc_1766 { , NN } ; 
  int _cwc_1765 { , NN } ; 
  int[1]{0} _cwc_1764 { , NN } ; 
  bool _cwc_1763 { , NN } ; 
  bool[+] _cwc_1762 { , NN } ; 
  int[+] _cwc_1761 { , NN } ; 
  bool[+] _cwc_1760 { , NN } ; 
  int _cwc_1759 { , NN } ; 
  bool[+] _cwc_1758 { , NN } ; 

  _cwc_1816 = _dim_A_( x); 
  _cwc_1817 = 0; 
  _cwc_1818 = _gt_SxS_( _cwc_1816, _cwc_1817); 
  if (_cwc_1818) 
  { 
    _cwc_1774 = _dim_A_( x); 
    _cwc_1814 = 1; 
    _cwc_1815 = _eq_SxS_( _cwc_1774, _cwc_1814); 
    if (_cwc_1815) 
    { 
      _cwc_1791 = _shape_A_( x); 
      _cwc_1808 = true; 
      _cwc_1811 = 4; 
      _cwc_1809 = [ 0 ]; 
      _cwc_1810 = _sel_VxA_( _cwc_1809, _cwc_1791); 
      _cwc_1812 = _eq_SxS_( _cwc_1810, _cwc_1811); 
      _cwc_1813 = _and_SxS_( _cwc_1812, _cwc_1808); 
      if (_cwc_1813) 
      { 
        _cwc_1805 = _dim_A_( y); 
        _cwc_1806 = 0; 
        _cwc_1807 = _gt_SxS_( _cwc_1805, _cwc_1806); 
        if (_cwc_1807) 
        { 
          _cwc_1793 = _dim_A_( y); 
          _cwc_1803 = 1; 
          _cwc_1804 = _eq_SxS_( _cwc_1793, _cwc_1803); 
          if (_cwc_1804) 
          { 
            _cwc_1795 = _shape_A_( y); 
            _cwc_1797 = true; 
            _cwc_1800 = 4; 
            _cwc_1798 = [ 0 ]; 
            _cwc_1799 = _sel_VxA_( _cwc_1798, _cwc_1795); 
            _cwc_1801 = _eq_SxS_( _cwc_1799, _cwc_1800); 
            _cwc_1802 = _and_SxS_( _cwc_1801, _cwc_1797); 
            if (_cwc_1802) 
            { 
              _cwc_1796 = UTDScalarB::jotdotorBBB( x, y) ; 
              _cwc_1757 = _cwc_1796; 
            }
            else
            { 
              _cwc_1794 = UTDScalarB::jotdotorBBB( x, y) ; 
              _cwc_1757 = _cwc_1794; 
            }
          }
          else
          { 
            _cwc_1792 = UTDScalarB::jotdotorBBB( x, y) ; 
            _cwc_1757 = _cwc_1792; 
          }
        }
        else
        { 
          _cwc_1757 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotorBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
      else
      { 
        _cwc_1788 = _dim_A_( y); 
        _cwc_1789 = 0; 
        _cwc_1790 = _gt_SxS_( _cwc_1788, _cwc_1789); 
        if (_cwc_1790) 
        { 
          _cwc_1776 = _dim_A_( y); 
          _cwc_1786 = 1; 
          _cwc_1787 = _eq_SxS_( _cwc_1776, _cwc_1786); 
          if (_cwc_1787) 
          { 
            _cwc_1778 = _shape_A_( y); 
            _cwc_1780 = true; 
            _cwc_1783 = 4; 
            _cwc_1781 = [ 0 ]; 
            _cwc_1782 = _sel_VxA_( _cwc_1781, _cwc_1778); 
            _cwc_1784 = _eq_SxS_( _cwc_1782, _cwc_1783); 
            _cwc_1785 = _and_SxS_( _cwc_1784, _cwc_1780); 
            if (_cwc_1785) 
            { 
              _cwc_1779 = UTDScalarB::jotdotorBBB( x, y) ; 
              _cwc_1757 = _cwc_1779; 
            }
            else
            { 
              _cwc_1777 = UTDScalarB::jotdotorBBB( x, y) ; 
              _cwc_1757 = _cwc_1777; 
            }
          }
          else
          { 
            _cwc_1775 = UTDScalarB::jotdotorBBB( x, y) ; 
            _cwc_1757 = _cwc_1775; 
          }
        }
        else
        { 
          _cwc_1757 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotorBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_1771 = _dim_A_( y); 
      _cwc_1772 = 0; 
      _cwc_1773 = _gt_SxS_( _cwc_1771, _cwc_1772); 
      if (_cwc_1773) 
      { 
        _cwc_1759 = _dim_A_( y); 
        _cwc_1769 = 1; 
        _cwc_1770 = _eq_SxS_( _cwc_1759, _cwc_1769); 
        if (_cwc_1770) 
        { 
          _cwc_1761 = _shape_A_( y); 
          _cwc_1763 = true; 
          _cwc_1766 = 4; 
          _cwc_1764 = [ 0 ]; 
          _cwc_1765 = _sel_VxA_( _cwc_1764, _cwc_1761); 
          _cwc_1767 = _eq_SxS_( _cwc_1765, _cwc_1766); 
          _cwc_1768 = _and_SxS_( _cwc_1767, _cwc_1763); 
          if (_cwc_1768) 
          { 
            _cwc_1762 = UTDScalarB::jotdotorBBB( x, y) ; 
            _cwc_1757 = _cwc_1762; 
          }
          else
          { 
            _cwc_1760 = UTDScalarB::jotdotorBBB( x, y) ; 
            _cwc_1757 = _cwc_1760; 
          }
        }
        else
        { 
          _cwc_1758 = UTDScalarB::jotdotorBBB( x, y) ; 
          _cwc_1757 = _cwc_1758; 
        }
      }
      else
      { 
        _cwc_1757 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotorBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_1757 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotorBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
  }
  return( _cwc_1757); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::rhoXBI(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[.] UTDScalarB::rhoXBI( bool[*] y { ,NN } )
/*
 *  rhoXBI :: { bool[*] -> ( int[.]),
                bool[+] -> ( int[.]),
                bool[.,.,.] -> ( int[3])}
 *  dispatching to: UTDScalarB::rhoXBI,
 *                  UTDScalarB::rhoXBI
 */
{ 
  int[.] _cwc_1819 { , NN } ; 
  bool _cwc_1827 { , NN } ; 
  int _cwc_1826 { , NN } ; 
  int _cwc_1825 { , NN } ; 
  bool _cwc_1824 { , NN } ; 
  int _cwc_1823 { , NN } ; 
  int[3] _cwc_1822 { , NN } ; 
  int _cwc_1821 { , NN } ; 
  int[.] _cwc_1820 { , NN } ; 

  _cwc_1825 = _dim_A_( y); 
  _cwc_1826 = 0; 
  _cwc_1827 = _gt_SxS_( _cwc_1825, _cwc_1826); 
  if (_cwc_1827) 
  { 
    _cwc_1821 = _dim_A_( y); 
    _cwc_1823 = 3; 
    _cwc_1824 = _eq_SxS_( _cwc_1821, _cwc_1823); 
    if (_cwc_1824) 
    { 
      _cwc_1822 = UTDScalarB::rhoXBI( y) ; 
      _cwc_1819 = _cwc_1822; 
    }
    else
    { 
      _cwc_1820 = UTDScalarB::rhoXBI( y) ; 
      _cwc_1819 = _cwc_1820; 
    }
  }
  else
  { 
    _cwc_1819 = _dispatch_error_( 1, int[.], "UTDScalarB::rhoXBI :: bool[*] -> int[.] ", y); 
  }
  return( _cwc_1819); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::andBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::andBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  andBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                             bool -> ( bool[*]),
                             bool[+] -> ( bool[+]),
                             bool[.] -> ( bool[4]),
                             bool[4] -> ( bool[4]),
                             bool[.,.,.] -> ( bool[.,.,.])},
                bool -> { bool[*] -> ( bool[*]),
                          bool -> ( bool),
                          bool[+] -> ( bool[+]),
                          bool[.] -> ( bool[4]),
                          bool[4] -> ( bool[4])},
                bool[+] -> { bool[*] -> ( bool[+]),
                             bool -> ( bool[+]),
                             bool[+] -> ( bool[+]),
                             bool[.,.,.] -> ( bool[.,.,.])},
                bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                 bool -> ( bool[.,.,.]),
                                 bool[+] -> ( bool[.,.,.]),
                                 bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::andBBB,
 *                  UTDScalarB::andBBB,
 *                  UTDScalarB::andBBB,
 *                  UTDScalarB::andBBB,
 *                  UTDScalarB::andBBB,
 *                  UTDScalarB::andBBB,
 *                  UTDScalarB::andBBB
 */
{ 
  bool[*] _cwc_1828 { , NN } ; 
  bool _cwc_1881 { , NN } ; 
  int _cwc_1880 { , NN } ; 
  bool _cwc_1879 { , NN } ; 
  int _cwc_1878 { , NN } ; 
  bool _cwc_1877 { , NN } ; 
  int _cwc_1876 { , NN } ; 
  bool _cwc_1875 { , NN } ; 
  int _cwc_1874 { , NN } ; 
  int _cwc_1873 { , NN } ; 
  bool _cwc_1872 { , NN } ; 
  int _cwc_1871 { , NN } ; 
  bool _cwc_1870 { , NN } ; 
  bool _cwc_1869 { , NN } ; 
  int{4} _cwc_1868 { , NN } ; 
  int _cwc_1867 { , NN } ; 
  int[1]{0} _cwc_1866 { , NN } ; 
  bool _cwc_1865 { , NN } ; 
  bool[4] _cwc_1864 { , NN } ; 
  int[+] _cwc_1863 { , NN } ; 
  bool[+] _cwc_1862 { , NN } ; 
  int _cwc_1861 { , NN } ; 
  bool[+] _cwc_1860 { , NN } ; 
  int _cwc_1859 { , NN } ; 
  bool _cwc_1858 { , NN } ; 
  int _cwc_1857 { , NN } ; 
  int _cwc_1856 { , NN } ; 
  bool _cwc_1855 { , NN } ; 
  int _cwc_1854 { , NN } ; 
  bool _cwc_1853 { , NN } ; 
  int _cwc_1852 { , NN } ; 
  bool[.,.,.] _cwc_1851 { , NN } ; 
  int _cwc_1850 { , NN } ; 
  bool _cwc_1849 { , NN } ; 
  int _cwc_1848 { , NN } ; 
  int _cwc_1847 { , NN } ; 
  bool _cwc_1846 { , NN } ; 
  int _cwc_1845 { , NN } ; 
  bool[.,.,.] _cwc_1844 { , NN } ; 
  int _cwc_1843 { , NN } ; 
  bool[+] _cwc_1842 { , NN } ; 
  int _cwc_1841 { , NN } ; 
  bool _cwc_1840 { , NN } ; 
  int _cwc_1839 { , NN } ; 
  bool[+] _cwc_1838 { , NN } ; 
  int _cwc_1837 { , NN } ; 
  bool _cwc_1836 { , NN } ; 
  int _cwc_1835 { , NN } ; 
  int _cwc_1834 { , NN } ; 
  bool _cwc_1833 { , NN } ; 
  int _cwc_1832 { , NN } ; 
  bool[+] _cwc_1831 { , NN } ; 
  int _cwc_1830 { , NN } ; 
  bool[+] _cwc_1829 { , NN } ; 

  _cwc_1859 = _dim_A_( x); 
  _cwc_1880 = 0; 
  _cwc_1881 = _eq_SxS_( _cwc_1859, _cwc_1880); 
  if (_cwc_1881) 
  { 
    _cwc_1876 = _dim_A_( y); 
    _cwc_1878 = 0; 
    _cwc_1879 = _eq_SxS_( _cwc_1876, _cwc_1878); 
    if (_cwc_1879) 
    { 
      _cwc_1877 = UTDScalarB::andBBB( x, y) ; 
      _cwc_1828 = _cwc_1877; 
    }
    else
    { 
      _cwc_1873 = _dim_A_( y); 
      _cwc_1874 = 0; 
      _cwc_1875 = _gt_SxS_( _cwc_1873, _cwc_1874); 
      if (_cwc_1875) 
      { 
        _cwc_1861 = _dim_A_( y); 
        _cwc_1871 = 1; 
        _cwc_1872 = _eq_SxS_( _cwc_1861, _cwc_1871); 
        if (_cwc_1872) 
        { 
          _cwc_1863 = _shape_A_( y); 
          _cwc_1865 = true; 
          _cwc_1868 = 4; 
          _cwc_1866 = [ 0 ]; 
          _cwc_1867 = _sel_VxA_( _cwc_1866, _cwc_1863); 
          _cwc_1869 = _eq_SxS_( _cwc_1867, _cwc_1868); 
          _cwc_1870 = _and_SxS_( _cwc_1869, _cwc_1865); 
          if (_cwc_1870) 
          { 
            _cwc_1864 = UTDScalarB::andBBB( x, y) ; 
            _cwc_1828 = _cwc_1864; 
          }
          else
          { 
            _cwc_1862 = UTDScalarB::andBBB( x, y) ; 
            _cwc_1828 = _cwc_1862; 
          }
        }
        else
        { 
          _cwc_1860 = UTDScalarB::andBBB( x, y) ; 
          _cwc_1828 = _cwc_1860; 
        }
      }
      else
      { 
        _cwc_1828 = _dispatch_error_( 1, bool[*], "UTDScalarB::andBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_1856 = _dim_A_( x); 
    _cwc_1857 = 0; 
    _cwc_1858 = _gt_SxS_( _cwc_1856, _cwc_1857); 
    if (_cwc_1858) 
    { 
      _cwc_1841 = _dim_A_( x); 
      _cwc_1854 = 3; 
      _cwc_1855 = _eq_SxS_( _cwc_1841, _cwc_1854); 
      if (_cwc_1855) 
      { 
        _cwc_1850 = _dim_A_( y); 
        _cwc_1852 = 0; 
        _cwc_1853 = _eq_SxS_( _cwc_1850, _cwc_1852); 
        if (_cwc_1853) 
        { 
          _cwc_1851 = UTDScalarB::andBBB( x, y) ; 
          _cwc_1828 = _cwc_1851; 
        }
        else
        { 
          _cwc_1847 = _dim_A_( y); 
          _cwc_1848 = 0; 
          _cwc_1849 = _gt_SxS_( _cwc_1847, _cwc_1848); 
          if (_cwc_1849) 
          { 
            _cwc_1843 = _dim_A_( y); 
            _cwc_1845 = 3; 
            _cwc_1846 = _eq_SxS_( _cwc_1843, _cwc_1845); 
            if (_cwc_1846) 
            { 
              _cwc_1844 = UTDScalarB::andBBB( x, y) ; 
              _cwc_1828 = _cwc_1844; 
            }
            else
            { 
              _cwc_1842 = UTDScalarB::andBBB( x, y) ; 
              _cwc_1828 = _cwc_1842; 
            }
          }
          else
          { 
            _cwc_1828 = _dispatch_error_( 1, bool[*], "UTDScalarB::andBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_1837 = _dim_A_( y); 
        _cwc_1839 = 0; 
        _cwc_1840 = _eq_SxS_( _cwc_1837, _cwc_1839); 
        if (_cwc_1840) 
        { 
          _cwc_1838 = UTDScalarB::andBBB( x, y) ; 
          _cwc_1828 = _cwc_1838; 
        }
        else
        { 
          _cwc_1834 = _dim_A_( y); 
          _cwc_1835 = 0; 
          _cwc_1836 = _gt_SxS_( _cwc_1834, _cwc_1835); 
          if (_cwc_1836) 
          { 
            _cwc_1830 = _dim_A_( y); 
            _cwc_1832 = 3; 
            _cwc_1833 = _eq_SxS_( _cwc_1830, _cwc_1832); 
            if (_cwc_1833) 
            { 
              _cwc_1831 = UTDScalarB::andBBB( x, y) ; 
              _cwc_1828 = _cwc_1831; 
            }
            else
            { 
              _cwc_1829 = UTDScalarB::andBBB( x, y) ; 
              _cwc_1828 = _cwc_1829; 
            }
          }
          else
          { 
            _cwc_1828 = _dispatch_error_( 1, bool[*], "UTDScalarB::andBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_1828 = _dispatch_error_( 1, bool[*], "UTDScalarB::andBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_1828); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::LTXXB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[14] UTDScalarB::LTXXB()
/*
 *  LTXXB :: ( bool[14])
 *  dispatching to: UTDScalarB::LTXXB
 */
{ 
  bool[14] _cwc_1882 { , NN } ; 
  bool[14] _cwc_1883 { , NN } ; 

  _cwc_1883 = UTDScalarB::LTXXB() ; 
  _cwc_1882 = _cwc_1883; 
  return( _cwc_1882); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::ANDXXB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[14] UTDScalarB::ANDXXB()
/*
 *  ANDXXB :: ( bool[14])
 *  dispatching to: UTDScalarB::ANDXXB
 */
{ 
  bool[14] _cwc_1884 { , NN } ; 
  bool[14] _cwc_1885 { , NN } ; 

  _cwc_1885 = UTDScalarB::ANDXXB() ; 
  _cwc_1884 = _cwc_1885; 
  return( _cwc_1884); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::O2V(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[.] UTDScalarB::O2V( int[*] shp { ,NN } , int[*] offset { ,NN } )
/*
 *  O2V :: { int[*] -> { int[*] -> ( int[.]),
                         int -> ( int[.])},
             int[+] -> { int[*] -> ( int[.]),
                         int -> ( int[.])},
             int[.] -> { int[*] -> ( int[.]),
                         int -> ( int[.])},
             int[1] -> { int[*] -> ( int[.]),
                         int -> ( int[.])},
             int[0] -> { int[*] -> ( int[.]),
                         int -> ( int[.])}}
 *  dispatching to: UTDScalarB::O2V,
 *                  UTDScalarB::O2V,
 *                  UTDScalarB::O2V
 */
{ 
  int[.] _cwc_1886 { , NN } ; 
  bool _cwc_1914 { , NN } ; 
  int _cwc_1913 { , NN } ; 
  bool _cwc_1912 { , NN } ; 
  bool _cwc_1911 { , NN } ; 
  int{1} _cwc_1910 { , NN } ; 
  int _cwc_1909 { , NN } ; 
  int[1]{0} _cwc_1908 { , NN } ; 
  bool _cwc_1907 { , NN } ; 
  bool _cwc_1906 { , NN } ; 
  int _cwc_1905 { , NN } ; 
  int[.] _cwc_1904 { , NN } ; 
  int _cwc_1903 { , NN } ; 
  bool _cwc_1902 { , NN } ; 
  bool _cwc_1901 { , NN } ; 
  int{0} _cwc_1900 { , NN } ; 
  int _cwc_1899 { , NN } ; 
  int[1]{0} _cwc_1898 { , NN } ; 
  bool _cwc_1897 { , NN } ; 
  bool _cwc_1896 { , NN } ; 
  int _cwc_1895 { , NN } ; 
  int[.] _cwc_1894 { , NN } ; 
  int _cwc_1893 { , NN } ; 
  int[+] _cwc_1892 { , NN } ; 
  bool _cwc_1891 { , NN } ; 
  int _cwc_1890 { , NN } ; 
  int[.] _cwc_1889 { , NN } ; 
  int _cwc_1888 { , NN } ; 
  int _cwc_1887 { , NN } ; 

  _cwc_1887 = _dim_A_( shp); 
  _cwc_1913 = 1; 
  _cwc_1914 = _eq_SxS_( _cwc_1887, _cwc_1913); 
  if (_cwc_1914) 
  { 
    _cwc_1892 = _shape_A_( shp); 
    _cwc_1907 = true; 
    _cwc_1910 = 1; 
    _cwc_1908 = [ 0 ]; 
    _cwc_1909 = _sel_VxA_( _cwc_1908, _cwc_1892); 
    _cwc_1911 = _eq_SxS_( _cwc_1909, _cwc_1910); 
    _cwc_1912 = _and_SxS_( _cwc_1911, _cwc_1907); 
    if (_cwc_1912) 
    { 
      _cwc_1903 = _dim_A_( offset); 
      _cwc_1905 = 0; 
      _cwc_1906 = _eq_SxS_( _cwc_1903, _cwc_1905); 
      if (_cwc_1906) 
      { 
        _cwc_1904 = UTDScalarB::O2V( shp, offset) ; 
        _cwc_1886 = _cwc_1904; 
      }
      else
      { 
        _cwc_1886 = _dispatch_error_( 1, int[.], "UTDScalarB::O2V :: int[*] int[*] -> int[.] ", shp, offset); 
      }
    }
    else
    { 
      _cwc_1897 = true; 
      _cwc_1900 = 0; 
      _cwc_1898 = [ 0 ]; 
      _cwc_1899 = _sel_VxA_( _cwc_1898, _cwc_1892); 
      _cwc_1901 = _eq_SxS_( _cwc_1899, _cwc_1900); 
      _cwc_1902 = _and_SxS_( _cwc_1901, _cwc_1897); 
      if (_cwc_1902) 
      { 
        _cwc_1893 = _dim_A_( offset); 
        _cwc_1895 = 0; 
        _cwc_1896 = _eq_SxS_( _cwc_1893, _cwc_1895); 
        if (_cwc_1896) 
        { 
          _cwc_1894 = UTDScalarB::O2V( shp, offset) ; 
          _cwc_1886 = _cwc_1894; 
        }
        else
        { 
          _cwc_1886 = _dispatch_error_( 1, int[.], "UTDScalarB::O2V :: int[*] int[*] -> int[.] ", shp, offset); 
        }
      }
      else
      { 
        _cwc_1888 = _dim_A_( offset); 
        _cwc_1890 = 0; 
        _cwc_1891 = _eq_SxS_( _cwc_1888, _cwc_1890); 
        if (_cwc_1891) 
        { 
          _cwc_1889 = UTDScalarB::O2V( shp, offset) ; 
          _cwc_1886 = _cwc_1889; 
        }
        else
        { 
          _cwc_1886 = _dispatch_error_( 1, int[.], "UTDScalarB::O2V :: int[*] int[*] -> int[.] ", shp, offset); 
        }
      }
    }
  }
  else
  { 
    _cwc_1886 = _dispatch_error_( 1, int[.], "UTDScalarB::O2V :: int[*] int[*] -> int[.] ", shp, offset); 
  }
  return( _cwc_1886); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::V2O(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int UTDScalarB::V2O( int[*] shp { ,NN } , int[*] iv { ,NN } )
/*
 *  V2O :: { int[*] -> { int[*] -> ( int),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int)},
             int[+] -> { int[*] -> ( int),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int)},
             int[.] -> { int[*] -> ( int),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int)},
             int[3] -> { int[*] -> ( int),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[3] -> ( int)},
             int[2] -> { int[*] -> ( int),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[3] -> ( --),
                         int[2] -> ( int)}}
 *  dispatching to: UTDScalarB::V2O,
 *                  UTDScalarB::V2O,
 *                  UTDScalarB::V2O
 */
{ 
  int _cwc_1915 { , NN } ; 
  bool _cwc_1981 { , NN } ; 
  int _cwc_1980 { , NN } ; 
  bool _cwc_1979 { , NN } ; 
  bool _cwc_1978 { , NN } ; 
  int{3} _cwc_1977 { , NN } ; 
  int _cwc_1976 { , NN } ; 
  int[1]{0} _cwc_1975 { , NN } ; 
  bool _cwc_1974 { , NN } ; 
  bool _cwc_1973 { , NN } ; 
  int _cwc_1972 { , NN } ; 
  bool _cwc_1971 { , NN } ; 
  bool _cwc_1970 { , NN } ; 
  int{3} _cwc_1969 { , NN } ; 
  int _cwc_1968 { , NN } ; 
  int[1]{0} _cwc_1967 { , NN } ; 
  bool _cwc_1966 { , NN } ; 
  int _cwc_1965 { , NN } ; 
  int[+] _cwc_1964 { , NN } ; 
  int _cwc_1963 { , NN } ; 
  int _cwc_1962 { , NN } ; 
  bool _cwc_1961 { , NN } ; 
  bool _cwc_1960 { , NN } ; 
  int{2} _cwc_1959 { , NN } ; 
  int _cwc_1958 { , NN } ; 
  int[1]{0} _cwc_1957 { , NN } ; 
  bool _cwc_1956 { , NN } ; 
  bool _cwc_1955 { , NN } ; 
  int _cwc_1954 { , NN } ; 
  bool _cwc_1953 { , NN } ; 
  bool _cwc_1952 { , NN } ; 
  int{3} _cwc_1951 { , NN } ; 
  int _cwc_1950 { , NN } ; 
  int[1]{0} _cwc_1949 { , NN } ; 
  bool _cwc_1948 { , NN } ; 
  int _cwc_1947 { , NN } ; 
  bool _cwc_1946 { , NN } ; 
  bool _cwc_1945 { , NN } ; 
  int{2} _cwc_1944 { , NN } ; 
  int _cwc_1943 { , NN } ; 
  int[1]{0} _cwc_1942 { , NN } ; 
  bool _cwc_1941 { , NN } ; 
  int _cwc_1940 { , NN } ; 
  int[+] _cwc_1939 { , NN } ; 
  int _cwc_1938 { , NN } ; 
  int _cwc_1937 { , NN } ; 
  int[+] _cwc_1936 { , NN } ; 
  bool _cwc_1935 { , NN } ; 
  int _cwc_1934 { , NN } ; 
  bool _cwc_1933 { , NN } ; 
  bool _cwc_1932 { , NN } ; 
  int{3} _cwc_1931 { , NN } ; 
  int _cwc_1930 { , NN } ; 
  int[1]{0} _cwc_1929 { , NN } ; 
  bool _cwc_1928 { , NN } ; 
  int _cwc_1927 { , NN } ; 
  bool _cwc_1926 { , NN } ; 
  bool _cwc_1925 { , NN } ; 
  int{2} _cwc_1924 { , NN } ; 
  int _cwc_1923 { , NN } ; 
  int[1]{0} _cwc_1922 { , NN } ; 
  bool _cwc_1921 { , NN } ; 
  int _cwc_1920 { , NN } ; 
  int[+] _cwc_1919 { , NN } ; 
  int _cwc_1918 { , NN } ; 
  int _cwc_1917 { , NN } ; 
  int _cwc_1916 { , NN } ; 

  _cwc_1916 = _dim_A_( shp); 
  _cwc_1980 = 1; 
  _cwc_1981 = _eq_SxS_( _cwc_1916, _cwc_1980); 
  if (_cwc_1981) 
  { 
    _cwc_1936 = _shape_A_( shp); 
    _cwc_1974 = true; 
    _cwc_1977 = 3; 
    _cwc_1975 = [ 0 ]; 
    _cwc_1976 = _sel_VxA_( _cwc_1975, _cwc_1936); 
    _cwc_1978 = _eq_SxS_( _cwc_1976, _cwc_1977); 
    _cwc_1979 = _and_SxS_( _cwc_1978, _cwc_1974); 
    if (_cwc_1979) 
    { 
      _cwc_1962 = _dim_A_( iv); 
      _cwc_1972 = 1; 
      _cwc_1973 = _eq_SxS_( _cwc_1962, _cwc_1972); 
      if (_cwc_1973) 
      { 
        _cwc_1964 = _shape_A_( iv); 
        _cwc_1966 = true; 
        _cwc_1969 = 3; 
        _cwc_1967 = [ 0 ]; 
        _cwc_1968 = _sel_VxA_( _cwc_1967, _cwc_1964); 
        _cwc_1970 = _eq_SxS_( _cwc_1968, _cwc_1969); 
        _cwc_1971 = _and_SxS_( _cwc_1970, _cwc_1966); 
        if (_cwc_1971) 
        { 
          _cwc_1965 = UTDScalarB::V2O( shp, iv) ; 
          _cwc_1915 = _cwc_1965; 
        }
        else
        { 
          _cwc_1963 = UTDScalarB::V2O( shp, iv) ; 
          _cwc_1915 = _cwc_1963; 
        }
      }
      else
      { 
        _cwc_1915 = _dispatch_error_( 1, int, "UTDScalarB::V2O :: int[*] int[*] -> int ", shp, iv); 
      }
    }
    else
    { 
      _cwc_1956 = true; 
      _cwc_1959 = 2; 
      _cwc_1957 = [ 0 ]; 
      _cwc_1958 = _sel_VxA_( _cwc_1957, _cwc_1936); 
      _cwc_1960 = _eq_SxS_( _cwc_1958, _cwc_1959); 
      _cwc_1961 = _and_SxS_( _cwc_1960, _cwc_1956); 
      if (_cwc_1961) 
      { 
        _cwc_1937 = _dim_A_( iv); 
        _cwc_1954 = 1; 
        _cwc_1955 = _eq_SxS_( _cwc_1937, _cwc_1954); 
        if (_cwc_1955) 
        { 
          _cwc_1939 = _shape_A_( iv); 
          _cwc_1948 = true; 
          _cwc_1951 = 3; 
          _cwc_1949 = [ 0 ]; 
          _cwc_1950 = _sel_VxA_( _cwc_1949, _cwc_1939); 
          _cwc_1952 = _eq_SxS_( _cwc_1950, _cwc_1951); 
          _cwc_1953 = _and_SxS_( _cwc_1952, _cwc_1948); 
          if (_cwc_1953) 
          { 
            _cwc_1947 = UTDScalarB::V2O( shp, iv) ; 
            _cwc_1915 = _cwc_1947; 
          }
          else
          { 
            _cwc_1941 = true; 
            _cwc_1944 = 2; 
            _cwc_1942 = [ 0 ]; 
            _cwc_1943 = _sel_VxA_( _cwc_1942, _cwc_1939); 
            _cwc_1945 = _eq_SxS_( _cwc_1943, _cwc_1944); 
            _cwc_1946 = _and_SxS_( _cwc_1945, _cwc_1941); 
            if (_cwc_1946) 
            { 
              _cwc_1940 = UTDScalarB::V2O( shp, iv) ; 
              _cwc_1915 = _cwc_1940; 
            }
            else
            { 
              _cwc_1938 = UTDScalarB::V2O( shp, iv) ; 
              _cwc_1915 = _cwc_1938; 
            }
          }
        }
        else
        { 
          _cwc_1915 = _dispatch_error_( 1, int, "UTDScalarB::V2O :: int[*] int[*] -> int ", shp, iv); 
        }
      }
      else
      { 
        _cwc_1917 = _dim_A_( iv); 
        _cwc_1934 = 1; 
        _cwc_1935 = _eq_SxS_( _cwc_1917, _cwc_1934); 
        if (_cwc_1935) 
        { 
          _cwc_1919 = _shape_A_( iv); 
          _cwc_1928 = true; 
          _cwc_1931 = 3; 
          _cwc_1929 = [ 0 ]; 
          _cwc_1930 = _sel_VxA_( _cwc_1929, _cwc_1919); 
          _cwc_1932 = _eq_SxS_( _cwc_1930, _cwc_1931); 
          _cwc_1933 = _and_SxS_( _cwc_1932, _cwc_1928); 
          if (_cwc_1933) 
          { 
            _cwc_1927 = UTDScalarB::V2O( shp, iv) ; 
            _cwc_1915 = _cwc_1927; 
          }
          else
          { 
            _cwc_1921 = true; 
            _cwc_1924 = 2; 
            _cwc_1922 = [ 0 ]; 
            _cwc_1923 = _sel_VxA_( _cwc_1922, _cwc_1919); 
            _cwc_1925 = _eq_SxS_( _cwc_1923, _cwc_1924); 
            _cwc_1926 = _and_SxS_( _cwc_1925, _cwc_1921); 
            if (_cwc_1926) 
            { 
              _cwc_1920 = UTDScalarB::V2O( shp, iv) ; 
              _cwc_1915 = _cwc_1920; 
            }
            else
            { 
              _cwc_1918 = UTDScalarB::V2O( shp, iv) ; 
              _cwc_1915 = _cwc_1918; 
            }
          }
        }
        else
        { 
          _cwc_1915 = _dispatch_error_( 1, int, "UTDScalarB::V2O :: int[*] int[*] -> int ", shp, iv); 
        }
      }
    }
  }
  else
  { 
    _cwc_1915 = _dispatch_error_( 1, int, "UTDScalarB::V2O :: int[*] int[*] -> int ", shp, iv); 
  }
  return( _cwc_1915); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::jotdotltBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB::jotdotltBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  jotdotltBBB :: { bool[*] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[+] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[.] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[4] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])}}
 *  dispatching to: UTDScalarB::jotdotltBBB,
 *                  UTDScalarB::jotdotltBBB
 */
{ 
  bool[+] _cwc_1982 { , NN } ; 
  bool _cwc_2043 { , NN } ; 
  int _cwc_2042 { , NN } ; 
  int _cwc_2041 { , NN } ; 
  bool _cwc_2040 { , NN } ; 
  int _cwc_2039 { , NN } ; 
  bool _cwc_2038 { , NN } ; 
  bool _cwc_2037 { , NN } ; 
  int{4} _cwc_2036 { , NN } ; 
  int _cwc_2035 { , NN } ; 
  int[1]{0} _cwc_2034 { , NN } ; 
  bool _cwc_2033 { , NN } ; 
  bool _cwc_2032 { , NN } ; 
  int _cwc_2031 { , NN } ; 
  int _cwc_2030 { , NN } ; 
  bool _cwc_2029 { , NN } ; 
  int _cwc_2028 { , NN } ; 
  bool _cwc_2027 { , NN } ; 
  bool _cwc_2026 { , NN } ; 
  int{4} _cwc_2025 { , NN } ; 
  int _cwc_2024 { , NN } ; 
  int[1]{0} _cwc_2023 { , NN } ; 
  bool _cwc_2022 { , NN } ; 
  bool[4,4] _cwc_2021 { , NN } ; 
  int[+] _cwc_2020 { , NN } ; 
  bool[+] _cwc_2019 { , NN } ; 
  int _cwc_2018 { , NN } ; 
  bool[+] _cwc_2017 { , NN } ; 
  int[+] _cwc_2016 { , NN } ; 
  bool _cwc_2015 { , NN } ; 
  int _cwc_2014 { , NN } ; 
  int _cwc_2013 { , NN } ; 
  bool _cwc_2012 { , NN } ; 
  int _cwc_2011 { , NN } ; 
  bool _cwc_2010 { , NN } ; 
  bool _cwc_2009 { , NN } ; 
  int{4} _cwc_2008 { , NN } ; 
  int _cwc_2007 { , NN } ; 
  int[1]{0} _cwc_2006 { , NN } ; 
  bool _cwc_2005 { , NN } ; 
  bool[+] _cwc_2004 { , NN } ; 
  int[+] _cwc_2003 { , NN } ; 
  bool[+] _cwc_2002 { , NN } ; 
  int _cwc_2001 { , NN } ; 
  bool[+] _cwc_2000 { , NN } ; 
  int _cwc_1999 { , NN } ; 
  bool _cwc_1998 { , NN } ; 
  int _cwc_1997 { , NN } ; 
  int _cwc_1996 { , NN } ; 
  bool _cwc_1995 { , NN } ; 
  int _cwc_1994 { , NN } ; 
  bool _cwc_1993 { , NN } ; 
  bool _cwc_1992 { , NN } ; 
  int{4} _cwc_1991 { , NN } ; 
  int _cwc_1990 { , NN } ; 
  int[1]{0} _cwc_1989 { , NN } ; 
  bool _cwc_1988 { , NN } ; 
  bool[+] _cwc_1987 { , NN } ; 
  int[+] _cwc_1986 { , NN } ; 
  bool[+] _cwc_1985 { , NN } ; 
  int _cwc_1984 { , NN } ; 
  bool[+] _cwc_1983 { , NN } ; 

  _cwc_2041 = _dim_A_( x); 
  _cwc_2042 = 0; 
  _cwc_2043 = _gt_SxS_( _cwc_2041, _cwc_2042); 
  if (_cwc_2043) 
  { 
    _cwc_1999 = _dim_A_( x); 
    _cwc_2039 = 1; 
    _cwc_2040 = _eq_SxS_( _cwc_1999, _cwc_2039); 
    if (_cwc_2040) 
    { 
      _cwc_2016 = _shape_A_( x); 
      _cwc_2033 = true; 
      _cwc_2036 = 4; 
      _cwc_2034 = [ 0 ]; 
      _cwc_2035 = _sel_VxA_( _cwc_2034, _cwc_2016); 
      _cwc_2037 = _eq_SxS_( _cwc_2035, _cwc_2036); 
      _cwc_2038 = _and_SxS_( _cwc_2037, _cwc_2033); 
      if (_cwc_2038) 
      { 
        _cwc_2030 = _dim_A_( y); 
        _cwc_2031 = 0; 
        _cwc_2032 = _gt_SxS_( _cwc_2030, _cwc_2031); 
        if (_cwc_2032) 
        { 
          _cwc_2018 = _dim_A_( y); 
          _cwc_2028 = 1; 
          _cwc_2029 = _eq_SxS_( _cwc_2018, _cwc_2028); 
          if (_cwc_2029) 
          { 
            _cwc_2020 = _shape_A_( y); 
            _cwc_2022 = true; 
            _cwc_2025 = 4; 
            _cwc_2023 = [ 0 ]; 
            _cwc_2024 = _sel_VxA_( _cwc_2023, _cwc_2020); 
            _cwc_2026 = _eq_SxS_( _cwc_2024, _cwc_2025); 
            _cwc_2027 = _and_SxS_( _cwc_2026, _cwc_2022); 
            if (_cwc_2027) 
            { 
              _cwc_2021 = UTDScalarB::jotdotltBBB( x, y) ; 
              _cwc_1982 = _cwc_2021; 
            }
            else
            { 
              _cwc_2019 = UTDScalarB::jotdotltBBB( x, y) ; 
              _cwc_1982 = _cwc_2019; 
            }
          }
          else
          { 
            _cwc_2017 = UTDScalarB::jotdotltBBB( x, y) ; 
            _cwc_1982 = _cwc_2017; 
          }
        }
        else
        { 
          _cwc_1982 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotltBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
      else
      { 
        _cwc_2013 = _dim_A_( y); 
        _cwc_2014 = 0; 
        _cwc_2015 = _gt_SxS_( _cwc_2013, _cwc_2014); 
        if (_cwc_2015) 
        { 
          _cwc_2001 = _dim_A_( y); 
          _cwc_2011 = 1; 
          _cwc_2012 = _eq_SxS_( _cwc_2001, _cwc_2011); 
          if (_cwc_2012) 
          { 
            _cwc_2003 = _shape_A_( y); 
            _cwc_2005 = true; 
            _cwc_2008 = 4; 
            _cwc_2006 = [ 0 ]; 
            _cwc_2007 = _sel_VxA_( _cwc_2006, _cwc_2003); 
            _cwc_2009 = _eq_SxS_( _cwc_2007, _cwc_2008); 
            _cwc_2010 = _and_SxS_( _cwc_2009, _cwc_2005); 
            if (_cwc_2010) 
            { 
              _cwc_2004 = UTDScalarB::jotdotltBBB( x, y) ; 
              _cwc_1982 = _cwc_2004; 
            }
            else
            { 
              _cwc_2002 = UTDScalarB::jotdotltBBB( x, y) ; 
              _cwc_1982 = _cwc_2002; 
            }
          }
          else
          { 
            _cwc_2000 = UTDScalarB::jotdotltBBB( x, y) ; 
            _cwc_1982 = _cwc_2000; 
          }
        }
        else
        { 
          _cwc_1982 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotltBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_1996 = _dim_A_( y); 
      _cwc_1997 = 0; 
      _cwc_1998 = _gt_SxS_( _cwc_1996, _cwc_1997); 
      if (_cwc_1998) 
      { 
        _cwc_1984 = _dim_A_( y); 
        _cwc_1994 = 1; 
        _cwc_1995 = _eq_SxS_( _cwc_1984, _cwc_1994); 
        if (_cwc_1995) 
        { 
          _cwc_1986 = _shape_A_( y); 
          _cwc_1988 = true; 
          _cwc_1991 = 4; 
          _cwc_1989 = [ 0 ]; 
          _cwc_1990 = _sel_VxA_( _cwc_1989, _cwc_1986); 
          _cwc_1992 = _eq_SxS_( _cwc_1990, _cwc_1991); 
          _cwc_1993 = _and_SxS_( _cwc_1992, _cwc_1988); 
          if (_cwc_1993) 
          { 
            _cwc_1987 = UTDScalarB::jotdotltBBB( x, y) ; 
            _cwc_1982 = _cwc_1987; 
          }
          else
          { 
            _cwc_1985 = UTDScalarB::jotdotltBBB( x, y) ; 
            _cwc_1982 = _cwc_1985; 
          }
        }
        else
        { 
          _cwc_1983 = UTDScalarB::jotdotltBBB( x, y) ; 
          _cwc_1982 = _cwc_1983; 
        }
      }
      else
      { 
        _cwc_1982 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotltBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_1982 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotltBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
  }
  return( _cwc_1982); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::geBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::geBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  geBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[*]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[4]),
                            bool[4] -> ( bool[4]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool -> { bool[*] -> ( bool[*]),
                         bool -> ( bool),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[4]),
                         bool[4] -> ( bool[4])},
               bool[+] -> { bool[*] -> ( bool[+]),
                            bool -> ( bool[+]),
                            bool[+] -> ( bool[+]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                bool -> ( bool[.,.,.]),
                                bool[+] -> ( bool[.,.,.]),
                                bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::geBBB,
 *                  UTDScalarB::geBBB,
 *                  UTDScalarB::geBBB,
 *                  UTDScalarB::geBBB,
 *                  UTDScalarB::geBBB,
 *                  UTDScalarB::geBBB,
 *                  UTDScalarB::geBBB
 */
{ 
  bool[*] _cwc_2044 { , NN } ; 
  bool _cwc_2097 { , NN } ; 
  int _cwc_2096 { , NN } ; 
  bool _cwc_2095 { , NN } ; 
  int _cwc_2094 { , NN } ; 
  bool _cwc_2093 { , NN } ; 
  int _cwc_2092 { , NN } ; 
  bool _cwc_2091 { , NN } ; 
  int _cwc_2090 { , NN } ; 
  int _cwc_2089 { , NN } ; 
  bool _cwc_2088 { , NN } ; 
  int _cwc_2087 { , NN } ; 
  bool _cwc_2086 { , NN } ; 
  bool _cwc_2085 { , NN } ; 
  int{4} _cwc_2084 { , NN } ; 
  int _cwc_2083 { , NN } ; 
  int[1]{0} _cwc_2082 { , NN } ; 
  bool _cwc_2081 { , NN } ; 
  bool[4] _cwc_2080 { , NN } ; 
  int[+] _cwc_2079 { , NN } ; 
  bool[+] _cwc_2078 { , NN } ; 
  int _cwc_2077 { , NN } ; 
  bool[+] _cwc_2076 { , NN } ; 
  int _cwc_2075 { , NN } ; 
  bool _cwc_2074 { , NN } ; 
  int _cwc_2073 { , NN } ; 
  int _cwc_2072 { , NN } ; 
  bool _cwc_2071 { , NN } ; 
  int _cwc_2070 { , NN } ; 
  bool _cwc_2069 { , NN } ; 
  int _cwc_2068 { , NN } ; 
  bool[.,.,.] _cwc_2067 { , NN } ; 
  int _cwc_2066 { , NN } ; 
  bool _cwc_2065 { , NN } ; 
  int _cwc_2064 { , NN } ; 
  int _cwc_2063 { , NN } ; 
  bool _cwc_2062 { , NN } ; 
  int _cwc_2061 { , NN } ; 
  bool[.,.,.] _cwc_2060 { , NN } ; 
  int _cwc_2059 { , NN } ; 
  bool[+] _cwc_2058 { , NN } ; 
  int _cwc_2057 { , NN } ; 
  bool _cwc_2056 { , NN } ; 
  int _cwc_2055 { , NN } ; 
  bool[+] _cwc_2054 { , NN } ; 
  int _cwc_2053 { , NN } ; 
  bool _cwc_2052 { , NN } ; 
  int _cwc_2051 { , NN } ; 
  int _cwc_2050 { , NN } ; 
  bool _cwc_2049 { , NN } ; 
  int _cwc_2048 { , NN } ; 
  bool[+] _cwc_2047 { , NN } ; 
  int _cwc_2046 { , NN } ; 
  bool[+] _cwc_2045 { , NN } ; 

  _cwc_2075 = _dim_A_( x); 
  _cwc_2096 = 0; 
  _cwc_2097 = _eq_SxS_( _cwc_2075, _cwc_2096); 
  if (_cwc_2097) 
  { 
    _cwc_2092 = _dim_A_( y); 
    _cwc_2094 = 0; 
    _cwc_2095 = _eq_SxS_( _cwc_2092, _cwc_2094); 
    if (_cwc_2095) 
    { 
      _cwc_2093 = UTDScalarB::geBBB( x, y) ; 
      _cwc_2044 = _cwc_2093; 
    }
    else
    { 
      _cwc_2089 = _dim_A_( y); 
      _cwc_2090 = 0; 
      _cwc_2091 = _gt_SxS_( _cwc_2089, _cwc_2090); 
      if (_cwc_2091) 
      { 
        _cwc_2077 = _dim_A_( y); 
        _cwc_2087 = 1; 
        _cwc_2088 = _eq_SxS_( _cwc_2077, _cwc_2087); 
        if (_cwc_2088) 
        { 
          _cwc_2079 = _shape_A_( y); 
          _cwc_2081 = true; 
          _cwc_2084 = 4; 
          _cwc_2082 = [ 0 ]; 
          _cwc_2083 = _sel_VxA_( _cwc_2082, _cwc_2079); 
          _cwc_2085 = _eq_SxS_( _cwc_2083, _cwc_2084); 
          _cwc_2086 = _and_SxS_( _cwc_2085, _cwc_2081); 
          if (_cwc_2086) 
          { 
            _cwc_2080 = UTDScalarB::geBBB( x, y) ; 
            _cwc_2044 = _cwc_2080; 
          }
          else
          { 
            _cwc_2078 = UTDScalarB::geBBB( x, y) ; 
            _cwc_2044 = _cwc_2078; 
          }
        }
        else
        { 
          _cwc_2076 = UTDScalarB::geBBB( x, y) ; 
          _cwc_2044 = _cwc_2076; 
        }
      }
      else
      { 
        _cwc_2044 = _dispatch_error_( 1, bool[*], "UTDScalarB::geBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_2072 = _dim_A_( x); 
    _cwc_2073 = 0; 
    _cwc_2074 = _gt_SxS_( _cwc_2072, _cwc_2073); 
    if (_cwc_2074) 
    { 
      _cwc_2057 = _dim_A_( x); 
      _cwc_2070 = 3; 
      _cwc_2071 = _eq_SxS_( _cwc_2057, _cwc_2070); 
      if (_cwc_2071) 
      { 
        _cwc_2066 = _dim_A_( y); 
        _cwc_2068 = 0; 
        _cwc_2069 = _eq_SxS_( _cwc_2066, _cwc_2068); 
        if (_cwc_2069) 
        { 
          _cwc_2067 = UTDScalarB::geBBB( x, y) ; 
          _cwc_2044 = _cwc_2067; 
        }
        else
        { 
          _cwc_2063 = _dim_A_( y); 
          _cwc_2064 = 0; 
          _cwc_2065 = _gt_SxS_( _cwc_2063, _cwc_2064); 
          if (_cwc_2065) 
          { 
            _cwc_2059 = _dim_A_( y); 
            _cwc_2061 = 3; 
            _cwc_2062 = _eq_SxS_( _cwc_2059, _cwc_2061); 
            if (_cwc_2062) 
            { 
              _cwc_2060 = UTDScalarB::geBBB( x, y) ; 
              _cwc_2044 = _cwc_2060; 
            }
            else
            { 
              _cwc_2058 = UTDScalarB::geBBB( x, y) ; 
              _cwc_2044 = _cwc_2058; 
            }
          }
          else
          { 
            _cwc_2044 = _dispatch_error_( 1, bool[*], "UTDScalarB::geBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_2053 = _dim_A_( y); 
        _cwc_2055 = 0; 
        _cwc_2056 = _eq_SxS_( _cwc_2053, _cwc_2055); 
        if (_cwc_2056) 
        { 
          _cwc_2054 = UTDScalarB::geBBB( x, y) ; 
          _cwc_2044 = _cwc_2054; 
        }
        else
        { 
          _cwc_2050 = _dim_A_( y); 
          _cwc_2051 = 0; 
          _cwc_2052 = _gt_SxS_( _cwc_2050, _cwc_2051); 
          if (_cwc_2052) 
          { 
            _cwc_2046 = _dim_A_( y); 
            _cwc_2048 = 3; 
            _cwc_2049 = _eq_SxS_( _cwc_2046, _cwc_2048); 
            if (_cwc_2049) 
            { 
              _cwc_2047 = UTDScalarB::geBBB( x, y) ; 
              _cwc_2044 = _cwc_2047; 
            }
            else
            { 
              _cwc_2045 = UTDScalarB::geBBB( x, y) ; 
              _cwc_2044 = _cwc_2045; 
            }
          }
          else
          { 
            _cwc_2044 = _dispatch_error_( 1, bool[*], "UTDScalarB::geBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_2044 = _dispatch_error_( 1, bool[*], "UTDScalarB::geBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_2044); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::toi(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::toi( bool[*] A { ,NN } )
/*
 *  toi :: { bool[*] -> ( int[*]),
             bool -> ( int),
             bool[+] -> ( int[+])}
 *  dispatching to: ArrayArith::toi,
 *                  Bool::toi,
 *                  ScalarArith::toi
 */
{ 
  int[*] _cwc_2098 { , NN } ; 
  bool _cwc_2106 { , NN } ; 
  int _cwc_2105 { , NN } ; 
  int _cwc_2104 { , NN } ; 
  int _cwc_2103 { , NN } ; 
  bool _cwc_2102 { , NN } ; 
  int _cwc_2101 { , NN } ; 
  int _cwc_2100 { , NN } ; 
  int[+] _cwc_2099 { , NN } ; 

  _cwc_2103 = _dim_A_( A); 
  _cwc_2105 = 0; 
  _cwc_2106 = _eq_SxS_( _cwc_2103, _cwc_2105); 
  if (_cwc_2106) 
  { 
    _cwc_2104 = ScalarArith::toi( A) ; 
    _cwc_2098 = _cwc_2104; 
  }
  else
  { 
    _cwc_2100 = _dim_A_( A); 
    _cwc_2101 = 0; 
    _cwc_2102 = _gt_SxS_( _cwc_2100, _cwc_2101); 
    if (_cwc_2102) 
    { 
      _cwc_2099 = ArrayArith::toi( A) ; 
      _cwc_2098 = _cwc_2099; 
    }
    else
    { 
      _cwc_2098 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::toi :: bool[*] -> int[*] ", A); 
    }
  }
  return( _cwc_2098); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::toi(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::toi( int[*] A { ,NN } )
/*
 *  toi :: { int[*] -> ( int[*]),
             int[+] -> ( int[+]),
             int[.] -> ( int[.]),
             int[3] -> ( int[3]),
             int[2] -> ( int[2])}
 *  dispatching to: ArrayArith::toi,
 *                  ArrayArith::toi,
 *                  UTDScalarB:Array::toi,
 *                  UTDScalarB:Array::toi,
 *                  UTDScalarB:Array::toi
 */
{ 
  int[*] _cwc_2107 { , NN } ; 
  bool _cwc_2131 { , NN } ; 
  int _cwc_2130 { , NN } ; 
  int[*] _cwc_2129 { , NN } ; 
  int _cwc_2128 { , NN } ; 
  bool _cwc_2127 { , NN } ; 
  int _cwc_2126 { , NN } ; 
  bool _cwc_2125 { , NN } ; 
  bool _cwc_2124 { , NN } ; 
  int{3} _cwc_2123 { , NN } ; 
  int _cwc_2122 { , NN } ; 
  int[1]{0} _cwc_2121 { , NN } ; 
  bool _cwc_2120 { , NN } ; 
  int[3] _cwc_2119 { , NN } ; 
  bool _cwc_2118 { , NN } ; 
  bool _cwc_2117 { , NN } ; 
  int{2} _cwc_2116 { , NN } ; 
  int _cwc_2115 { , NN } ; 
  int[1]{0} _cwc_2114 { , NN } ; 
  bool _cwc_2113 { , NN } ; 
  int[2] _cwc_2112 { , NN } ; 
  int[+] _cwc_2111 { , NN } ; 
  int[.] _cwc_2110 { , NN } ; 
  int _cwc_2109 { , NN } ; 
  int[+] _cwc_2108 { , NN } ; 

  _cwc_2128 = _dim_A_( A); 
  _cwc_2130 = 0; 
  _cwc_2131 = _gt_SxS_( _cwc_2128, _cwc_2130); 
  if (_cwc_2131) 
  { 
    _cwc_2109 = _dim_A_( A); 
    _cwc_2126 = 1; 
    _cwc_2127 = _eq_SxS_( _cwc_2109, _cwc_2126); 
    if (_cwc_2127) 
    { 
      _cwc_2111 = _shape_A_( A); 
      _cwc_2120 = true; 
      _cwc_2123 = 3; 
      _cwc_2121 = [ 0 ]; 
      _cwc_2122 = _sel_VxA_( _cwc_2121, _cwc_2111); 
      _cwc_2124 = _eq_SxS_( _cwc_2122, _cwc_2123); 
      _cwc_2125 = _and_SxS_( _cwc_2124, _cwc_2120); 
      if (_cwc_2125) 
      { 
        _cwc_2119 = UTDScalarB:Array::toi( A) ; 
        _cwc_2107 = _cwc_2119; 
      }
      else
      { 
        _cwc_2113 = true; 
        _cwc_2116 = 2; 
        _cwc_2114 = [ 0 ]; 
        _cwc_2115 = _sel_VxA_( _cwc_2114, _cwc_2111); 
        _cwc_2117 = _eq_SxS_( _cwc_2115, _cwc_2116); 
        _cwc_2118 = _and_SxS_( _cwc_2117, _cwc_2113); 
        if (_cwc_2118) 
        { 
          _cwc_2112 = UTDScalarB:Array::toi( A) ; 
          _cwc_2107 = _cwc_2112; 
        }
        else
        { 
          _cwc_2110 = UTDScalarB:Array::toi( A) ; 
          _cwc_2107 = _cwc_2110; 
        }
      }
    }
    else
    { 
      _cwc_2108 = ArrayArith::toi( A) ; 
      _cwc_2107 = _cwc_2108; 
    }
  }
  else
  { 
    _cwc_2129 = ArrayArith::toi( A) ; 
    _cwc_2107 = _cwc_2129; 
  }
  return( _cwc_2107); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::jotdotandBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB::jotdotandBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  jotdotandBBB :: { bool[*] -> { bool[*] -> ( bool[+]),
                                   bool[+] -> ( bool[+]),
                                   bool[.] -> ( bool[4,4]),
                                   bool[4] -> ( bool[4,4])},
                      bool[+] -> { bool[*] -> ( bool[+]),
                                   bool[+] -> ( bool[+]),
                                   bool[.] -> ( bool[4,4]),
                                   bool[4] -> ( bool[4,4])},
                      bool[.] -> { bool[*] -> ( bool[4,4]),
                                   bool[+] -> ( bool[4,4]),
                                   bool[.] -> ( bool[4,4]),
                                   bool[4] -> ( bool[4,4])},
                      bool[4] -> { bool[*] -> ( bool[4,4]),
                                   bool[+] -> ( bool[4,4]),
                                   bool[.] -> ( bool[4,4]),
                                   bool[4] -> ( bool[4,4])}}
 *  dispatching to: UTDScalarB::jotdotandBBB,
 *                  UTDScalarB::jotdotandBBB
 */
{ 
  bool[+] _cwc_2132 { , NN } ; 
  bool _cwc_2193 { , NN } ; 
  int _cwc_2192 { , NN } ; 
  int _cwc_2191 { , NN } ; 
  bool _cwc_2190 { , NN } ; 
  int _cwc_2189 { , NN } ; 
  bool _cwc_2188 { , NN } ; 
  bool _cwc_2187 { , NN } ; 
  int{4} _cwc_2186 { , NN } ; 
  int _cwc_2185 { , NN } ; 
  int[1]{0} _cwc_2184 { , NN } ; 
  bool _cwc_2183 { , NN } ; 
  bool _cwc_2182 { , NN } ; 
  int _cwc_2181 { , NN } ; 
  int _cwc_2180 { , NN } ; 
  bool _cwc_2179 { , NN } ; 
  int _cwc_2178 { , NN } ; 
  bool _cwc_2177 { , NN } ; 
  bool _cwc_2176 { , NN } ; 
  int{4} _cwc_2175 { , NN } ; 
  int _cwc_2174 { , NN } ; 
  int[1]{0} _cwc_2173 { , NN } ; 
  bool _cwc_2172 { , NN } ; 
  bool[4,4] _cwc_2171 { , NN } ; 
  int[+] _cwc_2170 { , NN } ; 
  bool[+] _cwc_2169 { , NN } ; 
  int _cwc_2168 { , NN } ; 
  bool[+] _cwc_2167 { , NN } ; 
  int[+] _cwc_2166 { , NN } ; 
  bool _cwc_2165 { , NN } ; 
  int _cwc_2164 { , NN } ; 
  int _cwc_2163 { , NN } ; 
  bool _cwc_2162 { , NN } ; 
  int _cwc_2161 { , NN } ; 
  bool _cwc_2160 { , NN } ; 
  bool _cwc_2159 { , NN } ; 
  int{4} _cwc_2158 { , NN } ; 
  int _cwc_2157 { , NN } ; 
  int[1]{0} _cwc_2156 { , NN } ; 
  bool _cwc_2155 { , NN } ; 
  bool[+] _cwc_2154 { , NN } ; 
  int[+] _cwc_2153 { , NN } ; 
  bool[+] _cwc_2152 { , NN } ; 
  int _cwc_2151 { , NN } ; 
  bool[+] _cwc_2150 { , NN } ; 
  int _cwc_2149 { , NN } ; 
  bool _cwc_2148 { , NN } ; 
  int _cwc_2147 { , NN } ; 
  int _cwc_2146 { , NN } ; 
  bool _cwc_2145 { , NN } ; 
  int _cwc_2144 { , NN } ; 
  bool _cwc_2143 { , NN } ; 
  bool _cwc_2142 { , NN } ; 
  int{4} _cwc_2141 { , NN } ; 
  int _cwc_2140 { , NN } ; 
  int[1]{0} _cwc_2139 { , NN } ; 
  bool _cwc_2138 { , NN } ; 
  bool[+] _cwc_2137 { , NN } ; 
  int[+] _cwc_2136 { , NN } ; 
  bool[+] _cwc_2135 { , NN } ; 
  int _cwc_2134 { , NN } ; 
  bool[+] _cwc_2133 { , NN } ; 

  _cwc_2191 = _dim_A_( x); 
  _cwc_2192 = 0; 
  _cwc_2193 = _gt_SxS_( _cwc_2191, _cwc_2192); 
  if (_cwc_2193) 
  { 
    _cwc_2149 = _dim_A_( x); 
    _cwc_2189 = 1; 
    _cwc_2190 = _eq_SxS_( _cwc_2149, _cwc_2189); 
    if (_cwc_2190) 
    { 
      _cwc_2166 = _shape_A_( x); 
      _cwc_2183 = true; 
      _cwc_2186 = 4; 
      _cwc_2184 = [ 0 ]; 
      _cwc_2185 = _sel_VxA_( _cwc_2184, _cwc_2166); 
      _cwc_2187 = _eq_SxS_( _cwc_2185, _cwc_2186); 
      _cwc_2188 = _and_SxS_( _cwc_2187, _cwc_2183); 
      if (_cwc_2188) 
      { 
        _cwc_2180 = _dim_A_( y); 
        _cwc_2181 = 0; 
        _cwc_2182 = _gt_SxS_( _cwc_2180, _cwc_2181); 
        if (_cwc_2182) 
        { 
          _cwc_2168 = _dim_A_( y); 
          _cwc_2178 = 1; 
          _cwc_2179 = _eq_SxS_( _cwc_2168, _cwc_2178); 
          if (_cwc_2179) 
          { 
            _cwc_2170 = _shape_A_( y); 
            _cwc_2172 = true; 
            _cwc_2175 = 4; 
            _cwc_2173 = [ 0 ]; 
            _cwc_2174 = _sel_VxA_( _cwc_2173, _cwc_2170); 
            _cwc_2176 = _eq_SxS_( _cwc_2174, _cwc_2175); 
            _cwc_2177 = _and_SxS_( _cwc_2176, _cwc_2172); 
            if (_cwc_2177) 
            { 
              _cwc_2171 = UTDScalarB::jotdotandBBB( x, y) ; 
              _cwc_2132 = _cwc_2171; 
            }
            else
            { 
              _cwc_2169 = UTDScalarB::jotdotandBBB( x, y) ; 
              _cwc_2132 = _cwc_2169; 
            }
          }
          else
          { 
            _cwc_2167 = UTDScalarB::jotdotandBBB( x, y) ; 
            _cwc_2132 = _cwc_2167; 
          }
        }
        else
        { 
          _cwc_2132 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotandBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
      else
      { 
        _cwc_2163 = _dim_A_( y); 
        _cwc_2164 = 0; 
        _cwc_2165 = _gt_SxS_( _cwc_2163, _cwc_2164); 
        if (_cwc_2165) 
        { 
          _cwc_2151 = _dim_A_( y); 
          _cwc_2161 = 1; 
          _cwc_2162 = _eq_SxS_( _cwc_2151, _cwc_2161); 
          if (_cwc_2162) 
          { 
            _cwc_2153 = _shape_A_( y); 
            _cwc_2155 = true; 
            _cwc_2158 = 4; 
            _cwc_2156 = [ 0 ]; 
            _cwc_2157 = _sel_VxA_( _cwc_2156, _cwc_2153); 
            _cwc_2159 = _eq_SxS_( _cwc_2157, _cwc_2158); 
            _cwc_2160 = _and_SxS_( _cwc_2159, _cwc_2155); 
            if (_cwc_2160) 
            { 
              _cwc_2154 = UTDScalarB::jotdotandBBB( x, y) ; 
              _cwc_2132 = _cwc_2154; 
            }
            else
            { 
              _cwc_2152 = UTDScalarB::jotdotandBBB( x, y) ; 
              _cwc_2132 = _cwc_2152; 
            }
          }
          else
          { 
            _cwc_2150 = UTDScalarB::jotdotandBBB( x, y) ; 
            _cwc_2132 = _cwc_2150; 
          }
        }
        else
        { 
          _cwc_2132 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotandBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_2146 = _dim_A_( y); 
      _cwc_2147 = 0; 
      _cwc_2148 = _gt_SxS_( _cwc_2146, _cwc_2147); 
      if (_cwc_2148) 
      { 
        _cwc_2134 = _dim_A_( y); 
        _cwc_2144 = 1; 
        _cwc_2145 = _eq_SxS_( _cwc_2134, _cwc_2144); 
        if (_cwc_2145) 
        { 
          _cwc_2136 = _shape_A_( y); 
          _cwc_2138 = true; 
          _cwc_2141 = 4; 
          _cwc_2139 = [ 0 ]; 
          _cwc_2140 = _sel_VxA_( _cwc_2139, _cwc_2136); 
          _cwc_2142 = _eq_SxS_( _cwc_2140, _cwc_2141); 
          _cwc_2143 = _and_SxS_( _cwc_2142, _cwc_2138); 
          if (_cwc_2143) 
          { 
            _cwc_2137 = UTDScalarB::jotdotandBBB( x, y) ; 
            _cwc_2132 = _cwc_2137; 
          }
          else
          { 
            _cwc_2135 = UTDScalarB::jotdotandBBB( x, y) ; 
            _cwc_2132 = _cwc_2135; 
          }
        }
        else
        { 
          _cwc_2133 = UTDScalarB::jotdotandBBB( x, y) ; 
          _cwc_2132 = _cwc_2133; 
        }
      }
      else
      { 
        _cwc_2132 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotandBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_2132 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotandBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
  }
  return( _cwc_2132); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::gtBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::gtBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  gtBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[*]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[4]),
                            bool[4] -> ( bool[4]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool -> { bool[*] -> ( bool[*]),
                         bool -> ( bool),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[4]),
                         bool[4] -> ( bool[4])},
               bool[+] -> { bool[*] -> ( bool[+]),
                            bool -> ( bool[+]),
                            bool[+] -> ( bool[+]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                bool -> ( bool[.,.,.]),
                                bool[+] -> ( bool[.,.,.]),
                                bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::gtBBB,
 *                  UTDScalarB::gtBBB,
 *                  UTDScalarB::gtBBB,
 *                  UTDScalarB::gtBBB,
 *                  UTDScalarB::gtBBB,
 *                  UTDScalarB::gtBBB,
 *                  UTDScalarB::gtBBB
 */
{ 
  bool[*] _cwc_2194 { , NN } ; 
  bool _cwc_2247 { , NN } ; 
  int _cwc_2246 { , NN } ; 
  bool _cwc_2245 { , NN } ; 
  int _cwc_2244 { , NN } ; 
  bool _cwc_2243 { , NN } ; 
  int _cwc_2242 { , NN } ; 
  bool _cwc_2241 { , NN } ; 
  int _cwc_2240 { , NN } ; 
  int _cwc_2239 { , NN } ; 
  bool _cwc_2238 { , NN } ; 
  int _cwc_2237 { , NN } ; 
  bool _cwc_2236 { , NN } ; 
  bool _cwc_2235 { , NN } ; 
  int{4} _cwc_2234 { , NN } ; 
  int _cwc_2233 { , NN } ; 
  int[1]{0} _cwc_2232 { , NN } ; 
  bool _cwc_2231 { , NN } ; 
  bool[4] _cwc_2230 { , NN } ; 
  int[+] _cwc_2229 { , NN } ; 
  bool[+] _cwc_2228 { , NN } ; 
  int _cwc_2227 { , NN } ; 
  bool[+] _cwc_2226 { , NN } ; 
  int _cwc_2225 { , NN } ; 
  bool _cwc_2224 { , NN } ; 
  int _cwc_2223 { , NN } ; 
  int _cwc_2222 { , NN } ; 
  bool _cwc_2221 { , NN } ; 
  int _cwc_2220 { , NN } ; 
  bool _cwc_2219 { , NN } ; 
  int _cwc_2218 { , NN } ; 
  bool[.,.,.] _cwc_2217 { , NN } ; 
  int _cwc_2216 { , NN } ; 
  bool _cwc_2215 { , NN } ; 
  int _cwc_2214 { , NN } ; 
  int _cwc_2213 { , NN } ; 
  bool _cwc_2212 { , NN } ; 
  int _cwc_2211 { , NN } ; 
  bool[.,.,.] _cwc_2210 { , NN } ; 
  int _cwc_2209 { , NN } ; 
  bool[+] _cwc_2208 { , NN } ; 
  int _cwc_2207 { , NN } ; 
  bool _cwc_2206 { , NN } ; 
  int _cwc_2205 { , NN } ; 
  bool[+] _cwc_2204 { , NN } ; 
  int _cwc_2203 { , NN } ; 
  bool _cwc_2202 { , NN } ; 
  int _cwc_2201 { , NN } ; 
  int _cwc_2200 { , NN } ; 
  bool _cwc_2199 { , NN } ; 
  int _cwc_2198 { , NN } ; 
  bool[+] _cwc_2197 { , NN } ; 
  int _cwc_2196 { , NN } ; 
  bool[+] _cwc_2195 { , NN } ; 

  _cwc_2225 = _dim_A_( x); 
  _cwc_2246 = 0; 
  _cwc_2247 = _eq_SxS_( _cwc_2225, _cwc_2246); 
  if (_cwc_2247) 
  { 
    _cwc_2242 = _dim_A_( y); 
    _cwc_2244 = 0; 
    _cwc_2245 = _eq_SxS_( _cwc_2242, _cwc_2244); 
    if (_cwc_2245) 
    { 
      _cwc_2243 = UTDScalarB::gtBBB( x, y) ; 
      _cwc_2194 = _cwc_2243; 
    }
    else
    { 
      _cwc_2239 = _dim_A_( y); 
      _cwc_2240 = 0; 
      _cwc_2241 = _gt_SxS_( _cwc_2239, _cwc_2240); 
      if (_cwc_2241) 
      { 
        _cwc_2227 = _dim_A_( y); 
        _cwc_2237 = 1; 
        _cwc_2238 = _eq_SxS_( _cwc_2227, _cwc_2237); 
        if (_cwc_2238) 
        { 
          _cwc_2229 = _shape_A_( y); 
          _cwc_2231 = true; 
          _cwc_2234 = 4; 
          _cwc_2232 = [ 0 ]; 
          _cwc_2233 = _sel_VxA_( _cwc_2232, _cwc_2229); 
          _cwc_2235 = _eq_SxS_( _cwc_2233, _cwc_2234); 
          _cwc_2236 = _and_SxS_( _cwc_2235, _cwc_2231); 
          if (_cwc_2236) 
          { 
            _cwc_2230 = UTDScalarB::gtBBB( x, y) ; 
            _cwc_2194 = _cwc_2230; 
          }
          else
          { 
            _cwc_2228 = UTDScalarB::gtBBB( x, y) ; 
            _cwc_2194 = _cwc_2228; 
          }
        }
        else
        { 
          _cwc_2226 = UTDScalarB::gtBBB( x, y) ; 
          _cwc_2194 = _cwc_2226; 
        }
      }
      else
      { 
        _cwc_2194 = _dispatch_error_( 1, bool[*], "UTDScalarB::gtBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_2222 = _dim_A_( x); 
    _cwc_2223 = 0; 
    _cwc_2224 = _gt_SxS_( _cwc_2222, _cwc_2223); 
    if (_cwc_2224) 
    { 
      _cwc_2207 = _dim_A_( x); 
      _cwc_2220 = 3; 
      _cwc_2221 = _eq_SxS_( _cwc_2207, _cwc_2220); 
      if (_cwc_2221) 
      { 
        _cwc_2216 = _dim_A_( y); 
        _cwc_2218 = 0; 
        _cwc_2219 = _eq_SxS_( _cwc_2216, _cwc_2218); 
        if (_cwc_2219) 
        { 
          _cwc_2217 = UTDScalarB::gtBBB( x, y) ; 
          _cwc_2194 = _cwc_2217; 
        }
        else
        { 
          _cwc_2213 = _dim_A_( y); 
          _cwc_2214 = 0; 
          _cwc_2215 = _gt_SxS_( _cwc_2213, _cwc_2214); 
          if (_cwc_2215) 
          { 
            _cwc_2209 = _dim_A_( y); 
            _cwc_2211 = 3; 
            _cwc_2212 = _eq_SxS_( _cwc_2209, _cwc_2211); 
            if (_cwc_2212) 
            { 
              _cwc_2210 = UTDScalarB::gtBBB( x, y) ; 
              _cwc_2194 = _cwc_2210; 
            }
            else
            { 
              _cwc_2208 = UTDScalarB::gtBBB( x, y) ; 
              _cwc_2194 = _cwc_2208; 
            }
          }
          else
          { 
            _cwc_2194 = _dispatch_error_( 1, bool[*], "UTDScalarB::gtBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_2203 = _dim_A_( y); 
        _cwc_2205 = 0; 
        _cwc_2206 = _eq_SxS_( _cwc_2203, _cwc_2205); 
        if (_cwc_2206) 
        { 
          _cwc_2204 = UTDScalarB::gtBBB( x, y) ; 
          _cwc_2194 = _cwc_2204; 
        }
        else
        { 
          _cwc_2200 = _dim_A_( y); 
          _cwc_2201 = 0; 
          _cwc_2202 = _gt_SxS_( _cwc_2200, _cwc_2201); 
          if (_cwc_2202) 
          { 
            _cwc_2196 = _dim_A_( y); 
            _cwc_2198 = 3; 
            _cwc_2199 = _eq_SxS_( _cwc_2196, _cwc_2198); 
            if (_cwc_2199) 
            { 
              _cwc_2197 = UTDScalarB::gtBBB( x, y) ; 
              _cwc_2194 = _cwc_2197; 
            }
            else
            { 
              _cwc_2195 = UTDScalarB::gtBBB( x, y) ; 
              _cwc_2194 = _cwc_2195; 
            }
          }
          else
          { 
            _cwc_2194 = _dispatch_error_( 1, bool[*], "UTDScalarB::gtBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_2194 = _dispatch_error_( 1, bool[*], "UTDScalarB::gtBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_2194); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::*(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
double[*] UTDScalarB:Array::*( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  * :: { double[*] -> { double[*] -> ( double[*]),
                          double -> ( double[*]),
                          double[+] -> ( double[+])},
           double -> { double[*] -> ( double[*]),
                       double -> ( double),
                       double[+] -> ( double[+])},
           double[+] -> { double[*] -> ( double[+]),
                          double -> ( double[+]),
                          double[+] -> ( double[+])}}
 *  dispatching to: ArrayArith::*,
 *                  ArrayArith::*,
 *                  ArrayArith::*,
 *                  ScalarArith::*
 */
{ 
  double[*] _cwc_2248 { , NN } ; 
  bool _cwc_2270 { , NN } ; 
  int _cwc_2269 { , NN } ; 
  bool _cwc_2268 { , NN } ; 
  int _cwc_2267 { , NN } ; 
  double _cwc_2266 { , NN } ; 
  int _cwc_2265 { , NN } ; 
  bool _cwc_2264 { , NN } ; 
  int _cwc_2263 { , NN } ; 
  int _cwc_2262 { , NN } ; 
  double[+] _cwc_2261 { , NN } ; 
  int _cwc_2260 { , NN } ; 
  bool _cwc_2259 { , NN } ; 
  int _cwc_2258 { , NN } ; 
  int _cwc_2257 { , NN } ; 
  bool _cwc_2256 { , NN } ; 
  int _cwc_2255 { , NN } ; 
  double[+] _cwc_2254 { , NN } ; 
  int _cwc_2253 { , NN } ; 
  bool _cwc_2252 { , NN } ; 
  int _cwc_2251 { , NN } ; 
  int _cwc_2250 { , NN } ; 
  double[+] _cwc_2249 { , NN } ; 

  _cwc_2260 = _dim_A_( A); 
  _cwc_2269 = 0; 
  _cwc_2270 = _eq_SxS_( _cwc_2260, _cwc_2269); 
  if (_cwc_2270) 
  { 
    _cwc_2265 = _dim_A_( B); 
    _cwc_2267 = 0; 
    _cwc_2268 = _eq_SxS_( _cwc_2265, _cwc_2267); 
    if (_cwc_2268) 
    { 
      _cwc_2266 = ( A ScalarArith::*B) ; 
      _cwc_2248 = _cwc_2266; 
    }
    else
    { 
      _cwc_2262 = _dim_A_( B); 
      _cwc_2263 = 0; 
      _cwc_2264 = _gt_SxS_( _cwc_2262, _cwc_2263); 
      if (_cwc_2264) 
      { 
        _cwc_2261 = ( A ArrayArith::*B) ; 
        _cwc_2248 = _cwc_2261; 
      }
      else
      { 
        _cwc_2248 = _dispatch_error_( 1, double[*], "UTDScalarB:Array::* :: double[*] double[*] -> double[*] ", A, B); 
      }
    }
  }
  else
  { 
    _cwc_2257 = _dim_A_( A); 
    _cwc_2258 = 0; 
    _cwc_2259 = _gt_SxS_( _cwc_2257, _cwc_2258); 
    if (_cwc_2259) 
    { 
      _cwc_2253 = _dim_A_( B); 
      _cwc_2255 = 0; 
      _cwc_2256 = _eq_SxS_( _cwc_2253, _cwc_2255); 
      if (_cwc_2256) 
      { 
        _cwc_2254 = ( A ArrayArith::*B) ; 
        _cwc_2248 = _cwc_2254; 
      }
      else
      { 
        _cwc_2250 = _dim_A_( B); 
        _cwc_2251 = 0; 
        _cwc_2252 = _gt_SxS_( _cwc_2250, _cwc_2251); 
        if (_cwc_2252) 
        { 
          _cwc_2249 = ( A ArrayArith::*B) ; 
          _cwc_2248 = _cwc_2249; 
        }
        else
        { 
          _cwc_2248 = _dispatch_error_( 1, double[*], "UTDScalarB:Array::* :: double[*] double[*] -> double[*] ", A, B); 
        }
      }
    }
    else
    { 
      _cwc_2248 = _dispatch_error_( 1, double[*], "UTDScalarB:Array::* :: double[*] double[*] -> double[*] ", A, B); 
    }
  }
  return( _cwc_2248); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::*(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::*( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  * :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+]),
                       int[.] -> ( int[1]),
                       int[1] -> ( int[1])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+]),
                    int[.] -> ( int[1]),
                    int[1] -> ( int[1])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::*,
 *                  ArrayArith::*,
 *                  ArrayArith::*,
 *                  ScalarArith::*,
 *                  UTDScalarB:Array::*
 */
{ 
  int[*] _cwc_2271 { , NN } ; 
  bool _cwc_2305 { , NN } ; 
  int _cwc_2304 { , NN } ; 
  bool _cwc_2303 { , NN } ; 
  int _cwc_2302 { , NN } ; 
  int _cwc_2301 { , NN } ; 
  int _cwc_2300 { , NN } ; 
  bool _cwc_2299 { , NN } ; 
  int _cwc_2298 { , NN } ; 
  int _cwc_2297 { , NN } ; 
  bool _cwc_2296 { , NN } ; 
  int _cwc_2295 { , NN } ; 
  bool _cwc_2294 { , NN } ; 
  bool _cwc_2293 { , NN } ; 
  int{1} _cwc_2292 { , NN } ; 
  int _cwc_2291 { , NN } ; 
  int[1]{0} _cwc_2290 { , NN } ; 
  bool _cwc_2289 { , NN } ; 
  int[1] _cwc_2288 { , NN } ; 
  int[+] _cwc_2287 { , NN } ; 
  int[+] _cwc_2286 { , NN } ; 
  int _cwc_2285 { , NN } ; 
  int[+] _cwc_2284 { , NN } ; 
  int _cwc_2283 { , NN } ; 
  bool _cwc_2282 { , NN } ; 
  int _cwc_2281 { , NN } ; 
  int _cwc_2280 { , NN } ; 
  bool _cwc_2279 { , NN } ; 
  int _cwc_2278 { , NN } ; 
  int[+] _cwc_2277 { , NN } ; 
  int _cwc_2276 { , NN } ; 
  bool _cwc_2275 { , NN } ; 
  int _cwc_2274 { , NN } ; 
  int _cwc_2273 { , NN } ; 
  int[+] _cwc_2272 { , NN } ; 

  _cwc_2283 = _dim_A_( A); 
  _cwc_2304 = 0; 
  _cwc_2305 = _eq_SxS_( _cwc_2283, _cwc_2304); 
  if (_cwc_2305) 
  { 
    _cwc_2300 = _dim_A_( B); 
    _cwc_2302 = 0; 
    _cwc_2303 = _eq_SxS_( _cwc_2300, _cwc_2302); 
    if (_cwc_2303) 
    { 
      _cwc_2301 = ( A ScalarArith::*B) ; 
      _cwc_2271 = _cwc_2301; 
    }
    else
    { 
      _cwc_2297 = _dim_A_( B); 
      _cwc_2298 = 0; 
      _cwc_2299 = _gt_SxS_( _cwc_2297, _cwc_2298); 
      if (_cwc_2299) 
      { 
        _cwc_2285 = _dim_A_( B); 
        _cwc_2295 = 1; 
        _cwc_2296 = _eq_SxS_( _cwc_2285, _cwc_2295); 
        if (_cwc_2296) 
        { 
          _cwc_2287 = _shape_A_( B); 
          _cwc_2289 = true; 
          _cwc_2292 = 1; 
          _cwc_2290 = [ 0 ]; 
          _cwc_2291 = _sel_VxA_( _cwc_2290, _cwc_2287); 
          _cwc_2293 = _eq_SxS_( _cwc_2291, _cwc_2292); 
          _cwc_2294 = _and_SxS_( _cwc_2293, _cwc_2289); 
          if (_cwc_2294) 
          { 
            _cwc_2288 = ( A UTDScalarB:Array::*B) ; 
            _cwc_2271 = _cwc_2288; 
          }
          else
          { 
            _cwc_2286 = ( A ArrayArith::*B) ; 
            _cwc_2271 = _cwc_2286; 
          }
        }
        else
        { 
          _cwc_2284 = ( A ArrayArith::*B) ; 
          _cwc_2271 = _cwc_2284; 
        }
      }
      else
      { 
        _cwc_2271 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::* :: int[*] int[*] -> int[*] ", A, B); 
      }
    }
  }
  else
  { 
    _cwc_2280 = _dim_A_( A); 
    _cwc_2281 = 0; 
    _cwc_2282 = _gt_SxS_( _cwc_2280, _cwc_2281); 
    if (_cwc_2282) 
    { 
      _cwc_2276 = _dim_A_( B); 
      _cwc_2278 = 0; 
      _cwc_2279 = _eq_SxS_( _cwc_2276, _cwc_2278); 
      if (_cwc_2279) 
      { 
        _cwc_2277 = ( A ArrayArith::*B) ; 
        _cwc_2271 = _cwc_2277; 
      }
      else
      { 
        _cwc_2273 = _dim_A_( B); 
        _cwc_2274 = 0; 
        _cwc_2275 = _gt_SxS_( _cwc_2273, _cwc_2274); 
        if (_cwc_2275) 
        { 
          _cwc_2272 = ( A ArrayArith::*B) ; 
          _cwc_2271 = _cwc_2272; 
        }
        else
        { 
          _cwc_2271 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::* :: int[*] int[*] -> int[*] ", A, B); 
        }
      }
    }
    else
    { 
      _cwc_2271 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::* :: int[*] int[*] -> int[*] ", A, B); 
    }
  }
  return( _cwc_2271); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::GEXXB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[14] UTDScalarB::GEXXB()
/*
 *  GEXXB :: ( bool[14])
 *  dispatching to: UTDScalarB::GEXXB
 */
{ 
  bool[14] _cwc_2306 { , NN } ; 
  bool[14] _cwc_2307 { , NN } ; 

  _cwc_2307 = UTDScalarB::GEXXB() ; 
  _cwc_2306 = _cwc_2307; 
  return( _cwc_2306); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::jotdotgeBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB::jotdotgeBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  jotdotgeBBB :: { bool[*] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[+] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[.] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[4] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])}}
 *  dispatching to: UTDScalarB::jotdotgeBBB,
 *                  UTDScalarB::jotdotgeBBB
 */
{ 
  bool[+] _cwc_2308 { , NN } ; 
  bool _cwc_2369 { , NN } ; 
  int _cwc_2368 { , NN } ; 
  int _cwc_2367 { , NN } ; 
  bool _cwc_2366 { , NN } ; 
  int _cwc_2365 { , NN } ; 
  bool _cwc_2364 { , NN } ; 
  bool _cwc_2363 { , NN } ; 
  int{4} _cwc_2362 { , NN } ; 
  int _cwc_2361 { , NN } ; 
  int[1]{0} _cwc_2360 { , NN } ; 
  bool _cwc_2359 { , NN } ; 
  bool _cwc_2358 { , NN } ; 
  int _cwc_2357 { , NN } ; 
  int _cwc_2356 { , NN } ; 
  bool _cwc_2355 { , NN } ; 
  int _cwc_2354 { , NN } ; 
  bool _cwc_2353 { , NN } ; 
  bool _cwc_2352 { , NN } ; 
  int{4} _cwc_2351 { , NN } ; 
  int _cwc_2350 { , NN } ; 
  int[1]{0} _cwc_2349 { , NN } ; 
  bool _cwc_2348 { , NN } ; 
  bool[4,4] _cwc_2347 { , NN } ; 
  int[+] _cwc_2346 { , NN } ; 
  bool[+] _cwc_2345 { , NN } ; 
  int _cwc_2344 { , NN } ; 
  bool[+] _cwc_2343 { , NN } ; 
  int[+] _cwc_2342 { , NN } ; 
  bool _cwc_2341 { , NN } ; 
  int _cwc_2340 { , NN } ; 
  int _cwc_2339 { , NN } ; 
  bool _cwc_2338 { , NN } ; 
  int _cwc_2337 { , NN } ; 
  bool _cwc_2336 { , NN } ; 
  bool _cwc_2335 { , NN } ; 
  int{4} _cwc_2334 { , NN } ; 
  int _cwc_2333 { , NN } ; 
  int[1]{0} _cwc_2332 { , NN } ; 
  bool _cwc_2331 { , NN } ; 
  bool[+] _cwc_2330 { , NN } ; 
  int[+] _cwc_2329 { , NN } ; 
  bool[+] _cwc_2328 { , NN } ; 
  int _cwc_2327 { , NN } ; 
  bool[+] _cwc_2326 { , NN } ; 
  int _cwc_2325 { , NN } ; 
  bool _cwc_2324 { , NN } ; 
  int _cwc_2323 { , NN } ; 
  int _cwc_2322 { , NN } ; 
  bool _cwc_2321 { , NN } ; 
  int _cwc_2320 { , NN } ; 
  bool _cwc_2319 { , NN } ; 
  bool _cwc_2318 { , NN } ; 
  int{4} _cwc_2317 { , NN } ; 
  int _cwc_2316 { , NN } ; 
  int[1]{0} _cwc_2315 { , NN } ; 
  bool _cwc_2314 { , NN } ; 
  bool[+] _cwc_2313 { , NN } ; 
  int[+] _cwc_2312 { , NN } ; 
  bool[+] _cwc_2311 { , NN } ; 
  int _cwc_2310 { , NN } ; 
  bool[+] _cwc_2309 { , NN } ; 

  _cwc_2367 = _dim_A_( x); 
  _cwc_2368 = 0; 
  _cwc_2369 = _gt_SxS_( _cwc_2367, _cwc_2368); 
  if (_cwc_2369) 
  { 
    _cwc_2325 = _dim_A_( x); 
    _cwc_2365 = 1; 
    _cwc_2366 = _eq_SxS_( _cwc_2325, _cwc_2365); 
    if (_cwc_2366) 
    { 
      _cwc_2342 = _shape_A_( x); 
      _cwc_2359 = true; 
      _cwc_2362 = 4; 
      _cwc_2360 = [ 0 ]; 
      _cwc_2361 = _sel_VxA_( _cwc_2360, _cwc_2342); 
      _cwc_2363 = _eq_SxS_( _cwc_2361, _cwc_2362); 
      _cwc_2364 = _and_SxS_( _cwc_2363, _cwc_2359); 
      if (_cwc_2364) 
      { 
        _cwc_2356 = _dim_A_( y); 
        _cwc_2357 = 0; 
        _cwc_2358 = _gt_SxS_( _cwc_2356, _cwc_2357); 
        if (_cwc_2358) 
        { 
          _cwc_2344 = _dim_A_( y); 
          _cwc_2354 = 1; 
          _cwc_2355 = _eq_SxS_( _cwc_2344, _cwc_2354); 
          if (_cwc_2355) 
          { 
            _cwc_2346 = _shape_A_( y); 
            _cwc_2348 = true; 
            _cwc_2351 = 4; 
            _cwc_2349 = [ 0 ]; 
            _cwc_2350 = _sel_VxA_( _cwc_2349, _cwc_2346); 
            _cwc_2352 = _eq_SxS_( _cwc_2350, _cwc_2351); 
            _cwc_2353 = _and_SxS_( _cwc_2352, _cwc_2348); 
            if (_cwc_2353) 
            { 
              _cwc_2347 = UTDScalarB::jotdotgeBBB( x, y) ; 
              _cwc_2308 = _cwc_2347; 
            }
            else
            { 
              _cwc_2345 = UTDScalarB::jotdotgeBBB( x, y) ; 
              _cwc_2308 = _cwc_2345; 
            }
          }
          else
          { 
            _cwc_2343 = UTDScalarB::jotdotgeBBB( x, y) ; 
            _cwc_2308 = _cwc_2343; 
          }
        }
        else
        { 
          _cwc_2308 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotgeBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
      else
      { 
        _cwc_2339 = _dim_A_( y); 
        _cwc_2340 = 0; 
        _cwc_2341 = _gt_SxS_( _cwc_2339, _cwc_2340); 
        if (_cwc_2341) 
        { 
          _cwc_2327 = _dim_A_( y); 
          _cwc_2337 = 1; 
          _cwc_2338 = _eq_SxS_( _cwc_2327, _cwc_2337); 
          if (_cwc_2338) 
          { 
            _cwc_2329 = _shape_A_( y); 
            _cwc_2331 = true; 
            _cwc_2334 = 4; 
            _cwc_2332 = [ 0 ]; 
            _cwc_2333 = _sel_VxA_( _cwc_2332, _cwc_2329); 
            _cwc_2335 = _eq_SxS_( _cwc_2333, _cwc_2334); 
            _cwc_2336 = _and_SxS_( _cwc_2335, _cwc_2331); 
            if (_cwc_2336) 
            { 
              _cwc_2330 = UTDScalarB::jotdotgeBBB( x, y) ; 
              _cwc_2308 = _cwc_2330; 
            }
            else
            { 
              _cwc_2328 = UTDScalarB::jotdotgeBBB( x, y) ; 
              _cwc_2308 = _cwc_2328; 
            }
          }
          else
          { 
            _cwc_2326 = UTDScalarB::jotdotgeBBB( x, y) ; 
            _cwc_2308 = _cwc_2326; 
          }
        }
        else
        { 
          _cwc_2308 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotgeBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_2322 = _dim_A_( y); 
      _cwc_2323 = 0; 
      _cwc_2324 = _gt_SxS_( _cwc_2322, _cwc_2323); 
      if (_cwc_2324) 
      { 
        _cwc_2310 = _dim_A_( y); 
        _cwc_2320 = 1; 
        _cwc_2321 = _eq_SxS_( _cwc_2310, _cwc_2320); 
        if (_cwc_2321) 
        { 
          _cwc_2312 = _shape_A_( y); 
          _cwc_2314 = true; 
          _cwc_2317 = 4; 
          _cwc_2315 = [ 0 ]; 
          _cwc_2316 = _sel_VxA_( _cwc_2315, _cwc_2312); 
          _cwc_2318 = _eq_SxS_( _cwc_2316, _cwc_2317); 
          _cwc_2319 = _and_SxS_( _cwc_2318, _cwc_2314); 
          if (_cwc_2319) 
          { 
            _cwc_2313 = UTDScalarB::jotdotgeBBB( x, y) ; 
            _cwc_2308 = _cwc_2313; 
          }
          else
          { 
            _cwc_2311 = UTDScalarB::jotdotgeBBB( x, y) ; 
            _cwc_2308 = _cwc_2311; 
          }
        }
        else
        { 
          _cwc_2309 = UTDScalarB::jotdotgeBBB( x, y) ; 
          _cwc_2308 = _cwc_2309; 
        }
      }
      else
      { 
        _cwc_2308 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotgeBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_2308 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotgeBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
  }
  return( _cwc_2308); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::sameBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool UTDScalarB::sameBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  sameBBB :: { bool[*] -> { bool[*] -> ( bool),
                              bool -> ( bool),
                              bool[+] -> ( bool),
                              bool[.,.] -> ( bool),
                              bool[.,.,.] -> ( bool)},
                 bool -> { bool[*] -> ( bool),
                           bool -> ( bool)},
                 bool[+] -> { bool[*] -> ( bool),
                              bool[+] -> ( bool),
                              bool[.,.] -> ( bool),
                              bool[.,.,.] -> ( bool)},
                 bool[.,.] -> { bool[*] -> ( bool),
                                bool[+] -> ( bool),
                                bool[.,.] -> ( bool)},
                 bool[4,4] -> { bool[*] -> ( bool),
                                bool[+] -> ( bool),
                                bool[.,.] -> ( bool)},
                 bool[.,.,.] -> { bool[*] -> ( bool),
                                  bool[+] -> ( bool),
                                  bool[.,.] -> ( --),
                                  bool[.,.,.] -> ( bool)}}
 *  dispatching to: UTDScalarB::sameBBB,
 *                  UTDScalarB::sameBBB,
 *                  UTDScalarB::sameBBB,
 *                  UTDScalarB::sameBBB
 */
{ 
  bool _cwc_2370 { , NN } ; 
  bool _cwc_2435 { , NN } ; 
  int _cwc_2434 { , NN } ; 
  bool _cwc_2433 { , NN } ; 
  int _cwc_2432 { , NN } ; 
  bool _cwc_2431 { , NN } ; 
  int _cwc_2430 { , NN } ; 
  int _cwc_2429 { , NN } ; 
  bool _cwc_2428 { , NN } ; 
  int _cwc_2427 { , NN } ; 
  int _cwc_2426 { , NN } ; 
  bool _cwc_2425 { , NN } ; 
  int _cwc_2424 { , NN } ; 
  bool _cwc_2423 { , NN } ; 
  bool _cwc_2422 { , NN } ; 
  int{4} _cwc_2421 { , NN } ; 
  int _cwc_2420 { , NN } ; 
  int[1]{1} _cwc_2419 { , NN } ; 
  bool _cwc_2418 { , NN } ; 
  bool _cwc_2417 { , NN } ; 
  int{4} _cwc_2416 { , NN } ; 
  int _cwc_2415 { , NN } ; 
  int[1]{0} _cwc_2414 { , NN } ; 
  bool _cwc_2413 { , NN } ; 
  bool _cwc_2412 { , NN } ; 
  int _cwc_2411 { , NN } ; 
  int _cwc_2410 { , NN } ; 
  bool _cwc_2409 { , NN } ; 
  int _cwc_2408 { , NN } ; 
  bool _cwc_2407 { , NN } ; 
  int _cwc_2406 { , NN } ; 
  bool _cwc_2405 { , NN } ; 
  int[+] _cwc_2404 { , NN } ; 
  bool _cwc_2403 { , NN } ; 
  int _cwc_2402 { , NN } ; 
  int _cwc_2401 { , NN } ; 
  bool _cwc_2400 { , NN } ; 
  int _cwc_2399 { , NN } ; 
  bool _cwc_2398 { , NN } ; 
  int _cwc_2397 { , NN } ; 
  bool _cwc_2396 { , NN } ; 
  bool _cwc_2395 { , NN } ; 
  int _cwc_2394 { , NN } ; 
  bool _cwc_2393 { , NN } ; 
  int _cwc_2392 { , NN } ; 
  int _cwc_2391 { , NN } ; 
  bool _cwc_2390 { , NN } ; 
  int _cwc_2389 { , NN } ; 
  bool _cwc_2388 { , NN } ; 
  bool _cwc_2387 { , NN } ; 
  int _cwc_2386 { , NN } ; 
  bool _cwc_2385 { , NN } ; 
  int _cwc_2384 { , NN } ; 
  bool _cwc_2383 { , NN } ; 
  int _cwc_2382 { , NN } ; 
  bool _cwc_2381 { , NN } ; 
  int _cwc_2380 { , NN } ; 
  int _cwc_2379 { , NN } ; 
  bool _cwc_2378 { , NN } ; 
  int _cwc_2377 { , NN } ; 
  bool _cwc_2376 { , NN } ; 
  bool _cwc_2375 { , NN } ; 
  int _cwc_2374 { , NN } ; 
  bool _cwc_2373 { , NN } ; 
  int _cwc_2372 { , NN } ; 
  bool _cwc_2371 { , NN } ; 

  _cwc_2429 = _dim_A_( x); 
  _cwc_2434 = 0; 
  _cwc_2435 = _eq_SxS_( _cwc_2429, _cwc_2434); 
  if (_cwc_2435) 
  { 
    _cwc_2430 = _dim_A_( y); 
    _cwc_2432 = 0; 
    _cwc_2433 = _eq_SxS_( _cwc_2430, _cwc_2432); 
    if (_cwc_2433) 
    { 
      _cwc_2431 = UTDScalarB::sameBBB( x, y) ; 
      _cwc_2370 = _cwc_2431; 
    }
    else
    { 
      _cwc_2370 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
    }
  }
  else
  { 
    _cwc_2426 = _dim_A_( x); 
    _cwc_2427 = 0; 
    _cwc_2428 = _gt_SxS_( _cwc_2426, _cwc_2427); 
    if (_cwc_2428) 
    { 
      _cwc_2382 = _dim_A_( x); 
      _cwc_2424 = 2; 
      _cwc_2425 = _eq_SxS_( _cwc_2382, _cwc_2424); 
      if (_cwc_2425) 
      { 
        _cwc_2404 = _shape_A_( x); 
        _cwc_2413 = true; 
        _cwc_2416 = 4; 
        _cwc_2414 = [ 0 ]; 
        _cwc_2415 = _sel_VxA_( _cwc_2414, _cwc_2404); 
        _cwc_2417 = _eq_SxS_( _cwc_2415, _cwc_2416); 
        _cwc_2418 = _and_SxS_( _cwc_2417, _cwc_2413); 
        _cwc_2421 = 4; 
        _cwc_2419 = [ 1 ]; 
        _cwc_2420 = _sel_VxA_( _cwc_2419, _cwc_2404); 
        _cwc_2422 = _eq_SxS_( _cwc_2420, _cwc_2421); 
        _cwc_2423 = _and_SxS_( _cwc_2422, _cwc_2418); 
        if (_cwc_2423) 
        { 
          _cwc_2410 = _dim_A_( y); 
          _cwc_2411 = 0; 
          _cwc_2412 = _gt_SxS_( _cwc_2410, _cwc_2411); 
          if (_cwc_2412) 
          { 
            _cwc_2406 = _dim_A_( y); 
            _cwc_2408 = 2; 
            _cwc_2409 = _eq_SxS_( _cwc_2406, _cwc_2408); 
            if (_cwc_2409) 
            { 
              _cwc_2407 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_2370 = _cwc_2407; 
            }
            else
            { 
              _cwc_2405 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_2370 = _cwc_2405; 
            }
          }
          else
          { 
            _cwc_2370 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
          }
        }
        else
        { 
          _cwc_2401 = _dim_A_( y); 
          _cwc_2402 = 0; 
          _cwc_2403 = _gt_SxS_( _cwc_2401, _cwc_2402); 
          if (_cwc_2403) 
          { 
            _cwc_2397 = _dim_A_( y); 
            _cwc_2399 = 2; 
            _cwc_2400 = _eq_SxS_( _cwc_2397, _cwc_2399); 
            if (_cwc_2400) 
            { 
              _cwc_2398 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_2370 = _cwc_2398; 
            }
            else
            { 
              _cwc_2396 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_2370 = _cwc_2396; 
            }
          }
          else
          { 
            _cwc_2370 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_2394 = 3; 
        _cwc_2395 = _eq_SxS_( _cwc_2382, _cwc_2394); 
        if (_cwc_2395) 
        { 
          _cwc_2391 = _dim_A_( y); 
          _cwc_2392 = 0; 
          _cwc_2393 = _gt_SxS_( _cwc_2391, _cwc_2392); 
          if (_cwc_2393) 
          { 
            _cwc_2384 = _dim_A_( y); 
            _cwc_2389 = 2; 
            _cwc_2390 = _eq_SxS_( _cwc_2384, _cwc_2389); 
            if (_cwc_2390) 
            { 
              _cwc_2388 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_2370 = _cwc_2388; 
            }
            else
            { 
              _cwc_2386 = 3; 
              _cwc_2387 = _eq_SxS_( _cwc_2384, _cwc_2386); 
              if (_cwc_2387) 
              { 
                _cwc_2385 = UTDScalarB::sameBBB( x, y) ; 
                _cwc_2370 = _cwc_2385; 
              }
              else
              { 
                _cwc_2383 = UTDScalarB::sameBBB( x, y) ; 
                _cwc_2370 = _cwc_2383; 
              }
            }
          }
          else
          { 
            _cwc_2370 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
          }
        }
        else
        { 
          _cwc_2379 = _dim_A_( y); 
          _cwc_2380 = 0; 
          _cwc_2381 = _gt_SxS_( _cwc_2379, _cwc_2380); 
          if (_cwc_2381) 
          { 
            _cwc_2372 = _dim_A_( y); 
            _cwc_2377 = 2; 
            _cwc_2378 = _eq_SxS_( _cwc_2372, _cwc_2377); 
            if (_cwc_2378) 
            { 
              _cwc_2376 = UTDScalarB::sameBBB( x, y) ; 
              _cwc_2370 = _cwc_2376; 
            }
            else
            { 
              _cwc_2374 = 3; 
              _cwc_2375 = _eq_SxS_( _cwc_2372, _cwc_2374); 
              if (_cwc_2375) 
              { 
                _cwc_2373 = UTDScalarB::sameBBB( x, y) ; 
                _cwc_2370 = _cwc_2373; 
              }
              else
              { 
                _cwc_2371 = UTDScalarB::sameBBB( x, y) ; 
                _cwc_2370 = _cwc_2371; 
              }
            }
          }
          else
          { 
            _cwc_2370 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_2370 = _dispatch_error_( 1, bool, "UTDScalarB::sameBBB :: bool[*] bool[*] -> bool ", x, y); 
    }
  }
  return( _cwc_2370); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::all(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool UTDScalarB:Array::all( bool[*] a { ,NN } )
/*
 *  all :: { bool[*] -> ( bool),
             bool[+] -> ( bool),
             bool[.] -> ( bool),
             bool[2] -> ( bool),
             bool[3] -> ( bool),
             bool[.,.] -> ( bool),
             bool[.,.,.] -> ( bool)}
 *  dispatching to: ArrayArith::all,
 *                  ArrayTransform::all,
 *                  UTDScalarB:Array::all,
 *                  UTDScalarB:Array::all,
 *                  UTDScalarB:Array::all,
 *                  UTDScalarB:Array::all,
 *                  UTDScalarB:Array::all,
 *                  UTDScalarB:Array::all
 */
{ 
  bool _cwc_2436 { , NN } ; 
  bool _cwc_2466 { , NN } ; 
  int _cwc_2465 { , NN } ; 
  bool _cwc_2464 { , NN } ; 
  int _cwc_2463 { , NN } ; 
  bool _cwc_2462 { , NN } ; 
  int _cwc_2461 { , NN } ; 
  bool _cwc_2460 { , NN } ; 
  bool _cwc_2459 { , NN } ; 
  int{2} _cwc_2458 { , NN } ; 
  int _cwc_2457 { , NN } ; 
  int[1]{0} _cwc_2456 { , NN } ; 
  bool _cwc_2455 { , NN } ; 
  bool _cwc_2454 { , NN } ; 
  bool _cwc_2453 { , NN } ; 
  bool _cwc_2452 { , NN } ; 
  int{3} _cwc_2451 { , NN } ; 
  int _cwc_2450 { , NN } ; 
  int[1]{0} _cwc_2449 { , NN } ; 
  bool _cwc_2448 { , NN } ; 
  bool _cwc_2447 { , NN } ; 
  int[+] _cwc_2446 { , NN } ; 
  bool _cwc_2445 { , NN } ; 
  bool _cwc_2444 { , NN } ; 
  int _cwc_2443 { , NN } ; 
  bool _cwc_2442 { , NN } ; 
  bool _cwc_2441 { , NN } ; 
  int _cwc_2440 { , NN } ; 
  bool _cwc_2439 { , NN } ; 
  int _cwc_2438 { , NN } ; 
  bool _cwc_2437 { , NN } ; 

  _cwc_2463 = _dim_A_( a); 
  _cwc_2465 = 0; 
  _cwc_2466 = _gt_SxS_( _cwc_2463, _cwc_2465); 
  if (_cwc_2466) 
  { 
    _cwc_2438 = _dim_A_( a); 
    _cwc_2461 = 1; 
    _cwc_2462 = _eq_SxS_( _cwc_2438, _cwc_2461); 
    if (_cwc_2462) 
    { 
      _cwc_2446 = _shape_A_( a); 
      _cwc_2455 = true; 
      _cwc_2458 = 2; 
      _cwc_2456 = [ 0 ]; 
      _cwc_2457 = _sel_VxA_( _cwc_2456, _cwc_2446); 
      _cwc_2459 = _eq_SxS_( _cwc_2457, _cwc_2458); 
      _cwc_2460 = _and_SxS_( _cwc_2459, _cwc_2455); 
      if (_cwc_2460) 
      { 
        _cwc_2454 = UTDScalarB:Array::all( a) ; 
        _cwc_2436 = _cwc_2454; 
      }
      else
      { 
        _cwc_2448 = true; 
        _cwc_2451 = 3; 
        _cwc_2449 = [ 0 ]; 
        _cwc_2450 = _sel_VxA_( _cwc_2449, _cwc_2446); 
        _cwc_2452 = _eq_SxS_( _cwc_2450, _cwc_2451); 
        _cwc_2453 = _and_SxS_( _cwc_2452, _cwc_2448); 
        if (_cwc_2453) 
        { 
          _cwc_2447 = UTDScalarB:Array::all( a) ; 
          _cwc_2436 = _cwc_2447; 
        }
        else
        { 
          _cwc_2445 = UTDScalarB:Array::all( a) ; 
          _cwc_2436 = _cwc_2445; 
        }
      }
    }
    else
    { 
      _cwc_2443 = 2; 
      _cwc_2444 = _eq_SxS_( _cwc_2438, _cwc_2443); 
      if (_cwc_2444) 
      { 
        _cwc_2442 = UTDScalarB:Array::all( a) ; 
        _cwc_2436 = _cwc_2442; 
      }
      else
      { 
        _cwc_2440 = 3; 
        _cwc_2441 = _eq_SxS_( _cwc_2438, _cwc_2440); 
        if (_cwc_2441) 
        { 
          _cwc_2439 = UTDScalarB:Array::all( a) ; 
          _cwc_2436 = _cwc_2439; 
        }
        else
        { 
          _cwc_2437 = UTDScalarB:Array::all( a) ; 
          _cwc_2436 = _cwc_2437; 
        }
      }
    }
  }
  else
  { 
    _cwc_2464 = ArrayArith::all( a) ; 
    _cwc_2436 = _cwc_2464; 
  }
  return( _cwc_2436); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:StdIO::show(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
Terminal::Terminal *, TermFile::TermFile * UTDScalarB:StdIO::show( Terminal::Terminal *_rso_100_TheTerminal { ,NN } , TermFile::TermFile *_rso_99_stdout { ,NN } , bool[*] n { ,NN } )
/*
 *  show :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> { bool[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                    bool -> ( Terminal::Terminal, TermFile::TermFile),
                                                                    bool[+] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                    bool[.] -> ( Terminal::Terminal, TermFile::TermFile)},
                                         TermFile::TermFile -> { bool[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool[+] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool[.] -> ( Terminal::Terminal, TermFile::TermFile)}},
              Terminal::Terminal -> { TermFile::TermFile[*] -> { bool[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool[+] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 bool[.] -> ( Terminal::Terminal, TermFile::TermFile)},
                                      TermFile::TermFile -> { bool[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                              bool -> ( Terminal::Terminal, TermFile::TermFile),
                                                              bool[+] -> ( Terminal::Terminal, TermFile::TermFile),
                                                              bool[.] -> ( Terminal::Terminal, TermFile::TermFile)}}}
 *  dispatching to: StdIO::show,
 *                  StdIO::show,
 *                  UTDScalarB:StdIO::show
 */
{ 
  TermFile::TermFile _cwc_2468 { , NN } ; 
  Terminal::Terminal _cwc_2467 { , NN } ; 
  bool _cwc_2483 { , NN } ; 
  int _cwc_2482 { , NN } ; 
  Terminal::Terminal _cwc_2481 { , NN } ; 
  TermFile::TermFile _cwc_2480 { , NN } ; 
  int _cwc_2479 { , NN } ; 
  bool _cwc_2478 { , NN } ; 
  int _cwc_2477 { , NN } ; 
  int _cwc_2476 { , NN } ; 
  bool _cwc_2475 { , NN } ; 
  int _cwc_2474 { , NN } ; 
  Terminal::Terminal _cwc_2473 { , NN } ; 
  TermFile::TermFile _cwc_2472 { , NN } ; 
  int _cwc_2471 { , NN } ; 
  Terminal::Terminal _cwc_2470 { , NN } ; 
  TermFile::TermFile _cwc_2469 { , NN } ; 

  _cwc_2479 = _dim_A_( n); 
  _cwc_2482 = 0; 
  _cwc_2483 = _eq_SxS_( _cwc_2479, _cwc_2482); 
  if (_cwc_2483) 
  { 
    _cwc_2481, _cwc_2480 = StdIO::show( _rso_100_TheTerminal, _rso_99_stdout, n) ; 
    _cwc_2467 = _cwc_2481; 
    _cwc_2468 = _cwc_2480; 
  }
  else
  { 
    _cwc_2476 = _dim_A_( n); 
    _cwc_2477 = 0; 
    _cwc_2478 = _gt_SxS_( _cwc_2476, _cwc_2477); 
    if (_cwc_2478) 
    { 
      _cwc_2471 = _dim_A_( n); 
      _cwc_2474 = 1; 
      _cwc_2475 = _eq_SxS_( _cwc_2471, _cwc_2474); 
      if (_cwc_2475) 
      { 
        _cwc_2473, _cwc_2472 = UTDScalarB:StdIO::show( _rso_100_TheTerminal, _rso_99_stdout, n) ; 
        _cwc_2467 = _cwc_2473; 
        _cwc_2468 = _cwc_2472; 
      }
      else
      { 
        _cwc_2470, _cwc_2469 = StdIO::show( _rso_100_TheTerminal, _rso_99_stdout, n) ; 
        _cwc_2467 = _cwc_2470; 
        _cwc_2468 = _cwc_2469; 
      }
    }
    else
    { 
      _cwc_2467, _cwc_2468 = _dispatch_error_( 2, Terminal::Terminal, TermFile::TermFile, "UTDScalarB:StdIO::show :: Terminal::Terminal TermFile::TermFile bool[*] -> Terminal::Terminal TermFile::TermFile ", _rso_100_TheTerminal, _rso_99_stdout, n); 
    }
  }
  return( _cwc_2467, _cwc_2468); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:StdIO::show(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
Terminal::Terminal *, TermFile::TermFile * UTDScalarB:StdIO::show( Terminal::Terminal *_rso_100_TheTerminal { ,NN } , TermFile::TermFile *_rso_99_stdout { ,NN } , int[*] n { ,NN } )
/*
 *  show :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                    int -> ( Terminal::Terminal, TermFile::TermFile),
                                                                    int[+] -> ( Terminal::Terminal, TermFile::TermFile)},
                                         TermFile::TermFile -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 int -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 int[+] -> ( Terminal::Terminal, TermFile::TermFile)}},
              Terminal::Terminal -> { TermFile::TermFile[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 int -> ( Terminal::Terminal, TermFile::TermFile),
                                                                 int[+] -> ( Terminal::Terminal, TermFile::TermFile)},
                                      TermFile::TermFile -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile),
                                                              int -> ( Terminal::Terminal, TermFile::TermFile),
                                                              int[+] -> ( Terminal::Terminal, TermFile::TermFile)}}}
 *  dispatching to: StdIO::show,
 *                  StdIO::show
 */
{ 
  TermFile::TermFile _cwc_2485 { , NN } ; 
  Terminal::Terminal _cwc_2484 { , NN } ; 
  bool _cwc_2495 { , NN } ; 
  int _cwc_2494 { , NN } ; 
  Terminal::Terminal _cwc_2493 { , NN } ; 
  TermFile::TermFile _cwc_2492 { , NN } ; 
  int _cwc_2491 { , NN } ; 
  bool _cwc_2490 { , NN } ; 
  int _cwc_2489 { , NN } ; 
  int _cwc_2488 { , NN } ; 
  Terminal::Terminal _cwc_2487 { , NN } ; 
  TermFile::TermFile _cwc_2486 { , NN } ; 

  _cwc_2491 = _dim_A_( n); 
  _cwc_2494 = 0; 
  _cwc_2495 = _eq_SxS_( _cwc_2491, _cwc_2494); 
  if (_cwc_2495) 
  { 
    _cwc_2493, _cwc_2492 = StdIO::show( _rso_100_TheTerminal, _rso_99_stdout, n) ; 
    _cwc_2484 = _cwc_2493; 
    _cwc_2485 = _cwc_2492; 
  }
  else
  { 
    _cwc_2488 = _dim_A_( n); 
    _cwc_2489 = 0; 
    _cwc_2490 = _gt_SxS_( _cwc_2488, _cwc_2489); 
    if (_cwc_2490) 
    { 
      _cwc_2487, _cwc_2486 = StdIO::show( _rso_100_TheTerminal, _rso_99_stdout, n) ; 
      _cwc_2484 = _cwc_2487; 
      _cwc_2485 = _cwc_2486; 
    }
    else
    { 
      _cwc_2484, _cwc_2485 = _dispatch_error_( 2, Terminal::Terminal, TermFile::TermFile, "UTDScalarB:StdIO::show :: Terminal::Terminal TermFile::TermFile int[*] -> Terminal::Terminal TermFile::TermFile ", _rso_100_TheTerminal, _rso_99_stdout, n); 
    }
  }
  return( _cwc_2484, _cwc_2485); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::genarray(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:Array::genarray( int[*] shp { ,NN } , bool[*] val { ,NN } )
/*
 *  genarray :: { int[*] -> { bool[*] -> ( bool[*]),
                              bool -> ( bool[*])},
                  int[+] -> { bool[*] -> ( bool[*]),
                              bool -> ( bool[*])},
                  int[.] -> { bool[*] -> ( bool[*]),
                              bool -> ( bool[*])},
                  int[1] -> { bool[*] -> ( bool[.]),
                              bool -> ( bool[.])}}
 *  dispatching to: ArrayBasics::genarray,
 *                  UTDScalarB:Array::genarray,
 *                  UTDScalarB:Array::genarray
 */
{ 
  bool[*] _cwc_2496 { , NN } ; 
  bool _cwc_2516 { , NN } ; 
  int _cwc_2515 { , NN } ; 
  bool _cwc_2514 { , NN } ; 
  bool _cwc_2513 { , NN } ; 
  int{1} _cwc_2512 { , NN } ; 
  int _cwc_2511 { , NN } ; 
  int[1]{0} _cwc_2510 { , NN } ; 
  bool _cwc_2509 { , NN } ; 
  bool _cwc_2508 { , NN } ; 
  int _cwc_2507 { , NN } ; 
  bool[.] _cwc_2506 { , NN } ; 
  int _cwc_2505 { , NN } ; 
  bool[*] _cwc_2504 { , NN } ; 
  int[+] _cwc_2503 { , NN } ; 
  bool _cwc_2502 { , NN } ; 
  int _cwc_2501 { , NN } ; 
  bool[*] _cwc_2500 { , NN } ; 
  int _cwc_2499 { , NN } ; 
  bool[*] _cwc_2498 { , NN } ; 
  int _cwc_2497 { , NN } ; 

  _cwc_2497 = _dim_A_( shp); 
  _cwc_2515 = 1; 
  _cwc_2516 = _eq_SxS_( _cwc_2497, _cwc_2515); 
  if (_cwc_2516) 
  { 
    _cwc_2503 = _shape_A_( shp); 
    _cwc_2509 = true; 
    _cwc_2512 = 1; 
    _cwc_2510 = [ 0 ]; 
    _cwc_2511 = _sel_VxA_( _cwc_2510, _cwc_2503); 
    _cwc_2513 = _eq_SxS_( _cwc_2511, _cwc_2512); 
    _cwc_2514 = _and_SxS_( _cwc_2513, _cwc_2509); 
    if (_cwc_2514) 
    { 
      _cwc_2505 = _dim_A_( val); 
      _cwc_2507 = 0; 
      _cwc_2508 = _eq_SxS_( _cwc_2505, _cwc_2507); 
      if (_cwc_2508) 
      { 
        _cwc_2506 = UTDScalarB:Array::genarray( shp, val) ; 
        _cwc_2496 = _cwc_2506; 
      }
      else
      { 
        _cwc_2504 = ArrayBasics::genarray( shp, val) ; 
        _cwc_2496 = _cwc_2504; 
      }
    }
    else
    { 
      _cwc_2499 = _dim_A_( val); 
      _cwc_2501 = 0; 
      _cwc_2502 = _eq_SxS_( _cwc_2499, _cwc_2501); 
      if (_cwc_2502) 
      { 
        _cwc_2500 = UTDScalarB:Array::genarray( shp, val) ; 
        _cwc_2496 = _cwc_2500; 
      }
      else
      { 
        _cwc_2498 = ArrayBasics::genarray( shp, val) ; 
        _cwc_2496 = _cwc_2498; 
      }
    }
  }
  else
  { 
    _cwc_2496 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::genarray :: int[*] bool[*] -> bool[*] ", shp, val); 
  }
  return( _cwc_2496); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::genarray(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::genarray( int[*] shp { ,NN } , int[*] val { ,NN } )
/*
 *  genarray :: { int[*] -> { int[*] -> ( int[*]),
                              int -> ( int[.])},
                  int[+] -> { int[*] -> ( int[*]),
                              int -> ( int[.])},
                  int[.] -> { int[*] -> ( int[*]),
                              int -> ( int[.])},
                  int[1] -> { int[*] -> ( int[.]),
                              int -> ( int[.])}}
 *  dispatching to: ArrayBasics::genarray,
 *                  UTDScalarB:Array::genarray
 */
{ 
  int[*] _cwc_2517 { , NN } ; 
  bool _cwc_2537 { , NN } ; 
  int _cwc_2536 { , NN } ; 
  bool _cwc_2535 { , NN } ; 
  bool _cwc_2534 { , NN } ; 
  int{1} _cwc_2533 { , NN } ; 
  int _cwc_2532 { , NN } ; 
  int[1]{0} _cwc_2531 { , NN } ; 
  bool _cwc_2530 { , NN } ; 
  bool _cwc_2529 { , NN } ; 
  int _cwc_2528 { , NN } ; 
  int[.] _cwc_2527 { , NN } ; 
  int _cwc_2526 { , NN } ; 
  int[*] _cwc_2525 { , NN } ; 
  int[+] _cwc_2524 { , NN } ; 
  bool _cwc_2523 { , NN } ; 
  int _cwc_2522 { , NN } ; 
  int[*] _cwc_2521 { , NN } ; 
  int _cwc_2520 { , NN } ; 
  int[*] _cwc_2519 { , NN } ; 
  int _cwc_2518 { , NN } ; 

  _cwc_2518 = _dim_A_( shp); 
  _cwc_2536 = 1; 
  _cwc_2537 = _eq_SxS_( _cwc_2518, _cwc_2536); 
  if (_cwc_2537) 
  { 
    _cwc_2524 = _shape_A_( shp); 
    _cwc_2530 = true; 
    _cwc_2533 = 1; 
    _cwc_2531 = [ 0 ]; 
    _cwc_2532 = _sel_VxA_( _cwc_2531, _cwc_2524); 
    _cwc_2534 = _eq_SxS_( _cwc_2532, _cwc_2533); 
    _cwc_2535 = _and_SxS_( _cwc_2534, _cwc_2530); 
    if (_cwc_2535) 
    { 
      _cwc_2526 = _dim_A_( val); 
      _cwc_2528 = 0; 
      _cwc_2529 = _eq_SxS_( _cwc_2526, _cwc_2528); 
      if (_cwc_2529) 
      { 
        _cwc_2527 = UTDScalarB:Array::genarray( shp, val) ; 
        _cwc_2517 = _cwc_2527; 
      }
      else
      { 
        _cwc_2525 = ArrayBasics::genarray( shp, val) ; 
        _cwc_2517 = _cwc_2525; 
      }
    }
    else
    { 
      _cwc_2520 = _dim_A_( val); 
      _cwc_2522 = 0; 
      _cwc_2523 = _eq_SxS_( _cwc_2520, _cwc_2522); 
      if (_cwc_2523) 
      { 
        _cwc_2521 = ArrayBasics::genarray( shp, val) ; 
        _cwc_2517 = _cwc_2521; 
      }
      else
      { 
        _cwc_2519 = ArrayBasics::genarray( shp, val) ; 
        _cwc_2517 = _cwc_2519; 
      }
    }
  }
  else
  { 
    _cwc_2517 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::genarray :: int[*] int[*] -> int[*] ", shp, val); 
  }
  return( _cwc_2517); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::comaXBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[.] UTDScalarB::comaXBB( bool[*] y { ,NN } )
/*
 *  comaXBB :: { bool[*] -> ( bool[.]),
                 bool[+] -> ( bool[.])}
 *  dispatching to: UTDScalarB::comaXBB
 */
{ 
  bool[.] _cwc_2538 { , NN } ; 
  bool _cwc_2542 { , NN } ; 
  int _cwc_2541 { , NN } ; 
  int _cwc_2540 { , NN } ; 
  bool[.] _cwc_2539 { , NN } ; 

  _cwc_2540 = _dim_A_( y); 
  _cwc_2541 = 0; 
  _cwc_2542 = _gt_SxS_( _cwc_2540, _cwc_2541); 
  if (_cwc_2542) 
  { 
    _cwc_2539 = UTDScalarB::comaXBB( y) ; 
    _cwc_2538 = _cwc_2539; 
  }
  else
  { 
    _cwc_2538 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaXBB :: bool[*] -> bool[.] ", y); 
  }
  return( _cwc_2538); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::rhoIBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::rhoIBB( int[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  rhoIBB :: { int[*] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[.,.,.]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[+]),
                            bool[3] -> ( bool[.,.,.]),
                            bool[2] -> ( bool[.,.,.]),
                            bool[16] -> ( bool[.,.])},
                int[+] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[.,.,.]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[+]),
                            bool[3] -> ( bool[.,.,.]),
                            bool[2] -> ( bool[.,.,.]),
                            bool[16] -> ( bool[.,.])},
                int[.] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[.,.,.]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[+]),
                            bool[3] -> ( bool[.,.,.]),
                            bool[2] -> ( bool[.,.,.]),
                            bool[16] -> ( bool[.,.])},
                int[3] -> { bool[*] -> ( bool[.,.,.]),
                            bool -> ( bool[.,.,.]),
                            bool[+] -> ( bool[.,.,.]),
                            bool[.] -> ( bool[.,.,.]),
                            bool[3] -> ( bool[.,.,.]),
                            bool[2] -> ( bool[.,.,.])},
                int[2] -> { bool[*] -> ( bool[.,.]),
                            bool[+] -> ( bool[.,.]),
                            bool[.] -> ( bool[.,.]),
                            bool[3] -> ( --),
                            bool[2] -> ( --),
                            bool[16] -> ( bool[.,.])}}
 *  dispatching to: UTDScalarB::rhoIBB,
 *                  UTDScalarB::rhoIBB,
 *                  UTDScalarB::rhoIBB,
 *                  UTDScalarB::rhoIBB,
 *                  UTDScalarB::rhoIBB
 */
{ 
  bool[*] _cwc_2543 { , NN } ; 
  bool _cwc_2641 { , NN } ; 
  int _cwc_2640 { , NN } ; 
  bool _cwc_2639 { , NN } ; 
  bool _cwc_2638 { , NN } ; 
  int{3} _cwc_2637 { , NN } ; 
  int _cwc_2636 { , NN } ; 
  int[1]{0} _cwc_2635 { , NN } ; 
  bool _cwc_2634 { , NN } ; 
  bool _cwc_2633 { , NN } ; 
  int _cwc_2632 { , NN } ; 
  bool[.,.,.] _cwc_2631 { , NN } ; 
  int _cwc_2630 { , NN } ; 
  bool _cwc_2629 { , NN } ; 
  int _cwc_2628 { , NN } ; 
  bool _cwc_2627 { , NN } ; 
  bool _cwc_2626 { , NN } ; 
  int{3} _cwc_2625 { , NN } ; 
  int _cwc_2624 { , NN } ; 
  int[1]{0} _cwc_2623 { , NN } ; 
  bool _cwc_2622 { , NN } ; 
  bool[.,.,.] _cwc_2621 { , NN } ; 
  bool _cwc_2620 { , NN } ; 
  bool _cwc_2619 { , NN } ; 
  int{2} _cwc_2618 { , NN } ; 
  int _cwc_2617 { , NN } ; 
  int[1]{0} _cwc_2616 { , NN } ; 
  bool _cwc_2615 { , NN } ; 
  bool[.,.,.] _cwc_2614 { , NN } ; 
  int[+] _cwc_2613 { , NN } ; 
  bool[*] _cwc_2612 { , NN } ; 
  int _cwc_2611 { , NN } ; 
  bool[*] _cwc_2610 { , NN } ; 
  bool _cwc_2609 { , NN } ; 
  bool _cwc_2608 { , NN } ; 
  int{2} _cwc_2607 { , NN } ; 
  int _cwc_2606 { , NN } ; 
  int[1]{0} _cwc_2605 { , NN } ; 
  bool _cwc_2604 { , NN } ; 
  bool _cwc_2603 { , NN } ; 
  int _cwc_2602 { , NN } ; 
  bool _cwc_2601 { , NN } ; 
  bool _cwc_2600 { , NN } ; 
  int{3} _cwc_2599 { , NN } ; 
  int _cwc_2598 { , NN } ; 
  int[1]{0} _cwc_2597 { , NN } ; 
  bool _cwc_2596 { , NN } ; 
  bool[*] _cwc_2595 { , NN } ; 
  bool _cwc_2594 { , NN } ; 
  bool _cwc_2593 { , NN } ; 
  int{2} _cwc_2592 { , NN } ; 
  int _cwc_2591 { , NN } ; 
  int[1]{0} _cwc_2590 { , NN } ; 
  bool _cwc_2589 { , NN } ; 
  bool[*] _cwc_2588 { , NN } ; 
  bool _cwc_2587 { , NN } ; 
  bool _cwc_2586 { , NN } ; 
  int{16} _cwc_2585 { , NN } ; 
  int _cwc_2584 { , NN } ; 
  int[1]{0} _cwc_2583 { , NN } ; 
  bool _cwc_2582 { , NN } ; 
  bool[.,.] _cwc_2581 { , NN } ; 
  int[+] _cwc_2580 { , NN } ; 
  bool[*] _cwc_2579 { , NN } ; 
  int _cwc_2578 { , NN } ; 
  bool[*] _cwc_2577 { , NN } ; 
  int[+] _cwc_2576 { , NN } ; 
  bool _cwc_2575 { , NN } ; 
  int _cwc_2574 { , NN } ; 
  bool[*] _cwc_2573 { , NN } ; 
  int _cwc_2572 { , NN } ; 
  bool _cwc_2571 { , NN } ; 
  int _cwc_2570 { , NN } ; 
  bool _cwc_2569 { , NN } ; 
  bool _cwc_2568 { , NN } ; 
  int{3} _cwc_2567 { , NN } ; 
  int _cwc_2566 { , NN } ; 
  int[1]{0} _cwc_2565 { , NN } ; 
  bool _cwc_2564 { , NN } ; 
  bool[*] _cwc_2563 { , NN } ; 
  bool _cwc_2562 { , NN } ; 
  bool _cwc_2561 { , NN } ; 
  int{2} _cwc_2560 { , NN } ; 
  int _cwc_2559 { , NN } ; 
  int[1]{0} _cwc_2558 { , NN } ; 
  bool _cwc_2557 { , NN } ; 
  bool[*] _cwc_2556 { , NN } ; 
  bool _cwc_2555 { , NN } ; 
  bool _cwc_2554 { , NN } ; 
  int{16} _cwc_2553 { , NN } ; 
  int _cwc_2552 { , NN } ; 
  int[1]{0} _cwc_2551 { , NN } ; 
  bool _cwc_2550 { , NN } ; 
  bool[*] _cwc_2549 { , NN } ; 
  int[+] _cwc_2548 { , NN } ; 
  bool[*] _cwc_2547 { , NN } ; 
  int _cwc_2546 { , NN } ; 
  bool[*] _cwc_2545 { , NN } ; 
  int _cwc_2544 { , NN } ; 

  _cwc_2544 = _dim_A_( x); 
  _cwc_2640 = 1; 
  _cwc_2641 = _eq_SxS_( _cwc_2544, _cwc_2640); 
  if (_cwc_2641) 
  { 
    _cwc_2576 = _shape_A_( x); 
    _cwc_2634 = true; 
    _cwc_2637 = 3; 
    _cwc_2635 = [ 0 ]; 
    _cwc_2636 = _sel_VxA_( _cwc_2635, _cwc_2576); 
    _cwc_2638 = _eq_SxS_( _cwc_2636, _cwc_2637); 
    _cwc_2639 = _and_SxS_( _cwc_2638, _cwc_2634); 
    if (_cwc_2639) 
    { 
      _cwc_2630 = _dim_A_( y); 
      _cwc_2632 = 0; 
      _cwc_2633 = _eq_SxS_( _cwc_2630, _cwc_2632); 
      if (_cwc_2633) 
      { 
        _cwc_2631 = UTDScalarB::rhoIBB( x, y) ; 
        _cwc_2543 = _cwc_2631; 
      }
      else
      { 
        _cwc_2611 = _dim_A_( y); 
        _cwc_2628 = 1; 
        _cwc_2629 = _eq_SxS_( _cwc_2611, _cwc_2628); 
        if (_cwc_2629) 
        { 
          _cwc_2613 = _shape_A_( y); 
          _cwc_2622 = true; 
          _cwc_2625 = 3; 
          _cwc_2623 = [ 0 ]; 
          _cwc_2624 = _sel_VxA_( _cwc_2623, _cwc_2613); 
          _cwc_2626 = _eq_SxS_( _cwc_2624, _cwc_2625); 
          _cwc_2627 = _and_SxS_( _cwc_2626, _cwc_2622); 
          if (_cwc_2627) 
          { 
            _cwc_2621 = UTDScalarB::rhoIBB( x, y) ; 
            _cwc_2543 = _cwc_2621; 
          }
          else
          { 
            _cwc_2615 = true; 
            _cwc_2618 = 2; 
            _cwc_2616 = [ 0 ]; 
            _cwc_2617 = _sel_VxA_( _cwc_2616, _cwc_2613); 
            _cwc_2619 = _eq_SxS_( _cwc_2617, _cwc_2618); 
            _cwc_2620 = _and_SxS_( _cwc_2619, _cwc_2615); 
            if (_cwc_2620) 
            { 
              _cwc_2614 = UTDScalarB::rhoIBB( x, y) ; 
              _cwc_2543 = _cwc_2614; 
            }
            else
            { 
              _cwc_2612 = UTDScalarB::rhoIBB( x, y) ; 
              _cwc_2543 = _cwc_2612; 
            }
          }
        }
        else
        { 
          _cwc_2610 = UTDScalarB::rhoIBB( x, y) ; 
          _cwc_2543 = _cwc_2610; 
        }
      }
    }
    else
    { 
      _cwc_2604 = true; 
      _cwc_2607 = 2; 
      _cwc_2605 = [ 0 ]; 
      _cwc_2606 = _sel_VxA_( _cwc_2605, _cwc_2576); 
      _cwc_2608 = _eq_SxS_( _cwc_2606, _cwc_2607); 
      _cwc_2609 = _and_SxS_( _cwc_2608, _cwc_2604); 
      if (_cwc_2609) 
      { 
        _cwc_2578 = _dim_A_( y); 
        _cwc_2602 = 1; 
        _cwc_2603 = _eq_SxS_( _cwc_2578, _cwc_2602); 
        if (_cwc_2603) 
        { 
          _cwc_2580 = _shape_A_( y); 
          _cwc_2596 = true; 
          _cwc_2599 = 3; 
          _cwc_2597 = [ 0 ]; 
          _cwc_2598 = _sel_VxA_( _cwc_2597, _cwc_2580); 
          _cwc_2600 = _eq_SxS_( _cwc_2598, _cwc_2599); 
          _cwc_2601 = _and_SxS_( _cwc_2600, _cwc_2596); 
          if (_cwc_2601) 
          { 
            _cwc_2595 = UTDScalarB::rhoIBB( x, y) ; 
            _cwc_2543 = _cwc_2595; 
          }
          else
          { 
            _cwc_2589 = true; 
            _cwc_2592 = 2; 
            _cwc_2590 = [ 0 ]; 
            _cwc_2591 = _sel_VxA_( _cwc_2590, _cwc_2580); 
            _cwc_2593 = _eq_SxS_( _cwc_2591, _cwc_2592); 
            _cwc_2594 = _and_SxS_( _cwc_2593, _cwc_2589); 
            if (_cwc_2594) 
            { 
              _cwc_2588 = UTDScalarB::rhoIBB( x, y) ; 
              _cwc_2543 = _cwc_2588; 
            }
            else
            { 
              _cwc_2582 = true; 
              _cwc_2585 = 16; 
              _cwc_2583 = [ 0 ]; 
              _cwc_2584 = _sel_VxA_( _cwc_2583, _cwc_2580); 
              _cwc_2586 = _eq_SxS_( _cwc_2584, _cwc_2585); 
              _cwc_2587 = _and_SxS_( _cwc_2586, _cwc_2582); 
              if (_cwc_2587) 
              { 
                _cwc_2581 = UTDScalarB::rhoIBB( x, y) ; 
                _cwc_2543 = _cwc_2581; 
              }
              else
              { 
                _cwc_2579 = UTDScalarB::rhoIBB( x, y) ; 
                _cwc_2543 = _cwc_2579; 
              }
            }
          }
        }
        else
        { 
          _cwc_2577 = UTDScalarB::rhoIBB( x, y) ; 
          _cwc_2543 = _cwc_2577; 
        }
      }
      else
      { 
        _cwc_2572 = _dim_A_( y); 
        _cwc_2574 = 0; 
        _cwc_2575 = _eq_SxS_( _cwc_2572, _cwc_2574); 
        if (_cwc_2575) 
        { 
          _cwc_2573 = UTDScalarB::rhoIBB( x, y) ; 
          _cwc_2543 = _cwc_2573; 
        }
        else
        { 
          _cwc_2546 = _dim_A_( y); 
          _cwc_2570 = 1; 
          _cwc_2571 = _eq_SxS_( _cwc_2546, _cwc_2570); 
          if (_cwc_2571) 
          { 
            _cwc_2548 = _shape_A_( y); 
            _cwc_2564 = true; 
            _cwc_2567 = 3; 
            _cwc_2565 = [ 0 ]; 
            _cwc_2566 = _sel_VxA_( _cwc_2565, _cwc_2548); 
            _cwc_2568 = _eq_SxS_( _cwc_2566, _cwc_2567); 
            _cwc_2569 = _and_SxS_( _cwc_2568, _cwc_2564); 
            if (_cwc_2569) 
            { 
              _cwc_2563 = UTDScalarB::rhoIBB( x, y) ; 
              _cwc_2543 = _cwc_2563; 
            }
            else
            { 
              _cwc_2557 = true; 
              _cwc_2560 = 2; 
              _cwc_2558 = [ 0 ]; 
              _cwc_2559 = _sel_VxA_( _cwc_2558, _cwc_2548); 
              _cwc_2561 = _eq_SxS_( _cwc_2559, _cwc_2560); 
              _cwc_2562 = _and_SxS_( _cwc_2561, _cwc_2557); 
              if (_cwc_2562) 
              { 
                _cwc_2556 = UTDScalarB::rhoIBB( x, y) ; 
                _cwc_2543 = _cwc_2556; 
              }
              else
              { 
                _cwc_2550 = true; 
                _cwc_2553 = 16; 
                _cwc_2551 = [ 0 ]; 
                _cwc_2552 = _sel_VxA_( _cwc_2551, _cwc_2548); 
                _cwc_2554 = _eq_SxS_( _cwc_2552, _cwc_2553); 
                _cwc_2555 = _and_SxS_( _cwc_2554, _cwc_2550); 
                if (_cwc_2555) 
                { 
                  _cwc_2549 = UTDScalarB::rhoIBB( x, y) ; 
                  _cwc_2543 = _cwc_2549; 
                }
                else
                { 
                  _cwc_2547 = UTDScalarB::rhoIBB( x, y) ; 
                  _cwc_2543 = _cwc_2547; 
                }
              }
            }
          }
          else
          { 
            _cwc_2545 = UTDScalarB::rhoIBB( x, y) ; 
            _cwc_2543 = _cwc_2545; 
          }
        }
      }
    }
  }
  else
  { 
    _cwc_2543 = _dispatch_error_( 1, bool[*], "UTDScalarB::rhoIBB :: int[*] bool[*] -> bool[*] ", x, y); 
  }
  return( _cwc_2543); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::GTXXB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[14] UTDScalarB::GTXXB()
/*
 *  GTXXB :: ( bool[14])
 *  dispatching to: UTDScalarB::GTXXB
 */
{ 
  bool[14] _cwc_2642 { , NN } ; 
  bool[14] _cwc_2643 { , NN } ; 

  _cwc_2643 = UTDScalarB::GTXXB() ; 
  _cwc_2642 = _cwc_2643; 
  return( _cwc_2642); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::jotdotgtBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB::jotdotgtBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  jotdotgtBBB :: { bool[*] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[+] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[.] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[4] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])}}
 *  dispatching to: UTDScalarB::jotdotgtBBB,
 *                  UTDScalarB::jotdotgtBBB
 */
{ 
  bool[+] _cwc_2644 { , NN } ; 
  bool _cwc_2705 { , NN } ; 
  int _cwc_2704 { , NN } ; 
  int _cwc_2703 { , NN } ; 
  bool _cwc_2702 { , NN } ; 
  int _cwc_2701 { , NN } ; 
  bool _cwc_2700 { , NN } ; 
  bool _cwc_2699 { , NN } ; 
  int{4} _cwc_2698 { , NN } ; 
  int _cwc_2697 { , NN } ; 
  int[1]{0} _cwc_2696 { , NN } ; 
  bool _cwc_2695 { , NN } ; 
  bool _cwc_2694 { , NN } ; 
  int _cwc_2693 { , NN } ; 
  int _cwc_2692 { , NN } ; 
  bool _cwc_2691 { , NN } ; 
  int _cwc_2690 { , NN } ; 
  bool _cwc_2689 { , NN } ; 
  bool _cwc_2688 { , NN } ; 
  int{4} _cwc_2687 { , NN } ; 
  int _cwc_2686 { , NN } ; 
  int[1]{0} _cwc_2685 { , NN } ; 
  bool _cwc_2684 { , NN } ; 
  bool[4,4] _cwc_2683 { , NN } ; 
  int[+] _cwc_2682 { , NN } ; 
  bool[+] _cwc_2681 { , NN } ; 
  int _cwc_2680 { , NN } ; 
  bool[+] _cwc_2679 { , NN } ; 
  int[+] _cwc_2678 { , NN } ; 
  bool _cwc_2677 { , NN } ; 
  int _cwc_2676 { , NN } ; 
  int _cwc_2675 { , NN } ; 
  bool _cwc_2674 { , NN } ; 
  int _cwc_2673 { , NN } ; 
  bool _cwc_2672 { , NN } ; 
  bool _cwc_2671 { , NN } ; 
  int{4} _cwc_2670 { , NN } ; 
  int _cwc_2669 { , NN } ; 
  int[1]{0} _cwc_2668 { , NN } ; 
  bool _cwc_2667 { , NN } ; 
  bool[+] _cwc_2666 { , NN } ; 
  int[+] _cwc_2665 { , NN } ; 
  bool[+] _cwc_2664 { , NN } ; 
  int _cwc_2663 { , NN } ; 
  bool[+] _cwc_2662 { , NN } ; 
  int _cwc_2661 { , NN } ; 
  bool _cwc_2660 { , NN } ; 
  int _cwc_2659 { , NN } ; 
  int _cwc_2658 { , NN } ; 
  bool _cwc_2657 { , NN } ; 
  int _cwc_2656 { , NN } ; 
  bool _cwc_2655 { , NN } ; 
  bool _cwc_2654 { , NN } ; 
  int{4} _cwc_2653 { , NN } ; 
  int _cwc_2652 { , NN } ; 
  int[1]{0} _cwc_2651 { , NN } ; 
  bool _cwc_2650 { , NN } ; 
  bool[+] _cwc_2649 { , NN } ; 
  int[+] _cwc_2648 { , NN } ; 
  bool[+] _cwc_2647 { , NN } ; 
  int _cwc_2646 { , NN } ; 
  bool[+] _cwc_2645 { , NN } ; 

  _cwc_2703 = _dim_A_( x); 
  _cwc_2704 = 0; 
  _cwc_2705 = _gt_SxS_( _cwc_2703, _cwc_2704); 
  if (_cwc_2705) 
  { 
    _cwc_2661 = _dim_A_( x); 
    _cwc_2701 = 1; 
    _cwc_2702 = _eq_SxS_( _cwc_2661, _cwc_2701); 
    if (_cwc_2702) 
    { 
      _cwc_2678 = _shape_A_( x); 
      _cwc_2695 = true; 
      _cwc_2698 = 4; 
      _cwc_2696 = [ 0 ]; 
      _cwc_2697 = _sel_VxA_( _cwc_2696, _cwc_2678); 
      _cwc_2699 = _eq_SxS_( _cwc_2697, _cwc_2698); 
      _cwc_2700 = _and_SxS_( _cwc_2699, _cwc_2695); 
      if (_cwc_2700) 
      { 
        _cwc_2692 = _dim_A_( y); 
        _cwc_2693 = 0; 
        _cwc_2694 = _gt_SxS_( _cwc_2692, _cwc_2693); 
        if (_cwc_2694) 
        { 
          _cwc_2680 = _dim_A_( y); 
          _cwc_2690 = 1; 
          _cwc_2691 = _eq_SxS_( _cwc_2680, _cwc_2690); 
          if (_cwc_2691) 
          { 
            _cwc_2682 = _shape_A_( y); 
            _cwc_2684 = true; 
            _cwc_2687 = 4; 
            _cwc_2685 = [ 0 ]; 
            _cwc_2686 = _sel_VxA_( _cwc_2685, _cwc_2682); 
            _cwc_2688 = _eq_SxS_( _cwc_2686, _cwc_2687); 
            _cwc_2689 = _and_SxS_( _cwc_2688, _cwc_2684); 
            if (_cwc_2689) 
            { 
              _cwc_2683 = UTDScalarB::jotdotgtBBB( x, y) ; 
              _cwc_2644 = _cwc_2683; 
            }
            else
            { 
              _cwc_2681 = UTDScalarB::jotdotgtBBB( x, y) ; 
              _cwc_2644 = _cwc_2681; 
            }
          }
          else
          { 
            _cwc_2679 = UTDScalarB::jotdotgtBBB( x, y) ; 
            _cwc_2644 = _cwc_2679; 
          }
        }
        else
        { 
          _cwc_2644 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotgtBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
      else
      { 
        _cwc_2675 = _dim_A_( y); 
        _cwc_2676 = 0; 
        _cwc_2677 = _gt_SxS_( _cwc_2675, _cwc_2676); 
        if (_cwc_2677) 
        { 
          _cwc_2663 = _dim_A_( y); 
          _cwc_2673 = 1; 
          _cwc_2674 = _eq_SxS_( _cwc_2663, _cwc_2673); 
          if (_cwc_2674) 
          { 
            _cwc_2665 = _shape_A_( y); 
            _cwc_2667 = true; 
            _cwc_2670 = 4; 
            _cwc_2668 = [ 0 ]; 
            _cwc_2669 = _sel_VxA_( _cwc_2668, _cwc_2665); 
            _cwc_2671 = _eq_SxS_( _cwc_2669, _cwc_2670); 
            _cwc_2672 = _and_SxS_( _cwc_2671, _cwc_2667); 
            if (_cwc_2672) 
            { 
              _cwc_2666 = UTDScalarB::jotdotgtBBB( x, y) ; 
              _cwc_2644 = _cwc_2666; 
            }
            else
            { 
              _cwc_2664 = UTDScalarB::jotdotgtBBB( x, y) ; 
              _cwc_2644 = _cwc_2664; 
            }
          }
          else
          { 
            _cwc_2662 = UTDScalarB::jotdotgtBBB( x, y) ; 
            _cwc_2644 = _cwc_2662; 
          }
        }
        else
        { 
          _cwc_2644 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotgtBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_2658 = _dim_A_( y); 
      _cwc_2659 = 0; 
      _cwc_2660 = _gt_SxS_( _cwc_2658, _cwc_2659); 
      if (_cwc_2660) 
      { 
        _cwc_2646 = _dim_A_( y); 
        _cwc_2656 = 1; 
        _cwc_2657 = _eq_SxS_( _cwc_2646, _cwc_2656); 
        if (_cwc_2657) 
        { 
          _cwc_2648 = _shape_A_( y); 
          _cwc_2650 = true; 
          _cwc_2653 = 4; 
          _cwc_2651 = [ 0 ]; 
          _cwc_2652 = _sel_VxA_( _cwc_2651, _cwc_2648); 
          _cwc_2654 = _eq_SxS_( _cwc_2652, _cwc_2653); 
          _cwc_2655 = _and_SxS_( _cwc_2654, _cwc_2650); 
          if (_cwc_2655) 
          { 
            _cwc_2649 = UTDScalarB::jotdotgtBBB( x, y) ; 
            _cwc_2644 = _cwc_2649; 
          }
          else
          { 
            _cwc_2647 = UTDScalarB::jotdotgtBBB( x, y) ; 
            _cwc_2644 = _cwc_2647; 
          }
        }
        else
        { 
          _cwc_2645 = UTDScalarB::jotdotgtBBB( x, y) ; 
          _cwc_2644 = _cwc_2645; 
        }
      }
      else
      { 
        _cwc_2644 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotgtBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_2644 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotgtBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
  }
  return( _cwc_2644); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::norBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::norBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  norBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                             bool -> ( bool[*]),
                             bool[+] -> ( bool[+]),
                             bool[.] -> ( bool[4]),
                             bool[4] -> ( bool[4]),
                             bool[.,.,.] -> ( bool[.,.,.])},
                bool -> { bool[*] -> ( bool[*]),
                          bool -> ( bool),
                          bool[+] -> ( bool[+]),
                          bool[.] -> ( bool[4]),
                          bool[4] -> ( bool[4])},
                bool[+] -> { bool[*] -> ( bool[+]),
                             bool -> ( bool[+]),
                             bool[+] -> ( bool[+]),
                             bool[.,.,.] -> ( bool[.,.,.])},
                bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                 bool -> ( bool[.,.,.]),
                                 bool[+] -> ( bool[.,.,.]),
                                 bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::norBBB,
 *                  UTDScalarB::norBBB,
 *                  UTDScalarB::norBBB,
 *                  UTDScalarB::norBBB,
 *                  UTDScalarB::norBBB,
 *                  UTDScalarB::norBBB,
 *                  UTDScalarB::norBBB
 */
{ 
  bool[*] _cwc_2706 { , NN } ; 
  bool _cwc_2759 { , NN } ; 
  int _cwc_2758 { , NN } ; 
  bool _cwc_2757 { , NN } ; 
  int _cwc_2756 { , NN } ; 
  bool _cwc_2755 { , NN } ; 
  int _cwc_2754 { , NN } ; 
  bool _cwc_2753 { , NN } ; 
  int _cwc_2752 { , NN } ; 
  int _cwc_2751 { , NN } ; 
  bool _cwc_2750 { , NN } ; 
  int _cwc_2749 { , NN } ; 
  bool _cwc_2748 { , NN } ; 
  bool _cwc_2747 { , NN } ; 
  int{4} _cwc_2746 { , NN } ; 
  int _cwc_2745 { , NN } ; 
  int[1]{0} _cwc_2744 { , NN } ; 
  bool _cwc_2743 { , NN } ; 
  bool[4] _cwc_2742 { , NN } ; 
  int[+] _cwc_2741 { , NN } ; 
  bool[+] _cwc_2740 { , NN } ; 
  int _cwc_2739 { , NN } ; 
  bool[+] _cwc_2738 { , NN } ; 
  int _cwc_2737 { , NN } ; 
  bool _cwc_2736 { , NN } ; 
  int _cwc_2735 { , NN } ; 
  int _cwc_2734 { , NN } ; 
  bool _cwc_2733 { , NN } ; 
  int _cwc_2732 { , NN } ; 
  bool _cwc_2731 { , NN } ; 
  int _cwc_2730 { , NN } ; 
  bool[.,.,.] _cwc_2729 { , NN } ; 
  int _cwc_2728 { , NN } ; 
  bool _cwc_2727 { , NN } ; 
  int _cwc_2726 { , NN } ; 
  int _cwc_2725 { , NN } ; 
  bool _cwc_2724 { , NN } ; 
  int _cwc_2723 { , NN } ; 
  bool[.,.,.] _cwc_2722 { , NN } ; 
  int _cwc_2721 { , NN } ; 
  bool[+] _cwc_2720 { , NN } ; 
  int _cwc_2719 { , NN } ; 
  bool _cwc_2718 { , NN } ; 
  int _cwc_2717 { , NN } ; 
  bool[+] _cwc_2716 { , NN } ; 
  int _cwc_2715 { , NN } ; 
  bool _cwc_2714 { , NN } ; 
  int _cwc_2713 { , NN } ; 
  int _cwc_2712 { , NN } ; 
  bool _cwc_2711 { , NN } ; 
  int _cwc_2710 { , NN } ; 
  bool[+] _cwc_2709 { , NN } ; 
  int _cwc_2708 { , NN } ; 
  bool[+] _cwc_2707 { , NN } ; 

  _cwc_2737 = _dim_A_( x); 
  _cwc_2758 = 0; 
  _cwc_2759 = _eq_SxS_( _cwc_2737, _cwc_2758); 
  if (_cwc_2759) 
  { 
    _cwc_2754 = _dim_A_( y); 
    _cwc_2756 = 0; 
    _cwc_2757 = _eq_SxS_( _cwc_2754, _cwc_2756); 
    if (_cwc_2757) 
    { 
      _cwc_2755 = UTDScalarB::norBBB( x, y) ; 
      _cwc_2706 = _cwc_2755; 
    }
    else
    { 
      _cwc_2751 = _dim_A_( y); 
      _cwc_2752 = 0; 
      _cwc_2753 = _gt_SxS_( _cwc_2751, _cwc_2752); 
      if (_cwc_2753) 
      { 
        _cwc_2739 = _dim_A_( y); 
        _cwc_2749 = 1; 
        _cwc_2750 = _eq_SxS_( _cwc_2739, _cwc_2749); 
        if (_cwc_2750) 
        { 
          _cwc_2741 = _shape_A_( y); 
          _cwc_2743 = true; 
          _cwc_2746 = 4; 
          _cwc_2744 = [ 0 ]; 
          _cwc_2745 = _sel_VxA_( _cwc_2744, _cwc_2741); 
          _cwc_2747 = _eq_SxS_( _cwc_2745, _cwc_2746); 
          _cwc_2748 = _and_SxS_( _cwc_2747, _cwc_2743); 
          if (_cwc_2748) 
          { 
            _cwc_2742 = UTDScalarB::norBBB( x, y) ; 
            _cwc_2706 = _cwc_2742; 
          }
          else
          { 
            _cwc_2740 = UTDScalarB::norBBB( x, y) ; 
            _cwc_2706 = _cwc_2740; 
          }
        }
        else
        { 
          _cwc_2738 = UTDScalarB::norBBB( x, y) ; 
          _cwc_2706 = _cwc_2738; 
        }
      }
      else
      { 
        _cwc_2706 = _dispatch_error_( 1, bool[*], "UTDScalarB::norBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_2734 = _dim_A_( x); 
    _cwc_2735 = 0; 
    _cwc_2736 = _gt_SxS_( _cwc_2734, _cwc_2735); 
    if (_cwc_2736) 
    { 
      _cwc_2719 = _dim_A_( x); 
      _cwc_2732 = 3; 
      _cwc_2733 = _eq_SxS_( _cwc_2719, _cwc_2732); 
      if (_cwc_2733) 
      { 
        _cwc_2728 = _dim_A_( y); 
        _cwc_2730 = 0; 
        _cwc_2731 = _eq_SxS_( _cwc_2728, _cwc_2730); 
        if (_cwc_2731) 
        { 
          _cwc_2729 = UTDScalarB::norBBB( x, y) ; 
          _cwc_2706 = _cwc_2729; 
        }
        else
        { 
          _cwc_2725 = _dim_A_( y); 
          _cwc_2726 = 0; 
          _cwc_2727 = _gt_SxS_( _cwc_2725, _cwc_2726); 
          if (_cwc_2727) 
          { 
            _cwc_2721 = _dim_A_( y); 
            _cwc_2723 = 3; 
            _cwc_2724 = _eq_SxS_( _cwc_2721, _cwc_2723); 
            if (_cwc_2724) 
            { 
              _cwc_2722 = UTDScalarB::norBBB( x, y) ; 
              _cwc_2706 = _cwc_2722; 
            }
            else
            { 
              _cwc_2720 = UTDScalarB::norBBB( x, y) ; 
              _cwc_2706 = _cwc_2720; 
            }
          }
          else
          { 
            _cwc_2706 = _dispatch_error_( 1, bool[*], "UTDScalarB::norBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_2715 = _dim_A_( y); 
        _cwc_2717 = 0; 
        _cwc_2718 = _eq_SxS_( _cwc_2715, _cwc_2717); 
        if (_cwc_2718) 
        { 
          _cwc_2716 = UTDScalarB::norBBB( x, y) ; 
          _cwc_2706 = _cwc_2716; 
        }
        else
        { 
          _cwc_2712 = _dim_A_( y); 
          _cwc_2713 = 0; 
          _cwc_2714 = _gt_SxS_( _cwc_2712, _cwc_2713); 
          if (_cwc_2714) 
          { 
            _cwc_2708 = _dim_A_( y); 
            _cwc_2710 = 3; 
            _cwc_2711 = _eq_SxS_( _cwc_2708, _cwc_2710); 
            if (_cwc_2711) 
            { 
              _cwc_2709 = UTDScalarB::norBBB( x, y) ; 
              _cwc_2706 = _cwc_2709; 
            }
            else
            { 
              _cwc_2707 = UTDScalarB::norBBB( x, y) ; 
              _cwc_2706 = _cwc_2707; 
            }
          }
          else
          { 
            _cwc_2706 = _dispatch_error_( 1, bool[*], "UTDScalarB::norBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_2706 = _dispatch_error_( 1, bool[*], "UTDScalarB::norBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_2706); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::NORXXB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[14] UTDScalarB::NORXXB()
/*
 *  NORXXB :: ( bool[14])
 *  dispatching to: UTDScalarB::NORXXB
 */
{ 
  bool[14] _cwc_2760 { , NN } ; 
  bool[14] _cwc_2761 { , NN } ; 

  _cwc_2761 = UTDScalarB::NORXXB() ; 
  _cwc_2760 = _cwc_2761; 
  return( _cwc_2760); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::APEXFUZZEQ(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool UTDScalarB::APEXFUZZEQ( double[*] x { ,NN } , double[*] y { ,NN } , double[*] QUADct { ,NN } )
/*
 *  APEXFUZZEQ :: { double[*] -> { double[*] -> { double[*] -> ( bool),
                                                  double -> ( bool)},
                                   double -> { double[*] -> ( bool),
                                               double -> ( bool)}},
                    double -> { double[*] -> { double[*] -> ( bool),
                                               double -> ( bool)},
                                double -> { double[*] -> ( bool),
                                            double -> ( bool)}}}
 *  dispatching to: UTDScalarB::APEXFUZZEQ
 */
{ 
  bool _cwc_2762 { , NN } ; 
  bool _cwc_2772 { , NN } ; 
  int _cwc_2771 { , NN } ; 
  bool _cwc_2770 { , NN } ; 
  int _cwc_2769 { , NN } ; 
  bool _cwc_2768 { , NN } ; 
  int _cwc_2767 { , NN } ; 
  bool _cwc_2766 { , NN } ; 
  int _cwc_2765 { , NN } ; 
  int _cwc_2764 { , NN } ; 
  int _cwc_2763 { , NN } ; 

  _cwc_2763 = _dim_A_( x); 
  _cwc_2771 = 0; 
  _cwc_2772 = _eq_SxS_( _cwc_2763, _cwc_2771); 
  if (_cwc_2772) 
  { 
    _cwc_2764 = _dim_A_( y); 
    _cwc_2769 = 0; 
    _cwc_2770 = _eq_SxS_( _cwc_2764, _cwc_2769); 
    if (_cwc_2770) 
    { 
      _cwc_2765 = _dim_A_( QUADct); 
      _cwc_2767 = 0; 
      _cwc_2768 = _eq_SxS_( _cwc_2765, _cwc_2767); 
      if (_cwc_2768) 
      { 
        _cwc_2766 = UTDScalarB::APEXFUZZEQ( x, y, QUADct) ; 
        _cwc_2762 = _cwc_2766; 
      }
      else
      { 
        _cwc_2762 = _dispatch_error_( 1, bool, "UTDScalarB::APEXFUZZEQ :: double[*] double[*] double[*] -> bool ", x, y, QUADct); 
      }
    }
    else
    { 
      _cwc_2762 = _dispatch_error_( 1, bool, "UTDScalarB::APEXFUZZEQ :: double[*] double[*] double[*] -> bool ", x, y, QUADct); 
    }
  }
  else
  { 
    _cwc_2762 = _dispatch_error_( 1, bool, "UTDScalarB::APEXFUZZEQ :: double[*] double[*] double[*] -> bool ", x, y, QUADct); 
  }
  return( _cwc_2762); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::NANDXXB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[14] UTDScalarB::NANDXXB()
/*
 *  NANDXXB :: ( bool[14])
 *  dispatching to: UTDScalarB::NANDXXB
 */
{ 
  bool[14] _cwc_2773 { , NN } ; 
  bool[14] _cwc_2774 { , NN } ; 

  _cwc_2774 = UTDScalarB::NANDXXB() ; 
  _cwc_2773 = _cwc_2774; 
  return( _cwc_2773); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::barBBI(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int UTDScalarB::barBBI( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  barBBI :: { bool[*] -> { bool[*] -> ( int),
                             bool -> ( int)},
                bool -> { bool[*] -> ( int),
                          bool -> ( int)}}
 *  dispatching to: UTDScalarB::barBBI
 */
{ 
  int _cwc_2775 { , NN } ; 
  bool _cwc_2782 { , NN } ; 
  int _cwc_2781 { , NN } ; 
  bool _cwc_2780 { , NN } ; 
  int _cwc_2779 { , NN } ; 
  int _cwc_2778 { , NN } ; 
  int _cwc_2777 { , NN } ; 
  int _cwc_2776 { , NN } ; 

  _cwc_2776 = _dim_A_( x); 
  _cwc_2781 = 0; 
  _cwc_2782 = _eq_SxS_( _cwc_2776, _cwc_2781); 
  if (_cwc_2782) 
  { 
    _cwc_2777 = _dim_A_( y); 
    _cwc_2779 = 0; 
    _cwc_2780 = _eq_SxS_( _cwc_2777, _cwc_2779); 
    if (_cwc_2780) 
    { 
      _cwc_2778 = UTDScalarB::barBBI( x, y) ; 
      _cwc_2775 = _cwc_2778; 
    }
    else
    { 
      _cwc_2775 = _dispatch_error_( 1, int, "UTDScalarB::barBBI :: bool[*] bool[*] -> int ", x, y); 
    }
  }
  else
  { 
    _cwc_2775 = _dispatch_error_( 1, int, "UTDScalarB::barBBI :: bool[*] bool[*] -> int ", x, y); 
  }
  return( _cwc_2775); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::eqBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::eqBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  eqBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[*]),
                            bool[+] -> ( bool[+]),
                            bool[.,.] -> ( bool[.,.]),
                            bool[.,.,.] -> ( bool[.,.,.]),
                            bool[.] -> ( bool[4]),
                            bool[4] -> ( bool[4])},
               bool -> { bool[*] -> ( bool[*]),
                         bool -> ( bool),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[4]),
                         bool[4] -> ( bool[4])},
               bool[+] -> { bool[*] -> ( bool[+]),
                            bool -> ( bool[+]),
                            bool[+] -> ( bool[+]),
                            bool[.,.] -> ( bool[.,.]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool[.,.] -> { bool[*] -> ( bool[.,.]),
                              bool -> ( --),
                              bool[+] -> ( bool[.,.]),
                              bool[.,.] -> ( bool[.,.])},
               bool[4,4] -> { bool[*] -> ( bool[.,.]),
                              bool -> ( --),
                              bool[+] -> ( bool[.,.]),
                              bool[.,.] -> ( bool[.,.])},
               bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                bool -> ( bool[.,.,.]),
                                bool[+] -> ( bool[.,.,.]),
                                bool[.,.] -> ( --),
                                bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB,
 *                  UTDScalarB::eqBBB
 */
{ 
  bool[*] _cwc_2783 { , NN } ; 
  bool _cwc_2880 { , NN } ; 
  int _cwc_2879 { , NN } ; 
  bool _cwc_2878 { , NN } ; 
  int _cwc_2877 { , NN } ; 
  bool _cwc_2876 { , NN } ; 
  int _cwc_2875 { , NN } ; 
  bool _cwc_2874 { , NN } ; 
  int _cwc_2873 { , NN } ; 
  int _cwc_2872 { , NN } ; 
  bool _cwc_2871 { , NN } ; 
  int _cwc_2870 { , NN } ; 
  bool _cwc_2869 { , NN } ; 
  bool _cwc_2868 { , NN } ; 
  int{4} _cwc_2867 { , NN } ; 
  int _cwc_2866 { , NN } ; 
  int[1]{0} _cwc_2865 { , NN } ; 
  bool _cwc_2864 { , NN } ; 
  bool[4] _cwc_2863 { , NN } ; 
  int[+] _cwc_2862 { , NN } ; 
  bool[+] _cwc_2861 { , NN } ; 
  int _cwc_2860 { , NN } ; 
  bool[+] _cwc_2859 { , NN } ; 
  int _cwc_2858 { , NN } ; 
  bool _cwc_2857 { , NN } ; 
  int _cwc_2856 { , NN } ; 
  int _cwc_2855 { , NN } ; 
  bool _cwc_2854 { , NN } ; 
  int _cwc_2853 { , NN } ; 
  bool _cwc_2852 { , NN } ; 
  bool _cwc_2851 { , NN } ; 
  int{4} _cwc_2850 { , NN } ; 
  int _cwc_2849 { , NN } ; 
  int[1]{1} _cwc_2848 { , NN } ; 
  bool _cwc_2847 { , NN } ; 
  bool _cwc_2846 { , NN } ; 
  int{4} _cwc_2845 { , NN } ; 
  int _cwc_2844 { , NN } ; 
  int[1]{0} _cwc_2843 { , NN } ; 
  bool _cwc_2842 { , NN } ; 
  bool _cwc_2841 { , NN } ; 
  int _cwc_2840 { , NN } ; 
  bool[+] _cwc_2839 { , NN } ; 
  int _cwc_2838 { , NN } ; 
  bool _cwc_2837 { , NN } ; 
  int _cwc_2836 { , NN } ; 
  int _cwc_2835 { , NN } ; 
  bool _cwc_2834 { , NN } ; 
  int _cwc_2833 { , NN } ; 
  bool[.,.] _cwc_2832 { , NN } ; 
  int _cwc_2831 { , NN } ; 
  bool[+] _cwc_2830 { , NN } ; 
  int[+] _cwc_2829 { , NN } ; 
  bool _cwc_2828 { , NN } ; 
  int _cwc_2827 { , NN } ; 
  bool[+] _cwc_2826 { , NN } ; 
  int _cwc_2825 { , NN } ; 
  bool _cwc_2824 { , NN } ; 
  int _cwc_2823 { , NN } ; 
  int _cwc_2822 { , NN } ; 
  bool _cwc_2821 { , NN } ; 
  int _cwc_2820 { , NN } ; 
  bool[+] _cwc_2819 { , NN } ; 
  int _cwc_2818 { , NN } ; 
  bool[+] _cwc_2817 { , NN } ; 
  bool _cwc_2816 { , NN } ; 
  int _cwc_2815 { , NN } ; 
  bool _cwc_2814 { , NN } ; 
  int _cwc_2813 { , NN } ; 
  bool[.,.,.] _cwc_2812 { , NN } ; 
  int _cwc_2811 { , NN } ; 
  bool _cwc_2810 { , NN } ; 
  int _cwc_2809 { , NN } ; 
  int _cwc_2808 { , NN } ; 
  bool _cwc_2807 { , NN } ; 
  int _cwc_2806 { , NN } ; 
  bool[+] _cwc_2805 { , NN } ; 
  bool _cwc_2804 { , NN } ; 
  int _cwc_2803 { , NN } ; 
  bool[.,.,.] _cwc_2802 { , NN } ; 
  int _cwc_2801 { , NN } ; 
  bool[+] _cwc_2800 { , NN } ; 
  int _cwc_2799 { , NN } ; 
  bool _cwc_2798 { , NN } ; 
  int _cwc_2797 { , NN } ; 
  bool[+] _cwc_2796 { , NN } ; 
  int _cwc_2795 { , NN } ; 
  bool _cwc_2794 { , NN } ; 
  int _cwc_2793 { , NN } ; 
  int _cwc_2792 { , NN } ; 
  bool _cwc_2791 { , NN } ; 
  int _cwc_2790 { , NN } ; 
  bool[+] _cwc_2789 { , NN } ; 
  bool _cwc_2788 { , NN } ; 
  int _cwc_2787 { , NN } ; 
  bool[+] _cwc_2786 { , NN } ; 
  int _cwc_2785 { , NN } ; 
  bool[+] _cwc_2784 { , NN } ; 

  _cwc_2858 = _dim_A_( x); 
  _cwc_2879 = 0; 
  _cwc_2880 = _eq_SxS_( _cwc_2858, _cwc_2879); 
  if (_cwc_2880) 
  { 
    _cwc_2875 = _dim_A_( y); 
    _cwc_2877 = 0; 
    _cwc_2878 = _eq_SxS_( _cwc_2875, _cwc_2877); 
    if (_cwc_2878) 
    { 
      _cwc_2876 = UTDScalarB::eqBBB( x, y) ; 
      _cwc_2783 = _cwc_2876; 
    }
    else
    { 
      _cwc_2872 = _dim_A_( y); 
      _cwc_2873 = 0; 
      _cwc_2874 = _gt_SxS_( _cwc_2872, _cwc_2873); 
      if (_cwc_2874) 
      { 
        _cwc_2860 = _dim_A_( y); 
        _cwc_2870 = 1; 
        _cwc_2871 = _eq_SxS_( _cwc_2860, _cwc_2870); 
        if (_cwc_2871) 
        { 
          _cwc_2862 = _shape_A_( y); 
          _cwc_2864 = true; 
          _cwc_2867 = 4; 
          _cwc_2865 = [ 0 ]; 
          _cwc_2866 = _sel_VxA_( _cwc_2865, _cwc_2862); 
          _cwc_2868 = _eq_SxS_( _cwc_2866, _cwc_2867); 
          _cwc_2869 = _and_SxS_( _cwc_2868, _cwc_2864); 
          if (_cwc_2869) 
          { 
            _cwc_2863 = UTDScalarB::eqBBB( x, y) ; 
            _cwc_2783 = _cwc_2863; 
          }
          else
          { 
            _cwc_2861 = UTDScalarB::eqBBB( x, y) ; 
            _cwc_2783 = _cwc_2861; 
          }
        }
        else
        { 
          _cwc_2859 = UTDScalarB::eqBBB( x, y) ; 
          _cwc_2783 = _cwc_2859; 
        }
      }
      else
      { 
        _cwc_2783 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_2855 = _dim_A_( x); 
    _cwc_2856 = 0; 
    _cwc_2857 = _gt_SxS_( _cwc_2855, _cwc_2856); 
    if (_cwc_2857) 
    { 
      _cwc_2799 = _dim_A_( x); 
      _cwc_2853 = 2; 
      _cwc_2854 = _eq_SxS_( _cwc_2799, _cwc_2853); 
      if (_cwc_2854) 
      { 
        _cwc_2829 = _shape_A_( x); 
        _cwc_2842 = true; 
        _cwc_2845 = 4; 
        _cwc_2843 = [ 0 ]; 
        _cwc_2844 = _sel_VxA_( _cwc_2843, _cwc_2829); 
        _cwc_2846 = _eq_SxS_( _cwc_2844, _cwc_2845); 
        _cwc_2847 = _and_SxS_( _cwc_2846, _cwc_2842); 
        _cwc_2850 = 4; 
        _cwc_2848 = [ 1 ]; 
        _cwc_2849 = _sel_VxA_( _cwc_2848, _cwc_2829); 
        _cwc_2851 = _eq_SxS_( _cwc_2849, _cwc_2850); 
        _cwc_2852 = _and_SxS_( _cwc_2851, _cwc_2847); 
        if (_cwc_2852) 
        { 
          _cwc_2838 = _dim_A_( y); 
          _cwc_2840 = 0; 
          _cwc_2841 = _eq_SxS_( _cwc_2838, _cwc_2840); 
          if (_cwc_2841) 
          { 
            _cwc_2839 = UTDScalarB::eqBBB( x, y) ; 
            _cwc_2783 = _cwc_2839; 
          }
          else
          { 
            _cwc_2835 = _dim_A_( y); 
            _cwc_2836 = 0; 
            _cwc_2837 = _gt_SxS_( _cwc_2835, _cwc_2836); 
            if (_cwc_2837) 
            { 
              _cwc_2831 = _dim_A_( y); 
              _cwc_2833 = 2; 
              _cwc_2834 = _eq_SxS_( _cwc_2831, _cwc_2833); 
              if (_cwc_2834) 
              { 
                _cwc_2832 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_2783 = _cwc_2832; 
              }
              else
              { 
                _cwc_2830 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_2783 = _cwc_2830; 
              }
            }
            else
            { 
              _cwc_2783 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
            }
          }
        }
        else
        { 
          _cwc_2825 = _dim_A_( y); 
          _cwc_2827 = 0; 
          _cwc_2828 = _eq_SxS_( _cwc_2825, _cwc_2827); 
          if (_cwc_2828) 
          { 
            _cwc_2826 = UTDScalarB::eqBBB( x, y) ; 
            _cwc_2783 = _cwc_2826; 
          }
          else
          { 
            _cwc_2822 = _dim_A_( y); 
            _cwc_2823 = 0; 
            _cwc_2824 = _gt_SxS_( _cwc_2822, _cwc_2823); 
            if (_cwc_2824) 
            { 
              _cwc_2818 = _dim_A_( y); 
              _cwc_2820 = 2; 
              _cwc_2821 = _eq_SxS_( _cwc_2818, _cwc_2820); 
              if (_cwc_2821) 
              { 
                _cwc_2819 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_2783 = _cwc_2819; 
              }
              else
              { 
                _cwc_2817 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_2783 = _cwc_2817; 
              }
            }
            else
            { 
              _cwc_2783 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
            }
          }
        }
      }
      else
      { 
        _cwc_2815 = 3; 
        _cwc_2816 = _eq_SxS_( _cwc_2799, _cwc_2815); 
        if (_cwc_2816) 
        { 
          _cwc_2811 = _dim_A_( y); 
          _cwc_2813 = 0; 
          _cwc_2814 = _eq_SxS_( _cwc_2811, _cwc_2813); 
          if (_cwc_2814) 
          { 
            _cwc_2812 = UTDScalarB::eqBBB( x, y) ; 
            _cwc_2783 = _cwc_2812; 
          }
          else
          { 
            _cwc_2808 = _dim_A_( y); 
            _cwc_2809 = 0; 
            _cwc_2810 = _gt_SxS_( _cwc_2808, _cwc_2809); 
            if (_cwc_2810) 
            { 
              _cwc_2801 = _dim_A_( y); 
              _cwc_2806 = 2; 
              _cwc_2807 = _eq_SxS_( _cwc_2801, _cwc_2806); 
              if (_cwc_2807) 
              { 
                _cwc_2805 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_2783 = _cwc_2805; 
              }
              else
              { 
                _cwc_2803 = 3; 
                _cwc_2804 = _eq_SxS_( _cwc_2801, _cwc_2803); 
                if (_cwc_2804) 
                { 
                  _cwc_2802 = UTDScalarB::eqBBB( x, y) ; 
                  _cwc_2783 = _cwc_2802; 
                }
                else
                { 
                  _cwc_2800 = UTDScalarB::eqBBB( x, y) ; 
                  _cwc_2783 = _cwc_2800; 
                }
              }
            }
            else
            { 
              _cwc_2783 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
            }
          }
        }
        else
        { 
          _cwc_2795 = _dim_A_( y); 
          _cwc_2797 = 0; 
          _cwc_2798 = _eq_SxS_( _cwc_2795, _cwc_2797); 
          if (_cwc_2798) 
          { 
            _cwc_2796 = UTDScalarB::eqBBB( x, y) ; 
            _cwc_2783 = _cwc_2796; 
          }
          else
          { 
            _cwc_2792 = _dim_A_( y); 
            _cwc_2793 = 0; 
            _cwc_2794 = _gt_SxS_( _cwc_2792, _cwc_2793); 
            if (_cwc_2794) 
            { 
              _cwc_2785 = _dim_A_( y); 
              _cwc_2790 = 2; 
              _cwc_2791 = _eq_SxS_( _cwc_2785, _cwc_2790); 
              if (_cwc_2791) 
              { 
                _cwc_2789 = UTDScalarB::eqBBB( x, y) ; 
                _cwc_2783 = _cwc_2789; 
              }
              else
              { 
                _cwc_2787 = 3; 
                _cwc_2788 = _eq_SxS_( _cwc_2785, _cwc_2787); 
                if (_cwc_2788) 
                { 
                  _cwc_2786 = UTDScalarB::eqBBB( x, y) ; 
                  _cwc_2783 = _cwc_2786; 
                }
                else
                { 
                  _cwc_2784 = UTDScalarB::eqBBB( x, y) ; 
                  _cwc_2783 = _cwc_2784; 
                }
              }
            }
            else
            { 
              _cwc_2783 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
            }
          }
        }
      }
    }
    else
    { 
      _cwc_2783 = _dispatch_error_( 1, bool[*], "UTDScalarB::eqBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_2783); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::==(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool UTDScalarB:Array::==( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  == :: { bool[*] -> { bool[*] -> ( bool),
                         bool -> ( bool)},
            bool -> { bool[*] -> ( bool),
                      bool -> ( bool)}}
 *  dispatching to: ScalarArith::==
 */
{ 
  bool _cwc_2881 { , NN } ; 
  bool _cwc_2888 { , NN } ; 
  int _cwc_2887 { , NN } ; 
  bool _cwc_2886 { , NN } ; 
  int _cwc_2885 { , NN } ; 
  bool _cwc_2884 { , NN } ; 
  int _cwc_2883 { , NN } ; 
  int _cwc_2882 { , NN } ; 

  _cwc_2882 = _dim_A_( A); 
  _cwc_2887 = 0; 
  _cwc_2888 = _eq_SxS_( _cwc_2882, _cwc_2887); 
  if (_cwc_2888) 
  { 
    _cwc_2883 = _dim_A_( B); 
    _cwc_2885 = 0; 
    _cwc_2886 = _eq_SxS_( _cwc_2883, _cwc_2885); 
    if (_cwc_2886) 
    { 
      _cwc_2884 = ( A ScalarArith::==B) ; 
      _cwc_2881 = _cwc_2884; 
    }
    else
    { 
      _cwc_2881 = _dispatch_error_( 1, bool, "UTDScalarB:Array::== :: bool[*] bool[*] -> bool ", A, B); 
    }
  }
  else
  { 
    _cwc_2881 = _dispatch_error_( 1, bool, "UTDScalarB:Array::== :: bool[*] bool[*] -> bool ", A, B); 
  }
  return( _cwc_2881); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::==(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:Array::==( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  == :: { int[*] -> { int[*] -> ( bool[*]),
                        int -> ( bool[*]),
                        int[+] -> ( bool[+]),
                        int[.] -> ( bool[.]),
                        int[2] -> ( bool[2]),
                        int[3] -> ( bool[3])},
            int -> { int[*] -> ( bool[*]),
                     int -> ( bool),
                     int[+] -> ( bool[+])},
            int[+] -> { int[*] -> ( bool[+]),
                        int -> ( bool[+]),
                        int[+] -> ( bool[+]),
                        int[.] -> ( bool[.]),
                        int[2] -> ( bool[2]),
                        int[3] -> ( bool[3])},
            int[.] -> { int[*] -> ( bool[.]),
                        int -> ( --),
                        int[+] -> ( bool[.]),
                        int[.] -> ( bool[.]),
                        int[2] -> ( bool[2]),
                        int[3] -> ( bool[3])},
            int[2] -> { int[*] -> ( bool[2]),
                        int -> ( --),
                        int[+] -> ( bool[2]),
                        int[.] -> ( bool[2]),
                        int[2] -> ( bool[2])},
            int[3] -> { int[*] -> ( bool[3]),
                        int -> ( --),
                        int[+] -> ( bool[3]),
                        int[.] -> ( bool[3]),
                        int[2] -> ( --),
                        int[3] -> ( bool[3])}}
 *  dispatching to: ArrayArith::==,
 *                  ArrayArith::==,
 *                  ArrayArith::==,
 *                  ScalarArith::==,
 *                  UTDScalarB:Array::==,
 *                  UTDScalarB:Array::==,
 *                  UTDScalarB:Array::==
 */
{ 
  bool[*] _cwc_2889 { , NN } ; 
  bool _cwc_3020 { , NN } ; 
  int _cwc_3019 { , NN } ; 
  bool _cwc_3018 { , NN } ; 
  int _cwc_3017 { , NN } ; 
  bool _cwc_3016 { , NN } ; 
  int _cwc_3015 { , NN } ; 
  bool _cwc_3014 { , NN } ; 
  int _cwc_3013 { , NN } ; 
  int _cwc_3012 { , NN } ; 
  bool[+] _cwc_3011 { , NN } ; 
  int _cwc_3010 { , NN } ; 
  bool _cwc_3009 { , NN } ; 
  int _cwc_3008 { , NN } ; 
  int _cwc_3007 { , NN } ; 
  bool _cwc_3006 { , NN } ; 
  int _cwc_3005 { , NN } ; 
  bool _cwc_3004 { , NN } ; 
  bool _cwc_3003 { , NN } ; 
  int{2} _cwc_3002 { , NN } ; 
  int _cwc_3001 { , NN } ; 
  int[1]{0} _cwc_3000 { , NN } ; 
  bool _cwc_2999 { , NN } ; 
  bool _cwc_2998 { , NN } ; 
  int _cwc_2997 { , NN } ; 
  bool[+] _cwc_2996 { , NN } ; 
  int _cwc_2995 { , NN } ; 
  bool _cwc_2994 { , NN } ; 
  int _cwc_2993 { , NN } ; 
  int _cwc_2992 { , NN } ; 
  bool _cwc_2991 { , NN } ; 
  int _cwc_2990 { , NN } ; 
  bool _cwc_2989 { , NN } ; 
  bool _cwc_2988 { , NN } ; 
  int{2} _cwc_2987 { , NN } ; 
  int _cwc_2986 { , NN } ; 
  int[1]{0} _cwc_2985 { , NN } ; 
  bool _cwc_2984 { , NN } ; 
  bool[2] _cwc_2983 { , NN } ; 
  int[+] _cwc_2982 { , NN } ; 
  bool[.] _cwc_2981 { , NN } ; 
  int _cwc_2980 { , NN } ; 
  bool[+] _cwc_2979 { , NN } ; 
  bool _cwc_2978 { , NN } ; 
  bool _cwc_2977 { , NN } ; 
  int{3} _cwc_2976 { , NN } ; 
  int _cwc_2975 { , NN } ; 
  int[1]{0} _cwc_2974 { , NN } ; 
  bool _cwc_2973 { , NN } ; 
  bool _cwc_2972 { , NN } ; 
  int _cwc_2971 { , NN } ; 
  bool[+] _cwc_2970 { , NN } ; 
  int _cwc_2969 { , NN } ; 
  bool _cwc_2968 { , NN } ; 
  int _cwc_2967 { , NN } ; 
  int _cwc_2966 { , NN } ; 
  bool _cwc_2965 { , NN } ; 
  int _cwc_2964 { , NN } ; 
  bool _cwc_2963 { , NN } ; 
  bool _cwc_2962 { , NN } ; 
  int{2} _cwc_2961 { , NN } ; 
  int _cwc_2960 { , NN } ; 
  int[1]{0} _cwc_2959 { , NN } ; 
  bool _cwc_2958 { , NN } ; 
  bool[.] _cwc_2957 { , NN } ; 
  bool _cwc_2956 { , NN } ; 
  bool _cwc_2955 { , NN } ; 
  int{3} _cwc_2954 { , NN } ; 
  int _cwc_2953 { , NN } ; 
  int[1]{0} _cwc_2952 { , NN } ; 
  bool _cwc_2951 { , NN } ; 
  bool[3] _cwc_2950 { , NN } ; 
  int[+] _cwc_2949 { , NN } ; 
  bool[.] _cwc_2948 { , NN } ; 
  int _cwc_2947 { , NN } ; 
  bool[+] _cwc_2946 { , NN } ; 
  int[+] _cwc_2945 { , NN } ; 
  bool _cwc_2944 { , NN } ; 
  int _cwc_2943 { , NN } ; 
  bool[+] _cwc_2942 { , NN } ; 
  int _cwc_2941 { , NN } ; 
  bool _cwc_2940 { , NN } ; 
  int _cwc_2939 { , NN } ; 
  int _cwc_2938 { , NN } ; 
  bool _cwc_2937 { , NN } ; 
  int _cwc_2936 { , NN } ; 
  bool _cwc_2935 { , NN } ; 
  bool _cwc_2934 { , NN } ; 
  int{2} _cwc_2933 { , NN } ; 
  int _cwc_2932 { , NN } ; 
  int[1]{0} _cwc_2931 { , NN } ; 
  bool _cwc_2930 { , NN } ; 
  bool[.] _cwc_2929 { , NN } ; 
  bool _cwc_2928 { , NN } ; 
  bool _cwc_2927 { , NN } ; 
  int{3} _cwc_2926 { , NN } ; 
  int _cwc_2925 { , NN } ; 
  int[1]{0} _cwc_2924 { , NN } ; 
  bool _cwc_2923 { , NN } ; 
  bool[.] _cwc_2922 { , NN } ; 
  int[+] _cwc_2921 { , NN } ; 
  bool[.] _cwc_2920 { , NN } ; 
  int _cwc_2919 { , NN } ; 
  bool[+] _cwc_2918 { , NN } ; 
  int _cwc_2917 { , NN } ; 
  bool _cwc_2916 { , NN } ; 
  int _cwc_2915 { , NN } ; 
  bool[+] _cwc_2914 { , NN } ; 
  int _cwc_2913 { , NN } ; 
  bool _cwc_2912 { , NN } ; 
  int _cwc_2911 { , NN } ; 
  int _cwc_2910 { , NN } ; 
  bool _cwc_2909 { , NN } ; 
  int _cwc_2908 { , NN } ; 
  bool _cwc_2907 { , NN } ; 
  bool _cwc_2906 { , NN } ; 
  int{2} _cwc_2905 { , NN } ; 
  int _cwc_2904 { , NN } ; 
  int[1]{0} _cwc_2903 { , NN } ; 
  bool _cwc_2902 { , NN } ; 
  bool[+] _cwc_2901 { , NN } ; 
  bool _cwc_2900 { , NN } ; 
  bool _cwc_2899 { , NN } ; 
  int{3} _cwc_2898 { , NN } ; 
  int _cwc_2897 { , NN } ; 
  int[1]{0} _cwc_2896 { , NN } ; 
  bool _cwc_2895 { , NN } ; 
  bool[+] _cwc_2894 { , NN } ; 
  int[+] _cwc_2893 { , NN } ; 
  bool[+] _cwc_2892 { , NN } ; 
  int _cwc_2891 { , NN } ; 
  bool[+] _cwc_2890 { , NN } ; 

  _cwc_3010 = _dim_A_( A); 
  _cwc_3019 = 0; 
  _cwc_3020 = _eq_SxS_( _cwc_3010, _cwc_3019); 
  if (_cwc_3020) 
  { 
    _cwc_3015 = _dim_A_( B); 
    _cwc_3017 = 0; 
    _cwc_3018 = _eq_SxS_( _cwc_3015, _cwc_3017); 
    if (_cwc_3018) 
    { 
      _cwc_3016 = ( A ScalarArith::==B) ; 
      _cwc_2889 = _cwc_3016; 
    }
    else
    { 
      _cwc_3012 = _dim_A_( B); 
      _cwc_3013 = 0; 
      _cwc_3014 = _gt_SxS_( _cwc_3012, _cwc_3013); 
      if (_cwc_3014) 
      { 
        _cwc_3011 = ( A ArrayArith::==B) ; 
        _cwc_2889 = _cwc_3011; 
      }
      else
      { 
        _cwc_2889 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
      }
    }
  }
  else
  { 
    _cwc_3007 = _dim_A_( A); 
    _cwc_3008 = 0; 
    _cwc_3009 = _gt_SxS_( _cwc_3007, _cwc_3008); 
    if (_cwc_3009) 
    { 
      _cwc_2917 = _dim_A_( A); 
      _cwc_3005 = 1; 
      _cwc_3006 = _eq_SxS_( _cwc_2917, _cwc_3005); 
      if (_cwc_3006) 
      { 
        _cwc_2945 = _shape_A_( A); 
        _cwc_2999 = true; 
        _cwc_3002 = 2; 
        _cwc_3000 = [ 0 ]; 
        _cwc_3001 = _sel_VxA_( _cwc_3000, _cwc_2945); 
        _cwc_3003 = _eq_SxS_( _cwc_3001, _cwc_3002); 
        _cwc_3004 = _and_SxS_( _cwc_3003, _cwc_2999); 
        if (_cwc_3004) 
        { 
          _cwc_2995 = _dim_A_( B); 
          _cwc_2997 = 0; 
          _cwc_2998 = _eq_SxS_( _cwc_2995, _cwc_2997); 
          if (_cwc_2998) 
          { 
            _cwc_2996 = ( A ArrayArith::==B) ; 
            _cwc_2889 = _cwc_2996; 
          }
          else
          { 
            _cwc_2992 = _dim_A_( B); 
            _cwc_2993 = 0; 
            _cwc_2994 = _gt_SxS_( _cwc_2992, _cwc_2993); 
            if (_cwc_2994) 
            { 
              _cwc_2980 = _dim_A_( B); 
              _cwc_2990 = 1; 
              _cwc_2991 = _eq_SxS_( _cwc_2980, _cwc_2990); 
              if (_cwc_2991) 
              { 
                _cwc_2982 = _shape_A_( B); 
                _cwc_2984 = true; 
                _cwc_2987 = 2; 
                _cwc_2985 = [ 0 ]; 
                _cwc_2986 = _sel_VxA_( _cwc_2985, _cwc_2982); 
                _cwc_2988 = _eq_SxS_( _cwc_2986, _cwc_2987); 
                _cwc_2989 = _and_SxS_( _cwc_2988, _cwc_2984); 
                if (_cwc_2989) 
                { 
                  _cwc_2983 = ( A UTDScalarB:Array::==B) ; 
                  _cwc_2889 = _cwc_2983; 
                }
                else
                { 
                  _cwc_2981 = ( A UTDScalarB:Array::==B) ; 
                  _cwc_2889 = _cwc_2981; 
                }
              }
              else
              { 
                _cwc_2979 = ( A ArrayArith::==B) ; 
                _cwc_2889 = _cwc_2979; 
              }
            }
            else
            { 
              _cwc_2889 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
            }
          }
        }
        else
        { 
          _cwc_2973 = true; 
          _cwc_2976 = 3; 
          _cwc_2974 = [ 0 ]; 
          _cwc_2975 = _sel_VxA_( _cwc_2974, _cwc_2945); 
          _cwc_2977 = _eq_SxS_( _cwc_2975, _cwc_2976); 
          _cwc_2978 = _and_SxS_( _cwc_2977, _cwc_2973); 
          if (_cwc_2978) 
          { 
            _cwc_2969 = _dim_A_( B); 
            _cwc_2971 = 0; 
            _cwc_2972 = _eq_SxS_( _cwc_2969, _cwc_2971); 
            if (_cwc_2972) 
            { 
              _cwc_2970 = ( A ArrayArith::==B) ; 
              _cwc_2889 = _cwc_2970; 
            }
            else
            { 
              _cwc_2966 = _dim_A_( B); 
              _cwc_2967 = 0; 
              _cwc_2968 = _gt_SxS_( _cwc_2966, _cwc_2967); 
              if (_cwc_2968) 
              { 
                _cwc_2947 = _dim_A_( B); 
                _cwc_2964 = 1; 
                _cwc_2965 = _eq_SxS_( _cwc_2947, _cwc_2964); 
                if (_cwc_2965) 
                { 
                  _cwc_2949 = _shape_A_( B); 
                  _cwc_2958 = true; 
                  _cwc_2961 = 2; 
                  _cwc_2959 = [ 0 ]; 
                  _cwc_2960 = _sel_VxA_( _cwc_2959, _cwc_2949); 
                  _cwc_2962 = _eq_SxS_( _cwc_2960, _cwc_2961); 
                  _cwc_2963 = _and_SxS_( _cwc_2962, _cwc_2958); 
                  if (_cwc_2963) 
                  { 
                    _cwc_2957 = ( A UTDScalarB:Array::==B) ; 
                    _cwc_2889 = _cwc_2957; 
                  }
                  else
                  { 
                    _cwc_2951 = true; 
                    _cwc_2954 = 3; 
                    _cwc_2952 = [ 0 ]; 
                    _cwc_2953 = _sel_VxA_( _cwc_2952, _cwc_2949); 
                    _cwc_2955 = _eq_SxS_( _cwc_2953, _cwc_2954); 
                    _cwc_2956 = _and_SxS_( _cwc_2955, _cwc_2951); 
                    if (_cwc_2956) 
                    { 
                      _cwc_2950 = ( A UTDScalarB:Array::==B) ; 
                      _cwc_2889 = _cwc_2950; 
                    }
                    else
                    { 
                      _cwc_2948 = ( A UTDScalarB:Array::==B) ; 
                      _cwc_2889 = _cwc_2948; 
                    }
                  }
                }
                else
                { 
                  _cwc_2946 = ( A ArrayArith::==B) ; 
                  _cwc_2889 = _cwc_2946; 
                }
              }
              else
              { 
                _cwc_2889 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
              }
            }
          }
          else
          { 
            _cwc_2941 = _dim_A_( B); 
            _cwc_2943 = 0; 
            _cwc_2944 = _eq_SxS_( _cwc_2941, _cwc_2943); 
            if (_cwc_2944) 
            { 
              _cwc_2942 = ( A ArrayArith::==B) ; 
              _cwc_2889 = _cwc_2942; 
            }
            else
            { 
              _cwc_2938 = _dim_A_( B); 
              _cwc_2939 = 0; 
              _cwc_2940 = _gt_SxS_( _cwc_2938, _cwc_2939); 
              if (_cwc_2940) 
              { 
                _cwc_2919 = _dim_A_( B); 
                _cwc_2936 = 1; 
                _cwc_2937 = _eq_SxS_( _cwc_2919, _cwc_2936); 
                if (_cwc_2937) 
                { 
                  _cwc_2921 = _shape_A_( B); 
                  _cwc_2930 = true; 
                  _cwc_2933 = 2; 
                  _cwc_2931 = [ 0 ]; 
                  _cwc_2932 = _sel_VxA_( _cwc_2931, _cwc_2921); 
                  _cwc_2934 = _eq_SxS_( _cwc_2932, _cwc_2933); 
                  _cwc_2935 = _and_SxS_( _cwc_2934, _cwc_2930); 
                  if (_cwc_2935) 
                  { 
                    _cwc_2929 = ( A UTDScalarB:Array::==B) ; 
                    _cwc_2889 = _cwc_2929; 
                  }
                  else
                  { 
                    _cwc_2923 = true; 
                    _cwc_2926 = 3; 
                    _cwc_2924 = [ 0 ]; 
                    _cwc_2925 = _sel_VxA_( _cwc_2924, _cwc_2921); 
                    _cwc_2927 = _eq_SxS_( _cwc_2925, _cwc_2926); 
                    _cwc_2928 = _and_SxS_( _cwc_2927, _cwc_2923); 
                    if (_cwc_2928) 
                    { 
                      _cwc_2922 = ( A UTDScalarB:Array::==B) ; 
                      _cwc_2889 = _cwc_2922; 
                    }
                    else
                    { 
                      _cwc_2920 = ( A UTDScalarB:Array::==B) ; 
                      _cwc_2889 = _cwc_2920; 
                    }
                  }
                }
                else
                { 
                  _cwc_2918 = ( A ArrayArith::==B) ; 
                  _cwc_2889 = _cwc_2918; 
                }
              }
              else
              { 
                _cwc_2889 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
              }
            }
          }
        }
      }
      else
      { 
        _cwc_2913 = _dim_A_( B); 
        _cwc_2915 = 0; 
        _cwc_2916 = _eq_SxS_( _cwc_2913, _cwc_2915); 
        if (_cwc_2916) 
        { 
          _cwc_2914 = ( A ArrayArith::==B) ; 
          _cwc_2889 = _cwc_2914; 
        }
        else
        { 
          _cwc_2910 = _dim_A_( B); 
          _cwc_2911 = 0; 
          _cwc_2912 = _gt_SxS_( _cwc_2910, _cwc_2911); 
          if (_cwc_2912) 
          { 
            _cwc_2891 = _dim_A_( B); 
            _cwc_2908 = 1; 
            _cwc_2909 = _eq_SxS_( _cwc_2891, _cwc_2908); 
            if (_cwc_2909) 
            { 
              _cwc_2893 = _shape_A_( B); 
              _cwc_2902 = true; 
              _cwc_2905 = 2; 
              _cwc_2903 = [ 0 ]; 
              _cwc_2904 = _sel_VxA_( _cwc_2903, _cwc_2893); 
              _cwc_2906 = _eq_SxS_( _cwc_2904, _cwc_2905); 
              _cwc_2907 = _and_SxS_( _cwc_2906, _cwc_2902); 
              if (_cwc_2907) 
              { 
                _cwc_2901 = ( A ArrayArith::==B) ; 
                _cwc_2889 = _cwc_2901; 
              }
              else
              { 
                _cwc_2895 = true; 
                _cwc_2898 = 3; 
                _cwc_2896 = [ 0 ]; 
                _cwc_2897 = _sel_VxA_( _cwc_2896, _cwc_2893); 
                _cwc_2899 = _eq_SxS_( _cwc_2897, _cwc_2898); 
                _cwc_2900 = _and_SxS_( _cwc_2899, _cwc_2895); 
                if (_cwc_2900) 
                { 
                  _cwc_2894 = ( A ArrayArith::==B) ; 
                  _cwc_2889 = _cwc_2894; 
                }
                else
                { 
                  _cwc_2892 = ( A ArrayArith::==B) ; 
                  _cwc_2889 = _cwc_2892; 
                }
              }
            }
            else
            { 
              _cwc_2890 = ( A ArrayArith::==B) ; 
              _cwc_2889 = _cwc_2890; 
            }
          }
          else
          { 
            _cwc_2889 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
          }
        }
      }
    }
    else
    { 
      _cwc_2889 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::== :: int[*] int[*] -> bool[*] ", A, B); 
    }
  }
  return( _cwc_2889); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::jotdotnorBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB::jotdotnorBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  jotdotnorBBB :: { bool[*] -> { bool[*] -> ( bool[+]),
                                   bool[+] -> ( bool[+]),
                                   bool[.] -> ( bool[4,4]),
                                   bool[4] -> ( bool[4,4])},
                      bool[+] -> { bool[*] -> ( bool[+]),
                                   bool[+] -> ( bool[+]),
                                   bool[.] -> ( bool[4,4]),
                                   bool[4] -> ( bool[4,4])},
                      bool[.] -> { bool[*] -> ( bool[4,4]),
                                   bool[+] -> ( bool[4,4]),
                                   bool[.] -> ( bool[4,4]),
                                   bool[4] -> ( bool[4,4])},
                      bool[4] -> { bool[*] -> ( bool[4,4]),
                                   bool[+] -> ( bool[4,4]),
                                   bool[.] -> ( bool[4,4]),
                                   bool[4] -> ( bool[4,4])}}
 *  dispatching to: UTDScalarB::jotdotnorBBB,
 *                  UTDScalarB::jotdotnorBBB
 */
{ 
  bool[+] _cwc_3021 { , NN } ; 
  bool _cwc_3082 { , NN } ; 
  int _cwc_3081 { , NN } ; 
  int _cwc_3080 { , NN } ; 
  bool _cwc_3079 { , NN } ; 
  int _cwc_3078 { , NN } ; 
  bool _cwc_3077 { , NN } ; 
  bool _cwc_3076 { , NN } ; 
  int{4} _cwc_3075 { , NN } ; 
  int _cwc_3074 { , NN } ; 
  int[1]{0} _cwc_3073 { , NN } ; 
  bool _cwc_3072 { , NN } ; 
  bool _cwc_3071 { , NN } ; 
  int _cwc_3070 { , NN } ; 
  int _cwc_3069 { , NN } ; 
  bool _cwc_3068 { , NN } ; 
  int _cwc_3067 { , NN } ; 
  bool _cwc_3066 { , NN } ; 
  bool _cwc_3065 { , NN } ; 
  int{4} _cwc_3064 { , NN } ; 
  int _cwc_3063 { , NN } ; 
  int[1]{0} _cwc_3062 { , NN } ; 
  bool _cwc_3061 { , NN } ; 
  bool[4,4] _cwc_3060 { , NN } ; 
  int[+] _cwc_3059 { , NN } ; 
  bool[+] _cwc_3058 { , NN } ; 
  int _cwc_3057 { , NN } ; 
  bool[+] _cwc_3056 { , NN } ; 
  int[+] _cwc_3055 { , NN } ; 
  bool _cwc_3054 { , NN } ; 
  int _cwc_3053 { , NN } ; 
  int _cwc_3052 { , NN } ; 
  bool _cwc_3051 { , NN } ; 
  int _cwc_3050 { , NN } ; 
  bool _cwc_3049 { , NN } ; 
  bool _cwc_3048 { , NN } ; 
  int{4} _cwc_3047 { , NN } ; 
  int _cwc_3046 { , NN } ; 
  int[1]{0} _cwc_3045 { , NN } ; 
  bool _cwc_3044 { , NN } ; 
  bool[+] _cwc_3043 { , NN } ; 
  int[+] _cwc_3042 { , NN } ; 
  bool[+] _cwc_3041 { , NN } ; 
  int _cwc_3040 { , NN } ; 
  bool[+] _cwc_3039 { , NN } ; 
  int _cwc_3038 { , NN } ; 
  bool _cwc_3037 { , NN } ; 
  int _cwc_3036 { , NN } ; 
  int _cwc_3035 { , NN } ; 
  bool _cwc_3034 { , NN } ; 
  int _cwc_3033 { , NN } ; 
  bool _cwc_3032 { , NN } ; 
  bool _cwc_3031 { , NN } ; 
  int{4} _cwc_3030 { , NN } ; 
  int _cwc_3029 { , NN } ; 
  int[1]{0} _cwc_3028 { , NN } ; 
  bool _cwc_3027 { , NN } ; 
  bool[+] _cwc_3026 { , NN } ; 
  int[+] _cwc_3025 { , NN } ; 
  bool[+] _cwc_3024 { , NN } ; 
  int _cwc_3023 { , NN } ; 
  bool[+] _cwc_3022 { , NN } ; 

  _cwc_3080 = _dim_A_( x); 
  _cwc_3081 = 0; 
  _cwc_3082 = _gt_SxS_( _cwc_3080, _cwc_3081); 
  if (_cwc_3082) 
  { 
    _cwc_3038 = _dim_A_( x); 
    _cwc_3078 = 1; 
    _cwc_3079 = _eq_SxS_( _cwc_3038, _cwc_3078); 
    if (_cwc_3079) 
    { 
      _cwc_3055 = _shape_A_( x); 
      _cwc_3072 = true; 
      _cwc_3075 = 4; 
      _cwc_3073 = [ 0 ]; 
      _cwc_3074 = _sel_VxA_( _cwc_3073, _cwc_3055); 
      _cwc_3076 = _eq_SxS_( _cwc_3074, _cwc_3075); 
      _cwc_3077 = _and_SxS_( _cwc_3076, _cwc_3072); 
      if (_cwc_3077) 
      { 
        _cwc_3069 = _dim_A_( y); 
        _cwc_3070 = 0; 
        _cwc_3071 = _gt_SxS_( _cwc_3069, _cwc_3070); 
        if (_cwc_3071) 
        { 
          _cwc_3057 = _dim_A_( y); 
          _cwc_3067 = 1; 
          _cwc_3068 = _eq_SxS_( _cwc_3057, _cwc_3067); 
          if (_cwc_3068) 
          { 
            _cwc_3059 = _shape_A_( y); 
            _cwc_3061 = true; 
            _cwc_3064 = 4; 
            _cwc_3062 = [ 0 ]; 
            _cwc_3063 = _sel_VxA_( _cwc_3062, _cwc_3059); 
            _cwc_3065 = _eq_SxS_( _cwc_3063, _cwc_3064); 
            _cwc_3066 = _and_SxS_( _cwc_3065, _cwc_3061); 
            if (_cwc_3066) 
            { 
              _cwc_3060 = UTDScalarB::jotdotnorBBB( x, y) ; 
              _cwc_3021 = _cwc_3060; 
            }
            else
            { 
              _cwc_3058 = UTDScalarB::jotdotnorBBB( x, y) ; 
              _cwc_3021 = _cwc_3058; 
            }
          }
          else
          { 
            _cwc_3056 = UTDScalarB::jotdotnorBBB( x, y) ; 
            _cwc_3021 = _cwc_3056; 
          }
        }
        else
        { 
          _cwc_3021 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotnorBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
      else
      { 
        _cwc_3052 = _dim_A_( y); 
        _cwc_3053 = 0; 
        _cwc_3054 = _gt_SxS_( _cwc_3052, _cwc_3053); 
        if (_cwc_3054) 
        { 
          _cwc_3040 = _dim_A_( y); 
          _cwc_3050 = 1; 
          _cwc_3051 = _eq_SxS_( _cwc_3040, _cwc_3050); 
          if (_cwc_3051) 
          { 
            _cwc_3042 = _shape_A_( y); 
            _cwc_3044 = true; 
            _cwc_3047 = 4; 
            _cwc_3045 = [ 0 ]; 
            _cwc_3046 = _sel_VxA_( _cwc_3045, _cwc_3042); 
            _cwc_3048 = _eq_SxS_( _cwc_3046, _cwc_3047); 
            _cwc_3049 = _and_SxS_( _cwc_3048, _cwc_3044); 
            if (_cwc_3049) 
            { 
              _cwc_3043 = UTDScalarB::jotdotnorBBB( x, y) ; 
              _cwc_3021 = _cwc_3043; 
            }
            else
            { 
              _cwc_3041 = UTDScalarB::jotdotnorBBB( x, y) ; 
              _cwc_3021 = _cwc_3041; 
            }
          }
          else
          { 
            _cwc_3039 = UTDScalarB::jotdotnorBBB( x, y) ; 
            _cwc_3021 = _cwc_3039; 
          }
        }
        else
        { 
          _cwc_3021 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotnorBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_3035 = _dim_A_( y); 
      _cwc_3036 = 0; 
      _cwc_3037 = _gt_SxS_( _cwc_3035, _cwc_3036); 
      if (_cwc_3037) 
      { 
        _cwc_3023 = _dim_A_( y); 
        _cwc_3033 = 1; 
        _cwc_3034 = _eq_SxS_( _cwc_3023, _cwc_3033); 
        if (_cwc_3034) 
        { 
          _cwc_3025 = _shape_A_( y); 
          _cwc_3027 = true; 
          _cwc_3030 = 4; 
          _cwc_3028 = [ 0 ]; 
          _cwc_3029 = _sel_VxA_( _cwc_3028, _cwc_3025); 
          _cwc_3031 = _eq_SxS_( _cwc_3029, _cwc_3030); 
          _cwc_3032 = _and_SxS_( _cwc_3031, _cwc_3027); 
          if (_cwc_3032) 
          { 
            _cwc_3026 = UTDScalarB::jotdotnorBBB( x, y) ; 
            _cwc_3021 = _cwc_3026; 
          }
          else
          { 
            _cwc_3024 = UTDScalarB::jotdotnorBBB( x, y) ; 
            _cwc_3021 = _cwc_3024; 
          }
        }
        else
        { 
          _cwc_3022 = UTDScalarB::jotdotnorBBB( x, y) ; 
          _cwc_3021 = _cwc_3022; 
        }
      }
      else
      { 
        _cwc_3021 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotnorBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_3021 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotnorBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
  }
  return( _cwc_3021); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::nandBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::nandBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  nandBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                              bool -> ( bool[*]),
                              bool[+] -> ( bool[+]),
                              bool[.] -> ( bool[4]),
                              bool[4] -> ( bool[4]),
                              bool[.,.,.] -> ( bool[.,.,.])},
                 bool -> { bool[*] -> ( bool[*]),
                           bool -> ( bool),
                           bool[+] -> ( bool[+]),
                           bool[.] -> ( bool[4]),
                           bool[4] -> ( bool[4])},
                 bool[+] -> { bool[*] -> ( bool[+]),
                              bool -> ( bool[+]),
                              bool[+] -> ( bool[+]),
                              bool[.,.,.] -> ( bool[.,.,.])},
                 bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                  bool -> ( bool[.,.,.]),
                                  bool[+] -> ( bool[.,.,.]),
                                  bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::nandBBB,
 *                  UTDScalarB::nandBBB,
 *                  UTDScalarB::nandBBB,
 *                  UTDScalarB::nandBBB,
 *                  UTDScalarB::nandBBB,
 *                  UTDScalarB::nandBBB,
 *                  UTDScalarB::nandBBB
 */
{ 
  bool[*] _cwc_3083 { , NN } ; 
  bool _cwc_3136 { , NN } ; 
  int _cwc_3135 { , NN } ; 
  bool _cwc_3134 { , NN } ; 
  int _cwc_3133 { , NN } ; 
  bool _cwc_3132 { , NN } ; 
  int _cwc_3131 { , NN } ; 
  bool _cwc_3130 { , NN } ; 
  int _cwc_3129 { , NN } ; 
  int _cwc_3128 { , NN } ; 
  bool _cwc_3127 { , NN } ; 
  int _cwc_3126 { , NN } ; 
  bool _cwc_3125 { , NN } ; 
  bool _cwc_3124 { , NN } ; 
  int{4} _cwc_3123 { , NN } ; 
  int _cwc_3122 { , NN } ; 
  int[1]{0} _cwc_3121 { , NN } ; 
  bool _cwc_3120 { , NN } ; 
  bool[4] _cwc_3119 { , NN } ; 
  int[+] _cwc_3118 { , NN } ; 
  bool[+] _cwc_3117 { , NN } ; 
  int _cwc_3116 { , NN } ; 
  bool[+] _cwc_3115 { , NN } ; 
  int _cwc_3114 { , NN } ; 
  bool _cwc_3113 { , NN } ; 
  int _cwc_3112 { , NN } ; 
  int _cwc_3111 { , NN } ; 
  bool _cwc_3110 { , NN } ; 
  int _cwc_3109 { , NN } ; 
  bool _cwc_3108 { , NN } ; 
  int _cwc_3107 { , NN } ; 
  bool[.,.,.] _cwc_3106 { , NN } ; 
  int _cwc_3105 { , NN } ; 
  bool _cwc_3104 { , NN } ; 
  int _cwc_3103 { , NN } ; 
  int _cwc_3102 { , NN } ; 
  bool _cwc_3101 { , NN } ; 
  int _cwc_3100 { , NN } ; 
  bool[.,.,.] _cwc_3099 { , NN } ; 
  int _cwc_3098 { , NN } ; 
  bool[+] _cwc_3097 { , NN } ; 
  int _cwc_3096 { , NN } ; 
  bool _cwc_3095 { , NN } ; 
  int _cwc_3094 { , NN } ; 
  bool[+] _cwc_3093 { , NN } ; 
  int _cwc_3092 { , NN } ; 
  bool _cwc_3091 { , NN } ; 
  int _cwc_3090 { , NN } ; 
  int _cwc_3089 { , NN } ; 
  bool _cwc_3088 { , NN } ; 
  int _cwc_3087 { , NN } ; 
  bool[+] _cwc_3086 { , NN } ; 
  int _cwc_3085 { , NN } ; 
  bool[+] _cwc_3084 { , NN } ; 

  _cwc_3114 = _dim_A_( x); 
  _cwc_3135 = 0; 
  _cwc_3136 = _eq_SxS_( _cwc_3114, _cwc_3135); 
  if (_cwc_3136) 
  { 
    _cwc_3131 = _dim_A_( y); 
    _cwc_3133 = 0; 
    _cwc_3134 = _eq_SxS_( _cwc_3131, _cwc_3133); 
    if (_cwc_3134) 
    { 
      _cwc_3132 = UTDScalarB::nandBBB( x, y) ; 
      _cwc_3083 = _cwc_3132; 
    }
    else
    { 
      _cwc_3128 = _dim_A_( y); 
      _cwc_3129 = 0; 
      _cwc_3130 = _gt_SxS_( _cwc_3128, _cwc_3129); 
      if (_cwc_3130) 
      { 
        _cwc_3116 = _dim_A_( y); 
        _cwc_3126 = 1; 
        _cwc_3127 = _eq_SxS_( _cwc_3116, _cwc_3126); 
        if (_cwc_3127) 
        { 
          _cwc_3118 = _shape_A_( y); 
          _cwc_3120 = true; 
          _cwc_3123 = 4; 
          _cwc_3121 = [ 0 ]; 
          _cwc_3122 = _sel_VxA_( _cwc_3121, _cwc_3118); 
          _cwc_3124 = _eq_SxS_( _cwc_3122, _cwc_3123); 
          _cwc_3125 = _and_SxS_( _cwc_3124, _cwc_3120); 
          if (_cwc_3125) 
          { 
            _cwc_3119 = UTDScalarB::nandBBB( x, y) ; 
            _cwc_3083 = _cwc_3119; 
          }
          else
          { 
            _cwc_3117 = UTDScalarB::nandBBB( x, y) ; 
            _cwc_3083 = _cwc_3117; 
          }
        }
        else
        { 
          _cwc_3115 = UTDScalarB::nandBBB( x, y) ; 
          _cwc_3083 = _cwc_3115; 
        }
      }
      else
      { 
        _cwc_3083 = _dispatch_error_( 1, bool[*], "UTDScalarB::nandBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_3111 = _dim_A_( x); 
    _cwc_3112 = 0; 
    _cwc_3113 = _gt_SxS_( _cwc_3111, _cwc_3112); 
    if (_cwc_3113) 
    { 
      _cwc_3096 = _dim_A_( x); 
      _cwc_3109 = 3; 
      _cwc_3110 = _eq_SxS_( _cwc_3096, _cwc_3109); 
      if (_cwc_3110) 
      { 
        _cwc_3105 = _dim_A_( y); 
        _cwc_3107 = 0; 
        _cwc_3108 = _eq_SxS_( _cwc_3105, _cwc_3107); 
        if (_cwc_3108) 
        { 
          _cwc_3106 = UTDScalarB::nandBBB( x, y) ; 
          _cwc_3083 = _cwc_3106; 
        }
        else
        { 
          _cwc_3102 = _dim_A_( y); 
          _cwc_3103 = 0; 
          _cwc_3104 = _gt_SxS_( _cwc_3102, _cwc_3103); 
          if (_cwc_3104) 
          { 
            _cwc_3098 = _dim_A_( y); 
            _cwc_3100 = 3; 
            _cwc_3101 = _eq_SxS_( _cwc_3098, _cwc_3100); 
            if (_cwc_3101) 
            { 
              _cwc_3099 = UTDScalarB::nandBBB( x, y) ; 
              _cwc_3083 = _cwc_3099; 
            }
            else
            { 
              _cwc_3097 = UTDScalarB::nandBBB( x, y) ; 
              _cwc_3083 = _cwc_3097; 
            }
          }
          else
          { 
            _cwc_3083 = _dispatch_error_( 1, bool[*], "UTDScalarB::nandBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_3092 = _dim_A_( y); 
        _cwc_3094 = 0; 
        _cwc_3095 = _eq_SxS_( _cwc_3092, _cwc_3094); 
        if (_cwc_3095) 
        { 
          _cwc_3093 = UTDScalarB::nandBBB( x, y) ; 
          _cwc_3083 = _cwc_3093; 
        }
        else
        { 
          _cwc_3089 = _dim_A_( y); 
          _cwc_3090 = 0; 
          _cwc_3091 = _gt_SxS_( _cwc_3089, _cwc_3090); 
          if (_cwc_3091) 
          { 
            _cwc_3085 = _dim_A_( y); 
            _cwc_3087 = 3; 
            _cwc_3088 = _eq_SxS_( _cwc_3085, _cwc_3087); 
            if (_cwc_3088) 
            { 
              _cwc_3086 = UTDScalarB::nandBBB( x, y) ; 
              _cwc_3083 = _cwc_3086; 
            }
            else
            { 
              _cwc_3084 = UTDScalarB::nandBBB( x, y) ; 
              _cwc_3083 = _cwc_3084; 
            }
          }
          else
          { 
            _cwc_3083 = _dispatch_error_( 1, bool[*], "UTDScalarB::nandBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_3083 = _dispatch_error_( 1, bool[*], "UTDScalarB::nandBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_3083); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::shape(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[.] UTDScalarB:Array::shape( bool[*] array { ,NN } )
/*
 *  shape :: { bool[*] -> ( int[.]),
               bool -> ( int[0]{}),
               bool[+] -> ( int[.]),
               bool[.] -> ( int[1]),
               bool[3] -> ( int[1]{3}),
               bool[2] -> ( int[1]{2}),
               bool[16] -> ( int[1]{16}),
               bool[4] -> ( int[1]{4}),
               bool[.,.] -> ( int[2]),
               bool[.,.,.] -> ( int[3])}
 *  dispatching to: ArrayBasics::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape
 */
{ 
  int[.] _cwc_3137 { , NN } ; 
  bool _cwc_3185 { , NN } ; 
  int _cwc_3184 { , NN } ; 
  int[0]{} _cwc_3183 { , NN } ; 
  int _cwc_3182 { , NN } ; 
  bool _cwc_3181 { , NN } ; 
  int _cwc_3180 { , NN } ; 
  int[.] _cwc_3179 { , NN } ; 
  int _cwc_3178 { , NN } ; 
  bool _cwc_3177 { , NN } ; 
  int _cwc_3176 { , NN } ; 
  bool _cwc_3175 { , NN } ; 
  bool _cwc_3174 { , NN } ; 
  int{3} _cwc_3173 { , NN } ; 
  int _cwc_3172 { , NN } ; 
  int[1]{0} _cwc_3171 { , NN } ; 
  bool _cwc_3170 { , NN } ; 
  int[1]{3} _cwc_3169 { , NN } ; 
  bool _cwc_3168 { , NN } ; 
  bool _cwc_3167 { , NN } ; 
  int{2} _cwc_3166 { , NN } ; 
  int _cwc_3165 { , NN } ; 
  int[1]{0} _cwc_3164 { , NN } ; 
  bool _cwc_3163 { , NN } ; 
  int[1]{2} _cwc_3162 { , NN } ; 
  bool _cwc_3161 { , NN } ; 
  bool _cwc_3160 { , NN } ; 
  int{16} _cwc_3159 { , NN } ; 
  int _cwc_3158 { , NN } ; 
  int[1]{0} _cwc_3157 { , NN } ; 
  bool _cwc_3156 { , NN } ; 
  int[1]{16} _cwc_3155 { , NN } ; 
  bool _cwc_3154 { , NN } ; 
  bool _cwc_3153 { , NN } ; 
  int{4} _cwc_3152 { , NN } ; 
  int _cwc_3151 { , NN } ; 
  int[1]{0} _cwc_3150 { , NN } ; 
  bool _cwc_3149 { , NN } ; 
  int[1]{4} _cwc_3148 { , NN } ; 
  int[+] _cwc_3147 { , NN } ; 
  int[1] _cwc_3146 { , NN } ; 
  bool _cwc_3145 { , NN } ; 
  int _cwc_3144 { , NN } ; 
  int[2] _cwc_3143 { , NN } ; 
  bool _cwc_3142 { , NN } ; 
  int _cwc_3141 { , NN } ; 
  int[3] _cwc_3140 { , NN } ; 
  int _cwc_3139 { , NN } ; 
  int[.] _cwc_3138 { , NN } ; 

  _cwc_3182 = _dim_A_( array); 
  _cwc_3184 = 0; 
  _cwc_3185 = _eq_SxS_( _cwc_3182, _cwc_3184); 
  if (_cwc_3185) 
  { 
    _cwc_3183 = UTDScalarB:Array::shape( array) ; 
    _cwc_3137 = _cwc_3183; 
  }
  else
  { 
    _cwc_3178 = _dim_A_( array); 
    _cwc_3180 = 0; 
    _cwc_3181 = _gt_SxS_( _cwc_3178, _cwc_3180); 
    if (_cwc_3181) 
    { 
      _cwc_3139 = _dim_A_( array); 
      _cwc_3176 = 1; 
      _cwc_3177 = _eq_SxS_( _cwc_3139, _cwc_3176); 
      if (_cwc_3177) 
      { 
        _cwc_3147 = _shape_A_( array); 
        _cwc_3170 = true; 
        _cwc_3173 = 3; 
        _cwc_3171 = [ 0 ]; 
        _cwc_3172 = _sel_VxA_( _cwc_3171, _cwc_3147); 
        _cwc_3174 = _eq_SxS_( _cwc_3172, _cwc_3173); 
        _cwc_3175 = _and_SxS_( _cwc_3174, _cwc_3170); 
        if (_cwc_3175) 
        { 
          _cwc_3169 = UTDScalarB:Array::shape( array) ; 
          _cwc_3137 = _cwc_3169; 
        }
        else
        { 
          _cwc_3163 = true; 
          _cwc_3166 = 2; 
          _cwc_3164 = [ 0 ]; 
          _cwc_3165 = _sel_VxA_( _cwc_3164, _cwc_3147); 
          _cwc_3167 = _eq_SxS_( _cwc_3165, _cwc_3166); 
          _cwc_3168 = _and_SxS_( _cwc_3167, _cwc_3163); 
          if (_cwc_3168) 
          { 
            _cwc_3162 = UTDScalarB:Array::shape( array) ; 
            _cwc_3137 = _cwc_3162; 
          }
          else
          { 
            _cwc_3156 = true; 
            _cwc_3159 = 16; 
            _cwc_3157 = [ 0 ]; 
            _cwc_3158 = _sel_VxA_( _cwc_3157, _cwc_3147); 
            _cwc_3160 = _eq_SxS_( _cwc_3158, _cwc_3159); 
            _cwc_3161 = _and_SxS_( _cwc_3160, _cwc_3156); 
            if (_cwc_3161) 
            { 
              _cwc_3155 = UTDScalarB:Array::shape( array) ; 
              _cwc_3137 = _cwc_3155; 
            }
            else
            { 
              _cwc_3149 = true; 
              _cwc_3152 = 4; 
              _cwc_3150 = [ 0 ]; 
              _cwc_3151 = _sel_VxA_( _cwc_3150, _cwc_3147); 
              _cwc_3153 = _eq_SxS_( _cwc_3151, _cwc_3152); 
              _cwc_3154 = _and_SxS_( _cwc_3153, _cwc_3149); 
              if (_cwc_3154) 
              { 
                _cwc_3148 = UTDScalarB:Array::shape( array) ; 
                _cwc_3137 = _cwc_3148; 
              }
              else
              { 
                _cwc_3146 = UTDScalarB:Array::shape( array) ; 
                _cwc_3137 = _cwc_3146; 
              }
            }
          }
        }
      }
      else
      { 
        _cwc_3144 = 2; 
        _cwc_3145 = _eq_SxS_( _cwc_3139, _cwc_3144); 
        if (_cwc_3145) 
        { 
          _cwc_3143 = UTDScalarB:Array::shape( array) ; 
          _cwc_3137 = _cwc_3143; 
        }
        else
        { 
          _cwc_3141 = 3; 
          _cwc_3142 = _eq_SxS_( _cwc_3139, _cwc_3141); 
          if (_cwc_3142) 
          { 
            _cwc_3140 = UTDScalarB:Array::shape( array) ; 
            _cwc_3137 = _cwc_3140; 
          }
          else
          { 
            _cwc_3138 = UTDScalarB:Array::shape( array) ; 
            _cwc_3137 = _cwc_3138; 
          }
        }
      }
    }
    else
    { 
      _cwc_3179 = ArrayBasics::shape( array) ; 
      _cwc_3137 = _cwc_3179; 
    }
  }
  return( _cwc_3137); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::shape(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[.] UTDScalarB:Array::shape( int[*] array { ,NN } )
/*
 *  shape :: { int[*] -> ( int[.]),
               int[+] -> ( int[1]),
               int[.] -> ( int[1]),
               int[3] -> ( int[1]{3}),
               int[1] -> ( int[1]{1}),
               int[2] -> ( int[1]{2}),
               int[0] -> ( int[1]{0})}
 *  dispatching to: ArrayBasics::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape,
 *                  UTDScalarB:Array::shape
 */
{ 
  int[.] _cwc_3186 { , NN } ; 
  bool _cwc_3220 { , NN } ; 
  int _cwc_3219 { , NN } ; 
  bool _cwc_3218 { , NN } ; 
  bool _cwc_3217 { , NN } ; 
  int{3} _cwc_3216 { , NN } ; 
  int _cwc_3215 { , NN } ; 
  int[1]{0} _cwc_3214 { , NN } ; 
  bool _cwc_3213 { , NN } ; 
  int[1]{3} _cwc_3212 { , NN } ; 
  bool _cwc_3211 { , NN } ; 
  bool _cwc_3210 { , NN } ; 
  int{1} _cwc_3209 { , NN } ; 
  int _cwc_3208 { , NN } ; 
  int[1]{0} _cwc_3207 { , NN } ; 
  bool _cwc_3206 { , NN } ; 
  int[1]{1} _cwc_3205 { , NN } ; 
  bool _cwc_3204 { , NN } ; 
  bool _cwc_3203 { , NN } ; 
  int{2} _cwc_3202 { , NN } ; 
  int _cwc_3201 { , NN } ; 
  int[1]{0} _cwc_3200 { , NN } ; 
  bool _cwc_3199 { , NN } ; 
  int[1]{2} _cwc_3198 { , NN } ; 
  bool _cwc_3197 { , NN } ; 
  bool _cwc_3196 { , NN } ; 
  int{0} _cwc_3195 { , NN } ; 
  int _cwc_3194 { , NN } ; 
  int[1]{0} _cwc_3193 { , NN } ; 
  bool _cwc_3192 { , NN } ; 
  int[1]{0} _cwc_3191 { , NN } ; 
  int[+] _cwc_3190 { , NN } ; 
  int[1] _cwc_3189 { , NN } ; 
  int _cwc_3188 { , NN } ; 
  int[.] _cwc_3187 { , NN } ; 

  _cwc_3188 = _dim_A_( array); 
  _cwc_3219 = 1; 
  _cwc_3220 = _eq_SxS_( _cwc_3188, _cwc_3219); 
  if (_cwc_3220) 
  { 
    _cwc_3190 = _shape_A_( array); 
    _cwc_3213 = true; 
    _cwc_3216 = 3; 
    _cwc_3214 = [ 0 ]; 
    _cwc_3215 = _sel_VxA_( _cwc_3214, _cwc_3190); 
    _cwc_3217 = _eq_SxS_( _cwc_3215, _cwc_3216); 
    _cwc_3218 = _and_SxS_( _cwc_3217, _cwc_3213); 
    if (_cwc_3218) 
    { 
      _cwc_3212 = UTDScalarB:Array::shape( array) ; 
      _cwc_3186 = _cwc_3212; 
    }
    else
    { 
      _cwc_3206 = true; 
      _cwc_3209 = 1; 
      _cwc_3207 = [ 0 ]; 
      _cwc_3208 = _sel_VxA_( _cwc_3207, _cwc_3190); 
      _cwc_3210 = _eq_SxS_( _cwc_3208, _cwc_3209); 
      _cwc_3211 = _and_SxS_( _cwc_3210, _cwc_3206); 
      if (_cwc_3211) 
      { 
        _cwc_3205 = UTDScalarB:Array::shape( array) ; 
        _cwc_3186 = _cwc_3205; 
      }
      else
      { 
        _cwc_3199 = true; 
        _cwc_3202 = 2; 
        _cwc_3200 = [ 0 ]; 
        _cwc_3201 = _sel_VxA_( _cwc_3200, _cwc_3190); 
        _cwc_3203 = _eq_SxS_( _cwc_3201, _cwc_3202); 
        _cwc_3204 = _and_SxS_( _cwc_3203, _cwc_3199); 
        if (_cwc_3204) 
        { 
          _cwc_3198 = UTDScalarB:Array::shape( array) ; 
          _cwc_3186 = _cwc_3198; 
        }
        else
        { 
          _cwc_3192 = true; 
          _cwc_3195 = 0; 
          _cwc_3193 = [ 0 ]; 
          _cwc_3194 = _sel_VxA_( _cwc_3193, _cwc_3190); 
          _cwc_3196 = _eq_SxS_( _cwc_3194, _cwc_3195); 
          _cwc_3197 = _and_SxS_( _cwc_3196, _cwc_3192); 
          if (_cwc_3197) 
          { 
            _cwc_3191 = UTDScalarB:Array::shape( array) ; 
            _cwc_3186 = _cwc_3191; 
          }
          else
          { 
            _cwc_3189 = UTDScalarB:Array::shape( array) ; 
            _cwc_3186 = _cwc_3189; 
          }
        }
      }
    }
  }
  else
  { 
    _cwc_3187 = ArrayBasics::shape( array) ; 
    _cwc_3186 = _cwc_3187; 
  }
  return( _cwc_3186); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::to_bool(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:Array::to_bool( bool[*] i { ,NN } )
/*
 *  to_bool :: { bool[*] -> ( bool[*]),
                 bool -> ( bool),
                 bool[+] -> ( bool[+]),
                 bool[.] -> ( bool[.]),
                 bool[2] -> ( bool[2]),
                 bool[3] -> ( bool[3]),
                 bool[4] -> ( bool[4]),
                 bool[8] -> ( bool[8]),
                 bool[12] -> ( bool[12]),
                 bool[5] -> ( bool[5]),
                 bool[6] -> ( bool[6]),
                 bool[7] -> ( bool[7]),
                 bool[9] -> ( bool[9]),
                 bool[10] -> ( bool[10]),
                 bool[11] -> ( bool[11]),
                 bool[13] -> ( bool[13]),
                 bool[14] -> ( bool[14]),
                 bool[28] -> ( bool[28]),
                 bool[42] -> ( bool[42]),
                 bool[56] -> ( bool[56]),
                 bool[70] -> ( bool[70]),
                 bool[84] -> ( bool[84]),
                 bool[98] -> ( bool[98]),
                 bool[112] -> ( bool[112]),
                 bool[.,.] -> ( bool[.,.]),
                 bool[4,4] -> ( bool[4,4]),
                 bool[.,.,.] -> ( bool[.,.,.])}
 *  dispatching to: Bool::to_bool,
 *                  ArrayArith::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool,
 *                  UTDScalarB:Array::to_bool
 */
{ 
  bool[*] _cwc_3221 { , NN } ; 
  bool _cwc_3394 { , NN } ; 
  int _cwc_3393 { , NN } ; 
  bool _cwc_3392 { , NN } ; 
  int _cwc_3391 { , NN } ; 
  bool _cwc_3390 { , NN } ; 
  int _cwc_3389 { , NN } ; 
  bool[*] _cwc_3388 { , NN } ; 
  int _cwc_3387 { , NN } ; 
  bool _cwc_3386 { , NN } ; 
  int _cwc_3385 { , NN } ; 
  bool _cwc_3384 { , NN } ; 
  bool _cwc_3383 { , NN } ; 
  int{2} _cwc_3382 { , NN } ; 
  int _cwc_3381 { , NN } ; 
  int[1]{0} _cwc_3380 { , NN } ; 
  bool _cwc_3379 { , NN } ; 
  bool[2] _cwc_3378 { , NN } ; 
  bool _cwc_3377 { , NN } ; 
  bool _cwc_3376 { , NN } ; 
  int{3} _cwc_3375 { , NN } ; 
  int _cwc_3374 { , NN } ; 
  int[1]{0} _cwc_3373 { , NN } ; 
  bool _cwc_3372 { , NN } ; 
  bool[3] _cwc_3371 { , NN } ; 
  bool _cwc_3370 { , NN } ; 
  bool _cwc_3369 { , NN } ; 
  int{4} _cwc_3368 { , NN } ; 
  int _cwc_3367 { , NN } ; 
  int[1]{0} _cwc_3366 { , NN } ; 
  bool _cwc_3365 { , NN } ; 
  bool[4] _cwc_3364 { , NN } ; 
  bool _cwc_3363 { , NN } ; 
  bool _cwc_3362 { , NN } ; 
  int{8} _cwc_3361 { , NN } ; 
  int _cwc_3360 { , NN } ; 
  int[1]{0} _cwc_3359 { , NN } ; 
  bool _cwc_3358 { , NN } ; 
  bool[8] _cwc_3357 { , NN } ; 
  bool _cwc_3356 { , NN } ; 
  bool _cwc_3355 { , NN } ; 
  int{12} _cwc_3354 { , NN } ; 
  int _cwc_3353 { , NN } ; 
  int[1]{0} _cwc_3352 { , NN } ; 
  bool _cwc_3351 { , NN } ; 
  bool[12] _cwc_3350 { , NN } ; 
  bool _cwc_3349 { , NN } ; 
  bool _cwc_3348 { , NN } ; 
  int{5} _cwc_3347 { , NN } ; 
  int _cwc_3346 { , NN } ; 
  int[1]{0} _cwc_3345 { , NN } ; 
  bool _cwc_3344 { , NN } ; 
  bool[5] _cwc_3343 { , NN } ; 
  bool _cwc_3342 { , NN } ; 
  bool _cwc_3341 { , NN } ; 
  int{6} _cwc_3340 { , NN } ; 
  int _cwc_3339 { , NN } ; 
  int[1]{0} _cwc_3338 { , NN } ; 
  bool _cwc_3337 { , NN } ; 
  bool[6] _cwc_3336 { , NN } ; 
  bool _cwc_3335 { , NN } ; 
  bool _cwc_3334 { , NN } ; 
  int{7} _cwc_3333 { , NN } ; 
  int _cwc_3332 { , NN } ; 
  int[1]{0} _cwc_3331 { , NN } ; 
  bool _cwc_3330 { , NN } ; 
  bool[7] _cwc_3329 { , NN } ; 
  bool _cwc_3328 { , NN } ; 
  bool _cwc_3327 { , NN } ; 
  int{9} _cwc_3326 { , NN } ; 
  int _cwc_3325 { , NN } ; 
  int[1]{0} _cwc_3324 { , NN } ; 
  bool _cwc_3323 { , NN } ; 
  bool[9] _cwc_3322 { , NN } ; 
  bool _cwc_3321 { , NN } ; 
  bool _cwc_3320 { , NN } ; 
  int{10} _cwc_3319 { , NN } ; 
  int _cwc_3318 { , NN } ; 
  int[1]{0} _cwc_3317 { , NN } ; 
  bool _cwc_3316 { , NN } ; 
  bool[10] _cwc_3315 { , NN } ; 
  bool _cwc_3314 { , NN } ; 
  bool _cwc_3313 { , NN } ; 
  int{11} _cwc_3312 { , NN } ; 
  int _cwc_3311 { , NN } ; 
  int[1]{0} _cwc_3310 { , NN } ; 
  bool _cwc_3309 { , NN } ; 
  bool[11] _cwc_3308 { , NN } ; 
  bool _cwc_3307 { , NN } ; 
  bool _cwc_3306 { , NN } ; 
  int{13} _cwc_3305 { , NN } ; 
  int _cwc_3304 { , NN } ; 
  int[1]{0} _cwc_3303 { , NN } ; 
  bool _cwc_3302 { , NN } ; 
  bool[13] _cwc_3301 { , NN } ; 
  bool _cwc_3300 { , NN } ; 
  bool _cwc_3299 { , NN } ; 
  int{14} _cwc_3298 { , NN } ; 
  int _cwc_3297 { , NN } ; 
  int[1]{0} _cwc_3296 { , NN } ; 
  bool _cwc_3295 { , NN } ; 
  bool[14] _cwc_3294 { , NN } ; 
  bool _cwc_3293 { , NN } ; 
  bool _cwc_3292 { , NN } ; 
  int{28} _cwc_3291 { , NN } ; 
  int _cwc_3290 { , NN } ; 
  int[1]{0} _cwc_3289 { , NN } ; 
  bool _cwc_3288 { , NN } ; 
  bool[28] _cwc_3287 { , NN } ; 
  bool _cwc_3286 { , NN } ; 
  bool _cwc_3285 { , NN } ; 
  int{42} _cwc_3284 { , NN } ; 
  int _cwc_3283 { , NN } ; 
  int[1]{0} _cwc_3282 { , NN } ; 
  bool _cwc_3281 { , NN } ; 
  bool[42] _cwc_3280 { , NN } ; 
  bool _cwc_3279 { , NN } ; 
  bool _cwc_3278 { , NN } ; 
  int{56} _cwc_3277 { , NN } ; 
  int _cwc_3276 { , NN } ; 
  int[1]{0} _cwc_3275 { , NN } ; 
  bool _cwc_3274 { , NN } ; 
  bool[56] _cwc_3273 { , NN } ; 
  bool _cwc_3272 { , NN } ; 
  bool _cwc_3271 { , NN } ; 
  int{70} _cwc_3270 { , NN } ; 
  int _cwc_3269 { , NN } ; 
  int[1]{0} _cwc_3268 { , NN } ; 
  bool _cwc_3267 { , NN } ; 
  bool[70] _cwc_3266 { , NN } ; 
  bool _cwc_3265 { , NN } ; 
  bool _cwc_3264 { , NN } ; 
  int{84} _cwc_3263 { , NN } ; 
  int _cwc_3262 { , NN } ; 
  int[1]{0} _cwc_3261 { , NN } ; 
  bool _cwc_3260 { , NN } ; 
  bool[84] _cwc_3259 { , NN } ; 
  bool _cwc_3258 { , NN } ; 
  bool _cwc_3257 { , NN } ; 
  int{98} _cwc_3256 { , NN } ; 
  int _cwc_3255 { , NN } ; 
  int[1]{0} _cwc_3254 { , NN } ; 
  bool _cwc_3253 { , NN } ; 
  bool[98] _cwc_3252 { , NN } ; 
  bool _cwc_3251 { , NN } ; 
  bool _cwc_3250 { , NN } ; 
  int{112} _cwc_3249 { , NN } ; 
  int _cwc_3248 { , NN } ; 
  int[1]{0} _cwc_3247 { , NN } ; 
  bool _cwc_3246 { , NN } ; 
  bool[112] _cwc_3245 { , NN } ; 
  int[+] _cwc_3244 { , NN } ; 
  bool[.] _cwc_3243 { , NN } ; 
  bool _cwc_3242 { , NN } ; 
  int _cwc_3241 { , NN } ; 
  bool _cwc_3240 { , NN } ; 
  bool _cwc_3239 { , NN } ; 
  int{4} _cwc_3238 { , NN } ; 
  int _cwc_3237 { , NN } ; 
  int[1]{1} _cwc_3236 { , NN } ; 
  bool _cwc_3235 { , NN } ; 
  bool _cwc_3234 { , NN } ; 
  int{4} _cwc_3233 { , NN } ; 
  int _cwc_3232 { , NN } ; 
  int[1]{0} _cwc_3231 { , NN } ; 
  bool _cwc_3230 { , NN } ; 
  bool[4,4] _cwc_3229 { , NN } ; 
  int[+] _cwc_3228 { , NN } ; 
  bool[.,.] _cwc_3227 { , NN } ; 
  bool _cwc_3226 { , NN } ; 
  int _cwc_3225 { , NN } ; 
  bool[.,.,.] _cwc_3224 { , NN } ; 
  int _cwc_3223 { , NN } ; 
  bool[+] _cwc_3222 { , NN } ; 

  _cwc_3391 = _dim_A_( i); 
  _cwc_3393 = 0; 
  _cwc_3394 = _eq_SxS_( _cwc_3391, _cwc_3393); 
  if (_cwc_3394) 
  { 
    _cwc_3392 = Bool::to_bool( i) ; 
    _cwc_3221 = _cwc_3392; 
  }
  else
  { 
    _cwc_3387 = _dim_A_( i); 
    _cwc_3389 = 0; 
    _cwc_3390 = _gt_SxS_( _cwc_3387, _cwc_3389); 
    if (_cwc_3390) 
    { 
      _cwc_3223 = _dim_A_( i); 
      _cwc_3385 = 1; 
      _cwc_3386 = _eq_SxS_( _cwc_3223, _cwc_3385); 
      if (_cwc_3386) 
      { 
        _cwc_3244 = _shape_A_( i); 
        _cwc_3379 = true; 
        _cwc_3382 = 2; 
        _cwc_3380 = [ 0 ]; 
        _cwc_3381 = _sel_VxA_( _cwc_3380, _cwc_3244); 
        _cwc_3383 = _eq_SxS_( _cwc_3381, _cwc_3382); 
        _cwc_3384 = _and_SxS_( _cwc_3383, _cwc_3379); 
        if (_cwc_3384) 
        { 
          _cwc_3378 = UTDScalarB:Array::to_bool( i) ; 
          _cwc_3221 = _cwc_3378; 
        }
        else
        { 
          _cwc_3372 = true; 
          _cwc_3375 = 3; 
          _cwc_3373 = [ 0 ]; 
          _cwc_3374 = _sel_VxA_( _cwc_3373, _cwc_3244); 
          _cwc_3376 = _eq_SxS_( _cwc_3374, _cwc_3375); 
          _cwc_3377 = _and_SxS_( _cwc_3376, _cwc_3372); 
          if (_cwc_3377) 
          { 
            _cwc_3371 = UTDScalarB:Array::to_bool( i) ; 
            _cwc_3221 = _cwc_3371; 
          }
          else
          { 
            _cwc_3365 = true; 
            _cwc_3368 = 4; 
            _cwc_3366 = [ 0 ]; 
            _cwc_3367 = _sel_VxA_( _cwc_3366, _cwc_3244); 
            _cwc_3369 = _eq_SxS_( _cwc_3367, _cwc_3368); 
            _cwc_3370 = _and_SxS_( _cwc_3369, _cwc_3365); 
            if (_cwc_3370) 
            { 
              _cwc_3364 = UTDScalarB:Array::to_bool( i) ; 
              _cwc_3221 = _cwc_3364; 
            }
            else
            { 
              _cwc_3358 = true; 
              _cwc_3361 = 8; 
              _cwc_3359 = [ 0 ]; 
              _cwc_3360 = _sel_VxA_( _cwc_3359, _cwc_3244); 
              _cwc_3362 = _eq_SxS_( _cwc_3360, _cwc_3361); 
              _cwc_3363 = _and_SxS_( _cwc_3362, _cwc_3358); 
              if (_cwc_3363) 
              { 
                _cwc_3357 = UTDScalarB:Array::to_bool( i) ; 
                _cwc_3221 = _cwc_3357; 
              }
              else
              { 
                _cwc_3351 = true; 
                _cwc_3354 = 12; 
                _cwc_3352 = [ 0 ]; 
                _cwc_3353 = _sel_VxA_( _cwc_3352, _cwc_3244); 
                _cwc_3355 = _eq_SxS_( _cwc_3353, _cwc_3354); 
                _cwc_3356 = _and_SxS_( _cwc_3355, _cwc_3351); 
                if (_cwc_3356) 
                { 
                  _cwc_3350 = UTDScalarB:Array::to_bool( i) ; 
                  _cwc_3221 = _cwc_3350; 
                }
                else
                { 
                  _cwc_3344 = true; 
                  _cwc_3347 = 5; 
                  _cwc_3345 = [ 0 ]; 
                  _cwc_3346 = _sel_VxA_( _cwc_3345, _cwc_3244); 
                  _cwc_3348 = _eq_SxS_( _cwc_3346, _cwc_3347); 
                  _cwc_3349 = _and_SxS_( _cwc_3348, _cwc_3344); 
                  if (_cwc_3349) 
                  { 
                    _cwc_3343 = UTDScalarB:Array::to_bool( i) ; 
                    _cwc_3221 = _cwc_3343; 
                  }
                  else
                  { 
                    _cwc_3337 = true; 
                    _cwc_3340 = 6; 
                    _cwc_3338 = [ 0 ]; 
                    _cwc_3339 = _sel_VxA_( _cwc_3338, _cwc_3244); 
                    _cwc_3341 = _eq_SxS_( _cwc_3339, _cwc_3340); 
                    _cwc_3342 = _and_SxS_( _cwc_3341, _cwc_3337); 
                    if (_cwc_3342) 
                    { 
                      _cwc_3336 = UTDScalarB:Array::to_bool( i) ; 
                      _cwc_3221 = _cwc_3336; 
                    }
                    else
                    { 
                      _cwc_3330 = true; 
                      _cwc_3333 = 7; 
                      _cwc_3331 = [ 0 ]; 
                      _cwc_3332 = _sel_VxA_( _cwc_3331, _cwc_3244); 
                      _cwc_3334 = _eq_SxS_( _cwc_3332, _cwc_3333); 
                      _cwc_3335 = _and_SxS_( _cwc_3334, _cwc_3330); 
                      if (_cwc_3335) 
                      { 
                        _cwc_3329 = UTDScalarB:Array::to_bool( i) ; 
                        _cwc_3221 = _cwc_3329; 
                      }
                      else
                      { 
                        _cwc_3323 = true; 
                        _cwc_3326 = 9; 
                        _cwc_3324 = [ 0 ]; 
                        _cwc_3325 = _sel_VxA_( _cwc_3324, _cwc_3244); 
                        _cwc_3327 = _eq_SxS_( _cwc_3325, _cwc_3326); 
                        _cwc_3328 = _and_SxS_( _cwc_3327, _cwc_3323); 
                        if (_cwc_3328) 
                        { 
                          _cwc_3322 = UTDScalarB:Array::to_bool( i) ; 
                          _cwc_3221 = _cwc_3322; 
                        }
                        else
                        { 
                          _cwc_3316 = true; 
                          _cwc_3319 = 10; 
                          _cwc_3317 = [ 0 ]; 
                          _cwc_3318 = _sel_VxA_( _cwc_3317, _cwc_3244); 
                          _cwc_3320 = _eq_SxS_( _cwc_3318, _cwc_3319); 
                          _cwc_3321 = _and_SxS_( _cwc_3320, _cwc_3316); 
                          if (_cwc_3321) 
                          { 
                            _cwc_3315 = UTDScalarB:Array::to_bool( i) ; 
                            _cwc_3221 = _cwc_3315; 
                          }
                          else
                          { 
                            _cwc_3309 = true; 
                            _cwc_3312 = 11; 
                            _cwc_3310 = [ 0 ]; 
                            _cwc_3311 = _sel_VxA_( _cwc_3310, _cwc_3244); 
                            _cwc_3313 = _eq_SxS_( _cwc_3311, _cwc_3312); 
                            _cwc_3314 = _and_SxS_( _cwc_3313, _cwc_3309); 
                            if (_cwc_3314) 
                            { 
                              _cwc_3308 = UTDScalarB:Array::to_bool( i) ; 
                              _cwc_3221 = _cwc_3308; 
                            }
                            else
                            { 
                              _cwc_3302 = true; 
                              _cwc_3305 = 13; 
                              _cwc_3303 = [ 0 ]; 
                              _cwc_3304 = _sel_VxA_( _cwc_3303, _cwc_3244); 
                              _cwc_3306 = _eq_SxS_( _cwc_3304, _cwc_3305); 
                              _cwc_3307 = _and_SxS_( _cwc_3306, _cwc_3302); 
                              if (_cwc_3307) 
                              { 
                                _cwc_3301 = UTDScalarB:Array::to_bool( i) ; 
                                _cwc_3221 = _cwc_3301; 
                              }
                              else
                              { 
                                _cwc_3295 = true; 
                                _cwc_3298 = 14; 
                                _cwc_3296 = [ 0 ]; 
                                _cwc_3297 = _sel_VxA_( _cwc_3296, _cwc_3244); 
                                _cwc_3299 = _eq_SxS_( _cwc_3297, _cwc_3298); 
                                _cwc_3300 = _and_SxS_( _cwc_3299, _cwc_3295); 
                                if (_cwc_3300) 
                                { 
                                  _cwc_3294 = UTDScalarB:Array::to_bool( i) ; 
                                  _cwc_3221 = _cwc_3294; 
                                }
                                else
                                { 
                                  _cwc_3288 = true; 
                                  _cwc_3291 = 28; 
                                  _cwc_3289 = [ 0 ]; 
                                  _cwc_3290 = _sel_VxA_( _cwc_3289, _cwc_3244); 
                                  _cwc_3292 = _eq_SxS_( _cwc_3290, _cwc_3291); 
                                  _cwc_3293 = _and_SxS_( _cwc_3292, _cwc_3288); 
                                  if (_cwc_3293) 
                                  { 
                                    _cwc_3287 = UTDScalarB:Array::to_bool( i) ; 
                                    _cwc_3221 = _cwc_3287; 
                                  }
                                  else
                                  { 
                                    _cwc_3281 = true; 
                                    _cwc_3284 = 42; 
                                    _cwc_3282 = [ 0 ]; 
                                    _cwc_3283 = _sel_VxA_( _cwc_3282, _cwc_3244); 
                                    _cwc_3285 = _eq_SxS_( _cwc_3283, _cwc_3284); 
                                    _cwc_3286 = _and_SxS_( _cwc_3285, _cwc_3281); 
                                    if (_cwc_3286) 
                                    { 
                                      _cwc_3280 = UTDScalarB:Array::to_bool( i) ; 
                                      _cwc_3221 = _cwc_3280; 
                                    }
                                    else
                                    { 
                                      _cwc_3274 = true; 
                                      _cwc_3277 = 56; 
                                      _cwc_3275 = [ 0 ]; 
                                      _cwc_3276 = _sel_VxA_( _cwc_3275, _cwc_3244); 
                                      _cwc_3278 = _eq_SxS_( _cwc_3276, _cwc_3277); 
                                      _cwc_3279 = _and_SxS_( _cwc_3278, _cwc_3274); 
                                      if (_cwc_3279) 
                                      { 
                                        _cwc_3273 = UTDScalarB:Array::to_bool( i) ; 
                                        _cwc_3221 = _cwc_3273; 
                                      }
                                      else
                                      { 
                                        _cwc_3267 = true; 
                                        _cwc_3270 = 70; 
                                        _cwc_3268 = [ 0 ]; 
                                        _cwc_3269 = _sel_VxA_( _cwc_3268, _cwc_3244); 
                                        _cwc_3271 = _eq_SxS_( _cwc_3269, _cwc_3270); 
                                        _cwc_3272 = _and_SxS_( _cwc_3271, _cwc_3267); 
                                        if (_cwc_3272) 
                                        { 
                                          _cwc_3266 = UTDScalarB:Array::to_bool( i) ; 
                                          _cwc_3221 = _cwc_3266; 
                                        }
                                        else
                                        { 
                                          _cwc_3260 = true; 
                                          _cwc_3263 = 84; 
                                          _cwc_3261 = [ 0 ]; 
                                          _cwc_3262 = _sel_VxA_( _cwc_3261, _cwc_3244); 
                                          _cwc_3264 = _eq_SxS_( _cwc_3262, _cwc_3263); 
                                          _cwc_3265 = _and_SxS_( _cwc_3264, _cwc_3260); 
                                          if (_cwc_3265) 
                                          { 
                                            _cwc_3259 = UTDScalarB:Array::to_bool( i) ; 
                                            _cwc_3221 = _cwc_3259; 
                                          }
                                          else
                                          { 
                                            _cwc_3253 = true; 
                                            _cwc_3256 = 98; 
                                            _cwc_3254 = [ 0 ]; 
                                            _cwc_3255 = _sel_VxA_( _cwc_3254, _cwc_3244); 
                                            _cwc_3257 = _eq_SxS_( _cwc_3255, _cwc_3256); 
                                            _cwc_3258 = _and_SxS_( _cwc_3257, _cwc_3253); 
                                            if (_cwc_3258) 
                                            { 
                                              _cwc_3252 = UTDScalarB:Array::to_bool( i) ; 
                                              _cwc_3221 = _cwc_3252; 
                                            }
                                            else
                                            { 
                                              _cwc_3246 = true; 
                                              _cwc_3249 = 112; 
                                              _cwc_3247 = [ 0 ]; 
                                              _cwc_3248 = _sel_VxA_( _cwc_3247, _cwc_3244); 
                                              _cwc_3250 = _eq_SxS_( _cwc_3248, _cwc_3249); 
                                              _cwc_3251 = _and_SxS_( _cwc_3250, _cwc_3246); 
                                              if (_cwc_3251) 
                                              { 
                                                _cwc_3245 = UTDScalarB:Array::to_bool( i) ; 
                                                _cwc_3221 = _cwc_3245; 
                                              }
                                              else
                                              { 
                                                _cwc_3243 = UTDScalarB:Array::to_bool( i) ; 
                                                _cwc_3221 = _cwc_3243; 
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      { 
        _cwc_3241 = 2; 
        _cwc_3242 = _eq_SxS_( _cwc_3223, _cwc_3241); 
        if (_cwc_3242) 
        { 
          _cwc_3228 = _shape_A_( i); 
          _cwc_3230 = true; 
          _cwc_3233 = 4; 
          _cwc_3231 = [ 0 ]; 
          _cwc_3232 = _sel_VxA_( _cwc_3231, _cwc_3228); 
          _cwc_3234 = _eq_SxS_( _cwc_3232, _cwc_3233); 
          _cwc_3235 = _and_SxS_( _cwc_3234, _cwc_3230); 
          _cwc_3238 = 4; 
          _cwc_3236 = [ 1 ]; 
          _cwc_3237 = _sel_VxA_( _cwc_3236, _cwc_3228); 
          _cwc_3239 = _eq_SxS_( _cwc_3237, _cwc_3238); 
          _cwc_3240 = _and_SxS_( _cwc_3239, _cwc_3235); 
          if (_cwc_3240) 
          { 
            _cwc_3229 = UTDScalarB:Array::to_bool( i) ; 
            _cwc_3221 = _cwc_3229; 
          }
          else
          { 
            _cwc_3227 = UTDScalarB:Array::to_bool( i) ; 
            _cwc_3221 = _cwc_3227; 
          }
        }
        else
        { 
          _cwc_3225 = 3; 
          _cwc_3226 = _eq_SxS_( _cwc_3223, _cwc_3225); 
          if (_cwc_3226) 
          { 
            _cwc_3224 = UTDScalarB:Array::to_bool( i) ; 
            _cwc_3221 = _cwc_3224; 
          }
          else
          { 
            _cwc_3222 = UTDScalarB:Array::to_bool( i) ; 
            _cwc_3221 = _cwc_3222; 
          }
        }
      }
    }
    else
    { 
      _cwc_3388 = ArrayArith::to_bool( i) ; 
      _cwc_3221 = _cwc_3388; 
    }
  }
  return( _cwc_3221); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::to_bool(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:Array::to_bool( int[*] i { ,NN } )
/*
 *  to_bool :: { int[*] -> ( bool[*]),
                 int -> ( bool),
                 int[+] -> ( bool[+])}
 *  dispatching to: ArrayArith::to_bool,
 *                  Bool::to_bool
 */
{ 
  bool[*] _cwc_3395 { , NN } ; 
  bool _cwc_3403 { , NN } ; 
  int _cwc_3402 { , NN } ; 
  bool _cwc_3401 { , NN } ; 
  int _cwc_3400 { , NN } ; 
  bool _cwc_3399 { , NN } ; 
  int _cwc_3398 { , NN } ; 
  int _cwc_3397 { , NN } ; 
  bool[+] _cwc_3396 { , NN } ; 

  _cwc_3400 = _dim_A_( i); 
  _cwc_3402 = 0; 
  _cwc_3403 = _eq_SxS_( _cwc_3400, _cwc_3402); 
  if (_cwc_3403) 
  { 
    _cwc_3401 = Bool::to_bool( i) ; 
    _cwc_3395 = _cwc_3401; 
  }
  else
  { 
    _cwc_3397 = _dim_A_( i); 
    _cwc_3398 = 0; 
    _cwc_3399 = _gt_SxS_( _cwc_3397, _cwc_3398); 
    if (_cwc_3399) 
    { 
      _cwc_3396 = ArrayArith::to_bool( i) ; 
      _cwc_3395 = _cwc_3396; 
    }
    else
    { 
      _cwc_3395 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::to_bool :: int[*] -> bool[*] ", i); 
    }
  }
  return( _cwc_3395); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::comaBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[.] UTDScalarB::comaBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  comaBBB :: { bool[*] -> { bool[*] -> ( bool[.]),
                              bool -> ( bool[.]),
                              bool[+] -> ( bool[.]),
                              bool[.] -> ( bool[.]),
                              bool[4] -> ( bool[8]),
                              bool[8] -> ( bool[12]),
                              bool[12] -> ( bool[16]),
                              bool[14] -> ( bool[.])},
                 bool -> { bool[*] -> ( bool[2]),
                           bool -> ( bool[2])},
                 bool[+] -> { bool[*] -> ( bool[.]),
                              bool -> ( bool[.]),
                              bool[+] -> ( bool[.]),
                              bool[.] -> ( bool[.]),
                              bool[4] -> ( bool[8]),
                              bool[8] -> ( bool[12]),
                              bool[12] -> ( bool[16]),
                              bool[14] -> ( bool[.])},
                 bool[.] -> { bool[*] -> ( bool[.]),
                              bool -> ( bool[.]),
                              bool[+] -> ( bool[.]),
                              bool[.] -> ( bool[.]),
                              bool[4] -> ( bool[8]),
                              bool[8] -> ( bool[12]),
                              bool[12] -> ( bool[16]),
                              bool[14] -> ( bool[.])},
                 bool[2] -> { bool[*] -> ( bool[3]),
                              bool -> ( bool[3]),
                              bool[+] -> ( --),
                              bool[.] -> ( --)},
                 bool[3] -> { bool[*] -> ( bool[4]),
                              bool -> ( bool[4]),
                              bool[+] -> ( --),
                              bool[.] -> ( --)},
                 bool[4] -> { bool[*] -> ( bool[.]),
                              bool -> ( bool[5]),
                              bool[+] -> ( bool[.]),
                              bool[.] -> ( bool[.]),
                              bool[4] -> ( bool[8]),
                              bool[8] -> ( bool[12]),
                              bool[12] -> ( bool[16])},
                 bool[5] -> { bool[*] -> ( bool[6]),
                              bool -> ( bool[6]),
                              bool[+] -> ( --),
                              bool[.] -> ( --),
                              bool[4] -> ( --),
                              bool[8] -> ( --),
                              bool[12] -> ( --)},
                 bool[6] -> { bool[*] -> ( bool[7]),
                              bool -> ( bool[7]),
                              bool[+] -> ( --),
                              bool[.] -> ( --),
                              bool[4] -> ( --),
                              bool[8] -> ( --),
                              bool[12] -> ( --)},
                 bool[7] -> { bool[*] -> ( bool[8]),
                              bool -> ( bool[8]),
                              bool[+] -> ( --),
                              bool[.] -> ( --),
                              bool[4] -> ( --),
                              bool[8] -> ( --),
                              bool[12] -> ( --)},
                 bool[8] -> { bool[*] -> ( bool[9]),
                              bool -> ( bool[9]),
                              bool[+] -> ( --),
                              bool[.] -> ( --),
                              bool[4] -> ( --),
                              bool[8] -> ( --),
                              bool[12] -> ( --)},
                 bool[9] -> { bool[*] -> ( bool[10]),
                              bool -> ( bool[10]),
                              bool[+] -> ( --),
                              bool[.] -> ( --),
                              bool[4] -> ( --),
                              bool[8] -> ( --),
                              bool[12] -> ( --)},
                 bool[10] -> { bool[*] -> ( bool[11]),
                               bool -> ( bool[11]),
                               bool[+] -> ( --),
                               bool[.] -> ( --),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --)},
                 bool[11] -> { bool[*] -> ( bool[12]),
                               bool -> ( bool[12]),
                               bool[+] -> ( --),
                               bool[.] -> ( --),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --)},
                 bool[12] -> { bool[*] -> ( bool[13]),
                               bool -> ( bool[13]),
                               bool[+] -> ( --),
                               bool[.] -> ( --),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --)},
                 bool[13] -> { bool[*] -> ( bool[14]),
                               bool -> ( bool[14]),
                               bool[+] -> ( --),
                               bool[.] -> ( --),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --)},
                 bool[14] -> { bool[*] -> ( bool[28]),
                               bool -> ( --),
                               bool[+] -> ( bool[28]),
                               bool[.] -> ( bool[28]),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --),
                               bool[14] -> ( bool[28])},
                 bool[28] -> { bool[*] -> ( bool[42]),
                               bool -> ( --),
                               bool[+] -> ( bool[42]),
                               bool[.] -> ( bool[42]),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --),
                               bool[14] -> ( bool[42])},
                 bool[42] -> { bool[*] -> ( bool[56]),
                               bool -> ( --),
                               bool[+] -> ( bool[56]),
                               bool[.] -> ( bool[56]),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --),
                               bool[14] -> ( bool[56])},
                 bool[56] -> { bool[*] -> ( bool[70]),
                               bool -> ( --),
                               bool[+] -> ( bool[70]),
                               bool[.] -> ( bool[70]),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --),
                               bool[14] -> ( bool[70])},
                 bool[70] -> { bool[*] -> ( bool[84]),
                               bool -> ( --),
                               bool[+] -> ( bool[84]),
                               bool[.] -> ( bool[84]),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --),
                               bool[14] -> ( bool[84])},
                 bool[84] -> { bool[*] -> ( bool[98]),
                               bool -> ( --),
                               bool[+] -> ( bool[98]),
                               bool[.] -> ( bool[98]),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --),
                               bool[14] -> ( bool[98])},
                 bool[98] -> { bool[*] -> ( bool[112]),
                               bool -> ( --),
                               bool[+] -> ( bool[112]),
                               bool[.] -> ( bool[112]),
                               bool[4] -> ( --),
                               bool[8] -> ( --),
                               bool[12] -> ( --),
                               bool[14] -> ( bool[112])},
                 bool[112] -> { bool[*] -> ( bool[126]),
                                bool -> ( --),
                                bool[+] -> ( bool[126]),
                                bool[.] -> ( bool[126]),
                                bool[4] -> ( --),
                                bool[8] -> ( --),
                                bool[12] -> ( --),
                                bool[14] -> ( bool[126])},
                 bool[126] -> { bool[*] -> ( bool[.]),
                                bool -> ( --),
                                bool[+] -> ( bool[.]),
                                bool[.] -> ( bool[.]),
                                bool[4] -> ( --),
                                bool[8] -> ( --),
                                bool[12] -> ( --),
                                bool[14] -> ( bool[.])}}
 *  dispatching to: UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB,
 *                  UTDScalarB::comaBBB
 */
{ 
  bool[.] _cwc_3404 { , NN } ; 
  bool _cwc_4227 { , NN } ; 
  int _cwc_4226 { , NN } ; 
  bool _cwc_4225 { , NN } ; 
  int _cwc_4224 { , NN } ; 
  bool[2] _cwc_4223 { , NN } ; 
  int _cwc_4222 { , NN } ; 
  int _cwc_4221 { , NN } ; 
  bool _cwc_4220 { , NN } ; 
  int _cwc_4219 { , NN } ; 
  bool _cwc_4218 { , NN } ; 
  bool _cwc_4217 { , NN } ; 
  int{2} _cwc_4216 { , NN } ; 
  int _cwc_4215 { , NN } ; 
  int[1]{0} _cwc_4214 { , NN } ; 
  bool _cwc_4213 { , NN } ; 
  bool _cwc_4212 { , NN } ; 
  int _cwc_4211 { , NN } ; 
  bool[3] _cwc_4210 { , NN } ; 
  int _cwc_4209 { , NN } ; 
  bool _cwc_4208 { , NN } ; 
  int _cwc_4207 { , NN } ; 
  bool[.] _cwc_4206 { , NN } ; 
  int _cwc_4205 { , NN } ; 
  bool _cwc_4204 { , NN } ; 
  bool _cwc_4203 { , NN } ; 
  int{3} _cwc_4202 { , NN } ; 
  int _cwc_4201 { , NN } ; 
  int[1]{0} _cwc_4200 { , NN } ; 
  bool _cwc_4199 { , NN } ; 
  bool _cwc_4198 { , NN } ; 
  int _cwc_4197 { , NN } ; 
  bool[4] _cwc_4196 { , NN } ; 
  int _cwc_4195 { , NN } ; 
  bool _cwc_4194 { , NN } ; 
  int _cwc_4193 { , NN } ; 
  bool[.] _cwc_4192 { , NN } ; 
  int _cwc_4191 { , NN } ; 
  bool _cwc_4190 { , NN } ; 
  bool _cwc_4189 { , NN } ; 
  int{4} _cwc_4188 { , NN } ; 
  int _cwc_4187 { , NN } ; 
  int[1]{0} _cwc_4186 { , NN } ; 
  bool _cwc_4185 { , NN } ; 
  bool _cwc_4184 { , NN } ; 
  int _cwc_4183 { , NN } ; 
  bool[5] _cwc_4182 { , NN } ; 
  int _cwc_4181 { , NN } ; 
  bool _cwc_4180 { , NN } ; 
  int _cwc_4179 { , NN } ; 
  bool _cwc_4178 { , NN } ; 
  bool _cwc_4177 { , NN } ; 
  int{4} _cwc_4176 { , NN } ; 
  int _cwc_4175 { , NN } ; 
  int[1]{0} _cwc_4174 { , NN } ; 
  bool _cwc_4173 { , NN } ; 
  bool[8] _cwc_4172 { , NN } ; 
  bool _cwc_4171 { , NN } ; 
  bool _cwc_4170 { , NN } ; 
  int{8} _cwc_4169 { , NN } ; 
  int _cwc_4168 { , NN } ; 
  int[1]{0} _cwc_4167 { , NN } ; 
  bool _cwc_4166 { , NN } ; 
  bool[12] _cwc_4165 { , NN } ; 
  bool _cwc_4164 { , NN } ; 
  bool _cwc_4163 { , NN } ; 
  int{12} _cwc_4162 { , NN } ; 
  int _cwc_4161 { , NN } ; 
  int[1]{0} _cwc_4160 { , NN } ; 
  bool _cwc_4159 { , NN } ; 
  bool[16] _cwc_4158 { , NN } ; 
  int[+] _cwc_4157 { , NN } ; 
  bool[.] _cwc_4156 { , NN } ; 
  int _cwc_4155 { , NN } ; 
  bool _cwc_4154 { , NN } ; 
  bool _cwc_4153 { , NN } ; 
  int{5} _cwc_4152 { , NN } ; 
  int _cwc_4151 { , NN } ; 
  int[1]{0} _cwc_4150 { , NN } ; 
  bool _cwc_4149 { , NN } ; 
  bool _cwc_4148 { , NN } ; 
  int _cwc_4147 { , NN } ; 
  bool[6] _cwc_4146 { , NN } ; 
  int _cwc_4145 { , NN } ; 
  bool _cwc_4144 { , NN } ; 
  int _cwc_4143 { , NN } ; 
  bool _cwc_4142 { , NN } ; 
  bool _cwc_4141 { , NN } ; 
  int{4} _cwc_4140 { , NN } ; 
  int _cwc_4139 { , NN } ; 
  int[1]{0} _cwc_4138 { , NN } ; 
  bool _cwc_4137 { , NN } ; 
  bool[.] _cwc_4136 { , NN } ; 
  bool _cwc_4135 { , NN } ; 
  bool _cwc_4134 { , NN } ; 
  int{8} _cwc_4133 { , NN } ; 
  int _cwc_4132 { , NN } ; 
  int[1]{0} _cwc_4131 { , NN } ; 
  bool _cwc_4130 { , NN } ; 
  bool[.] _cwc_4129 { , NN } ; 
  bool _cwc_4128 { , NN } ; 
  bool _cwc_4127 { , NN } ; 
  int{12} _cwc_4126 { , NN } ; 
  int _cwc_4125 { , NN } ; 
  int[1]{0} _cwc_4124 { , NN } ; 
  bool _cwc_4123 { , NN } ; 
  bool[.] _cwc_4122 { , NN } ; 
  int[+] _cwc_4121 { , NN } ; 
  bool[.] _cwc_4120 { , NN } ; 
  int _cwc_4119 { , NN } ; 
  bool _cwc_4118 { , NN } ; 
  bool _cwc_4117 { , NN } ; 
  int{6} _cwc_4116 { , NN } ; 
  int _cwc_4115 { , NN } ; 
  int[1]{0} _cwc_4114 { , NN } ; 
  bool _cwc_4113 { , NN } ; 
  bool _cwc_4112 { , NN } ; 
  int _cwc_4111 { , NN } ; 
  bool[7] _cwc_4110 { , NN } ; 
  int _cwc_4109 { , NN } ; 
  bool _cwc_4108 { , NN } ; 
  int _cwc_4107 { , NN } ; 
  bool _cwc_4106 { , NN } ; 
  bool _cwc_4105 { , NN } ; 
  int{4} _cwc_4104 { , NN } ; 
  int _cwc_4103 { , NN } ; 
  int[1]{0} _cwc_4102 { , NN } ; 
  bool _cwc_4101 { , NN } ; 
  bool[.] _cwc_4100 { , NN } ; 
  bool _cwc_4099 { , NN } ; 
  bool _cwc_4098 { , NN } ; 
  int{8} _cwc_4097 { , NN } ; 
  int _cwc_4096 { , NN } ; 
  int[1]{0} _cwc_4095 { , NN } ; 
  bool _cwc_4094 { , NN } ; 
  bool[.] _cwc_4093 { , NN } ; 
  bool _cwc_4092 { , NN } ; 
  bool _cwc_4091 { , NN } ; 
  int{12} _cwc_4090 { , NN } ; 
  int _cwc_4089 { , NN } ; 
  int[1]{0} _cwc_4088 { , NN } ; 
  bool _cwc_4087 { , NN } ; 
  bool[.] _cwc_4086 { , NN } ; 
  int[+] _cwc_4085 { , NN } ; 
  bool[.] _cwc_4084 { , NN } ; 
  int _cwc_4083 { , NN } ; 
  bool _cwc_4082 { , NN } ; 
  bool _cwc_4081 { , NN } ; 
  int{7} _cwc_4080 { , NN } ; 
  int _cwc_4079 { , NN } ; 
  int[1]{0} _cwc_4078 { , NN } ; 
  bool _cwc_4077 { , NN } ; 
  bool _cwc_4076 { , NN } ; 
  int _cwc_4075 { , NN } ; 
  bool[8] _cwc_4074 { , NN } ; 
  int _cwc_4073 { , NN } ; 
  bool _cwc_4072 { , NN } ; 
  int _cwc_4071 { , NN } ; 
  bool _cwc_4070 { , NN } ; 
  bool _cwc_4069 { , NN } ; 
  int{4} _cwc_4068 { , NN } ; 
  int _cwc_4067 { , NN } ; 
  int[1]{0} _cwc_4066 { , NN } ; 
  bool _cwc_4065 { , NN } ; 
  bool[.] _cwc_4064 { , NN } ; 
  bool _cwc_4063 { , NN } ; 
  bool _cwc_4062 { , NN } ; 
  int{8} _cwc_4061 { , NN } ; 
  int _cwc_4060 { , NN } ; 
  int[1]{0} _cwc_4059 { , NN } ; 
  bool _cwc_4058 { , NN } ; 
  bool[.] _cwc_4057 { , NN } ; 
  bool _cwc_4056 { , NN } ; 
  bool _cwc_4055 { , NN } ; 
  int{12} _cwc_4054 { , NN } ; 
  int _cwc_4053 { , NN } ; 
  int[1]{0} _cwc_4052 { , NN } ; 
  bool _cwc_4051 { , NN } ; 
  bool[.] _cwc_4050 { , NN } ; 
  int[+] _cwc_4049 { , NN } ; 
  bool[.] _cwc_4048 { , NN } ; 
  int _cwc_4047 { , NN } ; 
  bool _cwc_4046 { , NN } ; 
  bool _cwc_4045 { , NN } ; 
  int{8} _cwc_4044 { , NN } ; 
  int _cwc_4043 { , NN } ; 
  int[1]{0} _cwc_4042 { , NN } ; 
  bool _cwc_4041 { , NN } ; 
  bool _cwc_4040 { , NN } ; 
  int _cwc_4039 { , NN } ; 
  bool[9] _cwc_4038 { , NN } ; 
  int _cwc_4037 { , NN } ; 
  bool _cwc_4036 { , NN } ; 
  int _cwc_4035 { , NN } ; 
  bool _cwc_4034 { , NN } ; 
  bool _cwc_4033 { , NN } ; 
  int{4} _cwc_4032 { , NN } ; 
  int _cwc_4031 { , NN } ; 
  int[1]{0} _cwc_4030 { , NN } ; 
  bool _cwc_4029 { , NN } ; 
  bool[.] _cwc_4028 { , NN } ; 
  bool _cwc_4027 { , NN } ; 
  bool _cwc_4026 { , NN } ; 
  int{8} _cwc_4025 { , NN } ; 
  int _cwc_4024 { , NN } ; 
  int[1]{0} _cwc_4023 { , NN } ; 
  bool _cwc_4022 { , NN } ; 
  bool[.] _cwc_4021 { , NN } ; 
  bool _cwc_4020 { , NN } ; 
  bool _cwc_4019 { , NN } ; 
  int{12} _cwc_4018 { , NN } ; 
  int _cwc_4017 { , NN } ; 
  int[1]{0} _cwc_4016 { , NN } ; 
  bool _cwc_4015 { , NN } ; 
  bool[.] _cwc_4014 { , NN } ; 
  int[+] _cwc_4013 { , NN } ; 
  bool[.] _cwc_4012 { , NN } ; 
  int _cwc_4011 { , NN } ; 
  bool _cwc_4010 { , NN } ; 
  bool _cwc_4009 { , NN } ; 
  int{9} _cwc_4008 { , NN } ; 
  int _cwc_4007 { , NN } ; 
  int[1]{0} _cwc_4006 { , NN } ; 
  bool _cwc_4005 { , NN } ; 
  bool _cwc_4004 { , NN } ; 
  int _cwc_4003 { , NN } ; 
  bool[10] _cwc_4002 { , NN } ; 
  int _cwc_4001 { , NN } ; 
  bool _cwc_4000 { , NN } ; 
  int _cwc_3999 { , NN } ; 
  bool _cwc_3998 { , NN } ; 
  bool _cwc_3997 { , NN } ; 
  int{4} _cwc_3996 { , NN } ; 
  int _cwc_3995 { , NN } ; 
  int[1]{0} _cwc_3994 { , NN } ; 
  bool _cwc_3993 { , NN } ; 
  bool[.] _cwc_3992 { , NN } ; 
  bool _cwc_3991 { , NN } ; 
  bool _cwc_3990 { , NN } ; 
  int{8} _cwc_3989 { , NN } ; 
  int _cwc_3988 { , NN } ; 
  int[1]{0} _cwc_3987 { , NN } ; 
  bool _cwc_3986 { , NN } ; 
  bool[.] _cwc_3985 { , NN } ; 
  bool _cwc_3984 { , NN } ; 
  bool _cwc_3983 { , NN } ; 
  int{12} _cwc_3982 { , NN } ; 
  int _cwc_3981 { , NN } ; 
  int[1]{0} _cwc_3980 { , NN } ; 
  bool _cwc_3979 { , NN } ; 
  bool[.] _cwc_3978 { , NN } ; 
  int[+] _cwc_3977 { , NN } ; 
  bool[.] _cwc_3976 { , NN } ; 
  int _cwc_3975 { , NN } ; 
  bool _cwc_3974 { , NN } ; 
  bool _cwc_3973 { , NN } ; 
  int{10} _cwc_3972 { , NN } ; 
  int _cwc_3971 { , NN } ; 
  int[1]{0} _cwc_3970 { , NN } ; 
  bool _cwc_3969 { , NN } ; 
  bool _cwc_3968 { , NN } ; 
  int _cwc_3967 { , NN } ; 
  bool[11] _cwc_3966 { , NN } ; 
  int _cwc_3965 { , NN } ; 
  bool _cwc_3964 { , NN } ; 
  int _cwc_3963 { , NN } ; 
  bool _cwc_3962 { , NN } ; 
  bool _cwc_3961 { , NN } ; 
  int{4} _cwc_3960 { , NN } ; 
  int _cwc_3959 { , NN } ; 
  int[1]{0} _cwc_3958 { , NN } ; 
  bool _cwc_3957 { , NN } ; 
  bool[.] _cwc_3956 { , NN } ; 
  bool _cwc_3955 { , NN } ; 
  bool _cwc_3954 { , NN } ; 
  int{8} _cwc_3953 { , NN } ; 
  int _cwc_3952 { , NN } ; 
  int[1]{0} _cwc_3951 { , NN } ; 
  bool _cwc_3950 { , NN } ; 
  bool[.] _cwc_3949 { , NN } ; 
  bool _cwc_3948 { , NN } ; 
  bool _cwc_3947 { , NN } ; 
  int{12} _cwc_3946 { , NN } ; 
  int _cwc_3945 { , NN } ; 
  int[1]{0} _cwc_3944 { , NN } ; 
  bool _cwc_3943 { , NN } ; 
  bool[.] _cwc_3942 { , NN } ; 
  int[+] _cwc_3941 { , NN } ; 
  bool[.] _cwc_3940 { , NN } ; 
  int _cwc_3939 { , NN } ; 
  bool _cwc_3938 { , NN } ; 
  bool _cwc_3937 { , NN } ; 
  int{11} _cwc_3936 { , NN } ; 
  int _cwc_3935 { , NN } ; 
  int[1]{0} _cwc_3934 { , NN } ; 
  bool _cwc_3933 { , NN } ; 
  bool _cwc_3932 { , NN } ; 
  int _cwc_3931 { , NN } ; 
  bool[12] _cwc_3930 { , NN } ; 
  int _cwc_3929 { , NN } ; 
  bool _cwc_3928 { , NN } ; 
  int _cwc_3927 { , NN } ; 
  bool _cwc_3926 { , NN } ; 
  bool _cwc_3925 { , NN } ; 
  int{4} _cwc_3924 { , NN } ; 
  int _cwc_3923 { , NN } ; 
  int[1]{0} _cwc_3922 { , NN } ; 
  bool _cwc_3921 { , NN } ; 
  bool[.] _cwc_3920 { , NN } ; 
  bool _cwc_3919 { , NN } ; 
  bool _cwc_3918 { , NN } ; 
  int{8} _cwc_3917 { , NN } ; 
  int _cwc_3916 { , NN } ; 
  int[1]{0} _cwc_3915 { , NN } ; 
  bool _cwc_3914 { , NN } ; 
  bool[.] _cwc_3913 { , NN } ; 
  bool _cwc_3912 { , NN } ; 
  bool _cwc_3911 { , NN } ; 
  int{12} _cwc_3910 { , NN } ; 
  int _cwc_3909 { , NN } ; 
  int[1]{0} _cwc_3908 { , NN } ; 
  bool _cwc_3907 { , NN } ; 
  bool[.] _cwc_3906 { , NN } ; 
  int[+] _cwc_3905 { , NN } ; 
  bool[.] _cwc_3904 { , NN } ; 
  int _cwc_3903 { , NN } ; 
  bool _cwc_3902 { , NN } ; 
  bool _cwc_3901 { , NN } ; 
  int{12} _cwc_3900 { , NN } ; 
  int _cwc_3899 { , NN } ; 
  int[1]{0} _cwc_3898 { , NN } ; 
  bool _cwc_3897 { , NN } ; 
  bool _cwc_3896 { , NN } ; 
  int _cwc_3895 { , NN } ; 
  bool[13] _cwc_3894 { , NN } ; 
  int _cwc_3893 { , NN } ; 
  bool _cwc_3892 { , NN } ; 
  int _cwc_3891 { , NN } ; 
  bool _cwc_3890 { , NN } ; 
  bool _cwc_3889 { , NN } ; 
  int{4} _cwc_3888 { , NN } ; 
  int _cwc_3887 { , NN } ; 
  int[1]{0} _cwc_3886 { , NN } ; 
  bool _cwc_3885 { , NN } ; 
  bool[.] _cwc_3884 { , NN } ; 
  bool _cwc_3883 { , NN } ; 
  bool _cwc_3882 { , NN } ; 
  int{8} _cwc_3881 { , NN } ; 
  int _cwc_3880 { , NN } ; 
  int[1]{0} _cwc_3879 { , NN } ; 
  bool _cwc_3878 { , NN } ; 
  bool[.] _cwc_3877 { , NN } ; 
  bool _cwc_3876 { , NN } ; 
  bool _cwc_3875 { , NN } ; 
  int{12} _cwc_3874 { , NN } ; 
  int _cwc_3873 { , NN } ; 
  int[1]{0} _cwc_3872 { , NN } ; 
  bool _cwc_3871 { , NN } ; 
  bool[.] _cwc_3870 { , NN } ; 
  int[+] _cwc_3869 { , NN } ; 
  bool[.] _cwc_3868 { , NN } ; 
  int _cwc_3867 { , NN } ; 
  bool _cwc_3866 { , NN } ; 
  bool _cwc_3865 { , NN } ; 
  int{13} _cwc_3864 { , NN } ; 
  int _cwc_3863 { , NN } ; 
  int[1]{0} _cwc_3862 { , NN } ; 
  bool _cwc_3861 { , NN } ; 
  bool _cwc_3860 { , NN } ; 
  int _cwc_3859 { , NN } ; 
  bool[14] _cwc_3858 { , NN } ; 
  int _cwc_3857 { , NN } ; 
  bool _cwc_3856 { , NN } ; 
  int _cwc_3855 { , NN } ; 
  bool _cwc_3854 { , NN } ; 
  bool _cwc_3853 { , NN } ; 
  int{4} _cwc_3852 { , NN } ; 
  int _cwc_3851 { , NN } ; 
  int[1]{0} _cwc_3850 { , NN } ; 
  bool _cwc_3849 { , NN } ; 
  bool[.] _cwc_3848 { , NN } ; 
  bool _cwc_3847 { , NN } ; 
  bool _cwc_3846 { , NN } ; 
  int{8} _cwc_3845 { , NN } ; 
  int _cwc_3844 { , NN } ; 
  int[1]{0} _cwc_3843 { , NN } ; 
  bool _cwc_3842 { , NN } ; 
  bool[.] _cwc_3841 { , NN } ; 
  bool _cwc_3840 { , NN } ; 
  bool _cwc_3839 { , NN } ; 
  int{12} _cwc_3838 { , NN } ; 
  int _cwc_3837 { , NN } ; 
  int[1]{0} _cwc_3836 { , NN } ; 
  bool _cwc_3835 { , NN } ; 
  bool[.] _cwc_3834 { , NN } ; 
  int[+] _cwc_3833 { , NN } ; 
  bool[.] _cwc_3832 { , NN } ; 
  int _cwc_3831 { , NN } ; 
  bool _cwc_3830 { , NN } ; 
  bool _cwc_3829 { , NN } ; 
  int{14} _cwc_3828 { , NN } ; 
  int _cwc_3827 { , NN } ; 
  int[1]{0} _cwc_3826 { , NN } ; 
  bool _cwc_3825 { , NN } ; 
  bool _cwc_3824 { , NN } ; 
  int _cwc_3823 { , NN } ; 
  bool[.] _cwc_3822 { , NN } ; 
  int _cwc_3821 { , NN } ; 
  bool _cwc_3820 { , NN } ; 
  int _cwc_3819 { , NN } ; 
  bool _cwc_3818 { , NN } ; 
  bool _cwc_3817 { , NN } ; 
  int{4} _cwc_3816 { , NN } ; 
  int _cwc_3815 { , NN } ; 
  int[1]{0} _cwc_3814 { , NN } ; 
  bool _cwc_3813 { , NN } ; 
  bool[.] _cwc_3812 { , NN } ; 
  bool _cwc_3811 { , NN } ; 
  bool _cwc_3810 { , NN } ; 
  int{8} _cwc_3809 { , NN } ; 
  int _cwc_3808 { , NN } ; 
  int[1]{0} _cwc_3807 { , NN } ; 
  bool _cwc_3806 { , NN } ; 
  bool[.] _cwc_3805 { , NN } ; 
  bool _cwc_3804 { , NN } ; 
  bool _cwc_3803 { , NN } ; 
  int{12} _cwc_3802 { , NN } ; 
  int _cwc_3801 { , NN } ; 
  int[1]{0} _cwc_3800 { , NN } ; 
  bool _cwc_3799 { , NN } ; 
  bool[.] _cwc_3798 { , NN } ; 
  bool _cwc_3797 { , NN } ; 
  bool _cwc_3796 { , NN } ; 
  int{14} _cwc_3795 { , NN } ; 
  int _cwc_3794 { , NN } ; 
  int[1]{0} _cwc_3793 { , NN } ; 
  bool _cwc_3792 { , NN } ; 
  bool[28] _cwc_3791 { , NN } ; 
  int[+] _cwc_3790 { , NN } ; 
  bool[.] _cwc_3789 { , NN } ; 
  int _cwc_3788 { , NN } ; 
  bool _cwc_3787 { , NN } ; 
  bool _cwc_3786 { , NN } ; 
  int{28} _cwc_3785 { , NN } ; 
  int _cwc_3784 { , NN } ; 
  int[1]{0} _cwc_3783 { , NN } ; 
  bool _cwc_3782 { , NN } ; 
  bool _cwc_3781 { , NN } ; 
  int _cwc_3780 { , NN } ; 
  bool[.] _cwc_3779 { , NN } ; 
  int _cwc_3778 { , NN } ; 
  bool _cwc_3777 { , NN } ; 
  int _cwc_3776 { , NN } ; 
  bool _cwc_3775 { , NN } ; 
  bool _cwc_3774 { , NN } ; 
  int{4} _cwc_3773 { , NN } ; 
  int _cwc_3772 { , NN } ; 
  int[1]{0} _cwc_3771 { , NN } ; 
  bool _cwc_3770 { , NN } ; 
  bool[.] _cwc_3769 { , NN } ; 
  bool _cwc_3768 { , NN } ; 
  bool _cwc_3767 { , NN } ; 
  int{8} _cwc_3766 { , NN } ; 
  int _cwc_3765 { , NN } ; 
  int[1]{0} _cwc_3764 { , NN } ; 
  bool _cwc_3763 { , NN } ; 
  bool[.] _cwc_3762 { , NN } ; 
  bool _cwc_3761 { , NN } ; 
  bool _cwc_3760 { , NN } ; 
  int{12} _cwc_3759 { , NN } ; 
  int _cwc_3758 { , NN } ; 
  int[1]{0} _cwc_3757 { , NN } ; 
  bool _cwc_3756 { , NN } ; 
  bool[.] _cwc_3755 { , NN } ; 
  bool _cwc_3754 { , NN } ; 
  bool _cwc_3753 { , NN } ; 
  int{14} _cwc_3752 { , NN } ; 
  int _cwc_3751 { , NN } ; 
  int[1]{0} _cwc_3750 { , NN } ; 
  bool _cwc_3749 { , NN } ; 
  bool[42] _cwc_3748 { , NN } ; 
  int[+] _cwc_3747 { , NN } ; 
  bool[.] _cwc_3746 { , NN } ; 
  int _cwc_3745 { , NN } ; 
  bool _cwc_3744 { , NN } ; 
  bool _cwc_3743 { , NN } ; 
  int{42} _cwc_3742 { , NN } ; 
  int _cwc_3741 { , NN } ; 
  int[1]{0} _cwc_3740 { , NN } ; 
  bool _cwc_3739 { , NN } ; 
  bool _cwc_3738 { , NN } ; 
  int _cwc_3737 { , NN } ; 
  bool[.] _cwc_3736 { , NN } ; 
  int _cwc_3735 { , NN } ; 
  bool _cwc_3734 { , NN } ; 
  int _cwc_3733 { , NN } ; 
  bool _cwc_3732 { , NN } ; 
  bool _cwc_3731 { , NN } ; 
  int{4} _cwc_3730 { , NN } ; 
  int _cwc_3729 { , NN } ; 
  int[1]{0} _cwc_3728 { , NN } ; 
  bool _cwc_3727 { , NN } ; 
  bool[.] _cwc_3726 { , NN } ; 
  bool _cwc_3725 { , NN } ; 
  bool _cwc_3724 { , NN } ; 
  int{8} _cwc_3723 { , NN } ; 
  int _cwc_3722 { , NN } ; 
  int[1]{0} _cwc_3721 { , NN } ; 
  bool _cwc_3720 { , NN } ; 
  bool[.] _cwc_3719 { , NN } ; 
  bool _cwc_3718 { , NN } ; 
  bool _cwc_3717 { , NN } ; 
  int{12} _cwc_3716 { , NN } ; 
  int _cwc_3715 { , NN } ; 
  int[1]{0} _cwc_3714 { , NN } ; 
  bool _cwc_3713 { , NN } ; 
  bool[.] _cwc_3712 { , NN } ; 
  bool _cwc_3711 { , NN } ; 
  bool _cwc_3710 { , NN } ; 
  int{14} _cwc_3709 { , NN } ; 
  int _cwc_3708 { , NN } ; 
  int[1]{0} _cwc_3707 { , NN } ; 
  bool _cwc_3706 { , NN } ; 
  bool[56] _cwc_3705 { , NN } ; 
  int[+] _cwc_3704 { , NN } ; 
  bool[.] _cwc_3703 { , NN } ; 
  int _cwc_3702 { , NN } ; 
  bool _cwc_3701 { , NN } ; 
  bool _cwc_3700 { , NN } ; 
  int{56} _cwc_3699 { , NN } ; 
  int _cwc_3698 { , NN } ; 
  int[1]{0} _cwc_3697 { , NN } ; 
  bool _cwc_3696 { , NN } ; 
  bool _cwc_3695 { , NN } ; 
  int _cwc_3694 { , NN } ; 
  bool[.] _cwc_3693 { , NN } ; 
  int _cwc_3692 { , NN } ; 
  bool _cwc_3691 { , NN } ; 
  int _cwc_3690 { , NN } ; 
  bool _cwc_3689 { , NN } ; 
  bool _cwc_3688 { , NN } ; 
  int{4} _cwc_3687 { , NN } ; 
  int _cwc_3686 { , NN } ; 
  int[1]{0} _cwc_3685 { , NN } ; 
  bool _cwc_3684 { , NN } ; 
  bool[.] _cwc_3683 { , NN } ; 
  bool _cwc_3682 { , NN } ; 
  bool _cwc_3681 { , NN } ; 
  int{8} _cwc_3680 { , NN } ; 
  int _cwc_3679 { , NN } ; 
  int[1]{0} _cwc_3678 { , NN } ; 
  bool _cwc_3677 { , NN } ; 
  bool[.] _cwc_3676 { , NN } ; 
  bool _cwc_3675 { , NN } ; 
  bool _cwc_3674 { , NN } ; 
  int{12} _cwc_3673 { , NN } ; 
  int _cwc_3672 { , NN } ; 
  int[1]{0} _cwc_3671 { , NN } ; 
  bool _cwc_3670 { , NN } ; 
  bool[.] _cwc_3669 { , NN } ; 
  bool _cwc_3668 { , NN } ; 
  bool _cwc_3667 { , NN } ; 
  int{14} _cwc_3666 { , NN } ; 
  int _cwc_3665 { , NN } ; 
  int[1]{0} _cwc_3664 { , NN } ; 
  bool _cwc_3663 { , NN } ; 
  bool[70] _cwc_3662 { , NN } ; 
  int[+] _cwc_3661 { , NN } ; 
  bool[.] _cwc_3660 { , NN } ; 
  int _cwc_3659 { , NN } ; 
  bool _cwc_3658 { , NN } ; 
  bool _cwc_3657 { , NN } ; 
  int{70} _cwc_3656 { , NN } ; 
  int _cwc_3655 { , NN } ; 
  int[1]{0} _cwc_3654 { , NN } ; 
  bool _cwc_3653 { , NN } ; 
  bool _cwc_3652 { , NN } ; 
  int _cwc_3651 { , NN } ; 
  bool[.] _cwc_3650 { , NN } ; 
  int _cwc_3649 { , NN } ; 
  bool _cwc_3648 { , NN } ; 
  int _cwc_3647 { , NN } ; 
  bool _cwc_3646 { , NN } ; 
  bool _cwc_3645 { , NN } ; 
  int{4} _cwc_3644 { , NN } ; 
  int _cwc_3643 { , NN } ; 
  int[1]{0} _cwc_3642 { , NN } ; 
  bool _cwc_3641 { , NN } ; 
  bool[.] _cwc_3640 { , NN } ; 
  bool _cwc_3639 { , NN } ; 
  bool _cwc_3638 { , NN } ; 
  int{8} _cwc_3637 { , NN } ; 
  int _cwc_3636 { , NN } ; 
  int[1]{0} _cwc_3635 { , NN } ; 
  bool _cwc_3634 { , NN } ; 
  bool[.] _cwc_3633 { , NN } ; 
  bool _cwc_3632 { , NN } ; 
  bool _cwc_3631 { , NN } ; 
  int{12} _cwc_3630 { , NN } ; 
  int _cwc_3629 { , NN } ; 
  int[1]{0} _cwc_3628 { , NN } ; 
  bool _cwc_3627 { , NN } ; 
  bool[.] _cwc_3626 { , NN } ; 
  bool _cwc_3625 { , NN } ; 
  bool _cwc_3624 { , NN } ; 
  int{14} _cwc_3623 { , NN } ; 
  int _cwc_3622 { , NN } ; 
  int[1]{0} _cwc_3621 { , NN } ; 
  bool _cwc_3620 { , NN } ; 
  bool[84] _cwc_3619 { , NN } ; 
  int[+] _cwc_3618 { , NN } ; 
  bool[.] _cwc_3617 { , NN } ; 
  int _cwc_3616 { , NN } ; 
  bool _cwc_3615 { , NN } ; 
  bool _cwc_3614 { , NN } ; 
  int{84} _cwc_3613 { , NN } ; 
  int _cwc_3612 { , NN } ; 
  int[1]{0} _cwc_3611 { , NN } ; 
  bool _cwc_3610 { , NN } ; 
  bool _cwc_3609 { , NN } ; 
  int _cwc_3608 { , NN } ; 
  bool[.] _cwc_3607 { , NN } ; 
  int _cwc_3606 { , NN } ; 
  bool _cwc_3605 { , NN } ; 
  int _cwc_3604 { , NN } ; 
  bool _cwc_3603 { , NN } ; 
  bool _cwc_3602 { , NN } ; 
  int{4} _cwc_3601 { , NN } ; 
  int _cwc_3600 { , NN } ; 
  int[1]{0} _cwc_3599 { , NN } ; 
  bool _cwc_3598 { , NN } ; 
  bool[.] _cwc_3597 { , NN } ; 
  bool _cwc_3596 { , NN } ; 
  bool _cwc_3595 { , NN } ; 
  int{8} _cwc_3594 { , NN } ; 
  int _cwc_3593 { , NN } ; 
  int[1]{0} _cwc_3592 { , NN } ; 
  bool _cwc_3591 { , NN } ; 
  bool[.] _cwc_3590 { , NN } ; 
  bool _cwc_3589 { , NN } ; 
  bool _cwc_3588 { , NN } ; 
  int{12} _cwc_3587 { , NN } ; 
  int _cwc_3586 { , NN } ; 
  int[1]{0} _cwc_3585 { , NN } ; 
  bool _cwc_3584 { , NN } ; 
  bool[.] _cwc_3583 { , NN } ; 
  bool _cwc_3582 { , NN } ; 
  bool _cwc_3581 { , NN } ; 
  int{14} _cwc_3580 { , NN } ; 
  int _cwc_3579 { , NN } ; 
  int[1]{0} _cwc_3578 { , NN } ; 
  bool _cwc_3577 { , NN } ; 
  bool[98] _cwc_3576 { , NN } ; 
  int[+] _cwc_3575 { , NN } ; 
  bool[.] _cwc_3574 { , NN } ; 
  int _cwc_3573 { , NN } ; 
  bool _cwc_3572 { , NN } ; 
  bool _cwc_3571 { , NN } ; 
  int{98} _cwc_3570 { , NN } ; 
  int _cwc_3569 { , NN } ; 
  int[1]{0} _cwc_3568 { , NN } ; 
  bool _cwc_3567 { , NN } ; 
  bool _cwc_3566 { , NN } ; 
  int _cwc_3565 { , NN } ; 
  bool[.] _cwc_3564 { , NN } ; 
  int _cwc_3563 { , NN } ; 
  bool _cwc_3562 { , NN } ; 
  int _cwc_3561 { , NN } ; 
  bool _cwc_3560 { , NN } ; 
  bool _cwc_3559 { , NN } ; 
  int{4} _cwc_3558 { , NN } ; 
  int _cwc_3557 { , NN } ; 
  int[1]{0} _cwc_3556 { , NN } ; 
  bool _cwc_3555 { , NN } ; 
  bool[.] _cwc_3554 { , NN } ; 
  bool _cwc_3553 { , NN } ; 
  bool _cwc_3552 { , NN } ; 
  int{8} _cwc_3551 { , NN } ; 
  int _cwc_3550 { , NN } ; 
  int[1]{0} _cwc_3549 { , NN } ; 
  bool _cwc_3548 { , NN } ; 
  bool[.] _cwc_3547 { , NN } ; 
  bool _cwc_3546 { , NN } ; 
  bool _cwc_3545 { , NN } ; 
  int{12} _cwc_3544 { , NN } ; 
  int _cwc_3543 { , NN } ; 
  int[1]{0} _cwc_3542 { , NN } ; 
  bool _cwc_3541 { , NN } ; 
  bool[.] _cwc_3540 { , NN } ; 
  bool _cwc_3539 { , NN } ; 
  bool _cwc_3538 { , NN } ; 
  int{14} _cwc_3537 { , NN } ; 
  int _cwc_3536 { , NN } ; 
  int[1]{0} _cwc_3535 { , NN } ; 
  bool _cwc_3534 { , NN } ; 
  bool[112] _cwc_3533 { , NN } ; 
  int[+] _cwc_3532 { , NN } ; 
  bool[.] _cwc_3531 { , NN } ; 
  int _cwc_3530 { , NN } ; 
  bool _cwc_3529 { , NN } ; 
  bool _cwc_3528 { , NN } ; 
  int{112} _cwc_3527 { , NN } ; 
  int _cwc_3526 { , NN } ; 
  int[1]{0} _cwc_3525 { , NN } ; 
  bool _cwc_3524 { , NN } ; 
  bool _cwc_3523 { , NN } ; 
  int _cwc_3522 { , NN } ; 
  bool[.] _cwc_3521 { , NN } ; 
  int _cwc_3520 { , NN } ; 
  bool _cwc_3519 { , NN } ; 
  int _cwc_3518 { , NN } ; 
  bool _cwc_3517 { , NN } ; 
  bool _cwc_3516 { , NN } ; 
  int{4} _cwc_3515 { , NN } ; 
  int _cwc_3514 { , NN } ; 
  int[1]{0} _cwc_3513 { , NN } ; 
  bool _cwc_3512 { , NN } ; 
  bool[.] _cwc_3511 { , NN } ; 
  bool _cwc_3510 { , NN } ; 
  bool _cwc_3509 { , NN } ; 
  int{8} _cwc_3508 { , NN } ; 
  int _cwc_3507 { , NN } ; 
  int[1]{0} _cwc_3506 { , NN } ; 
  bool _cwc_3505 { , NN } ; 
  bool[.] _cwc_3504 { , NN } ; 
  bool _cwc_3503 { , NN } ; 
  bool _cwc_3502 { , NN } ; 
  int{12} _cwc_3501 { , NN } ; 
  int _cwc_3500 { , NN } ; 
  int[1]{0} _cwc_3499 { , NN } ; 
  bool _cwc_3498 { , NN } ; 
  bool[.] _cwc_3497 { , NN } ; 
  bool _cwc_3496 { , NN } ; 
  bool _cwc_3495 { , NN } ; 
  int{14} _cwc_3494 { , NN } ; 
  int _cwc_3493 { , NN } ; 
  int[1]{0} _cwc_3492 { , NN } ; 
  bool _cwc_3491 { , NN } ; 
  bool[126] _cwc_3490 { , NN } ; 
  int[+] _cwc_3489 { , NN } ; 
  bool[.] _cwc_3488 { , NN } ; 
  int _cwc_3487 { , NN } ; 
  bool _cwc_3486 { , NN } ; 
  bool _cwc_3485 { , NN } ; 
  int{126} _cwc_3484 { , NN } ; 
  int _cwc_3483 { , NN } ; 
  int[1]{0} _cwc_3482 { , NN } ; 
  bool _cwc_3481 { , NN } ; 
  bool _cwc_3480 { , NN } ; 
  int _cwc_3479 { , NN } ; 
  bool[.] _cwc_3478 { , NN } ; 
  int _cwc_3477 { , NN } ; 
  bool _cwc_3476 { , NN } ; 
  int _cwc_3475 { , NN } ; 
  bool _cwc_3474 { , NN } ; 
  bool _cwc_3473 { , NN } ; 
  int{4} _cwc_3472 { , NN } ; 
  int _cwc_3471 { , NN } ; 
  int[1]{0} _cwc_3470 { , NN } ; 
  bool _cwc_3469 { , NN } ; 
  bool[.] _cwc_3468 { , NN } ; 
  bool _cwc_3467 { , NN } ; 
  bool _cwc_3466 { , NN } ; 
  int{8} _cwc_3465 { , NN } ; 
  int _cwc_3464 { , NN } ; 
  int[1]{0} _cwc_3463 { , NN } ; 
  bool _cwc_3462 { , NN } ; 
  bool[.] _cwc_3461 { , NN } ; 
  bool _cwc_3460 { , NN } ; 
  bool _cwc_3459 { , NN } ; 
  int{12} _cwc_3458 { , NN } ; 
  int _cwc_3457 { , NN } ; 
  int[1]{0} _cwc_3456 { , NN } ; 
  bool _cwc_3455 { , NN } ; 
  bool[.] _cwc_3454 { , NN } ; 
  bool _cwc_3453 { , NN } ; 
  bool _cwc_3452 { , NN } ; 
  int{14} _cwc_3451 { , NN } ; 
  int _cwc_3450 { , NN } ; 
  int[1]{0} _cwc_3449 { , NN } ; 
  bool _cwc_3448 { , NN } ; 
  bool[.] _cwc_3447 { , NN } ; 
  int[+] _cwc_3446 { , NN } ; 
  bool[.] _cwc_3445 { , NN } ; 
  int _cwc_3444 { , NN } ; 
  int[+] _cwc_3443 { , NN } ; 
  bool _cwc_3442 { , NN } ; 
  int _cwc_3441 { , NN } ; 
  bool[.] _cwc_3440 { , NN } ; 
  int _cwc_3439 { , NN } ; 
  bool _cwc_3438 { , NN } ; 
  int _cwc_3437 { , NN } ; 
  bool _cwc_3436 { , NN } ; 
  bool _cwc_3435 { , NN } ; 
  int{4} _cwc_3434 { , NN } ; 
  int _cwc_3433 { , NN } ; 
  int[1]{0} _cwc_3432 { , NN } ; 
  bool _cwc_3431 { , NN } ; 
  bool[.] _cwc_3430 { , NN } ; 
  bool _cwc_3429 { , NN } ; 
  bool _cwc_3428 { , NN } ; 
  int{8} _cwc_3427 { , NN } ; 
  int _cwc_3426 { , NN } ; 
  int[1]{0} _cwc_3425 { , NN } ; 
  bool _cwc_3424 { , NN } ; 
  bool[.] _cwc_3423 { , NN } ; 
  bool _cwc_3422 { , NN } ; 
  bool _cwc_3421 { , NN } ; 
  int{12} _cwc_3420 { , NN } ; 
  int _cwc_3419 { , NN } ; 
  int[1]{0} _cwc_3418 { , NN } ; 
  bool _cwc_3417 { , NN } ; 
  bool[.] _cwc_3416 { , NN } ; 
  bool _cwc_3415 { , NN } ; 
  bool _cwc_3414 { , NN } ; 
  int{14} _cwc_3413 { , NN } ; 
  int _cwc_3412 { , NN } ; 
  int[1]{0} _cwc_3411 { , NN } ; 
  bool _cwc_3410 { , NN } ; 
  bool[.] _cwc_3409 { , NN } ; 
  int[+] _cwc_3408 { , NN } ; 
  bool[.] _cwc_3407 { , NN } ; 
  int _cwc_3406 { , NN } ; 
  int _cwc_3405 { , NN } ; 

  _cwc_4221 = _dim_A_( x); 
  _cwc_4226 = 0; 
  _cwc_4227 = _eq_SxS_( _cwc_4221, _cwc_4226); 
  if (_cwc_4227) 
  { 
    _cwc_4222 = _dim_A_( y); 
    _cwc_4224 = 0; 
    _cwc_4225 = _eq_SxS_( _cwc_4222, _cwc_4224); 
    if (_cwc_4225) 
    { 
      _cwc_4223 = UTDScalarB::comaBBB( x, y) ; 
      _cwc_3404 = _cwc_4223; 
    }
    else
    { 
      _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
    }
  }
  else
  { 
    _cwc_3405 = _dim_A_( x); 
    _cwc_4219 = 1; 
    _cwc_4220 = _eq_SxS_( _cwc_3405, _cwc_4219); 
    if (_cwc_4220) 
    { 
      _cwc_3443 = _shape_A_( x); 
      _cwc_4213 = true; 
      _cwc_4216 = 2; 
      _cwc_4214 = [ 0 ]; 
      _cwc_4215 = _sel_VxA_( _cwc_4214, _cwc_3443); 
      _cwc_4217 = _eq_SxS_( _cwc_4215, _cwc_4216); 
      _cwc_4218 = _and_SxS_( _cwc_4217, _cwc_4213); 
      if (_cwc_4218) 
      { 
        _cwc_4209 = _dim_A_( y); 
        _cwc_4211 = 0; 
        _cwc_4212 = _eq_SxS_( _cwc_4209, _cwc_4211); 
        if (_cwc_4212) 
        { 
          _cwc_4210 = UTDScalarB::comaBBB( x, y) ; 
          _cwc_3404 = _cwc_4210; 
        }
        else
        { 
          _cwc_4205 = _dim_A_( y); 
          _cwc_4207 = 1; 
          _cwc_4208 = _eq_SxS_( _cwc_4205, _cwc_4207); 
          if (_cwc_4208) 
          { 
            _cwc_4206 = UTDScalarB::comaBBB( x, y) ; 
            _cwc_3404 = _cwc_4206; 
          }
          else
          { 
            _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_4199 = true; 
        _cwc_4202 = 3; 
        _cwc_4200 = [ 0 ]; 
        _cwc_4201 = _sel_VxA_( _cwc_4200, _cwc_3443); 
        _cwc_4203 = _eq_SxS_( _cwc_4201, _cwc_4202); 
        _cwc_4204 = _and_SxS_( _cwc_4203, _cwc_4199); 
        if (_cwc_4204) 
        { 
          _cwc_4195 = _dim_A_( y); 
          _cwc_4197 = 0; 
          _cwc_4198 = _eq_SxS_( _cwc_4195, _cwc_4197); 
          if (_cwc_4198) 
          { 
            _cwc_4196 = UTDScalarB::comaBBB( x, y) ; 
            _cwc_3404 = _cwc_4196; 
          }
          else
          { 
            _cwc_4191 = _dim_A_( y); 
            _cwc_4193 = 1; 
            _cwc_4194 = _eq_SxS_( _cwc_4191, _cwc_4193); 
            if (_cwc_4194) 
            { 
              _cwc_4192 = UTDScalarB::comaBBB( x, y) ; 
              _cwc_3404 = _cwc_4192; 
            }
            else
            { 
              _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
            }
          }
        }
        else
        { 
          _cwc_4185 = true; 
          _cwc_4188 = 4; 
          _cwc_4186 = [ 0 ]; 
          _cwc_4187 = _sel_VxA_( _cwc_4186, _cwc_3443); 
          _cwc_4189 = _eq_SxS_( _cwc_4187, _cwc_4188); 
          _cwc_4190 = _and_SxS_( _cwc_4189, _cwc_4185); 
          if (_cwc_4190) 
          { 
            _cwc_4181 = _dim_A_( y); 
            _cwc_4183 = 0; 
            _cwc_4184 = _eq_SxS_( _cwc_4181, _cwc_4183); 
            if (_cwc_4184) 
            { 
              _cwc_4182 = UTDScalarB::comaBBB( x, y) ; 
              _cwc_3404 = _cwc_4182; 
            }
            else
            { 
              _cwc_4155 = _dim_A_( y); 
              _cwc_4179 = 1; 
              _cwc_4180 = _eq_SxS_( _cwc_4155, _cwc_4179); 
              if (_cwc_4180) 
              { 
                _cwc_4157 = _shape_A_( y); 
                _cwc_4173 = true; 
                _cwc_4176 = 4; 
                _cwc_4174 = [ 0 ]; 
                _cwc_4175 = _sel_VxA_( _cwc_4174, _cwc_4157); 
                _cwc_4177 = _eq_SxS_( _cwc_4175, _cwc_4176); 
                _cwc_4178 = _and_SxS_( _cwc_4177, _cwc_4173); 
                if (_cwc_4178) 
                { 
                  _cwc_4172 = UTDScalarB::comaBBB( x, y) ; 
                  _cwc_3404 = _cwc_4172; 
                }
                else
                { 
                  _cwc_4166 = true; 
                  _cwc_4169 = 8; 
                  _cwc_4167 = [ 0 ]; 
                  _cwc_4168 = _sel_VxA_( _cwc_4167, _cwc_4157); 
                  _cwc_4170 = _eq_SxS_( _cwc_4168, _cwc_4169); 
                  _cwc_4171 = _and_SxS_( _cwc_4170, _cwc_4166); 
                  if (_cwc_4171) 
                  { 
                    _cwc_4165 = UTDScalarB::comaBBB( x, y) ; 
                    _cwc_3404 = _cwc_4165; 
                  }
                  else
                  { 
                    _cwc_4159 = true; 
                    _cwc_4162 = 12; 
                    _cwc_4160 = [ 0 ]; 
                    _cwc_4161 = _sel_VxA_( _cwc_4160, _cwc_4157); 
                    _cwc_4163 = _eq_SxS_( _cwc_4161, _cwc_4162); 
                    _cwc_4164 = _and_SxS_( _cwc_4163, _cwc_4159); 
                    if (_cwc_4164) 
                    { 
                      _cwc_4158 = UTDScalarB::comaBBB( x, y) ; 
                      _cwc_3404 = _cwc_4158; 
                    }
                    else
                    { 
                      _cwc_4156 = UTDScalarB::comaBBB( x, y) ; 
                      _cwc_3404 = _cwc_4156; 
                    }
                  }
                }
              }
              else
              { 
                _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
              }
            }
          }
          else
          { 
            _cwc_4149 = true; 
            _cwc_4152 = 5; 
            _cwc_4150 = [ 0 ]; 
            _cwc_4151 = _sel_VxA_( _cwc_4150, _cwc_3443); 
            _cwc_4153 = _eq_SxS_( _cwc_4151, _cwc_4152); 
            _cwc_4154 = _and_SxS_( _cwc_4153, _cwc_4149); 
            if (_cwc_4154) 
            { 
              _cwc_4145 = _dim_A_( y); 
              _cwc_4147 = 0; 
              _cwc_4148 = _eq_SxS_( _cwc_4145, _cwc_4147); 
              if (_cwc_4148) 
              { 
                _cwc_4146 = UTDScalarB::comaBBB( x, y) ; 
                _cwc_3404 = _cwc_4146; 
              }
              else
              { 
                _cwc_4119 = _dim_A_( y); 
                _cwc_4143 = 1; 
                _cwc_4144 = _eq_SxS_( _cwc_4119, _cwc_4143); 
                if (_cwc_4144) 
                { 
                  _cwc_4121 = _shape_A_( y); 
                  _cwc_4137 = true; 
                  _cwc_4140 = 4; 
                  _cwc_4138 = [ 0 ]; 
                  _cwc_4139 = _sel_VxA_( _cwc_4138, _cwc_4121); 
                  _cwc_4141 = _eq_SxS_( _cwc_4139, _cwc_4140); 
                  _cwc_4142 = _and_SxS_( _cwc_4141, _cwc_4137); 
                  if (_cwc_4142) 
                  { 
                    _cwc_4136 = UTDScalarB::comaBBB( x, y) ; 
                    _cwc_3404 = _cwc_4136; 
                  }
                  else
                  { 
                    _cwc_4130 = true; 
                    _cwc_4133 = 8; 
                    _cwc_4131 = [ 0 ]; 
                    _cwc_4132 = _sel_VxA_( _cwc_4131, _cwc_4121); 
                    _cwc_4134 = _eq_SxS_( _cwc_4132, _cwc_4133); 
                    _cwc_4135 = _and_SxS_( _cwc_4134, _cwc_4130); 
                    if (_cwc_4135) 
                    { 
                      _cwc_4129 = UTDScalarB::comaBBB( x, y) ; 
                      _cwc_3404 = _cwc_4129; 
                    }
                    else
                    { 
                      _cwc_4123 = true; 
                      _cwc_4126 = 12; 
                      _cwc_4124 = [ 0 ]; 
                      _cwc_4125 = _sel_VxA_( _cwc_4124, _cwc_4121); 
                      _cwc_4127 = _eq_SxS_( _cwc_4125, _cwc_4126); 
                      _cwc_4128 = _and_SxS_( _cwc_4127, _cwc_4123); 
                      if (_cwc_4128) 
                      { 
                        _cwc_4122 = UTDScalarB::comaBBB( x, y) ; 
                        _cwc_3404 = _cwc_4122; 
                      }
                      else
                      { 
                        _cwc_4120 = UTDScalarB::comaBBB( x, y) ; 
                        _cwc_3404 = _cwc_4120; 
                      }
                    }
                  }
                }
                else
                { 
                  _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                }
              }
            }
            else
            { 
              _cwc_4113 = true; 
              _cwc_4116 = 6; 
              _cwc_4114 = [ 0 ]; 
              _cwc_4115 = _sel_VxA_( _cwc_4114, _cwc_3443); 
              _cwc_4117 = _eq_SxS_( _cwc_4115, _cwc_4116); 
              _cwc_4118 = _and_SxS_( _cwc_4117, _cwc_4113); 
              if (_cwc_4118) 
              { 
                _cwc_4109 = _dim_A_( y); 
                _cwc_4111 = 0; 
                _cwc_4112 = _eq_SxS_( _cwc_4109, _cwc_4111); 
                if (_cwc_4112) 
                { 
                  _cwc_4110 = UTDScalarB::comaBBB( x, y) ; 
                  _cwc_3404 = _cwc_4110; 
                }
                else
                { 
                  _cwc_4083 = _dim_A_( y); 
                  _cwc_4107 = 1; 
                  _cwc_4108 = _eq_SxS_( _cwc_4083, _cwc_4107); 
                  if (_cwc_4108) 
                  { 
                    _cwc_4085 = _shape_A_( y); 
                    _cwc_4101 = true; 
                    _cwc_4104 = 4; 
                    _cwc_4102 = [ 0 ]; 
                    _cwc_4103 = _sel_VxA_( _cwc_4102, _cwc_4085); 
                    _cwc_4105 = _eq_SxS_( _cwc_4103, _cwc_4104); 
                    _cwc_4106 = _and_SxS_( _cwc_4105, _cwc_4101); 
                    if (_cwc_4106) 
                    { 
                      _cwc_4100 = UTDScalarB::comaBBB( x, y) ; 
                      _cwc_3404 = _cwc_4100; 
                    }
                    else
                    { 
                      _cwc_4094 = true; 
                      _cwc_4097 = 8; 
                      _cwc_4095 = [ 0 ]; 
                      _cwc_4096 = _sel_VxA_( _cwc_4095, _cwc_4085); 
                      _cwc_4098 = _eq_SxS_( _cwc_4096, _cwc_4097); 
                      _cwc_4099 = _and_SxS_( _cwc_4098, _cwc_4094); 
                      if (_cwc_4099) 
                      { 
                        _cwc_4093 = UTDScalarB::comaBBB( x, y) ; 
                        _cwc_3404 = _cwc_4093; 
                      }
                      else
                      { 
                        _cwc_4087 = true; 
                        _cwc_4090 = 12; 
                        _cwc_4088 = [ 0 ]; 
                        _cwc_4089 = _sel_VxA_( _cwc_4088, _cwc_4085); 
                        _cwc_4091 = _eq_SxS_( _cwc_4089, _cwc_4090); 
                        _cwc_4092 = _and_SxS_( _cwc_4091, _cwc_4087); 
                        if (_cwc_4092) 
                        { 
                          _cwc_4086 = UTDScalarB::comaBBB( x, y) ; 
                          _cwc_3404 = _cwc_4086; 
                        }
                        else
                        { 
                          _cwc_4084 = UTDScalarB::comaBBB( x, y) ; 
                          _cwc_3404 = _cwc_4084; 
                        }
                      }
                    }
                  }
                  else
                  { 
                    _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                  }
                }
              }
              else
              { 
                _cwc_4077 = true; 
                _cwc_4080 = 7; 
                _cwc_4078 = [ 0 ]; 
                _cwc_4079 = _sel_VxA_( _cwc_4078, _cwc_3443); 
                _cwc_4081 = _eq_SxS_( _cwc_4079, _cwc_4080); 
                _cwc_4082 = _and_SxS_( _cwc_4081, _cwc_4077); 
                if (_cwc_4082) 
                { 
                  _cwc_4073 = _dim_A_( y); 
                  _cwc_4075 = 0; 
                  _cwc_4076 = _eq_SxS_( _cwc_4073, _cwc_4075); 
                  if (_cwc_4076) 
                  { 
                    _cwc_4074 = UTDScalarB::comaBBB( x, y) ; 
                    _cwc_3404 = _cwc_4074; 
                  }
                  else
                  { 
                    _cwc_4047 = _dim_A_( y); 
                    _cwc_4071 = 1; 
                    _cwc_4072 = _eq_SxS_( _cwc_4047, _cwc_4071); 
                    if (_cwc_4072) 
                    { 
                      _cwc_4049 = _shape_A_( y); 
                      _cwc_4065 = true; 
                      _cwc_4068 = 4; 
                      _cwc_4066 = [ 0 ]; 
                      _cwc_4067 = _sel_VxA_( _cwc_4066, _cwc_4049); 
                      _cwc_4069 = _eq_SxS_( _cwc_4067, _cwc_4068); 
                      _cwc_4070 = _and_SxS_( _cwc_4069, _cwc_4065); 
                      if (_cwc_4070) 
                      { 
                        _cwc_4064 = UTDScalarB::comaBBB( x, y) ; 
                        _cwc_3404 = _cwc_4064; 
                      }
                      else
                      { 
                        _cwc_4058 = true; 
                        _cwc_4061 = 8; 
                        _cwc_4059 = [ 0 ]; 
                        _cwc_4060 = _sel_VxA_( _cwc_4059, _cwc_4049); 
                        _cwc_4062 = _eq_SxS_( _cwc_4060, _cwc_4061); 
                        _cwc_4063 = _and_SxS_( _cwc_4062, _cwc_4058); 
                        if (_cwc_4063) 
                        { 
                          _cwc_4057 = UTDScalarB::comaBBB( x, y) ; 
                          _cwc_3404 = _cwc_4057; 
                        }
                        else
                        { 
                          _cwc_4051 = true; 
                          _cwc_4054 = 12; 
                          _cwc_4052 = [ 0 ]; 
                          _cwc_4053 = _sel_VxA_( _cwc_4052, _cwc_4049); 
                          _cwc_4055 = _eq_SxS_( _cwc_4053, _cwc_4054); 
                          _cwc_4056 = _and_SxS_( _cwc_4055, _cwc_4051); 
                          if (_cwc_4056) 
                          { 
                            _cwc_4050 = UTDScalarB::comaBBB( x, y) ; 
                            _cwc_3404 = _cwc_4050; 
                          }
                          else
                          { 
                            _cwc_4048 = UTDScalarB::comaBBB( x, y) ; 
                            _cwc_3404 = _cwc_4048; 
                          }
                        }
                      }
                    }
                    else
                    { 
                      _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                    }
                  }
                }
                else
                { 
                  _cwc_4041 = true; 
                  _cwc_4044 = 8; 
                  _cwc_4042 = [ 0 ]; 
                  _cwc_4043 = _sel_VxA_( _cwc_4042, _cwc_3443); 
                  _cwc_4045 = _eq_SxS_( _cwc_4043, _cwc_4044); 
                  _cwc_4046 = _and_SxS_( _cwc_4045, _cwc_4041); 
                  if (_cwc_4046) 
                  { 
                    _cwc_4037 = _dim_A_( y); 
                    _cwc_4039 = 0; 
                    _cwc_4040 = _eq_SxS_( _cwc_4037, _cwc_4039); 
                    if (_cwc_4040) 
                    { 
                      _cwc_4038 = UTDScalarB::comaBBB( x, y) ; 
                      _cwc_3404 = _cwc_4038; 
                    }
                    else
                    { 
                      _cwc_4011 = _dim_A_( y); 
                      _cwc_4035 = 1; 
                      _cwc_4036 = _eq_SxS_( _cwc_4011, _cwc_4035); 
                      if (_cwc_4036) 
                      { 
                        _cwc_4013 = _shape_A_( y); 
                        _cwc_4029 = true; 
                        _cwc_4032 = 4; 
                        _cwc_4030 = [ 0 ]; 
                        _cwc_4031 = _sel_VxA_( _cwc_4030, _cwc_4013); 
                        _cwc_4033 = _eq_SxS_( _cwc_4031, _cwc_4032); 
                        _cwc_4034 = _and_SxS_( _cwc_4033, _cwc_4029); 
                        if (_cwc_4034) 
                        { 
                          _cwc_4028 = UTDScalarB::comaBBB( x, y) ; 
                          _cwc_3404 = _cwc_4028; 
                        }
                        else
                        { 
                          _cwc_4022 = true; 
                          _cwc_4025 = 8; 
                          _cwc_4023 = [ 0 ]; 
                          _cwc_4024 = _sel_VxA_( _cwc_4023, _cwc_4013); 
                          _cwc_4026 = _eq_SxS_( _cwc_4024, _cwc_4025); 
                          _cwc_4027 = _and_SxS_( _cwc_4026, _cwc_4022); 
                          if (_cwc_4027) 
                          { 
                            _cwc_4021 = UTDScalarB::comaBBB( x, y) ; 
                            _cwc_3404 = _cwc_4021; 
                          }
                          else
                          { 
                            _cwc_4015 = true; 
                            _cwc_4018 = 12; 
                            _cwc_4016 = [ 0 ]; 
                            _cwc_4017 = _sel_VxA_( _cwc_4016, _cwc_4013); 
                            _cwc_4019 = _eq_SxS_( _cwc_4017, _cwc_4018); 
                            _cwc_4020 = _and_SxS_( _cwc_4019, _cwc_4015); 
                            if (_cwc_4020) 
                            { 
                              _cwc_4014 = UTDScalarB::comaBBB( x, y) ; 
                              _cwc_3404 = _cwc_4014; 
                            }
                            else
                            { 
                              _cwc_4012 = UTDScalarB::comaBBB( x, y) ; 
                              _cwc_3404 = _cwc_4012; 
                            }
                          }
                        }
                      }
                      else
                      { 
                        _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                      }
                    }
                  }
                  else
                  { 
                    _cwc_4005 = true; 
                    _cwc_4008 = 9; 
                    _cwc_4006 = [ 0 ]; 
                    _cwc_4007 = _sel_VxA_( _cwc_4006, _cwc_3443); 
                    _cwc_4009 = _eq_SxS_( _cwc_4007, _cwc_4008); 
                    _cwc_4010 = _and_SxS_( _cwc_4009, _cwc_4005); 
                    if (_cwc_4010) 
                    { 
                      _cwc_4001 = _dim_A_( y); 
                      _cwc_4003 = 0; 
                      _cwc_4004 = _eq_SxS_( _cwc_4001, _cwc_4003); 
                      if (_cwc_4004) 
                      { 
                        _cwc_4002 = UTDScalarB::comaBBB( x, y) ; 
                        _cwc_3404 = _cwc_4002; 
                      }
                      else
                      { 
                        _cwc_3975 = _dim_A_( y); 
                        _cwc_3999 = 1; 
                        _cwc_4000 = _eq_SxS_( _cwc_3975, _cwc_3999); 
                        if (_cwc_4000) 
                        { 
                          _cwc_3977 = _shape_A_( y); 
                          _cwc_3993 = true; 
                          _cwc_3996 = 4; 
                          _cwc_3994 = [ 0 ]; 
                          _cwc_3995 = _sel_VxA_( _cwc_3994, _cwc_3977); 
                          _cwc_3997 = _eq_SxS_( _cwc_3995, _cwc_3996); 
                          _cwc_3998 = _and_SxS_( _cwc_3997, _cwc_3993); 
                          if (_cwc_3998) 
                          { 
                            _cwc_3992 = UTDScalarB::comaBBB( x, y) ; 
                            _cwc_3404 = _cwc_3992; 
                          }
                          else
                          { 
                            _cwc_3986 = true; 
                            _cwc_3989 = 8; 
                            _cwc_3987 = [ 0 ]; 
                            _cwc_3988 = _sel_VxA_( _cwc_3987, _cwc_3977); 
                            _cwc_3990 = _eq_SxS_( _cwc_3988, _cwc_3989); 
                            _cwc_3991 = _and_SxS_( _cwc_3990, _cwc_3986); 
                            if (_cwc_3991) 
                            { 
                              _cwc_3985 = UTDScalarB::comaBBB( x, y) ; 
                              _cwc_3404 = _cwc_3985; 
                            }
                            else
                            { 
                              _cwc_3979 = true; 
                              _cwc_3982 = 12; 
                              _cwc_3980 = [ 0 ]; 
                              _cwc_3981 = _sel_VxA_( _cwc_3980, _cwc_3977); 
                              _cwc_3983 = _eq_SxS_( _cwc_3981, _cwc_3982); 
                              _cwc_3984 = _and_SxS_( _cwc_3983, _cwc_3979); 
                              if (_cwc_3984) 
                              { 
                                _cwc_3978 = UTDScalarB::comaBBB( x, y) ; 
                                _cwc_3404 = _cwc_3978; 
                              }
                              else
                              { 
                                _cwc_3976 = UTDScalarB::comaBBB( x, y) ; 
                                _cwc_3404 = _cwc_3976; 
                              }
                            }
                          }
                        }
                        else
                        { 
                          _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                        }
                      }
                    }
                    else
                    { 
                      _cwc_3969 = true; 
                      _cwc_3972 = 10; 
                      _cwc_3970 = [ 0 ]; 
                      _cwc_3971 = _sel_VxA_( _cwc_3970, _cwc_3443); 
                      _cwc_3973 = _eq_SxS_( _cwc_3971, _cwc_3972); 
                      _cwc_3974 = _and_SxS_( _cwc_3973, _cwc_3969); 
                      if (_cwc_3974) 
                      { 
                        _cwc_3965 = _dim_A_( y); 
                        _cwc_3967 = 0; 
                        _cwc_3968 = _eq_SxS_( _cwc_3965, _cwc_3967); 
                        if (_cwc_3968) 
                        { 
                          _cwc_3966 = UTDScalarB::comaBBB( x, y) ; 
                          _cwc_3404 = _cwc_3966; 
                        }
                        else
                        { 
                          _cwc_3939 = _dim_A_( y); 
                          _cwc_3963 = 1; 
                          _cwc_3964 = _eq_SxS_( _cwc_3939, _cwc_3963); 
                          if (_cwc_3964) 
                          { 
                            _cwc_3941 = _shape_A_( y); 
                            _cwc_3957 = true; 
                            _cwc_3960 = 4; 
                            _cwc_3958 = [ 0 ]; 
                            _cwc_3959 = _sel_VxA_( _cwc_3958, _cwc_3941); 
                            _cwc_3961 = _eq_SxS_( _cwc_3959, _cwc_3960); 
                            _cwc_3962 = _and_SxS_( _cwc_3961, _cwc_3957); 
                            if (_cwc_3962) 
                            { 
                              _cwc_3956 = UTDScalarB::comaBBB( x, y) ; 
                              _cwc_3404 = _cwc_3956; 
                            }
                            else
                            { 
                              _cwc_3950 = true; 
                              _cwc_3953 = 8; 
                              _cwc_3951 = [ 0 ]; 
                              _cwc_3952 = _sel_VxA_( _cwc_3951, _cwc_3941); 
                              _cwc_3954 = _eq_SxS_( _cwc_3952, _cwc_3953); 
                              _cwc_3955 = _and_SxS_( _cwc_3954, _cwc_3950); 
                              if (_cwc_3955) 
                              { 
                                _cwc_3949 = UTDScalarB::comaBBB( x, y) ; 
                                _cwc_3404 = _cwc_3949; 
                              }
                              else
                              { 
                                _cwc_3943 = true; 
                                _cwc_3946 = 12; 
                                _cwc_3944 = [ 0 ]; 
                                _cwc_3945 = _sel_VxA_( _cwc_3944, _cwc_3941); 
                                _cwc_3947 = _eq_SxS_( _cwc_3945, _cwc_3946); 
                                _cwc_3948 = _and_SxS_( _cwc_3947, _cwc_3943); 
                                if (_cwc_3948) 
                                { 
                                  _cwc_3942 = UTDScalarB::comaBBB( x, y) ; 
                                  _cwc_3404 = _cwc_3942; 
                                }
                                else
                                { 
                                  _cwc_3940 = UTDScalarB::comaBBB( x, y) ; 
                                  _cwc_3404 = _cwc_3940; 
                                }
                              }
                            }
                          }
                          else
                          { 
                            _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                          }
                        }
                      }
                      else
                      { 
                        _cwc_3933 = true; 
                        _cwc_3936 = 11; 
                        _cwc_3934 = [ 0 ]; 
                        _cwc_3935 = _sel_VxA_( _cwc_3934, _cwc_3443); 
                        _cwc_3937 = _eq_SxS_( _cwc_3935, _cwc_3936); 
                        _cwc_3938 = _and_SxS_( _cwc_3937, _cwc_3933); 
                        if (_cwc_3938) 
                        { 
                          _cwc_3929 = _dim_A_( y); 
                          _cwc_3931 = 0; 
                          _cwc_3932 = _eq_SxS_( _cwc_3929, _cwc_3931); 
                          if (_cwc_3932) 
                          { 
                            _cwc_3930 = UTDScalarB::comaBBB( x, y) ; 
                            _cwc_3404 = _cwc_3930; 
                          }
                          else
                          { 
                            _cwc_3903 = _dim_A_( y); 
                            _cwc_3927 = 1; 
                            _cwc_3928 = _eq_SxS_( _cwc_3903, _cwc_3927); 
                            if (_cwc_3928) 
                            { 
                              _cwc_3905 = _shape_A_( y); 
                              _cwc_3921 = true; 
                              _cwc_3924 = 4; 
                              _cwc_3922 = [ 0 ]; 
                              _cwc_3923 = _sel_VxA_( _cwc_3922, _cwc_3905); 
                              _cwc_3925 = _eq_SxS_( _cwc_3923, _cwc_3924); 
                              _cwc_3926 = _and_SxS_( _cwc_3925, _cwc_3921); 
                              if (_cwc_3926) 
                              { 
                                _cwc_3920 = UTDScalarB::comaBBB( x, y) ; 
                                _cwc_3404 = _cwc_3920; 
                              }
                              else
                              { 
                                _cwc_3914 = true; 
                                _cwc_3917 = 8; 
                                _cwc_3915 = [ 0 ]; 
                                _cwc_3916 = _sel_VxA_( _cwc_3915, _cwc_3905); 
                                _cwc_3918 = _eq_SxS_( _cwc_3916, _cwc_3917); 
                                _cwc_3919 = _and_SxS_( _cwc_3918, _cwc_3914); 
                                if (_cwc_3919) 
                                { 
                                  _cwc_3913 = UTDScalarB::comaBBB( x, y) ; 
                                  _cwc_3404 = _cwc_3913; 
                                }
                                else
                                { 
                                  _cwc_3907 = true; 
                                  _cwc_3910 = 12; 
                                  _cwc_3908 = [ 0 ]; 
                                  _cwc_3909 = _sel_VxA_( _cwc_3908, _cwc_3905); 
                                  _cwc_3911 = _eq_SxS_( _cwc_3909, _cwc_3910); 
                                  _cwc_3912 = _and_SxS_( _cwc_3911, _cwc_3907); 
                                  if (_cwc_3912) 
                                  { 
                                    _cwc_3906 = UTDScalarB::comaBBB( x, y) ; 
                                    _cwc_3404 = _cwc_3906; 
                                  }
                                  else
                                  { 
                                    _cwc_3904 = UTDScalarB::comaBBB( x, y) ; 
                                    _cwc_3404 = _cwc_3904; 
                                  }
                                }
                              }
                            }
                            else
                            { 
                              _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                            }
                          }
                        }
                        else
                        { 
                          _cwc_3897 = true; 
                          _cwc_3900 = 12; 
                          _cwc_3898 = [ 0 ]; 
                          _cwc_3899 = _sel_VxA_( _cwc_3898, _cwc_3443); 
                          _cwc_3901 = _eq_SxS_( _cwc_3899, _cwc_3900); 
                          _cwc_3902 = _and_SxS_( _cwc_3901, _cwc_3897); 
                          if (_cwc_3902) 
                          { 
                            _cwc_3893 = _dim_A_( y); 
                            _cwc_3895 = 0; 
                            _cwc_3896 = _eq_SxS_( _cwc_3893, _cwc_3895); 
                            if (_cwc_3896) 
                            { 
                              _cwc_3894 = UTDScalarB::comaBBB( x, y) ; 
                              _cwc_3404 = _cwc_3894; 
                            }
                            else
                            { 
                              _cwc_3867 = _dim_A_( y); 
                              _cwc_3891 = 1; 
                              _cwc_3892 = _eq_SxS_( _cwc_3867, _cwc_3891); 
                              if (_cwc_3892) 
                              { 
                                _cwc_3869 = _shape_A_( y); 
                                _cwc_3885 = true; 
                                _cwc_3888 = 4; 
                                _cwc_3886 = [ 0 ]; 
                                _cwc_3887 = _sel_VxA_( _cwc_3886, _cwc_3869); 
                                _cwc_3889 = _eq_SxS_( _cwc_3887, _cwc_3888); 
                                _cwc_3890 = _and_SxS_( _cwc_3889, _cwc_3885); 
                                if (_cwc_3890) 
                                { 
                                  _cwc_3884 = UTDScalarB::comaBBB( x, y) ; 
                                  _cwc_3404 = _cwc_3884; 
                                }
                                else
                                { 
                                  _cwc_3878 = true; 
                                  _cwc_3881 = 8; 
                                  _cwc_3879 = [ 0 ]; 
                                  _cwc_3880 = _sel_VxA_( _cwc_3879, _cwc_3869); 
                                  _cwc_3882 = _eq_SxS_( _cwc_3880, _cwc_3881); 
                                  _cwc_3883 = _and_SxS_( _cwc_3882, _cwc_3878); 
                                  if (_cwc_3883) 
                                  { 
                                    _cwc_3877 = UTDScalarB::comaBBB( x, y) ; 
                                    _cwc_3404 = _cwc_3877; 
                                  }
                                  else
                                  { 
                                    _cwc_3871 = true; 
                                    _cwc_3874 = 12; 
                                    _cwc_3872 = [ 0 ]; 
                                    _cwc_3873 = _sel_VxA_( _cwc_3872, _cwc_3869); 
                                    _cwc_3875 = _eq_SxS_( _cwc_3873, _cwc_3874); 
                                    _cwc_3876 = _and_SxS_( _cwc_3875, _cwc_3871); 
                                    if (_cwc_3876) 
                                    { 
                                      _cwc_3870 = UTDScalarB::comaBBB( x, y) ; 
                                      _cwc_3404 = _cwc_3870; 
                                    }
                                    else
                                    { 
                                      _cwc_3868 = UTDScalarB::comaBBB( x, y) ; 
                                      _cwc_3404 = _cwc_3868; 
                                    }
                                  }
                                }
                              }
                              else
                              { 
                                _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                              }
                            }
                          }
                          else
                          { 
                            _cwc_3861 = true; 
                            _cwc_3864 = 13; 
                            _cwc_3862 = [ 0 ]; 
                            _cwc_3863 = _sel_VxA_( _cwc_3862, _cwc_3443); 
                            _cwc_3865 = _eq_SxS_( _cwc_3863, _cwc_3864); 
                            _cwc_3866 = _and_SxS_( _cwc_3865, _cwc_3861); 
                            if (_cwc_3866) 
                            { 
                              _cwc_3857 = _dim_A_( y); 
                              _cwc_3859 = 0; 
                              _cwc_3860 = _eq_SxS_( _cwc_3857, _cwc_3859); 
                              if (_cwc_3860) 
                              { 
                                _cwc_3858 = UTDScalarB::comaBBB( x, y) ; 
                                _cwc_3404 = _cwc_3858; 
                              }
                              else
                              { 
                                _cwc_3831 = _dim_A_( y); 
                                _cwc_3855 = 1; 
                                _cwc_3856 = _eq_SxS_( _cwc_3831, _cwc_3855); 
                                if (_cwc_3856) 
                                { 
                                  _cwc_3833 = _shape_A_( y); 
                                  _cwc_3849 = true; 
                                  _cwc_3852 = 4; 
                                  _cwc_3850 = [ 0 ]; 
                                  _cwc_3851 = _sel_VxA_( _cwc_3850, _cwc_3833); 
                                  _cwc_3853 = _eq_SxS_( _cwc_3851, _cwc_3852); 
                                  _cwc_3854 = _and_SxS_( _cwc_3853, _cwc_3849); 
                                  if (_cwc_3854) 
                                  { 
                                    _cwc_3848 = UTDScalarB::comaBBB( x, y) ; 
                                    _cwc_3404 = _cwc_3848; 
                                  }
                                  else
                                  { 
                                    _cwc_3842 = true; 
                                    _cwc_3845 = 8; 
                                    _cwc_3843 = [ 0 ]; 
                                    _cwc_3844 = _sel_VxA_( _cwc_3843, _cwc_3833); 
                                    _cwc_3846 = _eq_SxS_( _cwc_3844, _cwc_3845); 
                                    _cwc_3847 = _and_SxS_( _cwc_3846, _cwc_3842); 
                                    if (_cwc_3847) 
                                    { 
                                      _cwc_3841 = UTDScalarB::comaBBB( x, y) ; 
                                      _cwc_3404 = _cwc_3841; 
                                    }
                                    else
                                    { 
                                      _cwc_3835 = true; 
                                      _cwc_3838 = 12; 
                                      _cwc_3836 = [ 0 ]; 
                                      _cwc_3837 = _sel_VxA_( _cwc_3836, _cwc_3833); 
                                      _cwc_3839 = _eq_SxS_( _cwc_3837, _cwc_3838); 
                                      _cwc_3840 = _and_SxS_( _cwc_3839, _cwc_3835); 
                                      if (_cwc_3840) 
                                      { 
                                        _cwc_3834 = UTDScalarB::comaBBB( x, y) ; 
                                        _cwc_3404 = _cwc_3834; 
                                      }
                                      else
                                      { 
                                        _cwc_3832 = UTDScalarB::comaBBB( x, y) ; 
                                        _cwc_3404 = _cwc_3832; 
                                      }
                                    }
                                  }
                                }
                                else
                                { 
                                  _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                }
                              }
                            }
                            else
                            { 
                              _cwc_3825 = true; 
                              _cwc_3828 = 14; 
                              _cwc_3826 = [ 0 ]; 
                              _cwc_3827 = _sel_VxA_( _cwc_3826, _cwc_3443); 
                              _cwc_3829 = _eq_SxS_( _cwc_3827, _cwc_3828); 
                              _cwc_3830 = _and_SxS_( _cwc_3829, _cwc_3825); 
                              if (_cwc_3830) 
                              { 
                                _cwc_3821 = _dim_A_( y); 
                                _cwc_3823 = 0; 
                                _cwc_3824 = _eq_SxS_( _cwc_3821, _cwc_3823); 
                                if (_cwc_3824) 
                                { 
                                  _cwc_3822 = UTDScalarB::comaBBB( x, y) ; 
                                  _cwc_3404 = _cwc_3822; 
                                }
                                else
                                { 
                                  _cwc_3788 = _dim_A_( y); 
                                  _cwc_3819 = 1; 
                                  _cwc_3820 = _eq_SxS_( _cwc_3788, _cwc_3819); 
                                  if (_cwc_3820) 
                                  { 
                                    _cwc_3790 = _shape_A_( y); 
                                    _cwc_3813 = true; 
                                    _cwc_3816 = 4; 
                                    _cwc_3814 = [ 0 ]; 
                                    _cwc_3815 = _sel_VxA_( _cwc_3814, _cwc_3790); 
                                    _cwc_3817 = _eq_SxS_( _cwc_3815, _cwc_3816); 
                                    _cwc_3818 = _and_SxS_( _cwc_3817, _cwc_3813); 
                                    if (_cwc_3818) 
                                    { 
                                      _cwc_3812 = UTDScalarB::comaBBB( x, y) ; 
                                      _cwc_3404 = _cwc_3812; 
                                    }
                                    else
                                    { 
                                      _cwc_3806 = true; 
                                      _cwc_3809 = 8; 
                                      _cwc_3807 = [ 0 ]; 
                                      _cwc_3808 = _sel_VxA_( _cwc_3807, _cwc_3790); 
                                      _cwc_3810 = _eq_SxS_( _cwc_3808, _cwc_3809); 
                                      _cwc_3811 = _and_SxS_( _cwc_3810, _cwc_3806); 
                                      if (_cwc_3811) 
                                      { 
                                        _cwc_3805 = UTDScalarB::comaBBB( x, y) ; 
                                        _cwc_3404 = _cwc_3805; 
                                      }
                                      else
                                      { 
                                        _cwc_3799 = true; 
                                        _cwc_3802 = 12; 
                                        _cwc_3800 = [ 0 ]; 
                                        _cwc_3801 = _sel_VxA_( _cwc_3800, _cwc_3790); 
                                        _cwc_3803 = _eq_SxS_( _cwc_3801, _cwc_3802); 
                                        _cwc_3804 = _and_SxS_( _cwc_3803, _cwc_3799); 
                                        if (_cwc_3804) 
                                        { 
                                          _cwc_3798 = UTDScalarB::comaBBB( x, y) ; 
                                          _cwc_3404 = _cwc_3798; 
                                        }
                                        else
                                        { 
                                          _cwc_3792 = true; 
                                          _cwc_3795 = 14; 
                                          _cwc_3793 = [ 0 ]; 
                                          _cwc_3794 = _sel_VxA_( _cwc_3793, _cwc_3790); 
                                          _cwc_3796 = _eq_SxS_( _cwc_3794, _cwc_3795); 
                                          _cwc_3797 = _and_SxS_( _cwc_3796, _cwc_3792); 
                                          if (_cwc_3797) 
                                          { 
                                            _cwc_3791 = UTDScalarB::comaBBB( x, y) ; 
                                            _cwc_3404 = _cwc_3791; 
                                          }
                                          else
                                          { 
                                            _cwc_3789 = UTDScalarB::comaBBB( x, y) ; 
                                            _cwc_3404 = _cwc_3789; 
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else
                                  { 
                                    _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                  }
                                }
                              }
                              else
                              { 
                                _cwc_3782 = true; 
                                _cwc_3785 = 28; 
                                _cwc_3783 = [ 0 ]; 
                                _cwc_3784 = _sel_VxA_( _cwc_3783, _cwc_3443); 
                                _cwc_3786 = _eq_SxS_( _cwc_3784, _cwc_3785); 
                                _cwc_3787 = _and_SxS_( _cwc_3786, _cwc_3782); 
                                if (_cwc_3787) 
                                { 
                                  _cwc_3778 = _dim_A_( y); 
                                  _cwc_3780 = 0; 
                                  _cwc_3781 = _eq_SxS_( _cwc_3778, _cwc_3780); 
                                  if (_cwc_3781) 
                                  { 
                                    _cwc_3779 = UTDScalarB::comaBBB( x, y) ; 
                                    _cwc_3404 = _cwc_3779; 
                                  }
                                  else
                                  { 
                                    _cwc_3745 = _dim_A_( y); 
                                    _cwc_3776 = 1; 
                                    _cwc_3777 = _eq_SxS_( _cwc_3745, _cwc_3776); 
                                    if (_cwc_3777) 
                                    { 
                                      _cwc_3747 = _shape_A_( y); 
                                      _cwc_3770 = true; 
                                      _cwc_3773 = 4; 
                                      _cwc_3771 = [ 0 ]; 
                                      _cwc_3772 = _sel_VxA_( _cwc_3771, _cwc_3747); 
                                      _cwc_3774 = _eq_SxS_( _cwc_3772, _cwc_3773); 
                                      _cwc_3775 = _and_SxS_( _cwc_3774, _cwc_3770); 
                                      if (_cwc_3775) 
                                      { 
                                        _cwc_3769 = UTDScalarB::comaBBB( x, y) ; 
                                        _cwc_3404 = _cwc_3769; 
                                      }
                                      else
                                      { 
                                        _cwc_3763 = true; 
                                        _cwc_3766 = 8; 
                                        _cwc_3764 = [ 0 ]; 
                                        _cwc_3765 = _sel_VxA_( _cwc_3764, _cwc_3747); 
                                        _cwc_3767 = _eq_SxS_( _cwc_3765, _cwc_3766); 
                                        _cwc_3768 = _and_SxS_( _cwc_3767, _cwc_3763); 
                                        if (_cwc_3768) 
                                        { 
                                          _cwc_3762 = UTDScalarB::comaBBB( x, y) ; 
                                          _cwc_3404 = _cwc_3762; 
                                        }
                                        else
                                        { 
                                          _cwc_3756 = true; 
                                          _cwc_3759 = 12; 
                                          _cwc_3757 = [ 0 ]; 
                                          _cwc_3758 = _sel_VxA_( _cwc_3757, _cwc_3747); 
                                          _cwc_3760 = _eq_SxS_( _cwc_3758, _cwc_3759); 
                                          _cwc_3761 = _and_SxS_( _cwc_3760, _cwc_3756); 
                                          if (_cwc_3761) 
                                          { 
                                            _cwc_3755 = UTDScalarB::comaBBB( x, y) ; 
                                            _cwc_3404 = _cwc_3755; 
                                          }
                                          else
                                          { 
                                            _cwc_3749 = true; 
                                            _cwc_3752 = 14; 
                                            _cwc_3750 = [ 0 ]; 
                                            _cwc_3751 = _sel_VxA_( _cwc_3750, _cwc_3747); 
                                            _cwc_3753 = _eq_SxS_( _cwc_3751, _cwc_3752); 
                                            _cwc_3754 = _and_SxS_( _cwc_3753, _cwc_3749); 
                                            if (_cwc_3754) 
                                            { 
                                              _cwc_3748 = UTDScalarB::comaBBB( x, y) ; 
                                              _cwc_3404 = _cwc_3748; 
                                            }
                                            else
                                            { 
                                              _cwc_3746 = UTDScalarB::comaBBB( x, y) ; 
                                              _cwc_3404 = _cwc_3746; 
                                            }
                                          }
                                        }
                                      }
                                    }
                                    else
                                    { 
                                      _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                    }
                                  }
                                }
                                else
                                { 
                                  _cwc_3739 = true; 
                                  _cwc_3742 = 42; 
                                  _cwc_3740 = [ 0 ]; 
                                  _cwc_3741 = _sel_VxA_( _cwc_3740, _cwc_3443); 
                                  _cwc_3743 = _eq_SxS_( _cwc_3741, _cwc_3742); 
                                  _cwc_3744 = _and_SxS_( _cwc_3743, _cwc_3739); 
                                  if (_cwc_3744) 
                                  { 
                                    _cwc_3735 = _dim_A_( y); 
                                    _cwc_3737 = 0; 
                                    _cwc_3738 = _eq_SxS_( _cwc_3735, _cwc_3737); 
                                    if (_cwc_3738) 
                                    { 
                                      _cwc_3736 = UTDScalarB::comaBBB( x, y) ; 
                                      _cwc_3404 = _cwc_3736; 
                                    }
                                    else
                                    { 
                                      _cwc_3702 = _dim_A_( y); 
                                      _cwc_3733 = 1; 
                                      _cwc_3734 = _eq_SxS_( _cwc_3702, _cwc_3733); 
                                      if (_cwc_3734) 
                                      { 
                                        _cwc_3704 = _shape_A_( y); 
                                        _cwc_3727 = true; 
                                        _cwc_3730 = 4; 
                                        _cwc_3728 = [ 0 ]; 
                                        _cwc_3729 = _sel_VxA_( _cwc_3728, _cwc_3704); 
                                        _cwc_3731 = _eq_SxS_( _cwc_3729, _cwc_3730); 
                                        _cwc_3732 = _and_SxS_( _cwc_3731, _cwc_3727); 
                                        if (_cwc_3732) 
                                        { 
                                          _cwc_3726 = UTDScalarB::comaBBB( x, y) ; 
                                          _cwc_3404 = _cwc_3726; 
                                        }
                                        else
                                        { 
                                          _cwc_3720 = true; 
                                          _cwc_3723 = 8; 
                                          _cwc_3721 = [ 0 ]; 
                                          _cwc_3722 = _sel_VxA_( _cwc_3721, _cwc_3704); 
                                          _cwc_3724 = _eq_SxS_( _cwc_3722, _cwc_3723); 
                                          _cwc_3725 = _and_SxS_( _cwc_3724, _cwc_3720); 
                                          if (_cwc_3725) 
                                          { 
                                            _cwc_3719 = UTDScalarB::comaBBB( x, y) ; 
                                            _cwc_3404 = _cwc_3719; 
                                          }
                                          else
                                          { 
                                            _cwc_3713 = true; 
                                            _cwc_3716 = 12; 
                                            _cwc_3714 = [ 0 ]; 
                                            _cwc_3715 = _sel_VxA_( _cwc_3714, _cwc_3704); 
                                            _cwc_3717 = _eq_SxS_( _cwc_3715, _cwc_3716); 
                                            _cwc_3718 = _and_SxS_( _cwc_3717, _cwc_3713); 
                                            if (_cwc_3718) 
                                            { 
                                              _cwc_3712 = UTDScalarB::comaBBB( x, y) ; 
                                              _cwc_3404 = _cwc_3712; 
                                            }
                                            else
                                            { 
                                              _cwc_3706 = true; 
                                              _cwc_3709 = 14; 
                                              _cwc_3707 = [ 0 ]; 
                                              _cwc_3708 = _sel_VxA_( _cwc_3707, _cwc_3704); 
                                              _cwc_3710 = _eq_SxS_( _cwc_3708, _cwc_3709); 
                                              _cwc_3711 = _and_SxS_( _cwc_3710, _cwc_3706); 
                                              if (_cwc_3711) 
                                              { 
                                                _cwc_3705 = UTDScalarB::comaBBB( x, y) ; 
                                                _cwc_3404 = _cwc_3705; 
                                              }
                                              else
                                              { 
                                                _cwc_3703 = UTDScalarB::comaBBB( x, y) ; 
                                                _cwc_3404 = _cwc_3703; 
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      { 
                                        _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                      }
                                    }
                                  }
                                  else
                                  { 
                                    _cwc_3696 = true; 
                                    _cwc_3699 = 56; 
                                    _cwc_3697 = [ 0 ]; 
                                    _cwc_3698 = _sel_VxA_( _cwc_3697, _cwc_3443); 
                                    _cwc_3700 = _eq_SxS_( _cwc_3698, _cwc_3699); 
                                    _cwc_3701 = _and_SxS_( _cwc_3700, _cwc_3696); 
                                    if (_cwc_3701) 
                                    { 
                                      _cwc_3692 = _dim_A_( y); 
                                      _cwc_3694 = 0; 
                                      _cwc_3695 = _eq_SxS_( _cwc_3692, _cwc_3694); 
                                      if (_cwc_3695) 
                                      { 
                                        _cwc_3693 = UTDScalarB::comaBBB( x, y) ; 
                                        _cwc_3404 = _cwc_3693; 
                                      }
                                      else
                                      { 
                                        _cwc_3659 = _dim_A_( y); 
                                        _cwc_3690 = 1; 
                                        _cwc_3691 = _eq_SxS_( _cwc_3659, _cwc_3690); 
                                        if (_cwc_3691) 
                                        { 
                                          _cwc_3661 = _shape_A_( y); 
                                          _cwc_3684 = true; 
                                          _cwc_3687 = 4; 
                                          _cwc_3685 = [ 0 ]; 
                                          _cwc_3686 = _sel_VxA_( _cwc_3685, _cwc_3661); 
                                          _cwc_3688 = _eq_SxS_( _cwc_3686, _cwc_3687); 
                                          _cwc_3689 = _and_SxS_( _cwc_3688, _cwc_3684); 
                                          if (_cwc_3689) 
                                          { 
                                            _cwc_3683 = UTDScalarB::comaBBB( x, y) ; 
                                            _cwc_3404 = _cwc_3683; 
                                          }
                                          else
                                          { 
                                            _cwc_3677 = true; 
                                            _cwc_3680 = 8; 
                                            _cwc_3678 = [ 0 ]; 
                                            _cwc_3679 = _sel_VxA_( _cwc_3678, _cwc_3661); 
                                            _cwc_3681 = _eq_SxS_( _cwc_3679, _cwc_3680); 
                                            _cwc_3682 = _and_SxS_( _cwc_3681, _cwc_3677); 
                                            if (_cwc_3682) 
                                            { 
                                              _cwc_3676 = UTDScalarB::comaBBB( x, y) ; 
                                              _cwc_3404 = _cwc_3676; 
                                            }
                                            else
                                            { 
                                              _cwc_3670 = true; 
                                              _cwc_3673 = 12; 
                                              _cwc_3671 = [ 0 ]; 
                                              _cwc_3672 = _sel_VxA_( _cwc_3671, _cwc_3661); 
                                              _cwc_3674 = _eq_SxS_( _cwc_3672, _cwc_3673); 
                                              _cwc_3675 = _and_SxS_( _cwc_3674, _cwc_3670); 
                                              if (_cwc_3675) 
                                              { 
                                                _cwc_3669 = UTDScalarB::comaBBB( x, y) ; 
                                                _cwc_3404 = _cwc_3669; 
                                              }
                                              else
                                              { 
                                                _cwc_3663 = true; 
                                                _cwc_3666 = 14; 
                                                _cwc_3664 = [ 0 ]; 
                                                _cwc_3665 = _sel_VxA_( _cwc_3664, _cwc_3661); 
                                                _cwc_3667 = _eq_SxS_( _cwc_3665, _cwc_3666); 
                                                _cwc_3668 = _and_SxS_( _cwc_3667, _cwc_3663); 
                                                if (_cwc_3668) 
                                                { 
                                                  _cwc_3662 = UTDScalarB::comaBBB( x, y) ; 
                                                  _cwc_3404 = _cwc_3662; 
                                                }
                                                else
                                                { 
                                                  _cwc_3660 = UTDScalarB::comaBBB( x, y) ; 
                                                  _cwc_3404 = _cwc_3660; 
                                                }
                                              }
                                            }
                                          }
                                        }
                                        else
                                        { 
                                          _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                        }
                                      }
                                    }
                                    else
                                    { 
                                      _cwc_3653 = true; 
                                      _cwc_3656 = 70; 
                                      _cwc_3654 = [ 0 ]; 
                                      _cwc_3655 = _sel_VxA_( _cwc_3654, _cwc_3443); 
                                      _cwc_3657 = _eq_SxS_( _cwc_3655, _cwc_3656); 
                                      _cwc_3658 = _and_SxS_( _cwc_3657, _cwc_3653); 
                                      if (_cwc_3658) 
                                      { 
                                        _cwc_3649 = _dim_A_( y); 
                                        _cwc_3651 = 0; 
                                        _cwc_3652 = _eq_SxS_( _cwc_3649, _cwc_3651); 
                                        if (_cwc_3652) 
                                        { 
                                          _cwc_3650 = UTDScalarB::comaBBB( x, y) ; 
                                          _cwc_3404 = _cwc_3650; 
                                        }
                                        else
                                        { 
                                          _cwc_3616 = _dim_A_( y); 
                                          _cwc_3647 = 1; 
                                          _cwc_3648 = _eq_SxS_( _cwc_3616, _cwc_3647); 
                                          if (_cwc_3648) 
                                          { 
                                            _cwc_3618 = _shape_A_( y); 
                                            _cwc_3641 = true; 
                                            _cwc_3644 = 4; 
                                            _cwc_3642 = [ 0 ]; 
                                            _cwc_3643 = _sel_VxA_( _cwc_3642, _cwc_3618); 
                                            _cwc_3645 = _eq_SxS_( _cwc_3643, _cwc_3644); 
                                            _cwc_3646 = _and_SxS_( _cwc_3645, _cwc_3641); 
                                            if (_cwc_3646) 
                                            { 
                                              _cwc_3640 = UTDScalarB::comaBBB( x, y) ; 
                                              _cwc_3404 = _cwc_3640; 
                                            }
                                            else
                                            { 
                                              _cwc_3634 = true; 
                                              _cwc_3637 = 8; 
                                              _cwc_3635 = [ 0 ]; 
                                              _cwc_3636 = _sel_VxA_( _cwc_3635, _cwc_3618); 
                                              _cwc_3638 = _eq_SxS_( _cwc_3636, _cwc_3637); 
                                              _cwc_3639 = _and_SxS_( _cwc_3638, _cwc_3634); 
                                              if (_cwc_3639) 
                                              { 
                                                _cwc_3633 = UTDScalarB::comaBBB( x, y) ; 
                                                _cwc_3404 = _cwc_3633; 
                                              }
                                              else
                                              { 
                                                _cwc_3627 = true; 
                                                _cwc_3630 = 12; 
                                                _cwc_3628 = [ 0 ]; 
                                                _cwc_3629 = _sel_VxA_( _cwc_3628, _cwc_3618); 
                                                _cwc_3631 = _eq_SxS_( _cwc_3629, _cwc_3630); 
                                                _cwc_3632 = _and_SxS_( _cwc_3631, _cwc_3627); 
                                                if (_cwc_3632) 
                                                { 
                                                  _cwc_3626 = UTDScalarB::comaBBB( x, y) ; 
                                                  _cwc_3404 = _cwc_3626; 
                                                }
                                                else
                                                { 
                                                  _cwc_3620 = true; 
                                                  _cwc_3623 = 14; 
                                                  _cwc_3621 = [ 0 ]; 
                                                  _cwc_3622 = _sel_VxA_( _cwc_3621, _cwc_3618); 
                                                  _cwc_3624 = _eq_SxS_( _cwc_3622, _cwc_3623); 
                                                  _cwc_3625 = _and_SxS_( _cwc_3624, _cwc_3620); 
                                                  if (_cwc_3625) 
                                                  { 
                                                    _cwc_3619 = UTDScalarB::comaBBB( x, y) ; 
                                                    _cwc_3404 = _cwc_3619; 
                                                  }
                                                  else
                                                  { 
                                                    _cwc_3617 = UTDScalarB::comaBBB( x, y) ; 
                                                    _cwc_3404 = _cwc_3617; 
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          else
                                          { 
                                            _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                          }
                                        }
                                      }
                                      else
                                      { 
                                        _cwc_3610 = true; 
                                        _cwc_3613 = 84; 
                                        _cwc_3611 = [ 0 ]; 
                                        _cwc_3612 = _sel_VxA_( _cwc_3611, _cwc_3443); 
                                        _cwc_3614 = _eq_SxS_( _cwc_3612, _cwc_3613); 
                                        _cwc_3615 = _and_SxS_( _cwc_3614, _cwc_3610); 
                                        if (_cwc_3615) 
                                        { 
                                          _cwc_3606 = _dim_A_( y); 
                                          _cwc_3608 = 0; 
                                          _cwc_3609 = _eq_SxS_( _cwc_3606, _cwc_3608); 
                                          if (_cwc_3609) 
                                          { 
                                            _cwc_3607 = UTDScalarB::comaBBB( x, y) ; 
                                            _cwc_3404 = _cwc_3607; 
                                          }
                                          else
                                          { 
                                            _cwc_3573 = _dim_A_( y); 
                                            _cwc_3604 = 1; 
                                            _cwc_3605 = _eq_SxS_( _cwc_3573, _cwc_3604); 
                                            if (_cwc_3605) 
                                            { 
                                              _cwc_3575 = _shape_A_( y); 
                                              _cwc_3598 = true; 
                                              _cwc_3601 = 4; 
                                              _cwc_3599 = [ 0 ]; 
                                              _cwc_3600 = _sel_VxA_( _cwc_3599, _cwc_3575); 
                                              _cwc_3602 = _eq_SxS_( _cwc_3600, _cwc_3601); 
                                              _cwc_3603 = _and_SxS_( _cwc_3602, _cwc_3598); 
                                              if (_cwc_3603) 
                                              { 
                                                _cwc_3597 = UTDScalarB::comaBBB( x, y) ; 
                                                _cwc_3404 = _cwc_3597; 
                                              }
                                              else
                                              { 
                                                _cwc_3591 = true; 
                                                _cwc_3594 = 8; 
                                                _cwc_3592 = [ 0 ]; 
                                                _cwc_3593 = _sel_VxA_( _cwc_3592, _cwc_3575); 
                                                _cwc_3595 = _eq_SxS_( _cwc_3593, _cwc_3594); 
                                                _cwc_3596 = _and_SxS_( _cwc_3595, _cwc_3591); 
                                                if (_cwc_3596) 
                                                { 
                                                  _cwc_3590 = UTDScalarB::comaBBB( x, y) ; 
                                                  _cwc_3404 = _cwc_3590; 
                                                }
                                                else
                                                { 
                                                  _cwc_3584 = true; 
                                                  _cwc_3587 = 12; 
                                                  _cwc_3585 = [ 0 ]; 
                                                  _cwc_3586 = _sel_VxA_( _cwc_3585, _cwc_3575); 
                                                  _cwc_3588 = _eq_SxS_( _cwc_3586, _cwc_3587); 
                                                  _cwc_3589 = _and_SxS_( _cwc_3588, _cwc_3584); 
                                                  if (_cwc_3589) 
                                                  { 
                                                    _cwc_3583 = UTDScalarB::comaBBB( x, y) ; 
                                                    _cwc_3404 = _cwc_3583; 
                                                  }
                                                  else
                                                  { 
                                                    _cwc_3577 = true; 
                                                    _cwc_3580 = 14; 
                                                    _cwc_3578 = [ 0 ]; 
                                                    _cwc_3579 = _sel_VxA_( _cwc_3578, _cwc_3575); 
                                                    _cwc_3581 = _eq_SxS_( _cwc_3579, _cwc_3580); 
                                                    _cwc_3582 = _and_SxS_( _cwc_3581, _cwc_3577); 
                                                    if (_cwc_3582) 
                                                    { 
                                                      _cwc_3576 = UTDScalarB::comaBBB( x, y) ; 
                                                      _cwc_3404 = _cwc_3576; 
                                                    }
                                                    else
                                                    { 
                                                      _cwc_3574 = UTDScalarB::comaBBB( x, y) ; 
                                                      _cwc_3404 = _cwc_3574; 
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            else
                                            { 
                                              _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                            }
                                          }
                                        }
                                        else
                                        { 
                                          _cwc_3567 = true; 
                                          _cwc_3570 = 98; 
                                          _cwc_3568 = [ 0 ]; 
                                          _cwc_3569 = _sel_VxA_( _cwc_3568, _cwc_3443); 
                                          _cwc_3571 = _eq_SxS_( _cwc_3569, _cwc_3570); 
                                          _cwc_3572 = _and_SxS_( _cwc_3571, _cwc_3567); 
                                          if (_cwc_3572) 
                                          { 
                                            _cwc_3563 = _dim_A_( y); 
                                            _cwc_3565 = 0; 
                                            _cwc_3566 = _eq_SxS_( _cwc_3563, _cwc_3565); 
                                            if (_cwc_3566) 
                                            { 
                                              _cwc_3564 = UTDScalarB::comaBBB( x, y) ; 
                                              _cwc_3404 = _cwc_3564; 
                                            }
                                            else
                                            { 
                                              _cwc_3530 = _dim_A_( y); 
                                              _cwc_3561 = 1; 
                                              _cwc_3562 = _eq_SxS_( _cwc_3530, _cwc_3561); 
                                              if (_cwc_3562) 
                                              { 
                                                _cwc_3532 = _shape_A_( y); 
                                                _cwc_3555 = true; 
                                                _cwc_3558 = 4; 
                                                _cwc_3556 = [ 0 ]; 
                                                _cwc_3557 = _sel_VxA_( _cwc_3556, _cwc_3532); 
                                                _cwc_3559 = _eq_SxS_( _cwc_3557, _cwc_3558); 
                                                _cwc_3560 = _and_SxS_( _cwc_3559, _cwc_3555); 
                                                if (_cwc_3560) 
                                                { 
                                                  _cwc_3554 = UTDScalarB::comaBBB( x, y) ; 
                                                  _cwc_3404 = _cwc_3554; 
                                                }
                                                else
                                                { 
                                                  _cwc_3548 = true; 
                                                  _cwc_3551 = 8; 
                                                  _cwc_3549 = [ 0 ]; 
                                                  _cwc_3550 = _sel_VxA_( _cwc_3549, _cwc_3532); 
                                                  _cwc_3552 = _eq_SxS_( _cwc_3550, _cwc_3551); 
                                                  _cwc_3553 = _and_SxS_( _cwc_3552, _cwc_3548); 
                                                  if (_cwc_3553) 
                                                  { 
                                                    _cwc_3547 = UTDScalarB::comaBBB( x, y) ; 
                                                    _cwc_3404 = _cwc_3547; 
                                                  }
                                                  else
                                                  { 
                                                    _cwc_3541 = true; 
                                                    _cwc_3544 = 12; 
                                                    _cwc_3542 = [ 0 ]; 
                                                    _cwc_3543 = _sel_VxA_( _cwc_3542, _cwc_3532); 
                                                    _cwc_3545 = _eq_SxS_( _cwc_3543, _cwc_3544); 
                                                    _cwc_3546 = _and_SxS_( _cwc_3545, _cwc_3541); 
                                                    if (_cwc_3546) 
                                                    { 
                                                      _cwc_3540 = UTDScalarB::comaBBB( x, y) ; 
                                                      _cwc_3404 = _cwc_3540; 
                                                    }
                                                    else
                                                    { 
                                                      _cwc_3534 = true; 
                                                      _cwc_3537 = 14; 
                                                      _cwc_3535 = [ 0 ]; 
                                                      _cwc_3536 = _sel_VxA_( _cwc_3535, _cwc_3532); 
                                                      _cwc_3538 = _eq_SxS_( _cwc_3536, _cwc_3537); 
                                                      _cwc_3539 = _and_SxS_( _cwc_3538, _cwc_3534); 
                                                      if (_cwc_3539) 
                                                      { 
                                                        _cwc_3533 = UTDScalarB::comaBBB( x, y) ; 
                                                        _cwc_3404 = _cwc_3533; 
                                                      }
                                                      else
                                                      { 
                                                        _cwc_3531 = UTDScalarB::comaBBB( x, y) ; 
                                                        _cwc_3404 = _cwc_3531; 
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                              else
                                              { 
                                                _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                              }
                                            }
                                          }
                                          else
                                          { 
                                            _cwc_3524 = true; 
                                            _cwc_3527 = 112; 
                                            _cwc_3525 = [ 0 ]; 
                                            _cwc_3526 = _sel_VxA_( _cwc_3525, _cwc_3443); 
                                            _cwc_3528 = _eq_SxS_( _cwc_3526, _cwc_3527); 
                                            _cwc_3529 = _and_SxS_( _cwc_3528, _cwc_3524); 
                                            if (_cwc_3529) 
                                            { 
                                              _cwc_3520 = _dim_A_( y); 
                                              _cwc_3522 = 0; 
                                              _cwc_3523 = _eq_SxS_( _cwc_3520, _cwc_3522); 
                                              if (_cwc_3523) 
                                              { 
                                                _cwc_3521 = UTDScalarB::comaBBB( x, y) ; 
                                                _cwc_3404 = _cwc_3521; 
                                              }
                                              else
                                              { 
                                                _cwc_3487 = _dim_A_( y); 
                                                _cwc_3518 = 1; 
                                                _cwc_3519 = _eq_SxS_( _cwc_3487, _cwc_3518); 
                                                if (_cwc_3519) 
                                                { 
                                                  _cwc_3489 = _shape_A_( y); 
                                                  _cwc_3512 = true; 
                                                  _cwc_3515 = 4; 
                                                  _cwc_3513 = [ 0 ]; 
                                                  _cwc_3514 = _sel_VxA_( _cwc_3513, _cwc_3489); 
                                                  _cwc_3516 = _eq_SxS_( _cwc_3514, _cwc_3515); 
                                                  _cwc_3517 = _and_SxS_( _cwc_3516, _cwc_3512); 
                                                  if (_cwc_3517) 
                                                  { 
                                                    _cwc_3511 = UTDScalarB::comaBBB( x, y) ; 
                                                    _cwc_3404 = _cwc_3511; 
                                                  }
                                                  else
                                                  { 
                                                    _cwc_3505 = true; 
                                                    _cwc_3508 = 8; 
                                                    _cwc_3506 = [ 0 ]; 
                                                    _cwc_3507 = _sel_VxA_( _cwc_3506, _cwc_3489); 
                                                    _cwc_3509 = _eq_SxS_( _cwc_3507, _cwc_3508); 
                                                    _cwc_3510 = _and_SxS_( _cwc_3509, _cwc_3505); 
                                                    if (_cwc_3510) 
                                                    { 
                                                      _cwc_3504 = UTDScalarB::comaBBB( x, y) ; 
                                                      _cwc_3404 = _cwc_3504; 
                                                    }
                                                    else
                                                    { 
                                                      _cwc_3498 = true; 
                                                      _cwc_3501 = 12; 
                                                      _cwc_3499 = [ 0 ]; 
                                                      _cwc_3500 = _sel_VxA_( _cwc_3499, _cwc_3489); 
                                                      _cwc_3502 = _eq_SxS_( _cwc_3500, _cwc_3501); 
                                                      _cwc_3503 = _and_SxS_( _cwc_3502, _cwc_3498); 
                                                      if (_cwc_3503) 
                                                      { 
                                                        _cwc_3497 = UTDScalarB::comaBBB( x, y) ; 
                                                        _cwc_3404 = _cwc_3497; 
                                                      }
                                                      else
                                                      { 
                                                        _cwc_3491 = true; 
                                                        _cwc_3494 = 14; 
                                                        _cwc_3492 = [ 0 ]; 
                                                        _cwc_3493 = _sel_VxA_( _cwc_3492, _cwc_3489); 
                                                        _cwc_3495 = _eq_SxS_( _cwc_3493, _cwc_3494); 
                                                        _cwc_3496 = _and_SxS_( _cwc_3495, _cwc_3491); 
                                                        if (_cwc_3496) 
                                                        { 
                                                          _cwc_3490 = UTDScalarB::comaBBB( x, y) ; 
                                                          _cwc_3404 = _cwc_3490; 
                                                        }
                                                        else
                                                        { 
                                                          _cwc_3488 = UTDScalarB::comaBBB( x, y) ; 
                                                          _cwc_3404 = _cwc_3488; 
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                else
                                                { 
                                                  _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                                }
                                              }
                                            }
                                            else
                                            { 
                                              _cwc_3481 = true; 
                                              _cwc_3484 = 126; 
                                              _cwc_3482 = [ 0 ]; 
                                              _cwc_3483 = _sel_VxA_( _cwc_3482, _cwc_3443); 
                                              _cwc_3485 = _eq_SxS_( _cwc_3483, _cwc_3484); 
                                              _cwc_3486 = _and_SxS_( _cwc_3485, _cwc_3481); 
                                              if (_cwc_3486) 
                                              { 
                                                _cwc_3477 = _dim_A_( y); 
                                                _cwc_3479 = 0; 
                                                _cwc_3480 = _eq_SxS_( _cwc_3477, _cwc_3479); 
                                                if (_cwc_3480) 
                                                { 
                                                  _cwc_3478 = UTDScalarB::comaBBB( x, y) ; 
                                                  _cwc_3404 = _cwc_3478; 
                                                }
                                                else
                                                { 
                                                  _cwc_3444 = _dim_A_( y); 
                                                  _cwc_3475 = 1; 
                                                  _cwc_3476 = _eq_SxS_( _cwc_3444, _cwc_3475); 
                                                  if (_cwc_3476) 
                                                  { 
                                                    _cwc_3446 = _shape_A_( y); 
                                                    _cwc_3469 = true; 
                                                    _cwc_3472 = 4; 
                                                    _cwc_3470 = [ 0 ]; 
                                                    _cwc_3471 = _sel_VxA_( _cwc_3470, _cwc_3446); 
                                                    _cwc_3473 = _eq_SxS_( _cwc_3471, _cwc_3472); 
                                                    _cwc_3474 = _and_SxS_( _cwc_3473, _cwc_3469); 
                                                    if (_cwc_3474) 
                                                    { 
                                                      _cwc_3468 = UTDScalarB::comaBBB( x, y) ; 
                                                      _cwc_3404 = _cwc_3468; 
                                                    }
                                                    else
                                                    { 
                                                      _cwc_3462 = true; 
                                                      _cwc_3465 = 8; 
                                                      _cwc_3463 = [ 0 ]; 
                                                      _cwc_3464 = _sel_VxA_( _cwc_3463, _cwc_3446); 
                                                      _cwc_3466 = _eq_SxS_( _cwc_3464, _cwc_3465); 
                                                      _cwc_3467 = _and_SxS_( _cwc_3466, _cwc_3462); 
                                                      if (_cwc_3467) 
                                                      { 
                                                        _cwc_3461 = UTDScalarB::comaBBB( x, y) ; 
                                                        _cwc_3404 = _cwc_3461; 
                                                      }
                                                      else
                                                      { 
                                                        _cwc_3455 = true; 
                                                        _cwc_3458 = 12; 
                                                        _cwc_3456 = [ 0 ]; 
                                                        _cwc_3457 = _sel_VxA_( _cwc_3456, _cwc_3446); 
                                                        _cwc_3459 = _eq_SxS_( _cwc_3457, _cwc_3458); 
                                                        _cwc_3460 = _and_SxS_( _cwc_3459, _cwc_3455); 
                                                        if (_cwc_3460) 
                                                        { 
                                                          _cwc_3454 = UTDScalarB::comaBBB( x, y) ; 
                                                          _cwc_3404 = _cwc_3454; 
                                                        }
                                                        else
                                                        { 
                                                          _cwc_3448 = true; 
                                                          _cwc_3451 = 14; 
                                                          _cwc_3449 = [ 0 ]; 
                                                          _cwc_3450 = _sel_VxA_( _cwc_3449, _cwc_3446); 
                                                          _cwc_3452 = _eq_SxS_( _cwc_3450, _cwc_3451); 
                                                          _cwc_3453 = _and_SxS_( _cwc_3452, _cwc_3448); 
                                                          if (_cwc_3453) 
                                                          { 
                                                            _cwc_3447 = UTDScalarB::comaBBB( x, y) ; 
                                                            _cwc_3404 = _cwc_3447; 
                                                          }
                                                          else
                                                          { 
                                                            _cwc_3445 = UTDScalarB::comaBBB( x, y) ; 
                                                            _cwc_3404 = _cwc_3445; 
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  else
                                                  { 
                                                    _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                                  }
                                                }
                                              }
                                              else
                                              { 
                                                _cwc_3439 = _dim_A_( y); 
                                                _cwc_3441 = 0; 
                                                _cwc_3442 = _eq_SxS_( _cwc_3439, _cwc_3441); 
                                                if (_cwc_3442) 
                                                { 
                                                  _cwc_3440 = UTDScalarB::comaBBB( x, y) ; 
                                                  _cwc_3404 = _cwc_3440; 
                                                }
                                                else
                                                { 
                                                  _cwc_3406 = _dim_A_( y); 
                                                  _cwc_3437 = 1; 
                                                  _cwc_3438 = _eq_SxS_( _cwc_3406, _cwc_3437); 
                                                  if (_cwc_3438) 
                                                  { 
                                                    _cwc_3408 = _shape_A_( y); 
                                                    _cwc_3431 = true; 
                                                    _cwc_3434 = 4; 
                                                    _cwc_3432 = [ 0 ]; 
                                                    _cwc_3433 = _sel_VxA_( _cwc_3432, _cwc_3408); 
                                                    _cwc_3435 = _eq_SxS_( _cwc_3433, _cwc_3434); 
                                                    _cwc_3436 = _and_SxS_( _cwc_3435, _cwc_3431); 
                                                    if (_cwc_3436) 
                                                    { 
                                                      _cwc_3430 = UTDScalarB::comaBBB( x, y) ; 
                                                      _cwc_3404 = _cwc_3430; 
                                                    }
                                                    else
                                                    { 
                                                      _cwc_3424 = true; 
                                                      _cwc_3427 = 8; 
                                                      _cwc_3425 = [ 0 ]; 
                                                      _cwc_3426 = _sel_VxA_( _cwc_3425, _cwc_3408); 
                                                      _cwc_3428 = _eq_SxS_( _cwc_3426, _cwc_3427); 
                                                      _cwc_3429 = _and_SxS_( _cwc_3428, _cwc_3424); 
                                                      if (_cwc_3429) 
                                                      { 
                                                        _cwc_3423 = UTDScalarB::comaBBB( x, y) ; 
                                                        _cwc_3404 = _cwc_3423; 
                                                      }
                                                      else
                                                      { 
                                                        _cwc_3417 = true; 
                                                        _cwc_3420 = 12; 
                                                        _cwc_3418 = [ 0 ]; 
                                                        _cwc_3419 = _sel_VxA_( _cwc_3418, _cwc_3408); 
                                                        _cwc_3421 = _eq_SxS_( _cwc_3419, _cwc_3420); 
                                                        _cwc_3422 = _and_SxS_( _cwc_3421, _cwc_3417); 
                                                        if (_cwc_3422) 
                                                        { 
                                                          _cwc_3416 = UTDScalarB::comaBBB( x, y) ; 
                                                          _cwc_3404 = _cwc_3416; 
                                                        }
                                                        else
                                                        { 
                                                          _cwc_3410 = true; 
                                                          _cwc_3413 = 14; 
                                                          _cwc_3411 = [ 0 ]; 
                                                          _cwc_3412 = _sel_VxA_( _cwc_3411, _cwc_3408); 
                                                          _cwc_3414 = _eq_SxS_( _cwc_3412, _cwc_3413); 
                                                          _cwc_3415 = _and_SxS_( _cwc_3414, _cwc_3410); 
                                                          if (_cwc_3415) 
                                                          { 
                                                            _cwc_3409 = UTDScalarB::comaBBB( x, y) ; 
                                                            _cwc_3404 = _cwc_3409; 
                                                          }
                                                          else
                                                          { 
                                                            _cwc_3407 = UTDScalarB::comaBBB( x, y) ; 
                                                            _cwc_3404 = _cwc_3407; 
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  else
                                                  { 
                                                    _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    { 
      _cwc_3404 = _dispatch_error_( 1, bool[.], "UTDScalarB::comaBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
    }
  }
  return( _cwc_3404); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::++(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB:Array::++( bool[*] arr_a { ,NN } , bool[*] arr_b { ,NN } )
/*
 *  ++ :: { bool[*] -> { bool[*] -> ( bool[+]),
                         bool -> ( bool[+]),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[.]),
                         bool[1] -> ( bool[.]),
                         bool[4] -> ( bool[8]),
                         bool[8] -> ( bool[12]),
                         bool[12] -> ( bool[16]),
                         bool[14] -> ( bool[.])},
            bool -> { bool[*] -> ( bool[+]),
                      bool -> ( bool[2]),
                      bool[+] -> ( bool[+])},
            bool[+] -> { bool[*] -> ( bool[+]),
                         bool -> ( bool[+]),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[.]),
                         bool[1] -> ( bool[.]),
                         bool[4] -> ( bool[8]),
                         bool[8] -> ( bool[12]),
                         bool[12] -> ( bool[16]),
                         bool[14] -> ( bool[.])},
            bool[.] -> { bool[*] -> ( bool[.]),
                         bool -> ( --),
                         bool[+] -> ( bool[.]),
                         bool[.] -> ( bool[.]),
                         bool[1] -> ( bool[.]),
                         bool[4] -> ( bool[8]),
                         bool[8] -> ( bool[12]),
                         bool[12] -> ( bool[16]),
                         bool[14] -> ( bool[.])},
            bool[1] -> { bool[*] -> ( bool[2]),
                         bool -> ( --),
                         bool[+] -> ( bool[2]),
                         bool[.] -> ( bool[2]),
                         bool[1] -> ( bool[2]),
                         bool[14] -> ( --)},
            bool[2] -> { bool[*] -> ( bool[3]),
                         bool -> ( --),
                         bool[+] -> ( bool[3]),
                         bool[.] -> ( bool[3]),
                         bool[1] -> ( bool[3]),
                         bool[14] -> ( --)},
            bool[3] -> { bool[*] -> ( bool[4]),
                         bool -> ( --),
                         bool[+] -> ( bool[4]),
                         bool[.] -> ( bool[4]),
                         bool[1] -> ( bool[4]),
                         bool[14] -> ( --)},
            bool[4] -> { bool[*] -> ( bool[.]),
                         bool -> ( --),
                         bool[+] -> ( bool[.]),
                         bool[.] -> ( bool[.]),
                         bool[1] -> ( bool[5]),
                         bool[4] -> ( bool[8]),
                         bool[8] -> ( bool[12]),
                         bool[12] -> ( bool[16]),
                         bool[14] -> ( --)},
            bool[5] -> { bool[*] -> ( bool[6]),
                         bool -> ( --),
                         bool[+] -> ( bool[6]),
                         bool[.] -> ( bool[6]),
                         bool[1] -> ( bool[6]),
                         bool[4] -> ( --),
                         bool[8] -> ( --),
                         bool[12] -> ( --),
                         bool[14] -> ( --)},
            bool[6] -> { bool[*] -> ( bool[7]),
                         bool -> ( --),
                         bool[+] -> ( bool[7]),
                         bool[.] -> ( bool[7]),
                         bool[1] -> ( bool[7]),
                         bool[4] -> ( --),
                         bool[8] -> ( --),
                         bool[12] -> ( --),
                         bool[14] -> ( --)},
            bool[7] -> { bool[*] -> ( bool[8]),
                         bool -> ( --),
                         bool[+] -> ( bool[8]),
                         bool[.] -> ( bool[8]),
                         bool[1] -> ( bool[8]),
                         bool[4] -> ( --),
                         bool[8] -> ( --),
                         bool[12] -> ( --),
                         bool[14] -> ( --)},
            bool[8] -> { bool[*] -> ( bool[9]),
                         bool -> ( --),
                         bool[+] -> ( bool[9]),
                         bool[.] -> ( bool[9]),
                         bool[1] -> ( bool[9]),
                         bool[4] -> ( --),
                         bool[8] -> ( --),
                         bool[12] -> ( --),
                         bool[14] -> ( --)},
            bool[9] -> { bool[*] -> ( bool[10]),
                         bool -> ( --),
                         bool[+] -> ( bool[10]),
                         bool[.] -> ( bool[10]),
                         bool[1] -> ( bool[10]),
                         bool[4] -> ( --),
                         bool[8] -> ( --),
                         bool[12] -> ( --),
                         bool[14] -> ( --)},
            bool[10] -> { bool[*] -> ( bool[11]),
                          bool -> ( --),
                          bool[+] -> ( bool[11]),
                          bool[.] -> ( bool[11]),
                          bool[1] -> ( bool[11]),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --),
                          bool[14] -> ( --)},
            bool[11] -> { bool[*] -> ( bool[12]),
                          bool -> ( --),
                          bool[+] -> ( bool[12]),
                          bool[.] -> ( bool[12]),
                          bool[1] -> ( bool[12]),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --),
                          bool[14] -> ( --)},
            bool[12] -> { bool[*] -> ( bool[13]),
                          bool -> ( --),
                          bool[+] -> ( bool[13]),
                          bool[.] -> ( bool[13]),
                          bool[1] -> ( bool[13]),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --),
                          bool[14] -> ( --)},
            bool[13] -> { bool[*] -> ( bool[14]),
                          bool -> ( --),
                          bool[+] -> ( bool[14]),
                          bool[.] -> ( bool[14]),
                          bool[1] -> ( bool[14]),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --),
                          bool[14] -> ( --)},
            bool[14] -> { bool[*] -> ( bool[28]),
                          bool -> ( --),
                          bool[+] -> ( bool[28]),
                          bool[.] -> ( bool[28]),
                          bool[1] -> ( --),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --),
                          bool[14] -> ( bool[28])},
            bool[28] -> { bool[*] -> ( bool[42]),
                          bool -> ( --),
                          bool[+] -> ( bool[42]),
                          bool[.] -> ( bool[42]),
                          bool[1] -> ( --),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --),
                          bool[14] -> ( bool[42])},
            bool[42] -> { bool[*] -> ( bool[56]),
                          bool -> ( --),
                          bool[+] -> ( bool[56]),
                          bool[.] -> ( bool[56]),
                          bool[1] -> ( --),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --),
                          bool[14] -> ( bool[56])},
            bool[56] -> { bool[*] -> ( bool[70]),
                          bool -> ( --),
                          bool[+] -> ( bool[70]),
                          bool[.] -> ( bool[70]),
                          bool[1] -> ( --),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --),
                          bool[14] -> ( bool[70])},
            bool[70] -> { bool[*] -> ( bool[84]),
                          bool -> ( --),
                          bool[+] -> ( bool[84]),
                          bool[.] -> ( bool[84]),
                          bool[1] -> ( --),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --),
                          bool[14] -> ( bool[84])},
            bool[84] -> { bool[*] -> ( bool[98]),
                          bool -> ( --),
                          bool[+] -> ( bool[98]),
                          bool[.] -> ( bool[98]),
                          bool[1] -> ( --),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --),
                          bool[14] -> ( bool[98])},
            bool[98] -> { bool[*] -> ( bool[112]),
                          bool -> ( --),
                          bool[+] -> ( bool[112]),
                          bool[.] -> ( bool[112]),
                          bool[1] -> ( --),
                          bool[4] -> ( --),
                          bool[8] -> ( --),
                          bool[12] -> ( --),
                          bool[14] -> ( bool[112])},
            bool[112] -> { bool[*] -> ( bool[126]),
                           bool -> ( --),
                           bool[+] -> ( bool[126]),
                           bool[.] -> ( bool[126]),
                           bool[1] -> ( --),
                           bool[4] -> ( --),
                           bool[8] -> ( --),
                           bool[12] -> ( --),
                           bool[14] -> ( bool[126])}}
 *  dispatching to: ArrayTransform::++,
 *                  ArrayTransform::++,
 *                  ArrayTransform::++,
 *                  ArrayTransform::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++,
 *                  UTDScalarB:Array::++
 */
{ 
  bool[+] _cwc_4228 { , NN } ; 
  bool _cwc_5413 { , NN } ; 
  int _cwc_5412 { , NN } ; 
  bool _cwc_5411 { , NN } ; 
  int _cwc_5410 { , NN } ; 
  bool[2] _cwc_5409 { , NN } ; 
  int _cwc_5408 { , NN } ; 
  bool _cwc_5407 { , NN } ; 
  int _cwc_5406 { , NN } ; 
  int _cwc_5405 { , NN } ; 
  bool[+] _cwc_5404 { , NN } ; 
  int _cwc_5403 { , NN } ; 
  bool _cwc_5402 { , NN } ; 
  int _cwc_5401 { , NN } ; 
  int _cwc_5400 { , NN } ; 
  bool _cwc_5399 { , NN } ; 
  int _cwc_5398 { , NN } ; 
  bool _cwc_5397 { , NN } ; 
  bool _cwc_5396 { , NN } ; 
  int{1} _cwc_5395 { , NN } ; 
  int _cwc_5394 { , NN } ; 
  int[1]{0} _cwc_5393 { , NN } ; 
  bool _cwc_5392 { , NN } ; 
  bool _cwc_5391 { , NN } ; 
  int _cwc_5390 { , NN } ; 
  bool[+] _cwc_5389 { , NN } ; 
  int _cwc_5388 { , NN } ; 
  bool _cwc_5387 { , NN } ; 
  int _cwc_5386 { , NN } ; 
  int _cwc_5385 { , NN } ; 
  bool _cwc_5384 { , NN } ; 
  int _cwc_5383 { , NN } ; 
  bool _cwc_5382 { , NN } ; 
  bool _cwc_5381 { , NN } ; 
  int{1} _cwc_5380 { , NN } ; 
  int _cwc_5379 { , NN } ; 
  int[1]{0} _cwc_5378 { , NN } ; 
  bool _cwc_5377 { , NN } ; 
  bool[2] _cwc_5376 { , NN } ; 
  bool _cwc_5375 { , NN } ; 
  bool _cwc_5374 { , NN } ; 
  int{14} _cwc_5373 { , NN } ; 
  int _cwc_5372 { , NN } ; 
  int[1]{0} _cwc_5371 { , NN } ; 
  bool _cwc_5370 { , NN } ; 
  bool[.] _cwc_5369 { , NN } ; 
  int[+] _cwc_5368 { , NN } ; 
  bool[.] _cwc_5367 { , NN } ; 
  int _cwc_5366 { , NN } ; 
  bool[+] _cwc_5365 { , NN } ; 
  bool _cwc_5364 { , NN } ; 
  bool _cwc_5363 { , NN } ; 
  int{2} _cwc_5362 { , NN } ; 
  int _cwc_5361 { , NN } ; 
  int[1]{0} _cwc_5360 { , NN } ; 
  bool _cwc_5359 { , NN } ; 
  bool _cwc_5358 { , NN } ; 
  int _cwc_5357 { , NN } ; 
  bool[+] _cwc_5356 { , NN } ; 
  int _cwc_5355 { , NN } ; 
  bool _cwc_5354 { , NN } ; 
  int _cwc_5353 { , NN } ; 
  int _cwc_5352 { , NN } ; 
  bool _cwc_5351 { , NN } ; 
  int _cwc_5350 { , NN } ; 
  bool _cwc_5349 { , NN } ; 
  bool _cwc_5348 { , NN } ; 
  int{1} _cwc_5347 { , NN } ; 
  int _cwc_5346 { , NN } ; 
  int[1]{0} _cwc_5345 { , NN } ; 
  bool _cwc_5344 { , NN } ; 
  bool[3] _cwc_5343 { , NN } ; 
  bool _cwc_5342 { , NN } ; 
  bool _cwc_5341 { , NN } ; 
  int{14} _cwc_5340 { , NN } ; 
  int _cwc_5339 { , NN } ; 
  int[1]{0} _cwc_5338 { , NN } ; 
  bool _cwc_5337 { , NN } ; 
  bool[.] _cwc_5336 { , NN } ; 
  int[+] _cwc_5335 { , NN } ; 
  bool[.] _cwc_5334 { , NN } ; 
  int _cwc_5333 { , NN } ; 
  bool[+] _cwc_5332 { , NN } ; 
  bool _cwc_5331 { , NN } ; 
  bool _cwc_5330 { , NN } ; 
  int{3} _cwc_5329 { , NN } ; 
  int _cwc_5328 { , NN } ; 
  int[1]{0} _cwc_5327 { , NN } ; 
  bool _cwc_5326 { , NN } ; 
  bool _cwc_5325 { , NN } ; 
  int _cwc_5324 { , NN } ; 
  bool[+] _cwc_5323 { , NN } ; 
  int _cwc_5322 { , NN } ; 
  bool _cwc_5321 { , NN } ; 
  int _cwc_5320 { , NN } ; 
  int _cwc_5319 { , NN } ; 
  bool _cwc_5318 { , NN } ; 
  int _cwc_5317 { , NN } ; 
  bool _cwc_5316 { , NN } ; 
  bool _cwc_5315 { , NN } ; 
  int{1} _cwc_5314 { , NN } ; 
  int _cwc_5313 { , NN } ; 
  int[1]{0} _cwc_5312 { , NN } ; 
  bool _cwc_5311 { , NN } ; 
  bool[4] _cwc_5310 { , NN } ; 
  bool _cwc_5309 { , NN } ; 
  bool _cwc_5308 { , NN } ; 
  int{14} _cwc_5307 { , NN } ; 
  int _cwc_5306 { , NN } ; 
  int[1]{0} _cwc_5305 { , NN } ; 
  bool _cwc_5304 { , NN } ; 
  bool[.] _cwc_5303 { , NN } ; 
  int[+] _cwc_5302 { , NN } ; 
  bool[.] _cwc_5301 { , NN } ; 
  int _cwc_5300 { , NN } ; 
  bool[+] _cwc_5299 { , NN } ; 
  bool _cwc_5298 { , NN } ; 
  bool _cwc_5297 { , NN } ; 
  int{4} _cwc_5296 { , NN } ; 
  int _cwc_5295 { , NN } ; 
  int[1]{0} _cwc_5294 { , NN } ; 
  bool _cwc_5293 { , NN } ; 
  bool _cwc_5292 { , NN } ; 
  int _cwc_5291 { , NN } ; 
  bool[+] _cwc_5290 { , NN } ; 
  int _cwc_5289 { , NN } ; 
  bool _cwc_5288 { , NN } ; 
  int _cwc_5287 { , NN } ; 
  int _cwc_5286 { , NN } ; 
  bool _cwc_5285 { , NN } ; 
  int _cwc_5284 { , NN } ; 
  bool _cwc_5283 { , NN } ; 
  bool _cwc_5282 { , NN } ; 
  int{1} _cwc_5281 { , NN } ; 
  int _cwc_5280 { , NN } ; 
  int[1]{0} _cwc_5279 { , NN } ; 
  bool _cwc_5278 { , NN } ; 
  bool[5] _cwc_5277 { , NN } ; 
  bool _cwc_5276 { , NN } ; 
  bool _cwc_5275 { , NN } ; 
  int{4} _cwc_5274 { , NN } ; 
  int _cwc_5273 { , NN } ; 
  int[1]{0} _cwc_5272 { , NN } ; 
  bool _cwc_5271 { , NN } ; 
  bool[8] _cwc_5270 { , NN } ; 
  bool _cwc_5269 { , NN } ; 
  bool _cwc_5268 { , NN } ; 
  int{8} _cwc_5267 { , NN } ; 
  int _cwc_5266 { , NN } ; 
  int[1]{0} _cwc_5265 { , NN } ; 
  bool _cwc_5264 { , NN } ; 
  bool[12] _cwc_5263 { , NN } ; 
  bool _cwc_5262 { , NN } ; 
  bool _cwc_5261 { , NN } ; 
  int{12} _cwc_5260 { , NN } ; 
  int _cwc_5259 { , NN } ; 
  int[1]{0} _cwc_5258 { , NN } ; 
  bool _cwc_5257 { , NN } ; 
  bool[16] _cwc_5256 { , NN } ; 
  bool _cwc_5255 { , NN } ; 
  bool _cwc_5254 { , NN } ; 
  int{14} _cwc_5253 { , NN } ; 
  int _cwc_5252 { , NN } ; 
  int[1]{0} _cwc_5251 { , NN } ; 
  bool _cwc_5250 { , NN } ; 
  bool[.] _cwc_5249 { , NN } ; 
  int[+] _cwc_5248 { , NN } ; 
  bool[.] _cwc_5247 { , NN } ; 
  int _cwc_5246 { , NN } ; 
  bool[+] _cwc_5245 { , NN } ; 
  bool _cwc_5244 { , NN } ; 
  bool _cwc_5243 { , NN } ; 
  int{5} _cwc_5242 { , NN } ; 
  int _cwc_5241 { , NN } ; 
  int[1]{0} _cwc_5240 { , NN } ; 
  bool _cwc_5239 { , NN } ; 
  bool _cwc_5238 { , NN } ; 
  int _cwc_5237 { , NN } ; 
  bool[+] _cwc_5236 { , NN } ; 
  int _cwc_5235 { , NN } ; 
  bool _cwc_5234 { , NN } ; 
  int _cwc_5233 { , NN } ; 
  int _cwc_5232 { , NN } ; 
  bool _cwc_5231 { , NN } ; 
  int _cwc_5230 { , NN } ; 
  bool _cwc_5229 { , NN } ; 
  bool _cwc_5228 { , NN } ; 
  int{1} _cwc_5227 { , NN } ; 
  int _cwc_5226 { , NN } ; 
  int[1]{0} _cwc_5225 { , NN } ; 
  bool _cwc_5224 { , NN } ; 
  bool[6] _cwc_5223 { , NN } ; 
  bool _cwc_5222 { , NN } ; 
  bool _cwc_5221 { , NN } ; 
  int{4} _cwc_5220 { , NN } ; 
  int _cwc_5219 { , NN } ; 
  int[1]{0} _cwc_5218 { , NN } ; 
  bool _cwc_5217 { , NN } ; 
  bool[.] _cwc_5216 { , NN } ; 
  bool _cwc_5215 { , NN } ; 
  bool _cwc_5214 { , NN } ; 
  int{8} _cwc_5213 { , NN } ; 
  int _cwc_5212 { , NN } ; 
  int[1]{0} _cwc_5211 { , NN } ; 
  bool _cwc_5210 { , NN } ; 
  bool[.] _cwc_5209 { , NN } ; 
  bool _cwc_5208 { , NN } ; 
  bool _cwc_5207 { , NN } ; 
  int{12} _cwc_5206 { , NN } ; 
  int _cwc_5205 { , NN } ; 
  int[1]{0} _cwc_5204 { , NN } ; 
  bool _cwc_5203 { , NN } ; 
  bool[.] _cwc_5202 { , NN } ; 
  bool _cwc_5201 { , NN } ; 
  bool _cwc_5200 { , NN } ; 
  int{14} _cwc_5199 { , NN } ; 
  int _cwc_5198 { , NN } ; 
  int[1]{0} _cwc_5197 { , NN } ; 
  bool _cwc_5196 { , NN } ; 
  bool[.] _cwc_5195 { , NN } ; 
  int[+] _cwc_5194 { , NN } ; 
  bool[.] _cwc_5193 { , NN } ; 
  int _cwc_5192 { , NN } ; 
  bool[+] _cwc_5191 { , NN } ; 
  bool _cwc_5190 { , NN } ; 
  bool _cwc_5189 { , NN } ; 
  int{6} _cwc_5188 { , NN } ; 
  int _cwc_5187 { , NN } ; 
  int[1]{0} _cwc_5186 { , NN } ; 
  bool _cwc_5185 { , NN } ; 
  bool _cwc_5184 { , NN } ; 
  int _cwc_5183 { , NN } ; 
  bool[+] _cwc_5182 { , NN } ; 
  int _cwc_5181 { , NN } ; 
  bool _cwc_5180 { , NN } ; 
  int _cwc_5179 { , NN } ; 
  int _cwc_5178 { , NN } ; 
  bool _cwc_5177 { , NN } ; 
  int _cwc_5176 { , NN } ; 
  bool _cwc_5175 { , NN } ; 
  bool _cwc_5174 { , NN } ; 
  int{1} _cwc_5173 { , NN } ; 
  int _cwc_5172 { , NN } ; 
  int[1]{0} _cwc_5171 { , NN } ; 
  bool _cwc_5170 { , NN } ; 
  bool[7] _cwc_5169 { , NN } ; 
  bool _cwc_5168 { , NN } ; 
  bool _cwc_5167 { , NN } ; 
  int{4} _cwc_5166 { , NN } ; 
  int _cwc_5165 { , NN } ; 
  int[1]{0} _cwc_5164 { , NN } ; 
  bool _cwc_5163 { , NN } ; 
  bool[.] _cwc_5162 { , NN } ; 
  bool _cwc_5161 { , NN } ; 
  bool _cwc_5160 { , NN } ; 
  int{8} _cwc_5159 { , NN } ; 
  int _cwc_5158 { , NN } ; 
  int[1]{0} _cwc_5157 { , NN } ; 
  bool _cwc_5156 { , NN } ; 
  bool[.] _cwc_5155 { , NN } ; 
  bool _cwc_5154 { , NN } ; 
  bool _cwc_5153 { , NN } ; 
  int{12} _cwc_5152 { , NN } ; 
  int _cwc_5151 { , NN } ; 
  int[1]{0} _cwc_5150 { , NN } ; 
  bool _cwc_5149 { , NN } ; 
  bool[.] _cwc_5148 { , NN } ; 
  bool _cwc_5147 { , NN } ; 
  bool _cwc_5146 { , NN } ; 
  int{14} _cwc_5145 { , NN } ; 
  int _cwc_5144 { , NN } ; 
  int[1]{0} _cwc_5143 { , NN } ; 
  bool _cwc_5142 { , NN } ; 
  bool[.] _cwc_5141 { , NN } ; 
  int[+] _cwc_5140 { , NN } ; 
  bool[.] _cwc_5139 { , NN } ; 
  int _cwc_5138 { , NN } ; 
  bool[+] _cwc_5137 { , NN } ; 
  bool _cwc_5136 { , NN } ; 
  bool _cwc_5135 { , NN } ; 
  int{7} _cwc_5134 { , NN } ; 
  int _cwc_5133 { , NN } ; 
  int[1]{0} _cwc_5132 { , NN } ; 
  bool _cwc_5131 { , NN } ; 
  bool _cwc_5130 { , NN } ; 
  int _cwc_5129 { , NN } ; 
  bool[+] _cwc_5128 { , NN } ; 
  int _cwc_5127 { , NN } ; 
  bool _cwc_5126 { , NN } ; 
  int _cwc_5125 { , NN } ; 
  int _cwc_5124 { , NN } ; 
  bool _cwc_5123 { , NN } ; 
  int _cwc_5122 { , NN } ; 
  bool _cwc_5121 { , NN } ; 
  bool _cwc_5120 { , NN } ; 
  int{1} _cwc_5119 { , NN } ; 
  int _cwc_5118 { , NN } ; 
  int[1]{0} _cwc_5117 { , NN } ; 
  bool _cwc_5116 { , NN } ; 
  bool[8] _cwc_5115 { , NN } ; 
  bool _cwc_5114 { , NN } ; 
  bool _cwc_5113 { , NN } ; 
  int{4} _cwc_5112 { , NN } ; 
  int _cwc_5111 { , NN } ; 
  int[1]{0} _cwc_5110 { , NN } ; 
  bool _cwc_5109 { , NN } ; 
  bool[.] _cwc_5108 { , NN } ; 
  bool _cwc_5107 { , NN } ; 
  bool _cwc_5106 { , NN } ; 
  int{8} _cwc_5105 { , NN } ; 
  int _cwc_5104 { , NN } ; 
  int[1]{0} _cwc_5103 { , NN } ; 
  bool _cwc_5102 { , NN } ; 
  bool[.] _cwc_5101 { , NN } ; 
  bool _cwc_5100 { , NN } ; 
  bool _cwc_5099 { , NN } ; 
  int{12} _cwc_5098 { , NN } ; 
  int _cwc_5097 { , NN } ; 
  int[1]{0} _cwc_5096 { , NN } ; 
  bool _cwc_5095 { , NN } ; 
  bool[.] _cwc_5094 { , NN } ; 
  bool _cwc_5093 { , NN } ; 
  bool _cwc_5092 { , NN } ; 
  int{14} _cwc_5091 { , NN } ; 
  int _cwc_5090 { , NN } ; 
  int[1]{0} _cwc_5089 { , NN } ; 
  bool _cwc_5088 { , NN } ; 
  bool[.] _cwc_5087 { , NN } ; 
  int[+] _cwc_5086 { , NN } ; 
  bool[.] _cwc_5085 { , NN } ; 
  int _cwc_5084 { , NN } ; 
  bool[+] _cwc_5083 { , NN } ; 
  bool _cwc_5082 { , NN } ; 
  bool _cwc_5081 { , NN } ; 
  int{8} _cwc_5080 { , NN } ; 
  int _cwc_5079 { , NN } ; 
  int[1]{0} _cwc_5078 { , NN } ; 
  bool _cwc_5077 { , NN } ; 
  bool _cwc_5076 { , NN } ; 
  int _cwc_5075 { , NN } ; 
  bool[+] _cwc_5074 { , NN } ; 
  int _cwc_5073 { , NN } ; 
  bool _cwc_5072 { , NN } ; 
  int _cwc_5071 { , NN } ; 
  int _cwc_5070 { , NN } ; 
  bool _cwc_5069 { , NN } ; 
  int _cwc_5068 { , NN } ; 
  bool _cwc_5067 { , NN } ; 
  bool _cwc_5066 { , NN } ; 
  int{1} _cwc_5065 { , NN } ; 
  int _cwc_5064 { , NN } ; 
  int[1]{0} _cwc_5063 { , NN } ; 
  bool _cwc_5062 { , NN } ; 
  bool[9] _cwc_5061 { , NN } ; 
  bool _cwc_5060 { , NN } ; 
  bool _cwc_5059 { , NN } ; 
  int{4} _cwc_5058 { , NN } ; 
  int _cwc_5057 { , NN } ; 
  int[1]{0} _cwc_5056 { , NN } ; 
  bool _cwc_5055 { , NN } ; 
  bool[.] _cwc_5054 { , NN } ; 
  bool _cwc_5053 { , NN } ; 
  bool _cwc_5052 { , NN } ; 
  int{8} _cwc_5051 { , NN } ; 
  int _cwc_5050 { , NN } ; 
  int[1]{0} _cwc_5049 { , NN } ; 
  bool _cwc_5048 { , NN } ; 
  bool[.] _cwc_5047 { , NN } ; 
  bool _cwc_5046 { , NN } ; 
  bool _cwc_5045 { , NN } ; 
  int{12} _cwc_5044 { , NN } ; 
  int _cwc_5043 { , NN } ; 
  int[1]{0} _cwc_5042 { , NN } ; 
  bool _cwc_5041 { , NN } ; 
  bool[.] _cwc_5040 { , NN } ; 
  bool _cwc_5039 { , NN } ; 
  bool _cwc_5038 { , NN } ; 
  int{14} _cwc_5037 { , NN } ; 
  int _cwc_5036 { , NN } ; 
  int[1]{0} _cwc_5035 { , NN } ; 
  bool _cwc_5034 { , NN } ; 
  bool[.] _cwc_5033 { , NN } ; 
  int[+] _cwc_5032 { , NN } ; 
  bool[.] _cwc_5031 { , NN } ; 
  int _cwc_5030 { , NN } ; 
  bool[+] _cwc_5029 { , NN } ; 
  bool _cwc_5028 { , NN } ; 
  bool _cwc_5027 { , NN } ; 
  int{9} _cwc_5026 { , NN } ; 
  int _cwc_5025 { , NN } ; 
  int[1]{0} _cwc_5024 { , NN } ; 
  bool _cwc_5023 { , NN } ; 
  bool _cwc_5022 { , NN } ; 
  int _cwc_5021 { , NN } ; 
  bool[+] _cwc_5020 { , NN } ; 
  int _cwc_5019 { , NN } ; 
  bool _cwc_5018 { , NN } ; 
  int _cwc_5017 { , NN } ; 
  int _cwc_5016 { , NN } ; 
  bool _cwc_5015 { , NN } ; 
  int _cwc_5014 { , NN } ; 
  bool _cwc_5013 { , NN } ; 
  bool _cwc_5012 { , NN } ; 
  int{1} _cwc_5011 { , NN } ; 
  int _cwc_5010 { , NN } ; 
  int[1]{0} _cwc_5009 { , NN } ; 
  bool _cwc_5008 { , NN } ; 
  bool[10] _cwc_5007 { , NN } ; 
  bool _cwc_5006 { , NN } ; 
  bool _cwc_5005 { , NN } ; 
  int{4} _cwc_5004 { , NN } ; 
  int _cwc_5003 { , NN } ; 
  int[1]{0} _cwc_5002 { , NN } ; 
  bool _cwc_5001 { , NN } ; 
  bool[.] _cwc_5000 { , NN } ; 
  bool _cwc_4999 { , NN } ; 
  bool _cwc_4998 { , NN } ; 
  int{8} _cwc_4997 { , NN } ; 
  int _cwc_4996 { , NN } ; 
  int[1]{0} _cwc_4995 { , NN } ; 
  bool _cwc_4994 { , NN } ; 
  bool[.] _cwc_4993 { , NN } ; 
  bool _cwc_4992 { , NN } ; 
  bool _cwc_4991 { , NN } ; 
  int{12} _cwc_4990 { , NN } ; 
  int _cwc_4989 { , NN } ; 
  int[1]{0} _cwc_4988 { , NN } ; 
  bool _cwc_4987 { , NN } ; 
  bool[.] _cwc_4986 { , NN } ; 
  bool _cwc_4985 { , NN } ; 
  bool _cwc_4984 { , NN } ; 
  int{14} _cwc_4983 { , NN } ; 
  int _cwc_4982 { , NN } ; 
  int[1]{0} _cwc_4981 { , NN } ; 
  bool _cwc_4980 { , NN } ; 
  bool[.] _cwc_4979 { , NN } ; 
  int[+] _cwc_4978 { , NN } ; 
  bool[.] _cwc_4977 { , NN } ; 
  int _cwc_4976 { , NN } ; 
  bool[+] _cwc_4975 { , NN } ; 
  bool _cwc_4974 { , NN } ; 
  bool _cwc_4973 { , NN } ; 
  int{10} _cwc_4972 { , NN } ; 
  int _cwc_4971 { , NN } ; 
  int[1]{0} _cwc_4970 { , NN } ; 
  bool _cwc_4969 { , NN } ; 
  bool _cwc_4968 { , NN } ; 
  int _cwc_4967 { , NN } ; 
  bool[+] _cwc_4966 { , NN } ; 
  int _cwc_4965 { , NN } ; 
  bool _cwc_4964 { , NN } ; 
  int _cwc_4963 { , NN } ; 
  int _cwc_4962 { , NN } ; 
  bool _cwc_4961 { , NN } ; 
  int _cwc_4960 { , NN } ; 
  bool _cwc_4959 { , NN } ; 
  bool _cwc_4958 { , NN } ; 
  int{1} _cwc_4957 { , NN } ; 
  int _cwc_4956 { , NN } ; 
  int[1]{0} _cwc_4955 { , NN } ; 
  bool _cwc_4954 { , NN } ; 
  bool[11] _cwc_4953 { , NN } ; 
  bool _cwc_4952 { , NN } ; 
  bool _cwc_4951 { , NN } ; 
  int{4} _cwc_4950 { , NN } ; 
  int _cwc_4949 { , NN } ; 
  int[1]{0} _cwc_4948 { , NN } ; 
  bool _cwc_4947 { , NN } ; 
  bool[.] _cwc_4946 { , NN } ; 
  bool _cwc_4945 { , NN } ; 
  bool _cwc_4944 { , NN } ; 
  int{8} _cwc_4943 { , NN } ; 
  int _cwc_4942 { , NN } ; 
  int[1]{0} _cwc_4941 { , NN } ; 
  bool _cwc_4940 { , NN } ; 
  bool[.] _cwc_4939 { , NN } ; 
  bool _cwc_4938 { , NN } ; 
  bool _cwc_4937 { , NN } ; 
  int{12} _cwc_4936 { , NN } ; 
  int _cwc_4935 { , NN } ; 
  int[1]{0} _cwc_4934 { , NN } ; 
  bool _cwc_4933 { , NN } ; 
  bool[.] _cwc_4932 { , NN } ; 
  bool _cwc_4931 { , NN } ; 
  bool _cwc_4930 { , NN } ; 
  int{14} _cwc_4929 { , NN } ; 
  int _cwc_4928 { , NN } ; 
  int[1]{0} _cwc_4927 { , NN } ; 
  bool _cwc_4926 { , NN } ; 
  bool[.] _cwc_4925 { , NN } ; 
  int[+] _cwc_4924 { , NN } ; 
  bool[.] _cwc_4923 { , NN } ; 
  int _cwc_4922 { , NN } ; 
  bool[+] _cwc_4921 { , NN } ; 
  bool _cwc_4920 { , NN } ; 
  bool _cwc_4919 { , NN } ; 
  int{11} _cwc_4918 { , NN } ; 
  int _cwc_4917 { , NN } ; 
  int[1]{0} _cwc_4916 { , NN } ; 
  bool _cwc_4915 { , NN } ; 
  bool _cwc_4914 { , NN } ; 
  int _cwc_4913 { , NN } ; 
  bool[+] _cwc_4912 { , NN } ; 
  int _cwc_4911 { , NN } ; 
  bool _cwc_4910 { , NN } ; 
  int _cwc_4909 { , NN } ; 
  int _cwc_4908 { , NN } ; 
  bool _cwc_4907 { , NN } ; 
  int _cwc_4906 { , NN } ; 
  bool _cwc_4905 { , NN } ; 
  bool _cwc_4904 { , NN } ; 
  int{1} _cwc_4903 { , NN } ; 
  int _cwc_4902 { , NN } ; 
  int[1]{0} _cwc_4901 { , NN } ; 
  bool _cwc_4900 { , NN } ; 
  bool[12] _cwc_4899 { , NN } ; 
  bool _cwc_4898 { , NN } ; 
  bool _cwc_4897 { , NN } ; 
  int{4} _cwc_4896 { , NN } ; 
  int _cwc_4895 { , NN } ; 
  int[1]{0} _cwc_4894 { , NN } ; 
  bool _cwc_4893 { , NN } ; 
  bool[.] _cwc_4892 { , NN } ; 
  bool _cwc_4891 { , NN } ; 
  bool _cwc_4890 { , NN } ; 
  int{8} _cwc_4889 { , NN } ; 
  int _cwc_4888 { , NN } ; 
  int[1]{0} _cwc_4887 { , NN } ; 
  bool _cwc_4886 { , NN } ; 
  bool[.] _cwc_4885 { , NN } ; 
  bool _cwc_4884 { , NN } ; 
  bool _cwc_4883 { , NN } ; 
  int{12} _cwc_4882 { , NN } ; 
  int _cwc_4881 { , NN } ; 
  int[1]{0} _cwc_4880 { , NN } ; 
  bool _cwc_4879 { , NN } ; 
  bool[.] _cwc_4878 { , NN } ; 
  bool _cwc_4877 { , NN } ; 
  bool _cwc_4876 { , NN } ; 
  int{14} _cwc_4875 { , NN } ; 
  int _cwc_4874 { , NN } ; 
  int[1]{0} _cwc_4873 { , NN } ; 
  bool _cwc_4872 { , NN } ; 
  bool[.] _cwc_4871 { , NN } ; 
  int[+] _cwc_4870 { , NN } ; 
  bool[.] _cwc_4869 { , NN } ; 
  int _cwc_4868 { , NN } ; 
  bool[+] _cwc_4867 { , NN } ; 
  bool _cwc_4866 { , NN } ; 
  bool _cwc_4865 { , NN } ; 
  int{12} _cwc_4864 { , NN } ; 
  int _cwc_4863 { , NN } ; 
  int[1]{0} _cwc_4862 { , NN } ; 
  bool _cwc_4861 { , NN } ; 
  bool _cwc_4860 { , NN } ; 
  int _cwc_4859 { , NN } ; 
  bool[+] _cwc_4858 { , NN } ; 
  int _cwc_4857 { , NN } ; 
  bool _cwc_4856 { , NN } ; 
  int _cwc_4855 { , NN } ; 
  int _cwc_4854 { , NN } ; 
  bool _cwc_4853 { , NN } ; 
  int _cwc_4852 { , NN } ; 
  bool _cwc_4851 { , NN } ; 
  bool _cwc_4850 { , NN } ; 
  int{1} _cwc_4849 { , NN } ; 
  int _cwc_4848 { , NN } ; 
  int[1]{0} _cwc_4847 { , NN } ; 
  bool _cwc_4846 { , NN } ; 
  bool[13] _cwc_4845 { , NN } ; 
  bool _cwc_4844 { , NN } ; 
  bool _cwc_4843 { , NN } ; 
  int{4} _cwc_4842 { , NN } ; 
  int _cwc_4841 { , NN } ; 
  int[1]{0} _cwc_4840 { , NN } ; 
  bool _cwc_4839 { , NN } ; 
  bool[.] _cwc_4838 { , NN } ; 
  bool _cwc_4837 { , NN } ; 
  bool _cwc_4836 { , NN } ; 
  int{8} _cwc_4835 { , NN } ; 
  int _cwc_4834 { , NN } ; 
  int[1]{0} _cwc_4833 { , NN } ; 
  bool _cwc_4832 { , NN } ; 
  bool[.] _cwc_4831 { , NN } ; 
  bool _cwc_4830 { , NN } ; 
  bool _cwc_4829 { , NN } ; 
  int{12} _cwc_4828 { , NN } ; 
  int _cwc_4827 { , NN } ; 
  int[1]{0} _cwc_4826 { , NN } ; 
  bool _cwc_4825 { , NN } ; 
  bool[.] _cwc_4824 { , NN } ; 
  bool _cwc_4823 { , NN } ; 
  bool _cwc_4822 { , NN } ; 
  int{14} _cwc_4821 { , NN } ; 
  int _cwc_4820 { , NN } ; 
  int[1]{0} _cwc_4819 { , NN } ; 
  bool _cwc_4818 { , NN } ; 
  bool[.] _cwc_4817 { , NN } ; 
  int[+] _cwc_4816 { , NN } ; 
  bool[.] _cwc_4815 { , NN } ; 
  int _cwc_4814 { , NN } ; 
  bool[+] _cwc_4813 { , NN } ; 
  bool _cwc_4812 { , NN } ; 
  bool _cwc_4811 { , NN } ; 
  int{13} _cwc_4810 { , NN } ; 
  int _cwc_4809 { , NN } ; 
  int[1]{0} _cwc_4808 { , NN } ; 
  bool _cwc_4807 { , NN } ; 
  bool _cwc_4806 { , NN } ; 
  int _cwc_4805 { , NN } ; 
  bool[+] _cwc_4804 { , NN } ; 
  int _cwc_4803 { , NN } ; 
  bool _cwc_4802 { , NN } ; 
  int _cwc_4801 { , NN } ; 
  int _cwc_4800 { , NN } ; 
  bool _cwc_4799 { , NN } ; 
  int _cwc_4798 { , NN } ; 
  bool _cwc_4797 { , NN } ; 
  bool _cwc_4796 { , NN } ; 
  int{1} _cwc_4795 { , NN } ; 
  int _cwc_4794 { , NN } ; 
  int[1]{0} _cwc_4793 { , NN } ; 
  bool _cwc_4792 { , NN } ; 
  bool[14] _cwc_4791 { , NN } ; 
  bool _cwc_4790 { , NN } ; 
  bool _cwc_4789 { , NN } ; 
  int{4} _cwc_4788 { , NN } ; 
  int _cwc_4787 { , NN } ; 
  int[1]{0} _cwc_4786 { , NN } ; 
  bool _cwc_4785 { , NN } ; 
  bool[.] _cwc_4784 { , NN } ; 
  bool _cwc_4783 { , NN } ; 
  bool _cwc_4782 { , NN } ; 
  int{8} _cwc_4781 { , NN } ; 
  int _cwc_4780 { , NN } ; 
  int[1]{0} _cwc_4779 { , NN } ; 
  bool _cwc_4778 { , NN } ; 
  bool[.] _cwc_4777 { , NN } ; 
  bool _cwc_4776 { , NN } ; 
  bool _cwc_4775 { , NN } ; 
  int{12} _cwc_4774 { , NN } ; 
  int _cwc_4773 { , NN } ; 
  int[1]{0} _cwc_4772 { , NN } ; 
  bool _cwc_4771 { , NN } ; 
  bool[.] _cwc_4770 { , NN } ; 
  bool _cwc_4769 { , NN } ; 
  bool _cwc_4768 { , NN } ; 
  int{14} _cwc_4767 { , NN } ; 
  int _cwc_4766 { , NN } ; 
  int[1]{0} _cwc_4765 { , NN } ; 
  bool _cwc_4764 { , NN } ; 
  bool[.] _cwc_4763 { , NN } ; 
  int[+] _cwc_4762 { , NN } ; 
  bool[.] _cwc_4761 { , NN } ; 
  int _cwc_4760 { , NN } ; 
  bool[+] _cwc_4759 { , NN } ; 
  bool _cwc_4758 { , NN } ; 
  bool _cwc_4757 { , NN } ; 
  int{14} _cwc_4756 { , NN } ; 
  int _cwc_4755 { , NN } ; 
  int[1]{0} _cwc_4754 { , NN } ; 
  bool _cwc_4753 { , NN } ; 
  bool _cwc_4752 { , NN } ; 
  int _cwc_4751 { , NN } ; 
  bool[+] _cwc_4750 { , NN } ; 
  int _cwc_4749 { , NN } ; 
  bool _cwc_4748 { , NN } ; 
  int _cwc_4747 { , NN } ; 
  int _cwc_4746 { , NN } ; 
  bool _cwc_4745 { , NN } ; 
  int _cwc_4744 { , NN } ; 
  bool _cwc_4743 { , NN } ; 
  bool _cwc_4742 { , NN } ; 
  int{1} _cwc_4741 { , NN } ; 
  int _cwc_4740 { , NN } ; 
  int[1]{0} _cwc_4739 { , NN } ; 
  bool _cwc_4738 { , NN } ; 
  bool[.] _cwc_4737 { , NN } ; 
  bool _cwc_4736 { , NN } ; 
  bool _cwc_4735 { , NN } ; 
  int{4} _cwc_4734 { , NN } ; 
  int _cwc_4733 { , NN } ; 
  int[1]{0} _cwc_4732 { , NN } ; 
  bool _cwc_4731 { , NN } ; 
  bool[.] _cwc_4730 { , NN } ; 
  bool _cwc_4729 { , NN } ; 
  bool _cwc_4728 { , NN } ; 
  int{8} _cwc_4727 { , NN } ; 
  int _cwc_4726 { , NN } ; 
  int[1]{0} _cwc_4725 { , NN } ; 
  bool _cwc_4724 { , NN } ; 
  bool[.] _cwc_4723 { , NN } ; 
  bool _cwc_4722 { , NN } ; 
  bool _cwc_4721 { , NN } ; 
  int{12} _cwc_4720 { , NN } ; 
  int _cwc_4719 { , NN } ; 
  int[1]{0} _cwc_4718 { , NN } ; 
  bool _cwc_4717 { , NN } ; 
  bool[.] _cwc_4716 { , NN } ; 
  bool _cwc_4715 { , NN } ; 
  bool _cwc_4714 { , NN } ; 
  int{14} _cwc_4713 { , NN } ; 
  int _cwc_4712 { , NN } ; 
  int[1]{0} _cwc_4711 { , NN } ; 
  bool _cwc_4710 { , NN } ; 
  bool[28] _cwc_4709 { , NN } ; 
  int[+] _cwc_4708 { , NN } ; 
  bool[.] _cwc_4707 { , NN } ; 
  int _cwc_4706 { , NN } ; 
  bool[+] _cwc_4705 { , NN } ; 
  bool _cwc_4704 { , NN } ; 
  bool _cwc_4703 { , NN } ; 
  int{28} _cwc_4702 { , NN } ; 
  int _cwc_4701 { , NN } ; 
  int[1]{0} _cwc_4700 { , NN } ; 
  bool _cwc_4699 { , NN } ; 
  bool _cwc_4698 { , NN } ; 
  int _cwc_4697 { , NN } ; 
  bool[+] _cwc_4696 { , NN } ; 
  int _cwc_4695 { , NN } ; 
  bool _cwc_4694 { , NN } ; 
  int _cwc_4693 { , NN } ; 
  int _cwc_4692 { , NN } ; 
  bool _cwc_4691 { , NN } ; 
  int _cwc_4690 { , NN } ; 
  bool _cwc_4689 { , NN } ; 
  bool _cwc_4688 { , NN } ; 
  int{1} _cwc_4687 { , NN } ; 
  int _cwc_4686 { , NN } ; 
  int[1]{0} _cwc_4685 { , NN } ; 
  bool _cwc_4684 { , NN } ; 
  bool[.] _cwc_4683 { , NN } ; 
  bool _cwc_4682 { , NN } ; 
  bool _cwc_4681 { , NN } ; 
  int{4} _cwc_4680 { , NN } ; 
  int _cwc_4679 { , NN } ; 
  int[1]{0} _cwc_4678 { , NN } ; 
  bool _cwc_4677 { , NN } ; 
  bool[.] _cwc_4676 { , NN } ; 
  bool _cwc_4675 { , NN } ; 
  bool _cwc_4674 { , NN } ; 
  int{8} _cwc_4673 { , NN } ; 
  int _cwc_4672 { , NN } ; 
  int[1]{0} _cwc_4671 { , NN } ; 
  bool _cwc_4670 { , NN } ; 
  bool[.] _cwc_4669 { , NN } ; 
  bool _cwc_4668 { , NN } ; 
  bool _cwc_4667 { , NN } ; 
  int{12} _cwc_4666 { , NN } ; 
  int _cwc_4665 { , NN } ; 
  int[1]{0} _cwc_4664 { , NN } ; 
  bool _cwc_4663 { , NN } ; 
  bool[.] _cwc_4662 { , NN } ; 
  bool _cwc_4661 { , NN } ; 
  bool _cwc_4660 { , NN } ; 
  int{14} _cwc_4659 { , NN } ; 
  int _cwc_4658 { , NN } ; 
  int[1]{0} _cwc_4657 { , NN } ; 
  bool _cwc_4656 { , NN } ; 
  bool[42] _cwc_4655 { , NN } ; 
  int[+] _cwc_4654 { , NN } ; 
  bool[.] _cwc_4653 { , NN } ; 
  int _cwc_4652 { , NN } ; 
  bool[+] _cwc_4651 { , NN } ; 
  bool _cwc_4650 { , NN } ; 
  bool _cwc_4649 { , NN } ; 
  int{42} _cwc_4648 { , NN } ; 
  int _cwc_4647 { , NN } ; 
  int[1]{0} _cwc_4646 { , NN } ; 
  bool _cwc_4645 { , NN } ; 
  bool _cwc_4644 { , NN } ; 
  int _cwc_4643 { , NN } ; 
  bool[+] _cwc_4642 { , NN } ; 
  int _cwc_4641 { , NN } ; 
  bool _cwc_4640 { , NN } ; 
  int _cwc_4639 { , NN } ; 
  int _cwc_4638 { , NN } ; 
  bool _cwc_4637 { , NN } ; 
  int _cwc_4636 { , NN } ; 
  bool _cwc_4635 { , NN } ; 
  bool _cwc_4634 { , NN } ; 
  int{1} _cwc_4633 { , NN } ; 
  int _cwc_4632 { , NN } ; 
  int[1]{0} _cwc_4631 { , NN } ; 
  bool _cwc_4630 { , NN } ; 
  bool[.] _cwc_4629 { , NN } ; 
  bool _cwc_4628 { , NN } ; 
  bool _cwc_4627 { , NN } ; 
  int{4} _cwc_4626 { , NN } ; 
  int _cwc_4625 { , NN } ; 
  int[1]{0} _cwc_4624 { , NN } ; 
  bool _cwc_4623 { , NN } ; 
  bool[.] _cwc_4622 { , NN } ; 
  bool _cwc_4621 { , NN } ; 
  bool _cwc_4620 { , NN } ; 
  int{8} _cwc_4619 { , NN } ; 
  int _cwc_4618 { , NN } ; 
  int[1]{0} _cwc_4617 { , NN } ; 
  bool _cwc_4616 { , NN } ; 
  bool[.] _cwc_4615 { , NN } ; 
  bool _cwc_4614 { , NN } ; 
  bool _cwc_4613 { , NN } ; 
  int{12} _cwc_4612 { , NN } ; 
  int _cwc_4611 { , NN } ; 
  int[1]{0} _cwc_4610 { , NN } ; 
  bool _cwc_4609 { , NN } ; 
  bool[.] _cwc_4608 { , NN } ; 
  bool _cwc_4607 { , NN } ; 
  bool _cwc_4606 { , NN } ; 
  int{14} _cwc_4605 { , NN } ; 
  int _cwc_4604 { , NN } ; 
  int[1]{0} _cwc_4603 { , NN } ; 
  bool _cwc_4602 { , NN } ; 
  bool[56] _cwc_4601 { , NN } ; 
  int[+] _cwc_4600 { , NN } ; 
  bool[.] _cwc_4599 { , NN } ; 
  int _cwc_4598 { , NN } ; 
  bool[+] _cwc_4597 { , NN } ; 
  bool _cwc_4596 { , NN } ; 
  bool _cwc_4595 { , NN } ; 
  int{56} _cwc_4594 { , NN } ; 
  int _cwc_4593 { , NN } ; 
  int[1]{0} _cwc_4592 { , NN } ; 
  bool _cwc_4591 { , NN } ; 
  bool _cwc_4590 { , NN } ; 
  int _cwc_4589 { , NN } ; 
  bool[+] _cwc_4588 { , NN } ; 
  int _cwc_4587 { , NN } ; 
  bool _cwc_4586 { , NN } ; 
  int _cwc_4585 { , NN } ; 
  int _cwc_4584 { , NN } ; 
  bool _cwc_4583 { , NN } ; 
  int _cwc_4582 { , NN } ; 
  bool _cwc_4581 { , NN } ; 
  bool _cwc_4580 { , NN } ; 
  int{1} _cwc_4579 { , NN } ; 
  int _cwc_4578 { , NN } ; 
  int[1]{0} _cwc_4577 { , NN } ; 
  bool _cwc_4576 { , NN } ; 
  bool[.] _cwc_4575 { , NN } ; 
  bool _cwc_4574 { , NN } ; 
  bool _cwc_4573 { , NN } ; 
  int{4} _cwc_4572 { , NN } ; 
  int _cwc_4571 { , NN } ; 
  int[1]{0} _cwc_4570 { , NN } ; 
  bool _cwc_4569 { , NN } ; 
  bool[.] _cwc_4568 { , NN } ; 
  bool _cwc_4567 { , NN } ; 
  bool _cwc_4566 { , NN } ; 
  int{8} _cwc_4565 { , NN } ; 
  int _cwc_4564 { , NN } ; 
  int[1]{0} _cwc_4563 { , NN } ; 
  bool _cwc_4562 { , NN } ; 
  bool[.] _cwc_4561 { , NN } ; 
  bool _cwc_4560 { , NN } ; 
  bool _cwc_4559 { , NN } ; 
  int{12} _cwc_4558 { , NN } ; 
  int _cwc_4557 { , NN } ; 
  int[1]{0} _cwc_4556 { , NN } ; 
  bool _cwc_4555 { , NN } ; 
  bool[.] _cwc_4554 { , NN } ; 
  bool _cwc_4553 { , NN } ; 
  bool _cwc_4552 { , NN } ; 
  int{14} _cwc_4551 { , NN } ; 
  int _cwc_4550 { , NN } ; 
  int[1]{0} _cwc_4549 { , NN } ; 
  bool _cwc_4548 { , NN } ; 
  bool[70] _cwc_4547 { , NN } ; 
  int[+] _cwc_4546 { , NN } ; 
  bool[.] _cwc_4545 { , NN } ; 
  int _cwc_4544 { , NN } ; 
  bool[+] _cwc_4543 { , NN } ; 
  bool _cwc_4542 { , NN } ; 
  bool _cwc_4541 { , NN } ; 
  int{70} _cwc_4540 { , NN } ; 
  int _cwc_4539 { , NN } ; 
  int[1]{0} _cwc_4538 { , NN } ; 
  bool _cwc_4537 { , NN } ; 
  bool _cwc_4536 { , NN } ; 
  int _cwc_4535 { , NN } ; 
  bool[+] _cwc_4534 { , NN } ; 
  int _cwc_4533 { , NN } ; 
  bool _cwc_4532 { , NN } ; 
  int _cwc_4531 { , NN } ; 
  int _cwc_4530 { , NN } ; 
  bool _cwc_4529 { , NN } ; 
  int _cwc_4528 { , NN } ; 
  bool _cwc_4527 { , NN } ; 
  bool _cwc_4526 { , NN } ; 
  int{1} _cwc_4525 { , NN } ; 
  int _cwc_4524 { , NN } ; 
  int[1]{0} _cwc_4523 { , NN } ; 
  bool _cwc_4522 { , NN } ; 
  bool[.] _cwc_4521 { , NN } ; 
  bool _cwc_4520 { , NN } ; 
  bool _cwc_4519 { , NN } ; 
  int{4} _cwc_4518 { , NN } ; 
  int _cwc_4517 { , NN } ; 
  int[1]{0} _cwc_4516 { , NN } ; 
  bool _cwc_4515 { , NN } ; 
  bool[.] _cwc_4514 { , NN } ; 
  bool _cwc_4513 { , NN } ; 
  bool _cwc_4512 { , NN } ; 
  int{8} _cwc_4511 { , NN } ; 
  int _cwc_4510 { , NN } ; 
  int[1]{0} _cwc_4509 { , NN } ; 
  bool _cwc_4508 { , NN } ; 
  bool[.] _cwc_4507 { , NN } ; 
  bool _cwc_4506 { , NN } ; 
  bool _cwc_4505 { , NN } ; 
  int{12} _cwc_4504 { , NN } ; 
  int _cwc_4503 { , NN } ; 
  int[1]{0} _cwc_4502 { , NN } ; 
  bool _cwc_4501 { , NN } ; 
  bool[.] _cwc_4500 { , NN } ; 
  bool _cwc_4499 { , NN } ; 
  bool _cwc_4498 { , NN } ; 
  int{14} _cwc_4497 { , NN } ; 
  int _cwc_4496 { , NN } ; 
  int[1]{0} _cwc_4495 { , NN } ; 
  bool _cwc_4494 { , NN } ; 
  bool[84] _cwc_4493 { , NN } ; 
  int[+] _cwc_4492 { , NN } ; 
  bool[.] _cwc_4491 { , NN } ; 
  int _cwc_4490 { , NN } ; 
  bool[+] _cwc_4489 { , NN } ; 
  bool _cwc_4488 { , NN } ; 
  bool _cwc_4487 { , NN } ; 
  int{84} _cwc_4486 { , NN } ; 
  int _cwc_4485 { , NN } ; 
  int[1]{0} _cwc_4484 { , NN } ; 
  bool _cwc_4483 { , NN } ; 
  bool _cwc_4482 { , NN } ; 
  int _cwc_4481 { , NN } ; 
  bool[+] _cwc_4480 { , NN } ; 
  int _cwc_4479 { , NN } ; 
  bool _cwc_4478 { , NN } ; 
  int _cwc_4477 { , NN } ; 
  int _cwc_4476 { , NN } ; 
  bool _cwc_4475 { , NN } ; 
  int _cwc_4474 { , NN } ; 
  bool _cwc_4473 { , NN } ; 
  bool _cwc_4472 { , NN } ; 
  int{1} _cwc_4471 { , NN } ; 
  int _cwc_4470 { , NN } ; 
  int[1]{0} _cwc_4469 { , NN } ; 
  bool _cwc_4468 { , NN } ; 
  bool[.] _cwc_4467 { , NN } ; 
  bool _cwc_4466 { , NN } ; 
  bool _cwc_4465 { , NN } ; 
  int{4} _cwc_4464 { , NN } ; 
  int _cwc_4463 { , NN } ; 
  int[1]{0} _cwc_4462 { , NN } ; 
  bool _cwc_4461 { , NN } ; 
  bool[.] _cwc_4460 { , NN } ; 
  bool _cwc_4459 { , NN } ; 
  bool _cwc_4458 { , NN } ; 
  int{8} _cwc_4457 { , NN } ; 
  int _cwc_4456 { , NN } ; 
  int[1]{0} _cwc_4455 { , NN } ; 
  bool _cwc_4454 { , NN } ; 
  bool[.] _cwc_4453 { , NN } ; 
  bool _cwc_4452 { , NN } ; 
  bool _cwc_4451 { , NN } ; 
  int{12} _cwc_4450 { , NN } ; 
  int _cwc_4449 { , NN } ; 
  int[1]{0} _cwc_4448 { , NN } ; 
  bool _cwc_4447 { , NN } ; 
  bool[.] _cwc_4446 { , NN } ; 
  bool _cwc_4445 { , NN } ; 
  bool _cwc_4444 { , NN } ; 
  int{14} _cwc_4443 { , NN } ; 
  int _cwc_4442 { , NN } ; 
  int[1]{0} _cwc_4441 { , NN } ; 
  bool _cwc_4440 { , NN } ; 
  bool[98] _cwc_4439 { , NN } ; 
  int[+] _cwc_4438 { , NN } ; 
  bool[.] _cwc_4437 { , NN } ; 
  int _cwc_4436 { , NN } ; 
  bool[+] _cwc_4435 { , NN } ; 
  bool _cwc_4434 { , NN } ; 
  bool _cwc_4433 { , NN } ; 
  int{98} _cwc_4432 { , NN } ; 
  int _cwc_4431 { , NN } ; 
  int[1]{0} _cwc_4430 { , NN } ; 
  bool _cwc_4429 { , NN } ; 
  bool _cwc_4428 { , NN } ; 
  int _cwc_4427 { , NN } ; 
  bool[+] _cwc_4426 { , NN } ; 
  int _cwc_4425 { , NN } ; 
  bool _cwc_4424 { , NN } ; 
  int _cwc_4423 { , NN } ; 
  int _cwc_4422 { , NN } ; 
  bool _cwc_4421 { , NN } ; 
  int _cwc_4420 { , NN } ; 
  bool _cwc_4419 { , NN } ; 
  bool _cwc_4418 { , NN } ; 
  int{1} _cwc_4417 { , NN } ; 
  int _cwc_4416 { , NN } ; 
  int[1]{0} _cwc_4415 { , NN } ; 
  bool _cwc_4414 { , NN } ; 
  bool[.] _cwc_4413 { , NN } ; 
  bool _cwc_4412 { , NN } ; 
  bool _cwc_4411 { , NN } ; 
  int{4} _cwc_4410 { , NN } ; 
  int _cwc_4409 { , NN } ; 
  int[1]{0} _cwc_4408 { , NN } ; 
  bool _cwc_4407 { , NN } ; 
  bool[.] _cwc_4406 { , NN } ; 
  bool _cwc_4405 { , NN } ; 
  bool _cwc_4404 { , NN } ; 
  int{8} _cwc_4403 { , NN } ; 
  int _cwc_4402 { , NN } ; 
  int[1]{0} _cwc_4401 { , NN } ; 
  bool _cwc_4400 { , NN } ; 
  bool[.] _cwc_4399 { , NN } ; 
  bool _cwc_4398 { , NN } ; 
  bool _cwc_4397 { , NN } ; 
  int{12} _cwc_4396 { , NN } ; 
  int _cwc_4395 { , NN } ; 
  int[1]{0} _cwc_4394 { , NN } ; 
  bool _cwc_4393 { , NN } ; 
  bool[.] _cwc_4392 { , NN } ; 
  bool _cwc_4391 { , NN } ; 
  bool _cwc_4390 { , NN } ; 
  int{14} _cwc_4389 { , NN } ; 
  int _cwc_4388 { , NN } ; 
  int[1]{0} _cwc_4387 { , NN } ; 
  bool _cwc_4386 { , NN } ; 
  bool[112] _cwc_4385 { , NN } ; 
  int[+] _cwc_4384 { , NN } ; 
  bool[.] _cwc_4383 { , NN } ; 
  int _cwc_4382 { , NN } ; 
  bool[+] _cwc_4381 { , NN } ; 
  bool _cwc_4380 { , NN } ; 
  bool _cwc_4379 { , NN } ; 
  int{112} _cwc_4378 { , NN } ; 
  int _cwc_4377 { , NN } ; 
  int[1]{0} _cwc_4376 { , NN } ; 
  bool _cwc_4375 { , NN } ; 
  bool _cwc_4374 { , NN } ; 
  int _cwc_4373 { , NN } ; 
  bool[+] _cwc_4372 { , NN } ; 
  int _cwc_4371 { , NN } ; 
  bool _cwc_4370 { , NN } ; 
  int _cwc_4369 { , NN } ; 
  int _cwc_4368 { , NN } ; 
  bool _cwc_4367 { , NN } ; 
  int _cwc_4366 { , NN } ; 
  bool _cwc_4365 { , NN } ; 
  bool _cwc_4364 { , NN } ; 
  int{1} _cwc_4363 { , NN } ; 
  int _cwc_4362 { , NN } ; 
  int[1]{0} _cwc_4361 { , NN } ; 
  bool _cwc_4360 { , NN } ; 
  bool[.] _cwc_4359 { , NN } ; 
  bool _cwc_4358 { , NN } ; 
  bool _cwc_4357 { , NN } ; 
  int{4} _cwc_4356 { , NN } ; 
  int _cwc_4355 { , NN } ; 
  int[1]{0} _cwc_4354 { , NN } ; 
  bool _cwc_4353 { , NN } ; 
  bool[.] _cwc_4352 { , NN } ; 
  bool _cwc_4351 { , NN } ; 
  bool _cwc_4350 { , NN } ; 
  int{8} _cwc_4349 { , NN } ; 
  int _cwc_4348 { , NN } ; 
  int[1]{0} _cwc_4347 { , NN } ; 
  bool _cwc_4346 { , NN } ; 
  bool[.] _cwc_4345 { , NN } ; 
  bool _cwc_4344 { , NN } ; 
  bool _cwc_4343 { , NN } ; 
  int{12} _cwc_4342 { , NN } ; 
  int _cwc_4341 { , NN } ; 
  int[1]{0} _cwc_4340 { , NN } ; 
  bool _cwc_4339 { , NN } ; 
  bool[.] _cwc_4338 { , NN } ; 
  bool _cwc_4337 { , NN } ; 
  bool _cwc_4336 { , NN } ; 
  int{14} _cwc_4335 { , NN } ; 
  int _cwc_4334 { , NN } ; 
  int[1]{0} _cwc_4333 { , NN } ; 
  bool _cwc_4332 { , NN } ; 
  bool[126] _cwc_4331 { , NN } ; 
  int[+] _cwc_4330 { , NN } ; 
  bool[.] _cwc_4329 { , NN } ; 
  int _cwc_4328 { , NN } ; 
  bool[+] _cwc_4327 { , NN } ; 
  int[+] _cwc_4326 { , NN } ; 
  bool _cwc_4325 { , NN } ; 
  int _cwc_4324 { , NN } ; 
  bool[+] _cwc_4323 { , NN } ; 
  int _cwc_4322 { , NN } ; 
  bool _cwc_4321 { , NN } ; 
  int _cwc_4320 { , NN } ; 
  int _cwc_4319 { , NN } ; 
  bool _cwc_4318 { , NN } ; 
  int _cwc_4317 { , NN } ; 
  bool _cwc_4316 { , NN } ; 
  bool _cwc_4315 { , NN } ; 
  int{1} _cwc_4314 { , NN } ; 
  int _cwc_4313 { , NN } ; 
  int[1]{0} _cwc_4312 { , NN } ; 
  bool _cwc_4311 { , NN } ; 
  bool[.] _cwc_4310 { , NN } ; 
  bool _cwc_4309 { , NN } ; 
  bool _cwc_4308 { , NN } ; 
  int{4} _cwc_4307 { , NN } ; 
  int _cwc_4306 { , NN } ; 
  int[1]{0} _cwc_4305 { , NN } ; 
  bool _cwc_4304 { , NN } ; 
  bool[.] _cwc_4303 { , NN } ; 
  bool _cwc_4302 { , NN } ; 
  bool _cwc_4301 { , NN } ; 
  int{8} _cwc_4300 { , NN } ; 
  int _cwc_4299 { , NN } ; 
  int[1]{0} _cwc_4298 { , NN } ; 
  bool _cwc_4297 { , NN } ; 
  bool[.] _cwc_4296 { , NN } ; 
  bool _cwc_4295 { , NN } ; 
  bool _cwc_4294 { , NN } ; 
  int{12} _cwc_4293 { , NN } ; 
  int _cwc_4292 { , NN } ; 
  int[1]{0} _cwc_4291 { , NN } ; 
  bool _cwc_4290 { , NN } ; 
  bool[.] _cwc_4289 { , NN } ; 
  bool _cwc_4288 { , NN } ; 
  bool _cwc_4287 { , NN } ; 
  int{14} _cwc_4286 { , NN } ; 
  int _cwc_4285 { , NN } ; 
  int[1]{0} _cwc_4284 { , NN } ; 
  bool _cwc_4283 { , NN } ; 
  bool[.] _cwc_4282 { , NN } ; 
  int[+] _cwc_4281 { , NN } ; 
  bool[.] _cwc_4280 { , NN } ; 
  int _cwc_4279 { , NN } ; 
  bool[+] _cwc_4278 { , NN } ; 
  int _cwc_4277 { , NN } ; 
  bool _cwc_4276 { , NN } ; 
  int _cwc_4275 { , NN } ; 
  bool[+] _cwc_4274 { , NN } ; 
  int _cwc_4273 { , NN } ; 
  bool _cwc_4272 { , NN } ; 
  int _cwc_4271 { , NN } ; 
  int _cwc_4270 { , NN } ; 
  bool _cwc_4269 { , NN } ; 
  int _cwc_4268 { , NN } ; 
  bool _cwc_4267 { , NN } ; 
  bool _cwc_4266 { , NN } ; 
  int{1} _cwc_4265 { , NN } ; 
  int _cwc_4264 { , NN } ; 
  int[1]{0} _cwc_4263 { , NN } ; 
  bool _cwc_4262 { , NN } ; 
  bool[+] _cwc_4261 { , NN } ; 
  bool _cwc_4260 { , NN } ; 
  bool _cwc_4259 { , NN } ; 
  int{4} _cwc_4258 { , NN } ; 
  int _cwc_4257 { , NN } ; 
  int[1]{0} _cwc_4256 { , NN } ; 
  bool _cwc_4255 { , NN } ; 
  bool[+] _cwc_4254 { , NN } ; 
  bool _cwc_4253 { , NN } ; 
  bool _cwc_4252 { , NN } ; 
  int{8} _cwc_4251 { , NN } ; 
  int _cwc_4250 { , NN } ; 
  int[1]{0} _cwc_4249 { , NN } ; 
  bool _cwc_4248 { , NN } ; 
  bool[+] _cwc_4247 { , NN } ; 
  bool _cwc_4246 { , NN } ; 
  bool _cwc_4245 { , NN } ; 
  int{12} _cwc_4244 { , NN } ; 
  int _cwc_4243 { , NN } ; 
  int[1]{0} _cwc_4242 { , NN } ; 
  bool _cwc_4241 { , NN } ; 
  bool[+] _cwc_4240 { , NN } ; 
  bool _cwc_4239 { , NN } ; 
  bool _cwc_4238 { , NN } ; 
  int{14} _cwc_4237 { , NN } ; 
  int _cwc_4236 { , NN } ; 
  int[1]{0} _cwc_4235 { , NN } ; 
  bool _cwc_4234 { , NN } ; 
  bool[+] _cwc_4233 { , NN } ; 
  int[+] _cwc_4232 { , NN } ; 
  bool[+] _cwc_4231 { , NN } ; 
  int _cwc_4230 { , NN } ; 
  bool[+] _cwc_4229 { , NN } ; 

  _cwc_5403 = _dim_A_( arr_a); 
  _cwc_5412 = 0; 
  _cwc_5413 = _eq_SxS_( _cwc_5403, _cwc_5412); 
  if (_cwc_5413) 
  { 
    _cwc_5408 = _dim_A_( arr_b); 
    _cwc_5410 = 0; 
    _cwc_5411 = _eq_SxS_( _cwc_5408, _cwc_5410); 
    if (_cwc_5411) 
    { 
      _cwc_5409 = ( arr_a ArrayTransform::++arr_b) ; 
      _cwc_4228 = _cwc_5409; 
    }
    else
    { 
      _cwc_5405 = _dim_A_( arr_b); 
      _cwc_5406 = 0; 
      _cwc_5407 = _gt_SxS_( _cwc_5405, _cwc_5406); 
      if (_cwc_5407) 
      { 
        _cwc_5404 = ( arr_a ArrayTransform::++arr_b) ; 
        _cwc_4228 = _cwc_5404; 
      }
      else
      { 
        _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
      }
    }
  }
  else
  { 
    _cwc_5400 = _dim_A_( arr_a); 
    _cwc_5401 = 0; 
    _cwc_5402 = _gt_SxS_( _cwc_5400, _cwc_5401); 
    if (_cwc_5402) 
    { 
      _cwc_4277 = _dim_A_( arr_a); 
      _cwc_5398 = 1; 
      _cwc_5399 = _eq_SxS_( _cwc_4277, _cwc_5398); 
      if (_cwc_5399) 
      { 
        _cwc_4326 = _shape_A_( arr_a); 
        _cwc_5392 = true; 
        _cwc_5395 = 1; 
        _cwc_5393 = [ 0 ]; 
        _cwc_5394 = _sel_VxA_( _cwc_5393, _cwc_4326); 
        _cwc_5396 = _eq_SxS_( _cwc_5394, _cwc_5395); 
        _cwc_5397 = _and_SxS_( _cwc_5396, _cwc_5392); 
        if (_cwc_5397) 
        { 
          _cwc_5388 = _dim_A_( arr_b); 
          _cwc_5390 = 0; 
          _cwc_5391 = _eq_SxS_( _cwc_5388, _cwc_5390); 
          if (_cwc_5391) 
          { 
            _cwc_5389 = ( arr_a ArrayTransform::++arr_b) ; 
            _cwc_4228 = _cwc_5389; 
          }
          else
          { 
            _cwc_5385 = _dim_A_( arr_b); 
            _cwc_5386 = 0; 
            _cwc_5387 = _gt_SxS_( _cwc_5385, _cwc_5386); 
            if (_cwc_5387) 
            { 
              _cwc_5366 = _dim_A_( arr_b); 
              _cwc_5383 = 1; 
              _cwc_5384 = _eq_SxS_( _cwc_5366, _cwc_5383); 
              if (_cwc_5384) 
              { 
                _cwc_5368 = _shape_A_( arr_b); 
                _cwc_5377 = true; 
                _cwc_5380 = 1; 
                _cwc_5378 = [ 0 ]; 
                _cwc_5379 = _sel_VxA_( _cwc_5378, _cwc_5368); 
                _cwc_5381 = _eq_SxS_( _cwc_5379, _cwc_5380); 
                _cwc_5382 = _and_SxS_( _cwc_5381, _cwc_5377); 
                if (_cwc_5382) 
                { 
                  _cwc_5376 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                  _cwc_4228 = _cwc_5376; 
                }
                else
                { 
                  _cwc_5370 = true; 
                  _cwc_5373 = 14; 
                  _cwc_5371 = [ 0 ]; 
                  _cwc_5372 = _sel_VxA_( _cwc_5371, _cwc_5368); 
                  _cwc_5374 = _eq_SxS_( _cwc_5372, _cwc_5373); 
                  _cwc_5375 = _and_SxS_( _cwc_5374, _cwc_5370); 
                  if (_cwc_5375) 
                  { 
                    _cwc_5369 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                    _cwc_4228 = _cwc_5369; 
                  }
                  else
                  { 
                    _cwc_5367 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                    _cwc_4228 = _cwc_5367; 
                  }
                }
              }
              else
              { 
                _cwc_5365 = ( arr_a ArrayTransform::++arr_b) ; 
                _cwc_4228 = _cwc_5365; 
              }
            }
            else
            { 
              _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
            }
          }
        }
        else
        { 
          _cwc_5359 = true; 
          _cwc_5362 = 2; 
          _cwc_5360 = [ 0 ]; 
          _cwc_5361 = _sel_VxA_( _cwc_5360, _cwc_4326); 
          _cwc_5363 = _eq_SxS_( _cwc_5361, _cwc_5362); 
          _cwc_5364 = _and_SxS_( _cwc_5363, _cwc_5359); 
          if (_cwc_5364) 
          { 
            _cwc_5355 = _dim_A_( arr_b); 
            _cwc_5357 = 0; 
            _cwc_5358 = _eq_SxS_( _cwc_5355, _cwc_5357); 
            if (_cwc_5358) 
            { 
              _cwc_5356 = ( arr_a ArrayTransform::++arr_b) ; 
              _cwc_4228 = _cwc_5356; 
            }
            else
            { 
              _cwc_5352 = _dim_A_( arr_b); 
              _cwc_5353 = 0; 
              _cwc_5354 = _gt_SxS_( _cwc_5352, _cwc_5353); 
              if (_cwc_5354) 
              { 
                _cwc_5333 = _dim_A_( arr_b); 
                _cwc_5350 = 1; 
                _cwc_5351 = _eq_SxS_( _cwc_5333, _cwc_5350); 
                if (_cwc_5351) 
                { 
                  _cwc_5335 = _shape_A_( arr_b); 
                  _cwc_5344 = true; 
                  _cwc_5347 = 1; 
                  _cwc_5345 = [ 0 ]; 
                  _cwc_5346 = _sel_VxA_( _cwc_5345, _cwc_5335); 
                  _cwc_5348 = _eq_SxS_( _cwc_5346, _cwc_5347); 
                  _cwc_5349 = _and_SxS_( _cwc_5348, _cwc_5344); 
                  if (_cwc_5349) 
                  { 
                    _cwc_5343 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                    _cwc_4228 = _cwc_5343; 
                  }
                  else
                  { 
                    _cwc_5337 = true; 
                    _cwc_5340 = 14; 
                    _cwc_5338 = [ 0 ]; 
                    _cwc_5339 = _sel_VxA_( _cwc_5338, _cwc_5335); 
                    _cwc_5341 = _eq_SxS_( _cwc_5339, _cwc_5340); 
                    _cwc_5342 = _and_SxS_( _cwc_5341, _cwc_5337); 
                    if (_cwc_5342) 
                    { 
                      _cwc_5336 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                      _cwc_4228 = _cwc_5336; 
                    }
                    else
                    { 
                      _cwc_5334 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                      _cwc_4228 = _cwc_5334; 
                    }
                  }
                }
                else
                { 
                  _cwc_5332 = ( arr_a ArrayTransform::++arr_b) ; 
                  _cwc_4228 = _cwc_5332; 
                }
              }
              else
              { 
                _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
              }
            }
          }
          else
          { 
            _cwc_5326 = true; 
            _cwc_5329 = 3; 
            _cwc_5327 = [ 0 ]; 
            _cwc_5328 = _sel_VxA_( _cwc_5327, _cwc_4326); 
            _cwc_5330 = _eq_SxS_( _cwc_5328, _cwc_5329); 
            _cwc_5331 = _and_SxS_( _cwc_5330, _cwc_5326); 
            if (_cwc_5331) 
            { 
              _cwc_5322 = _dim_A_( arr_b); 
              _cwc_5324 = 0; 
              _cwc_5325 = _eq_SxS_( _cwc_5322, _cwc_5324); 
              if (_cwc_5325) 
              { 
                _cwc_5323 = ( arr_a ArrayTransform::++arr_b) ; 
                _cwc_4228 = _cwc_5323; 
              }
              else
              { 
                _cwc_5319 = _dim_A_( arr_b); 
                _cwc_5320 = 0; 
                _cwc_5321 = _gt_SxS_( _cwc_5319, _cwc_5320); 
                if (_cwc_5321) 
                { 
                  _cwc_5300 = _dim_A_( arr_b); 
                  _cwc_5317 = 1; 
                  _cwc_5318 = _eq_SxS_( _cwc_5300, _cwc_5317); 
                  if (_cwc_5318) 
                  { 
                    _cwc_5302 = _shape_A_( arr_b); 
                    _cwc_5311 = true; 
                    _cwc_5314 = 1; 
                    _cwc_5312 = [ 0 ]; 
                    _cwc_5313 = _sel_VxA_( _cwc_5312, _cwc_5302); 
                    _cwc_5315 = _eq_SxS_( _cwc_5313, _cwc_5314); 
                    _cwc_5316 = _and_SxS_( _cwc_5315, _cwc_5311); 
                    if (_cwc_5316) 
                    { 
                      _cwc_5310 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                      _cwc_4228 = _cwc_5310; 
                    }
                    else
                    { 
                      _cwc_5304 = true; 
                      _cwc_5307 = 14; 
                      _cwc_5305 = [ 0 ]; 
                      _cwc_5306 = _sel_VxA_( _cwc_5305, _cwc_5302); 
                      _cwc_5308 = _eq_SxS_( _cwc_5306, _cwc_5307); 
                      _cwc_5309 = _and_SxS_( _cwc_5308, _cwc_5304); 
                      if (_cwc_5309) 
                      { 
                        _cwc_5303 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                        _cwc_4228 = _cwc_5303; 
                      }
                      else
                      { 
                        _cwc_5301 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                        _cwc_4228 = _cwc_5301; 
                      }
                    }
                  }
                  else
                  { 
                    _cwc_5299 = ( arr_a ArrayTransform::++arr_b) ; 
                    _cwc_4228 = _cwc_5299; 
                  }
                }
                else
                { 
                  _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                }
              }
            }
            else
            { 
              _cwc_5293 = true; 
              _cwc_5296 = 4; 
              _cwc_5294 = [ 0 ]; 
              _cwc_5295 = _sel_VxA_( _cwc_5294, _cwc_4326); 
              _cwc_5297 = _eq_SxS_( _cwc_5295, _cwc_5296); 
              _cwc_5298 = _and_SxS_( _cwc_5297, _cwc_5293); 
              if (_cwc_5298) 
              { 
                _cwc_5289 = _dim_A_( arr_b); 
                _cwc_5291 = 0; 
                _cwc_5292 = _eq_SxS_( _cwc_5289, _cwc_5291); 
                if (_cwc_5292) 
                { 
                  _cwc_5290 = ( arr_a ArrayTransform::++arr_b) ; 
                  _cwc_4228 = _cwc_5290; 
                }
                else
                { 
                  _cwc_5286 = _dim_A_( arr_b); 
                  _cwc_5287 = 0; 
                  _cwc_5288 = _gt_SxS_( _cwc_5286, _cwc_5287); 
                  if (_cwc_5288) 
                  { 
                    _cwc_5246 = _dim_A_( arr_b); 
                    _cwc_5284 = 1; 
                    _cwc_5285 = _eq_SxS_( _cwc_5246, _cwc_5284); 
                    if (_cwc_5285) 
                    { 
                      _cwc_5248 = _shape_A_( arr_b); 
                      _cwc_5278 = true; 
                      _cwc_5281 = 1; 
                      _cwc_5279 = [ 0 ]; 
                      _cwc_5280 = _sel_VxA_( _cwc_5279, _cwc_5248); 
                      _cwc_5282 = _eq_SxS_( _cwc_5280, _cwc_5281); 
                      _cwc_5283 = _and_SxS_( _cwc_5282, _cwc_5278); 
                      if (_cwc_5283) 
                      { 
                        _cwc_5277 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                        _cwc_4228 = _cwc_5277; 
                      }
                      else
                      { 
                        _cwc_5271 = true; 
                        _cwc_5274 = 4; 
                        _cwc_5272 = [ 0 ]; 
                        _cwc_5273 = _sel_VxA_( _cwc_5272, _cwc_5248); 
                        _cwc_5275 = _eq_SxS_( _cwc_5273, _cwc_5274); 
                        _cwc_5276 = _and_SxS_( _cwc_5275, _cwc_5271); 
                        if (_cwc_5276) 
                        { 
                          _cwc_5270 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                          _cwc_4228 = _cwc_5270; 
                        }
                        else
                        { 
                          _cwc_5264 = true; 
                          _cwc_5267 = 8; 
                          _cwc_5265 = [ 0 ]; 
                          _cwc_5266 = _sel_VxA_( _cwc_5265, _cwc_5248); 
                          _cwc_5268 = _eq_SxS_( _cwc_5266, _cwc_5267); 
                          _cwc_5269 = _and_SxS_( _cwc_5268, _cwc_5264); 
                          if (_cwc_5269) 
                          { 
                            _cwc_5263 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                            _cwc_4228 = _cwc_5263; 
                          }
                          else
                          { 
                            _cwc_5257 = true; 
                            _cwc_5260 = 12; 
                            _cwc_5258 = [ 0 ]; 
                            _cwc_5259 = _sel_VxA_( _cwc_5258, _cwc_5248); 
                            _cwc_5261 = _eq_SxS_( _cwc_5259, _cwc_5260); 
                            _cwc_5262 = _and_SxS_( _cwc_5261, _cwc_5257); 
                            if (_cwc_5262) 
                            { 
                              _cwc_5256 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                              _cwc_4228 = _cwc_5256; 
                            }
                            else
                            { 
                              _cwc_5250 = true; 
                              _cwc_5253 = 14; 
                              _cwc_5251 = [ 0 ]; 
                              _cwc_5252 = _sel_VxA_( _cwc_5251, _cwc_5248); 
                              _cwc_5254 = _eq_SxS_( _cwc_5252, _cwc_5253); 
                              _cwc_5255 = _and_SxS_( _cwc_5254, _cwc_5250); 
                              if (_cwc_5255) 
                              { 
                                _cwc_5249 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                _cwc_4228 = _cwc_5249; 
                              }
                              else
                              { 
                                _cwc_5247 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                _cwc_4228 = _cwc_5247; 
                              }
                            }
                          }
                        }
                      }
                    }
                    else
                    { 
                      _cwc_5245 = ( arr_a ArrayTransform::++arr_b) ; 
                      _cwc_4228 = _cwc_5245; 
                    }
                  }
                  else
                  { 
                    _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                  }
                }
              }
              else
              { 
                _cwc_5239 = true; 
                _cwc_5242 = 5; 
                _cwc_5240 = [ 0 ]; 
                _cwc_5241 = _sel_VxA_( _cwc_5240, _cwc_4326); 
                _cwc_5243 = _eq_SxS_( _cwc_5241, _cwc_5242); 
                _cwc_5244 = _and_SxS_( _cwc_5243, _cwc_5239); 
                if (_cwc_5244) 
                { 
                  _cwc_5235 = _dim_A_( arr_b); 
                  _cwc_5237 = 0; 
                  _cwc_5238 = _eq_SxS_( _cwc_5235, _cwc_5237); 
                  if (_cwc_5238) 
                  { 
                    _cwc_5236 = ( arr_a ArrayTransform::++arr_b) ; 
                    _cwc_4228 = _cwc_5236; 
                  }
                  else
                  { 
                    _cwc_5232 = _dim_A_( arr_b); 
                    _cwc_5233 = 0; 
                    _cwc_5234 = _gt_SxS_( _cwc_5232, _cwc_5233); 
                    if (_cwc_5234) 
                    { 
                      _cwc_5192 = _dim_A_( arr_b); 
                      _cwc_5230 = 1; 
                      _cwc_5231 = _eq_SxS_( _cwc_5192, _cwc_5230); 
                      if (_cwc_5231) 
                      { 
                        _cwc_5194 = _shape_A_( arr_b); 
                        _cwc_5224 = true; 
                        _cwc_5227 = 1; 
                        _cwc_5225 = [ 0 ]; 
                        _cwc_5226 = _sel_VxA_( _cwc_5225, _cwc_5194); 
                        _cwc_5228 = _eq_SxS_( _cwc_5226, _cwc_5227); 
                        _cwc_5229 = _and_SxS_( _cwc_5228, _cwc_5224); 
                        if (_cwc_5229) 
                        { 
                          _cwc_5223 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                          _cwc_4228 = _cwc_5223; 
                        }
                        else
                        { 
                          _cwc_5217 = true; 
                          _cwc_5220 = 4; 
                          _cwc_5218 = [ 0 ]; 
                          _cwc_5219 = _sel_VxA_( _cwc_5218, _cwc_5194); 
                          _cwc_5221 = _eq_SxS_( _cwc_5219, _cwc_5220); 
                          _cwc_5222 = _and_SxS_( _cwc_5221, _cwc_5217); 
                          if (_cwc_5222) 
                          { 
                            _cwc_5216 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                            _cwc_4228 = _cwc_5216; 
                          }
                          else
                          { 
                            _cwc_5210 = true; 
                            _cwc_5213 = 8; 
                            _cwc_5211 = [ 0 ]; 
                            _cwc_5212 = _sel_VxA_( _cwc_5211, _cwc_5194); 
                            _cwc_5214 = _eq_SxS_( _cwc_5212, _cwc_5213); 
                            _cwc_5215 = _and_SxS_( _cwc_5214, _cwc_5210); 
                            if (_cwc_5215) 
                            { 
                              _cwc_5209 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                              _cwc_4228 = _cwc_5209; 
                            }
                            else
                            { 
                              _cwc_5203 = true; 
                              _cwc_5206 = 12; 
                              _cwc_5204 = [ 0 ]; 
                              _cwc_5205 = _sel_VxA_( _cwc_5204, _cwc_5194); 
                              _cwc_5207 = _eq_SxS_( _cwc_5205, _cwc_5206); 
                              _cwc_5208 = _and_SxS_( _cwc_5207, _cwc_5203); 
                              if (_cwc_5208) 
                              { 
                                _cwc_5202 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                _cwc_4228 = _cwc_5202; 
                              }
                              else
                              { 
                                _cwc_5196 = true; 
                                _cwc_5199 = 14; 
                                _cwc_5197 = [ 0 ]; 
                                _cwc_5198 = _sel_VxA_( _cwc_5197, _cwc_5194); 
                                _cwc_5200 = _eq_SxS_( _cwc_5198, _cwc_5199); 
                                _cwc_5201 = _and_SxS_( _cwc_5200, _cwc_5196); 
                                if (_cwc_5201) 
                                { 
                                  _cwc_5195 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                  _cwc_4228 = _cwc_5195; 
                                }
                                else
                                { 
                                  _cwc_5193 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                  _cwc_4228 = _cwc_5193; 
                                }
                              }
                            }
                          }
                        }
                      }
                      else
                      { 
                        _cwc_5191 = ( arr_a ArrayTransform::++arr_b) ; 
                        _cwc_4228 = _cwc_5191; 
                      }
                    }
                    else
                    { 
                      _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                    }
                  }
                }
                else
                { 
                  _cwc_5185 = true; 
                  _cwc_5188 = 6; 
                  _cwc_5186 = [ 0 ]; 
                  _cwc_5187 = _sel_VxA_( _cwc_5186, _cwc_4326); 
                  _cwc_5189 = _eq_SxS_( _cwc_5187, _cwc_5188); 
                  _cwc_5190 = _and_SxS_( _cwc_5189, _cwc_5185); 
                  if (_cwc_5190) 
                  { 
                    _cwc_5181 = _dim_A_( arr_b); 
                    _cwc_5183 = 0; 
                    _cwc_5184 = _eq_SxS_( _cwc_5181, _cwc_5183); 
                    if (_cwc_5184) 
                    { 
                      _cwc_5182 = ( arr_a ArrayTransform::++arr_b) ; 
                      _cwc_4228 = _cwc_5182; 
                    }
                    else
                    { 
                      _cwc_5178 = _dim_A_( arr_b); 
                      _cwc_5179 = 0; 
                      _cwc_5180 = _gt_SxS_( _cwc_5178, _cwc_5179); 
                      if (_cwc_5180) 
                      { 
                        _cwc_5138 = _dim_A_( arr_b); 
                        _cwc_5176 = 1; 
                        _cwc_5177 = _eq_SxS_( _cwc_5138, _cwc_5176); 
                        if (_cwc_5177) 
                        { 
                          _cwc_5140 = _shape_A_( arr_b); 
                          _cwc_5170 = true; 
                          _cwc_5173 = 1; 
                          _cwc_5171 = [ 0 ]; 
                          _cwc_5172 = _sel_VxA_( _cwc_5171, _cwc_5140); 
                          _cwc_5174 = _eq_SxS_( _cwc_5172, _cwc_5173); 
                          _cwc_5175 = _and_SxS_( _cwc_5174, _cwc_5170); 
                          if (_cwc_5175) 
                          { 
                            _cwc_5169 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                            _cwc_4228 = _cwc_5169; 
                          }
                          else
                          { 
                            _cwc_5163 = true; 
                            _cwc_5166 = 4; 
                            _cwc_5164 = [ 0 ]; 
                            _cwc_5165 = _sel_VxA_( _cwc_5164, _cwc_5140); 
                            _cwc_5167 = _eq_SxS_( _cwc_5165, _cwc_5166); 
                            _cwc_5168 = _and_SxS_( _cwc_5167, _cwc_5163); 
                            if (_cwc_5168) 
                            { 
                              _cwc_5162 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                              _cwc_4228 = _cwc_5162; 
                            }
                            else
                            { 
                              _cwc_5156 = true; 
                              _cwc_5159 = 8; 
                              _cwc_5157 = [ 0 ]; 
                              _cwc_5158 = _sel_VxA_( _cwc_5157, _cwc_5140); 
                              _cwc_5160 = _eq_SxS_( _cwc_5158, _cwc_5159); 
                              _cwc_5161 = _and_SxS_( _cwc_5160, _cwc_5156); 
                              if (_cwc_5161) 
                              { 
                                _cwc_5155 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                _cwc_4228 = _cwc_5155; 
                              }
                              else
                              { 
                                _cwc_5149 = true; 
                                _cwc_5152 = 12; 
                                _cwc_5150 = [ 0 ]; 
                                _cwc_5151 = _sel_VxA_( _cwc_5150, _cwc_5140); 
                                _cwc_5153 = _eq_SxS_( _cwc_5151, _cwc_5152); 
                                _cwc_5154 = _and_SxS_( _cwc_5153, _cwc_5149); 
                                if (_cwc_5154) 
                                { 
                                  _cwc_5148 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                  _cwc_4228 = _cwc_5148; 
                                }
                                else
                                { 
                                  _cwc_5142 = true; 
                                  _cwc_5145 = 14; 
                                  _cwc_5143 = [ 0 ]; 
                                  _cwc_5144 = _sel_VxA_( _cwc_5143, _cwc_5140); 
                                  _cwc_5146 = _eq_SxS_( _cwc_5144, _cwc_5145); 
                                  _cwc_5147 = _and_SxS_( _cwc_5146, _cwc_5142); 
                                  if (_cwc_5147) 
                                  { 
                                    _cwc_5141 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                    _cwc_4228 = _cwc_5141; 
                                  }
                                  else
                                  { 
                                    _cwc_5139 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                    _cwc_4228 = _cwc_5139; 
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        { 
                          _cwc_5137 = ( arr_a ArrayTransform::++arr_b) ; 
                          _cwc_4228 = _cwc_5137; 
                        }
                      }
                      else
                      { 
                        _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                      }
                    }
                  }
                  else
                  { 
                    _cwc_5131 = true; 
                    _cwc_5134 = 7; 
                    _cwc_5132 = [ 0 ]; 
                    _cwc_5133 = _sel_VxA_( _cwc_5132, _cwc_4326); 
                    _cwc_5135 = _eq_SxS_( _cwc_5133, _cwc_5134); 
                    _cwc_5136 = _and_SxS_( _cwc_5135, _cwc_5131); 
                    if (_cwc_5136) 
                    { 
                      _cwc_5127 = _dim_A_( arr_b); 
                      _cwc_5129 = 0; 
                      _cwc_5130 = _eq_SxS_( _cwc_5127, _cwc_5129); 
                      if (_cwc_5130) 
                      { 
                        _cwc_5128 = ( arr_a ArrayTransform::++arr_b) ; 
                        _cwc_4228 = _cwc_5128; 
                      }
                      else
                      { 
                        _cwc_5124 = _dim_A_( arr_b); 
                        _cwc_5125 = 0; 
                        _cwc_5126 = _gt_SxS_( _cwc_5124, _cwc_5125); 
                        if (_cwc_5126) 
                        { 
                          _cwc_5084 = _dim_A_( arr_b); 
                          _cwc_5122 = 1; 
                          _cwc_5123 = _eq_SxS_( _cwc_5084, _cwc_5122); 
                          if (_cwc_5123) 
                          { 
                            _cwc_5086 = _shape_A_( arr_b); 
                            _cwc_5116 = true; 
                            _cwc_5119 = 1; 
                            _cwc_5117 = [ 0 ]; 
                            _cwc_5118 = _sel_VxA_( _cwc_5117, _cwc_5086); 
                            _cwc_5120 = _eq_SxS_( _cwc_5118, _cwc_5119); 
                            _cwc_5121 = _and_SxS_( _cwc_5120, _cwc_5116); 
                            if (_cwc_5121) 
                            { 
                              _cwc_5115 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                              _cwc_4228 = _cwc_5115; 
                            }
                            else
                            { 
                              _cwc_5109 = true; 
                              _cwc_5112 = 4; 
                              _cwc_5110 = [ 0 ]; 
                              _cwc_5111 = _sel_VxA_( _cwc_5110, _cwc_5086); 
                              _cwc_5113 = _eq_SxS_( _cwc_5111, _cwc_5112); 
                              _cwc_5114 = _and_SxS_( _cwc_5113, _cwc_5109); 
                              if (_cwc_5114) 
                              { 
                                _cwc_5108 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                _cwc_4228 = _cwc_5108; 
                              }
                              else
                              { 
                                _cwc_5102 = true; 
                                _cwc_5105 = 8; 
                                _cwc_5103 = [ 0 ]; 
                                _cwc_5104 = _sel_VxA_( _cwc_5103, _cwc_5086); 
                                _cwc_5106 = _eq_SxS_( _cwc_5104, _cwc_5105); 
                                _cwc_5107 = _and_SxS_( _cwc_5106, _cwc_5102); 
                                if (_cwc_5107) 
                                { 
                                  _cwc_5101 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                  _cwc_4228 = _cwc_5101; 
                                }
                                else
                                { 
                                  _cwc_5095 = true; 
                                  _cwc_5098 = 12; 
                                  _cwc_5096 = [ 0 ]; 
                                  _cwc_5097 = _sel_VxA_( _cwc_5096, _cwc_5086); 
                                  _cwc_5099 = _eq_SxS_( _cwc_5097, _cwc_5098); 
                                  _cwc_5100 = _and_SxS_( _cwc_5099, _cwc_5095); 
                                  if (_cwc_5100) 
                                  { 
                                    _cwc_5094 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                    _cwc_4228 = _cwc_5094; 
                                  }
                                  else
                                  { 
                                    _cwc_5088 = true; 
                                    _cwc_5091 = 14; 
                                    _cwc_5089 = [ 0 ]; 
                                    _cwc_5090 = _sel_VxA_( _cwc_5089, _cwc_5086); 
                                    _cwc_5092 = _eq_SxS_( _cwc_5090, _cwc_5091); 
                                    _cwc_5093 = _and_SxS_( _cwc_5092, _cwc_5088); 
                                    if (_cwc_5093) 
                                    { 
                                      _cwc_5087 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                      _cwc_4228 = _cwc_5087; 
                                    }
                                    else
                                    { 
                                      _cwc_5085 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                      _cwc_4228 = _cwc_5085; 
                                    }
                                  }
                                }
                              }
                            }
                          }
                          else
                          { 
                            _cwc_5083 = ( arr_a ArrayTransform::++arr_b) ; 
                            _cwc_4228 = _cwc_5083; 
                          }
                        }
                        else
                        { 
                          _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                        }
                      }
                    }
                    else
                    { 
                      _cwc_5077 = true; 
                      _cwc_5080 = 8; 
                      _cwc_5078 = [ 0 ]; 
                      _cwc_5079 = _sel_VxA_( _cwc_5078, _cwc_4326); 
                      _cwc_5081 = _eq_SxS_( _cwc_5079, _cwc_5080); 
                      _cwc_5082 = _and_SxS_( _cwc_5081, _cwc_5077); 
                      if (_cwc_5082) 
                      { 
                        _cwc_5073 = _dim_A_( arr_b); 
                        _cwc_5075 = 0; 
                        _cwc_5076 = _eq_SxS_( _cwc_5073, _cwc_5075); 
                        if (_cwc_5076) 
                        { 
                          _cwc_5074 = ( arr_a ArrayTransform::++arr_b) ; 
                          _cwc_4228 = _cwc_5074; 
                        }
                        else
                        { 
                          _cwc_5070 = _dim_A_( arr_b); 
                          _cwc_5071 = 0; 
                          _cwc_5072 = _gt_SxS_( _cwc_5070, _cwc_5071); 
                          if (_cwc_5072) 
                          { 
                            _cwc_5030 = _dim_A_( arr_b); 
                            _cwc_5068 = 1; 
                            _cwc_5069 = _eq_SxS_( _cwc_5030, _cwc_5068); 
                            if (_cwc_5069) 
                            { 
                              _cwc_5032 = _shape_A_( arr_b); 
                              _cwc_5062 = true; 
                              _cwc_5065 = 1; 
                              _cwc_5063 = [ 0 ]; 
                              _cwc_5064 = _sel_VxA_( _cwc_5063, _cwc_5032); 
                              _cwc_5066 = _eq_SxS_( _cwc_5064, _cwc_5065); 
                              _cwc_5067 = _and_SxS_( _cwc_5066, _cwc_5062); 
                              if (_cwc_5067) 
                              { 
                                _cwc_5061 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                _cwc_4228 = _cwc_5061; 
                              }
                              else
                              { 
                                _cwc_5055 = true; 
                                _cwc_5058 = 4; 
                                _cwc_5056 = [ 0 ]; 
                                _cwc_5057 = _sel_VxA_( _cwc_5056, _cwc_5032); 
                                _cwc_5059 = _eq_SxS_( _cwc_5057, _cwc_5058); 
                                _cwc_5060 = _and_SxS_( _cwc_5059, _cwc_5055); 
                                if (_cwc_5060) 
                                { 
                                  _cwc_5054 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                  _cwc_4228 = _cwc_5054; 
                                }
                                else
                                { 
                                  _cwc_5048 = true; 
                                  _cwc_5051 = 8; 
                                  _cwc_5049 = [ 0 ]; 
                                  _cwc_5050 = _sel_VxA_( _cwc_5049, _cwc_5032); 
                                  _cwc_5052 = _eq_SxS_( _cwc_5050, _cwc_5051); 
                                  _cwc_5053 = _and_SxS_( _cwc_5052, _cwc_5048); 
                                  if (_cwc_5053) 
                                  { 
                                    _cwc_5047 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                    _cwc_4228 = _cwc_5047; 
                                  }
                                  else
                                  { 
                                    _cwc_5041 = true; 
                                    _cwc_5044 = 12; 
                                    _cwc_5042 = [ 0 ]; 
                                    _cwc_5043 = _sel_VxA_( _cwc_5042, _cwc_5032); 
                                    _cwc_5045 = _eq_SxS_( _cwc_5043, _cwc_5044); 
                                    _cwc_5046 = _and_SxS_( _cwc_5045, _cwc_5041); 
                                    if (_cwc_5046) 
                                    { 
                                      _cwc_5040 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                      _cwc_4228 = _cwc_5040; 
                                    }
                                    else
                                    { 
                                      _cwc_5034 = true; 
                                      _cwc_5037 = 14; 
                                      _cwc_5035 = [ 0 ]; 
                                      _cwc_5036 = _sel_VxA_( _cwc_5035, _cwc_5032); 
                                      _cwc_5038 = _eq_SxS_( _cwc_5036, _cwc_5037); 
                                      _cwc_5039 = _and_SxS_( _cwc_5038, _cwc_5034); 
                                      if (_cwc_5039) 
                                      { 
                                        _cwc_5033 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                        _cwc_4228 = _cwc_5033; 
                                      }
                                      else
                                      { 
                                        _cwc_5031 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                        _cwc_4228 = _cwc_5031; 
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else
                            { 
                              _cwc_5029 = ( arr_a ArrayTransform::++arr_b) ; 
                              _cwc_4228 = _cwc_5029; 
                            }
                          }
                          else
                          { 
                            _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                          }
                        }
                      }
                      else
                      { 
                        _cwc_5023 = true; 
                        _cwc_5026 = 9; 
                        _cwc_5024 = [ 0 ]; 
                        _cwc_5025 = _sel_VxA_( _cwc_5024, _cwc_4326); 
                        _cwc_5027 = _eq_SxS_( _cwc_5025, _cwc_5026); 
                        _cwc_5028 = _and_SxS_( _cwc_5027, _cwc_5023); 
                        if (_cwc_5028) 
                        { 
                          _cwc_5019 = _dim_A_( arr_b); 
                          _cwc_5021 = 0; 
                          _cwc_5022 = _eq_SxS_( _cwc_5019, _cwc_5021); 
                          if (_cwc_5022) 
                          { 
                            _cwc_5020 = ( arr_a ArrayTransform::++arr_b) ; 
                            _cwc_4228 = _cwc_5020; 
                          }
                          else
                          { 
                            _cwc_5016 = _dim_A_( arr_b); 
                            _cwc_5017 = 0; 
                            _cwc_5018 = _gt_SxS_( _cwc_5016, _cwc_5017); 
                            if (_cwc_5018) 
                            { 
                              _cwc_4976 = _dim_A_( arr_b); 
                              _cwc_5014 = 1; 
                              _cwc_5015 = _eq_SxS_( _cwc_4976, _cwc_5014); 
                              if (_cwc_5015) 
                              { 
                                _cwc_4978 = _shape_A_( arr_b); 
                                _cwc_5008 = true; 
                                _cwc_5011 = 1; 
                                _cwc_5009 = [ 0 ]; 
                                _cwc_5010 = _sel_VxA_( _cwc_5009, _cwc_4978); 
                                _cwc_5012 = _eq_SxS_( _cwc_5010, _cwc_5011); 
                                _cwc_5013 = _and_SxS_( _cwc_5012, _cwc_5008); 
                                if (_cwc_5013) 
                                { 
                                  _cwc_5007 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                  _cwc_4228 = _cwc_5007; 
                                }
                                else
                                { 
                                  _cwc_5001 = true; 
                                  _cwc_5004 = 4; 
                                  _cwc_5002 = [ 0 ]; 
                                  _cwc_5003 = _sel_VxA_( _cwc_5002, _cwc_4978); 
                                  _cwc_5005 = _eq_SxS_( _cwc_5003, _cwc_5004); 
                                  _cwc_5006 = _and_SxS_( _cwc_5005, _cwc_5001); 
                                  if (_cwc_5006) 
                                  { 
                                    _cwc_5000 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                    _cwc_4228 = _cwc_5000; 
                                  }
                                  else
                                  { 
                                    _cwc_4994 = true; 
                                    _cwc_4997 = 8; 
                                    _cwc_4995 = [ 0 ]; 
                                    _cwc_4996 = _sel_VxA_( _cwc_4995, _cwc_4978); 
                                    _cwc_4998 = _eq_SxS_( _cwc_4996, _cwc_4997); 
                                    _cwc_4999 = _and_SxS_( _cwc_4998, _cwc_4994); 
                                    if (_cwc_4999) 
                                    { 
                                      _cwc_4993 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                      _cwc_4228 = _cwc_4993; 
                                    }
                                    else
                                    { 
                                      _cwc_4987 = true; 
                                      _cwc_4990 = 12; 
                                      _cwc_4988 = [ 0 ]; 
                                      _cwc_4989 = _sel_VxA_( _cwc_4988, _cwc_4978); 
                                      _cwc_4991 = _eq_SxS_( _cwc_4989, _cwc_4990); 
                                      _cwc_4992 = _and_SxS_( _cwc_4991, _cwc_4987); 
                                      if (_cwc_4992) 
                                      { 
                                        _cwc_4986 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                        _cwc_4228 = _cwc_4986; 
                                      }
                                      else
                                      { 
                                        _cwc_4980 = true; 
                                        _cwc_4983 = 14; 
                                        _cwc_4981 = [ 0 ]; 
                                        _cwc_4982 = _sel_VxA_( _cwc_4981, _cwc_4978); 
                                        _cwc_4984 = _eq_SxS_( _cwc_4982, _cwc_4983); 
                                        _cwc_4985 = _and_SxS_( _cwc_4984, _cwc_4980); 
                                        if (_cwc_4985) 
                                        { 
                                          _cwc_4979 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_4228 = _cwc_4979; 
                                        }
                                        else
                                        { 
                                          _cwc_4977 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_4228 = _cwc_4977; 
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              else
                              { 
                                _cwc_4975 = ( arr_a ArrayTransform::++arr_b) ; 
                                _cwc_4228 = _cwc_4975; 
                              }
                            }
                            else
                            { 
                              _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                            }
                          }
                        }
                        else
                        { 
                          _cwc_4969 = true; 
                          _cwc_4972 = 10; 
                          _cwc_4970 = [ 0 ]; 
                          _cwc_4971 = _sel_VxA_( _cwc_4970, _cwc_4326); 
                          _cwc_4973 = _eq_SxS_( _cwc_4971, _cwc_4972); 
                          _cwc_4974 = _and_SxS_( _cwc_4973, _cwc_4969); 
                          if (_cwc_4974) 
                          { 
                            _cwc_4965 = _dim_A_( arr_b); 
                            _cwc_4967 = 0; 
                            _cwc_4968 = _eq_SxS_( _cwc_4965, _cwc_4967); 
                            if (_cwc_4968) 
                            { 
                              _cwc_4966 = ( arr_a ArrayTransform::++arr_b) ; 
                              _cwc_4228 = _cwc_4966; 
                            }
                            else
                            { 
                              _cwc_4962 = _dim_A_( arr_b); 
                              _cwc_4963 = 0; 
                              _cwc_4964 = _gt_SxS_( _cwc_4962, _cwc_4963); 
                              if (_cwc_4964) 
                              { 
                                _cwc_4922 = _dim_A_( arr_b); 
                                _cwc_4960 = 1; 
                                _cwc_4961 = _eq_SxS_( _cwc_4922, _cwc_4960); 
                                if (_cwc_4961) 
                                { 
                                  _cwc_4924 = _shape_A_( arr_b); 
                                  _cwc_4954 = true; 
                                  _cwc_4957 = 1; 
                                  _cwc_4955 = [ 0 ]; 
                                  _cwc_4956 = _sel_VxA_( _cwc_4955, _cwc_4924); 
                                  _cwc_4958 = _eq_SxS_( _cwc_4956, _cwc_4957); 
                                  _cwc_4959 = _and_SxS_( _cwc_4958, _cwc_4954); 
                                  if (_cwc_4959) 
                                  { 
                                    _cwc_4953 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                    _cwc_4228 = _cwc_4953; 
                                  }
                                  else
                                  { 
                                    _cwc_4947 = true; 
                                    _cwc_4950 = 4; 
                                    _cwc_4948 = [ 0 ]; 
                                    _cwc_4949 = _sel_VxA_( _cwc_4948, _cwc_4924); 
                                    _cwc_4951 = _eq_SxS_( _cwc_4949, _cwc_4950); 
                                    _cwc_4952 = _and_SxS_( _cwc_4951, _cwc_4947); 
                                    if (_cwc_4952) 
                                    { 
                                      _cwc_4946 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                      _cwc_4228 = _cwc_4946; 
                                    }
                                    else
                                    { 
                                      _cwc_4940 = true; 
                                      _cwc_4943 = 8; 
                                      _cwc_4941 = [ 0 ]; 
                                      _cwc_4942 = _sel_VxA_( _cwc_4941, _cwc_4924); 
                                      _cwc_4944 = _eq_SxS_( _cwc_4942, _cwc_4943); 
                                      _cwc_4945 = _and_SxS_( _cwc_4944, _cwc_4940); 
                                      if (_cwc_4945) 
                                      { 
                                        _cwc_4939 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                        _cwc_4228 = _cwc_4939; 
                                      }
                                      else
                                      { 
                                        _cwc_4933 = true; 
                                        _cwc_4936 = 12; 
                                        _cwc_4934 = [ 0 ]; 
                                        _cwc_4935 = _sel_VxA_( _cwc_4934, _cwc_4924); 
                                        _cwc_4937 = _eq_SxS_( _cwc_4935, _cwc_4936); 
                                        _cwc_4938 = _and_SxS_( _cwc_4937, _cwc_4933); 
                                        if (_cwc_4938) 
                                        { 
                                          _cwc_4932 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_4228 = _cwc_4932; 
                                        }
                                        else
                                        { 
                                          _cwc_4926 = true; 
                                          _cwc_4929 = 14; 
                                          _cwc_4927 = [ 0 ]; 
                                          _cwc_4928 = _sel_VxA_( _cwc_4927, _cwc_4924); 
                                          _cwc_4930 = _eq_SxS_( _cwc_4928, _cwc_4929); 
                                          _cwc_4931 = _and_SxS_( _cwc_4930, _cwc_4926); 
                                          if (_cwc_4931) 
                                          { 
                                            _cwc_4925 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                            _cwc_4228 = _cwc_4925; 
                                          }
                                          else
                                          { 
                                            _cwc_4923 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                            _cwc_4228 = _cwc_4923; 
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                { 
                                  _cwc_4921 = ( arr_a ArrayTransform::++arr_b) ; 
                                  _cwc_4228 = _cwc_4921; 
                                }
                              }
                              else
                              { 
                                _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                              }
                            }
                          }
                          else
                          { 
                            _cwc_4915 = true; 
                            _cwc_4918 = 11; 
                            _cwc_4916 = [ 0 ]; 
                            _cwc_4917 = _sel_VxA_( _cwc_4916, _cwc_4326); 
                            _cwc_4919 = _eq_SxS_( _cwc_4917, _cwc_4918); 
                            _cwc_4920 = _and_SxS_( _cwc_4919, _cwc_4915); 
                            if (_cwc_4920) 
                            { 
                              _cwc_4911 = _dim_A_( arr_b); 
                              _cwc_4913 = 0; 
                              _cwc_4914 = _eq_SxS_( _cwc_4911, _cwc_4913); 
                              if (_cwc_4914) 
                              { 
                                _cwc_4912 = ( arr_a ArrayTransform::++arr_b) ; 
                                _cwc_4228 = _cwc_4912; 
                              }
                              else
                              { 
                                _cwc_4908 = _dim_A_( arr_b); 
                                _cwc_4909 = 0; 
                                _cwc_4910 = _gt_SxS_( _cwc_4908, _cwc_4909); 
                                if (_cwc_4910) 
                                { 
                                  _cwc_4868 = _dim_A_( arr_b); 
                                  _cwc_4906 = 1; 
                                  _cwc_4907 = _eq_SxS_( _cwc_4868, _cwc_4906); 
                                  if (_cwc_4907) 
                                  { 
                                    _cwc_4870 = _shape_A_( arr_b); 
                                    _cwc_4900 = true; 
                                    _cwc_4903 = 1; 
                                    _cwc_4901 = [ 0 ]; 
                                    _cwc_4902 = _sel_VxA_( _cwc_4901, _cwc_4870); 
                                    _cwc_4904 = _eq_SxS_( _cwc_4902, _cwc_4903); 
                                    _cwc_4905 = _and_SxS_( _cwc_4904, _cwc_4900); 
                                    if (_cwc_4905) 
                                    { 
                                      _cwc_4899 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                      _cwc_4228 = _cwc_4899; 
                                    }
                                    else
                                    { 
                                      _cwc_4893 = true; 
                                      _cwc_4896 = 4; 
                                      _cwc_4894 = [ 0 ]; 
                                      _cwc_4895 = _sel_VxA_( _cwc_4894, _cwc_4870); 
                                      _cwc_4897 = _eq_SxS_( _cwc_4895, _cwc_4896); 
                                      _cwc_4898 = _and_SxS_( _cwc_4897, _cwc_4893); 
                                      if (_cwc_4898) 
                                      { 
                                        _cwc_4892 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                        _cwc_4228 = _cwc_4892; 
                                      }
                                      else
                                      { 
                                        _cwc_4886 = true; 
                                        _cwc_4889 = 8; 
                                        _cwc_4887 = [ 0 ]; 
                                        _cwc_4888 = _sel_VxA_( _cwc_4887, _cwc_4870); 
                                        _cwc_4890 = _eq_SxS_( _cwc_4888, _cwc_4889); 
                                        _cwc_4891 = _and_SxS_( _cwc_4890, _cwc_4886); 
                                        if (_cwc_4891) 
                                        { 
                                          _cwc_4885 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_4228 = _cwc_4885; 
                                        }
                                        else
                                        { 
                                          _cwc_4879 = true; 
                                          _cwc_4882 = 12; 
                                          _cwc_4880 = [ 0 ]; 
                                          _cwc_4881 = _sel_VxA_( _cwc_4880, _cwc_4870); 
                                          _cwc_4883 = _eq_SxS_( _cwc_4881, _cwc_4882); 
                                          _cwc_4884 = _and_SxS_( _cwc_4883, _cwc_4879); 
                                          if (_cwc_4884) 
                                          { 
                                            _cwc_4878 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                            _cwc_4228 = _cwc_4878; 
                                          }
                                          else
                                          { 
                                            _cwc_4872 = true; 
                                            _cwc_4875 = 14; 
                                            _cwc_4873 = [ 0 ]; 
                                            _cwc_4874 = _sel_VxA_( _cwc_4873, _cwc_4870); 
                                            _cwc_4876 = _eq_SxS_( _cwc_4874, _cwc_4875); 
                                            _cwc_4877 = _and_SxS_( _cwc_4876, _cwc_4872); 
                                            if (_cwc_4877) 
                                            { 
                                              _cwc_4871 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                              _cwc_4228 = _cwc_4871; 
                                            }
                                            else
                                            { 
                                              _cwc_4869 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                              _cwc_4228 = _cwc_4869; 
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else
                                  { 
                                    _cwc_4867 = ( arr_a ArrayTransform::++arr_b) ; 
                                    _cwc_4228 = _cwc_4867; 
                                  }
                                }
                                else
                                { 
                                  _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                }
                              }
                            }
                            else
                            { 
                              _cwc_4861 = true; 
                              _cwc_4864 = 12; 
                              _cwc_4862 = [ 0 ]; 
                              _cwc_4863 = _sel_VxA_( _cwc_4862, _cwc_4326); 
                              _cwc_4865 = _eq_SxS_( _cwc_4863, _cwc_4864); 
                              _cwc_4866 = _and_SxS_( _cwc_4865, _cwc_4861); 
                              if (_cwc_4866) 
                              { 
                                _cwc_4857 = _dim_A_( arr_b); 
                                _cwc_4859 = 0; 
                                _cwc_4860 = _eq_SxS_( _cwc_4857, _cwc_4859); 
                                if (_cwc_4860) 
                                { 
                                  _cwc_4858 = ( arr_a ArrayTransform::++arr_b) ; 
                                  _cwc_4228 = _cwc_4858; 
                                }
                                else
                                { 
                                  _cwc_4854 = _dim_A_( arr_b); 
                                  _cwc_4855 = 0; 
                                  _cwc_4856 = _gt_SxS_( _cwc_4854, _cwc_4855); 
                                  if (_cwc_4856) 
                                  { 
                                    _cwc_4814 = _dim_A_( arr_b); 
                                    _cwc_4852 = 1; 
                                    _cwc_4853 = _eq_SxS_( _cwc_4814, _cwc_4852); 
                                    if (_cwc_4853) 
                                    { 
                                      _cwc_4816 = _shape_A_( arr_b); 
                                      _cwc_4846 = true; 
                                      _cwc_4849 = 1; 
                                      _cwc_4847 = [ 0 ]; 
                                      _cwc_4848 = _sel_VxA_( _cwc_4847, _cwc_4816); 
                                      _cwc_4850 = _eq_SxS_( _cwc_4848, _cwc_4849); 
                                      _cwc_4851 = _and_SxS_( _cwc_4850, _cwc_4846); 
                                      if (_cwc_4851) 
                                      { 
                                        _cwc_4845 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                        _cwc_4228 = _cwc_4845; 
                                      }
                                      else
                                      { 
                                        _cwc_4839 = true; 
                                        _cwc_4842 = 4; 
                                        _cwc_4840 = [ 0 ]; 
                                        _cwc_4841 = _sel_VxA_( _cwc_4840, _cwc_4816); 
                                        _cwc_4843 = _eq_SxS_( _cwc_4841, _cwc_4842); 
                                        _cwc_4844 = _and_SxS_( _cwc_4843, _cwc_4839); 
                                        if (_cwc_4844) 
                                        { 
                                          _cwc_4838 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_4228 = _cwc_4838; 
                                        }
                                        else
                                        { 
                                          _cwc_4832 = true; 
                                          _cwc_4835 = 8; 
                                          _cwc_4833 = [ 0 ]; 
                                          _cwc_4834 = _sel_VxA_( _cwc_4833, _cwc_4816); 
                                          _cwc_4836 = _eq_SxS_( _cwc_4834, _cwc_4835); 
                                          _cwc_4837 = _and_SxS_( _cwc_4836, _cwc_4832); 
                                          if (_cwc_4837) 
                                          { 
                                            _cwc_4831 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                            _cwc_4228 = _cwc_4831; 
                                          }
                                          else
                                          { 
                                            _cwc_4825 = true; 
                                            _cwc_4828 = 12; 
                                            _cwc_4826 = [ 0 ]; 
                                            _cwc_4827 = _sel_VxA_( _cwc_4826, _cwc_4816); 
                                            _cwc_4829 = _eq_SxS_( _cwc_4827, _cwc_4828); 
                                            _cwc_4830 = _and_SxS_( _cwc_4829, _cwc_4825); 
                                            if (_cwc_4830) 
                                            { 
                                              _cwc_4824 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                              _cwc_4228 = _cwc_4824; 
                                            }
                                            else
                                            { 
                                              _cwc_4818 = true; 
                                              _cwc_4821 = 14; 
                                              _cwc_4819 = [ 0 ]; 
                                              _cwc_4820 = _sel_VxA_( _cwc_4819, _cwc_4816); 
                                              _cwc_4822 = _eq_SxS_( _cwc_4820, _cwc_4821); 
                                              _cwc_4823 = _and_SxS_( _cwc_4822, _cwc_4818); 
                                              if (_cwc_4823) 
                                              { 
                                                _cwc_4817 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                _cwc_4228 = _cwc_4817; 
                                              }
                                              else
                                              { 
                                                _cwc_4815 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                _cwc_4228 = _cwc_4815; 
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    else
                                    { 
                                      _cwc_4813 = ( arr_a ArrayTransform::++arr_b) ; 
                                      _cwc_4228 = _cwc_4813; 
                                    }
                                  }
                                  else
                                  { 
                                    _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                  }
                                }
                              }
                              else
                              { 
                                _cwc_4807 = true; 
                                _cwc_4810 = 13; 
                                _cwc_4808 = [ 0 ]; 
                                _cwc_4809 = _sel_VxA_( _cwc_4808, _cwc_4326); 
                                _cwc_4811 = _eq_SxS_( _cwc_4809, _cwc_4810); 
                                _cwc_4812 = _and_SxS_( _cwc_4811, _cwc_4807); 
                                if (_cwc_4812) 
                                { 
                                  _cwc_4803 = _dim_A_( arr_b); 
                                  _cwc_4805 = 0; 
                                  _cwc_4806 = _eq_SxS_( _cwc_4803, _cwc_4805); 
                                  if (_cwc_4806) 
                                  { 
                                    _cwc_4804 = ( arr_a ArrayTransform::++arr_b) ; 
                                    _cwc_4228 = _cwc_4804; 
                                  }
                                  else
                                  { 
                                    _cwc_4800 = _dim_A_( arr_b); 
                                    _cwc_4801 = 0; 
                                    _cwc_4802 = _gt_SxS_( _cwc_4800, _cwc_4801); 
                                    if (_cwc_4802) 
                                    { 
                                      _cwc_4760 = _dim_A_( arr_b); 
                                      _cwc_4798 = 1; 
                                      _cwc_4799 = _eq_SxS_( _cwc_4760, _cwc_4798); 
                                      if (_cwc_4799) 
                                      { 
                                        _cwc_4762 = _shape_A_( arr_b); 
                                        _cwc_4792 = true; 
                                        _cwc_4795 = 1; 
                                        _cwc_4793 = [ 0 ]; 
                                        _cwc_4794 = _sel_VxA_( _cwc_4793, _cwc_4762); 
                                        _cwc_4796 = _eq_SxS_( _cwc_4794, _cwc_4795); 
                                        _cwc_4797 = _and_SxS_( _cwc_4796, _cwc_4792); 
                                        if (_cwc_4797) 
                                        { 
                                          _cwc_4791 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                          _cwc_4228 = _cwc_4791; 
                                        }
                                        else
                                        { 
                                          _cwc_4785 = true; 
                                          _cwc_4788 = 4; 
                                          _cwc_4786 = [ 0 ]; 
                                          _cwc_4787 = _sel_VxA_( _cwc_4786, _cwc_4762); 
                                          _cwc_4789 = _eq_SxS_( _cwc_4787, _cwc_4788); 
                                          _cwc_4790 = _and_SxS_( _cwc_4789, _cwc_4785); 
                                          if (_cwc_4790) 
                                          { 
                                            _cwc_4784 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                            _cwc_4228 = _cwc_4784; 
                                          }
                                          else
                                          { 
                                            _cwc_4778 = true; 
                                            _cwc_4781 = 8; 
                                            _cwc_4779 = [ 0 ]; 
                                            _cwc_4780 = _sel_VxA_( _cwc_4779, _cwc_4762); 
                                            _cwc_4782 = _eq_SxS_( _cwc_4780, _cwc_4781); 
                                            _cwc_4783 = _and_SxS_( _cwc_4782, _cwc_4778); 
                                            if (_cwc_4783) 
                                            { 
                                              _cwc_4777 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                              _cwc_4228 = _cwc_4777; 
                                            }
                                            else
                                            { 
                                              _cwc_4771 = true; 
                                              _cwc_4774 = 12; 
                                              _cwc_4772 = [ 0 ]; 
                                              _cwc_4773 = _sel_VxA_( _cwc_4772, _cwc_4762); 
                                              _cwc_4775 = _eq_SxS_( _cwc_4773, _cwc_4774); 
                                              _cwc_4776 = _and_SxS_( _cwc_4775, _cwc_4771); 
                                              if (_cwc_4776) 
                                              { 
                                                _cwc_4770 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                _cwc_4228 = _cwc_4770; 
                                              }
                                              else
                                              { 
                                                _cwc_4764 = true; 
                                                _cwc_4767 = 14; 
                                                _cwc_4765 = [ 0 ]; 
                                                _cwc_4766 = _sel_VxA_( _cwc_4765, _cwc_4762); 
                                                _cwc_4768 = _eq_SxS_( _cwc_4766, _cwc_4767); 
                                                _cwc_4769 = _and_SxS_( _cwc_4768, _cwc_4764); 
                                                if (_cwc_4769) 
                                                { 
                                                  _cwc_4763 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                  _cwc_4228 = _cwc_4763; 
                                                }
                                                else
                                                { 
                                                  _cwc_4761 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                  _cwc_4228 = _cwc_4761; 
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      { 
                                        _cwc_4759 = ( arr_a ArrayTransform::++arr_b) ; 
                                        _cwc_4228 = _cwc_4759; 
                                      }
                                    }
                                    else
                                    { 
                                      _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                    }
                                  }
                                }
                                else
                                { 
                                  _cwc_4753 = true; 
                                  _cwc_4756 = 14; 
                                  _cwc_4754 = [ 0 ]; 
                                  _cwc_4755 = _sel_VxA_( _cwc_4754, _cwc_4326); 
                                  _cwc_4757 = _eq_SxS_( _cwc_4755, _cwc_4756); 
                                  _cwc_4758 = _and_SxS_( _cwc_4757, _cwc_4753); 
                                  if (_cwc_4758) 
                                  { 
                                    _cwc_4749 = _dim_A_( arr_b); 
                                    _cwc_4751 = 0; 
                                    _cwc_4752 = _eq_SxS_( _cwc_4749, _cwc_4751); 
                                    if (_cwc_4752) 
                                    { 
                                      _cwc_4750 = ( arr_a ArrayTransform::++arr_b) ; 
                                      _cwc_4228 = _cwc_4750; 
                                    }
                                    else
                                    { 
                                      _cwc_4746 = _dim_A_( arr_b); 
                                      _cwc_4747 = 0; 
                                      _cwc_4748 = _gt_SxS_( _cwc_4746, _cwc_4747); 
                                      if (_cwc_4748) 
                                      { 
                                        _cwc_4706 = _dim_A_( arr_b); 
                                        _cwc_4744 = 1; 
                                        _cwc_4745 = _eq_SxS_( _cwc_4706, _cwc_4744); 
                                        if (_cwc_4745) 
                                        { 
                                          _cwc_4708 = _shape_A_( arr_b); 
                                          _cwc_4738 = true; 
                                          _cwc_4741 = 1; 
                                          _cwc_4739 = [ 0 ]; 
                                          _cwc_4740 = _sel_VxA_( _cwc_4739, _cwc_4708); 
                                          _cwc_4742 = _eq_SxS_( _cwc_4740, _cwc_4741); 
                                          _cwc_4743 = _and_SxS_( _cwc_4742, _cwc_4738); 
                                          if (_cwc_4743) 
                                          { 
                                            _cwc_4737 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                            _cwc_4228 = _cwc_4737; 
                                          }
                                          else
                                          { 
                                            _cwc_4731 = true; 
                                            _cwc_4734 = 4; 
                                            _cwc_4732 = [ 0 ]; 
                                            _cwc_4733 = _sel_VxA_( _cwc_4732, _cwc_4708); 
                                            _cwc_4735 = _eq_SxS_( _cwc_4733, _cwc_4734); 
                                            _cwc_4736 = _and_SxS_( _cwc_4735, _cwc_4731); 
                                            if (_cwc_4736) 
                                            { 
                                              _cwc_4730 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                              _cwc_4228 = _cwc_4730; 
                                            }
                                            else
                                            { 
                                              _cwc_4724 = true; 
                                              _cwc_4727 = 8; 
                                              _cwc_4725 = [ 0 ]; 
                                              _cwc_4726 = _sel_VxA_( _cwc_4725, _cwc_4708); 
                                              _cwc_4728 = _eq_SxS_( _cwc_4726, _cwc_4727); 
                                              _cwc_4729 = _and_SxS_( _cwc_4728, _cwc_4724); 
                                              if (_cwc_4729) 
                                              { 
                                                _cwc_4723 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                _cwc_4228 = _cwc_4723; 
                                              }
                                              else
                                              { 
                                                _cwc_4717 = true; 
                                                _cwc_4720 = 12; 
                                                _cwc_4718 = [ 0 ]; 
                                                _cwc_4719 = _sel_VxA_( _cwc_4718, _cwc_4708); 
                                                _cwc_4721 = _eq_SxS_( _cwc_4719, _cwc_4720); 
                                                _cwc_4722 = _and_SxS_( _cwc_4721, _cwc_4717); 
                                                if (_cwc_4722) 
                                                { 
                                                  _cwc_4716 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                  _cwc_4228 = _cwc_4716; 
                                                }
                                                else
                                                { 
                                                  _cwc_4710 = true; 
                                                  _cwc_4713 = 14; 
                                                  _cwc_4711 = [ 0 ]; 
                                                  _cwc_4712 = _sel_VxA_( _cwc_4711, _cwc_4708); 
                                                  _cwc_4714 = _eq_SxS_( _cwc_4712, _cwc_4713); 
                                                  _cwc_4715 = _and_SxS_( _cwc_4714, _cwc_4710); 
                                                  if (_cwc_4715) 
                                                  { 
                                                    _cwc_4709 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                    _cwc_4228 = _cwc_4709; 
                                                  }
                                                  else
                                                  { 
                                                    _cwc_4707 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                    _cwc_4228 = _cwc_4707; 
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        else
                                        { 
                                          _cwc_4705 = ( arr_a ArrayTransform::++arr_b) ; 
                                          _cwc_4228 = _cwc_4705; 
                                        }
                                      }
                                      else
                                      { 
                                        _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                      }
                                    }
                                  }
                                  else
                                  { 
                                    _cwc_4699 = true; 
                                    _cwc_4702 = 28; 
                                    _cwc_4700 = [ 0 ]; 
                                    _cwc_4701 = _sel_VxA_( _cwc_4700, _cwc_4326); 
                                    _cwc_4703 = _eq_SxS_( _cwc_4701, _cwc_4702); 
                                    _cwc_4704 = _and_SxS_( _cwc_4703, _cwc_4699); 
                                    if (_cwc_4704) 
                                    { 
                                      _cwc_4695 = _dim_A_( arr_b); 
                                      _cwc_4697 = 0; 
                                      _cwc_4698 = _eq_SxS_( _cwc_4695, _cwc_4697); 
                                      if (_cwc_4698) 
                                      { 
                                        _cwc_4696 = ( arr_a ArrayTransform::++arr_b) ; 
                                        _cwc_4228 = _cwc_4696; 
                                      }
                                      else
                                      { 
                                        _cwc_4692 = _dim_A_( arr_b); 
                                        _cwc_4693 = 0; 
                                        _cwc_4694 = _gt_SxS_( _cwc_4692, _cwc_4693); 
                                        if (_cwc_4694) 
                                        { 
                                          _cwc_4652 = _dim_A_( arr_b); 
                                          _cwc_4690 = 1; 
                                          _cwc_4691 = _eq_SxS_( _cwc_4652, _cwc_4690); 
                                          if (_cwc_4691) 
                                          { 
                                            _cwc_4654 = _shape_A_( arr_b); 
                                            _cwc_4684 = true; 
                                            _cwc_4687 = 1; 
                                            _cwc_4685 = [ 0 ]; 
                                            _cwc_4686 = _sel_VxA_( _cwc_4685, _cwc_4654); 
                                            _cwc_4688 = _eq_SxS_( _cwc_4686, _cwc_4687); 
                                            _cwc_4689 = _and_SxS_( _cwc_4688, _cwc_4684); 
                                            if (_cwc_4689) 
                                            { 
                                              _cwc_4683 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                              _cwc_4228 = _cwc_4683; 
                                            }
                                            else
                                            { 
                                              _cwc_4677 = true; 
                                              _cwc_4680 = 4; 
                                              _cwc_4678 = [ 0 ]; 
                                              _cwc_4679 = _sel_VxA_( _cwc_4678, _cwc_4654); 
                                              _cwc_4681 = _eq_SxS_( _cwc_4679, _cwc_4680); 
                                              _cwc_4682 = _and_SxS_( _cwc_4681, _cwc_4677); 
                                              if (_cwc_4682) 
                                              { 
                                                _cwc_4676 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                _cwc_4228 = _cwc_4676; 
                                              }
                                              else
                                              { 
                                                _cwc_4670 = true; 
                                                _cwc_4673 = 8; 
                                                _cwc_4671 = [ 0 ]; 
                                                _cwc_4672 = _sel_VxA_( _cwc_4671, _cwc_4654); 
                                                _cwc_4674 = _eq_SxS_( _cwc_4672, _cwc_4673); 
                                                _cwc_4675 = _and_SxS_( _cwc_4674, _cwc_4670); 
                                                if (_cwc_4675) 
                                                { 
                                                  _cwc_4669 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                  _cwc_4228 = _cwc_4669; 
                                                }
                                                else
                                                { 
                                                  _cwc_4663 = true; 
                                                  _cwc_4666 = 12; 
                                                  _cwc_4664 = [ 0 ]; 
                                                  _cwc_4665 = _sel_VxA_( _cwc_4664, _cwc_4654); 
                                                  _cwc_4667 = _eq_SxS_( _cwc_4665, _cwc_4666); 
                                                  _cwc_4668 = _and_SxS_( _cwc_4667, _cwc_4663); 
                                                  if (_cwc_4668) 
                                                  { 
                                                    _cwc_4662 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                    _cwc_4228 = _cwc_4662; 
                                                  }
                                                  else
                                                  { 
                                                    _cwc_4656 = true; 
                                                    _cwc_4659 = 14; 
                                                    _cwc_4657 = [ 0 ]; 
                                                    _cwc_4658 = _sel_VxA_( _cwc_4657, _cwc_4654); 
                                                    _cwc_4660 = _eq_SxS_( _cwc_4658, _cwc_4659); 
                                                    _cwc_4661 = _and_SxS_( _cwc_4660, _cwc_4656); 
                                                    if (_cwc_4661) 
                                                    { 
                                                      _cwc_4655 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                      _cwc_4228 = _cwc_4655; 
                                                    }
                                                    else
                                                    { 
                                                      _cwc_4653 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                      _cwc_4228 = _cwc_4653; 
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          else
                                          { 
                                            _cwc_4651 = ( arr_a ArrayTransform::++arr_b) ; 
                                            _cwc_4228 = _cwc_4651; 
                                          }
                                        }
                                        else
                                        { 
                                          _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                        }
                                      }
                                    }
                                    else
                                    { 
                                      _cwc_4645 = true; 
                                      _cwc_4648 = 42; 
                                      _cwc_4646 = [ 0 ]; 
                                      _cwc_4647 = _sel_VxA_( _cwc_4646, _cwc_4326); 
                                      _cwc_4649 = _eq_SxS_( _cwc_4647, _cwc_4648); 
                                      _cwc_4650 = _and_SxS_( _cwc_4649, _cwc_4645); 
                                      if (_cwc_4650) 
                                      { 
                                        _cwc_4641 = _dim_A_( arr_b); 
                                        _cwc_4643 = 0; 
                                        _cwc_4644 = _eq_SxS_( _cwc_4641, _cwc_4643); 
                                        if (_cwc_4644) 
                                        { 
                                          _cwc_4642 = ( arr_a ArrayTransform::++arr_b) ; 
                                          _cwc_4228 = _cwc_4642; 
                                        }
                                        else
                                        { 
                                          _cwc_4638 = _dim_A_( arr_b); 
                                          _cwc_4639 = 0; 
                                          _cwc_4640 = _gt_SxS_( _cwc_4638, _cwc_4639); 
                                          if (_cwc_4640) 
                                          { 
                                            _cwc_4598 = _dim_A_( arr_b); 
                                            _cwc_4636 = 1; 
                                            _cwc_4637 = _eq_SxS_( _cwc_4598, _cwc_4636); 
                                            if (_cwc_4637) 
                                            { 
                                              _cwc_4600 = _shape_A_( arr_b); 
                                              _cwc_4630 = true; 
                                              _cwc_4633 = 1; 
                                              _cwc_4631 = [ 0 ]; 
                                              _cwc_4632 = _sel_VxA_( _cwc_4631, _cwc_4600); 
                                              _cwc_4634 = _eq_SxS_( _cwc_4632, _cwc_4633); 
                                              _cwc_4635 = _and_SxS_( _cwc_4634, _cwc_4630); 
                                              if (_cwc_4635) 
                                              { 
                                                _cwc_4629 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                _cwc_4228 = _cwc_4629; 
                                              }
                                              else
                                              { 
                                                _cwc_4623 = true; 
                                                _cwc_4626 = 4; 
                                                _cwc_4624 = [ 0 ]; 
                                                _cwc_4625 = _sel_VxA_( _cwc_4624, _cwc_4600); 
                                                _cwc_4627 = _eq_SxS_( _cwc_4625, _cwc_4626); 
                                                _cwc_4628 = _and_SxS_( _cwc_4627, _cwc_4623); 
                                                if (_cwc_4628) 
                                                { 
                                                  _cwc_4622 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                  _cwc_4228 = _cwc_4622; 
                                                }
                                                else
                                                { 
                                                  _cwc_4616 = true; 
                                                  _cwc_4619 = 8; 
                                                  _cwc_4617 = [ 0 ]; 
                                                  _cwc_4618 = _sel_VxA_( _cwc_4617, _cwc_4600); 
                                                  _cwc_4620 = _eq_SxS_( _cwc_4618, _cwc_4619); 
                                                  _cwc_4621 = _and_SxS_( _cwc_4620, _cwc_4616); 
                                                  if (_cwc_4621) 
                                                  { 
                                                    _cwc_4615 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                    _cwc_4228 = _cwc_4615; 
                                                  }
                                                  else
                                                  { 
                                                    _cwc_4609 = true; 
                                                    _cwc_4612 = 12; 
                                                    _cwc_4610 = [ 0 ]; 
                                                    _cwc_4611 = _sel_VxA_( _cwc_4610, _cwc_4600); 
                                                    _cwc_4613 = _eq_SxS_( _cwc_4611, _cwc_4612); 
                                                    _cwc_4614 = _and_SxS_( _cwc_4613, _cwc_4609); 
                                                    if (_cwc_4614) 
                                                    { 
                                                      _cwc_4608 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                      _cwc_4228 = _cwc_4608; 
                                                    }
                                                    else
                                                    { 
                                                      _cwc_4602 = true; 
                                                      _cwc_4605 = 14; 
                                                      _cwc_4603 = [ 0 ]; 
                                                      _cwc_4604 = _sel_VxA_( _cwc_4603, _cwc_4600); 
                                                      _cwc_4606 = _eq_SxS_( _cwc_4604, _cwc_4605); 
                                                      _cwc_4607 = _and_SxS_( _cwc_4606, _cwc_4602); 
                                                      if (_cwc_4607) 
                                                      { 
                                                        _cwc_4601 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                        _cwc_4228 = _cwc_4601; 
                                                      }
                                                      else
                                                      { 
                                                        _cwc_4599 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                        _cwc_4228 = _cwc_4599; 
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            else
                                            { 
                                              _cwc_4597 = ( arr_a ArrayTransform::++arr_b) ; 
                                              _cwc_4228 = _cwc_4597; 
                                            }
                                          }
                                          else
                                          { 
                                            _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                          }
                                        }
                                      }
                                      else
                                      { 
                                        _cwc_4591 = true; 
                                        _cwc_4594 = 56; 
                                        _cwc_4592 = [ 0 ]; 
                                        _cwc_4593 = _sel_VxA_( _cwc_4592, _cwc_4326); 
                                        _cwc_4595 = _eq_SxS_( _cwc_4593, _cwc_4594); 
                                        _cwc_4596 = _and_SxS_( _cwc_4595, _cwc_4591); 
                                        if (_cwc_4596) 
                                        { 
                                          _cwc_4587 = _dim_A_( arr_b); 
                                          _cwc_4589 = 0; 
                                          _cwc_4590 = _eq_SxS_( _cwc_4587, _cwc_4589); 
                                          if (_cwc_4590) 
                                          { 
                                            _cwc_4588 = ( arr_a ArrayTransform::++arr_b) ; 
                                            _cwc_4228 = _cwc_4588; 
                                          }
                                          else
                                          { 
                                            _cwc_4584 = _dim_A_( arr_b); 
                                            _cwc_4585 = 0; 
                                            _cwc_4586 = _gt_SxS_( _cwc_4584, _cwc_4585); 
                                            if (_cwc_4586) 
                                            { 
                                              _cwc_4544 = _dim_A_( arr_b); 
                                              _cwc_4582 = 1; 
                                              _cwc_4583 = _eq_SxS_( _cwc_4544, _cwc_4582); 
                                              if (_cwc_4583) 
                                              { 
                                                _cwc_4546 = _shape_A_( arr_b); 
                                                _cwc_4576 = true; 
                                                _cwc_4579 = 1; 
                                                _cwc_4577 = [ 0 ]; 
                                                _cwc_4578 = _sel_VxA_( _cwc_4577, _cwc_4546); 
                                                _cwc_4580 = _eq_SxS_( _cwc_4578, _cwc_4579); 
                                                _cwc_4581 = _and_SxS_( _cwc_4580, _cwc_4576); 
                                                if (_cwc_4581) 
                                                { 
                                                  _cwc_4575 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                  _cwc_4228 = _cwc_4575; 
                                                }
                                                else
                                                { 
                                                  _cwc_4569 = true; 
                                                  _cwc_4572 = 4; 
                                                  _cwc_4570 = [ 0 ]; 
                                                  _cwc_4571 = _sel_VxA_( _cwc_4570, _cwc_4546); 
                                                  _cwc_4573 = _eq_SxS_( _cwc_4571, _cwc_4572); 
                                                  _cwc_4574 = _and_SxS_( _cwc_4573, _cwc_4569); 
                                                  if (_cwc_4574) 
                                                  { 
                                                    _cwc_4568 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                    _cwc_4228 = _cwc_4568; 
                                                  }
                                                  else
                                                  { 
                                                    _cwc_4562 = true; 
                                                    _cwc_4565 = 8; 
                                                    _cwc_4563 = [ 0 ]; 
                                                    _cwc_4564 = _sel_VxA_( _cwc_4563, _cwc_4546); 
                                                    _cwc_4566 = _eq_SxS_( _cwc_4564, _cwc_4565); 
                                                    _cwc_4567 = _and_SxS_( _cwc_4566, _cwc_4562); 
                                                    if (_cwc_4567) 
                                                    { 
                                                      _cwc_4561 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                      _cwc_4228 = _cwc_4561; 
                                                    }
                                                    else
                                                    { 
                                                      _cwc_4555 = true; 
                                                      _cwc_4558 = 12; 
                                                      _cwc_4556 = [ 0 ]; 
                                                      _cwc_4557 = _sel_VxA_( _cwc_4556, _cwc_4546); 
                                                      _cwc_4559 = _eq_SxS_( _cwc_4557, _cwc_4558); 
                                                      _cwc_4560 = _and_SxS_( _cwc_4559, _cwc_4555); 
                                                      if (_cwc_4560) 
                                                      { 
                                                        _cwc_4554 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                        _cwc_4228 = _cwc_4554; 
                                                      }
                                                      else
                                                      { 
                                                        _cwc_4548 = true; 
                                                        _cwc_4551 = 14; 
                                                        _cwc_4549 = [ 0 ]; 
                                                        _cwc_4550 = _sel_VxA_( _cwc_4549, _cwc_4546); 
                                                        _cwc_4552 = _eq_SxS_( _cwc_4550, _cwc_4551); 
                                                        _cwc_4553 = _and_SxS_( _cwc_4552, _cwc_4548); 
                                                        if (_cwc_4553) 
                                                        { 
                                                          _cwc_4547 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                          _cwc_4228 = _cwc_4547; 
                                                        }
                                                        else
                                                        { 
                                                          _cwc_4545 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                          _cwc_4228 = _cwc_4545; 
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                              else
                                              { 
                                                _cwc_4543 = ( arr_a ArrayTransform::++arr_b) ; 
                                                _cwc_4228 = _cwc_4543; 
                                              }
                                            }
                                            else
                                            { 
                                              _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                            }
                                          }
                                        }
                                        else
                                        { 
                                          _cwc_4537 = true; 
                                          _cwc_4540 = 70; 
                                          _cwc_4538 = [ 0 ]; 
                                          _cwc_4539 = _sel_VxA_( _cwc_4538, _cwc_4326); 
                                          _cwc_4541 = _eq_SxS_( _cwc_4539, _cwc_4540); 
                                          _cwc_4542 = _and_SxS_( _cwc_4541, _cwc_4537); 
                                          if (_cwc_4542) 
                                          { 
                                            _cwc_4533 = _dim_A_( arr_b); 
                                            _cwc_4535 = 0; 
                                            _cwc_4536 = _eq_SxS_( _cwc_4533, _cwc_4535); 
                                            if (_cwc_4536) 
                                            { 
                                              _cwc_4534 = ( arr_a ArrayTransform::++arr_b) ; 
                                              _cwc_4228 = _cwc_4534; 
                                            }
                                            else
                                            { 
                                              _cwc_4530 = _dim_A_( arr_b); 
                                              _cwc_4531 = 0; 
                                              _cwc_4532 = _gt_SxS_( _cwc_4530, _cwc_4531); 
                                              if (_cwc_4532) 
                                              { 
                                                _cwc_4490 = _dim_A_( arr_b); 
                                                _cwc_4528 = 1; 
                                                _cwc_4529 = _eq_SxS_( _cwc_4490, _cwc_4528); 
                                                if (_cwc_4529) 
                                                { 
                                                  _cwc_4492 = _shape_A_( arr_b); 
                                                  _cwc_4522 = true; 
                                                  _cwc_4525 = 1; 
                                                  _cwc_4523 = [ 0 ]; 
                                                  _cwc_4524 = _sel_VxA_( _cwc_4523, _cwc_4492); 
                                                  _cwc_4526 = _eq_SxS_( _cwc_4524, _cwc_4525); 
                                                  _cwc_4527 = _and_SxS_( _cwc_4526, _cwc_4522); 
                                                  if (_cwc_4527) 
                                                  { 
                                                    _cwc_4521 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                    _cwc_4228 = _cwc_4521; 
                                                  }
                                                  else
                                                  { 
                                                    _cwc_4515 = true; 
                                                    _cwc_4518 = 4; 
                                                    _cwc_4516 = [ 0 ]; 
                                                    _cwc_4517 = _sel_VxA_( _cwc_4516, _cwc_4492); 
                                                    _cwc_4519 = _eq_SxS_( _cwc_4517, _cwc_4518); 
                                                    _cwc_4520 = _and_SxS_( _cwc_4519, _cwc_4515); 
                                                    if (_cwc_4520) 
                                                    { 
                                                      _cwc_4514 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                      _cwc_4228 = _cwc_4514; 
                                                    }
                                                    else
                                                    { 
                                                      _cwc_4508 = true; 
                                                      _cwc_4511 = 8; 
                                                      _cwc_4509 = [ 0 ]; 
                                                      _cwc_4510 = _sel_VxA_( _cwc_4509, _cwc_4492); 
                                                      _cwc_4512 = _eq_SxS_( _cwc_4510, _cwc_4511); 
                                                      _cwc_4513 = _and_SxS_( _cwc_4512, _cwc_4508); 
                                                      if (_cwc_4513) 
                                                      { 
                                                        _cwc_4507 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                        _cwc_4228 = _cwc_4507; 
                                                      }
                                                      else
                                                      { 
                                                        _cwc_4501 = true; 
                                                        _cwc_4504 = 12; 
                                                        _cwc_4502 = [ 0 ]; 
                                                        _cwc_4503 = _sel_VxA_( _cwc_4502, _cwc_4492); 
                                                        _cwc_4505 = _eq_SxS_( _cwc_4503, _cwc_4504); 
                                                        _cwc_4506 = _and_SxS_( _cwc_4505, _cwc_4501); 
                                                        if (_cwc_4506) 
                                                        { 
                                                          _cwc_4500 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                          _cwc_4228 = _cwc_4500; 
                                                        }
                                                        else
                                                        { 
                                                          _cwc_4494 = true; 
                                                          _cwc_4497 = 14; 
                                                          _cwc_4495 = [ 0 ]; 
                                                          _cwc_4496 = _sel_VxA_( _cwc_4495, _cwc_4492); 
                                                          _cwc_4498 = _eq_SxS_( _cwc_4496, _cwc_4497); 
                                                          _cwc_4499 = _and_SxS_( _cwc_4498, _cwc_4494); 
                                                          if (_cwc_4499) 
                                                          { 
                                                            _cwc_4493 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                            _cwc_4228 = _cwc_4493; 
                                                          }
                                                          else
                                                          { 
                                                            _cwc_4491 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                            _cwc_4228 = _cwc_4491; 
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                else
                                                { 
                                                  _cwc_4489 = ( arr_a ArrayTransform::++arr_b) ; 
                                                  _cwc_4228 = _cwc_4489; 
                                                }
                                              }
                                              else
                                              { 
                                                _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                              }
                                            }
                                          }
                                          else
                                          { 
                                            _cwc_4483 = true; 
                                            _cwc_4486 = 84; 
                                            _cwc_4484 = [ 0 ]; 
                                            _cwc_4485 = _sel_VxA_( _cwc_4484, _cwc_4326); 
                                            _cwc_4487 = _eq_SxS_( _cwc_4485, _cwc_4486); 
                                            _cwc_4488 = _and_SxS_( _cwc_4487, _cwc_4483); 
                                            if (_cwc_4488) 
                                            { 
                                              _cwc_4479 = _dim_A_( arr_b); 
                                              _cwc_4481 = 0; 
                                              _cwc_4482 = _eq_SxS_( _cwc_4479, _cwc_4481); 
                                              if (_cwc_4482) 
                                              { 
                                                _cwc_4480 = ( arr_a ArrayTransform::++arr_b) ; 
                                                _cwc_4228 = _cwc_4480; 
                                              }
                                              else
                                              { 
                                                _cwc_4476 = _dim_A_( arr_b); 
                                                _cwc_4477 = 0; 
                                                _cwc_4478 = _gt_SxS_( _cwc_4476, _cwc_4477); 
                                                if (_cwc_4478) 
                                                { 
                                                  _cwc_4436 = _dim_A_( arr_b); 
                                                  _cwc_4474 = 1; 
                                                  _cwc_4475 = _eq_SxS_( _cwc_4436, _cwc_4474); 
                                                  if (_cwc_4475) 
                                                  { 
                                                    _cwc_4438 = _shape_A_( arr_b); 
                                                    _cwc_4468 = true; 
                                                    _cwc_4471 = 1; 
                                                    _cwc_4469 = [ 0 ]; 
                                                    _cwc_4470 = _sel_VxA_( _cwc_4469, _cwc_4438); 
                                                    _cwc_4472 = _eq_SxS_( _cwc_4470, _cwc_4471); 
                                                    _cwc_4473 = _and_SxS_( _cwc_4472, _cwc_4468); 
                                                    if (_cwc_4473) 
                                                    { 
                                                      _cwc_4467 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                      _cwc_4228 = _cwc_4467; 
                                                    }
                                                    else
                                                    { 
                                                      _cwc_4461 = true; 
                                                      _cwc_4464 = 4; 
                                                      _cwc_4462 = [ 0 ]; 
                                                      _cwc_4463 = _sel_VxA_( _cwc_4462, _cwc_4438); 
                                                      _cwc_4465 = _eq_SxS_( _cwc_4463, _cwc_4464); 
                                                      _cwc_4466 = _and_SxS_( _cwc_4465, _cwc_4461); 
                                                      if (_cwc_4466) 
                                                      { 
                                                        _cwc_4460 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                        _cwc_4228 = _cwc_4460; 
                                                      }
                                                      else
                                                      { 
                                                        _cwc_4454 = true; 
                                                        _cwc_4457 = 8; 
                                                        _cwc_4455 = [ 0 ]; 
                                                        _cwc_4456 = _sel_VxA_( _cwc_4455, _cwc_4438); 
                                                        _cwc_4458 = _eq_SxS_( _cwc_4456, _cwc_4457); 
                                                        _cwc_4459 = _and_SxS_( _cwc_4458, _cwc_4454); 
                                                        if (_cwc_4459) 
                                                        { 
                                                          _cwc_4453 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                          _cwc_4228 = _cwc_4453; 
                                                        }
                                                        else
                                                        { 
                                                          _cwc_4447 = true; 
                                                          _cwc_4450 = 12; 
                                                          _cwc_4448 = [ 0 ]; 
                                                          _cwc_4449 = _sel_VxA_( _cwc_4448, _cwc_4438); 
                                                          _cwc_4451 = _eq_SxS_( _cwc_4449, _cwc_4450); 
                                                          _cwc_4452 = _and_SxS_( _cwc_4451, _cwc_4447); 
                                                          if (_cwc_4452) 
                                                          { 
                                                            _cwc_4446 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                            _cwc_4228 = _cwc_4446; 
                                                          }
                                                          else
                                                          { 
                                                            _cwc_4440 = true; 
                                                            _cwc_4443 = 14; 
                                                            _cwc_4441 = [ 0 ]; 
                                                            _cwc_4442 = _sel_VxA_( _cwc_4441, _cwc_4438); 
                                                            _cwc_4444 = _eq_SxS_( _cwc_4442, _cwc_4443); 
                                                            _cwc_4445 = _and_SxS_( _cwc_4444, _cwc_4440); 
                                                            if (_cwc_4445) 
                                                            { 
                                                              _cwc_4439 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                              _cwc_4228 = _cwc_4439; 
                                                            }
                                                            else
                                                            { 
                                                              _cwc_4437 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                              _cwc_4228 = _cwc_4437; 
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                  else
                                                  { 
                                                    _cwc_4435 = ( arr_a ArrayTransform::++arr_b) ; 
                                                    _cwc_4228 = _cwc_4435; 
                                                  }
                                                }
                                                else
                                                { 
                                                  _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                                }
                                              }
                                            }
                                            else
                                            { 
                                              _cwc_4429 = true; 
                                              _cwc_4432 = 98; 
                                              _cwc_4430 = [ 0 ]; 
                                              _cwc_4431 = _sel_VxA_( _cwc_4430, _cwc_4326); 
                                              _cwc_4433 = _eq_SxS_( _cwc_4431, _cwc_4432); 
                                              _cwc_4434 = _and_SxS_( _cwc_4433, _cwc_4429); 
                                              if (_cwc_4434) 
                                              { 
                                                _cwc_4425 = _dim_A_( arr_b); 
                                                _cwc_4427 = 0; 
                                                _cwc_4428 = _eq_SxS_( _cwc_4425, _cwc_4427); 
                                                if (_cwc_4428) 
                                                { 
                                                  _cwc_4426 = ( arr_a ArrayTransform::++arr_b) ; 
                                                  _cwc_4228 = _cwc_4426; 
                                                }
                                                else
                                                { 
                                                  _cwc_4422 = _dim_A_( arr_b); 
                                                  _cwc_4423 = 0; 
                                                  _cwc_4424 = _gt_SxS_( _cwc_4422, _cwc_4423); 
                                                  if (_cwc_4424) 
                                                  { 
                                                    _cwc_4382 = _dim_A_( arr_b); 
                                                    _cwc_4420 = 1; 
                                                    _cwc_4421 = _eq_SxS_( _cwc_4382, _cwc_4420); 
                                                    if (_cwc_4421) 
                                                    { 
                                                      _cwc_4384 = _shape_A_( arr_b); 
                                                      _cwc_4414 = true; 
                                                      _cwc_4417 = 1; 
                                                      _cwc_4415 = [ 0 ]; 
                                                      _cwc_4416 = _sel_VxA_( _cwc_4415, _cwc_4384); 
                                                      _cwc_4418 = _eq_SxS_( _cwc_4416, _cwc_4417); 
                                                      _cwc_4419 = _and_SxS_( _cwc_4418, _cwc_4414); 
                                                      if (_cwc_4419) 
                                                      { 
                                                        _cwc_4413 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                        _cwc_4228 = _cwc_4413; 
                                                      }
                                                      else
                                                      { 
                                                        _cwc_4407 = true; 
                                                        _cwc_4410 = 4; 
                                                        _cwc_4408 = [ 0 ]; 
                                                        _cwc_4409 = _sel_VxA_( _cwc_4408, _cwc_4384); 
                                                        _cwc_4411 = _eq_SxS_( _cwc_4409, _cwc_4410); 
                                                        _cwc_4412 = _and_SxS_( _cwc_4411, _cwc_4407); 
                                                        if (_cwc_4412) 
                                                        { 
                                                          _cwc_4406 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                          _cwc_4228 = _cwc_4406; 
                                                        }
                                                        else
                                                        { 
                                                          _cwc_4400 = true; 
                                                          _cwc_4403 = 8; 
                                                          _cwc_4401 = [ 0 ]; 
                                                          _cwc_4402 = _sel_VxA_( _cwc_4401, _cwc_4384); 
                                                          _cwc_4404 = _eq_SxS_( _cwc_4402, _cwc_4403); 
                                                          _cwc_4405 = _and_SxS_( _cwc_4404, _cwc_4400); 
                                                          if (_cwc_4405) 
                                                          { 
                                                            _cwc_4399 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                            _cwc_4228 = _cwc_4399; 
                                                          }
                                                          else
                                                          { 
                                                            _cwc_4393 = true; 
                                                            _cwc_4396 = 12; 
                                                            _cwc_4394 = [ 0 ]; 
                                                            _cwc_4395 = _sel_VxA_( _cwc_4394, _cwc_4384); 
                                                            _cwc_4397 = _eq_SxS_( _cwc_4395, _cwc_4396); 
                                                            _cwc_4398 = _and_SxS_( _cwc_4397, _cwc_4393); 
                                                            if (_cwc_4398) 
                                                            { 
                                                              _cwc_4392 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                              _cwc_4228 = _cwc_4392; 
                                                            }
                                                            else
                                                            { 
                                                              _cwc_4386 = true; 
                                                              _cwc_4389 = 14; 
                                                              _cwc_4387 = [ 0 ]; 
                                                              _cwc_4388 = _sel_VxA_( _cwc_4387, _cwc_4384); 
                                                              _cwc_4390 = _eq_SxS_( _cwc_4388, _cwc_4389); 
                                                              _cwc_4391 = _and_SxS_( _cwc_4390, _cwc_4386); 
                                                              if (_cwc_4391) 
                                                              { 
                                                                _cwc_4385 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                                _cwc_4228 = _cwc_4385; 
                                                              }
                                                              else
                                                              { 
                                                                _cwc_4383 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                                _cwc_4228 = _cwc_4383; 
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                    else
                                                    { 
                                                      _cwc_4381 = ( arr_a ArrayTransform::++arr_b) ; 
                                                      _cwc_4228 = _cwc_4381; 
                                                    }
                                                  }
                                                  else
                                                  { 
                                                    _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                                  }
                                                }
                                              }
                                              else
                                              { 
                                                _cwc_4375 = true; 
                                                _cwc_4378 = 112; 
                                                _cwc_4376 = [ 0 ]; 
                                                _cwc_4377 = _sel_VxA_( _cwc_4376, _cwc_4326); 
                                                _cwc_4379 = _eq_SxS_( _cwc_4377, _cwc_4378); 
                                                _cwc_4380 = _and_SxS_( _cwc_4379, _cwc_4375); 
                                                if (_cwc_4380) 
                                                { 
                                                  _cwc_4371 = _dim_A_( arr_b); 
                                                  _cwc_4373 = 0; 
                                                  _cwc_4374 = _eq_SxS_( _cwc_4371, _cwc_4373); 
                                                  if (_cwc_4374) 
                                                  { 
                                                    _cwc_4372 = ( arr_a ArrayTransform::++arr_b) ; 
                                                    _cwc_4228 = _cwc_4372; 
                                                  }
                                                  else
                                                  { 
                                                    _cwc_4368 = _dim_A_( arr_b); 
                                                    _cwc_4369 = 0; 
                                                    _cwc_4370 = _gt_SxS_( _cwc_4368, _cwc_4369); 
                                                    if (_cwc_4370) 
                                                    { 
                                                      _cwc_4328 = _dim_A_( arr_b); 
                                                      _cwc_4366 = 1; 
                                                      _cwc_4367 = _eq_SxS_( _cwc_4328, _cwc_4366); 
                                                      if (_cwc_4367) 
                                                      { 
                                                        _cwc_4330 = _shape_A_( arr_b); 
                                                        _cwc_4360 = true; 
                                                        _cwc_4363 = 1; 
                                                        _cwc_4361 = [ 0 ]; 
                                                        _cwc_4362 = _sel_VxA_( _cwc_4361, _cwc_4330); 
                                                        _cwc_4364 = _eq_SxS_( _cwc_4362, _cwc_4363); 
                                                        _cwc_4365 = _and_SxS_( _cwc_4364, _cwc_4360); 
                                                        if (_cwc_4365) 
                                                        { 
                                                          _cwc_4359 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                          _cwc_4228 = _cwc_4359; 
                                                        }
                                                        else
                                                        { 
                                                          _cwc_4353 = true; 
                                                          _cwc_4356 = 4; 
                                                          _cwc_4354 = [ 0 ]; 
                                                          _cwc_4355 = _sel_VxA_( _cwc_4354, _cwc_4330); 
                                                          _cwc_4357 = _eq_SxS_( _cwc_4355, _cwc_4356); 
                                                          _cwc_4358 = _and_SxS_( _cwc_4357, _cwc_4353); 
                                                          if (_cwc_4358) 
                                                          { 
                                                            _cwc_4352 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                            _cwc_4228 = _cwc_4352; 
                                                          }
                                                          else
                                                          { 
                                                            _cwc_4346 = true; 
                                                            _cwc_4349 = 8; 
                                                            _cwc_4347 = [ 0 ]; 
                                                            _cwc_4348 = _sel_VxA_( _cwc_4347, _cwc_4330); 
                                                            _cwc_4350 = _eq_SxS_( _cwc_4348, _cwc_4349); 
                                                            _cwc_4351 = _and_SxS_( _cwc_4350, _cwc_4346); 
                                                            if (_cwc_4351) 
                                                            { 
                                                              _cwc_4345 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                              _cwc_4228 = _cwc_4345; 
                                                            }
                                                            else
                                                            { 
                                                              _cwc_4339 = true; 
                                                              _cwc_4342 = 12; 
                                                              _cwc_4340 = [ 0 ]; 
                                                              _cwc_4341 = _sel_VxA_( _cwc_4340, _cwc_4330); 
                                                              _cwc_4343 = _eq_SxS_( _cwc_4341, _cwc_4342); 
                                                              _cwc_4344 = _and_SxS_( _cwc_4343, _cwc_4339); 
                                                              if (_cwc_4344) 
                                                              { 
                                                                _cwc_4338 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                                _cwc_4228 = _cwc_4338; 
                                                              }
                                                              else
                                                              { 
                                                                _cwc_4332 = true; 
                                                                _cwc_4335 = 14; 
                                                                _cwc_4333 = [ 0 ]; 
                                                                _cwc_4334 = _sel_VxA_( _cwc_4333, _cwc_4330); 
                                                                _cwc_4336 = _eq_SxS_( _cwc_4334, _cwc_4335); 
                                                                _cwc_4337 = _and_SxS_( _cwc_4336, _cwc_4332); 
                                                                if (_cwc_4337) 
                                                                { 
                                                                  _cwc_4331 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                                  _cwc_4228 = _cwc_4331; 
                                                                }
                                                                else
                                                                { 
                                                                  _cwc_4329 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                                  _cwc_4228 = _cwc_4329; 
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      else
                                                      { 
                                                        _cwc_4327 = ( arr_a ArrayTransform::++arr_b) ; 
                                                        _cwc_4228 = _cwc_4327; 
                                                      }
                                                    }
                                                    else
                                                    { 
                                                      _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                                    }
                                                  }
                                                }
                                                else
                                                { 
                                                  _cwc_4322 = _dim_A_( arr_b); 
                                                  _cwc_4324 = 0; 
                                                  _cwc_4325 = _eq_SxS_( _cwc_4322, _cwc_4324); 
                                                  if (_cwc_4325) 
                                                  { 
                                                    _cwc_4323 = ( arr_a ArrayTransform::++arr_b) ; 
                                                    _cwc_4228 = _cwc_4323; 
                                                  }
                                                  else
                                                  { 
                                                    _cwc_4319 = _dim_A_( arr_b); 
                                                    _cwc_4320 = 0; 
                                                    _cwc_4321 = _gt_SxS_( _cwc_4319, _cwc_4320); 
                                                    if (_cwc_4321) 
                                                    { 
                                                      _cwc_4279 = _dim_A_( arr_b); 
                                                      _cwc_4317 = 1; 
                                                      _cwc_4318 = _eq_SxS_( _cwc_4279, _cwc_4317); 
                                                      if (_cwc_4318) 
                                                      { 
                                                        _cwc_4281 = _shape_A_( arr_b); 
                                                        _cwc_4311 = true; 
                                                        _cwc_4314 = 1; 
                                                        _cwc_4312 = [ 0 ]; 
                                                        _cwc_4313 = _sel_VxA_( _cwc_4312, _cwc_4281); 
                                                        _cwc_4315 = _eq_SxS_( _cwc_4313, _cwc_4314); 
                                                        _cwc_4316 = _and_SxS_( _cwc_4315, _cwc_4311); 
                                                        if (_cwc_4316) 
                                                        { 
                                                          _cwc_4310 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                          _cwc_4228 = _cwc_4310; 
                                                        }
                                                        else
                                                        { 
                                                          _cwc_4304 = true; 
                                                          _cwc_4307 = 4; 
                                                          _cwc_4305 = [ 0 ]; 
                                                          _cwc_4306 = _sel_VxA_( _cwc_4305, _cwc_4281); 
                                                          _cwc_4308 = _eq_SxS_( _cwc_4306, _cwc_4307); 
                                                          _cwc_4309 = _and_SxS_( _cwc_4308, _cwc_4304); 
                                                          if (_cwc_4309) 
                                                          { 
                                                            _cwc_4303 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                            _cwc_4228 = _cwc_4303; 
                                                          }
                                                          else
                                                          { 
                                                            _cwc_4297 = true; 
                                                            _cwc_4300 = 8; 
                                                            _cwc_4298 = [ 0 ]; 
                                                            _cwc_4299 = _sel_VxA_( _cwc_4298, _cwc_4281); 
                                                            _cwc_4301 = _eq_SxS_( _cwc_4299, _cwc_4300); 
                                                            _cwc_4302 = _and_SxS_( _cwc_4301, _cwc_4297); 
                                                            if (_cwc_4302) 
                                                            { 
                                                              _cwc_4296 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                              _cwc_4228 = _cwc_4296; 
                                                            }
                                                            else
                                                            { 
                                                              _cwc_4290 = true; 
                                                              _cwc_4293 = 12; 
                                                              _cwc_4291 = [ 0 ]; 
                                                              _cwc_4292 = _sel_VxA_( _cwc_4291, _cwc_4281); 
                                                              _cwc_4294 = _eq_SxS_( _cwc_4292, _cwc_4293); 
                                                              _cwc_4295 = _and_SxS_( _cwc_4294, _cwc_4290); 
                                                              if (_cwc_4295) 
                                                              { 
                                                                _cwc_4289 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                                _cwc_4228 = _cwc_4289; 
                                                              }
                                                              else
                                                              { 
                                                                _cwc_4283 = true; 
                                                                _cwc_4286 = 14; 
                                                                _cwc_4284 = [ 0 ]; 
                                                                _cwc_4285 = _sel_VxA_( _cwc_4284, _cwc_4281); 
                                                                _cwc_4287 = _eq_SxS_( _cwc_4285, _cwc_4286); 
                                                                _cwc_4288 = _and_SxS_( _cwc_4287, _cwc_4283); 
                                                                if (_cwc_4288) 
                                                                { 
                                                                  _cwc_4282 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                                  _cwc_4228 = _cwc_4282; 
                                                                }
                                                                else
                                                                { 
                                                                  _cwc_4280 = ( arr_a UTDScalarB:Array::++arr_b) ; 
                                                                  _cwc_4228 = _cwc_4280; 
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      else
                                                      { 
                                                        _cwc_4278 = ( arr_a ArrayTransform::++arr_b) ; 
                                                        _cwc_4228 = _cwc_4278; 
                                                      }
                                                    }
                                                    else
                                                    { 
                                                      _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      { 
        _cwc_4273 = _dim_A_( arr_b); 
        _cwc_4275 = 0; 
        _cwc_4276 = _eq_SxS_( _cwc_4273, _cwc_4275); 
        if (_cwc_4276) 
        { 
          _cwc_4274 = ( arr_a ArrayTransform::++arr_b) ; 
          _cwc_4228 = _cwc_4274; 
        }
        else
        { 
          _cwc_4270 = _dim_A_( arr_b); 
          _cwc_4271 = 0; 
          _cwc_4272 = _gt_SxS_( _cwc_4270, _cwc_4271); 
          if (_cwc_4272) 
          { 
            _cwc_4230 = _dim_A_( arr_b); 
            _cwc_4268 = 1; 
            _cwc_4269 = _eq_SxS_( _cwc_4230, _cwc_4268); 
            if (_cwc_4269) 
            { 
              _cwc_4232 = _shape_A_( arr_b); 
              _cwc_4262 = true; 
              _cwc_4265 = 1; 
              _cwc_4263 = [ 0 ]; 
              _cwc_4264 = _sel_VxA_( _cwc_4263, _cwc_4232); 
              _cwc_4266 = _eq_SxS_( _cwc_4264, _cwc_4265); 
              _cwc_4267 = _and_SxS_( _cwc_4266, _cwc_4262); 
              if (_cwc_4267) 
              { 
                _cwc_4261 = ( arr_a ArrayTransform::++arr_b) ; 
                _cwc_4228 = _cwc_4261; 
              }
              else
              { 
                _cwc_4255 = true; 
                _cwc_4258 = 4; 
                _cwc_4256 = [ 0 ]; 
                _cwc_4257 = _sel_VxA_( _cwc_4256, _cwc_4232); 
                _cwc_4259 = _eq_SxS_( _cwc_4257, _cwc_4258); 
                _cwc_4260 = _and_SxS_( _cwc_4259, _cwc_4255); 
                if (_cwc_4260) 
                { 
                  _cwc_4254 = ( arr_a ArrayTransform::++arr_b) ; 
                  _cwc_4228 = _cwc_4254; 
                }
                else
                { 
                  _cwc_4248 = true; 
                  _cwc_4251 = 8; 
                  _cwc_4249 = [ 0 ]; 
                  _cwc_4250 = _sel_VxA_( _cwc_4249, _cwc_4232); 
                  _cwc_4252 = _eq_SxS_( _cwc_4250, _cwc_4251); 
                  _cwc_4253 = _and_SxS_( _cwc_4252, _cwc_4248); 
                  if (_cwc_4253) 
                  { 
                    _cwc_4247 = ( arr_a ArrayTransform::++arr_b) ; 
                    _cwc_4228 = _cwc_4247; 
                  }
                  else
                  { 
                    _cwc_4241 = true; 
                    _cwc_4244 = 12; 
                    _cwc_4242 = [ 0 ]; 
                    _cwc_4243 = _sel_VxA_( _cwc_4242, _cwc_4232); 
                    _cwc_4245 = _eq_SxS_( _cwc_4243, _cwc_4244); 
                    _cwc_4246 = _and_SxS_( _cwc_4245, _cwc_4241); 
                    if (_cwc_4246) 
                    { 
                      _cwc_4240 = ( arr_a ArrayTransform::++arr_b) ; 
                      _cwc_4228 = _cwc_4240; 
                    }
                    else
                    { 
                      _cwc_4234 = true; 
                      _cwc_4237 = 14; 
                      _cwc_4235 = [ 0 ]; 
                      _cwc_4236 = _sel_VxA_( _cwc_4235, _cwc_4232); 
                      _cwc_4238 = _eq_SxS_( _cwc_4236, _cwc_4237); 
                      _cwc_4239 = _and_SxS_( _cwc_4238, _cwc_4234); 
                      if (_cwc_4239) 
                      { 
                        _cwc_4233 = ( arr_a ArrayTransform::++arr_b) ; 
                        _cwc_4228 = _cwc_4233; 
                      }
                      else
                      { 
                        _cwc_4231 = ( arr_a ArrayTransform::++arr_b) ; 
                        _cwc_4228 = _cwc_4231; 
                      }
                    }
                  }
                }
              }
            }
            else
            { 
              _cwc_4229 = ( arr_a ArrayTransform::++arr_b) ; 
              _cwc_4228 = _cwc_4229; 
            }
          }
          else
          { 
            _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
          }
        }
      }
    }
    else
    { 
      _cwc_4228 = _dispatch_error_( 1, bool[+], "UTDScalarB:Array::++ :: bool[*] bool[*] -> bool[+] ", arr_a, arr_b); 
    }
  }
  return( _cwc_4228); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::sel(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:Array::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*]),
                         bool -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[4] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[4,4] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*]),
                         bool -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[4] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[4,4] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int[.] -> { bool[*] -> ( bool[*]),
                         bool -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[4] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[4,4] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int[1] -> { bool[*] -> ( bool),
                         bool -> ( --),
                         bool[+] -> ( bool),
                         bool[.] -> ( bool),
                         bool[4] -> ( bool)},
             int[2] -> { bool[*] -> ( bool),
                         bool -> ( --),
                         bool[+] -> ( bool),
                         bool[.] -> ( --),
                         bool[4] -> ( --),
                         bool[.,.] -> ( bool),
                         bool[4,4] -> ( bool)},
             int[3] -> { bool[*] -> ( bool),
                         bool -> ( --),
                         bool[+] -> ( bool),
                         bool[.] -> ( --),
                         bool[4] -> ( --),
                         bool[.,.] -> ( --),
                         bool[4,4] -> ( --),
                         bool[.,.,.] -> ( bool)}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel
 */
{ 
  bool[*] _cwc_5414 { , NN } ; 
  bool _cwc_5578 { , NN } ; 
  int _cwc_5577 { , NN } ; 
  bool[*] _cwc_5576 { , NN } ; 
  int _cwc_5575 { , NN } ; 
  bool _cwc_5574 { , NN } ; 
  int _cwc_5573 { , NN } ; 
  bool _cwc_5572 { , NN } ; 
  bool _cwc_5571 { , NN } ; 
  int{1} _cwc_5570 { , NN } ; 
  int _cwc_5569 { , NN } ; 
  int[1]{0} _cwc_5568 { , NN } ; 
  bool _cwc_5567 { , NN } ; 
  bool _cwc_5566 { , NN } ; 
  int _cwc_5565 { , NN } ; 
  bool[*] _cwc_5564 { , NN } ; 
  int _cwc_5563 { , NN } ; 
  bool _cwc_5562 { , NN } ; 
  int _cwc_5561 { , NN } ; 
  bool[*] _cwc_5560 { , NN } ; 
  int _cwc_5559 { , NN } ; 
  bool _cwc_5558 { , NN } ; 
  int _cwc_5557 { , NN } ; 
  bool _cwc_5556 { , NN } ; 
  bool _cwc_5555 { , NN } ; 
  int{4} _cwc_5554 { , NN } ; 
  int _cwc_5553 { , NN } ; 
  int[1]{0} _cwc_5552 { , NN } ; 
  bool _cwc_5551 { , NN } ; 
  bool _cwc_5550 { , NN } ; 
  int[+] _cwc_5549 { , NN } ; 
  bool _cwc_5548 { , NN } ; 
  int _cwc_5547 { , NN } ; 
  bool[*] _cwc_5546 { , NN } ; 
  bool _cwc_5545 { , NN } ; 
  bool _cwc_5544 { , NN } ; 
  int{2} _cwc_5543 { , NN } ; 
  int _cwc_5542 { , NN } ; 
  int[1]{0} _cwc_5541 { , NN } ; 
  bool _cwc_5540 { , NN } ; 
  bool _cwc_5539 { , NN } ; 
  int _cwc_5538 { , NN } ; 
  bool[*] _cwc_5537 { , NN } ; 
  int _cwc_5536 { , NN } ; 
  bool _cwc_5535 { , NN } ; 
  int _cwc_5534 { , NN } ; 
  bool[*] _cwc_5533 { , NN } ; 
  int _cwc_5532 { , NN } ; 
  bool _cwc_5531 { , NN } ; 
  int _cwc_5530 { , NN } ; 
  bool _cwc_5529 { , NN } ; 
  bool _cwc_5528 { , NN } ; 
  int{4} _cwc_5527 { , NN } ; 
  int _cwc_5526 { , NN } ; 
  int[1]{0} _cwc_5525 { , NN } ; 
  bool _cwc_5524 { , NN } ; 
  bool[*] _cwc_5523 { , NN } ; 
  int[+] _cwc_5522 { , NN } ; 
  bool[*] _cwc_5521 { , NN } ; 
  bool _cwc_5520 { , NN } ; 
  int _cwc_5519 { , NN } ; 
  bool _cwc_5518 { , NN } ; 
  bool _cwc_5517 { , NN } ; 
  int{4} _cwc_5516 { , NN } ; 
  int _cwc_5515 { , NN } ; 
  int[1]{1} _cwc_5514 { , NN } ; 
  bool _cwc_5513 { , NN } ; 
  bool _cwc_5512 { , NN } ; 
  int{4} _cwc_5511 { , NN } ; 
  int _cwc_5510 { , NN } ; 
  int[1]{0} _cwc_5509 { , NN } ; 
  bool _cwc_5508 { , NN } ; 
  bool _cwc_5507 { , NN } ; 
  int[+] _cwc_5506 { , NN } ; 
  bool _cwc_5505 { , NN } ; 
  int _cwc_5504 { , NN } ; 
  bool[*] _cwc_5503 { , NN } ; 
  bool _cwc_5502 { , NN } ; 
  bool _cwc_5501 { , NN } ; 
  int{3} _cwc_5500 { , NN } ; 
  int _cwc_5499 { , NN } ; 
  int[1]{0} _cwc_5498 { , NN } ; 
  bool _cwc_5497 { , NN } ; 
  bool _cwc_5496 { , NN } ; 
  int _cwc_5495 { , NN } ; 
  bool[*] _cwc_5494 { , NN } ; 
  int _cwc_5493 { , NN } ; 
  bool _cwc_5492 { , NN } ; 
  int _cwc_5491 { , NN } ; 
  bool[*] _cwc_5490 { , NN } ; 
  int _cwc_5489 { , NN } ; 
  bool _cwc_5488 { , NN } ; 
  int _cwc_5487 { , NN } ; 
  bool _cwc_5486 { , NN } ; 
  bool _cwc_5485 { , NN } ; 
  int{4} _cwc_5484 { , NN } ; 
  int _cwc_5483 { , NN } ; 
  int[1]{0} _cwc_5482 { , NN } ; 
  bool _cwc_5481 { , NN } ; 
  bool[*] _cwc_5480 { , NN } ; 
  int[+] _cwc_5479 { , NN } ; 
  bool[*] _cwc_5478 { , NN } ; 
  bool _cwc_5477 { , NN } ; 
  int _cwc_5476 { , NN } ; 
  bool _cwc_5475 { , NN } ; 
  bool _cwc_5474 { , NN } ; 
  int{4} _cwc_5473 { , NN } ; 
  int _cwc_5472 { , NN } ; 
  int[1]{1} _cwc_5471 { , NN } ; 
  bool _cwc_5470 { , NN } ; 
  bool _cwc_5469 { , NN } ; 
  int{4} _cwc_5468 { , NN } ; 
  int _cwc_5467 { , NN } ; 
  int[1]{0} _cwc_5466 { , NN } ; 
  bool _cwc_5465 { , NN } ; 
  bool[*] _cwc_5464 { , NN } ; 
  int[+] _cwc_5463 { , NN } ; 
  bool[*] _cwc_5462 { , NN } ; 
  bool _cwc_5461 { , NN } ; 
  int _cwc_5460 { , NN } ; 
  bool _cwc_5459 { , NN } ; 
  int _cwc_5458 { , NN } ; 
  bool[*] _cwc_5457 { , NN } ; 
  int[+] _cwc_5456 { , NN } ; 
  bool _cwc_5455 { , NN } ; 
  int _cwc_5454 { , NN } ; 
  bool[*] _cwc_5453 { , NN } ; 
  int _cwc_5452 { , NN } ; 
  bool _cwc_5451 { , NN } ; 
  int _cwc_5450 { , NN } ; 
  bool[*] _cwc_5449 { , NN } ; 
  int _cwc_5448 { , NN } ; 
  bool _cwc_5447 { , NN } ; 
  int _cwc_5446 { , NN } ; 
  bool _cwc_5445 { , NN } ; 
  bool _cwc_5444 { , NN } ; 
  int{4} _cwc_5443 { , NN } ; 
  int _cwc_5442 { , NN } ; 
  int[1]{0} _cwc_5441 { , NN } ; 
  bool _cwc_5440 { , NN } ; 
  bool[*] _cwc_5439 { , NN } ; 
  int[+] _cwc_5438 { , NN } ; 
  bool[*] _cwc_5437 { , NN } ; 
  bool _cwc_5436 { , NN } ; 
  int _cwc_5435 { , NN } ; 
  bool _cwc_5434 { , NN } ; 
  bool _cwc_5433 { , NN } ; 
  int{4} _cwc_5432 { , NN } ; 
  int _cwc_5431 { , NN } ; 
  int[1]{1} _cwc_5430 { , NN } ; 
  bool _cwc_5429 { , NN } ; 
  bool _cwc_5428 { , NN } ; 
  int{4} _cwc_5427 { , NN } ; 
  int _cwc_5426 { , NN } ; 
  int[1]{0} _cwc_5425 { , NN } ; 
  bool _cwc_5424 { , NN } ; 
  bool[*] _cwc_5423 { , NN } ; 
  int[+] _cwc_5422 { , NN } ; 
  bool[*] _cwc_5421 { , NN } ; 
  bool _cwc_5420 { , NN } ; 
  int _cwc_5419 { , NN } ; 
  bool[*] _cwc_5418 { , NN } ; 
  int _cwc_5417 { , NN } ; 
  bool[*] _cwc_5416 { , NN } ; 
  int _cwc_5415 { , NN } ; 

  _cwc_5575 = _dim_A_( idx); 
  _cwc_5577 = 0; 
  _cwc_5578 = _eq_SxS_( _cwc_5575, _cwc_5577); 
  if (_cwc_5578) 
  { 
    _cwc_5576 = ArrayBasics::sel( idx, array) ; 
    _cwc_5414 = _cwc_5576; 
  }
  else
  { 
    _cwc_5415 = _dim_A_( idx); 
    _cwc_5573 = 1; 
    _cwc_5574 = _eq_SxS_( _cwc_5415, _cwc_5573); 
    if (_cwc_5574) 
    { 
      _cwc_5456 = _shape_A_( idx); 
      _cwc_5567 = true; 
      _cwc_5570 = 1; 
      _cwc_5568 = [ 0 ]; 
      _cwc_5569 = _sel_VxA_( _cwc_5568, _cwc_5456); 
      _cwc_5571 = _eq_SxS_( _cwc_5569, _cwc_5570); 
      _cwc_5572 = _and_SxS_( _cwc_5571, _cwc_5567); 
      if (_cwc_5572) 
      { 
        _cwc_5563 = _dim_A_( array); 
        _cwc_5565 = 0; 
        _cwc_5566 = _eq_SxS_( _cwc_5563, _cwc_5565); 
        if (_cwc_5566) 
        { 
          _cwc_5564 = UTDScalarB:Array::sel( idx, array) ; 
          _cwc_5414 = _cwc_5564; 
        }
        else
        { 
          _cwc_5559 = _dim_A_( array); 
          _cwc_5561 = 0; 
          _cwc_5562 = _gt_SxS_( _cwc_5559, _cwc_5561); 
          if (_cwc_5562) 
          { 
            _cwc_5547 = _dim_A_( array); 
            _cwc_5557 = 1; 
            _cwc_5558 = _eq_SxS_( _cwc_5547, _cwc_5557); 
            if (_cwc_5558) 
            { 
              _cwc_5549 = _shape_A_( array); 
              _cwc_5551 = true; 
              _cwc_5554 = 4; 
              _cwc_5552 = [ 0 ]; 
              _cwc_5553 = _sel_VxA_( _cwc_5552, _cwc_5549); 
              _cwc_5555 = _eq_SxS_( _cwc_5553, _cwc_5554); 
              _cwc_5556 = _and_SxS_( _cwc_5555, _cwc_5551); 
              if (_cwc_5556) 
              { 
                _cwc_5550 = UTDScalarB:Array::sel( idx, array) ; 
                _cwc_5414 = _cwc_5550; 
              }
              else
              { 
                _cwc_5548 = UTDScalarB:Array::sel( idx, array) ; 
                _cwc_5414 = _cwc_5548; 
              }
            }
            else
            { 
              _cwc_5546 = UTDScalarB:Array::sel( idx, array) ; 
              _cwc_5414 = _cwc_5546; 
            }
          }
          else
          { 
            _cwc_5560 = ArrayBasics::sel( idx, array) ; 
            _cwc_5414 = _cwc_5560; 
          }
        }
      }
      else
      { 
        _cwc_5540 = true; 
        _cwc_5543 = 2; 
        _cwc_5541 = [ 0 ]; 
        _cwc_5542 = _sel_VxA_( _cwc_5541, _cwc_5456); 
        _cwc_5544 = _eq_SxS_( _cwc_5542, _cwc_5543); 
        _cwc_5545 = _and_SxS_( _cwc_5544, _cwc_5540); 
        if (_cwc_5545) 
        { 
          _cwc_5536 = _dim_A_( array); 
          _cwc_5538 = 0; 
          _cwc_5539 = _eq_SxS_( _cwc_5536, _cwc_5538); 
          if (_cwc_5539) 
          { 
            _cwc_5537 = UTDScalarB:Array::sel( idx, array) ; 
            _cwc_5414 = _cwc_5537; 
          }
          else
          { 
            _cwc_5532 = _dim_A_( array); 
            _cwc_5534 = 0; 
            _cwc_5535 = _gt_SxS_( _cwc_5532, _cwc_5534); 
            if (_cwc_5535) 
            { 
              _cwc_5504 = _dim_A_( array); 
              _cwc_5530 = 1; 
              _cwc_5531 = _eq_SxS_( _cwc_5504, _cwc_5530); 
              if (_cwc_5531) 
              { 
                _cwc_5522 = _shape_A_( array); 
                _cwc_5524 = true; 
                _cwc_5527 = 4; 
                _cwc_5525 = [ 0 ]; 
                _cwc_5526 = _sel_VxA_( _cwc_5525, _cwc_5522); 
                _cwc_5528 = _eq_SxS_( _cwc_5526, _cwc_5527); 
                _cwc_5529 = _and_SxS_( _cwc_5528, _cwc_5524); 
                if (_cwc_5529) 
                { 
                  _cwc_5523 = UTDScalarB:Array::sel( idx, array) ; 
                  _cwc_5414 = _cwc_5523; 
                }
                else
                { 
                  _cwc_5521 = UTDScalarB:Array::sel( idx, array) ; 
                  _cwc_5414 = _cwc_5521; 
                }
              }
              else
              { 
                _cwc_5519 = 2; 
                _cwc_5520 = _eq_SxS_( _cwc_5504, _cwc_5519); 
                if (_cwc_5520) 
                { 
                  _cwc_5506 = _shape_A_( array); 
                  _cwc_5508 = true; 
                  _cwc_5511 = 4; 
                  _cwc_5509 = [ 0 ]; 
                  _cwc_5510 = _sel_VxA_( _cwc_5509, _cwc_5506); 
                  _cwc_5512 = _eq_SxS_( _cwc_5510, _cwc_5511); 
                  _cwc_5513 = _and_SxS_( _cwc_5512, _cwc_5508); 
                  _cwc_5516 = 4; 
                  _cwc_5514 = [ 1 ]; 
                  _cwc_5515 = _sel_VxA_( _cwc_5514, _cwc_5506); 
                  _cwc_5517 = _eq_SxS_( _cwc_5515, _cwc_5516); 
                  _cwc_5518 = _and_SxS_( _cwc_5517, _cwc_5513); 
                  if (_cwc_5518) 
                  { 
                    _cwc_5507 = UTDScalarB:Array::sel( idx, array) ; 
                    _cwc_5414 = _cwc_5507; 
                  }
                  else
                  { 
                    _cwc_5505 = UTDScalarB:Array::sel( idx, array) ; 
                    _cwc_5414 = _cwc_5505; 
                  }
                }
                else
                { 
                  _cwc_5503 = UTDScalarB:Array::sel( idx, array) ; 
                  _cwc_5414 = _cwc_5503; 
                }
              }
            }
            else
            { 
              _cwc_5533 = ArrayBasics::sel( idx, array) ; 
              _cwc_5414 = _cwc_5533; 
            }
          }
        }
        else
        { 
          _cwc_5497 = true; 
          _cwc_5500 = 3; 
          _cwc_5498 = [ 0 ]; 
          _cwc_5499 = _sel_VxA_( _cwc_5498, _cwc_5456); 
          _cwc_5501 = _eq_SxS_( _cwc_5499, _cwc_5500); 
          _cwc_5502 = _and_SxS_( _cwc_5501, _cwc_5497); 
          if (_cwc_5502) 
          { 
            _cwc_5493 = _dim_A_( array); 
            _cwc_5495 = 0; 
            _cwc_5496 = _eq_SxS_( _cwc_5493, _cwc_5495); 
            if (_cwc_5496) 
            { 
              _cwc_5494 = UTDScalarB:Array::sel( idx, array) ; 
              _cwc_5414 = _cwc_5494; 
            }
            else
            { 
              _cwc_5489 = _dim_A_( array); 
              _cwc_5491 = 0; 
              _cwc_5492 = _gt_SxS_( _cwc_5489, _cwc_5491); 
              if (_cwc_5492) 
              { 
                _cwc_5458 = _dim_A_( array); 
                _cwc_5487 = 1; 
                _cwc_5488 = _eq_SxS_( _cwc_5458, _cwc_5487); 
                if (_cwc_5488) 
                { 
                  _cwc_5479 = _shape_A_( array); 
                  _cwc_5481 = true; 
                  _cwc_5484 = 4; 
                  _cwc_5482 = [ 0 ]; 
                  _cwc_5483 = _sel_VxA_( _cwc_5482, _cwc_5479); 
                  _cwc_5485 = _eq_SxS_( _cwc_5483, _cwc_5484); 
                  _cwc_5486 = _and_SxS_( _cwc_5485, _cwc_5481); 
                  if (_cwc_5486) 
                  { 
                    _cwc_5480 = UTDScalarB:Array::sel( idx, array) ; 
                    _cwc_5414 = _cwc_5480; 
                  }
                  else
                  { 
                    _cwc_5478 = UTDScalarB:Array::sel( idx, array) ; 
                    _cwc_5414 = _cwc_5478; 
                  }
                }
                else
                { 
                  _cwc_5476 = 2; 
                  _cwc_5477 = _eq_SxS_( _cwc_5458, _cwc_5476); 
                  if (_cwc_5477) 
                  { 
                    _cwc_5463 = _shape_A_( array); 
                    _cwc_5465 = true; 
                    _cwc_5468 = 4; 
                    _cwc_5466 = [ 0 ]; 
                    _cwc_5467 = _sel_VxA_( _cwc_5466, _cwc_5463); 
                    _cwc_5469 = _eq_SxS_( _cwc_5467, _cwc_5468); 
                    _cwc_5470 = _and_SxS_( _cwc_5469, _cwc_5465); 
                    _cwc_5473 = 4; 
                    _cwc_5471 = [ 1 ]; 
                    _cwc_5472 = _sel_VxA_( _cwc_5471, _cwc_5463); 
                    _cwc_5474 = _eq_SxS_( _cwc_5472, _cwc_5473); 
                    _cwc_5475 = _and_SxS_( _cwc_5474, _cwc_5470); 
                    if (_cwc_5475) 
                    { 
                      _cwc_5464 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_5414 = _cwc_5464; 
                    }
                    else
                    { 
                      _cwc_5462 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_5414 = _cwc_5462; 
                    }
                  }
                  else
                  { 
                    _cwc_5460 = 3; 
                    _cwc_5461 = _eq_SxS_( _cwc_5458, _cwc_5460); 
                    if (_cwc_5461) 
                    { 
                      _cwc_5459 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_5414 = _cwc_5459; 
                    }
                    else
                    { 
                      _cwc_5457 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_5414 = _cwc_5457; 
                    }
                  }
                }
              }
              else
              { 
                _cwc_5490 = ArrayBasics::sel( idx, array) ; 
                _cwc_5414 = _cwc_5490; 
              }
            }
          }
          else
          { 
            _cwc_5452 = _dim_A_( array); 
            _cwc_5454 = 0; 
            _cwc_5455 = _eq_SxS_( _cwc_5452, _cwc_5454); 
            if (_cwc_5455) 
            { 
              _cwc_5453 = UTDScalarB:Array::sel( idx, array) ; 
              _cwc_5414 = _cwc_5453; 
            }
            else
            { 
              _cwc_5448 = _dim_A_( array); 
              _cwc_5450 = 0; 
              _cwc_5451 = _gt_SxS_( _cwc_5448, _cwc_5450); 
              if (_cwc_5451) 
              { 
                _cwc_5417 = _dim_A_( array); 
                _cwc_5446 = 1; 
                _cwc_5447 = _eq_SxS_( _cwc_5417, _cwc_5446); 
                if (_cwc_5447) 
                { 
                  _cwc_5438 = _shape_A_( array); 
                  _cwc_5440 = true; 
                  _cwc_5443 = 4; 
                  _cwc_5441 = [ 0 ]; 
                  _cwc_5442 = _sel_VxA_( _cwc_5441, _cwc_5438); 
                  _cwc_5444 = _eq_SxS_( _cwc_5442, _cwc_5443); 
                  _cwc_5445 = _and_SxS_( _cwc_5444, _cwc_5440); 
                  if (_cwc_5445) 
                  { 
                    _cwc_5439 = UTDScalarB:Array::sel( idx, array) ; 
                    _cwc_5414 = _cwc_5439; 
                  }
                  else
                  { 
                    _cwc_5437 = UTDScalarB:Array::sel( idx, array) ; 
                    _cwc_5414 = _cwc_5437; 
                  }
                }
                else
                { 
                  _cwc_5435 = 2; 
                  _cwc_5436 = _eq_SxS_( _cwc_5417, _cwc_5435); 
                  if (_cwc_5436) 
                  { 
                    _cwc_5422 = _shape_A_( array); 
                    _cwc_5424 = true; 
                    _cwc_5427 = 4; 
                    _cwc_5425 = [ 0 ]; 
                    _cwc_5426 = _sel_VxA_( _cwc_5425, _cwc_5422); 
                    _cwc_5428 = _eq_SxS_( _cwc_5426, _cwc_5427); 
                    _cwc_5429 = _and_SxS_( _cwc_5428, _cwc_5424); 
                    _cwc_5432 = 4; 
                    _cwc_5430 = [ 1 ]; 
                    _cwc_5431 = _sel_VxA_( _cwc_5430, _cwc_5422); 
                    _cwc_5433 = _eq_SxS_( _cwc_5431, _cwc_5432); 
                    _cwc_5434 = _and_SxS_( _cwc_5433, _cwc_5429); 
                    if (_cwc_5434) 
                    { 
                      _cwc_5423 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_5414 = _cwc_5423; 
                    }
                    else
                    { 
                      _cwc_5421 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_5414 = _cwc_5421; 
                    }
                  }
                  else
                  { 
                    _cwc_5419 = 3; 
                    _cwc_5420 = _eq_SxS_( _cwc_5417, _cwc_5419); 
                    if (_cwc_5420) 
                    { 
                      _cwc_5418 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_5414 = _cwc_5418; 
                    }
                    else
                    { 
                      _cwc_5416 = UTDScalarB:Array::sel( idx, array) ; 
                      _cwc_5414 = _cwc_5416; 
                    }
                  }
                }
              }
              else
              { 
                _cwc_5449 = ArrayBasics::sel( idx, array) ; 
                _cwc_5414 = _cwc_5449; 
              }
            }
          }
        }
      }
    }
    else
    { 
      _cwc_5414 = _dispatch_error_( 1, bool[*], "UTDScalarB:Array::sel :: int[*] bool[*] -> bool[*] ", idx, array); 
    }
  }
  return( _cwc_5414); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:Array::sel(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:Array::sel( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { int[*] -> ( int[*]),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[1] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int),
                         int[0] -> ( int)},
             int -> { int[*] -> ( int[*]),
                      int[+] -> ( int),
                      int[.] -> ( int),
                      int[1] -> ( int),
                      int[3] -> ( int),
                      int[2] -> ( int),
                      int[0] -> ( int)},
             int[+] -> { int[*] -> ( int[*])},
             int[.] -> { int[*] -> ( int[*])}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel,
 *                  UTDScalarB:Array::sel
 */
{ 
  int[*] _cwc_5579 { , NN } ; 
  bool _cwc_5620 { , NN } ; 
  int _cwc_5619 { , NN } ; 
  bool _cwc_5618 { , NN } ; 
  int _cwc_5617 { , NN } ; 
  bool _cwc_5616 { , NN } ; 
  bool _cwc_5615 { , NN } ; 
  int{1} _cwc_5614 { , NN } ; 
  int _cwc_5613 { , NN } ; 
  int[1]{0} _cwc_5612 { , NN } ; 
  bool _cwc_5611 { , NN } ; 
  int _cwc_5610 { , NN } ; 
  bool _cwc_5609 { , NN } ; 
  bool _cwc_5608 { , NN } ; 
  int{3} _cwc_5607 { , NN } ; 
  int _cwc_5606 { , NN } ; 
  int[1]{0} _cwc_5605 { , NN } ; 
  bool _cwc_5604 { , NN } ; 
  int _cwc_5603 { , NN } ; 
  bool _cwc_5602 { , NN } ; 
  bool _cwc_5601 { , NN } ; 
  int{2} _cwc_5600 { , NN } ; 
  int _cwc_5599 { , NN } ; 
  int[1]{0} _cwc_5598 { , NN } ; 
  bool _cwc_5597 { , NN } ; 
  int _cwc_5596 { , NN } ; 
  bool _cwc_5595 { , NN } ; 
  bool _cwc_5594 { , NN } ; 
  int{0} _cwc_5593 { , NN } ; 
  int _cwc_5592 { , NN } ; 
  int[1]{0} _cwc_5591 { , NN } ; 
  bool _cwc_5590 { , NN } ; 
  int _cwc_5589 { , NN } ; 
  int[+] _cwc_5588 { , NN } ; 
  int _cwc_5587 { , NN } ; 
  int _cwc_5586 { , NN } ; 
  int[*] _cwc_5585 { , NN } ; 
  int _cwc_5584 { , NN } ; 
  bool _cwc_5583 { , NN } ; 
  int _cwc_5582 { , NN } ; 
  int[*] _cwc_5581 { , NN } ; 
  int _cwc_5580 { , NN } ; 

  _cwc_5584 = _dim_A_( idx); 
  _cwc_5619 = 0; 
  _cwc_5620 = _eq_SxS_( _cwc_5584, _cwc_5619); 
  if (_cwc_5620) 
  { 
    _cwc_5586 = _dim_A_( array); 
    _cwc_5617 = 1; 
    _cwc_5618 = _eq_SxS_( _cwc_5586, _cwc_5617); 
    if (_cwc_5618) 
    { 
      _cwc_5588 = _shape_A_( array); 
      _cwc_5611 = true; 
      _cwc_5614 = 1; 
      _cwc_5612 = [ 0 ]; 
      _cwc_5613 = _sel_VxA_( _cwc_5612, _cwc_5588); 
      _cwc_5615 = _eq_SxS_( _cwc_5613, _cwc_5614); 
      _cwc_5616 = _and_SxS_( _cwc_5615, _cwc_5611); 
      if (_cwc_5616) 
      { 
        _cwc_5610 = UTDScalarB:Array::sel( idx, array) ; 
        _cwc_5579 = _cwc_5610; 
      }
      else
      { 
        _cwc_5604 = true; 
        _cwc_5607 = 3; 
        _cwc_5605 = [ 0 ]; 
        _cwc_5606 = _sel_VxA_( _cwc_5605, _cwc_5588); 
        _cwc_5608 = _eq_SxS_( _cwc_5606, _cwc_5607); 
        _cwc_5609 = _and_SxS_( _cwc_5608, _cwc_5604); 
        if (_cwc_5609) 
        { 
          _cwc_5603 = UTDScalarB:Array::sel( idx, array) ; 
          _cwc_5579 = _cwc_5603; 
        }
        else
        { 
          _cwc_5597 = true; 
          _cwc_5600 = 2; 
          _cwc_5598 = [ 0 ]; 
          _cwc_5599 = _sel_VxA_( _cwc_5598, _cwc_5588); 
          _cwc_5601 = _eq_SxS_( _cwc_5599, _cwc_5600); 
          _cwc_5602 = _and_SxS_( _cwc_5601, _cwc_5597); 
          if (_cwc_5602) 
          { 
            _cwc_5596 = UTDScalarB:Array::sel( idx, array) ; 
            _cwc_5579 = _cwc_5596; 
          }
          else
          { 
            _cwc_5590 = true; 
            _cwc_5593 = 0; 
            _cwc_5591 = [ 0 ]; 
            _cwc_5592 = _sel_VxA_( _cwc_5591, _cwc_5588); 
            _cwc_5594 = _eq_SxS_( _cwc_5592, _cwc_5593); 
            _cwc_5595 = _and_SxS_( _cwc_5594, _cwc_5590); 
            if (_cwc_5595) 
            { 
              _cwc_5589 = UTDScalarB:Array::sel( idx, array) ; 
              _cwc_5579 = _cwc_5589; 
            }
            else
            { 
              _cwc_5587 = UTDScalarB:Array::sel( idx, array) ; 
              _cwc_5579 = _cwc_5587; 
            }
          }
        }
      }
    }
    else
    { 
      _cwc_5585 = ArrayBasics::sel( idx, array) ; 
      _cwc_5579 = _cwc_5585; 
    }
  }
  else
  { 
    _cwc_5580 = _dim_A_( idx); 
    _cwc_5582 = 1; 
    _cwc_5583 = _eq_SxS_( _cwc_5580, _cwc_5582); 
    if (_cwc_5583) 
    { 
      _cwc_5581 = ArrayBasics::sel( idx, array) ; 
      _cwc_5579 = _cwc_5581; 
    }
    else
    { 
      _cwc_5579 = _dispatch_error_( 1, int[*], "UTDScalarB:Array::sel :: int[*] int[*] -> int[*] ", idx, array); 
    }
  }
  return( _cwc_5579); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::EQXXB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[14] UTDScalarB::EQXXB()
/*
 *  EQXXB :: ( bool[14])
 *  dispatching to: UTDScalarB::EQXXB
 */
{ 
  bool[14] _cwc_5621 { , NN } ; 
  bool[14] _cwc_5622 { , NN } ; 

  _cwc_5622 = UTDScalarB::EQXXB() ; 
  _cwc_5621 = _cwc_5622; 
  return( _cwc_5621); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::jotdoteqBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB::jotdoteqBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  jotdoteqBBB :: { bool[*] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[+] -> { bool[*] -> ( bool[+]),
                                  bool[+] -> ( bool[+]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[.] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])},
                     bool[4] -> { bool[*] -> ( bool[4,4]),
                                  bool[+] -> ( bool[4,4]),
                                  bool[.] -> ( bool[4,4]),
                                  bool[4] -> ( bool[4,4])}}
 *  dispatching to: UTDScalarB::jotdoteqBBB,
 *                  UTDScalarB::jotdoteqBBB
 */
{ 
  bool[+] _cwc_5623 { , NN } ; 
  bool _cwc_5684 { , NN } ; 
  int _cwc_5683 { , NN } ; 
  int _cwc_5682 { , NN } ; 
  bool _cwc_5681 { , NN } ; 
  int _cwc_5680 { , NN } ; 
  bool _cwc_5679 { , NN } ; 
  bool _cwc_5678 { , NN } ; 
  int{4} _cwc_5677 { , NN } ; 
  int _cwc_5676 { , NN } ; 
  int[1]{0} _cwc_5675 { , NN } ; 
  bool _cwc_5674 { , NN } ; 
  bool _cwc_5673 { , NN } ; 
  int _cwc_5672 { , NN } ; 
  int _cwc_5671 { , NN } ; 
  bool _cwc_5670 { , NN } ; 
  int _cwc_5669 { , NN } ; 
  bool _cwc_5668 { , NN } ; 
  bool _cwc_5667 { , NN } ; 
  int{4} _cwc_5666 { , NN } ; 
  int _cwc_5665 { , NN } ; 
  int[1]{0} _cwc_5664 { , NN } ; 
  bool _cwc_5663 { , NN } ; 
  bool[4,4] _cwc_5662 { , NN } ; 
  int[+] _cwc_5661 { , NN } ; 
  bool[+] _cwc_5660 { , NN } ; 
  int _cwc_5659 { , NN } ; 
  bool[+] _cwc_5658 { , NN } ; 
  int[+] _cwc_5657 { , NN } ; 
  bool _cwc_5656 { , NN } ; 
  int _cwc_5655 { , NN } ; 
  int _cwc_5654 { , NN } ; 
  bool _cwc_5653 { , NN } ; 
  int _cwc_5652 { , NN } ; 
  bool _cwc_5651 { , NN } ; 
  bool _cwc_5650 { , NN } ; 
  int{4} _cwc_5649 { , NN } ; 
  int _cwc_5648 { , NN } ; 
  int[1]{0} _cwc_5647 { , NN } ; 
  bool _cwc_5646 { , NN } ; 
  bool[+] _cwc_5645 { , NN } ; 
  int[+] _cwc_5644 { , NN } ; 
  bool[+] _cwc_5643 { , NN } ; 
  int _cwc_5642 { , NN } ; 
  bool[+] _cwc_5641 { , NN } ; 
  int _cwc_5640 { , NN } ; 
  bool _cwc_5639 { , NN } ; 
  int _cwc_5638 { , NN } ; 
  int _cwc_5637 { , NN } ; 
  bool _cwc_5636 { , NN } ; 
  int _cwc_5635 { , NN } ; 
  bool _cwc_5634 { , NN } ; 
  bool _cwc_5633 { , NN } ; 
  int{4} _cwc_5632 { , NN } ; 
  int _cwc_5631 { , NN } ; 
  int[1]{0} _cwc_5630 { , NN } ; 
  bool _cwc_5629 { , NN } ; 
  bool[+] _cwc_5628 { , NN } ; 
  int[+] _cwc_5627 { , NN } ; 
  bool[+] _cwc_5626 { , NN } ; 
  int _cwc_5625 { , NN } ; 
  bool[+] _cwc_5624 { , NN } ; 

  _cwc_5682 = _dim_A_( x); 
  _cwc_5683 = 0; 
  _cwc_5684 = _gt_SxS_( _cwc_5682, _cwc_5683); 
  if (_cwc_5684) 
  { 
    _cwc_5640 = _dim_A_( x); 
    _cwc_5680 = 1; 
    _cwc_5681 = _eq_SxS_( _cwc_5640, _cwc_5680); 
    if (_cwc_5681) 
    { 
      _cwc_5657 = _shape_A_( x); 
      _cwc_5674 = true; 
      _cwc_5677 = 4; 
      _cwc_5675 = [ 0 ]; 
      _cwc_5676 = _sel_VxA_( _cwc_5675, _cwc_5657); 
      _cwc_5678 = _eq_SxS_( _cwc_5676, _cwc_5677); 
      _cwc_5679 = _and_SxS_( _cwc_5678, _cwc_5674); 
      if (_cwc_5679) 
      { 
        _cwc_5671 = _dim_A_( y); 
        _cwc_5672 = 0; 
        _cwc_5673 = _gt_SxS_( _cwc_5671, _cwc_5672); 
        if (_cwc_5673) 
        { 
          _cwc_5659 = _dim_A_( y); 
          _cwc_5669 = 1; 
          _cwc_5670 = _eq_SxS_( _cwc_5659, _cwc_5669); 
          if (_cwc_5670) 
          { 
            _cwc_5661 = _shape_A_( y); 
            _cwc_5663 = true; 
            _cwc_5666 = 4; 
            _cwc_5664 = [ 0 ]; 
            _cwc_5665 = _sel_VxA_( _cwc_5664, _cwc_5661); 
            _cwc_5667 = _eq_SxS_( _cwc_5665, _cwc_5666); 
            _cwc_5668 = _and_SxS_( _cwc_5667, _cwc_5663); 
            if (_cwc_5668) 
            { 
              _cwc_5662 = UTDScalarB::jotdoteqBBB( x, y) ; 
              _cwc_5623 = _cwc_5662; 
            }
            else
            { 
              _cwc_5660 = UTDScalarB::jotdoteqBBB( x, y) ; 
              _cwc_5623 = _cwc_5660; 
            }
          }
          else
          { 
            _cwc_5658 = UTDScalarB::jotdoteqBBB( x, y) ; 
            _cwc_5623 = _cwc_5658; 
          }
        }
        else
        { 
          _cwc_5623 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdoteqBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
      else
      { 
        _cwc_5654 = _dim_A_( y); 
        _cwc_5655 = 0; 
        _cwc_5656 = _gt_SxS_( _cwc_5654, _cwc_5655); 
        if (_cwc_5656) 
        { 
          _cwc_5642 = _dim_A_( y); 
          _cwc_5652 = 1; 
          _cwc_5653 = _eq_SxS_( _cwc_5642, _cwc_5652); 
          if (_cwc_5653) 
          { 
            _cwc_5644 = _shape_A_( y); 
            _cwc_5646 = true; 
            _cwc_5649 = 4; 
            _cwc_5647 = [ 0 ]; 
            _cwc_5648 = _sel_VxA_( _cwc_5647, _cwc_5644); 
            _cwc_5650 = _eq_SxS_( _cwc_5648, _cwc_5649); 
            _cwc_5651 = _and_SxS_( _cwc_5650, _cwc_5646); 
            if (_cwc_5651) 
            { 
              _cwc_5645 = UTDScalarB::jotdoteqBBB( x, y) ; 
              _cwc_5623 = _cwc_5645; 
            }
            else
            { 
              _cwc_5643 = UTDScalarB::jotdoteqBBB( x, y) ; 
              _cwc_5623 = _cwc_5643; 
            }
          }
          else
          { 
            _cwc_5641 = UTDScalarB::jotdoteqBBB( x, y) ; 
            _cwc_5623 = _cwc_5641; 
          }
        }
        else
        { 
          _cwc_5623 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdoteqBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_5637 = _dim_A_( y); 
      _cwc_5638 = 0; 
      _cwc_5639 = _gt_SxS_( _cwc_5637, _cwc_5638); 
      if (_cwc_5639) 
      { 
        _cwc_5625 = _dim_A_( y); 
        _cwc_5635 = 1; 
        _cwc_5636 = _eq_SxS_( _cwc_5625, _cwc_5635); 
        if (_cwc_5636) 
        { 
          _cwc_5627 = _shape_A_( y); 
          _cwc_5629 = true; 
          _cwc_5632 = 4; 
          _cwc_5630 = [ 0 ]; 
          _cwc_5631 = _sel_VxA_( _cwc_5630, _cwc_5627); 
          _cwc_5633 = _eq_SxS_( _cwc_5631, _cwc_5632); 
          _cwc_5634 = _and_SxS_( _cwc_5633, _cwc_5629); 
          if (_cwc_5634) 
          { 
            _cwc_5628 = UTDScalarB::jotdoteqBBB( x, y) ; 
            _cwc_5623 = _cwc_5628; 
          }
          else
          { 
            _cwc_5626 = UTDScalarB::jotdoteqBBB( x, y) ; 
            _cwc_5623 = _cwc_5626; 
          }
        }
        else
        { 
          _cwc_5624 = UTDScalarB::jotdoteqBBB( x, y) ; 
          _cwc_5623 = _cwc_5624; 
        }
      }
      else
      { 
        _cwc_5623 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdoteqBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_5623 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdoteqBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
  }
  return( _cwc_5623); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::quadXBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
Terminal::Terminal *, TermFile::TermFile *, bool[*] UTDScalarB::quadXBB( Terminal::Terminal *_rso_1135_TheTerminal { ,NN } , TermFile::TermFile *_rso_1134_stdout { ,NN } , bool[*] y { ,NN } , int[*] QUADpp { ,NN } , int[*] QUADpw { ,NN } )
/*
 *  quadXBB :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> { bool[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                                int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])},
                                                                                    int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])}},
                                                                       bool[+] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                                int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])},
                                                                                    int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])}},
                                                                       bool[.] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                                int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])},
                                                                                    int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])}}},
                                            TermFile::TermFile -> { bool[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])}},
                                                                    bool[+] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])}},
                                                                    bool[.] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])}}}},
                 Terminal::Terminal -> { TermFile::TermFile[*] -> { bool[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])}},
                                                                    bool[+] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])}},
                                                                    bool[.] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                             int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])},
                                                                                 int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])}}},
                                         TermFile::TermFile -> { bool[*] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])},
                                                                              int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[*]),
                                                                                       int -> ( Terminal::Terminal, TermFile::TermFile, bool[*])}},
                                                                 bool[+] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])},
                                                                              int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                       int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])}},
                                                                 bool[.] -> { int[*] -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                          int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])},
                                                                              int -> { int[*] -> ( Terminal::Terminal, TermFile::TermFile, bool[.]),
                                                                                       int -> ( Terminal::Terminal, TermFile::TermFile, bool[.])}}}}}
 *  dispatching to: UTDScalarB::quadXBB,
 *                  UTDScalarB::quadXBB
 */
{ 
  bool[*] _cwc_5687 { , NN } ; 
  TermFile::TermFile _cwc_5686 { , NN } ; 
  Terminal::Terminal _cwc_5685 { , NN } ; 
  bool _cwc_5708 { , NN } ; 
  int _cwc_5707 { , NN } ; 
  bool _cwc_5706 { , NN } ; 
  int _cwc_5705 { , NN } ; 
  bool _cwc_5704 { , NN } ; 
  int _cwc_5703 { , NN } ; 
  Terminal::Terminal _cwc_5702 { , NN } ; 
  TermFile::TermFile _cwc_5701 { , NN } ; 
  bool[.] _cwc_5700 { , NN } ; 
  int _cwc_5699 { , NN } ; 
  int _cwc_5698 { , NN } ; 
  int _cwc_5697 { , NN } ; 
  bool _cwc_5696 { , NN } ; 
  int _cwc_5695 { , NN } ; 
  bool _cwc_5694 { , NN } ; 
  int _cwc_5693 { , NN } ; 
  Terminal::Terminal _cwc_5692 { , NN } ; 
  TermFile::TermFile _cwc_5691 { , NN } ; 
  bool[*] _cwc_5690 { , NN } ; 
  int _cwc_5689 { , NN } ; 
  int _cwc_5688 { , NN } ; 

  _cwc_5697 = _dim_A_( y); 
  _cwc_5707 = 1; 
  _cwc_5708 = _eq_SxS_( _cwc_5697, _cwc_5707); 
  if (_cwc_5708) 
  { 
    _cwc_5698 = _dim_A_( QUADpp); 
    _cwc_5705 = 0; 
    _cwc_5706 = _eq_SxS_( _cwc_5698, _cwc_5705); 
    if (_cwc_5706) 
    { 
      _cwc_5699 = _dim_A_( QUADpw); 
      _cwc_5703 = 0; 
      _cwc_5704 = _eq_SxS_( _cwc_5699, _cwc_5703); 
      if (_cwc_5704) 
      { 
        _cwc_5702, _cwc_5701, _cwc_5700 = UTDScalarB::quadXBB( _rso_1135_TheTerminal, _rso_1134_stdout, y, QUADpp, QUADpw) ; 
        _cwc_5685 = _cwc_5702; 
        _cwc_5686 = _cwc_5701; 
        _cwc_5687 = _cwc_5700; 
      }
      else
      { 
        _cwc_5685, _cwc_5686, _cwc_5687 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, bool[*], "UTDScalarB::quadXBB :: Terminal::Terminal TermFile::TermFile bool[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile bool[*] ", _rso_1135_TheTerminal, _rso_1134_stdout, y, QUADpp, QUADpw); 
      }
    }
    else
    { 
      _cwc_5685, _cwc_5686, _cwc_5687 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, bool[*], "UTDScalarB::quadXBB :: Terminal::Terminal TermFile::TermFile bool[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile bool[*] ", _rso_1135_TheTerminal, _rso_1134_stdout, y, QUADpp, QUADpw); 
    }
  }
  else
  { 
    _cwc_5688 = _dim_A_( QUADpp); 
    _cwc_5695 = 0; 
    _cwc_5696 = _eq_SxS_( _cwc_5688, _cwc_5695); 
    if (_cwc_5696) 
    { 
      _cwc_5689 = _dim_A_( QUADpw); 
      _cwc_5693 = 0; 
      _cwc_5694 = _eq_SxS_( _cwc_5689, _cwc_5693); 
      if (_cwc_5694) 
      { 
        _cwc_5692, _cwc_5691, _cwc_5690 = UTDScalarB::quadXBB( _rso_1135_TheTerminal, _rso_1134_stdout, y, QUADpp, QUADpw) ; 
        _cwc_5685 = _cwc_5692; 
        _cwc_5686 = _cwc_5691; 
        _cwc_5687 = _cwc_5690; 
      }
      else
      { 
        _cwc_5685, _cwc_5686, _cwc_5687 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, bool[*], "UTDScalarB::quadXBB :: Terminal::Terminal TermFile::TermFile bool[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile bool[*] ", _rso_1135_TheTerminal, _rso_1134_stdout, y, QUADpp, QUADpw); 
      }
    }
    else
    { 
      _cwc_5685, _cwc_5686, _cwc_5687 = _dispatch_error_( 3, Terminal::Terminal, TermFile::TermFile, bool[*], "UTDScalarB::quadXBB :: Terminal::Terminal TermFile::TermFile bool[*] int[*] int[*] -> Terminal::Terminal TermFile::TermFile bool[*] ", _rso_1135_TheTerminal, _rso_1134_stdout, y, QUADpp, QUADpw); 
    }
  }
  return( _cwc_5685, _cwc_5686, _cwc_5687); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::neBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB::neBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  neBBB :: { bool[*] -> { bool[*] -> ( bool[*]),
                            bool -> ( bool[*]),
                            bool[+] -> ( bool[+]),
                            bool[.] -> ( bool[4]),
                            bool[4] -> ( bool[4]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool -> { bool[*] -> ( bool[*]),
                         bool -> ( bool),
                         bool[+] -> ( bool[+]),
                         bool[.] -> ( bool[4]),
                         bool[4] -> ( bool[4])},
               bool[+] -> { bool[*] -> ( bool[+]),
                            bool -> ( bool[+]),
                            bool[+] -> ( bool[+]),
                            bool[.,.,.] -> ( bool[.,.,.])},
               bool[.,.,.] -> { bool[*] -> ( bool[.,.,.]),
                                bool -> ( bool[.,.,.]),
                                bool[+] -> ( bool[.,.,.]),
                                bool[.,.,.] -> ( bool[.,.,.])}}
 *  dispatching to: UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB,
 *                  UTDScalarB::neBBB
 */
{ 
  bool[*] _cwc_5709 { , NN } ; 
  bool _cwc_5762 { , NN } ; 
  int _cwc_5761 { , NN } ; 
  bool _cwc_5760 { , NN } ; 
  int _cwc_5759 { , NN } ; 
  bool _cwc_5758 { , NN } ; 
  int _cwc_5757 { , NN } ; 
  bool _cwc_5756 { , NN } ; 
  int _cwc_5755 { , NN } ; 
  int _cwc_5754 { , NN } ; 
  bool _cwc_5753 { , NN } ; 
  int _cwc_5752 { , NN } ; 
  bool _cwc_5751 { , NN } ; 
  bool _cwc_5750 { , NN } ; 
  int{4} _cwc_5749 { , NN } ; 
  int _cwc_5748 { , NN } ; 
  int[1]{0} _cwc_5747 { , NN } ; 
  bool _cwc_5746 { , NN } ; 
  bool[4] _cwc_5745 { , NN } ; 
  int[+] _cwc_5744 { , NN } ; 
  bool[+] _cwc_5743 { , NN } ; 
  int _cwc_5742 { , NN } ; 
  bool[+] _cwc_5741 { , NN } ; 
  int _cwc_5740 { , NN } ; 
  bool _cwc_5739 { , NN } ; 
  int _cwc_5738 { , NN } ; 
  int _cwc_5737 { , NN } ; 
  bool _cwc_5736 { , NN } ; 
  int _cwc_5735 { , NN } ; 
  bool _cwc_5734 { , NN } ; 
  int _cwc_5733 { , NN } ; 
  bool[.,.,.] _cwc_5732 { , NN } ; 
  int _cwc_5731 { , NN } ; 
  bool _cwc_5730 { , NN } ; 
  int _cwc_5729 { , NN } ; 
  int _cwc_5728 { , NN } ; 
  bool _cwc_5727 { , NN } ; 
  int _cwc_5726 { , NN } ; 
  bool[.,.,.] _cwc_5725 { , NN } ; 
  int _cwc_5724 { , NN } ; 
  bool[+] _cwc_5723 { , NN } ; 
  int _cwc_5722 { , NN } ; 
  bool _cwc_5721 { , NN } ; 
  int _cwc_5720 { , NN } ; 
  bool[+] _cwc_5719 { , NN } ; 
  int _cwc_5718 { , NN } ; 
  bool _cwc_5717 { , NN } ; 
  int _cwc_5716 { , NN } ; 
  int _cwc_5715 { , NN } ; 
  bool _cwc_5714 { , NN } ; 
  int _cwc_5713 { , NN } ; 
  bool[+] _cwc_5712 { , NN } ; 
  int _cwc_5711 { , NN } ; 
  bool[+] _cwc_5710 { , NN } ; 

  _cwc_5740 = _dim_A_( x); 
  _cwc_5761 = 0; 
  _cwc_5762 = _eq_SxS_( _cwc_5740, _cwc_5761); 
  if (_cwc_5762) 
  { 
    _cwc_5757 = _dim_A_( y); 
    _cwc_5759 = 0; 
    _cwc_5760 = _eq_SxS_( _cwc_5757, _cwc_5759); 
    if (_cwc_5760) 
    { 
      _cwc_5758 = UTDScalarB::neBBB( x, y) ; 
      _cwc_5709 = _cwc_5758; 
    }
    else
    { 
      _cwc_5754 = _dim_A_( y); 
      _cwc_5755 = 0; 
      _cwc_5756 = _gt_SxS_( _cwc_5754, _cwc_5755); 
      if (_cwc_5756) 
      { 
        _cwc_5742 = _dim_A_( y); 
        _cwc_5752 = 1; 
        _cwc_5753 = _eq_SxS_( _cwc_5742, _cwc_5752); 
        if (_cwc_5753) 
        { 
          _cwc_5744 = _shape_A_( y); 
          _cwc_5746 = true; 
          _cwc_5749 = 4; 
          _cwc_5747 = [ 0 ]; 
          _cwc_5748 = _sel_VxA_( _cwc_5747, _cwc_5744); 
          _cwc_5750 = _eq_SxS_( _cwc_5748, _cwc_5749); 
          _cwc_5751 = _and_SxS_( _cwc_5750, _cwc_5746); 
          if (_cwc_5751) 
          { 
            _cwc_5745 = UTDScalarB::neBBB( x, y) ; 
            _cwc_5709 = _cwc_5745; 
          }
          else
          { 
            _cwc_5743 = UTDScalarB::neBBB( x, y) ; 
            _cwc_5709 = _cwc_5743; 
          }
        }
        else
        { 
          _cwc_5741 = UTDScalarB::neBBB( x, y) ; 
          _cwc_5709 = _cwc_5741; 
        }
      }
      else
      { 
        _cwc_5709 = _dispatch_error_( 1, bool[*], "UTDScalarB::neBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_5737 = _dim_A_( x); 
    _cwc_5738 = 0; 
    _cwc_5739 = _gt_SxS_( _cwc_5737, _cwc_5738); 
    if (_cwc_5739) 
    { 
      _cwc_5722 = _dim_A_( x); 
      _cwc_5735 = 3; 
      _cwc_5736 = _eq_SxS_( _cwc_5722, _cwc_5735); 
      if (_cwc_5736) 
      { 
        _cwc_5731 = _dim_A_( y); 
        _cwc_5733 = 0; 
        _cwc_5734 = _eq_SxS_( _cwc_5731, _cwc_5733); 
        if (_cwc_5734) 
        { 
          _cwc_5732 = UTDScalarB::neBBB( x, y) ; 
          _cwc_5709 = _cwc_5732; 
        }
        else
        { 
          _cwc_5728 = _dim_A_( y); 
          _cwc_5729 = 0; 
          _cwc_5730 = _gt_SxS_( _cwc_5728, _cwc_5729); 
          if (_cwc_5730) 
          { 
            _cwc_5724 = _dim_A_( y); 
            _cwc_5726 = 3; 
            _cwc_5727 = _eq_SxS_( _cwc_5724, _cwc_5726); 
            if (_cwc_5727) 
            { 
              _cwc_5725 = UTDScalarB::neBBB( x, y) ; 
              _cwc_5709 = _cwc_5725; 
            }
            else
            { 
              _cwc_5723 = UTDScalarB::neBBB( x, y) ; 
              _cwc_5709 = _cwc_5723; 
            }
          }
          else
          { 
            _cwc_5709 = _dispatch_error_( 1, bool[*], "UTDScalarB::neBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
      else
      { 
        _cwc_5718 = _dim_A_( y); 
        _cwc_5720 = 0; 
        _cwc_5721 = _eq_SxS_( _cwc_5718, _cwc_5720); 
        if (_cwc_5721) 
        { 
          _cwc_5719 = UTDScalarB::neBBB( x, y) ; 
          _cwc_5709 = _cwc_5719; 
        }
        else
        { 
          _cwc_5715 = _dim_A_( y); 
          _cwc_5716 = 0; 
          _cwc_5717 = _gt_SxS_( _cwc_5715, _cwc_5716); 
          if (_cwc_5717) 
          { 
            _cwc_5711 = _dim_A_( y); 
            _cwc_5713 = 3; 
            _cwc_5714 = _eq_SxS_( _cwc_5711, _cwc_5713); 
            if (_cwc_5714) 
            { 
              _cwc_5712 = UTDScalarB::neBBB( x, y) ; 
              _cwc_5709 = _cwc_5712; 
            }
            else
            { 
              _cwc_5710 = UTDScalarB::neBBB( x, y) ; 
              _cwc_5709 = _cwc_5710; 
            }
          }
          else
          { 
            _cwc_5709 = _dispatch_error_( 1, bool[*], "UTDScalarB::neBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
          }
        }
      }
    }
    else
    { 
      _cwc_5709 = _dispatch_error_( 1, bool[*], "UTDScalarB::neBBB :: bool[*] bool[*] -> bool[*] ", x, y); 
    }
  }
  return( _cwc_5709); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::UTDScalarB_mainXXI(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
Terminal::Terminal *, TermFile::TermFile *, int UTDScalarB::UTDScalarB_mainXXI( Terminal::Terminal *_rso_1137_TheTerminal { ,NN } , TermFile::TermFile *_rso_1136_stdout { ,NN } )
/*
 *  UTDScalarB_mainXXI :: { Terminal::Terminal[*] -> { TermFile::TermFile[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                       TermFile::TermFile -> ( Terminal::Terminal, TermFile::TermFile, int)},
                            Terminal::Terminal -> { TermFile::TermFile[*] -> ( Terminal::Terminal, TermFile::TermFile, int),
                                                    TermFile::TermFile -> ( Terminal::Terminal, TermFile::TermFile, int)}}
 *  dispatching to: UTDScalarB::UTDScalarB_mainXXI
 */
{ 
  int _cwc_5765 { , NN } ; 
  TermFile::TermFile _cwc_5764 { , NN } ; 
  Terminal::Terminal _cwc_5763 { , NN } ; 
  Terminal::Terminal _cwc_5768 { , NN } ; 
  TermFile::TermFile _cwc_5767 { , NN } ; 
  int _cwc_5766 { , NN } ; 

  _cwc_5768, _cwc_5767, _cwc_5766 = UTDScalarB::UTDScalarB_mainXXI( _rso_1137_TheTerminal, _rso_1136_stdout) ; 
  _cwc_5763 = _cwc_5768; 
  _cwc_5764 = _cwc_5767; 
  _cwc_5765 = _cwc_5766; 
  return( _cwc_5763, _cwc_5764, _cwc_5765); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::jotdotnandBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[+] UTDScalarB::jotdotnandBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  jotdotnandBBB :: { bool[*] -> { bool[*] -> ( bool[+]),
                                    bool[+] -> ( bool[+]),
                                    bool[.] -> ( bool[4,4]),
                                    bool[4] -> ( bool[4,4])},
                       bool[+] -> { bool[*] -> ( bool[+]),
                                    bool[+] -> ( bool[+]),
                                    bool[.] -> ( bool[4,4]),
                                    bool[4] -> ( bool[4,4])},
                       bool[.] -> { bool[*] -> ( bool[4,4]),
                                    bool[+] -> ( bool[4,4]),
                                    bool[.] -> ( bool[4,4]),
                                    bool[4] -> ( bool[4,4])},
                       bool[4] -> { bool[*] -> ( bool[4,4]),
                                    bool[+] -> ( bool[4,4]),
                                    bool[.] -> ( bool[4,4]),
                                    bool[4] -> ( bool[4,4])}}
 *  dispatching to: UTDScalarB::jotdotnandBBB,
 *                  UTDScalarB::jotdotnandBBB
 */
{ 
  bool[+] _cwc_5769 { , NN } ; 
  bool _cwc_5830 { , NN } ; 
  int _cwc_5829 { , NN } ; 
  int _cwc_5828 { , NN } ; 
  bool _cwc_5827 { , NN } ; 
  int _cwc_5826 { , NN } ; 
  bool _cwc_5825 { , NN } ; 
  bool _cwc_5824 { , NN } ; 
  int{4} _cwc_5823 { , NN } ; 
  int _cwc_5822 { , NN } ; 
  int[1]{0} _cwc_5821 { , NN } ; 
  bool _cwc_5820 { , NN } ; 
  bool _cwc_5819 { , NN } ; 
  int _cwc_5818 { , NN } ; 
  int _cwc_5817 { , NN } ; 
  bool _cwc_5816 { , NN } ; 
  int _cwc_5815 { , NN } ; 
  bool _cwc_5814 { , NN } ; 
  bool _cwc_5813 { , NN } ; 
  int{4} _cwc_5812 { , NN } ; 
  int _cwc_5811 { , NN } ; 
  int[1]{0} _cwc_5810 { , NN } ; 
  bool _cwc_5809 { , NN } ; 
  bool[4,4] _cwc_5808 { , NN } ; 
  int[+] _cwc_5807 { , NN } ; 
  bool[+] _cwc_5806 { , NN } ; 
  int _cwc_5805 { , NN } ; 
  bool[+] _cwc_5804 { , NN } ; 
  int[+] _cwc_5803 { , NN } ; 
  bool _cwc_5802 { , NN } ; 
  int _cwc_5801 { , NN } ; 
  int _cwc_5800 { , NN } ; 
  bool _cwc_5799 { , NN } ; 
  int _cwc_5798 { , NN } ; 
  bool _cwc_5797 { , NN } ; 
  bool _cwc_5796 { , NN } ; 
  int{4} _cwc_5795 { , NN } ; 
  int _cwc_5794 { , NN } ; 
  int[1]{0} _cwc_5793 { , NN } ; 
  bool _cwc_5792 { , NN } ; 
  bool[+] _cwc_5791 { , NN } ; 
  int[+] _cwc_5790 { , NN } ; 
  bool[+] _cwc_5789 { , NN } ; 
  int _cwc_5788 { , NN } ; 
  bool[+] _cwc_5787 { , NN } ; 
  int _cwc_5786 { , NN } ; 
  bool _cwc_5785 { , NN } ; 
  int _cwc_5784 { , NN } ; 
  int _cwc_5783 { , NN } ; 
  bool _cwc_5782 { , NN } ; 
  int _cwc_5781 { , NN } ; 
  bool _cwc_5780 { , NN } ; 
  bool _cwc_5779 { , NN } ; 
  int{4} _cwc_5778 { , NN } ; 
  int _cwc_5777 { , NN } ; 
  int[1]{0} _cwc_5776 { , NN } ; 
  bool _cwc_5775 { , NN } ; 
  bool[+] _cwc_5774 { , NN } ; 
  int[+] _cwc_5773 { , NN } ; 
  bool[+] _cwc_5772 { , NN } ; 
  int _cwc_5771 { , NN } ; 
  bool[+] _cwc_5770 { , NN } ; 

  _cwc_5828 = _dim_A_( x); 
  _cwc_5829 = 0; 
  _cwc_5830 = _gt_SxS_( _cwc_5828, _cwc_5829); 
  if (_cwc_5830) 
  { 
    _cwc_5786 = _dim_A_( x); 
    _cwc_5826 = 1; 
    _cwc_5827 = _eq_SxS_( _cwc_5786, _cwc_5826); 
    if (_cwc_5827) 
    { 
      _cwc_5803 = _shape_A_( x); 
      _cwc_5820 = true; 
      _cwc_5823 = 4; 
      _cwc_5821 = [ 0 ]; 
      _cwc_5822 = _sel_VxA_( _cwc_5821, _cwc_5803); 
      _cwc_5824 = _eq_SxS_( _cwc_5822, _cwc_5823); 
      _cwc_5825 = _and_SxS_( _cwc_5824, _cwc_5820); 
      if (_cwc_5825) 
      { 
        _cwc_5817 = _dim_A_( y); 
        _cwc_5818 = 0; 
        _cwc_5819 = _gt_SxS_( _cwc_5817, _cwc_5818); 
        if (_cwc_5819) 
        { 
          _cwc_5805 = _dim_A_( y); 
          _cwc_5815 = 1; 
          _cwc_5816 = _eq_SxS_( _cwc_5805, _cwc_5815); 
          if (_cwc_5816) 
          { 
            _cwc_5807 = _shape_A_( y); 
            _cwc_5809 = true; 
            _cwc_5812 = 4; 
            _cwc_5810 = [ 0 ]; 
            _cwc_5811 = _sel_VxA_( _cwc_5810, _cwc_5807); 
            _cwc_5813 = _eq_SxS_( _cwc_5811, _cwc_5812); 
            _cwc_5814 = _and_SxS_( _cwc_5813, _cwc_5809); 
            if (_cwc_5814) 
            { 
              _cwc_5808 = UTDScalarB::jotdotnandBBB( x, y) ; 
              _cwc_5769 = _cwc_5808; 
            }
            else
            { 
              _cwc_5806 = UTDScalarB::jotdotnandBBB( x, y) ; 
              _cwc_5769 = _cwc_5806; 
            }
          }
          else
          { 
            _cwc_5804 = UTDScalarB::jotdotnandBBB( x, y) ; 
            _cwc_5769 = _cwc_5804; 
          }
        }
        else
        { 
          _cwc_5769 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotnandBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
      else
      { 
        _cwc_5800 = _dim_A_( y); 
        _cwc_5801 = 0; 
        _cwc_5802 = _gt_SxS_( _cwc_5800, _cwc_5801); 
        if (_cwc_5802) 
        { 
          _cwc_5788 = _dim_A_( y); 
          _cwc_5798 = 1; 
          _cwc_5799 = _eq_SxS_( _cwc_5788, _cwc_5798); 
          if (_cwc_5799) 
          { 
            _cwc_5790 = _shape_A_( y); 
            _cwc_5792 = true; 
            _cwc_5795 = 4; 
            _cwc_5793 = [ 0 ]; 
            _cwc_5794 = _sel_VxA_( _cwc_5793, _cwc_5790); 
            _cwc_5796 = _eq_SxS_( _cwc_5794, _cwc_5795); 
            _cwc_5797 = _and_SxS_( _cwc_5796, _cwc_5792); 
            if (_cwc_5797) 
            { 
              _cwc_5791 = UTDScalarB::jotdotnandBBB( x, y) ; 
              _cwc_5769 = _cwc_5791; 
            }
            else
            { 
              _cwc_5789 = UTDScalarB::jotdotnandBBB( x, y) ; 
              _cwc_5769 = _cwc_5789; 
            }
          }
          else
          { 
            _cwc_5787 = UTDScalarB::jotdotnandBBB( x, y) ; 
            _cwc_5769 = _cwc_5787; 
          }
        }
        else
        { 
          _cwc_5769 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotnandBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
        }
      }
    }
    else
    { 
      _cwc_5783 = _dim_A_( y); 
      _cwc_5784 = 0; 
      _cwc_5785 = _gt_SxS_( _cwc_5783, _cwc_5784); 
      if (_cwc_5785) 
      { 
        _cwc_5771 = _dim_A_( y); 
        _cwc_5781 = 1; 
        _cwc_5782 = _eq_SxS_( _cwc_5771, _cwc_5781); 
        if (_cwc_5782) 
        { 
          _cwc_5773 = _shape_A_( y); 
          _cwc_5775 = true; 
          _cwc_5778 = 4; 
          _cwc_5776 = [ 0 ]; 
          _cwc_5777 = _sel_VxA_( _cwc_5776, _cwc_5773); 
          _cwc_5779 = _eq_SxS_( _cwc_5777, _cwc_5778); 
          _cwc_5780 = _and_SxS_( _cwc_5779, _cwc_5775); 
          if (_cwc_5780) 
          { 
            _cwc_5774 = UTDScalarB::jotdotnandBBB( x, y) ; 
            _cwc_5769 = _cwc_5774; 
          }
          else
          { 
            _cwc_5772 = UTDScalarB::jotdotnandBBB( x, y) ; 
            _cwc_5769 = _cwc_5772; 
          }
        }
        else
        { 
          _cwc_5770 = UTDScalarB::jotdotnandBBB( x, y) ; 
          _cwc_5769 = _cwc_5770; 
        }
      }
      else
      { 
        _cwc_5769 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotnandBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
      }
    }
  }
  else
  { 
    _cwc_5769 = _dispatch_error_( 1, bool[+], "UTDScalarB::jotdotnandBBB :: bool[*] bool[*] -> bool[+] ", x, y); 
  }
  return( _cwc_5769); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB::rhoBBB(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[.] UTDScalarB::rhoBBB( bool[*] x { ,NN } , bool[*] y { ,NN } )
/*
 *  rhoBBB :: { bool[*] -> { bool[*] -> ( bool[.]),
                             bool -> ( bool[.])},
                bool -> { bool[*] -> ( bool[.]),
                          bool -> ( bool[.])}}
 *  dispatching to: UTDScalarB::rhoBBB
 */
{ 
  bool[.] _cwc_5831 { , NN } ; 
  bool _cwc_5838 { , NN } ; 
  int _cwc_5837 { , NN } ; 
  bool _cwc_5836 { , NN } ; 
  int _cwc_5835 { , NN } ; 
  bool[.] _cwc_5834 { , NN } ; 
  int _cwc_5833 { , NN } ; 
  int _cwc_5832 { , NN } ; 

  _cwc_5832 = _dim_A_( x); 
  _cwc_5837 = 0; 
  _cwc_5838 = _eq_SxS_( _cwc_5832, _cwc_5837); 
  if (_cwc_5838) 
  { 
    _cwc_5833 = _dim_A_( y); 
    _cwc_5835 = 0; 
    _cwc_5836 = _eq_SxS_( _cwc_5833, _cwc_5835); 
    if (_cwc_5836) 
    { 
      _cwc_5834 = UTDScalarB::rhoBBB( x, y) ; 
      _cwc_5831 = _cwc_5834; 
    }
    else
    { 
      _cwc_5831 = _dispatch_error_( 1, bool[.], "UTDScalarB::rhoBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
    }
  }
  else
  { 
    _cwc_5831 = _dispatch_error_( 1, bool[.], "UTDScalarB::rhoBBB :: bool[*] bool[*] -> bool[.] ", x, y); 
  }
  return( _cwc_5831); 
}



/****************************************************************************
 * UTDScalarB::notXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::notXBB( bool y { ,NN } )
/*
 *  notXBB ::  ---
 */
{ 
  bool _flat_2__SSA0_1 { , NN } ; 
  bool _flat_2 { , NN } ; 
  bool _flat_3 { , NN } ; 

  _flat_3 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_2 = ( wrapper:Array::!_flat_3) ; 
  _flat_2__SSA0_1 = _type_conv_( bool, _flat_2); 
  return( _flat_2__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::notXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::notXBB( bool[+] y { ,NN } )
/*
 *  notXBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_10 { , NN } ; 
  bool[*] _flat_11 { , NN } ; 
  bool[*] _flat_12 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_4 { , NN } ; 
  bool{0} _flat_5 { , NN } ; 
  int[.] _flat_6 { , NN } ; 
  int{0} _flat_7 { , NN } ; 
  int[.] _flat_8 { , NN } ; 
  int[.] _flat_9 { , NN } ; 

  _flat_9 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_8 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_7 = 0; 
  _flat_6 = _mul_SxV_( _flat_7, _flat_8); 
  _flat_5 = false; 
  _flat_4 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_6 <= iv < _flat_9)
        { 
          _flat_12 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_11 = wrapper:UTDScalarB:Array::to_bool( _flat_12) ; 
          _flat_10 = wrapper:UTDScalarB::notXBB( _flat_11) ; 
        } : _flat_10 ; 
         } :
      genarray( _flat_4, _flat_5); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::andBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  andBBB ::  ---
 */
{ 
  bool _flat_13__SSA0_1 { , NN } ; 
  bool _flat_13 { , NN } ; 

  _flat_13 = ( x wrapper:Array::&y) ; 
  _flat_13__SSA0_1 = _type_conv_( bool, _flat_13); 
  return( _flat_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::eqBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  bool _flat_14__SSA0_1 { , NN } ; 
  bool _flat_14 { , NN } ; 

  _flat_14 = ( x wrapper:UTDScalarB:Array::==y) ; 
  _flat_14__SSA0_1 = _type_conv_( bool, _flat_14); 
  return( _flat_14__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::geBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::geBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  geBBB ::  ---
 */
{ 
  bool _flat_15__SSA0_1 { , NN } ; 
  bool _flat_15 { , NN } ; 
  bool _flat_16 { , NN } ; 

  _flat_16 = ( wrapper:Array::!y) ; 
  _flat_15 = ( x wrapper:Array::|_flat_16) ; 
  _flat_15__SSA0_1 = _type_conv_( bool, _flat_15); 
  return( _flat_15__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::gtBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::gtBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  gtBBB ::  ---
 */
{ 
  bool _flat_17__SSA0_1 { , NN } ; 
  bool _flat_17 { , NN } ; 
  bool _flat_18 { , NN } ; 

  _flat_18 = ( wrapper:Array::!y) ; 
  _flat_17 = ( x wrapper:Array::&_flat_18) ; 
  _flat_17__SSA0_1 = _type_conv_( bool, _flat_17); 
  return( _flat_17__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::leBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::leBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  leBBB ::  ---
 */
{ 
  bool _flat_19__SSA0_1 { , NN } ; 
  bool _flat_19 { , NN } ; 
  bool _flat_20 { , NN } ; 

  _flat_20 = ( wrapper:Array::!x) ; 
  _flat_19 = ( _flat_20 wrapper:Array::|y) ; 
  _flat_19__SSA0_1 = _type_conv_( bool, _flat_19); 
  return( _flat_19__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::ltBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::ltBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  ltBBB ::  ---
 */
{ 
  bool _flat_21__SSA0_1 { , NN } ; 
  bool _flat_21 { , NN } ; 
  bool _flat_22 { , NN } ; 

  _flat_22 = ( wrapper:Array::!x) ; 
  _flat_21 = ( _flat_22 wrapper:Array::&y) ; 
  _flat_21__SSA0_1 = _type_conv_( bool, _flat_21); 
  return( _flat_21__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::nandBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::nandBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  nandBBB ::  ---
 */
{ 
  bool _flat_23__SSA0_1 { , NN } ; 
  bool _flat_23 { , NN } ; 
  bool _flat_24 { , NN } ; 

  _flat_24 = ( x wrapper:Array::&y) ; 
  _flat_23 = ( wrapper:Array::!_flat_24) ; 
  _flat_23__SSA0_1 = _type_conv_( bool, _flat_23); 
  return( _flat_23__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::neBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  bool _flat_25__SSA0_1 { , NN } ; 
  bool _flat_25 { , NN } ; 

  _flat_25 = ( x wrapper:Array::!=y) ; 
  _flat_25__SSA0_1 = _type_conv_( bool, _flat_25); 
  return( _flat_25__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::norBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::norBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  norBBB ::  ---
 */
{ 
  bool _flat_26__SSA0_1 { , NN } ; 
  bool _flat_26 { , NN } ; 
  bool _flat_27 { , NN } ; 

  _flat_27 = ( x wrapper:Array::|y) ; 
  _flat_26 = ( wrapper:Array::!_flat_27) ; 
  _flat_26__SSA0_1 = _type_conv_( bool, _flat_26); 
  return( _flat_26__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::orBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::orBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  orBBB ::  ---
 */
{ 
  bool _flat_28__SSA0_1 { , NN } ; 
  bool _flat_28 { , NN } ; 

  _flat_28 = ( x wrapper:Array::|y) ; 
  _flat_28__SSA0_1 = _type_conv_( bool, _flat_28); 
  return( _flat_28__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::barBBI(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB::barBBI( bool x { ,NN } , bool y { ,NN } )
/*
 *  barBBI ::  ---
 */
{ 
  int _flat_29__SSA0_1 { , NN } ; 
  int _flat_29 { , NN } ; 
  int _flat_30 { , NN } ; 
  int _flat_31 { , NN } ; 

  _flat_31 = wrapper:UTDScalarB:Array::toi( y) ; 
  _flat_30 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_29 = ( _flat_30 wrapper:Array::-_flat_31) ; 
  _flat_29__SSA0_1 = _type_conv_( int, _flat_29); 
  return( _flat_29__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::andBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  andBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_38 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_32 { , NN } ; 
  bool{0} _flat_33 { , NN } ; 
  int[.] _flat_34 { , NN } ; 
  int{0} _flat_35 { , NN } ; 
  int[.] _flat_36 { , NN } ; 
  int[.] _flat_37 { , NN } ; 

  _flat_37 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_36 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_35 = 0; 
  _flat_34 = _mul_SxV_( _flat_35, _flat_36); 
  _flat_33 = false; 
  _flat_32 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_34 <= iv < _flat_37)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_38 = wrapper:UTDScalarB::andBBB( xel, y) ; 
        } : _flat_38 ; 
         } :
      genarray( _flat_32, _flat_33); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::andBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  andBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_42 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_39 { , NN } ; 
  int[.] _flat_40 { , NN } ; 
  int{0} _flat_41 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_41 = 0; 
  _flat_40 = _mul_SxV_( _flat_41, sy); 
  _flat_39 = false; 
  z = with {
        /* Partn */
        (_flat_40 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_42 = wrapper:UTDScalarB::andBBB( xel, yel) ; 
        } : _flat_42 ; 
         } :
      genarray( sy, _flat_39); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::eqBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_49 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_43 { , NN } ; 
  bool{0} _flat_44 { , NN } ; 
  int[.] _flat_45 { , NN } ; 
  int{0} _flat_46 { , NN } ; 
  int[.] _flat_47 { , NN } ; 
  int[.] _flat_48 { , NN } ; 

  _flat_48 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_47 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_46 = 0; 
  _flat_45 = _mul_SxV_( _flat_46, _flat_47); 
  _flat_44 = false; 
  _flat_43 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_45 <= iv < _flat_48)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_49 = wrapper:UTDScalarB::eqBBB( xel, y) ; 
        } : _flat_49 ; 
         } :
      genarray( _flat_43, _flat_44); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::eqBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_53 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_50 { , NN } ; 
  int[.] _flat_51 { , NN } ; 
  int{0} _flat_52 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_52 = 0; 
  _flat_51 = _mul_SxV_( _flat_52, sy); 
  _flat_50 = false; 
  z = with {
        /* Partn */
        (_flat_51 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_53 = wrapper:UTDScalarB::eqBBB( xel, yel) ; 
        } : _flat_53 ; 
         } :
      genarray( sy, _flat_50); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::geBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::geBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  geBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_60 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_54 { , NN } ; 
  bool{0} _flat_55 { , NN } ; 
  int[.] _flat_56 { , NN } ; 
  int{0} _flat_57 { , NN } ; 
  int[.] _flat_58 { , NN } ; 
  int[.] _flat_59 { , NN } ; 

  _flat_59 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_58 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_57 = 0; 
  _flat_56 = _mul_SxV_( _flat_57, _flat_58); 
  _flat_55 = false; 
  _flat_54 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_56 <= iv < _flat_59)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_60 = wrapper:UTDScalarB::geBBB( xel, y) ; 
        } : _flat_60 ; 
         } :
      genarray( _flat_54, _flat_55); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::geBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::geBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  geBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_64 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_61 { , NN } ; 
  int[.] _flat_62 { , NN } ; 
  int{0} _flat_63 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_63 = 0; 
  _flat_62 = _mul_SxV_( _flat_63, sy); 
  _flat_61 = false; 
  z = with {
        /* Partn */
        (_flat_62 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_64 = wrapper:UTDScalarB::geBBB( xel, yel) ; 
        } : _flat_64 ; 
         } :
      genarray( sy, _flat_61); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::gtBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::gtBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  gtBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_71 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_65 { , NN } ; 
  bool{0} _flat_66 { , NN } ; 
  int[.] _flat_67 { , NN } ; 
  int{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int[.] _flat_70 { , NN } ; 

  _flat_70 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_69 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_68 = 0; 
  _flat_67 = _mul_SxV_( _flat_68, _flat_69); 
  _flat_66 = false; 
  _flat_65 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_67 <= iv < _flat_70)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_71 = wrapper:UTDScalarB::gtBBB( xel, y) ; 
        } : _flat_71 ; 
         } :
      genarray( _flat_65, _flat_66); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::gtBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::gtBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  gtBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_75 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_72 { , NN } ; 
  int[.] _flat_73 { , NN } ; 
  int{0} _flat_74 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_74 = 0; 
  _flat_73 = _mul_SxV_( _flat_74, sy); 
  _flat_72 = false; 
  z = with {
        /* Partn */
        (_flat_73 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_75 = wrapper:UTDScalarB::gtBBB( xel, yel) ; 
        } : _flat_75 ; 
         } :
      genarray( sy, _flat_72); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::leBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::leBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  leBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_82 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_76 { , NN } ; 
  bool{0} _flat_77 { , NN } ; 
  int[.] _flat_78 { , NN } ; 
  int{0} _flat_79 { , NN } ; 
  int[.] _flat_80 { , NN } ; 
  int[.] _flat_81 { , NN } ; 

  _flat_81 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_80 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_79 = 0; 
  _flat_78 = _mul_SxV_( _flat_79, _flat_80); 
  _flat_77 = false; 
  _flat_76 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_78 <= iv < _flat_81)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_82 = wrapper:UTDScalarB::leBBB( xel, y) ; 
        } : _flat_82 ; 
         } :
      genarray( _flat_76, _flat_77); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::leBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::leBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  leBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_86 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_83 { , NN } ; 
  int[.] _flat_84 { , NN } ; 
  int{0} _flat_85 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_85 = 0; 
  _flat_84 = _mul_SxV_( _flat_85, sy); 
  _flat_83 = false; 
  z = with {
        /* Partn */
        (_flat_84 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_86 = wrapper:UTDScalarB::leBBB( xel, yel) ; 
        } : _flat_86 ; 
         } :
      genarray( sy, _flat_83); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::ltBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::ltBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  ltBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_93 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_87 { , NN } ; 
  bool{0} _flat_88 { , NN } ; 
  int[.] _flat_89 { , NN } ; 
  int{0} _flat_90 { , NN } ; 
  int[.] _flat_91 { , NN } ; 
  int[.] _flat_92 { , NN } ; 

  _flat_92 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_91 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_90 = 0; 
  _flat_89 = _mul_SxV_( _flat_90, _flat_91); 
  _flat_88 = false; 
  _flat_87 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_89 <= iv < _flat_92)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_93 = wrapper:UTDScalarB::ltBBB( xel, y) ; 
        } : _flat_93 ; 
         } :
      genarray( _flat_87, _flat_88); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::ltBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::ltBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  ltBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_97 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_94 { , NN } ; 
  int[.] _flat_95 { , NN } ; 
  int{0} _flat_96 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_96 = 0; 
  _flat_95 = _mul_SxV_( _flat_96, sy); 
  _flat_94 = false; 
  z = with {
        /* Partn */
        (_flat_95 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_97 = wrapper:UTDScalarB::ltBBB( xel, yel) ; 
        } : _flat_97 ; 
         } :
      genarray( sy, _flat_94); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::nandBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::nandBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  nandBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_104 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_98 { , NN } ; 
  bool{0} _flat_99 { , NN } ; 
  int[.] _flat_100 { , NN } ; 
  int{0} _flat_101 { , NN } ; 
  int[.] _flat_102 { , NN } ; 
  int[.] _flat_103 { , NN } ; 

  _flat_103 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_102 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_101 = 0; 
  _flat_100 = _mul_SxV_( _flat_101, _flat_102); 
  _flat_99 = false; 
  _flat_98 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_100 <= iv < _flat_103)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_104 = wrapper:UTDScalarB::nandBBB( xel, y) ; 
        } : _flat_104 ; 
         } :
      genarray( _flat_98, _flat_99); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::nandBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::nandBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  nandBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_108 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_105 { , NN } ; 
  int[.] _flat_106 { , NN } ; 
  int{0} _flat_107 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_107 = 0; 
  _flat_106 = _mul_SxV_( _flat_107, sy); 
  _flat_105 = false; 
  z = with {
        /* Partn */
        (_flat_106 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_108 = wrapper:UTDScalarB::nandBBB( xel, yel) ; 
        } : _flat_108 ; 
         } :
      genarray( sy, _flat_105); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::neBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_115 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_109 { , NN } ; 
  bool{0} _flat_110 { , NN } ; 
  int[.] _flat_111 { , NN } ; 
  int{0} _flat_112 { , NN } ; 
  int[.] _flat_113 { , NN } ; 
  int[.] _flat_114 { , NN } ; 

  _flat_114 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_113 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_112 = 0; 
  _flat_111 = _mul_SxV_( _flat_112, _flat_113); 
  _flat_110 = false; 
  _flat_109 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_111 <= iv < _flat_114)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_115 = wrapper:UTDScalarB::neBBB( xel, y) ; 
        } : _flat_115 ; 
         } :
      genarray( _flat_109, _flat_110); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::neBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_119 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_116 { , NN } ; 
  int[.] _flat_117 { , NN } ; 
  int{0} _flat_118 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_118 = 0; 
  _flat_117 = _mul_SxV_( _flat_118, sy); 
  _flat_116 = false; 
  z = with {
        /* Partn */
        (_flat_117 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_119 = wrapper:UTDScalarB::neBBB( xel, yel) ; 
        } : _flat_119 ; 
         } :
      genarray( sy, _flat_116); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::norBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::norBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  norBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_126 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_120 { , NN } ; 
  bool{0} _flat_121 { , NN } ; 
  int[.] _flat_122 { , NN } ; 
  int{0} _flat_123 { , NN } ; 
  int[.] _flat_124 { , NN } ; 
  int[.] _flat_125 { , NN } ; 

  _flat_125 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_124 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_123 = 0; 
  _flat_122 = _mul_SxV_( _flat_123, _flat_124); 
  _flat_121 = false; 
  _flat_120 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_122 <= iv < _flat_125)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_126 = wrapper:UTDScalarB::norBBB( xel, y) ; 
        } : _flat_126 ; 
         } :
      genarray( _flat_120, _flat_121); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::norBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::norBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  norBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_130 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_127 { , NN } ; 
  int[.] _flat_128 { , NN } ; 
  int{0} _flat_129 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_129 = 0; 
  _flat_128 = _mul_SxV_( _flat_129, sy); 
  _flat_127 = false; 
  z = with {
        /* Partn */
        (_flat_128 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_130 = wrapper:UTDScalarB::norBBB( xel, yel) ; 
        } : _flat_130 ; 
         } :
      genarray( sy, _flat_127); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::orBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::orBBB( bool[+] x { ,NN } , bool y { ,NN } )
/*
 *  orBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_137 { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_131 { , NN } ; 
  bool{0} _flat_132 { , NN } ; 
  int[.] _flat_133 { , NN } ; 
  int{0} _flat_134 { , NN } ; 
  int[.] _flat_135 { , NN } ; 
  int[.] _flat_136 { , NN } ; 

  _flat_136 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_135 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_134 = 0; 
  _flat_133 = _mul_SxV_( _flat_134, _flat_135); 
  _flat_132 = false; 
  _flat_131 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_133 <= iv < _flat_136)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_137 = wrapper:UTDScalarB::orBBB( xel, y) ; 
        } : _flat_137 ; 
         } :
      genarray( _flat_131, _flat_132); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::orBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::orBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  orBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_141 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] xel { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_138 { , NN } ; 
  int[.] _flat_139 { , NN } ; 
  int{0} _flat_140 { , NN } ; 
  int[.] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_140 = 0; 
  _flat_139 = _mul_SxV_( _flat_140, sy); 
  _flat_138 = false; 
  z = with {
        /* Partn */
        (_flat_139 <= iv < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_141 = wrapper:UTDScalarB::orBBB( xel, yel) ; 
        } : _flat_141 ; 
         } :
      genarray( sy, _flat_138); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB::rhoBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  rhoBBB ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  int[1] _flat_142 { , NN } ; 
  int _flat_143 { , NN } ; 

  _flat_143 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_142 = [ _flat_143 ]; 
  z = wrapper:UTDScalarB:Array::genarray( _flat_142, y) ; 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoIBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] UTDScalarB::rhoIBB( int[.] x { ,NN } , bool[*] y { ,NN } )
/*
 *  rhoIBB ::  ---
 */
{ 
  int offset__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] el { , NN } ; 
  int[.] _flat_153 { , NN } ; 
  int[.] _flat_154 { , NN } ; 
  int _flat_151 { , NN } ; 
  int[.] _flat_152 { , NN } ; 
  int offset { , NN } ; 
  int[.] _flat_150 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_144 { , NN } ; 
  bool{0} _flat_145 { , NN } ; 
  int[.] _flat_146 { , NN } ; 
  int{0} _flat_147 { , NN } ; 
  int[.] _flat_148 { , NN } ; 
  int[.] _flat_149 { , NN } ; 

  _flat_149 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_148 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_147 = 0; 
  _flat_146 = _mul_SxV_( _flat_147, _flat_148); 
  _flat_145 = false; 
  _flat_144 = wrapper:UTDScalarB:Array::toi( x) ; 
  z = with {
        /* Partn */
        (_flat_146 <= iv < _flat_149)
        { 
          _flat_150 = wrapper:UTDScalarB:Array::toi( x) ; 
          offset = wrapper:UTDScalarB::V2O( _flat_150, iv) ; 
          _flat_152 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_151 = wrapper:UTDScalarB:Array::prod( _flat_152) ; 
          offset__SSA0_1 = _aplmod_SxS_( offset, _flat_151); 
          _flat_154 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_153 = wrapper:UTDScalarB::O2V( _flat_154, offset__SSA0_1) ; 
          el = wrapper:UTDScalarB:Array::sel( _flat_153, y) ; 
        } : el ; 
         } :
      genarray( _flat_144, _flat_145); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::rhoXBI(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB::rhoXBI( bool[+] y { ,NN } )
/*
 *  rhoXBI ::  ---
 */
{ 
  int[.] _flat_155__SSA0_1 { , NN } ; 
  int[.] _flat_155 { , NN } ; 

  _flat_155 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_155__SSA0_1 = _type_conv_( int[.], _flat_155); 
  return( _flat_155__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::quadXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile *, bool[*] UTDScalarB::quadXBB( Terminal::Terminal *_rso_1139_TheTerminal { ,NN } , TermFile::TermFile *_rso_1138_stdout { ,NN } , bool[*] y { ,NN } , int QUADpp { ,NN } , int QUADpw { ,NN } )
/*
 *  quadXBB ::  ---
 */
{ 
  TermFile::TermFile _rso_1138_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_1139_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_1139_TheTerminal__SSA0_1, _rso_1138_stdout__SSA0_1 = wrapper:UTDScalarB:StdIO::show( _rso_1139_TheTerminal, _rso_1138_stdout, y) ; 
  return( _rso_1139_TheTerminal__SSA0_1, _rso_1138_stdout__SSA0_1, y); 
}



/****************************************************************************
 * UTDScalarB::quadXII(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile *, int[*] UTDScalarB::quadXII( Terminal::Terminal *_rso_1141_TheTerminal { ,NN } , TermFile::TermFile *_rso_1140_stdout { ,NN } , int[*] y { ,NN } , int QUADpp { ,NN } , int QUADpw { ,NN } )
/*
 *  quadXII ::  ---
 */
{ 
  TermFile::TermFile _rso_1140_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_1141_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_1141_TheTerminal__SSA0_1, _rso_1140_stdout__SSA0_1 = wrapper:UTDScalarB:StdIO::show( _rso_1141_TheTerminal, _rso_1140_stdout, y) ; 
  return( _rso_1141_TheTerminal__SSA0_1, _rso_1140_stdout__SSA0_1, y); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[2] UTDScalarB::comaBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[2] _flat_156__SSA0_1 { , NN } ; 
  bool[2] _flat_156 { , NN } ; 
  bool[1] _flat_157 { , NN } ; 
  bool _flat_158 { , NN } ; 
  bool[1] _flat_159 { , NN } ; 
  bool _flat_160 { , NN } ; 

  _flat_160 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_159 = [ _flat_160 ]; 
  _flat_158 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_157 = [ _flat_158 ]; 
  _flat_156 = ( _flat_157 wrapper:UTDScalarB:Array::++_flat_159) ; 
  _flat_156__SSA0_1 = _type_conv_( bool[2], _flat_156); 
  return( _flat_156__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB::comaBBB( bool[.] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[.] _flat_161__SSA0_1 { , NN } ; 
  bool[.] _flat_161 { , NN } ; 
  bool[.] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB::comaBBB( bool[.] x { ,NN } , bool[.] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[.] _flat_165__SSA0_1 { , NN } ; 
  bool[.] _flat_165 { , NN } ; 
  bool[.] _flat_166 { , NN } ; 
  bool[.] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::sameBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::sameBBB( bool x { ,NN } , bool y { ,NN } )
/*
 *  sameBBB ::  ---
 */
{ 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  bool _flat_168 { , NN } ; 
  bool _flat_169 { , NN } ; 

  _flat_169 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_168 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  z = wrapper:UTDScalarB::eqBBB( _flat_168, _flat_169) ; 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::sameBBB__Cond_1(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::sameBBB__Cond_1( bool _flat_170 { ,NN } , bool[+] y { ,NN } , bool[+] x { ,NN } )
/*
 *  sameBBB__Cond_1 ::  ---
 */
{ 
  bool _hce_1__SSA0_2 { , NN } ; 
  bool{0} _hce_1__SSA0_1 { , NN } ; 
  int[.] _flat_175 { , NN } ; 
  int[.] _flat_174 { , NN } ; 
  bool[.] _flat_173 { , NN } ; 
  bool _hce_1 { , NN } ; 

  if (_flat_170) 
  { 
    _flat_175 = _shape_A_( y); 
    _flat_174 = _shape_A_( x); 
    _flat_173 = ( _flat_174 wrapper:UTDScalarB:Array::==_flat_175) ; 
    _hce_1 = wrapper:UTDScalarB:Array::all( _flat_173) ; 
  }
  else
  { 
    _hce_1__SSA0_1 = false; 
  }
  _hce_1__SSA0_2 = ( _flat_170 ? _hce_1 : _hce_1__SSA0_1 ); 
  return( _hce_1__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::sameBBB__Cond_0(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::sameBBB__Cond_0( bool _hce_1 { ,NN } , bool[+] y { ,NN } , bool[+] x { ,NN } )
/*
 *  sameBBB__Cond_0 ::  ---
 */
{ 
  bool _hce_0__SSA0_2 { , NN } ; 
  bool{0} _hce_0__SSA0_1 { , NN } ; 
  bool[+] _flat_178 { , NN } ; 
  bool[+] _flat_177 { , NN } ; 
  bool[+] _flat_176 { , NN } ; 
  bool _hce_0 { , NN } ; 

  if (_hce_1) 
  { 
    _flat_178 = wrapper:UTDScalarB:Array::to_bool( y) ; 
    _flat_177 = wrapper:UTDScalarB:Array::to_bool( x) ; 
    _flat_176 = wrapper:UTDScalarB::eqBBB( _flat_177, _flat_178) ; 
    _hce_0 = wrapper:UTDScalarB:Array::all( _flat_176) ; 
  }
  else
  { 
    _hce_0__SSA0_1 = false; 
  }
  _hce_0__SSA0_2 = ( _hce_1 ? _hce_0 : _hce_0__SSA0_1 ); 
  return( _hce_0__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::sameBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::sameBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  sameBBB ::  ---
 */
{ 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  bool _hce_0 { , NN } ; 
  bool _hce_1 { , NN } ; 
  bool _flat_170 { , NN } ; 
  int _flat_171 { , NN } ; 
  int _flat_172 { , NN } ; 

  _flat_172 = _dim_A_( y); 
  _flat_171 = _dim_A_( x); 
  _flat_170 = ( _flat_171 wrapper:UTDScalarB:Array::==_flat_172) ; 
  _hce_1 = UTDScalarB::sameBBB__Cond_1( _flat_170, y, x) ; 
  _hce_0 = UTDScalarB::sameBBB__Cond_0( _hce_1, y, x) ; 
  z = _hce_0; 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotandBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::jotdotandBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  jotdotandBBB ::  ---
 */
{ 
  bool[+] z { , NN } ; 
  bool[+] _flat_187 { , NN } ; 
  bool[+] _flat_188 { , NN } ; 
  bool[*] xitem { , NN } ; 
  bool[*] _flat_186 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_181 { , NN } ; 
  int[.] _flat_182 { , NN } ; 
  int{0} _flat_183 { , NN } ; 
  int[.] _flat_184 { , NN } ; 
  int[.] _flat_185 { , NN } ; 
  bool[*] cell { , NN } ; 
  int[.] _flat_179 { , NN } ; 
  bool{0} _flat_180 { , NN } ; 

  _flat_180 = false; 
  _flat_179 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_179, _flat_180) ; 
  _flat_185 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_184 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_183 = 0; 
  _flat_182 = _mul_SxV_( _flat_183, _flat_184); 
  _flat_181 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_182 <= iv < _flat_185)
        { 
          _flat_186 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_186) ; 
          _flat_188 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_187 = wrapper:UTDScalarB::andBBB( xitem, _flat_188) ; 
        } : _flat_187 ; 
         } :
      genarray( _flat_181, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::jotdoteqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::jotdoteqBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  jotdoteqBBB ::  ---
 */
{ 
  bool[+] z { , NN } ; 
  bool[+] _flat_197 { , NN } ; 
  bool[+] _flat_198 { , NN } ; 
  bool[*] xitem { , NN } ; 
  bool[*] _flat_196 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_191 { , NN } ; 
  int[.] _flat_192 { , NN } ; 
  int{0} _flat_193 { , NN } ; 
  int[.] _flat_194 { , NN } ; 
  int[.] _flat_195 { , NN } ; 
  bool[*] cell { , NN } ; 
  int[.] _flat_189 { , NN } ; 
  bool{0} _flat_190 { , NN } ; 

  _flat_190 = false; 
  _flat_189 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_189, _flat_190) ; 
  _flat_195 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_194 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_193 = 0; 
  _flat_192 = _mul_SxV_( _flat_193, _flat_194); 
  _flat_191 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_192 <= iv < _flat_195)
        { 
          _flat_196 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_196) ; 
          _flat_198 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_197 = wrapper:UTDScalarB::eqBBB( xitem, _flat_198) ; 
        } : _flat_197 ; 
         } :
      genarray( _flat_191, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::jotdotgeBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::jotdotgeBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  jotdotgeBBB ::  ---
 */
{ 
  bool[+] z { , NN } ; 
  bool[+] _flat_207 { , NN } ; 
  bool[+] _flat_208 { , NN } ; 
  bool[*] xitem { , NN } ; 
  bool[*] _flat_206 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_201 { , NN } ; 
  int[.] _flat_202 { , NN } ; 
  int{0} _flat_203 { , NN } ; 
  int[.] _flat_204 { , NN } ; 
  int[.] _flat_205 { , NN } ; 
  bool[*] cell { , NN } ; 
  int[.] _flat_199 { , NN } ; 
  bool{0} _flat_200 { , NN } ; 

  _flat_200 = false; 
  _flat_199 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_199, _flat_200) ; 
  _flat_205 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_204 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_203 = 0; 
  _flat_202 = _mul_SxV_( _flat_203, _flat_204); 
  _flat_201 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_202 <= iv < _flat_205)
        { 
          _flat_206 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_206) ; 
          _flat_208 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_207 = wrapper:UTDScalarB::geBBB( xitem, _flat_208) ; 
        } : _flat_207 ; 
         } :
      genarray( _flat_201, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::jotdotgtBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::jotdotgtBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  jotdotgtBBB ::  ---
 */
{ 
  bool[+] z { , NN } ; 
  bool[+] _flat_217 { , NN } ; 
  bool[+] _flat_218 { , NN } ; 
  bool[*] xitem { , NN } ; 
  bool[*] _flat_216 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_211 { , NN } ; 
  int[.] _flat_212 { , NN } ; 
  int{0} _flat_213 { , NN } ; 
  int[.] _flat_214 { , NN } ; 
  int[.] _flat_215 { , NN } ; 
  bool[*] cell { , NN } ; 
  int[.] _flat_209 { , NN } ; 
  bool{0} _flat_210 { , NN } ; 

  _flat_210 = false; 
  _flat_209 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_209, _flat_210) ; 
  _flat_215 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_214 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_213 = 0; 
  _flat_212 = _mul_SxV_( _flat_213, _flat_214); 
  _flat_211 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_212 <= iv < _flat_215)
        { 
          _flat_216 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_216) ; 
          _flat_218 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_217 = wrapper:UTDScalarB::gtBBB( xitem, _flat_218) ; 
        } : _flat_217 ; 
         } :
      genarray( _flat_211, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::jotdotleBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::jotdotleBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  jotdotleBBB ::  ---
 */
{ 
  bool[+] z { , NN } ; 
  bool[+] _flat_227 { , NN } ; 
  bool[+] _flat_228 { , NN } ; 
  bool[*] xitem { , NN } ; 
  bool[*] _flat_226 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_221 { , NN } ; 
  int[.] _flat_222 { , NN } ; 
  int{0} _flat_223 { , NN } ; 
  int[.] _flat_224 { , NN } ; 
  int[.] _flat_225 { , NN } ; 
  bool[*] cell { , NN } ; 
  int[.] _flat_219 { , NN } ; 
  bool{0} _flat_220 { , NN } ; 

  _flat_220 = false; 
  _flat_219 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_219, _flat_220) ; 
  _flat_225 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_224 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_223 = 0; 
  _flat_222 = _mul_SxV_( _flat_223, _flat_224); 
  _flat_221 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_222 <= iv < _flat_225)
        { 
          _flat_226 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_226) ; 
          _flat_228 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_227 = wrapper:UTDScalarB::leBBB( xitem, _flat_228) ; 
        } : _flat_227 ; 
         } :
      genarray( _flat_221, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::jotdotltBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::jotdotltBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  jotdotltBBB ::  ---
 */
{ 
  bool[+] z { , NN } ; 
  bool[+] _flat_237 { , NN } ; 
  bool[+] _flat_238 { , NN } ; 
  bool[*] xitem { , NN } ; 
  bool[*] _flat_236 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_231 { , NN } ; 
  int[.] _flat_232 { , NN } ; 
  int{0} _flat_233 { , NN } ; 
  int[.] _flat_234 { , NN } ; 
  int[.] _flat_235 { , NN } ; 
  bool[*] cell { , NN } ; 
  int[.] _flat_229 { , NN } ; 
  bool{0} _flat_230 { , NN } ; 

  _flat_230 = false; 
  _flat_229 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_229, _flat_230) ; 
  _flat_235 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_234 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_233 = 0; 
  _flat_232 = _mul_SxV_( _flat_233, _flat_234); 
  _flat_231 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_232 <= iv < _flat_235)
        { 
          _flat_236 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_236) ; 
          _flat_238 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_237 = wrapper:UTDScalarB::ltBBB( xitem, _flat_238) ; 
        } : _flat_237 ; 
         } :
      genarray( _flat_231, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::jotdotnandBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::jotdotnandBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  jotdotnandBBB ::  ---
 */
{ 
  bool[+] z { , NN } ; 
  bool[+] _flat_247 { , NN } ; 
  bool[+] _flat_248 { , NN } ; 
  bool[*] xitem { , NN } ; 
  bool[*] _flat_246 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_241 { , NN } ; 
  int[.] _flat_242 { , NN } ; 
  int{0} _flat_243 { , NN } ; 
  int[.] _flat_244 { , NN } ; 
  int[.] _flat_245 { , NN } ; 
  bool[*] cell { , NN } ; 
  int[.] _flat_239 { , NN } ; 
  bool{0} _flat_240 { , NN } ; 

  _flat_240 = false; 
  _flat_239 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_239, _flat_240) ; 
  _flat_245 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_244 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_243 = 0; 
  _flat_242 = _mul_SxV_( _flat_243, _flat_244); 
  _flat_241 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_242 <= iv < _flat_245)
        { 
          _flat_246 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_246) ; 
          _flat_248 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_247 = wrapper:UTDScalarB::nandBBB( xitem, _flat_248) ; 
        } : _flat_247 ; 
         } :
      genarray( _flat_241, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::jotdotneBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::jotdotneBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  jotdotneBBB ::  ---
 */
{ 
  bool[+] z { , NN } ; 
  bool[+] _flat_257 { , NN } ; 
  bool[+] _flat_258 { , NN } ; 
  bool[*] xitem { , NN } ; 
  bool[*] _flat_256 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_251 { , NN } ; 
  int[.] _flat_252 { , NN } ; 
  int{0} _flat_253 { , NN } ; 
  int[.] _flat_254 { , NN } ; 
  int[.] _flat_255 { , NN } ; 
  bool[*] cell { , NN } ; 
  int[.] _flat_249 { , NN } ; 
  bool{0} _flat_250 { , NN } ; 

  _flat_250 = false; 
  _flat_249 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_249, _flat_250) ; 
  _flat_255 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_254 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_253 = 0; 
  _flat_252 = _mul_SxV_( _flat_253, _flat_254); 
  _flat_251 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_252 <= iv < _flat_255)
        { 
          _flat_256 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_256) ; 
          _flat_258 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_257 = wrapper:UTDScalarB::neBBB( xitem, _flat_258) ; 
        } : _flat_257 ; 
         } :
      genarray( _flat_251, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::jotdotnorBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::jotdotnorBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  jotdotnorBBB ::  ---
 */
{ 
  bool[+] z { , NN } ; 
  bool[+] _flat_267 { , NN } ; 
  bool[+] _flat_268 { , NN } ; 
  bool[*] xitem { , NN } ; 
  bool[*] _flat_266 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_261 { , NN } ; 
  int[.] _flat_262 { , NN } ; 
  int{0} _flat_263 { , NN } ; 
  int[.] _flat_264 { , NN } ; 
  int[.] _flat_265 { , NN } ; 
  bool[*] cell { , NN } ; 
  int[.] _flat_259 { , NN } ; 
  bool{0} _flat_260 { , NN } ; 

  _flat_260 = false; 
  _flat_259 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_259, _flat_260) ; 
  _flat_265 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_264 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_263 = 0; 
  _flat_262 = _mul_SxV_( _flat_263, _flat_264); 
  _flat_261 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_262 <= iv < _flat_265)
        { 
          _flat_266 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_266) ; 
          _flat_268 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_267 = wrapper:UTDScalarB::norBBB( xitem, _flat_268) ; 
        } : _flat_267 ; 
         } :
      genarray( _flat_261, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::jotdotorBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::jotdotorBBB( bool[+] x { ,NN } , bool[+] y { ,NN } )
/*
 *  jotdotorBBB ::  ---
 */
{ 
  bool[+] z { , NN } ; 
  bool[+] _flat_277 { , NN } ; 
  bool[+] _flat_278 { , NN } ; 
  bool[*] xitem { , NN } ; 
  bool[*] _flat_276 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_271 { , NN } ; 
  int[.] _flat_272 { , NN } ; 
  int{0} _flat_273 { , NN } ; 
  int[.] _flat_274 { , NN } ; 
  int[.] _flat_275 { , NN } ; 
  bool[*] cell { , NN } ; 
  int[.] _flat_269 { , NN } ; 
  bool{0} _flat_270 { , NN } ; 

  _flat_270 = false; 
  _flat_269 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_269, _flat_270) ; 
  _flat_275 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_274 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_273 = 0; 
  _flat_272 = _mul_SxV_( _flat_273, _flat_274); 
  _flat_271 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_272 <= iv < _flat_275)
        { 
          _flat_276 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_276) ; 
          _flat_278 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_277 = wrapper:UTDScalarB::orBBB( xitem, _flat_278) ; 
        } : _flat_277 ; 
         } :
      genarray( _flat_271, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::andslXBBQUICKSTOP(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::andslXBBQUICKSTOP( bool[.] y { ,NN } )
/*
 *  andslXBBQUICKSTOP ::  ---
 */
{ 
  int _eat_1163 { , NN } ; 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  bool _flat_287 { , NN } ; 
  int[1] iv { , NN } ; 
  bool _flat_279 { , NN } ; 
  int{1} _flat_280 { , NN } ; 
  bool _flat_281 { , NN } ; 
  int{0} _flat_282 { , NN } ; 
  int[1] _flat_283 { , NN } ; 
  int{0} _flat_284 { , NN } ; 
  int[1] _flat_285 { , NN } ; 
  int[1] _flat_286 { , NN } ; 

  _flat_286 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_285 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_284 = 0; 
  _flat_283 = ( _flat_284 wrapper:UTDScalarB:Array::*_flat_285) ; 
  _flat_282 = 0; 
  _flat_281 = wrapper:UTDScalarB:Array::to_bool( _flat_282) ; 
  _flat_280 = 1; 
  _flat_279 = wrapper:UTDScalarB:Array::to_bool( _flat_280) ; 
  z = with {
        /* Partn */
        (_flat_283 <= iv=[_eat_1163] < _flat_286)
        { 
          _flat_287 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
        } : _flat_287 ; 
         } :
      foldfix( UTDScalarB::andBBB(), _flat_279, _flat_281); 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::andBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  andBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_295 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_294 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_288 { , NN } ; 
  bool{0} _flat_289 { , NN } ; 
  int[.] _flat_290 { , NN } ; 
  int{0} _flat_291 { , NN } ; 
  int[.] _flat_292 { , NN } ; 
  int[.] _flat_293 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_293 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_292 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_291 = 0; 
  _flat_290 = _mul_SxV_( _flat_291, _flat_292); 
  _flat_289 = false; 
  _flat_288 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_290 <= iv < _flat_293)
        { 
          _flat_294 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_294) ; 
          _flat_295 = wrapper:UTDScalarB::andBBB( xel, yel) ; 
        } : _flat_295 ; 
         } :
      genarray( _flat_288, _flat_289); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::eqBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_303 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_302 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_296 { , NN } ; 
  bool{0} _flat_297 { , NN } ; 
  int[.] _flat_298 { , NN } ; 
  int{0} _flat_299 { , NN } ; 
  int[.] _flat_300 { , NN } ; 
  int[.] _flat_301 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_301 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_300 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_299 = 0; 
  _flat_298 = _mul_SxV_( _flat_299, _flat_300); 
  _flat_297 = false; 
  _flat_296 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_298 <= iv < _flat_301)
        { 
          _flat_302 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_302) ; 
          _flat_303 = wrapper:UTDScalarB::eqBBB( xel, yel) ; 
        } : _flat_303 ; 
         } :
      genarray( _flat_296, _flat_297); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::geBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::geBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  geBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_311 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_310 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_304 { , NN } ; 
  bool{0} _flat_305 { , NN } ; 
  int[.] _flat_306 { , NN } ; 
  int{0} _flat_307 { , NN } ; 
  int[.] _flat_308 { , NN } ; 
  int[.] _flat_309 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_309 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_308 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_307 = 0; 
  _flat_306 = _mul_SxV_( _flat_307, _flat_308); 
  _flat_305 = false; 
  _flat_304 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_306 <= iv < _flat_309)
        { 
          _flat_310 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_310) ; 
          _flat_311 = wrapper:UTDScalarB::geBBB( xel, yel) ; 
        } : _flat_311 ; 
         } :
      genarray( _flat_304, _flat_305); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::gtBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::gtBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  gtBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_319 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_318 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_312 { , NN } ; 
  bool{0} _flat_313 { , NN } ; 
  int[.] _flat_314 { , NN } ; 
  int{0} _flat_315 { , NN } ; 
  int[.] _flat_316 { , NN } ; 
  int[.] _flat_317 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_317 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_316 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_315 = 0; 
  _flat_314 = _mul_SxV_( _flat_315, _flat_316); 
  _flat_313 = false; 
  _flat_312 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_314 <= iv < _flat_317)
        { 
          _flat_318 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_318) ; 
          _flat_319 = wrapper:UTDScalarB::gtBBB( xel, yel) ; 
        } : _flat_319 ; 
         } :
      genarray( _flat_312, _flat_313); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::leBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::leBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  leBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_327 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_326 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_320 { , NN } ; 
  bool{0} _flat_321 { , NN } ; 
  int[.] _flat_322 { , NN } ; 
  int{0} _flat_323 { , NN } ; 
  int[.] _flat_324 { , NN } ; 
  int[.] _flat_325 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_325 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_324 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_323 = 0; 
  _flat_322 = _mul_SxV_( _flat_323, _flat_324); 
  _flat_321 = false; 
  _flat_320 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_322 <= iv < _flat_325)
        { 
          _flat_326 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_326) ; 
          _flat_327 = wrapper:UTDScalarB::leBBB( xel, yel) ; 
        } : _flat_327 ; 
         } :
      genarray( _flat_320, _flat_321); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::ltBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::ltBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  ltBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_335 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_334 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_328 { , NN } ; 
  bool{0} _flat_329 { , NN } ; 
  int[.] _flat_330 { , NN } ; 
  int{0} _flat_331 { , NN } ; 
  int[.] _flat_332 { , NN } ; 
  int[.] _flat_333 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_333 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_332 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_331 = 0; 
  _flat_330 = _mul_SxV_( _flat_331, _flat_332); 
  _flat_329 = false; 
  _flat_328 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_330 <= iv < _flat_333)
        { 
          _flat_334 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_334) ; 
          _flat_335 = wrapper:UTDScalarB::ltBBB( xel, yel) ; 
        } : _flat_335 ; 
         } :
      genarray( _flat_328, _flat_329); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::nandBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::nandBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  nandBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_343 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_342 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_336 { , NN } ; 
  bool{0} _flat_337 { , NN } ; 
  int[.] _flat_338 { , NN } ; 
  int{0} _flat_339 { , NN } ; 
  int[.] _flat_340 { , NN } ; 
  int[.] _flat_341 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_341 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_340 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_339 = 0; 
  _flat_338 = _mul_SxV_( _flat_339, _flat_340); 
  _flat_337 = false; 
  _flat_336 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_338 <= iv < _flat_341)
        { 
          _flat_342 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_342) ; 
          _flat_343 = wrapper:UTDScalarB::nandBBB( xel, yel) ; 
        } : _flat_343 ; 
         } :
      genarray( _flat_336, _flat_337); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::neBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_351 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_350 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_344 { , NN } ; 
  bool{0} _flat_345 { , NN } ; 
  int[.] _flat_346 { , NN } ; 
  int{0} _flat_347 { , NN } ; 
  int[.] _flat_348 { , NN } ; 
  int[.] _flat_349 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_349 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_348 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_347 = 0; 
  _flat_346 = _mul_SxV_( _flat_347, _flat_348); 
  _flat_345 = false; 
  _flat_344 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_346 <= iv < _flat_349)
        { 
          _flat_350 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_350) ; 
          _flat_351 = wrapper:UTDScalarB::neBBB( xel, yel) ; 
        } : _flat_351 ; 
         } :
      genarray( _flat_344, _flat_345); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::norBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::norBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  norBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_359 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_358 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_352 { , NN } ; 
  bool{0} _flat_353 { , NN } ; 
  int[.] _flat_354 { , NN } ; 
  int{0} _flat_355 { , NN } ; 
  int[.] _flat_356 { , NN } ; 
  int[.] _flat_357 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_357 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_356 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_355 = 0; 
  _flat_354 = _mul_SxV_( _flat_355, _flat_356); 
  _flat_353 = false; 
  _flat_352 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_354 <= iv < _flat_357)
        { 
          _flat_358 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_358) ; 
          _flat_359 = wrapper:UTDScalarB::norBBB( xel, yel) ; 
        } : _flat_359 ; 
         } :
      genarray( _flat_352, _flat_353); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::orBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB::orBBB( bool x { ,NN } , bool[+] y { ,NN } )
/*
 *  orBBB ::  ---
 */
{ 
  bool[+] z__SSA0_1 { , NN } ; 
  bool[*] z { , NN } ; 
  bool[*] _flat_367 { , NN } ; 
  bool[*] yel { , NN } ; 
  bool[*] _flat_366 { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_360 { , NN } ; 
  bool{0} _flat_361 { , NN } ; 
  int[.] _flat_362 { , NN } ; 
  int{0} _flat_363 { , NN } ; 
  int[.] _flat_364 { , NN } ; 
  int[.] _flat_365 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_365 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_364 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_363 = 0; 
  _flat_362 = _mul_SxV_( _flat_363, _flat_364); 
  _flat_361 = false; 
  _flat_360 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_362 <= iv < _flat_365)
        { 
          _flat_366 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_366) ; 
          _flat_367 = wrapper:UTDScalarB::orBBB( xel, yel) ; 
        } : _flat_367 ; 
         } :
      genarray( _flat_360, _flat_361); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::comaXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB::comaXBB( bool[+] y { ,NN } )
/*
 *  comaXBB ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  int[1] _flat_368 { , NN } ; 
  int _flat_369 { , NN } ; 
  int[.] _flat_370 { , NN } ; 

  _flat_370 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_369 = wrapper:UTDScalarB:Array::prod( _flat_370) ; 
  _flat_368 = [ _flat_369 ]; 
  z = wrapper:UTDScalarB:Array::reshape( _flat_368, y) ; 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::V2O__Cond_3(...) [ body ]
 ****************************************************************************/
int UTDScalarB::V2O__Cond_3( int{0} offset { ,NN } , int{1} wt { ,NN } , int i { ,NN } , bool _flat_375 { ,NN } , int[.] iv { ,NN } , int[.] shp { ,NN } )
/*
 *  V2O__Cond_3 ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 

  if (_flat_375) 
  { 
    offset__SSA0_1 = UTDScalarB::_dup_1144_V2O__Loop_2( offset, wt, i, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_2 = ( _flat_375 ? offset__SSA0_1 : offset ); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::V2O(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB::V2O( int[.] shp { ,NN } , int[.] iv { ,NN } )
/*
 *  V2O ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool _flat_375 { , NN } ; 
  int{0} _flat_376 { , NN } ; 
  int i { , NN } ; 
  int _flat_371 { , NN } ; 
  int{0} _flat_372 { , NN } ; 
  int[1] _flat_373 { , NN } ; 
  int{1} _flat_374 { , NN } ; 
  int{1} wt { , NN } ; 
  int{0} offset { , NN } ; 

  offset = 0; 
  wt = 1; 
  _flat_374 = 1; 
  _flat_373 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_372 = 0; 
  _flat_371 = wrapper:UTDScalarB:Array::sel( _flat_372, _flat_373) ; 
  i = ( _flat_371 wrapper:Array::-_flat_374) ; 
  _flat_376 = 0; 
  _flat_375 = ( i wrapper:Array::>=_flat_376) ; 
  offset__SSA0_1 = UTDScalarB::V2O__Cond_3( offset, wt, i, _flat_375, iv, shp) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::O2V__Cond_7(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::O2V__Cond_7( int[.] wts { ,NN } , int i { ,NN } , bool _flat_388 { ,NN } , int[.] shp { ,NN } )
/*
 *  O2V__Cond_7 ::  ---
 */
{ 
  int[.] wts__SSA0_2 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 

  if (_flat_388) 
  { 
    wts__SSA0_1 = UTDScalarB::_dup_1146_O2V__Loop_6( wts, i, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_2 = ( _flat_388 ? wts__SSA0_1 : wts ); 
  return( wts__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::O2V__Cond_5(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::O2V__Cond_5( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , bool _flat_403 { ,NN } , int offset { ,NN } , int[.] shp { ,NN } )
/*
 *  O2V__Cond_5 ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 

  if (_flat_403) 
  { 
    iv__SSA0_1 = UTDScalarB::_dup_1145_O2V__Loop_4( iv, wts, i, offset, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_2 = ( _flat_403 ? iv__SSA0_1 : iv ); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::O2V(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB::O2V( int[.] shp { ,NN } , int offset { ,NN } )
/*
 *  O2V ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  bool _flat_403 { , NN } ; 
  int{0} _flat_404 { , NN } ; 
  int _flat_399 { , NN } ; 
  int{0} _flat_400 { , NN } ; 
  int[1] _flat_401 { , NN } ; 
  int{1} _flat_402 { , NN } ; 
  bool _flat_388 { , NN } ; 
  int{0} _flat_389 { , NN } ; 
  int i { , NN } ; 
  int _flat_384 { , NN } ; 
  int{0} _flat_385 { , NN } ; 
  int[1] _flat_386 { , NN } ; 
  int{2} _flat_387 { , NN } ; 
  int[.] wts { , NN } ; 
  int[.] iv { , NN } ; 
  int[1] _flat_382 { , NN } ; 
  int{1} _flat_383 { , NN } ; 

  _flat_383 = 1; 
  _flat_382 = wrapper:UTDScalarB:Array::shape( shp) ; 
  iv = wrapper:UTDScalarB:Array::genarray( _flat_382, _flat_383) ; 
  wts = iv; 
  _flat_387 = 2; 
  _flat_386 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_385 = 0; 
  _flat_384 = wrapper:UTDScalarB:Array::sel( _flat_385, _flat_386) ; 
  i = ( _flat_384 wrapper:Array::-_flat_387) ; 
  _flat_389 = 0; 
  _flat_388 = ( i wrapper:Array::>=_flat_389) ; 
  wts__SSA0_1 = UTDScalarB::O2V__Cond_7( wts, i, _flat_388, shp) ; 
  _flat_402 = 1; 
  _flat_401 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_400 = 0; 
  _flat_399 = wrapper:UTDScalarB:Array::sel( _flat_400, _flat_401) ; 
  i__SSA0_1 = ( _flat_399 wrapper:Array::-_flat_402) ; 
  _flat_404 = 0; 
  _flat_403 = ( i__SSA0_1 wrapper:Array::>=_flat_404) ; 
  iv__SSA0_1 = UTDScalarB::O2V__Cond_5( iv, wts__SSA0_1, i__SSA0_1, _flat_403, offset, shp) ; 
  iv__SSA0_2 = _type_conv_( int[.], iv__SSA0_1); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::APEXFUZZEQ(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::APEXFUZZEQ( double x { ,NN } , double y { ,NN } , double QUADct { ,NN } )
/*
 *  APEXFUZZEQ ::  ---
 */
{ 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  double _flat_415 { , NN } ; 
  double _flat_416 { , NN } ; 
  double tolerance { , NN } ; 
  double _flat_414 { , NN } ; 
  double absy { , NN } ; 
  double absx { , NN } ; 

  absx = wrapper:Array::abs( x) ; 
  absy = wrapper:Array::abs( y) ; 
  _flat_414 = wrapper:Array::max( absx, absy) ; 
  tolerance = ( QUADct wrapper:UTDScalarB:Array::*_flat_414) ; 
  _flat_416 = ( x wrapper:Array::-y) ; 
  _flat_415 = wrapper:Array::abs( _flat_416) ; 
  z = ( _flat_415 wrapper:Array::<=tolerance) ; 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::ANDXXB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::ANDXXB()
/*
 *  ANDXXB ::  ---
 */
{ 
  bool[14] r_13__SSA0_1 { , NN } ; 
  bool[14] r_13 { , NN } ; 
  bool[14] A_159 { , NN } ; 
  bool A_158 { , NN } ; 
  bool[.,.,.] A_156 { , NN } ; 
  bool[13] r_12 { , NN } ; 
  bool[13] A_154 { , NN } ; 
  bool A_153 { , NN } ; 
  bool[.,.,.] A_151 { , NN } ; 
  bool[12] r_11 { , NN } ; 
  bool[12] A_149 { , NN } ; 
  bool A_148 { , NN } ; 
  bool[.,.,.] A_146 { , NN } ; 
  bool[11] r_10 { , NN } ; 
  bool[11] A_144 { , NN } ; 
  bool A_143 { , NN } ; 
  bool[.,.,.] A_141 { , NN } ; 
  bool[10] r_9 { , NN } ; 
  bool[10] A_139 { , NN } ; 
  bool A_138 { , NN } ; 
  bool[.,.,.] A_136 { , NN } ; 
  bool[9] r_8 { , NN } ; 
  bool[9] A_134 { , NN } ; 
  bool A_133 { , NN } ; 
  bool[.,.,.] A_131 { , NN } ; 
  bool[8] r_7 { , NN } ; 
  bool[8] A_129 { , NN } ; 
  bool A_128 { , NN } ; 
  bool[.,.,.] A_126 { , NN } ; 
  bool[.,.,.] A_125 { , NN } ; 
  bool[.,.,.] A_124 { , NN } ; 
  int[3]{2,3...} _flat_488 { , NN } ; 
  int{2} _flat_489 { , NN } ; 
  int{3} _flat_490 { , NN } ; 
  int{4} _flat_491 { , NN } ; 
  bool{0} _flat_492 { , NN } ; 
  bool[7] r_6 { , NN } ; 
  bool[7] A_122 { , NN } ; 
  bool A_121 { , NN } ; 
  bool[.,.,.] A_119 { , NN } ; 
  bool[6] r_5 { , NN } ; 
  bool[6] A_117 { , NN } ; 
  bool A_116 { , NN } ; 
  bool[.,.,.] A_114 { , NN } ; 
  bool[.,.,.] A_113 { , NN } ; 
  int[3]{2,3...} _flat_483 { , NN } ; 
  int{2} _flat_484 { , NN } ; 
  int{3} _flat_485 { , NN } ; 
  int{4} _flat_486 { , NN } ; 
  bool{0} _flat_487 { , NN } ; 
  bool[5] r_4 { , NN } ; 
  bool[5] A_111 { , NN } ; 
  bool A_110 { , NN } ; 
  bool[4,4] A_102 { , NN } ; 
  bool[.,.] A_101 { , NN } ; 
  int[2]{4,4} _flat_480 { , NN } ; 
  int{4} _flat_481 { , NN } ; 
  int{4} _flat_482 { , NN } ; 
  bool[16] A_100 { , NN } ; 
  bool[4]{0,0...} _flat_475 { , NN } ; 
  bool{0} _flat_476 { , NN } ; 
  bool{0} _flat_477 { , NN } ; 
  bool{0} _flat_478 { , NN } ; 
  bool{0} _flat_479 { , NN } ; 
  bool[12] A_99 { , NN } ; 
  bool[4]{0,0...} _flat_470 { , NN } ; 
  bool{0} _flat_471 { , NN } ; 
  bool{0} _flat_472 { , NN } ; 
  bool{0} _flat_473 { , NN } ; 
  bool{0} _flat_474 { , NN } ; 
  bool[8] A_98 { , NN } ; 
  bool[4]{0,1...} _flat_460 { , NN } ; 
  bool{0} _flat_461 { , NN } ; 
  bool{1} _flat_462 { , NN } ; 
  bool{0} _flat_463 { , NN } ; 
  bool{1} _flat_464 { , NN } ; 
  bool[4]{0,1...} _flat_465 { , NN } ; 
  bool{0} _flat_466 { , NN } ; 
  bool{1} _flat_467 { , NN } ; 
  bool{0} _flat_468 { , NN } ; 
  bool{1} _flat_469 { , NN } ; 
  bool[4] r_3 { , NN } ; 
  bool[4] A_96 { , NN } ; 
  bool A_95 { , NN } ; 
  bool{1} _flat_459 { , NN } ; 
  bool A_93 { , NN } ; 
  bool[3] r_2 { , NN } ; 
  bool[3] A_91 { , NN } ; 
  bool A_90 { , NN } ; 
  bool{0} _flat_458 { , NN } ; 
  bool A_88 { , NN } ; 
  bool[2] r_1 { , NN } ; 
  bool[2] A_86 { , NN } ; 
  bool A_85 { , NN } ; 
  bool{0} _flat_457 { , NN } ; 
  bool A_83 { , NN } ; 
  bool r_0 { , NN } ; 
  bool A_81 { , NN } ; 
  bool{0} _flat_456 { , NN } ; 
  bool A_79 { , NN } ; 
  bool[.,.,.] BM230_0 { , NN } ; 
  bool[.,.,.] A_77 { , NN } ; 
  int[3]{2,3...} _flat_449 { , NN } ; 
  int{2} _flat_450 { , NN } ; 
  int{3} _flat_451 { , NN } ; 
  int{0} _flat_452 { , NN } ; 
  bool[2]{0,1} _flat_453 { , NN } ; 
  bool{0} _flat_454 { , NN } ; 
  bool{1} _flat_455 { , NN } ; 
  bool[.,.,.] BM304_0 { , NN } ; 
  bool[.,.,.] A_75 { , NN } ; 
  int[3]{3,0...} _flat_442 { , NN } ; 
  int{3} _flat_443 { , NN } ; 
  int{0} _flat_444 { , NN } ; 
  int{4} _flat_445 { , NN } ; 
  bool[2]{0,1} _flat_446 { , NN } ; 
  bool{0} _flat_447 { , NN } ; 
  bool{1} _flat_448 { , NN } ; 
  bool[.,.,.] BM034_0 { , NN } ; 
  bool[.,.,.] A_73 { , NN } ; 
  int[3]{0,3...} _flat_435 { , NN } ; 
  int{0} _flat_436 { , NN } ; 
  int{3} _flat_437 { , NN } ; 
  int{4} _flat_438 { , NN } ; 
  bool[2]{0,1} _flat_439 { , NN } ; 
  bool{0} _flat_440 { , NN } ; 
  bool{1} _flat_441 { , NN } ; 
  bool[.,.,.] BM234_0 { , NN } ; 
  bool[.,.,.] A_71 { , NN } ; 
  int[3]{2,3...} _flat_427 { , NN } ; 
  int{2} _flat_428 { , NN } ; 
  int{3} _flat_429 { , NN } ; 
  int{4} _flat_430 { , NN } ; 
  bool[3]{0,1...} _flat_431 { , NN } ; 
  bool{0} _flat_432 { , NN } ; 
  bool{1} _flat_433 { , NN } ; 
  bool{0} _flat_434 { , NN } ; 
  bool[.] BVS0_0 { , NN } ; 
  bool[.] A_69 { , NN } ; 
  bool{0} _flat_425 { , NN } ; 
  bool{0} _flat_426 { , NN } ; 
  bool[4]{0,1...} BVR_0 { , NN } ; 
  bool{0} _flat_421 { , NN } ; 
  bool{1} _flat_422 { , NN } ; 
  bool{0} _flat_423 { , NN } ; 
  bool{1} _flat_424 { , NN } ; 
  bool[4]{0,0...} BVL_0 { , NN } ; 
  bool{0} _flat_417 { , NN } ; 
  bool{0} _flat_418 { , NN } ; 
  bool{1} _flat_419 { , NN } ; 
  bool{1} _flat_420 { , NN } ; 
  bool{1} BS1_0 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  BS1_0 = true; 
  _flat_420 = true; 
  _flat_419 = true; 
  _flat_418 = false; 
  _flat_417 = false; 
  BVL_0 = [ _flat_417, _flat_418, _flat_419, _flat_420 ]; 
  _flat_424 = true; 
  _flat_423 = false; 
  _flat_422 = true; 
  _flat_421 = false; 
  BVR_0 = [ _flat_421, _flat_422, _flat_423, _flat_424 ]; 
  _flat_426 = false; 
  _flat_425 = false; 
  A_69 = wrapper:UTDScalarB::rhoBBB( _flat_425, _flat_426) ; 
  BVS0_0 = A_69; 
  _flat_434 = false; 
  _flat_433 = true; 
  _flat_432 = false; 
  _flat_431 = [ _flat_432, _flat_433, _flat_434 ]; 
  _flat_430 = 4; 
  _flat_429 = 3; 
  _flat_428 = 2; 
  _flat_427 = [ _flat_428, _flat_429, _flat_430 ]; 
  A_71 = wrapper:UTDScalarB::rhoIBB( _flat_427, _flat_431) ; 
  BM234_0 = A_71; 
  _flat_441 = true; 
  _flat_440 = false; 
  _flat_439 = [ _flat_440, _flat_441 ]; 
  _flat_438 = 4; 
  _flat_437 = 3; 
  _flat_436 = 0; 
  _flat_435 = [ _flat_436, _flat_437, _flat_438 ]; 
  A_73 = wrapper:UTDScalarB::rhoIBB( _flat_435, _flat_439) ; 
  BM034_0 = A_73; 
  _flat_448 = true; 
  _flat_447 = false; 
  _flat_446 = [ _flat_447, _flat_448 ]; 
  _flat_445 = 4; 
  _flat_444 = 0; 
  _flat_443 = 3; 
  _flat_442 = [ _flat_443, _flat_444, _flat_445 ]; 
  A_75 = wrapper:UTDScalarB::rhoIBB( _flat_442, _flat_446) ; 
  BM304_0 = A_75; 
  _flat_455 = true; 
  _flat_454 = false; 
  _flat_453 = [ _flat_454, _flat_455 ]; 
  _flat_452 = 0; 
  _flat_451 = 3; 
  _flat_450 = 2; 
  _flat_449 = [ _flat_450, _flat_451, _flat_452 ]; 
  A_77 = wrapper:UTDScalarB::rhoIBB( _flat_449, _flat_453) ; 
  BM230_0 = A_77; 
  A_79 = wrapper:UTDScalarB::andBBB( BS0_0, BS0_0) ; 
  _flat_456 = false; 
  A_81 = wrapper:UTDScalarB::sameBBB( A_79, _flat_456) ; 
  r_0 = A_81; 
  A_83 = wrapper:UTDScalarB::andBBB( BS0_0, BS1_0) ; 
  _flat_457 = false; 
  A_85 = wrapper:UTDScalarB::sameBBB( A_83, _flat_457) ; 
  A_86 = wrapper:UTDScalarB::comaBBB( r_0, A_85) ; 
  r_1 = A_86; 
  A_88 = wrapper:UTDScalarB::andBBB( BS1_0, BS0_0) ; 
  _flat_458 = false; 
  A_90 = wrapper:UTDScalarB::sameBBB( A_88, _flat_458) ; 
  A_91 = wrapper:UTDScalarB::comaBBB( r_1, A_90) ; 
  r_2 = A_91; 
  A_93 = wrapper:UTDScalarB::andBBB( BS1_0, BS1_0) ; 
  _flat_459 = true; 
  A_95 = wrapper:UTDScalarB::sameBBB( A_93, _flat_459) ; 
  A_96 = wrapper:UTDScalarB::comaBBB( r_2, A_95) ; 
  r_3 = A_96; 
  _flat_469 = true; 
  _flat_468 = false; 
  _flat_467 = true; 
  _flat_466 = false; 
  _flat_465 = [ _flat_466, _flat_467, _flat_468, _flat_469 ]; 
  _flat_464 = true; 
  _flat_463 = false; 
  _flat_462 = true; 
  _flat_461 = false; 
  _flat_460 = [ _flat_461, _flat_462, _flat_463, _flat_464 ]; 
  A_98 = wrapper:UTDScalarB::comaBBB( _flat_460, _flat_465) ; 
  _flat_474 = false; 
  _flat_473 = false; 
  _flat_472 = false; 
  _flat_471 = false; 
  _flat_470 = [ _flat_471, _flat_472, _flat_473, _flat_474 ]; 
  A_99 = wrapper:UTDScalarB::comaBBB( _flat_470, A_98) ; 
  _flat_479 = false; 
  _flat_478 = false; 
  _flat_477 = false; 
  _flat_476 = false; 
  _flat_475 = [ _flat_476, _flat_477, _flat_478, _flat_479 ]; 
  A_100 = wrapper:UTDScalarB::comaBBB( _flat_475, A_99) ; 
  _flat_482 = 4; 
  _flat_481 = 4; 
  _flat_480 = [ _flat_481, _flat_482 ]; 
  A_101 = wrapper:UTDScalarB::rhoIBB( _flat_480, A_100) ; 
  A_102 = wrapper:UTDScalarB::jotdotandBBB( BVL_0, BVR_0) ; 
  A_110 = wrapper:UTDScalarB::sameBBB( A_102, A_101) ; 
  A_111 = wrapper:UTDScalarB::comaBBB( r_3, A_110) ; 
  r_4 = A_111; 
  _flat_487 = false; 
  _flat_486 = 4; 
  _flat_485 = 3; 
  _flat_484 = 2; 
  _flat_483 = [ _flat_484, _flat_485, _flat_486 ]; 
  A_113 = wrapper:UTDScalarB::rhoIBB( _flat_483, _flat_487) ; 
  A_114 = wrapper:UTDScalarB::andBBB( BM234_0, BS0_0) ; 
  A_116 = wrapper:UTDScalarB::sameBBB( A_114, A_113) ; 
  A_117 = wrapper:UTDScalarB::comaBBB( r_4, A_116) ; 
  r_5 = A_117; 
  A_119 = wrapper:UTDScalarB::andBBB( BM234_0, BS1_0) ; 
  A_121 = wrapper:UTDScalarB::sameBBB( A_119, BM234_0) ; 
  A_122 = wrapper:UTDScalarB::comaBBB( r_5, A_121) ; 
  r_6 = A_122; 
  _flat_492 = false; 
  _flat_491 = 4; 
  _flat_490 = 3; 
  _flat_489 = 2; 
  _flat_488 = [ _flat_489, _flat_490, _flat_491 ]; 
  A_124 = wrapper:UTDScalarB::rhoIBB( _flat_488, _flat_492) ; 
  A_125 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_126 = wrapper:UTDScalarB::andBBB( BM234_0, A_125) ; 
  A_128 = wrapper:UTDScalarB::sameBBB( A_126, A_124) ; 
  A_129 = wrapper:UTDScalarB::comaBBB( r_6, A_128) ; 
  r_7 = A_129; 
  A_131 = wrapper:UTDScalarB::andBBB( BM034_0, BS1_0) ; 
  A_133 = wrapper:UTDScalarB::sameBBB( A_131, BM034_0) ; 
  A_134 = wrapper:UTDScalarB::comaBBB( r_7, A_133) ; 
  r_8 = A_134; 
  A_136 = wrapper:UTDScalarB::andBBB( BM034_0, BM034_0) ; 
  A_138 = wrapper:UTDScalarB::sameBBB( A_136, BM034_0) ; 
  A_139 = wrapper:UTDScalarB::comaBBB( r_8, A_138) ; 
  r_9 = A_139; 
  A_141 = wrapper:UTDScalarB::andBBB( BM304_0, BS1_0) ; 
  A_143 = wrapper:UTDScalarB::sameBBB( A_141, BM304_0) ; 
  A_144 = wrapper:UTDScalarB::comaBBB( r_9, A_143) ; 
  r_10 = A_144; 
  A_146 = wrapper:UTDScalarB::andBBB( BM304_0, BM304_0) ; 
  A_148 = wrapper:UTDScalarB::sameBBB( A_146, BM304_0) ; 
  A_149 = wrapper:UTDScalarB::comaBBB( r_10, A_148) ; 
  r_11 = A_149; 
  A_151 = wrapper:UTDScalarB::andBBB( BM230_0, BS1_0) ; 
  A_153 = wrapper:UTDScalarB::sameBBB( A_151, BM230_0) ; 
  A_154 = wrapper:UTDScalarB::comaBBB( r_11, A_153) ; 
  r_12 = A_154; 
  A_156 = wrapper:UTDScalarB::andBBB( BM230_0, BM230_0) ; 
  A_158 = wrapper:UTDScalarB::sameBBB( A_156, BM230_0) ; 
  A_159 = wrapper:UTDScalarB::comaBBB( r_12, A_158) ; 
  r_13 = A_159; 
  r_13__SSA0_1 = _type_conv_( bool[.], r_13); 
  return( r_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::EQXXB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::EQXXB()
/*
 *  EQXXB ::  ---
 */
{ 
  bool[14] r_13__SSA0_1 { , NN } ; 
  bool[14] r_13 { , NN } ; 
  bool[14] A_174 { , NN } ; 
  bool A_173 { , NN } ; 
  bool[.,.,.] A_171 { , NN } ; 
  bool[13] r_12 { , NN } ; 
  bool[13] A_168 { , NN } ; 
  bool A_167 { , NN } ; 
  bool[.,.,.] A_165 { , NN } ; 
  bool[12] r_11 { , NN } ; 
  bool[12] A_162 { , NN } ; 
  bool A_161 { , NN } ; 
  bool[.,.,.] A_159 { , NN } ; 
  bool[11] r_10 { , NN } ; 
  bool[11] A_156 { , NN } ; 
  bool A_155 { , NN } ; 
  bool[.,.,.] A_153 { , NN } ; 
  bool[10] r_9 { , NN } ; 
  bool[10] A_150 { , NN } ; 
  bool A_149 { , NN } ; 
  bool[.,.,.] A_147 { , NN } ; 
  bool[9] r_8 { , NN } ; 
  bool[9] A_144 { , NN } ; 
  bool A_143 { , NN } ; 
  bool[.,.,.] A_141 { , NN } ; 
  bool[8] r_7 { , NN } ; 
  bool[8] A_138 { , NN } ; 
  bool A_137 { , NN } ; 
  bool[.,.,.] A_135 { , NN } ; 
  bool[.,.,.] A_133 { , NN } ; 
  bool[.,.,.] A_132 { , NN } ; 
  bool{0} _flat_559 { , NN } ; 
  int[3] A_131 { , NN } ; 
  bool[7] r_6 { , NN } ; 
  bool[7] A_129 { , NN } ; 
  bool A_128 { , NN } ; 
  bool[.,.,.] A_126 { , NN } ; 
  bool[6] r_5 { , NN } ; 
  bool[6] A_123 { , NN } ; 
  bool A_122 { , NN } ; 
  bool[.,.,.] A_120 { , NN } ; 
  bool[.,.,.] A_118 { , NN } ; 
  bool[5] r_4 { , NN } ; 
  bool[5] A_116 { , NN } ; 
  bool A_115 { , NN } ; 
  bool[4,4] A_106 { , NN } ; 
  bool[.,.] A_105 { , NN } ; 
  int[2]{4,4} _flat_556 { , NN } ; 
  int{4} _flat_557 { , NN } ; 
  int{4} _flat_558 { , NN } ; 
  bool[16] A_104 { , NN } ; 
  bool[4]{1,0...} _flat_551 { , NN } ; 
  bool{1} _flat_552 { , NN } ; 
  bool{0} _flat_553 { , NN } ; 
  bool{1} _flat_554 { , NN } ; 
  bool{0} _flat_555 { , NN } ; 
  bool[12] A_103 { , NN } ; 
  bool[4]{1,0...} _flat_546 { , NN } ; 
  bool{1} _flat_547 { , NN } ; 
  bool{0} _flat_548 { , NN } ; 
  bool{1} _flat_549 { , NN } ; 
  bool{0} _flat_550 { , NN } ; 
  bool[8] A_102 { , NN } ; 
  bool[4]{0,1...} _flat_536 { , NN } ; 
  bool{0} _flat_537 { , NN } ; 
  bool{1} _flat_538 { , NN } ; 
  bool{0} _flat_539 { , NN } ; 
  bool{1} _flat_540 { , NN } ; 
  bool[4]{0,1...} _flat_541 { , NN } ; 
  bool{0} _flat_542 { , NN } ; 
  bool{1} _flat_543 { , NN } ; 
  bool{0} _flat_544 { , NN } ; 
  bool{1} _flat_545 { , NN } ; 
  bool[4] r_3 { , NN } ; 
  bool[4] A_100 { , NN } ; 
  bool A_99 { , NN } ; 
  bool{1} _flat_535 { , NN } ; 
  bool A_97 { , NN } ; 
  bool[3] r_2 { , NN } ; 
  bool[3] A_94 { , NN } ; 
  bool A_93 { , NN } ; 
  bool{0} _flat_534 { , NN } ; 
  bool A_91 { , NN } ; 
  bool[2] r_1 { , NN } ; 
  bool[2] A_88 { , NN } ; 
  bool A_87 { , NN } ; 
  bool{0} _flat_533 { , NN } ; 
  bool A_85 { , NN } ; 
  bool r_0 { , NN } ; 
  bool A_82 { , NN } ; 
  bool{1} _flat_532 { , NN } ; 
  bool A_80 { , NN } ; 
  bool[.,.,.] BM230_0 { , NN } ; 
  bool[.,.,.] A_77 { , NN } ; 
  int[3]{2,3...} _flat_525 { , NN } ; 
  int{2} _flat_526 { , NN } ; 
  int{3} _flat_527 { , NN } ; 
  int{0} _flat_528 { , NN } ; 
  bool[2]{0,1} _flat_529 { , NN } ; 
  bool{0} _flat_530 { , NN } ; 
  bool{1} _flat_531 { , NN } ; 
  bool[.,.,.] BM304_0 { , NN } ; 
  bool[.,.,.] A_75 { , NN } ; 
  int[3]{3,0...} _flat_518 { , NN } ; 
  int{3} _flat_519 { , NN } ; 
  int{0} _flat_520 { , NN } ; 
  int{4} _flat_521 { , NN } ; 
  bool[2]{0,1} _flat_522 { , NN } ; 
  bool{0} _flat_523 { , NN } ; 
  bool{1} _flat_524 { , NN } ; 
  bool[.,.,.] BM034_0 { , NN } ; 
  bool[.,.,.] A_73 { , NN } ; 
  int[3]{0,3...} _flat_511 { , NN } ; 
  int{0} _flat_512 { , NN } ; 
  int{3} _flat_513 { , NN } ; 
  int{4} _flat_514 { , NN } ; 
  bool[2]{0,1} _flat_515 { , NN } ; 
  bool{0} _flat_516 { , NN } ; 
  bool{1} _flat_517 { , NN } ; 
  bool[.,.,.] BM234_0 { , NN } ; 
  bool[.,.,.] A_71 { , NN } ; 
  int[3]{2,3...} _flat_503 { , NN } ; 
  int{2} _flat_504 { , NN } ; 
  int{3} _flat_505 { , NN } ; 
  int{4} _flat_506 { , NN } ; 
  bool[3]{0,1...} _flat_507 { , NN } ; 
  bool{0} _flat_508 { , NN } ; 
  bool{1} _flat_509 { , NN } ; 
  bool{0} _flat_510 { , NN } ; 
  bool[.] BVS0_0 { , NN } ; 
  bool[.] A_69 { , NN } ; 
  bool{0} _flat_501 { , NN } ; 
  bool{0} _flat_502 { , NN } ; 
  bool[4]{0,1...} BVR_0 { , NN } ; 
  bool{0} _flat_497 { , NN } ; 
  bool{1} _flat_498 { , NN } ; 
  bool{0} _flat_499 { , NN } ; 
  bool{1} _flat_500 { , NN } ; 
  bool[4]{0,0...} BVL_0 { , NN } ; 
  bool{0} _flat_493 { , NN } ; 
  bool{0} _flat_494 { , NN } ; 
  bool{1} _flat_495 { , NN } ; 
  bool{1} _flat_496 { , NN } ; 
  bool{1} BS1_0 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  BS1_0 = true; 
  _flat_496 = true; 
  _flat_495 = true; 
  _flat_494 = false; 
  _flat_493 = false; 
  BVL_0 = [ _flat_493, _flat_494, _flat_495, _flat_496 ]; 
  _flat_500 = true; 
  _flat_499 = false; 
  _flat_498 = true; 
  _flat_497 = false; 
  BVR_0 = [ _flat_497, _flat_498, _flat_499, _flat_500 ]; 
  _flat_502 = false; 
  _flat_501 = false; 
  A_69 = wrapper:UTDScalarB::rhoBBB( _flat_501, _flat_502) ; 
  BVS0_0 = A_69; 
  _flat_510 = false; 
  _flat_509 = true; 
  _flat_508 = false; 
  _flat_507 = [ _flat_508, _flat_509, _flat_510 ]; 
  _flat_506 = 4; 
  _flat_505 = 3; 
  _flat_504 = 2; 
  _flat_503 = [ _flat_504, _flat_505, _flat_506 ]; 
  A_71 = wrapper:UTDScalarB::rhoIBB( _flat_503, _flat_507) ; 
  BM234_0 = A_71; 
  _flat_517 = true; 
  _flat_516 = false; 
  _flat_515 = [ _flat_516, _flat_517 ]; 
  _flat_514 = 4; 
  _flat_513 = 3; 
  _flat_512 = 0; 
  _flat_511 = [ _flat_512, _flat_513, _flat_514 ]; 
  A_73 = wrapper:UTDScalarB::rhoIBB( _flat_511, _flat_515) ; 
  BM034_0 = A_73; 
  _flat_524 = true; 
  _flat_523 = false; 
  _flat_522 = [ _flat_523, _flat_524 ]; 
  _flat_521 = 4; 
  _flat_520 = 0; 
  _flat_519 = 3; 
  _flat_518 = [ _flat_519, _flat_520, _flat_521 ]; 
  A_75 = wrapper:UTDScalarB::rhoIBB( _flat_518, _flat_522) ; 
  BM304_0 = A_75; 
  _flat_531 = true; 
  _flat_530 = false; 
  _flat_529 = [ _flat_530, _flat_531 ]; 
  _flat_528 = 0; 
  _flat_527 = 3; 
  _flat_526 = 2; 
  _flat_525 = [ _flat_526, _flat_527, _flat_528 ]; 
  A_77 = wrapper:UTDScalarB::rhoIBB( _flat_525, _flat_529) ; 
  BM230_0 = A_77; 
  A_80 = wrapper:UTDScalarB::eqBBB( BS0_0, BS0_0) ; 
  _flat_532 = true; 
  A_82 = wrapper:UTDScalarB::sameBBB( A_80, _flat_532) ; 
  r_0 = A_82; 
  A_85 = wrapper:UTDScalarB::eqBBB( BS0_0, BS1_0) ; 
  _flat_533 = false; 
  A_87 = wrapper:UTDScalarB::sameBBB( A_85, _flat_533) ; 
  A_88 = wrapper:UTDScalarB::comaBBB( r_0, A_87) ; 
  r_1 = A_88; 
  A_91 = wrapper:UTDScalarB::eqBBB( BS1_0, BS0_0) ; 
  _flat_534 = false; 
  A_93 = wrapper:UTDScalarB::sameBBB( A_91, _flat_534) ; 
  A_94 = wrapper:UTDScalarB::comaBBB( r_1, A_93) ; 
  r_2 = A_94; 
  A_97 = wrapper:UTDScalarB::eqBBB( BS1_0, BS1_0) ; 
  _flat_535 = true; 
  A_99 = wrapper:UTDScalarB::sameBBB( A_97, _flat_535) ; 
  A_100 = wrapper:UTDScalarB::comaBBB( r_2, A_99) ; 
  r_3 = A_100; 
  _flat_545 = true; 
  _flat_544 = false; 
  _flat_543 = true; 
  _flat_542 = false; 
  _flat_541 = [ _flat_542, _flat_543, _flat_544, _flat_545 ]; 
  _flat_540 = true; 
  _flat_539 = false; 
  _flat_538 = true; 
  _flat_537 = false; 
  _flat_536 = [ _flat_537, _flat_538, _flat_539, _flat_540 ]; 
  A_102 = wrapper:UTDScalarB::comaBBB( _flat_536, _flat_541) ; 
  _flat_550 = false; 
  _flat_549 = true; 
  _flat_548 = false; 
  _flat_547 = true; 
  _flat_546 = [ _flat_547, _flat_548, _flat_549, _flat_550 ]; 
  A_103 = wrapper:UTDScalarB::comaBBB( _flat_546, A_102) ; 
  _flat_555 = false; 
  _flat_554 = true; 
  _flat_553 = false; 
  _flat_552 = true; 
  _flat_551 = [ _flat_552, _flat_553, _flat_554, _flat_555 ]; 
  A_104 = wrapper:UTDScalarB::comaBBB( _flat_551, A_103) ; 
  _flat_558 = 4; 
  _flat_557 = 4; 
  _flat_556 = [ _flat_557, _flat_558 ]; 
  A_105 = wrapper:UTDScalarB::rhoIBB( _flat_556, A_104) ; 
  A_106 = wrapper:UTDScalarB::jotdoteqBBB( BVL_0, BVR_0) ; 
  A_115 = wrapper:UTDScalarB::sameBBB( A_106, A_105) ; 
  A_116 = wrapper:UTDScalarB::comaBBB( r_3, A_115) ; 
  r_4 = A_116; 
  A_118 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_120 = wrapper:UTDScalarB::eqBBB( BM234_0, BS0_0) ; 
  A_122 = wrapper:UTDScalarB::sameBBB( A_120, A_118) ; 
  A_123 = wrapper:UTDScalarB::comaBBB( r_4, A_122) ; 
  r_5 = A_123; 
  A_126 = wrapper:UTDScalarB::eqBBB( BM234_0, BS1_0) ; 
  A_128 = wrapper:UTDScalarB::sameBBB( A_126, BM234_0) ; 
  A_129 = wrapper:UTDScalarB::comaBBB( r_5, A_128) ; 
  r_6 = A_129; 
  A_131 = wrapper:UTDScalarB::rhoXBI( BM234_0) ; 
  _flat_559 = false; 
  A_132 = wrapper:UTDScalarB::rhoIBB( A_131, _flat_559) ; 
  A_133 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_135 = wrapper:UTDScalarB::eqBBB( BM234_0, A_133) ; 
  A_137 = wrapper:UTDScalarB::sameBBB( A_135, A_132) ; 
  A_138 = wrapper:UTDScalarB::comaBBB( r_6, A_137) ; 
  r_7 = A_138; 
  A_141 = wrapper:UTDScalarB::eqBBB( BM034_0, BS1_0) ; 
  A_143 = wrapper:UTDScalarB::sameBBB( A_141, BM034_0) ; 
  A_144 = wrapper:UTDScalarB::comaBBB( r_7, A_143) ; 
  r_8 = A_144; 
  A_147 = wrapper:UTDScalarB::eqBBB( BM034_0, BM034_0) ; 
  A_149 = wrapper:UTDScalarB::sameBBB( A_147, BM034_0) ; 
  A_150 = wrapper:UTDScalarB::comaBBB( r_8, A_149) ; 
  r_9 = A_150; 
  A_153 = wrapper:UTDScalarB::eqBBB( BM304_0, BS1_0) ; 
  A_155 = wrapper:UTDScalarB::sameBBB( A_153, BM304_0) ; 
  A_156 = wrapper:UTDScalarB::comaBBB( r_9, A_155) ; 
  r_10 = A_156; 
  A_159 = wrapper:UTDScalarB::eqBBB( BM304_0, BM304_0) ; 
  A_161 = wrapper:UTDScalarB::sameBBB( A_159, BM304_0) ; 
  A_162 = wrapper:UTDScalarB::comaBBB( r_10, A_161) ; 
  r_11 = A_162; 
  A_165 = wrapper:UTDScalarB::eqBBB( BM230_0, BS1_0) ; 
  A_167 = wrapper:UTDScalarB::sameBBB( A_165, BM230_0) ; 
  A_168 = wrapper:UTDScalarB::comaBBB( r_11, A_167) ; 
  r_12 = A_168; 
  A_171 = wrapper:UTDScalarB::eqBBB( BM230_0, BM230_0) ; 
  A_173 = wrapper:UTDScalarB::sameBBB( A_171, BM230_0) ; 
  A_174 = wrapper:UTDScalarB::comaBBB( r_12, A_173) ; 
  r_13 = A_174; 
  r_13__SSA0_1 = _type_conv_( bool[.], r_13); 
  return( r_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::GEXXB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::GEXXB()
/*
 *  GEXXB ::  ---
 */
{ 
  bool[14] r_13__SSA0_1 { , NN } ; 
  bool[14] r_13 { , NN } ; 
  bool[14] A_174 { , NN } ; 
  bool A_173 { , NN } ; 
  bool[.,.,.] A_171 { , NN } ; 
  bool[13] r_12 { , NN } ; 
  bool[13] A_168 { , NN } ; 
  bool A_167 { , NN } ; 
  bool[.,.,.] A_165 { , NN } ; 
  bool[12] r_11 { , NN } ; 
  bool[12] A_162 { , NN } ; 
  bool A_161 { , NN } ; 
  bool[.,.,.] A_159 { , NN } ; 
  bool[11] r_10 { , NN } ; 
  bool[11] A_156 { , NN } ; 
  bool A_155 { , NN } ; 
  bool[.,.,.] A_153 { , NN } ; 
  bool[10] r_9 { , NN } ; 
  bool[10] A_150 { , NN } ; 
  bool A_149 { , NN } ; 
  bool[.,.,.] A_147 { , NN } ; 
  bool[9] r_8 { , NN } ; 
  bool[9] A_144 { , NN } ; 
  bool A_143 { , NN } ; 
  bool[.,.,.] A_141 { , NN } ; 
  bool[8] r_7 { , NN } ; 
  bool[8] A_138 { , NN } ; 
  bool A_137 { , NN } ; 
  bool[.,.,.] A_135 { , NN } ; 
  bool[.,.,.] A_133 { , NN } ; 
  bool[7] r_6 { , NN } ; 
  bool[7] A_131 { , NN } ; 
  bool A_130 { , NN } ; 
  bool[.,.,.] A_128 { , NN } ; 
  bool[6] r_5 { , NN } ; 
  bool[6] A_125 { , NN } ; 
  bool A_124 { , NN } ; 
  bool[.,.,.] A_122 { , NN } ; 
  bool[.,.,.] A_120 { , NN } ; 
  bool{1} _flat_626 { , NN } ; 
  int[3] A_119 { , NN } ; 
  bool[5] r_4 { , NN } ; 
  bool[5] A_117 { , NN } ; 
  bool A_116 { , NN } ; 
  bool[4,4] A_107 { , NN } ; 
  bool[.,.] A_106 { , NN } ; 
  int[2]{4,4} _flat_623 { , NN } ; 
  int{4} _flat_624 { , NN } ; 
  int{4} _flat_625 { , NN } ; 
  bool[16] A_105 { , NN } ; 
  bool[4]{1,0...} _flat_618 { , NN } ; 
  bool{1} _flat_619 { , NN } ; 
  bool{0} _flat_620 { , NN } ; 
  bool{1} _flat_621 { , NN } ; 
  bool{0} _flat_622 { , NN } ; 
  bool[12] A_104 { , NN } ; 
  bool[4]{1,0...} _flat_613 { , NN } ; 
  bool{1} _flat_614 { , NN } ; 
  bool{0} _flat_615 { , NN } ; 
  bool{1} _flat_616 { , NN } ; 
  bool{0} _flat_617 { , NN } ; 
  bool[8] A_103 { , NN } ; 
  bool[4]{1,1...} _flat_603 { , NN } ; 
  bool{1} _flat_604 { , NN } ; 
  bool{1} _flat_605 { , NN } ; 
  bool{1} _flat_606 { , NN } ; 
  bool{1} _flat_607 { , NN } ; 
  bool[4]{1,1...} _flat_608 { , NN } ; 
  bool{1} _flat_609 { , NN } ; 
  bool{1} _flat_610 { , NN } ; 
  bool{1} _flat_611 { , NN } ; 
  bool{1} _flat_612 { , NN } ; 
  bool[4] r_3 { , NN } ; 
  bool[4] A_101 { , NN } ; 
  bool A_100 { , NN } ; 
  bool{1} _flat_602 { , NN } ; 
  bool A_98 { , NN } ; 
  bool[3] r_2 { , NN } ; 
  bool[3] A_95 { , NN } ; 
  bool A_94 { , NN } ; 
  bool{1} _flat_601 { , NN } ; 
  bool A_92 { , NN } ; 
  bool[2] r_1 { , NN } ; 
  bool[2] A_89 { , NN } ; 
  bool A_88 { , NN } ; 
  bool{0} _flat_600 { , NN } ; 
  bool A_86 { , NN } ; 
  bool r_0 { , NN } ; 
  bool A_83 { , NN } ; 
  bool{1} _flat_599 { , NN } ; 
  bool A_81 { , NN } ; 
  bool[.,.,.] BM230_0 { , NN } ; 
  bool[.,.,.] A_78 { , NN } ; 
  int[3]{2,3...} _flat_592 { , NN } ; 
  int{2} _flat_593 { , NN } ; 
  int{3} _flat_594 { , NN } ; 
  int{0} _flat_595 { , NN } ; 
  bool[2]{0,1} _flat_596 { , NN } ; 
  bool{0} _flat_597 { , NN } ; 
  bool{1} _flat_598 { , NN } ; 
  bool[.,.,.] BM304_0 { , NN } ; 
  bool[.,.,.] A_76 { , NN } ; 
  int[3]{3,0...} _flat_585 { , NN } ; 
  int{3} _flat_586 { , NN } ; 
  int{0} _flat_587 { , NN } ; 
  int{4} _flat_588 { , NN } ; 
  bool[2]{0,1} _flat_589 { , NN } ; 
  bool{0} _flat_590 { , NN } ; 
  bool{1} _flat_591 { , NN } ; 
  bool[.,.,.] BM034_0 { , NN } ; 
  bool[.,.,.] A_74 { , NN } ; 
  int[3]{0,3...} _flat_578 { , NN } ; 
  int{0} _flat_579 { , NN } ; 
  int{3} _flat_580 { , NN } ; 
  int{4} _flat_581 { , NN } ; 
  bool[2]{0,1} _flat_582 { , NN } ; 
  bool{0} _flat_583 { , NN } ; 
  bool{1} _flat_584 { , NN } ; 
  bool[.,.,.] BM234_0 { , NN } ; 
  bool[.,.,.] A_72 { , NN } ; 
  int[3]{2,3...} _flat_570 { , NN } ; 
  int{2} _flat_571 { , NN } ; 
  int{3} _flat_572 { , NN } ; 
  int{4} _flat_573 { , NN } ; 
  bool[3]{0,1...} _flat_574 { , NN } ; 
  bool{0} _flat_575 { , NN } ; 
  bool{1} _flat_576 { , NN } ; 
  bool{0} _flat_577 { , NN } ; 
  bool[.] BVS0_0 { , NN } ; 
  bool[.] A_70 { , NN } ; 
  bool{0} _flat_568 { , NN } ; 
  bool{0} _flat_569 { , NN } ; 
  bool[4]{0,1...} BVR_0 { , NN } ; 
  bool{0} _flat_564 { , NN } ; 
  bool{1} _flat_565 { , NN } ; 
  bool{0} _flat_566 { , NN } ; 
  bool{1} _flat_567 { , NN } ; 
  bool[4]{0,0...} BVL_0 { , NN } ; 
  bool{0} _flat_560 { , NN } ; 
  bool{0} _flat_561 { , NN } ; 
  bool{1} _flat_562 { , NN } ; 
  bool{1} _flat_563 { , NN } ; 
  bool{1} BS1_0 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  BS1_0 = true; 
  _flat_563 = true; 
  _flat_562 = true; 
  _flat_561 = false; 
  _flat_560 = false; 
  BVL_0 = [ _flat_560, _flat_561, _flat_562, _flat_563 ]; 
  _flat_567 = true; 
  _flat_566 = false; 
  _flat_565 = true; 
  _flat_564 = false; 
  BVR_0 = [ _flat_564, _flat_565, _flat_566, _flat_567 ]; 
  _flat_569 = false; 
  _flat_568 = false; 
  A_70 = wrapper:UTDScalarB::rhoBBB( _flat_568, _flat_569) ; 
  BVS0_0 = A_70; 
  _flat_577 = false; 
  _flat_576 = true; 
  _flat_575 = false; 
  _flat_574 = [ _flat_575, _flat_576, _flat_577 ]; 
  _flat_573 = 4; 
  _flat_572 = 3; 
  _flat_571 = 2; 
  _flat_570 = [ _flat_571, _flat_572, _flat_573 ]; 
  A_72 = wrapper:UTDScalarB::rhoIBB( _flat_570, _flat_574) ; 
  BM234_0 = A_72; 
  _flat_584 = true; 
  _flat_583 = false; 
  _flat_582 = [ _flat_583, _flat_584 ]; 
  _flat_581 = 4; 
  _flat_580 = 3; 
  _flat_579 = 0; 
  _flat_578 = [ _flat_579, _flat_580, _flat_581 ]; 
  A_74 = wrapper:UTDScalarB::rhoIBB( _flat_578, _flat_582) ; 
  BM034_0 = A_74; 
  _flat_591 = true; 
  _flat_590 = false; 
  _flat_589 = [ _flat_590, _flat_591 ]; 
  _flat_588 = 4; 
  _flat_587 = 0; 
  _flat_586 = 3; 
  _flat_585 = [ _flat_586, _flat_587, _flat_588 ]; 
  A_76 = wrapper:UTDScalarB::rhoIBB( _flat_585, _flat_589) ; 
  BM304_0 = A_76; 
  _flat_598 = true; 
  _flat_597 = false; 
  _flat_596 = [ _flat_597, _flat_598 ]; 
  _flat_595 = 0; 
  _flat_594 = 3; 
  _flat_593 = 2; 
  _flat_592 = [ _flat_593, _flat_594, _flat_595 ]; 
  A_78 = wrapper:UTDScalarB::rhoIBB( _flat_592, _flat_596) ; 
  BM230_0 = A_78; 
  A_81 = wrapper:UTDScalarB::geBBB( BS0_0, BS0_0) ; 
  _flat_599 = true; 
  A_83 = wrapper:UTDScalarB::sameBBB( A_81, _flat_599) ; 
  r_0 = A_83; 
  A_86 = wrapper:UTDScalarB::geBBB( BS0_0, BS1_0) ; 
  _flat_600 = false; 
  A_88 = wrapper:UTDScalarB::sameBBB( A_86, _flat_600) ; 
  A_89 = wrapper:UTDScalarB::comaBBB( r_0, A_88) ; 
  r_1 = A_89; 
  A_92 = wrapper:UTDScalarB::geBBB( BS1_0, BS0_0) ; 
  _flat_601 = true; 
  A_94 = wrapper:UTDScalarB::sameBBB( A_92, _flat_601) ; 
  A_95 = wrapper:UTDScalarB::comaBBB( r_1, A_94) ; 
  r_2 = A_95; 
  A_98 = wrapper:UTDScalarB::geBBB( BS1_0, BS1_0) ; 
  _flat_602 = true; 
  A_100 = wrapper:UTDScalarB::sameBBB( A_98, _flat_602) ; 
  A_101 = wrapper:UTDScalarB::comaBBB( r_2, A_100) ; 
  r_3 = A_101; 
  _flat_612 = true; 
  _flat_611 = true; 
  _flat_610 = true; 
  _flat_609 = true; 
  _flat_608 = [ _flat_609, _flat_610, _flat_611, _flat_612 ]; 
  _flat_607 = true; 
  _flat_606 = true; 
  _flat_605 = true; 
  _flat_604 = true; 
  _flat_603 = [ _flat_604, _flat_605, _flat_606, _flat_607 ]; 
  A_103 = wrapper:UTDScalarB::comaBBB( _flat_603, _flat_608) ; 
  _flat_617 = false; 
  _flat_616 = true; 
  _flat_615 = false; 
  _flat_614 = true; 
  _flat_613 = [ _flat_614, _flat_615, _flat_616, _flat_617 ]; 
  A_104 = wrapper:UTDScalarB::comaBBB( _flat_613, A_103) ; 
  _flat_622 = false; 
  _flat_621 = true; 
  _flat_620 = false; 
  _flat_619 = true; 
  _flat_618 = [ _flat_619, _flat_620, _flat_621, _flat_622 ]; 
  A_105 = wrapper:UTDScalarB::comaBBB( _flat_618, A_104) ; 
  _flat_625 = 4; 
  _flat_624 = 4; 
  _flat_623 = [ _flat_624, _flat_625 ]; 
  A_106 = wrapper:UTDScalarB::rhoIBB( _flat_623, A_105) ; 
  A_107 = wrapper:UTDScalarB::jotdotgeBBB( BVL_0, BVR_0) ; 
  A_116 = wrapper:UTDScalarB::sameBBB( A_107, A_106) ; 
  A_117 = wrapper:UTDScalarB::comaBBB( r_3, A_116) ; 
  r_4 = A_117; 
  A_119 = wrapper:UTDScalarB::rhoXBI( BM234_0) ; 
  _flat_626 = true; 
  A_120 = wrapper:UTDScalarB::rhoIBB( A_119, _flat_626) ; 
  A_122 = wrapper:UTDScalarB::geBBB( BM234_0, BS0_0) ; 
  A_124 = wrapper:UTDScalarB::sameBBB( A_122, A_120) ; 
  A_125 = wrapper:UTDScalarB::comaBBB( r_4, A_124) ; 
  r_5 = A_125; 
  A_128 = wrapper:UTDScalarB::geBBB( BM234_0, BS1_0) ; 
  A_130 = wrapper:UTDScalarB::sameBBB( A_128, BM234_0) ; 
  A_131 = wrapper:UTDScalarB::comaBBB( r_5, A_130) ; 
  r_6 = A_131; 
  A_133 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_135 = wrapper:UTDScalarB::geBBB( BM234_0, A_133) ; 
  A_137 = wrapper:UTDScalarB::sameBBB( A_135, BM234_0) ; 
  A_138 = wrapper:UTDScalarB::comaBBB( r_6, A_137) ; 
  r_7 = A_138; 
  A_141 = wrapper:UTDScalarB::geBBB( BM034_0, BS1_0) ; 
  A_143 = wrapper:UTDScalarB::sameBBB( A_141, BM034_0) ; 
  A_144 = wrapper:UTDScalarB::comaBBB( r_7, A_143) ; 
  r_8 = A_144; 
  A_147 = wrapper:UTDScalarB::geBBB( BM034_0, BM034_0) ; 
  A_149 = wrapper:UTDScalarB::sameBBB( A_147, BM034_0) ; 
  A_150 = wrapper:UTDScalarB::comaBBB( r_8, A_149) ; 
  r_9 = A_150; 
  A_153 = wrapper:UTDScalarB::geBBB( BM304_0, BS1_0) ; 
  A_155 = wrapper:UTDScalarB::sameBBB( A_153, BM304_0) ; 
  A_156 = wrapper:UTDScalarB::comaBBB( r_9, A_155) ; 
  r_10 = A_156; 
  A_159 = wrapper:UTDScalarB::geBBB( BM304_0, BM304_0) ; 
  A_161 = wrapper:UTDScalarB::sameBBB( A_159, BM304_0) ; 
  A_162 = wrapper:UTDScalarB::comaBBB( r_10, A_161) ; 
  r_11 = A_162; 
  A_165 = wrapper:UTDScalarB::geBBB( BM230_0, BS1_0) ; 
  A_167 = wrapper:UTDScalarB::sameBBB( A_165, BM230_0) ; 
  A_168 = wrapper:UTDScalarB::comaBBB( r_11, A_167) ; 
  r_12 = A_168; 
  A_171 = wrapper:UTDScalarB::geBBB( BM230_0, BM230_0) ; 
  A_173 = wrapper:UTDScalarB::sameBBB( A_171, BM230_0) ; 
  A_174 = wrapper:UTDScalarB::comaBBB( r_12, A_173) ; 
  r_13 = A_174; 
  r_13__SSA0_1 = _type_conv_( bool[.], r_13); 
  return( r_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::GTXXB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::GTXXB()
/*
 *  GTXXB ::  ---
 */
{ 
  bool[14] r_13__SSA0_1 { , NN } ; 
  bool[14] r_13 { , NN } ; 
  bool[14] A_178 { , NN } ; 
  bool A_177 { , NN } ; 
  bool[.,.,.] A_175 { , NN } ; 
  bool[13] r_12 { , NN } ; 
  bool[13] A_172 { , NN } ; 
  bool A_171 { , NN } ; 
  bool[.,.,.] A_169 { , NN } ; 
  bool[12] r_11 { , NN } ; 
  bool[12] A_166 { , NN } ; 
  bool A_165 { , NN } ; 
  bool[.,.,.] A_163 { , NN } ; 
  bool[11] r_10 { , NN } ; 
  bool[11] A_160 { , NN } ; 
  bool A_159 { , NN } ; 
  bool[.,.,.] A_157 { , NN } ; 
  bool[10] r_9 { , NN } ; 
  bool[10] A_154 { , NN } ; 
  bool A_153 { , NN } ; 
  bool[.,.,.] A_151 { , NN } ; 
  bool[.,.,.] A_149 { , NN } ; 
  bool{0} _flat_695 { , NN } ; 
  int[3] A_148 { , NN } ; 
  bool[9] r_8 { , NN } ; 
  bool[9] A_146 { , NN } ; 
  bool A_145 { , NN } ; 
  bool[.,.,.] A_143 { , NN } ; 
  bool[.,.,.] A_141 { , NN } ; 
  bool{0} _flat_694 { , NN } ; 
  int[3] A_140 { , NN } ; 
  bool[8] r_7 { , NN } ; 
  bool[8] A_138 { , NN } ; 
  bool A_137 { , NN } ; 
  bool[.,.,.] A_135 { , NN } ; 
  bool[.,.,.] A_133 { , NN } ; 
  bool[7] r_6 { , NN } ; 
  bool[7] A_131 { , NN } ; 
  bool A_130 { , NN } ; 
  bool[.,.,.] A_128 { , NN } ; 
  bool[.,.,.] A_126 { , NN } ; 
  bool{0} _flat_693 { , NN } ; 
  int[3] A_125 { , NN } ; 
  bool[6] r_5 { , NN } ; 
  bool[6] A_123 { , NN } ; 
  bool A_122 { , NN } ; 
  bool[.,.,.] A_120 { , NN } ; 
  bool[5] r_4 { , NN } ; 
  bool[5] A_117 { , NN } ; 
  bool A_116 { , NN } ; 
  bool[4,4] A_107 { , NN } ; 
  bool[.,.] A_106 { , NN } ; 
  int[2]{4,4} _flat_690 { , NN } ; 
  int{4} _flat_691 { , NN } ; 
  int{4} _flat_692 { , NN } ; 
  bool[16] A_105 { , NN } ; 
  bool[4]{0,0...} _flat_685 { , NN } ; 
  bool{0} _flat_686 { , NN } ; 
  bool{0} _flat_687 { , NN } ; 
  bool{0} _flat_688 { , NN } ; 
  bool{0} _flat_689 { , NN } ; 
  bool[12] A_104 { , NN } ; 
  bool[4]{0,0...} _flat_680 { , NN } ; 
  bool{0} _flat_681 { , NN } ; 
  bool{0} _flat_682 { , NN } ; 
  bool{0} _flat_683 { , NN } ; 
  bool{0} _flat_684 { , NN } ; 
  bool[8] A_103 { , NN } ; 
  bool[4]{1,0...} _flat_670 { , NN } ; 
  bool{1} _flat_671 { , NN } ; 
  bool{0} _flat_672 { , NN } ; 
  bool{1} _flat_673 { , NN } ; 
  bool{0} _flat_674 { , NN } ; 
  bool[4]{1,0...} _flat_675 { , NN } ; 
  bool{1} _flat_676 { , NN } ; 
  bool{0} _flat_677 { , NN } ; 
  bool{1} _flat_678 { , NN } ; 
  bool{0} _flat_679 { , NN } ; 
  bool[4] r_3 { , NN } ; 
  bool[4] A_101 { , NN } ; 
  bool A_100 { , NN } ; 
  bool{0} _flat_669 { , NN } ; 
  bool A_98 { , NN } ; 
  bool[3] r_2 { , NN } ; 
  bool[3] A_95 { , NN } ; 
  bool A_94 { , NN } ; 
  bool{1} _flat_668 { , NN } ; 
  bool A_92 { , NN } ; 
  bool[2] r_1 { , NN } ; 
  bool[2] A_89 { , NN } ; 
  bool A_88 { , NN } ; 
  bool{0} _flat_667 { , NN } ; 
  bool A_86 { , NN } ; 
  bool r_0 { , NN } ; 
  bool A_83 { , NN } ; 
  bool{0} _flat_666 { , NN } ; 
  bool A_81 { , NN } ; 
  bool[.,.,.] BM230_0 { , NN } ; 
  bool[.,.,.] A_78 { , NN } ; 
  int[3]{2,3...} _flat_659 { , NN } ; 
  int{2} _flat_660 { , NN } ; 
  int{3} _flat_661 { , NN } ; 
  int{0} _flat_662 { , NN } ; 
  bool[2]{0,1} _flat_663 { , NN } ; 
  bool{0} _flat_664 { , NN } ; 
  bool{1} _flat_665 { , NN } ; 
  bool[.,.,.] BM304_0 { , NN } ; 
  bool[.,.,.] A_76 { , NN } ; 
  int[3]{3,0...} _flat_652 { , NN } ; 
  int{3} _flat_653 { , NN } ; 
  int{0} _flat_654 { , NN } ; 
  int{4} _flat_655 { , NN } ; 
  bool[2]{0,1} _flat_656 { , NN } ; 
  bool{0} _flat_657 { , NN } ; 
  bool{1} _flat_658 { , NN } ; 
  bool[.,.,.] BM034_0 { , NN } ; 
  bool[.,.,.] A_74 { , NN } ; 
  int[3]{0,3...} _flat_645 { , NN } ; 
  int{0} _flat_646 { , NN } ; 
  int{3} _flat_647 { , NN } ; 
  int{4} _flat_648 { , NN } ; 
  bool[2]{0,1} _flat_649 { , NN } ; 
  bool{0} _flat_650 { , NN } ; 
  bool{1} _flat_651 { , NN } ; 
  bool[.,.,.] BM234_0 { , NN } ; 
  bool[.,.,.] A_72 { , NN } ; 
  int[3]{2,3...} _flat_637 { , NN } ; 
  int{2} _flat_638 { , NN } ; 
  int{3} _flat_639 { , NN } ; 
  int{4} _flat_640 { , NN } ; 
  bool[3]{0,1...} _flat_641 { , NN } ; 
  bool{0} _flat_642 { , NN } ; 
  bool{1} _flat_643 { , NN } ; 
  bool{0} _flat_644 { , NN } ; 
  bool[.] BVS0_0 { , NN } ; 
  bool[.] A_70 { , NN } ; 
  bool{0} _flat_635 { , NN } ; 
  bool{0} _flat_636 { , NN } ; 
  bool[4]{0,1...} BVR_0 { , NN } ; 
  bool{0} _flat_631 { , NN } ; 
  bool{1} _flat_632 { , NN } ; 
  bool{0} _flat_633 { , NN } ; 
  bool{1} _flat_634 { , NN } ; 
  bool[4]{0,0...} BVL_0 { , NN } ; 
  bool{0} _flat_627 { , NN } ; 
  bool{0} _flat_628 { , NN } ; 
  bool{1} _flat_629 { , NN } ; 
  bool{1} _flat_630 { , NN } ; 
  bool{1} BS1_0 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  BS1_0 = true; 
  _flat_630 = true; 
  _flat_629 = true; 
  _flat_628 = false; 
  _flat_627 = false; 
  BVL_0 = [ _flat_627, _flat_628, _flat_629, _flat_630 ]; 
  _flat_634 = true; 
  _flat_633 = false; 
  _flat_632 = true; 
  _flat_631 = false; 
  BVR_0 = [ _flat_631, _flat_632, _flat_633, _flat_634 ]; 
  _flat_636 = false; 
  _flat_635 = false; 
  A_70 = wrapper:UTDScalarB::rhoBBB( _flat_635, _flat_636) ; 
  BVS0_0 = A_70; 
  _flat_644 = false; 
  _flat_643 = true; 
  _flat_642 = false; 
  _flat_641 = [ _flat_642, _flat_643, _flat_644 ]; 
  _flat_640 = 4; 
  _flat_639 = 3; 
  _flat_638 = 2; 
  _flat_637 = [ _flat_638, _flat_639, _flat_640 ]; 
  A_72 = wrapper:UTDScalarB::rhoIBB( _flat_637, _flat_641) ; 
  BM234_0 = A_72; 
  _flat_651 = true; 
  _flat_650 = false; 
  _flat_649 = [ _flat_650, _flat_651 ]; 
  _flat_648 = 4; 
  _flat_647 = 3; 
  _flat_646 = 0; 
  _flat_645 = [ _flat_646, _flat_647, _flat_648 ]; 
  A_74 = wrapper:UTDScalarB::rhoIBB( _flat_645, _flat_649) ; 
  BM034_0 = A_74; 
  _flat_658 = true; 
  _flat_657 = false; 
  _flat_656 = [ _flat_657, _flat_658 ]; 
  _flat_655 = 4; 
  _flat_654 = 0; 
  _flat_653 = 3; 
  _flat_652 = [ _flat_653, _flat_654, _flat_655 ]; 
  A_76 = wrapper:UTDScalarB::rhoIBB( _flat_652, _flat_656) ; 
  BM304_0 = A_76; 
  _flat_665 = true; 
  _flat_664 = false; 
  _flat_663 = [ _flat_664, _flat_665 ]; 
  _flat_662 = 0; 
  _flat_661 = 3; 
  _flat_660 = 2; 
  _flat_659 = [ _flat_660, _flat_661, _flat_662 ]; 
  A_78 = wrapper:UTDScalarB::rhoIBB( _flat_659, _flat_663) ; 
  BM230_0 = A_78; 
  A_81 = wrapper:UTDScalarB::gtBBB( BS0_0, BS0_0) ; 
  _flat_666 = false; 
  A_83 = wrapper:UTDScalarB::sameBBB( A_81, _flat_666) ; 
  r_0 = A_83; 
  A_86 = wrapper:UTDScalarB::gtBBB( BS0_0, BS1_0) ; 
  _flat_667 = false; 
  A_88 = wrapper:UTDScalarB::sameBBB( A_86, _flat_667) ; 
  A_89 = wrapper:UTDScalarB::comaBBB( r_0, A_88) ; 
  r_1 = A_89; 
  A_92 = wrapper:UTDScalarB::gtBBB( BS1_0, BS0_0) ; 
  _flat_668 = true; 
  A_94 = wrapper:UTDScalarB::sameBBB( A_92, _flat_668) ; 
  A_95 = wrapper:UTDScalarB::comaBBB( r_1, A_94) ; 
  r_2 = A_95; 
  A_98 = wrapper:UTDScalarB::gtBBB( BS1_0, BS1_0) ; 
  _flat_669 = false; 
  A_100 = wrapper:UTDScalarB::sameBBB( A_98, _flat_669) ; 
  A_101 = wrapper:UTDScalarB::comaBBB( r_2, A_100) ; 
  r_3 = A_101; 
  _flat_679 = false; 
  _flat_678 = true; 
  _flat_677 = false; 
  _flat_676 = true; 
  _flat_675 = [ _flat_676, _flat_677, _flat_678, _flat_679 ]; 
  _flat_674 = false; 
  _flat_673 = true; 
  _flat_672 = false; 
  _flat_671 = true; 
  _flat_670 = [ _flat_671, _flat_672, _flat_673, _flat_674 ]; 
  A_103 = wrapper:UTDScalarB::comaBBB( _flat_670, _flat_675) ; 
  _flat_684 = false; 
  _flat_683 = false; 
  _flat_682 = false; 
  _flat_681 = false; 
  _flat_680 = [ _flat_681, _flat_682, _flat_683, _flat_684 ]; 
  A_104 = wrapper:UTDScalarB::comaBBB( _flat_680, A_103) ; 
  _flat_689 = false; 
  _flat_688 = false; 
  _flat_687 = false; 
  _flat_686 = false; 
  _flat_685 = [ _flat_686, _flat_687, _flat_688, _flat_689 ]; 
  A_105 = wrapper:UTDScalarB::comaBBB( _flat_685, A_104) ; 
  _flat_692 = 4; 
  _flat_691 = 4; 
  _flat_690 = [ _flat_691, _flat_692 ]; 
  A_106 = wrapper:UTDScalarB::rhoIBB( _flat_690, A_105) ; 
  A_107 = wrapper:UTDScalarB::jotdotgtBBB( BVL_0, BVR_0) ; 
  A_116 = wrapper:UTDScalarB::sameBBB( A_107, A_106) ; 
  A_117 = wrapper:UTDScalarB::comaBBB( r_3, A_116) ; 
  r_4 = A_117; 
  A_120 = wrapper:UTDScalarB::gtBBB( BM234_0, BS0_0) ; 
  A_122 = wrapper:UTDScalarB::sameBBB( A_120, BM234_0) ; 
  A_123 = wrapper:UTDScalarB::comaBBB( r_4, A_122) ; 
  r_5 = A_123; 
  A_125 = wrapper:UTDScalarB::rhoXBI( BM234_0) ; 
  _flat_693 = false; 
  A_126 = wrapper:UTDScalarB::rhoIBB( A_125, _flat_693) ; 
  A_128 = wrapper:UTDScalarB::gtBBB( BM234_0, BS1_0) ; 
  A_130 = wrapper:UTDScalarB::sameBBB( A_128, A_126) ; 
  A_131 = wrapper:UTDScalarB::comaBBB( r_5, A_130) ; 
  r_6 = A_131; 
  A_133 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_135 = wrapper:UTDScalarB::gtBBB( BM234_0, A_133) ; 
  A_137 = wrapper:UTDScalarB::sameBBB( A_135, BM234_0) ; 
  A_138 = wrapper:UTDScalarB::comaBBB( r_6, A_137) ; 
  r_7 = A_138; 
  A_140 = wrapper:UTDScalarB::rhoXBI( BM034_0) ; 
  _flat_694 = false; 
  A_141 = wrapper:UTDScalarB::rhoIBB( A_140, _flat_694) ; 
  A_143 = wrapper:UTDScalarB::gtBBB( BM034_0, BS1_0) ; 
  A_145 = wrapper:UTDScalarB::sameBBB( A_143, A_141) ; 
  A_146 = wrapper:UTDScalarB::comaBBB( r_7, A_145) ; 
  r_8 = A_146; 
  A_148 = wrapper:UTDScalarB::rhoXBI( BM034_0) ; 
  _flat_695 = false; 
  A_149 = wrapper:UTDScalarB::rhoIBB( A_148, _flat_695) ; 
  A_151 = wrapper:UTDScalarB::gtBBB( BM034_0, BM034_0) ; 
  A_153 = wrapper:UTDScalarB::sameBBB( A_151, A_149) ; 
  A_154 = wrapper:UTDScalarB::comaBBB( r_8, A_153) ; 
  r_9 = A_154; 
  A_157 = wrapper:UTDScalarB::gtBBB( BM304_0, BS1_0) ; 
  A_159 = wrapper:UTDScalarB::sameBBB( A_157, BM304_0) ; 
  A_160 = wrapper:UTDScalarB::comaBBB( r_9, A_159) ; 
  r_10 = A_160; 
  A_163 = wrapper:UTDScalarB::gtBBB( BM304_0, BM304_0) ; 
  A_165 = wrapper:UTDScalarB::sameBBB( A_163, BM304_0) ; 
  A_166 = wrapper:UTDScalarB::comaBBB( r_10, A_165) ; 
  r_11 = A_166; 
  A_169 = wrapper:UTDScalarB::gtBBB( BM230_0, BS1_0) ; 
  A_171 = wrapper:UTDScalarB::sameBBB( A_169, BM230_0) ; 
  A_172 = wrapper:UTDScalarB::comaBBB( r_11, A_171) ; 
  r_12 = A_172; 
  A_175 = wrapper:UTDScalarB::gtBBB( BM230_0, BM230_0) ; 
  A_177 = wrapper:UTDScalarB::sameBBB( A_175, BM230_0) ; 
  A_178 = wrapper:UTDScalarB::comaBBB( r_12, A_177) ; 
  r_13 = A_178; 
  r_13__SSA0_1 = _type_conv_( bool[.], r_13); 
  return( r_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::LEXXB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::LEXXB()
/*
 *  LEXXB ::  ---
 */
{ 
  bool[14] r_13__SSA0_1 { , NN } ; 
  bool[14] r_13 { , NN } ; 
  bool[14] A_179 { , NN } ; 
  bool A_178 { , NN } ; 
  bool[.,.,.] A_176 { , NN } ; 
  bool[13] r_12 { , NN } ; 
  bool[13] A_173 { , NN } ; 
  bool A_172 { , NN } ; 
  bool[.,.,.] A_170 { , NN } ; 
  bool[12] r_11 { , NN } ; 
  bool[12] A_167 { , NN } ; 
  bool A_166 { , NN } ; 
  bool[.,.,.] A_164 { , NN } ; 
  bool[11] r_10 { , NN } ; 
  bool[11] A_161 { , NN } ; 
  bool A_160 { , NN } ; 
  bool[.,.,.] A_158 { , NN } ; 
  bool[10] r_9 { , NN } ; 
  bool[10] A_155 { , NN } ; 
  bool A_154 { , NN } ; 
  bool[.,.,.] A_152 { , NN } ; 
  bool[.,.,.] A_150 { , NN } ; 
  bool{0} _flat_764 { , NN } ; 
  int[3] A_149 { , NN } ; 
  bool[9] r_8 { , NN } ; 
  bool[9] A_147 { , NN } ; 
  bool A_146 { , NN } ; 
  bool[.,.,.] A_144 { , NN } ; 
  bool[.,.,.] A_142 { , NN } ; 
  bool{1} _flat_763 { , NN } ; 
  int[3] A_141 { , NN } ; 
  bool[8] r_7 { , NN } ; 
  bool[8] A_139 { , NN } ; 
  bool A_138 { , NN } ; 
  bool[.,.,.] A_136 { , NN } ; 
  bool[.,.,.] A_134 { , NN } ; 
  bool[.,.,.] A_133 { , NN } ; 
  bool[7] r_6 { , NN } ; 
  bool[7] A_131 { , NN } ; 
  bool A_130 { , NN } ; 
  bool[.,.,.] A_128 { , NN } ; 
  bool[.,.,.] A_126 { , NN } ; 
  bool{1} _flat_762 { , NN } ; 
  int[3] A_125 { , NN } ; 
  bool[6] r_5 { , NN } ; 
  bool[6] A_123 { , NN } ; 
  bool A_122 { , NN } ; 
  bool[.,.,.] A_120 { , NN } ; 
  bool[.,.,.] A_118 { , NN } ; 
  bool[5] r_4 { , NN } ; 
  bool[5] A_116 { , NN } ; 
  bool A_115 { , NN } ; 
  bool[4,4] A_106 { , NN } ; 
  bool[.,.] A_105 { , NN } ; 
  int[2]{4,4} _flat_759 { , NN } ; 
  int{4} _flat_760 { , NN } ; 
  int{4} _flat_761 { , NN } ; 
  bool[16] A_104 { , NN } ; 
  bool[4]{1,1...} _flat_754 { , NN } ; 
  bool{1} _flat_755 { , NN } ; 
  bool{1} _flat_756 { , NN } ; 
  bool{1} _flat_757 { , NN } ; 
  bool{1} _flat_758 { , NN } ; 
  bool[12] A_103 { , NN } ; 
  bool[4]{1,1...} _flat_749 { , NN } ; 
  bool{1} _flat_750 { , NN } ; 
  bool{1} _flat_751 { , NN } ; 
  bool{1} _flat_752 { , NN } ; 
  bool{1} _flat_753 { , NN } ; 
  bool[8] A_102 { , NN } ; 
  bool[4]{0,1...} _flat_739 { , NN } ; 
  bool{0} _flat_740 { , NN } ; 
  bool{1} _flat_741 { , NN } ; 
  bool{0} _flat_742 { , NN } ; 
  bool{1} _flat_743 { , NN } ; 
  bool[4]{0,1...} _flat_744 { , NN } ; 
  bool{0} _flat_745 { , NN } ; 
  bool{1} _flat_746 { , NN } ; 
  bool{0} _flat_747 { , NN } ; 
  bool{1} _flat_748 { , NN } ; 
  bool[4] r_3 { , NN } ; 
  bool[4] A_100 { , NN } ; 
  bool A_99 { , NN } ; 
  bool{1} _flat_738 { , NN } ; 
  bool A_97 { , NN } ; 
  bool[3] r_2 { , NN } ; 
  bool[3] A_94 { , NN } ; 
  bool A_93 { , NN } ; 
  bool{0} _flat_737 { , NN } ; 
  bool A_91 { , NN } ; 
  bool[2] r_1 { , NN } ; 
  bool[2] A_88 { , NN } ; 
  bool A_87 { , NN } ; 
  bool{1} _flat_736 { , NN } ; 
  bool A_85 { , NN } ; 
  bool r_0 { , NN } ; 
  bool A_82 { , NN } ; 
  bool{1} _flat_735 { , NN } ; 
  bool A_80 { , NN } ; 
  bool[.,.,.] BM230_0 { , NN } ; 
  bool[.,.,.] A_77 { , NN } ; 
  int[3]{2,3...} _flat_728 { , NN } ; 
  int{2} _flat_729 { , NN } ; 
  int{3} _flat_730 { , NN } ; 
  int{0} _flat_731 { , NN } ; 
  bool[2]{0,1} _flat_732 { , NN } ; 
  bool{0} _flat_733 { , NN } ; 
  bool{1} _flat_734 { , NN } ; 
  bool[.,.,.] BM304_0 { , NN } ; 
  bool[.,.,.] A_75 { , NN } ; 
  int[3]{3,0...} _flat_721 { , NN } ; 
  int{3} _flat_722 { , NN } ; 
  int{0} _flat_723 { , NN } ; 
  int{4} _flat_724 { , NN } ; 
  bool[2]{0,1} _flat_725 { , NN } ; 
  bool{0} _flat_726 { , NN } ; 
  bool{1} _flat_727 { , NN } ; 
  bool[.,.,.] BM034_0 { , NN } ; 
  bool[.,.,.] A_73 { , NN } ; 
  int[3]{0,3...} _flat_714 { , NN } ; 
  int{0} _flat_715 { , NN } ; 
  int{3} _flat_716 { , NN } ; 
  int{4} _flat_717 { , NN } ; 
  bool[2]{0,1} _flat_718 { , NN } ; 
  bool{0} _flat_719 { , NN } ; 
  bool{1} _flat_720 { , NN } ; 
  bool[.,.,.] BM234_0 { , NN } ; 
  bool[.,.,.] A_71 { , NN } ; 
  int[3]{2,3...} _flat_706 { , NN } ; 
  int{2} _flat_707 { , NN } ; 
  int{3} _flat_708 { , NN } ; 
  int{4} _flat_709 { , NN } ; 
  bool[3]{0,1...} _flat_710 { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  bool{1} _flat_712 { , NN } ; 
  bool{0} _flat_713 { , NN } ; 
  bool[.] BVS0_0 { , NN } ; 
  bool[.] A_69 { , NN } ; 
  bool{0} _flat_704 { , NN } ; 
  bool{0} _flat_705 { , NN } ; 
  bool[4]{0,1...} BVR_0 { , NN } ; 
  bool{0} _flat_700 { , NN } ; 
  bool{1} _flat_701 { , NN } ; 
  bool{0} _flat_702 { , NN } ; 
  bool{1} _flat_703 { , NN } ; 
  bool[4]{0,0...} BVL_0 { , NN } ; 
  bool{0} _flat_696 { , NN } ; 
  bool{0} _flat_697 { , NN } ; 
  bool{1} _flat_698 { , NN } ; 
  bool{1} _flat_699 { , NN } ; 
  bool{1} BS1_0 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  BS1_0 = true; 
  _flat_699 = true; 
  _flat_698 = true; 
  _flat_697 = false; 
  _flat_696 = false; 
  BVL_0 = [ _flat_696, _flat_697, _flat_698, _flat_699 ]; 
  _flat_703 = true; 
  _flat_702 = false; 
  _flat_701 = true; 
  _flat_700 = false; 
  BVR_0 = [ _flat_700, _flat_701, _flat_702, _flat_703 ]; 
  _flat_705 = false; 
  _flat_704 = false; 
  A_69 = wrapper:UTDScalarB::rhoBBB( _flat_704, _flat_705) ; 
  BVS0_0 = A_69; 
  _flat_713 = false; 
  _flat_712 = true; 
  _flat_711 = false; 
  _flat_710 = [ _flat_711, _flat_712, _flat_713 ]; 
  _flat_709 = 4; 
  _flat_708 = 3; 
  _flat_707 = 2; 
  _flat_706 = [ _flat_707, _flat_708, _flat_709 ]; 
  A_71 = wrapper:UTDScalarB::rhoIBB( _flat_706, _flat_710) ; 
  BM234_0 = A_71; 
  _flat_720 = true; 
  _flat_719 = false; 
  _flat_718 = [ _flat_719, _flat_720 ]; 
  _flat_717 = 4; 
  _flat_716 = 3; 
  _flat_715 = 0; 
  _flat_714 = [ _flat_715, _flat_716, _flat_717 ]; 
  A_73 = wrapper:UTDScalarB::rhoIBB( _flat_714, _flat_718) ; 
  BM034_0 = A_73; 
  _flat_727 = true; 
  _flat_726 = false; 
  _flat_725 = [ _flat_726, _flat_727 ]; 
  _flat_724 = 4; 
  _flat_723 = 0; 
  _flat_722 = 3; 
  _flat_721 = [ _flat_722, _flat_723, _flat_724 ]; 
  A_75 = wrapper:UTDScalarB::rhoIBB( _flat_721, _flat_725) ; 
  BM304_0 = A_75; 
  _flat_734 = true; 
  _flat_733 = false; 
  _flat_732 = [ _flat_733, _flat_734 ]; 
  _flat_731 = 0; 
  _flat_730 = 3; 
  _flat_729 = 2; 
  _flat_728 = [ _flat_729, _flat_730, _flat_731 ]; 
  A_77 = wrapper:UTDScalarB::rhoIBB( _flat_728, _flat_732) ; 
  BM230_0 = A_77; 
  A_80 = wrapper:UTDScalarB::leBBB( BS0_0, BS0_0) ; 
  _flat_735 = true; 
  A_82 = wrapper:UTDScalarB::sameBBB( A_80, _flat_735) ; 
  r_0 = A_82; 
  A_85 = wrapper:UTDScalarB::leBBB( BS0_0, BS1_0) ; 
  _flat_736 = true; 
  A_87 = wrapper:UTDScalarB::sameBBB( A_85, _flat_736) ; 
  A_88 = wrapper:UTDScalarB::comaBBB( r_0, A_87) ; 
  r_1 = A_88; 
  A_91 = wrapper:UTDScalarB::leBBB( BS1_0, BS0_0) ; 
  _flat_737 = false; 
  A_93 = wrapper:UTDScalarB::sameBBB( A_91, _flat_737) ; 
  A_94 = wrapper:UTDScalarB::comaBBB( r_1, A_93) ; 
  r_2 = A_94; 
  A_97 = wrapper:UTDScalarB::leBBB( BS1_0, BS1_0) ; 
  _flat_738 = true; 
  A_99 = wrapper:UTDScalarB::sameBBB( A_97, _flat_738) ; 
  A_100 = wrapper:UTDScalarB::comaBBB( r_2, A_99) ; 
  r_3 = A_100; 
  _flat_748 = true; 
  _flat_747 = false; 
  _flat_746 = true; 
  _flat_745 = false; 
  _flat_744 = [ _flat_745, _flat_746, _flat_747, _flat_748 ]; 
  _flat_743 = true; 
  _flat_742 = false; 
  _flat_741 = true; 
  _flat_740 = false; 
  _flat_739 = [ _flat_740, _flat_741, _flat_742, _flat_743 ]; 
  A_102 = wrapper:UTDScalarB::comaBBB( _flat_739, _flat_744) ; 
  _flat_753 = true; 
  _flat_752 = true; 
  _flat_751 = true; 
  _flat_750 = true; 
  _flat_749 = [ _flat_750, _flat_751, _flat_752, _flat_753 ]; 
  A_103 = wrapper:UTDScalarB::comaBBB( _flat_749, A_102) ; 
  _flat_758 = true; 
  _flat_757 = true; 
  _flat_756 = true; 
  _flat_755 = true; 
  _flat_754 = [ _flat_755, _flat_756, _flat_757, _flat_758 ]; 
  A_104 = wrapper:UTDScalarB::comaBBB( _flat_754, A_103) ; 
  _flat_761 = 4; 
  _flat_760 = 4; 
  _flat_759 = [ _flat_760, _flat_761 ]; 
  A_105 = wrapper:UTDScalarB::rhoIBB( _flat_759, A_104) ; 
  A_106 = wrapper:UTDScalarB::jotdotleBBB( BVL_0, BVR_0) ; 
  A_115 = wrapper:UTDScalarB::sameBBB( A_106, A_105) ; 
  A_116 = wrapper:UTDScalarB::comaBBB( r_3, A_115) ; 
  r_4 = A_116; 
  A_118 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_120 = wrapper:UTDScalarB::leBBB( BM234_0, BS0_0) ; 
  A_122 = wrapper:UTDScalarB::sameBBB( A_120, A_118) ; 
  A_123 = wrapper:UTDScalarB::comaBBB( r_4, A_122) ; 
  r_5 = A_123; 
  A_125 = wrapper:UTDScalarB::rhoXBI( BM234_0) ; 
  _flat_762 = true; 
  A_126 = wrapper:UTDScalarB::rhoIBB( A_125, _flat_762) ; 
  A_128 = wrapper:UTDScalarB::leBBB( BM234_0, BS1_0) ; 
  A_130 = wrapper:UTDScalarB::sameBBB( A_128, A_126) ; 
  A_131 = wrapper:UTDScalarB::comaBBB( r_5, A_130) ; 
  r_6 = A_131; 
  A_133 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_134 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_136 = wrapper:UTDScalarB::leBBB( BM234_0, A_134) ; 
  A_138 = wrapper:UTDScalarB::sameBBB( A_136, A_133) ; 
  A_139 = wrapper:UTDScalarB::comaBBB( r_6, A_138) ; 
  r_7 = A_139; 
  A_141 = wrapper:UTDScalarB::rhoXBI( BM034_0) ; 
  _flat_763 = true; 
  A_142 = wrapper:UTDScalarB::rhoIBB( A_141, _flat_763) ; 
  A_144 = wrapper:UTDScalarB::leBBB( BM034_0, BS1_0) ; 
  A_146 = wrapper:UTDScalarB::sameBBB( A_144, A_142) ; 
  A_147 = wrapper:UTDScalarB::comaBBB( r_7, A_146) ; 
  r_8 = A_147; 
  A_149 = wrapper:UTDScalarB::rhoXBI( BM034_0) ; 
  _flat_764 = false; 
  A_150 = wrapper:UTDScalarB::rhoIBB( A_149, _flat_764) ; 
  A_152 = wrapper:UTDScalarB::leBBB( BM034_0, BM034_0) ; 
  A_154 = wrapper:UTDScalarB::sameBBB( A_152, A_150) ; 
  A_155 = wrapper:UTDScalarB::comaBBB( r_8, A_154) ; 
  r_9 = A_155; 
  A_158 = wrapper:UTDScalarB::leBBB( BM304_0, BS1_0) ; 
  A_160 = wrapper:UTDScalarB::sameBBB( A_158, BM304_0) ; 
  A_161 = wrapper:UTDScalarB::comaBBB( r_9, A_160) ; 
  r_10 = A_161; 
  A_164 = wrapper:UTDScalarB::leBBB( BM304_0, BM304_0) ; 
  A_166 = wrapper:UTDScalarB::sameBBB( A_164, BM304_0) ; 
  A_167 = wrapper:UTDScalarB::comaBBB( r_10, A_166) ; 
  r_11 = A_167; 
  A_170 = wrapper:UTDScalarB::leBBB( BM230_0, BS1_0) ; 
  A_172 = wrapper:UTDScalarB::sameBBB( A_170, BM230_0) ; 
  A_173 = wrapper:UTDScalarB::comaBBB( r_11, A_172) ; 
  r_12 = A_173; 
  A_176 = wrapper:UTDScalarB::leBBB( BM230_0, BM230_0) ; 
  A_178 = wrapper:UTDScalarB::sameBBB( A_176, BM230_0) ; 
  A_179 = wrapper:UTDScalarB::comaBBB( r_12, A_178) ; 
  r_13 = A_179; 
  r_13__SSA0_1 = _type_conv_( bool[.], r_13); 
  return( r_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::LTXXB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::LTXXB()
/*
 *  LTXXB ::  ---
 */
{ 
  bool[14] r_13__SSA0_1 { , NN } ; 
  bool[14] r_13 { , NN } ; 
  bool[14] A_176 { , NN } ; 
  bool A_175 { , NN } ; 
  bool[.,.,.] A_173 { , NN } ; 
  bool[13] r_12 { , NN } ; 
  bool[13] A_170 { , NN } ; 
  bool A_169 { , NN } ; 
  bool[.,.,.] A_167 { , NN } ; 
  bool[12] r_11 { , NN } ; 
  bool[12] A_164 { , NN } ; 
  bool A_163 { , NN } ; 
  bool[.,.,.] A_161 { , NN } ; 
  bool[11] r_10 { , NN } ; 
  bool[11] A_158 { , NN } ; 
  bool A_157 { , NN } ; 
  bool[.,.,.] A_155 { , NN } ; 
  bool[10] r_9 { , NN } ; 
  bool[10] A_152 { , NN } ; 
  bool A_151 { , NN } ; 
  bool[.,.,.] A_149 { , NN } ; 
  bool[.,.,.] A_147 { , NN } ; 
  bool{0} _flat_836 { , NN } ; 
  int[3] A_146 { , NN } ; 
  bool[9] r_8 { , NN } ; 
  bool[9] A_144 { , NN } ; 
  bool A_143 { , NN } ; 
  bool[.,.,.] A_141 { , NN } ; 
  bool[8] r_7 { , NN } ; 
  bool[8] A_138 { , NN } ; 
  bool A_137 { , NN } ; 
  bool[.,.,.] A_135 { , NN } ; 
  bool[.,.,.] A_133 { , NN } ; 
  bool[.,.,.] A_132 { , NN } ; 
  bool[7] r_6 { , NN } ; 
  bool[7] A_130 { , NN } ; 
  bool A_129 { , NN } ; 
  bool[.,.,.] A_127 { , NN } ; 
  bool[.,.,.] A_125 { , NN } ; 
  bool[6] r_5 { , NN } ; 
  bool[6] A_123 { , NN } ; 
  bool A_122 { , NN } ; 
  bool[.,.,.] A_120 { , NN } ; 
  bool[.,.,.] A_118 { , NN } ; 
  int[3]{2,3...} _flat_831 { , NN } ; 
  int{2} _flat_832 { , NN } ; 
  int{3} _flat_833 { , NN } ; 
  int{4} _flat_834 { , NN } ; 
  bool{0} _flat_835 { , NN } ; 
  bool[5] r_4 { , NN } ; 
  bool[5] A_116 { , NN } ; 
  bool A_115 { , NN } ; 
  bool[4,4] A_106 { , NN } ; 
  bool[.,.] A_105 { , NN } ; 
  int[2]{4,4} _flat_828 { , NN } ; 
  int{4} _flat_829 { , NN } ; 
  int{4} _flat_830 { , NN } ; 
  bool[16] A_104 { , NN } ; 
  bool[4]{0,1...} _flat_823 { , NN } ; 
  bool{0} _flat_824 { , NN } ; 
  bool{1} _flat_825 { , NN } ; 
  bool{0} _flat_826 { , NN } ; 
  bool{1} _flat_827 { , NN } ; 
  bool[12] A_103 { , NN } ; 
  bool[4]{0,1...} _flat_818 { , NN } ; 
  bool{0} _flat_819 { , NN } ; 
  bool{1} _flat_820 { , NN } ; 
  bool{0} _flat_821 { , NN } ; 
  bool{1} _flat_822 { , NN } ; 
  bool[8] A_102 { , NN } ; 
  bool[4]{0,0...} _flat_808 { , NN } ; 
  bool{0} _flat_809 { , NN } ; 
  bool{0} _flat_810 { , NN } ; 
  bool{0} _flat_811 { , NN } ; 
  bool{0} _flat_812 { , NN } ; 
  bool[4]{0,0...} _flat_813 { , NN } ; 
  bool{0} _flat_814 { , NN } ; 
  bool{0} _flat_815 { , NN } ; 
  bool{0} _flat_816 { , NN } ; 
  bool{0} _flat_817 { , NN } ; 
  bool[4] r_3 { , NN } ; 
  bool[4] A_100 { , NN } ; 
  bool A_99 { , NN } ; 
  bool{0} _flat_807 { , NN } ; 
  bool A_97 { , NN } ; 
  bool[3] r_2 { , NN } ; 
  bool[3] A_94 { , NN } ; 
  bool A_93 { , NN } ; 
  bool{0} _flat_806 { , NN } ; 
  bool A_91 { , NN } ; 
  bool[2] r_1 { , NN } ; 
  bool[2] A_88 { , NN } ; 
  bool A_87 { , NN } ; 
  bool{1} _flat_805 { , NN } ; 
  bool A_85 { , NN } ; 
  bool r_0 { , NN } ; 
  bool A_82 { , NN } ; 
  bool{0} _flat_804 { , NN } ; 
  bool A_80 { , NN } ; 
  bool[.,.,.] BM230_0 { , NN } ; 
  bool[.,.,.] A_77 { , NN } ; 
  int[3]{2,3...} _flat_797 { , NN } ; 
  int{2} _flat_798 { , NN } ; 
  int{3} _flat_799 { , NN } ; 
  int{0} _flat_800 { , NN } ; 
  bool[2]{0,1} _flat_801 { , NN } ; 
  bool{0} _flat_802 { , NN } ; 
  bool{1} _flat_803 { , NN } ; 
  bool[.,.,.] BM304_0 { , NN } ; 
  bool[.,.,.] A_75 { , NN } ; 
  int[3]{3,0...} _flat_790 { , NN } ; 
  int{3} _flat_791 { , NN } ; 
  int{0} _flat_792 { , NN } ; 
  int{4} _flat_793 { , NN } ; 
  bool[2]{0,1} _flat_794 { , NN } ; 
  bool{0} _flat_795 { , NN } ; 
  bool{1} _flat_796 { , NN } ; 
  bool[.,.,.] BM034_0 { , NN } ; 
  bool[.,.,.] A_73 { , NN } ; 
  int[3]{0,3...} _flat_783 { , NN } ; 
  int{0} _flat_784 { , NN } ; 
  int{3} _flat_785 { , NN } ; 
  int{4} _flat_786 { , NN } ; 
  bool[2]{0,1} _flat_787 { , NN } ; 
  bool{0} _flat_788 { , NN } ; 
  bool{1} _flat_789 { , NN } ; 
  bool[.,.,.] BM234_0 { , NN } ; 
  bool[.,.,.] A_71 { , NN } ; 
  int[3]{2,3...} _flat_775 { , NN } ; 
  int{2} _flat_776 { , NN } ; 
  int{3} _flat_777 { , NN } ; 
  int{4} _flat_778 { , NN } ; 
  bool[3]{0,1...} _flat_779 { , NN } ; 
  bool{0} _flat_780 { , NN } ; 
  bool{1} _flat_781 { , NN } ; 
  bool{0} _flat_782 { , NN } ; 
  bool[.] BVS0_0 { , NN } ; 
  bool[.] A_69 { , NN } ; 
  bool{0} _flat_773 { , NN } ; 
  bool{0} _flat_774 { , NN } ; 
  bool[4]{0,1...} BVR_0 { , NN } ; 
  bool{0} _flat_769 { , NN } ; 
  bool{1} _flat_770 { , NN } ; 
  bool{0} _flat_771 { , NN } ; 
  bool{1} _flat_772 { , NN } ; 
  bool[4]{0,0...} BVL_0 { , NN } ; 
  bool{0} _flat_765 { , NN } ; 
  bool{0} _flat_766 { , NN } ; 
  bool{1} _flat_767 { , NN } ; 
  bool{1} _flat_768 { , NN } ; 
  bool{1} BS1_0 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  BS1_0 = true; 
  _flat_768 = true; 
  _flat_767 = true; 
  _flat_766 = false; 
  _flat_765 = false; 
  BVL_0 = [ _flat_765, _flat_766, _flat_767, _flat_768 ]; 
  _flat_772 = true; 
  _flat_771 = false; 
  _flat_770 = true; 
  _flat_769 = false; 
  BVR_0 = [ _flat_769, _flat_770, _flat_771, _flat_772 ]; 
  _flat_774 = false; 
  _flat_773 = false; 
  A_69 = wrapper:UTDScalarB::rhoBBB( _flat_773, _flat_774) ; 
  BVS0_0 = A_69; 
  _flat_782 = false; 
  _flat_781 = true; 
  _flat_780 = false; 
  _flat_779 = [ _flat_780, _flat_781, _flat_782 ]; 
  _flat_778 = 4; 
  _flat_777 = 3; 
  _flat_776 = 2; 
  _flat_775 = [ _flat_776, _flat_777, _flat_778 ]; 
  A_71 = wrapper:UTDScalarB::rhoIBB( _flat_775, _flat_779) ; 
  BM234_0 = A_71; 
  _flat_789 = true; 
  _flat_788 = false; 
  _flat_787 = [ _flat_788, _flat_789 ]; 
  _flat_786 = 4; 
  _flat_785 = 3; 
  _flat_784 = 0; 
  _flat_783 = [ _flat_784, _flat_785, _flat_786 ]; 
  A_73 = wrapper:UTDScalarB::rhoIBB( _flat_783, _flat_787) ; 
  BM034_0 = A_73; 
  _flat_796 = true; 
  _flat_795 = false; 
  _flat_794 = [ _flat_795, _flat_796 ]; 
  _flat_793 = 4; 
  _flat_792 = 0; 
  _flat_791 = 3; 
  _flat_790 = [ _flat_791, _flat_792, _flat_793 ]; 
  A_75 = wrapper:UTDScalarB::rhoIBB( _flat_790, _flat_794) ; 
  BM304_0 = A_75; 
  _flat_803 = true; 
  _flat_802 = false; 
  _flat_801 = [ _flat_802, _flat_803 ]; 
  _flat_800 = 0; 
  _flat_799 = 3; 
  _flat_798 = 2; 
  _flat_797 = [ _flat_798, _flat_799, _flat_800 ]; 
  A_77 = wrapper:UTDScalarB::rhoIBB( _flat_797, _flat_801) ; 
  BM230_0 = A_77; 
  A_80 = wrapper:UTDScalarB::ltBBB( BS0_0, BS0_0) ; 
  _flat_804 = false; 
  A_82 = wrapper:UTDScalarB::sameBBB( A_80, _flat_804) ; 
  r_0 = A_82; 
  A_85 = wrapper:UTDScalarB::ltBBB( BS0_0, BS1_0) ; 
  _flat_805 = true; 
  A_87 = wrapper:UTDScalarB::sameBBB( A_85, _flat_805) ; 
  A_88 = wrapper:UTDScalarB::comaBBB( r_0, A_87) ; 
  r_1 = A_88; 
  A_91 = wrapper:UTDScalarB::ltBBB( BS1_0, BS0_0) ; 
  _flat_806 = false; 
  A_93 = wrapper:UTDScalarB::sameBBB( A_91, _flat_806) ; 
  A_94 = wrapper:UTDScalarB::comaBBB( r_1, A_93) ; 
  r_2 = A_94; 
  A_97 = wrapper:UTDScalarB::ltBBB( BS1_0, BS1_0) ; 
  _flat_807 = false; 
  A_99 = wrapper:UTDScalarB::sameBBB( A_97, _flat_807) ; 
  A_100 = wrapper:UTDScalarB::comaBBB( r_2, A_99) ; 
  r_3 = A_100; 
  _flat_817 = false; 
  _flat_816 = false; 
  _flat_815 = false; 
  _flat_814 = false; 
  _flat_813 = [ _flat_814, _flat_815, _flat_816, _flat_817 ]; 
  _flat_812 = false; 
  _flat_811 = false; 
  _flat_810 = false; 
  _flat_809 = false; 
  _flat_808 = [ _flat_809, _flat_810, _flat_811, _flat_812 ]; 
  A_102 = wrapper:UTDScalarB::comaBBB( _flat_808, _flat_813) ; 
  _flat_822 = true; 
  _flat_821 = false; 
  _flat_820 = true; 
  _flat_819 = false; 
  _flat_818 = [ _flat_819, _flat_820, _flat_821, _flat_822 ]; 
  A_103 = wrapper:UTDScalarB::comaBBB( _flat_818, A_102) ; 
  _flat_827 = true; 
  _flat_826 = false; 
  _flat_825 = true; 
  _flat_824 = false; 
  _flat_823 = [ _flat_824, _flat_825, _flat_826, _flat_827 ]; 
  A_104 = wrapper:UTDScalarB::comaBBB( _flat_823, A_103) ; 
  _flat_830 = 4; 
  _flat_829 = 4; 
  _flat_828 = [ _flat_829, _flat_830 ]; 
  A_105 = wrapper:UTDScalarB::rhoIBB( _flat_828, A_104) ; 
  A_106 = wrapper:UTDScalarB::jotdotltBBB( BVL_0, BVR_0) ; 
  A_115 = wrapper:UTDScalarB::sameBBB( A_106, A_105) ; 
  A_116 = wrapper:UTDScalarB::comaBBB( r_3, A_115) ; 
  r_4 = A_116; 
  _flat_835 = false; 
  _flat_834 = 4; 
  _flat_833 = 3; 
  _flat_832 = 2; 
  _flat_831 = [ _flat_832, _flat_833, _flat_834 ]; 
  A_118 = wrapper:UTDScalarB::rhoIBB( _flat_831, _flat_835) ; 
  A_120 = wrapper:UTDScalarB::ltBBB( BM234_0, BS0_0) ; 
  A_122 = wrapper:UTDScalarB::sameBBB( A_120, A_118) ; 
  A_123 = wrapper:UTDScalarB::comaBBB( r_4, A_122) ; 
  r_5 = A_123; 
  A_125 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_127 = wrapper:UTDScalarB::ltBBB( BM234_0, BS1_0) ; 
  A_129 = wrapper:UTDScalarB::sameBBB( A_127, A_125) ; 
  A_130 = wrapper:UTDScalarB::comaBBB( r_5, A_129) ; 
  r_6 = A_130; 
  A_132 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_133 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_135 = wrapper:UTDScalarB::ltBBB( BM234_0, A_133) ; 
  A_137 = wrapper:UTDScalarB::sameBBB( A_135, A_132) ; 
  A_138 = wrapper:UTDScalarB::comaBBB( r_6, A_137) ; 
  r_7 = A_138; 
  A_141 = wrapper:UTDScalarB::ltBBB( BM034_0, BS1_0) ; 
  A_143 = wrapper:UTDScalarB::sameBBB( A_141, BM034_0) ; 
  A_144 = wrapper:UTDScalarB::comaBBB( r_7, A_143) ; 
  r_8 = A_144; 
  A_146 = wrapper:UTDScalarB::rhoXBI( BM034_0) ; 
  _flat_836 = false; 
  A_147 = wrapper:UTDScalarB::rhoIBB( A_146, _flat_836) ; 
  A_149 = wrapper:UTDScalarB::ltBBB( BM034_0, BM034_0) ; 
  A_151 = wrapper:UTDScalarB::sameBBB( A_149, A_147) ; 
  A_152 = wrapper:UTDScalarB::comaBBB( r_8, A_151) ; 
  r_9 = A_152; 
  A_155 = wrapper:UTDScalarB::ltBBB( BM304_0, BS1_0) ; 
  A_157 = wrapper:UTDScalarB::sameBBB( A_155, BM304_0) ; 
  A_158 = wrapper:UTDScalarB::comaBBB( r_9, A_157) ; 
  r_10 = A_158; 
  A_161 = wrapper:UTDScalarB::ltBBB( BM304_0, BM304_0) ; 
  A_163 = wrapper:UTDScalarB::sameBBB( A_161, BM304_0) ; 
  A_164 = wrapper:UTDScalarB::comaBBB( r_10, A_163) ; 
  r_11 = A_164; 
  A_167 = wrapper:UTDScalarB::ltBBB( BM230_0, BS1_0) ; 
  A_169 = wrapper:UTDScalarB::sameBBB( A_167, BM230_0) ; 
  A_170 = wrapper:UTDScalarB::comaBBB( r_11, A_169) ; 
  r_12 = A_170; 
  A_173 = wrapper:UTDScalarB::ltBBB( BM230_0, BM230_0) ; 
  A_175 = wrapper:UTDScalarB::sameBBB( A_173, BM230_0) ; 
  A_176 = wrapper:UTDScalarB::comaBBB( r_12, A_175) ; 
  r_13 = A_176; 
  r_13__SSA0_1 = _type_conv_( bool[.], r_13); 
  return( r_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::NANDXXB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::NANDXXB()
/*
 *  NANDXXB ::  ---
 */
{ 
  bool[14] r_13__SSA0_1 { , NN } ; 
  bool[14] r_13 { , NN } ; 
  bool[14] A_173 { , NN } ; 
  bool A_172 { , NN } ; 
  bool[.,.,.] A_170 { , NN } ; 
  bool[.,.,.] A_169 { , NN } ; 
  bool[13] r_12 { , NN } ; 
  bool[13] A_167 { , NN } ; 
  bool A_166 { , NN } ; 
  bool[.,.,.] A_164 { , NN } ; 
  bool[.,.,.] A_163 { , NN } ; 
  bool[12] r_11 { , NN } ; 
  bool[12] A_161 { , NN } ; 
  bool A_160 { , NN } ; 
  bool[.,.,.] A_158 { , NN } ; 
  bool[.,.,.] A_157 { , NN } ; 
  bool[11] r_10 { , NN } ; 
  bool[11] A_155 { , NN } ; 
  bool A_154 { , NN } ; 
  bool[.,.,.] A_152 { , NN } ; 
  bool[.,.,.] A_151 { , NN } ; 
  bool[10] r_9 { , NN } ; 
  bool[10] A_149 { , NN } ; 
  bool A_148 { , NN } ; 
  bool[.,.,.] A_146 { , NN } ; 
  bool[.,.,.] A_145 { , NN } ; 
  bool[9] r_8 { , NN } ; 
  bool[9] A_143 { , NN } ; 
  bool A_142 { , NN } ; 
  bool[.,.,.] A_140 { , NN } ; 
  bool[.,.,.] A_139 { , NN } ; 
  bool[8] r_7 { , NN } ; 
  bool[8] A_137 { , NN } ; 
  bool A_136 { , NN } ; 
  bool[.,.,.] A_134 { , NN } ; 
  bool[.,.,.] A_133 { , NN } ; 
  bool[.,.,.] A_132 { , NN } ; 
  bool[.,.,.] A_131 { , NN } ; 
  int[3]{2,3...} _flat_908 { , NN } ; 
  int{2} _flat_909 { , NN } ; 
  int{3} _flat_910 { , NN } ; 
  int{4} _flat_911 { , NN } ; 
  bool{0} _flat_912 { , NN } ; 
  bool[7] r_6 { , NN } ; 
  bool[7] A_129 { , NN } ; 
  bool A_128 { , NN } ; 
  bool[.,.,.] A_126 { , NN } ; 
  bool[.,.,.] A_125 { , NN } ; 
  bool[6] r_5 { , NN } ; 
  bool[6] A_123 { , NN } ; 
  bool A_122 { , NN } ; 
  bool[.,.,.] A_120 { , NN } ; 
  bool[.,.,.] A_119 { , NN } ; 
  bool[.,.,.] A_118 { , NN } ; 
  int[3]{2,3...} _flat_903 { , NN } ; 
  int{2} _flat_904 { , NN } ; 
  int{3} _flat_905 { , NN } ; 
  int{4} _flat_906 { , NN } ; 
  bool{0} _flat_907 { , NN } ; 
  bool[5] r_4 { , NN } ; 
  bool[5] A_116 { , NN } ; 
  bool A_115 { , NN } ; 
  bool[4,4] A_107 { , NN } ; 
  bool[.,.] A_106 { , NN } ; 
  bool[.,.] A_105 { , NN } ; 
  int[2]{4,4} _flat_900 { , NN } ; 
  int{4} _flat_901 { , NN } ; 
  int{4} _flat_902 { , NN } ; 
  bool[16] A_104 { , NN } ; 
  bool[4]{0,0...} _flat_895 { , NN } ; 
  bool{0} _flat_896 { , NN } ; 
  bool{0} _flat_897 { , NN } ; 
  bool{0} _flat_898 { , NN } ; 
  bool{0} _flat_899 { , NN } ; 
  bool[12] A_103 { , NN } ; 
  bool[4]{0,0...} _flat_890 { , NN } ; 
  bool{0} _flat_891 { , NN } ; 
  bool{0} _flat_892 { , NN } ; 
  bool{0} _flat_893 { , NN } ; 
  bool{0} _flat_894 { , NN } ; 
  bool[8] A_102 { , NN } ; 
  bool[4]{0,1...} _flat_880 { , NN } ; 
  bool{0} _flat_881 { , NN } ; 
  bool{1} _flat_882 { , NN } ; 
  bool{0} _flat_883 { , NN } ; 
  bool{1} _flat_884 { , NN } ; 
  bool[4]{0,1...} _flat_885 { , NN } ; 
  bool{0} _flat_886 { , NN } ; 
  bool{1} _flat_887 { , NN } ; 
  bool{0} _flat_888 { , NN } ; 
  bool{1} _flat_889 { , NN } ; 
  bool[4] r_3 { , NN } ; 
  bool[4] A_100 { , NN } ; 
  bool A_99 { , NN } ; 
  bool A_97 { , NN } ; 
  bool A_96 { , NN } ; 
  bool{1} _flat_879 { , NN } ; 
  bool[3] r_2 { , NN } ; 
  bool[3] A_94 { , NN } ; 
  bool A_93 { , NN } ; 
  bool A_91 { , NN } ; 
  bool A_90 { , NN } ; 
  bool{0} _flat_878 { , NN } ; 
  bool[2] r_1 { , NN } ; 
  bool[2] A_88 { , NN } ; 
  bool A_87 { , NN } ; 
  bool A_85 { , NN } ; 
  bool A_84 { , NN } ; 
  bool{0} _flat_877 { , NN } ; 
  bool r_0 { , NN } ; 
  bool A_82 { , NN } ; 
  bool A_80 { , NN } ; 
  bool A_79 { , NN } ; 
  bool{0} _flat_876 { , NN } ; 
  bool[.,.,.] BM230_0 { , NN } ; 
  bool[.,.,.] A_77 { , NN } ; 
  int[3]{2,3...} _flat_869 { , NN } ; 
  int{2} _flat_870 { , NN } ; 
  int{3} _flat_871 { , NN } ; 
  int{0} _flat_872 { , NN } ; 
  bool[2]{0,1} _flat_873 { , NN } ; 
  bool{0} _flat_874 { , NN } ; 
  bool{1} _flat_875 { , NN } ; 
  bool[.,.,.] BM304_0 { , NN } ; 
  bool[.,.,.] A_75 { , NN } ; 
  int[3]{3,0...} _flat_862 { , NN } ; 
  int{3} _flat_863 { , NN } ; 
  int{0} _flat_864 { , NN } ; 
  int{4} _flat_865 { , NN } ; 
  bool[2]{0,1} _flat_866 { , NN } ; 
  bool{0} _flat_867 { , NN } ; 
  bool{1} _flat_868 { , NN } ; 
  bool[.,.,.] BM034_0 { , NN } ; 
  bool[.,.,.] A_73 { , NN } ; 
  int[3]{0,3...} _flat_855 { , NN } ; 
  int{0} _flat_856 { , NN } ; 
  int{3} _flat_857 { , NN } ; 
  int{4} _flat_858 { , NN } ; 
  bool[2]{0,1} _flat_859 { , NN } ; 
  bool{0} _flat_860 { , NN } ; 
  bool{1} _flat_861 { , NN } ; 
  bool[.,.,.] BM234_0 { , NN } ; 
  bool[.,.,.] A_71 { , NN } ; 
  int[3]{2,3...} _flat_847 { , NN } ; 
  int{2} _flat_848 { , NN } ; 
  int{3} _flat_849 { , NN } ; 
  int{4} _flat_850 { , NN } ; 
  bool[3]{0,1...} _flat_851 { , NN } ; 
  bool{0} _flat_852 { , NN } ; 
  bool{1} _flat_853 { , NN } ; 
  bool{0} _flat_854 { , NN } ; 
  bool[.] BVS0_0 { , NN } ; 
  bool[.] A_69 { , NN } ; 
  bool{0} _flat_845 { , NN } ; 
  bool{0} _flat_846 { , NN } ; 
  bool[4]{0,1...} BVR_0 { , NN } ; 
  bool{0} _flat_841 { , NN } ; 
  bool{1} _flat_842 { , NN } ; 
  bool{0} _flat_843 { , NN } ; 
  bool{1} _flat_844 { , NN } ; 
  bool[4]{0,0...} BVL_0 { , NN } ; 
  bool{0} _flat_837 { , NN } ; 
  bool{0} _flat_838 { , NN } ; 
  bool{1} _flat_839 { , NN } ; 
  bool{1} _flat_840 { , NN } ; 
  bool{1} BS1_0 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  BS1_0 = true; 
  _flat_840 = true; 
  _flat_839 = true; 
  _flat_838 = false; 
  _flat_837 = false; 
  BVL_0 = [ _flat_837, _flat_838, _flat_839, _flat_840 ]; 
  _flat_844 = true; 
  _flat_843 = false; 
  _flat_842 = true; 
  _flat_841 = false; 
  BVR_0 = [ _flat_841, _flat_842, _flat_843, _flat_844 ]; 
  _flat_846 = false; 
  _flat_845 = false; 
  A_69 = wrapper:UTDScalarB::rhoBBB( _flat_845, _flat_846) ; 
  BVS0_0 = A_69; 
  _flat_854 = false; 
  _flat_853 = true; 
  _flat_852 = false; 
  _flat_851 = [ _flat_852, _flat_853, _flat_854 ]; 
  _flat_850 = 4; 
  _flat_849 = 3; 
  _flat_848 = 2; 
  _flat_847 = [ _flat_848, _flat_849, _flat_850 ]; 
  A_71 = wrapper:UTDScalarB::rhoIBB( _flat_847, _flat_851) ; 
  BM234_0 = A_71; 
  _flat_861 = true; 
  _flat_860 = false; 
  _flat_859 = [ _flat_860, _flat_861 ]; 
  _flat_858 = 4; 
  _flat_857 = 3; 
  _flat_856 = 0; 
  _flat_855 = [ _flat_856, _flat_857, _flat_858 ]; 
  A_73 = wrapper:UTDScalarB::rhoIBB( _flat_855, _flat_859) ; 
  BM034_0 = A_73; 
  _flat_868 = true; 
  _flat_867 = false; 
  _flat_866 = [ _flat_867, _flat_868 ]; 
  _flat_865 = 4; 
  _flat_864 = 0; 
  _flat_863 = 3; 
  _flat_862 = [ _flat_863, _flat_864, _flat_865 ]; 
  A_75 = wrapper:UTDScalarB::rhoIBB( _flat_862, _flat_866) ; 
  BM304_0 = A_75; 
  _flat_875 = true; 
  _flat_874 = false; 
  _flat_873 = [ _flat_874, _flat_875 ]; 
  _flat_872 = 0; 
  _flat_871 = 3; 
  _flat_870 = 2; 
  _flat_869 = [ _flat_870, _flat_871, _flat_872 ]; 
  A_77 = wrapper:UTDScalarB::rhoIBB( _flat_869, _flat_873) ; 
  BM230_0 = A_77; 
  _flat_876 = false; 
  A_79 = wrapper:UTDScalarB::notXBB( _flat_876) ; 
  A_80 = wrapper:UTDScalarB::nandBBB( BS0_0, BS0_0) ; 
  A_82 = wrapper:UTDScalarB::sameBBB( A_80, A_79) ; 
  r_0 = A_82; 
  _flat_877 = false; 
  A_84 = wrapper:UTDScalarB::notXBB( _flat_877) ; 
  A_85 = wrapper:UTDScalarB::nandBBB( BS0_0, BS1_0) ; 
  A_87 = wrapper:UTDScalarB::sameBBB( A_85, A_84) ; 
  A_88 = wrapper:UTDScalarB::comaBBB( r_0, A_87) ; 
  r_1 = A_88; 
  _flat_878 = false; 
  A_90 = wrapper:UTDScalarB::notXBB( _flat_878) ; 
  A_91 = wrapper:UTDScalarB::nandBBB( BS1_0, BS0_0) ; 
  A_93 = wrapper:UTDScalarB::sameBBB( A_91, A_90) ; 
  A_94 = wrapper:UTDScalarB::comaBBB( r_1, A_93) ; 
  r_2 = A_94; 
  _flat_879 = true; 
  A_96 = wrapper:UTDScalarB::notXBB( _flat_879) ; 
  A_97 = wrapper:UTDScalarB::nandBBB( BS1_0, BS1_0) ; 
  A_99 = wrapper:UTDScalarB::sameBBB( A_97, A_96) ; 
  A_100 = wrapper:UTDScalarB::comaBBB( r_2, A_99) ; 
  r_3 = A_100; 
  _flat_889 = true; 
  _flat_888 = false; 
  _flat_887 = true; 
  _flat_886 = false; 
  _flat_885 = [ _flat_886, _flat_887, _flat_888, _flat_889 ]; 
  _flat_884 = true; 
  _flat_883 = false; 
  _flat_882 = true; 
  _flat_881 = false; 
  _flat_880 = [ _flat_881, _flat_882, _flat_883, _flat_884 ]; 
  A_102 = wrapper:UTDScalarB::comaBBB( _flat_880, _flat_885) ; 
  _flat_894 = false; 
  _flat_893 = false; 
  _flat_892 = false; 
  _flat_891 = false; 
  _flat_890 = [ _flat_891, _flat_892, _flat_893, _flat_894 ]; 
  A_103 = wrapper:UTDScalarB::comaBBB( _flat_890, A_102) ; 
  _flat_899 = false; 
  _flat_898 = false; 
  _flat_897 = false; 
  _flat_896 = false; 
  _flat_895 = [ _flat_896, _flat_897, _flat_898, _flat_899 ]; 
  A_104 = wrapper:UTDScalarB::comaBBB( _flat_895, A_103) ; 
  _flat_902 = 4; 
  _flat_901 = 4; 
  _flat_900 = [ _flat_901, _flat_902 ]; 
  A_105 = wrapper:UTDScalarB::rhoIBB( _flat_900, A_104) ; 
  A_106 = wrapper:UTDScalarB::notXBB( A_105) ; 
  A_107 = wrapper:UTDScalarB::jotdotnandBBB( BVL_0, BVR_0) ; 
  A_115 = wrapper:UTDScalarB::sameBBB( A_107, A_106) ; 
  A_116 = wrapper:UTDScalarB::comaBBB( r_3, A_115) ; 
  r_4 = A_116; 
  _flat_907 = false; 
  _flat_906 = 4; 
  _flat_905 = 3; 
  _flat_904 = 2; 
  _flat_903 = [ _flat_904, _flat_905, _flat_906 ]; 
  A_118 = wrapper:UTDScalarB::rhoIBB( _flat_903, _flat_907) ; 
  A_119 = wrapper:UTDScalarB::notXBB( A_118) ; 
  A_120 = wrapper:UTDScalarB::nandBBB( BM234_0, BS0_0) ; 
  A_122 = wrapper:UTDScalarB::sameBBB( A_120, A_119) ; 
  A_123 = wrapper:UTDScalarB::comaBBB( r_4, A_122) ; 
  r_5 = A_123; 
  A_125 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_126 = wrapper:UTDScalarB::nandBBB( BM234_0, BS1_0) ; 
  A_128 = wrapper:UTDScalarB::sameBBB( A_126, A_125) ; 
  A_129 = wrapper:UTDScalarB::comaBBB( r_5, A_128) ; 
  r_6 = A_129; 
  _flat_912 = false; 
  _flat_911 = 4; 
  _flat_910 = 3; 
  _flat_909 = 2; 
  _flat_908 = [ _flat_909, _flat_910, _flat_911 ]; 
  A_131 = wrapper:UTDScalarB::rhoIBB( _flat_908, _flat_912) ; 
  A_132 = wrapper:UTDScalarB::notXBB( A_131) ; 
  A_133 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_134 = wrapper:UTDScalarB::nandBBB( BM234_0, A_133) ; 
  A_136 = wrapper:UTDScalarB::sameBBB( A_134, A_132) ; 
  A_137 = wrapper:UTDScalarB::comaBBB( r_6, A_136) ; 
  r_7 = A_137; 
  A_139 = wrapper:UTDScalarB::notXBB( BM034_0) ; 
  A_140 = wrapper:UTDScalarB::nandBBB( BM034_0, BS1_0) ; 
  A_142 = wrapper:UTDScalarB::sameBBB( A_140, A_139) ; 
  A_143 = wrapper:UTDScalarB::comaBBB( r_7, A_142) ; 
  r_8 = A_143; 
  A_145 = wrapper:UTDScalarB::notXBB( BM034_0) ; 
  A_146 = wrapper:UTDScalarB::nandBBB( BM034_0, BM034_0) ; 
  A_148 = wrapper:UTDScalarB::sameBBB( A_146, A_145) ; 
  A_149 = wrapper:UTDScalarB::comaBBB( r_8, A_148) ; 
  r_9 = A_149; 
  A_151 = wrapper:UTDScalarB::notXBB( BM304_0) ; 
  A_152 = wrapper:UTDScalarB::nandBBB( BM304_0, BS1_0) ; 
  A_154 = wrapper:UTDScalarB::sameBBB( A_152, A_151) ; 
  A_155 = wrapper:UTDScalarB::comaBBB( r_9, A_154) ; 
  r_10 = A_155; 
  A_157 = wrapper:UTDScalarB::notXBB( BM304_0) ; 
  A_158 = wrapper:UTDScalarB::nandBBB( BM304_0, BM304_0) ; 
  A_160 = wrapper:UTDScalarB::sameBBB( A_158, A_157) ; 
  A_161 = wrapper:UTDScalarB::comaBBB( r_10, A_160) ; 
  r_11 = A_161; 
  A_163 = wrapper:UTDScalarB::notXBB( BM230_0) ; 
  A_164 = wrapper:UTDScalarB::nandBBB( BM230_0, BS1_0) ; 
  A_166 = wrapper:UTDScalarB::sameBBB( A_164, A_163) ; 
  A_167 = wrapper:UTDScalarB::comaBBB( r_11, A_166) ; 
  r_12 = A_167; 
  A_169 = wrapper:UTDScalarB::notXBB( BM230_0) ; 
  A_170 = wrapper:UTDScalarB::nandBBB( BM230_0, BM230_0) ; 
  A_172 = wrapper:UTDScalarB::sameBBB( A_170, A_169) ; 
  A_173 = wrapper:UTDScalarB::comaBBB( r_12, A_172) ; 
  r_13 = A_173; 
  r_13__SSA0_1 = _type_conv_( bool[.], r_13); 
  return( r_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::NEXXB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::NEXXB()
/*
 *  NEXXB ::  ---
 */
{ 
  bool[14] r_13__SSA0_1 { , NN } ; 
  bool[14] r_13 { , NN } ; 
  bool[14] A_174 { , NN } ; 
  bool A_173 { , NN } ; 
  bool[.,.,.] A_171 { , NN } ; 
  bool[13] r_12 { , NN } ; 
  bool[13] A_168 { , NN } ; 
  bool A_167 { , NN } ; 
  bool[.,.,.] A_165 { , NN } ; 
  bool[12] r_11 { , NN } ; 
  bool[12] A_162 { , NN } ; 
  bool A_161 { , NN } ; 
  bool[.,.,.] A_159 { , NN } ; 
  bool[11] r_10 { , NN } ; 
  bool[11] A_156 { , NN } ; 
  bool A_155 { , NN } ; 
  bool[.,.,.] A_153 { , NN } ; 
  bool[10] r_9 { , NN } ; 
  bool[10] A_150 { , NN } ; 
  bool A_149 { , NN } ; 
  bool[.,.,.] A_147 { , NN } ; 
  bool[9] r_8 { , NN } ; 
  bool[9] A_144 { , NN } ; 
  bool A_143 { , NN } ; 
  bool[.,.,.] A_141 { , NN } ; 
  bool[8] r_7 { , NN } ; 
  bool[8] A_138 { , NN } ; 
  bool A_137 { , NN } ; 
  bool[.,.,.] A_135 { , NN } ; 
  bool[.,.,.] A_133 { , NN } ; 
  bool[.,.,.] A_132 { , NN } ; 
  bool{1} _flat_979 { , NN } ; 
  int[3] A_131 { , NN } ; 
  bool[7] r_6 { , NN } ; 
  bool[7] A_129 { , NN } ; 
  bool A_128 { , NN } ; 
  bool[.,.,.] A_126 { , NN } ; 
  bool[.,.,.] A_124 { , NN } ; 
  bool[6] r_5 { , NN } ; 
  bool[6] A_122 { , NN } ; 
  bool A_121 { , NN } ; 
  bool[.,.,.] A_119 { , NN } ; 
  bool[5] r_4 { , NN } ; 
  bool[5] A_116 { , NN } ; 
  bool A_115 { , NN } ; 
  bool[4,4] A_106 { , NN } ; 
  bool[.,.] A_105 { , NN } ; 
  int[2]{4,4} _flat_976 { , NN } ; 
  int{4} _flat_977 { , NN } ; 
  int{4} _flat_978 { , NN } ; 
  bool[16] A_104 { , NN } ; 
  bool[4]{0,1...} _flat_971 { , NN } ; 
  bool{0} _flat_972 { , NN } ; 
  bool{1} _flat_973 { , NN } ; 
  bool{0} _flat_974 { , NN } ; 
  bool{1} _flat_975 { , NN } ; 
  bool[12] A_103 { , NN } ; 
  bool[4]{0,1...} _flat_966 { , NN } ; 
  bool{0} _flat_967 { , NN } ; 
  bool{1} _flat_968 { , NN } ; 
  bool{0} _flat_969 { , NN } ; 
  bool{1} _flat_970 { , NN } ; 
  bool[8] A_102 { , NN } ; 
  bool[4]{1,0...} _flat_956 { , NN } ; 
  bool{1} _flat_957 { , NN } ; 
  bool{0} _flat_958 { , NN } ; 
  bool{1} _flat_959 { , NN } ; 
  bool{0} _flat_960 { , NN } ; 
  bool[4]{1,0...} _flat_961 { , NN } ; 
  bool{1} _flat_962 { , NN } ; 
  bool{0} _flat_963 { , NN } ; 
  bool{1} _flat_964 { , NN } ; 
  bool{0} _flat_965 { , NN } ; 
  bool[4] r_3 { , NN } ; 
  bool[4] A_100 { , NN } ; 
  bool A_99 { , NN } ; 
  bool{0} _flat_955 { , NN } ; 
  bool A_97 { , NN } ; 
  bool[3] r_2 { , NN } ; 
  bool[3] A_94 { , NN } ; 
  bool A_93 { , NN } ; 
  bool{1} _flat_954 { , NN } ; 
  bool A_91 { , NN } ; 
  bool[2] r_1 { , NN } ; 
  bool[2] A_88 { , NN } ; 
  bool A_87 { , NN } ; 
  bool{1} _flat_953 { , NN } ; 
  bool A_85 { , NN } ; 
  bool r_0 { , NN } ; 
  bool A_82 { , NN } ; 
  bool{0} _flat_952 { , NN } ; 
  bool A_80 { , NN } ; 
  bool[.,.,.] BM230_0 { , NN } ; 
  bool[.,.,.] A_77 { , NN } ; 
  int[3]{2,3...} _flat_945 { , NN } ; 
  int{2} _flat_946 { , NN } ; 
  int{3} _flat_947 { , NN } ; 
  int{0} _flat_948 { , NN } ; 
  bool[2]{0,1} _flat_949 { , NN } ; 
  bool{0} _flat_950 { , NN } ; 
  bool{1} _flat_951 { , NN } ; 
  bool[.,.,.] BM304_0 { , NN } ; 
  bool[.,.,.] A_75 { , NN } ; 
  int[3]{3,0...} _flat_938 { , NN } ; 
  int{3} _flat_939 { , NN } ; 
  int{0} _flat_940 { , NN } ; 
  int{4} _flat_941 { , NN } ; 
  bool[2]{0,1} _flat_942 { , NN } ; 
  bool{0} _flat_943 { , NN } ; 
  bool{1} _flat_944 { , NN } ; 
  bool[.,.,.] BM034_0 { , NN } ; 
  bool[.,.,.] A_73 { , NN } ; 
  int[3]{0,3...} _flat_931 { , NN } ; 
  int{0} _flat_932 { , NN } ; 
  int{3} _flat_933 { , NN } ; 
  int{4} _flat_934 { , NN } ; 
  bool[2]{0,1} _flat_935 { , NN } ; 
  bool{0} _flat_936 { , NN } ; 
  bool{1} _flat_937 { , NN } ; 
  bool[.,.,.] BM234_0 { , NN } ; 
  bool[.,.,.] A_71 { , NN } ; 
  int[3]{2,3...} _flat_923 { , NN } ; 
  int{2} _flat_924 { , NN } ; 
  int{3} _flat_925 { , NN } ; 
  int{4} _flat_926 { , NN } ; 
  bool[3]{0,1...} _flat_927 { , NN } ; 
  bool{0} _flat_928 { , NN } ; 
  bool{1} _flat_929 { , NN } ; 
  bool{0} _flat_930 { , NN } ; 
  bool[.] BVS0_0 { , NN } ; 
  bool[.] A_69 { , NN } ; 
  bool{0} _flat_921 { , NN } ; 
  bool{0} _flat_922 { , NN } ; 
  bool[4]{0,1...} BVR_0 { , NN } ; 
  bool{0} _flat_917 { , NN } ; 
  bool{1} _flat_918 { , NN } ; 
  bool{0} _flat_919 { , NN } ; 
  bool{1} _flat_920 { , NN } ; 
  bool[4]{0,0...} BVL_0 { , NN } ; 
  bool{0} _flat_913 { , NN } ; 
  bool{0} _flat_914 { , NN } ; 
  bool{1} _flat_915 { , NN } ; 
  bool{1} _flat_916 { , NN } ; 
  bool{1} BS1_0 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  BS1_0 = true; 
  _flat_916 = true; 
  _flat_915 = true; 
  _flat_914 = false; 
  _flat_913 = false; 
  BVL_0 = [ _flat_913, _flat_914, _flat_915, _flat_916 ]; 
  _flat_920 = true; 
  _flat_919 = false; 
  _flat_918 = true; 
  _flat_917 = false; 
  BVR_0 = [ _flat_917, _flat_918, _flat_919, _flat_920 ]; 
  _flat_922 = false; 
  _flat_921 = false; 
  A_69 = wrapper:UTDScalarB::rhoBBB( _flat_921, _flat_922) ; 
  BVS0_0 = A_69; 
  _flat_930 = false; 
  _flat_929 = true; 
  _flat_928 = false; 
  _flat_927 = [ _flat_928, _flat_929, _flat_930 ]; 
  _flat_926 = 4; 
  _flat_925 = 3; 
  _flat_924 = 2; 
  _flat_923 = [ _flat_924, _flat_925, _flat_926 ]; 
  A_71 = wrapper:UTDScalarB::rhoIBB( _flat_923, _flat_927) ; 
  BM234_0 = A_71; 
  _flat_937 = true; 
  _flat_936 = false; 
  _flat_935 = [ _flat_936, _flat_937 ]; 
  _flat_934 = 4; 
  _flat_933 = 3; 
  _flat_932 = 0; 
  _flat_931 = [ _flat_932, _flat_933, _flat_934 ]; 
  A_73 = wrapper:UTDScalarB::rhoIBB( _flat_931, _flat_935) ; 
  BM034_0 = A_73; 
  _flat_944 = true; 
  _flat_943 = false; 
  _flat_942 = [ _flat_943, _flat_944 ]; 
  _flat_941 = 4; 
  _flat_940 = 0; 
  _flat_939 = 3; 
  _flat_938 = [ _flat_939, _flat_940, _flat_941 ]; 
  A_75 = wrapper:UTDScalarB::rhoIBB( _flat_938, _flat_942) ; 
  BM304_0 = A_75; 
  _flat_951 = true; 
  _flat_950 = false; 
  _flat_949 = [ _flat_950, _flat_951 ]; 
  _flat_948 = 0; 
  _flat_947 = 3; 
  _flat_946 = 2; 
  _flat_945 = [ _flat_946, _flat_947, _flat_948 ]; 
  A_77 = wrapper:UTDScalarB::rhoIBB( _flat_945, _flat_949) ; 
  BM230_0 = A_77; 
  A_80 = wrapper:UTDScalarB::neBBB( BS0_0, BS0_0) ; 
  _flat_952 = false; 
  A_82 = wrapper:UTDScalarB::sameBBB( A_80, _flat_952) ; 
  r_0 = A_82; 
  A_85 = wrapper:UTDScalarB::neBBB( BS0_0, BS1_0) ; 
  _flat_953 = true; 
  A_87 = wrapper:UTDScalarB::sameBBB( A_85, _flat_953) ; 
  A_88 = wrapper:UTDScalarB::comaBBB( r_0, A_87) ; 
  r_1 = A_88; 
  A_91 = wrapper:UTDScalarB::neBBB( BS1_0, BS0_0) ; 
  _flat_954 = true; 
  A_93 = wrapper:UTDScalarB::sameBBB( A_91, _flat_954) ; 
  A_94 = wrapper:UTDScalarB::comaBBB( r_1, A_93) ; 
  r_2 = A_94; 
  A_97 = wrapper:UTDScalarB::neBBB( BS1_0, BS1_0) ; 
  _flat_955 = false; 
  A_99 = wrapper:UTDScalarB::sameBBB( A_97, _flat_955) ; 
  A_100 = wrapper:UTDScalarB::comaBBB( r_2, A_99) ; 
  r_3 = A_100; 
  _flat_965 = false; 
  _flat_964 = true; 
  _flat_963 = false; 
  _flat_962 = true; 
  _flat_961 = [ _flat_962, _flat_963, _flat_964, _flat_965 ]; 
  _flat_960 = false; 
  _flat_959 = true; 
  _flat_958 = false; 
  _flat_957 = true; 
  _flat_956 = [ _flat_957, _flat_958, _flat_959, _flat_960 ]; 
  A_102 = wrapper:UTDScalarB::comaBBB( _flat_956, _flat_961) ; 
  _flat_970 = true; 
  _flat_969 = false; 
  _flat_968 = true; 
  _flat_967 = false; 
  _flat_966 = [ _flat_967, _flat_968, _flat_969, _flat_970 ]; 
  A_103 = wrapper:UTDScalarB::comaBBB( _flat_966, A_102) ; 
  _flat_975 = true; 
  _flat_974 = false; 
  _flat_973 = true; 
  _flat_972 = false; 
  _flat_971 = [ _flat_972, _flat_973, _flat_974, _flat_975 ]; 
  A_104 = wrapper:UTDScalarB::comaBBB( _flat_971, A_103) ; 
  _flat_978 = 4; 
  _flat_977 = 4; 
  _flat_976 = [ _flat_977, _flat_978 ]; 
  A_105 = wrapper:UTDScalarB::rhoIBB( _flat_976, A_104) ; 
  A_106 = wrapper:UTDScalarB::jotdotneBBB( BVL_0, BVR_0) ; 
  A_115 = wrapper:UTDScalarB::sameBBB( A_106, A_105) ; 
  A_116 = wrapper:UTDScalarB::comaBBB( r_3, A_115) ; 
  r_4 = A_116; 
  A_119 = wrapper:UTDScalarB::neBBB( BM234_0, BS0_0) ; 
  A_121 = wrapper:UTDScalarB::sameBBB( A_119, BM234_0) ; 
  A_122 = wrapper:UTDScalarB::comaBBB( r_4, A_121) ; 
  r_5 = A_122; 
  A_124 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_126 = wrapper:UTDScalarB::neBBB( BM234_0, BS1_0) ; 
  A_128 = wrapper:UTDScalarB::sameBBB( A_126, A_124) ; 
  A_129 = wrapper:UTDScalarB::comaBBB( r_5, A_128) ; 
  r_6 = A_129; 
  A_131 = wrapper:UTDScalarB::rhoXBI( BM234_0) ; 
  _flat_979 = true; 
  A_132 = wrapper:UTDScalarB::rhoIBB( A_131, _flat_979) ; 
  A_133 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_135 = wrapper:UTDScalarB::neBBB( BM234_0, A_133) ; 
  A_137 = wrapper:UTDScalarB::sameBBB( A_135, A_132) ; 
  A_138 = wrapper:UTDScalarB::comaBBB( r_6, A_137) ; 
  r_7 = A_138; 
  A_141 = wrapper:UTDScalarB::neBBB( BM034_0, BS1_0) ; 
  A_143 = wrapper:UTDScalarB::sameBBB( A_141, BM034_0) ; 
  A_144 = wrapper:UTDScalarB::comaBBB( r_7, A_143) ; 
  r_8 = A_144; 
  A_147 = wrapper:UTDScalarB::neBBB( BM034_0, BM034_0) ; 
  A_149 = wrapper:UTDScalarB::sameBBB( A_147, BM034_0) ; 
  A_150 = wrapper:UTDScalarB::comaBBB( r_8, A_149) ; 
  r_9 = A_150; 
  A_153 = wrapper:UTDScalarB::neBBB( BM304_0, BS1_0) ; 
  A_155 = wrapper:UTDScalarB::sameBBB( A_153, BM304_0) ; 
  A_156 = wrapper:UTDScalarB::comaBBB( r_9, A_155) ; 
  r_10 = A_156; 
  A_159 = wrapper:UTDScalarB::neBBB( BM304_0, BM304_0) ; 
  A_161 = wrapper:UTDScalarB::sameBBB( A_159, BM304_0) ; 
  A_162 = wrapper:UTDScalarB::comaBBB( r_10, A_161) ; 
  r_11 = A_162; 
  A_165 = wrapper:UTDScalarB::neBBB( BM230_0, BS1_0) ; 
  A_167 = wrapper:UTDScalarB::sameBBB( A_165, BM230_0) ; 
  A_168 = wrapper:UTDScalarB::comaBBB( r_11, A_167) ; 
  r_12 = A_168; 
  A_171 = wrapper:UTDScalarB::neBBB( BM230_0, BM230_0) ; 
  A_173 = wrapper:UTDScalarB::sameBBB( A_171, BM230_0) ; 
  A_174 = wrapper:UTDScalarB::comaBBB( r_12, A_173) ; 
  r_13 = A_174; 
  r_13__SSA0_1 = _type_conv_( bool[.], r_13); 
  return( r_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::NORXXB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::NORXXB()
/*
 *  NORXXB ::  ---
 */
{ 
  bool[14] r_13__SSA0_1 { , NN } ; 
  bool[14] r_13 { , NN } ; 
  bool[14] A_180 { , NN } ; 
  bool A_179 { , NN } ; 
  bool[.,.,.] A_177 { , NN } ; 
  bool[.,.,.] A_176 { , NN } ; 
  bool[13] r_12 { , NN } ; 
  bool[13] A_174 { , NN } ; 
  bool A_173 { , NN } ; 
  bool[.,.,.] A_171 { , NN } ; 
  bool[.,.,.] A_170 { , NN } ; 
  bool[.,.,.] A_169 { , NN } ; 
  bool{1} _flat_1054 { , NN } ; 
  int[3] A_168 { , NN } ; 
  bool[12] r_11 { , NN } ; 
  bool[12] A_166 { , NN } ; 
  bool A_165 { , NN } ; 
  bool[.,.,.] A_163 { , NN } ; 
  bool[.,.,.] A_162 { , NN } ; 
  bool[11] r_10 { , NN } ; 
  bool[11] A_160 { , NN } ; 
  bool A_159 { , NN } ; 
  bool[.,.,.] A_157 { , NN } ; 
  bool[.,.,.] A_156 { , NN } ; 
  bool[.,.,.] A_155 { , NN } ; 
  bool{1} _flat_1053 { , NN } ; 
  int[3] A_154 { , NN } ; 
  bool[10] r_9 { , NN } ; 
  bool[10] A_152 { , NN } ; 
  bool A_151 { , NN } ; 
  bool[.,.,.] A_149 { , NN } ; 
  bool[.,.,.] A_148 { , NN } ; 
  bool[9] r_8 { , NN } ; 
  bool[9] A_146 { , NN } ; 
  bool A_145 { , NN } ; 
  bool[.,.,.] A_143 { , NN } ; 
  bool[.,.,.] A_142 { , NN } ; 
  bool[.,.,.] A_141 { , NN } ; 
  bool{1} _flat_1052 { , NN } ; 
  int[3] A_140 { , NN } ; 
  bool[8] r_7 { , NN } ; 
  bool[8] A_138 { , NN } ; 
  bool A_137 { , NN } ; 
  bool[.,.,.] A_135 { , NN } ; 
  bool[.,.,.] A_134 { , NN } ; 
  bool[.,.,.] A_133 { , NN } ; 
  bool[.,.,.] A_132 { , NN } ; 
  int[3]{2,3...} _flat_1047 { , NN } ; 
  int{2} _flat_1048 { , NN } ; 
  int{3} _flat_1049 { , NN } ; 
  int{4} _flat_1050 { , NN } ; 
  bool{1} _flat_1051 { , NN } ; 
  bool[7] r_6 { , NN } ; 
  bool[7] A_130 { , NN } ; 
  bool A_129 { , NN } ; 
  bool[.,.,.] A_127 { , NN } ; 
  bool[.,.,.] A_126 { , NN } ; 
  bool[.,.,.] A_125 { , NN } ; 
  bool{1} _flat_1046 { , NN } ; 
  int[3] A_124 { , NN } ; 
  bool[6] r_5 { , NN } ; 
  bool[6] A_122 { , NN } ; 
  bool A_121 { , NN } ; 
  bool[.,.,.] A_119 { , NN } ; 
  bool[.,.,.] A_118 { , NN } ; 
  bool[5] r_4 { , NN } ; 
  bool[5] A_116 { , NN } ; 
  bool A_115 { , NN } ; 
  bool[4,4] A_107 { , NN } ; 
  bool[.,.] A_106 { , NN } ; 
  bool[.,.] A_105 { , NN } ; 
  int[2]{4,4} _flat_1043 { , NN } ; 
  int{4} _flat_1044 { , NN } ; 
  int{4} _flat_1045 { , NN } ; 
  bool[16] A_104 { , NN } ; 
  bool[4]{0,1...} _flat_1038 { , NN } ; 
  bool{0} _flat_1039 { , NN } ; 
  bool{1} _flat_1040 { , NN } ; 
  bool{0} _flat_1041 { , NN } ; 
  bool{1} _flat_1042 { , NN } ; 
  bool[12] A_103 { , NN } ; 
  bool[4]{0,1...} _flat_1033 { , NN } ; 
  bool{0} _flat_1034 { , NN } ; 
  bool{1} _flat_1035 { , NN } ; 
  bool{0} _flat_1036 { , NN } ; 
  bool{1} _flat_1037 { , NN } ; 
  bool[8] A_102 { , NN } ; 
  bool[4]{1,1...} _flat_1023 { , NN } ; 
  bool{1} _flat_1024 { , NN } ; 
  bool{1} _flat_1025 { , NN } ; 
  bool{1} _flat_1026 { , NN } ; 
  bool{1} _flat_1027 { , NN } ; 
  bool[4]{1,1...} _flat_1028 { , NN } ; 
  bool{1} _flat_1029 { , NN } ; 
  bool{1} _flat_1030 { , NN } ; 
  bool{1} _flat_1031 { , NN } ; 
  bool{1} _flat_1032 { , NN } ; 
  bool[4] r_3 { , NN } ; 
  bool[4] A_100 { , NN } ; 
  bool A_99 { , NN } ; 
  bool A_97 { , NN } ; 
  bool A_96 { , NN } ; 
  bool{1} _flat_1022 { , NN } ; 
  bool[3] r_2 { , NN } ; 
  bool[3] A_94 { , NN } ; 
  bool A_93 { , NN } ; 
  bool A_91 { , NN } ; 
  bool A_90 { , NN } ; 
  bool{1} _flat_1021 { , NN } ; 
  bool[2] r_1 { , NN } ; 
  bool[2] A_88 { , NN } ; 
  bool A_87 { , NN } ; 
  bool A_85 { , NN } ; 
  bool A_84 { , NN } ; 
  bool{1} _flat_1020 { , NN } ; 
  bool r_0 { , NN } ; 
  bool A_82 { , NN } ; 
  bool A_80 { , NN } ; 
  bool A_79 { , NN } ; 
  bool{0} _flat_1019 { , NN } ; 
  bool[.,.,.] BM230_0 { , NN } ; 
  bool[.,.,.] A_77 { , NN } ; 
  int[3]{2,3...} _flat_1012 { , NN } ; 
  int{2} _flat_1013 { , NN } ; 
  int{3} _flat_1014 { , NN } ; 
  int{0} _flat_1015 { , NN } ; 
  bool[2]{0,1} _flat_1016 { , NN } ; 
  bool{0} _flat_1017 { , NN } ; 
  bool{1} _flat_1018 { , NN } ; 
  bool[.,.,.] BM304_0 { , NN } ; 
  bool[.,.,.] A_75 { , NN } ; 
  int[3]{3,0...} _flat_1005 { , NN } ; 
  int{3} _flat_1006 { , NN } ; 
  int{0} _flat_1007 { , NN } ; 
  int{4} _flat_1008 { , NN } ; 
  bool[2]{0,1} _flat_1009 { , NN } ; 
  bool{0} _flat_1010 { , NN } ; 
  bool{1} _flat_1011 { , NN } ; 
  bool[.,.,.] BM034_0 { , NN } ; 
  bool[.,.,.] A_73 { , NN } ; 
  int[3]{0,3...} _flat_998 { , NN } ; 
  int{0} _flat_999 { , NN } ; 
  int{3} _flat_1000 { , NN } ; 
  int{4} _flat_1001 { , NN } ; 
  bool[2]{0,1} _flat_1002 { , NN } ; 
  bool{0} _flat_1003 { , NN } ; 
  bool{1} _flat_1004 { , NN } ; 
  bool[.,.,.] BM234_0 { , NN } ; 
  bool[.,.,.] A_71 { , NN } ; 
  int[3]{2,3...} _flat_990 { , NN } ; 
  int{2} _flat_991 { , NN } ; 
  int{3} _flat_992 { , NN } ; 
  int{4} _flat_993 { , NN } ; 
  bool[3]{0,1...} _flat_994 { , NN } ; 
  bool{0} _flat_995 { , NN } ; 
  bool{1} _flat_996 { , NN } ; 
  bool{0} _flat_997 { , NN } ; 
  bool[.] BVS0_0 { , NN } ; 
  bool[.] A_69 { , NN } ; 
  bool{0} _flat_988 { , NN } ; 
  bool{0} _flat_989 { , NN } ; 
  bool[4]{0,1...} BVR_0 { , NN } ; 
  bool{0} _flat_984 { , NN } ; 
  bool{1} _flat_985 { , NN } ; 
  bool{0} _flat_986 { , NN } ; 
  bool{1} _flat_987 { , NN } ; 
  bool[4]{0,0...} BVL_0 { , NN } ; 
  bool{0} _flat_980 { , NN } ; 
  bool{0} _flat_981 { , NN } ; 
  bool{1} _flat_982 { , NN } ; 
  bool{1} _flat_983 { , NN } ; 
  bool{1} BS1_0 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  BS1_0 = true; 
  _flat_983 = true; 
  _flat_982 = true; 
  _flat_981 = false; 
  _flat_980 = false; 
  BVL_0 = [ _flat_980, _flat_981, _flat_982, _flat_983 ]; 
  _flat_987 = true; 
  _flat_986 = false; 
  _flat_985 = true; 
  _flat_984 = false; 
  BVR_0 = [ _flat_984, _flat_985, _flat_986, _flat_987 ]; 
  _flat_989 = false; 
  _flat_988 = false; 
  A_69 = wrapper:UTDScalarB::rhoBBB( _flat_988, _flat_989) ; 
  BVS0_0 = A_69; 
  _flat_997 = false; 
  _flat_996 = true; 
  _flat_995 = false; 
  _flat_994 = [ _flat_995, _flat_996, _flat_997 ]; 
  _flat_993 = 4; 
  _flat_992 = 3; 
  _flat_991 = 2; 
  _flat_990 = [ _flat_991, _flat_992, _flat_993 ]; 
  A_71 = wrapper:UTDScalarB::rhoIBB( _flat_990, _flat_994) ; 
  BM234_0 = A_71; 
  _flat_1004 = true; 
  _flat_1003 = false; 
  _flat_1002 = [ _flat_1003, _flat_1004 ]; 
  _flat_1001 = 4; 
  _flat_1000 = 3; 
  _flat_999 = 0; 
  _flat_998 = [ _flat_999, _flat_1000, _flat_1001 ]; 
  A_73 = wrapper:UTDScalarB::rhoIBB( _flat_998, _flat_1002) ; 
  BM034_0 = A_73; 
  _flat_1011 = true; 
  _flat_1010 = false; 
  _flat_1009 = [ _flat_1010, _flat_1011 ]; 
  _flat_1008 = 4; 
  _flat_1007 = 0; 
  _flat_1006 = 3; 
  _flat_1005 = [ _flat_1006, _flat_1007, _flat_1008 ]; 
  A_75 = wrapper:UTDScalarB::rhoIBB( _flat_1005, _flat_1009) ; 
  BM304_0 = A_75; 
  _flat_1018 = true; 
  _flat_1017 = false; 
  _flat_1016 = [ _flat_1017, _flat_1018 ]; 
  _flat_1015 = 0; 
  _flat_1014 = 3; 
  _flat_1013 = 2; 
  _flat_1012 = [ _flat_1013, _flat_1014, _flat_1015 ]; 
  A_77 = wrapper:UTDScalarB::rhoIBB( _flat_1012, _flat_1016) ; 
  BM230_0 = A_77; 
  _flat_1019 = false; 
  A_79 = wrapper:UTDScalarB::notXBB( _flat_1019) ; 
  A_80 = wrapper:UTDScalarB::norBBB( BS0_0, BS0_0) ; 
  A_82 = wrapper:UTDScalarB::sameBBB( A_80, A_79) ; 
  r_0 = A_82; 
  _flat_1020 = true; 
  A_84 = wrapper:UTDScalarB::notXBB( _flat_1020) ; 
  A_85 = wrapper:UTDScalarB::norBBB( BS0_0, BS1_0) ; 
  A_87 = wrapper:UTDScalarB::sameBBB( A_85, A_84) ; 
  A_88 = wrapper:UTDScalarB::comaBBB( r_0, A_87) ; 
  r_1 = A_88; 
  _flat_1021 = true; 
  A_90 = wrapper:UTDScalarB::notXBB( _flat_1021) ; 
  A_91 = wrapper:UTDScalarB::norBBB( BS1_0, BS0_0) ; 
  A_93 = wrapper:UTDScalarB::sameBBB( A_91, A_90) ; 
  A_94 = wrapper:UTDScalarB::comaBBB( r_1, A_93) ; 
  r_2 = A_94; 
  _flat_1022 = true; 
  A_96 = wrapper:UTDScalarB::notXBB( _flat_1022) ; 
  A_97 = wrapper:UTDScalarB::norBBB( BS1_0, BS1_0) ; 
  A_99 = wrapper:UTDScalarB::sameBBB( A_97, A_96) ; 
  A_100 = wrapper:UTDScalarB::comaBBB( r_2, A_99) ; 
  r_3 = A_100; 
  _flat_1032 = true; 
  _flat_1031 = true; 
  _flat_1030 = true; 
  _flat_1029 = true; 
  _flat_1028 = [ _flat_1029, _flat_1030, _flat_1031, _flat_1032 ]; 
  _flat_1027 = true; 
  _flat_1026 = true; 
  _flat_1025 = true; 
  _flat_1024 = true; 
  _flat_1023 = [ _flat_1024, _flat_1025, _flat_1026, _flat_1027 ]; 
  A_102 = wrapper:UTDScalarB::comaBBB( _flat_1023, _flat_1028) ; 
  _flat_1037 = true; 
  _flat_1036 = false; 
  _flat_1035 = true; 
  _flat_1034 = false; 
  _flat_1033 = [ _flat_1034, _flat_1035, _flat_1036, _flat_1037 ]; 
  A_103 = wrapper:UTDScalarB::comaBBB( _flat_1033, A_102) ; 
  _flat_1042 = true; 
  _flat_1041 = false; 
  _flat_1040 = true; 
  _flat_1039 = false; 
  _flat_1038 = [ _flat_1039, _flat_1040, _flat_1041, _flat_1042 ]; 
  A_104 = wrapper:UTDScalarB::comaBBB( _flat_1038, A_103) ; 
  _flat_1045 = 4; 
  _flat_1044 = 4; 
  _flat_1043 = [ _flat_1044, _flat_1045 ]; 
  A_105 = wrapper:UTDScalarB::rhoIBB( _flat_1043, A_104) ; 
  A_106 = wrapper:UTDScalarB::notXBB( A_105) ; 
  A_107 = wrapper:UTDScalarB::jotdotnorBBB( BVL_0, BVR_0) ; 
  A_115 = wrapper:UTDScalarB::sameBBB( A_107, A_106) ; 
  A_116 = wrapper:UTDScalarB::comaBBB( r_3, A_115) ; 
  r_4 = A_116; 
  A_118 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_119 = wrapper:UTDScalarB::norBBB( BM234_0, BS0_0) ; 
  A_121 = wrapper:UTDScalarB::sameBBB( A_119, A_118) ; 
  A_122 = wrapper:UTDScalarB::comaBBB( r_4, A_121) ; 
  r_5 = A_122; 
  A_124 = wrapper:UTDScalarB::rhoXBI( BM234_0) ; 
  _flat_1046 = true; 
  A_125 = wrapper:UTDScalarB::rhoIBB( A_124, _flat_1046) ; 
  A_126 = wrapper:UTDScalarB::notXBB( A_125) ; 
  A_127 = wrapper:UTDScalarB::norBBB( BM234_0, BS1_0) ; 
  A_129 = wrapper:UTDScalarB::sameBBB( A_127, A_126) ; 
  A_130 = wrapper:UTDScalarB::comaBBB( r_5, A_129) ; 
  r_6 = A_130; 
  _flat_1051 = true; 
  _flat_1050 = 4; 
  _flat_1049 = 3; 
  _flat_1048 = 2; 
  _flat_1047 = [ _flat_1048, _flat_1049, _flat_1050 ]; 
  A_132 = wrapper:UTDScalarB::rhoIBB( _flat_1047, _flat_1051) ; 
  A_133 = wrapper:UTDScalarB::notXBB( A_132) ; 
  A_134 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_135 = wrapper:UTDScalarB::norBBB( BM234_0, A_134) ; 
  A_137 = wrapper:UTDScalarB::sameBBB( A_135, A_133) ; 
  A_138 = wrapper:UTDScalarB::comaBBB( r_6, A_137) ; 
  r_7 = A_138; 
  A_140 = wrapper:UTDScalarB::rhoXBI( BM034_0) ; 
  _flat_1052 = true; 
  A_141 = wrapper:UTDScalarB::rhoIBB( A_140, _flat_1052) ; 
  A_142 = wrapper:UTDScalarB::notXBB( A_141) ; 
  A_143 = wrapper:UTDScalarB::norBBB( BM034_0, BS1_0) ; 
  A_145 = wrapper:UTDScalarB::sameBBB( A_143, A_142) ; 
  A_146 = wrapper:UTDScalarB::comaBBB( r_7, A_145) ; 
  r_8 = A_146; 
  A_148 = wrapper:UTDScalarB::notXBB( BM034_0) ; 
  A_149 = wrapper:UTDScalarB::norBBB( BM034_0, BM034_0) ; 
  A_151 = wrapper:UTDScalarB::sameBBB( A_149, A_148) ; 
  A_152 = wrapper:UTDScalarB::comaBBB( r_8, A_151) ; 
  r_9 = A_152; 
  A_154 = wrapper:UTDScalarB::rhoXBI( BM304_0) ; 
  _flat_1053 = true; 
  A_155 = wrapper:UTDScalarB::rhoIBB( A_154, _flat_1053) ; 
  A_156 = wrapper:UTDScalarB::notXBB( A_155) ; 
  A_157 = wrapper:UTDScalarB::norBBB( BM304_0, BS1_0) ; 
  A_159 = wrapper:UTDScalarB::sameBBB( A_157, A_156) ; 
  A_160 = wrapper:UTDScalarB::comaBBB( r_9, A_159) ; 
  r_10 = A_160; 
  A_162 = wrapper:UTDScalarB::notXBB( BM304_0) ; 
  A_163 = wrapper:UTDScalarB::norBBB( BM304_0, BM304_0) ; 
  A_165 = wrapper:UTDScalarB::sameBBB( A_163, A_162) ; 
  A_166 = wrapper:UTDScalarB::comaBBB( r_10, A_165) ; 
  r_11 = A_166; 
  A_168 = wrapper:UTDScalarB::rhoXBI( BM230_0) ; 
  _flat_1054 = true; 
  A_169 = wrapper:UTDScalarB::rhoIBB( A_168, _flat_1054) ; 
  A_170 = wrapper:UTDScalarB::notXBB( A_169) ; 
  A_171 = wrapper:UTDScalarB::norBBB( BM230_0, BS1_0) ; 
  A_173 = wrapper:UTDScalarB::sameBBB( A_171, A_170) ; 
  A_174 = wrapper:UTDScalarB::comaBBB( r_11, A_173) ; 
  r_12 = A_174; 
  A_176 = wrapper:UTDScalarB::notXBB( BM230_0) ; 
  A_177 = wrapper:UTDScalarB::norBBB( BM230_0, BM230_0) ; 
  A_179 = wrapper:UTDScalarB::sameBBB( A_177, A_176) ; 
  A_180 = wrapper:UTDScalarB::comaBBB( r_12, A_179) ; 
  r_13 = A_180; 
  r_13__SSA0_1 = _type_conv_( bool[.], r_13); 
  return( r_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::ORXXB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::ORXXB()
/*
 *  ORXXB ::  ---
 */
{ 
  bool[14] r_13__SSA0_1 { , NN } ; 
  bool[14] r_13 { , NN } ; 
  bool[14] A_166 { , NN } ; 
  bool A_165 { , NN } ; 
  bool[.,.,.] A_163 { , NN } ; 
  bool[13] r_12 { , NN } ; 
  bool[13] A_161 { , NN } ; 
  bool A_160 { , NN } ; 
  bool[.,.,.] A_158 { , NN } ; 
  bool[.,.,.] A_157 { , NN } ; 
  bool{1} _flat_1129 { , NN } ; 
  int[3] A_156 { , NN } ; 
  bool[12] r_11 { , NN } ; 
  bool[12] A_154 { , NN } ; 
  bool A_153 { , NN } ; 
  bool[.,.,.] A_151 { , NN } ; 
  bool[11] r_10 { , NN } ; 
  bool[11] A_149 { , NN } ; 
  bool A_148 { , NN } ; 
  bool[.,.,.] A_146 { , NN } ; 
  bool[.,.,.] A_145 { , NN } ; 
  bool{1} _flat_1128 { , NN } ; 
  int[3] A_144 { , NN } ; 
  bool[10] r_9 { , NN } ; 
  bool[10] A_142 { , NN } ; 
  bool A_141 { , NN } ; 
  bool[.,.,.] A_139 { , NN } ; 
  bool[9] r_8 { , NN } ; 
  bool[9] A_137 { , NN } ; 
  bool A_136 { , NN } ; 
  bool[.,.,.] A_134 { , NN } ; 
  bool[.,.,.] A_133 { , NN } ; 
  bool{1} _flat_1127 { , NN } ; 
  int[3] A_132 { , NN } ; 
  bool[8] r_7 { , NN } ; 
  bool[8] A_130 { , NN } ; 
  bool A_129 { , NN } ; 
  bool[.,.,.] A_127 { , NN } ; 
  bool[.,.,.] A_126 { , NN } ; 
  bool[.,.,.] A_125 { , NN } ; 
  int[3]{2,3...} _flat_1122 { , NN } ; 
  int{2} _flat_1123 { , NN } ; 
  int{3} _flat_1124 { , NN } ; 
  int{4} _flat_1125 { , NN } ; 
  bool{1} _flat_1126 { , NN } ; 
  bool[7] r_6 { , NN } ; 
  bool[7] A_123 { , NN } ; 
  bool A_122 { , NN } ; 
  bool[.,.,.] A_120 { , NN } ; 
  bool[.,.,.] A_119 { , NN } ; 
  bool{1} _flat_1121 { , NN } ; 
  int[3] A_118 { , NN } ; 
  bool[6] r_5 { , NN } ; 
  bool[6] A_116 { , NN } ; 
  bool A_115 { , NN } ; 
  bool[.,.,.] A_113 { , NN } ; 
  bool[5] r_4 { , NN } ; 
  bool[5] A_111 { , NN } ; 
  bool A_110 { , NN } ; 
  bool[4,4] A_102 { , NN } ; 
  bool[.,.] A_101 { , NN } ; 
  int[2]{4,4} _flat_1118 { , NN } ; 
  int{4} _flat_1119 { , NN } ; 
  int{4} _flat_1120 { , NN } ; 
  bool[16] A_100 { , NN } ; 
  bool[4]{0,1...} _flat_1113 { , NN } ; 
  bool{0} _flat_1114 { , NN } ; 
  bool{1} _flat_1115 { , NN } ; 
  bool{0} _flat_1116 { , NN } ; 
  bool{1} _flat_1117 { , NN } ; 
  bool[12] A_99 { , NN } ; 
  bool[4]{0,1...} _flat_1108 { , NN } ; 
  bool{0} _flat_1109 { , NN } ; 
  bool{1} _flat_1110 { , NN } ; 
  bool{0} _flat_1111 { , NN } ; 
  bool{1} _flat_1112 { , NN } ; 
  bool[8] A_98 { , NN } ; 
  bool[4]{1,1...} _flat_1098 { , NN } ; 
  bool{1} _flat_1099 { , NN } ; 
  bool{1} _flat_1100 { , NN } ; 
  bool{1} _flat_1101 { , NN } ; 
  bool{1} _flat_1102 { , NN } ; 
  bool[4]{1,1...} _flat_1103 { , NN } ; 
  bool{1} _flat_1104 { , NN } ; 
  bool{1} _flat_1105 { , NN } ; 
  bool{1} _flat_1106 { , NN } ; 
  bool{1} _flat_1107 { , NN } ; 
  bool[4] r_3 { , NN } ; 
  bool[4] A_96 { , NN } ; 
  bool A_95 { , NN } ; 
  bool{1} _flat_1097 { , NN } ; 
  bool A_93 { , NN } ; 
  bool[3] r_2 { , NN } ; 
  bool[3] A_91 { , NN } ; 
  bool A_90 { , NN } ; 
  bool{1} _flat_1096 { , NN } ; 
  bool A_88 { , NN } ; 
  bool[2] r_1 { , NN } ; 
  bool[2] A_86 { , NN } ; 
  bool A_85 { , NN } ; 
  bool{1} _flat_1095 { , NN } ; 
  bool A_83 { , NN } ; 
  bool r_0 { , NN } ; 
  bool A_81 { , NN } ; 
  bool{0} _flat_1094 { , NN } ; 
  bool A_79 { , NN } ; 
  bool[.,.,.] BM230_0 { , NN } ; 
  bool[.,.,.] A_77 { , NN } ; 
  int[3]{2,3...} _flat_1087 { , NN } ; 
  int{2} _flat_1088 { , NN } ; 
  int{3} _flat_1089 { , NN } ; 
  int{0} _flat_1090 { , NN } ; 
  bool[2]{0,1} _flat_1091 { , NN } ; 
  bool{0} _flat_1092 { , NN } ; 
  bool{1} _flat_1093 { , NN } ; 
  bool[.,.,.] BM304_0 { , NN } ; 
  bool[.,.,.] A_75 { , NN } ; 
  int[3]{3,0...} _flat_1080 { , NN } ; 
  int{3} _flat_1081 { , NN } ; 
  int{0} _flat_1082 { , NN } ; 
  int{4} _flat_1083 { , NN } ; 
  bool[2]{0,1} _flat_1084 { , NN } ; 
  bool{0} _flat_1085 { , NN } ; 
  bool{1} _flat_1086 { , NN } ; 
  bool[.,.,.] BM034_0 { , NN } ; 
  bool[.,.,.] A_73 { , NN } ; 
  int[3]{0,3...} _flat_1073 { , NN } ; 
  int{0} _flat_1074 { , NN } ; 
  int{3} _flat_1075 { , NN } ; 
  int{4} _flat_1076 { , NN } ; 
  bool[2]{0,1} _flat_1077 { , NN } ; 
  bool{0} _flat_1078 { , NN } ; 
  bool{1} _flat_1079 { , NN } ; 
  bool[.,.,.] BM234_0 { , NN } ; 
  bool[.,.,.] A_71 { , NN } ; 
  int[3]{2,3...} _flat_1065 { , NN } ; 
  int{2} _flat_1066 { , NN } ; 
  int{3} _flat_1067 { , NN } ; 
  int{4} _flat_1068 { , NN } ; 
  bool[3]{0,1...} _flat_1069 { , NN } ; 
  bool{0} _flat_1070 { , NN } ; 
  bool{1} _flat_1071 { , NN } ; 
  bool{0} _flat_1072 { , NN } ; 
  bool[.] BVS0_0 { , NN } ; 
  bool[.] A_69 { , NN } ; 
  bool{0} _flat_1063 { , NN } ; 
  bool{0} _flat_1064 { , NN } ; 
  bool[4]{0,1...} BVR_0 { , NN } ; 
  bool{0} _flat_1059 { , NN } ; 
  bool{1} _flat_1060 { , NN } ; 
  bool{0} _flat_1061 { , NN } ; 
  bool{1} _flat_1062 { , NN } ; 
  bool[4]{0,0...} BVL_0 { , NN } ; 
  bool{0} _flat_1055 { , NN } ; 
  bool{0} _flat_1056 { , NN } ; 
  bool{1} _flat_1057 { , NN } ; 
  bool{1} _flat_1058 { , NN } ; 
  bool{1} BS1_0 { , NN } ; 
  bool{0} BS0_0 { , NN } ; 

  BS0_0 = false; 
  BS1_0 = true; 
  _flat_1058 = true; 
  _flat_1057 = true; 
  _flat_1056 = false; 
  _flat_1055 = false; 
  BVL_0 = [ _flat_1055, _flat_1056, _flat_1057, _flat_1058 ]; 
  _flat_1062 = true; 
  _flat_1061 = false; 
  _flat_1060 = true; 
  _flat_1059 = false; 
  BVR_0 = [ _flat_1059, _flat_1060, _flat_1061, _flat_1062 ]; 
  _flat_1064 = false; 
  _flat_1063 = false; 
  A_69 = wrapper:UTDScalarB::rhoBBB( _flat_1063, _flat_1064) ; 
  BVS0_0 = A_69; 
  _flat_1072 = false; 
  _flat_1071 = true; 
  _flat_1070 = false; 
  _flat_1069 = [ _flat_1070, _flat_1071, _flat_1072 ]; 
  _flat_1068 = 4; 
  _flat_1067 = 3; 
  _flat_1066 = 2; 
  _flat_1065 = [ _flat_1066, _flat_1067, _flat_1068 ]; 
  A_71 = wrapper:UTDScalarB::rhoIBB( _flat_1065, _flat_1069) ; 
  BM234_0 = A_71; 
  _flat_1079 = true; 
  _flat_1078 = false; 
  _flat_1077 = [ _flat_1078, _flat_1079 ]; 
  _flat_1076 = 4; 
  _flat_1075 = 3; 
  _flat_1074 = 0; 
  _flat_1073 = [ _flat_1074, _flat_1075, _flat_1076 ]; 
  A_73 = wrapper:UTDScalarB::rhoIBB( _flat_1073, _flat_1077) ; 
  BM034_0 = A_73; 
  _flat_1086 = true; 
  _flat_1085 = false; 
  _flat_1084 = [ _flat_1085, _flat_1086 ]; 
  _flat_1083 = 4; 
  _flat_1082 = 0; 
  _flat_1081 = 3; 
  _flat_1080 = [ _flat_1081, _flat_1082, _flat_1083 ]; 
  A_75 = wrapper:UTDScalarB::rhoIBB( _flat_1080, _flat_1084) ; 
  BM304_0 = A_75; 
  _flat_1093 = true; 
  _flat_1092 = false; 
  _flat_1091 = [ _flat_1092, _flat_1093 ]; 
  _flat_1090 = 0; 
  _flat_1089 = 3; 
  _flat_1088 = 2; 
  _flat_1087 = [ _flat_1088, _flat_1089, _flat_1090 ]; 
  A_77 = wrapper:UTDScalarB::rhoIBB( _flat_1087, _flat_1091) ; 
  BM230_0 = A_77; 
  A_79 = wrapper:UTDScalarB::orBBB( BS0_0, BS0_0) ; 
  _flat_1094 = false; 
  A_81 = wrapper:UTDScalarB::sameBBB( A_79, _flat_1094) ; 
  r_0 = A_81; 
  A_83 = wrapper:UTDScalarB::orBBB( BS0_0, BS1_0) ; 
  _flat_1095 = true; 
  A_85 = wrapper:UTDScalarB::sameBBB( A_83, _flat_1095) ; 
  A_86 = wrapper:UTDScalarB::comaBBB( r_0, A_85) ; 
  r_1 = A_86; 
  A_88 = wrapper:UTDScalarB::orBBB( BS1_0, BS0_0) ; 
  _flat_1096 = true; 
  A_90 = wrapper:UTDScalarB::sameBBB( A_88, _flat_1096) ; 
  A_91 = wrapper:UTDScalarB::comaBBB( r_1, A_90) ; 
  r_2 = A_91; 
  A_93 = wrapper:UTDScalarB::orBBB( BS1_0, BS1_0) ; 
  _flat_1097 = true; 
  A_95 = wrapper:UTDScalarB::sameBBB( A_93, _flat_1097) ; 
  A_96 = wrapper:UTDScalarB::comaBBB( r_2, A_95) ; 
  r_3 = A_96; 
  _flat_1107 = true; 
  _flat_1106 = true; 
  _flat_1105 = true; 
  _flat_1104 = true; 
  _flat_1103 = [ _flat_1104, _flat_1105, _flat_1106, _flat_1107 ]; 
  _flat_1102 = true; 
  _flat_1101 = true; 
  _flat_1100 = true; 
  _flat_1099 = true; 
  _flat_1098 = [ _flat_1099, _flat_1100, _flat_1101, _flat_1102 ]; 
  A_98 = wrapper:UTDScalarB::comaBBB( _flat_1098, _flat_1103) ; 
  _flat_1112 = true; 
  _flat_1111 = false; 
  _flat_1110 = true; 
  _flat_1109 = false; 
  _flat_1108 = [ _flat_1109, _flat_1110, _flat_1111, _flat_1112 ]; 
  A_99 = wrapper:UTDScalarB::comaBBB( _flat_1108, A_98) ; 
  _flat_1117 = true; 
  _flat_1116 = false; 
  _flat_1115 = true; 
  _flat_1114 = false; 
  _flat_1113 = [ _flat_1114, _flat_1115, _flat_1116, _flat_1117 ]; 
  A_100 = wrapper:UTDScalarB::comaBBB( _flat_1113, A_99) ; 
  _flat_1120 = 4; 
  _flat_1119 = 4; 
  _flat_1118 = [ _flat_1119, _flat_1120 ]; 
  A_101 = wrapper:UTDScalarB::rhoIBB( _flat_1118, A_100) ; 
  A_102 = wrapper:UTDScalarB::jotdotorBBB( BVL_0, BVR_0) ; 
  A_110 = wrapper:UTDScalarB::sameBBB( A_102, A_101) ; 
  A_111 = wrapper:UTDScalarB::comaBBB( r_3, A_110) ; 
  r_4 = A_111; 
  A_113 = wrapper:UTDScalarB::orBBB( BM234_0, BS0_0) ; 
  A_115 = wrapper:UTDScalarB::sameBBB( A_113, BM234_0) ; 
  A_116 = wrapper:UTDScalarB::comaBBB( r_4, A_115) ; 
  r_5 = A_116; 
  A_118 = wrapper:UTDScalarB::rhoXBI( BM234_0) ; 
  _flat_1121 = true; 
  A_119 = wrapper:UTDScalarB::rhoIBB( A_118, _flat_1121) ; 
  A_120 = wrapper:UTDScalarB::orBBB( BM234_0, BS1_0) ; 
  A_122 = wrapper:UTDScalarB::sameBBB( A_120, A_119) ; 
  A_123 = wrapper:UTDScalarB::comaBBB( r_5, A_122) ; 
  r_6 = A_123; 
  _flat_1126 = true; 
  _flat_1125 = 4; 
  _flat_1124 = 3; 
  _flat_1123 = 2; 
  _flat_1122 = [ _flat_1123, _flat_1124, _flat_1125 ]; 
  A_125 = wrapper:UTDScalarB::rhoIBB( _flat_1122, _flat_1126) ; 
  A_126 = wrapper:UTDScalarB::notXBB( BM234_0) ; 
  A_127 = wrapper:UTDScalarB::orBBB( BM234_0, A_126) ; 
  A_129 = wrapper:UTDScalarB::sameBBB( A_127, A_125) ; 
  A_130 = wrapper:UTDScalarB::comaBBB( r_6, A_129) ; 
  r_7 = A_130; 
  A_132 = wrapper:UTDScalarB::rhoXBI( BM034_0) ; 
  _flat_1127 = true; 
  A_133 = wrapper:UTDScalarB::rhoIBB( A_132, _flat_1127) ; 
  A_134 = wrapper:UTDScalarB::orBBB( BM034_0, BS1_0) ; 
  A_136 = wrapper:UTDScalarB::sameBBB( A_134, A_133) ; 
  A_137 = wrapper:UTDScalarB::comaBBB( r_7, A_136) ; 
  r_8 = A_137; 
  A_139 = wrapper:UTDScalarB::orBBB( BM034_0, BM034_0) ; 
  A_141 = wrapper:UTDScalarB::sameBBB( A_139, BM034_0) ; 
  A_142 = wrapper:UTDScalarB::comaBBB( r_8, A_141) ; 
  r_9 = A_142; 
  A_144 = wrapper:UTDScalarB::rhoXBI( BM304_0) ; 
  _flat_1128 = true; 
  A_145 = wrapper:UTDScalarB::rhoIBB( A_144, _flat_1128) ; 
  A_146 = wrapper:UTDScalarB::orBBB( BM304_0, BS1_0) ; 
  A_148 = wrapper:UTDScalarB::sameBBB( A_146, A_145) ; 
  A_149 = wrapper:UTDScalarB::comaBBB( r_9, A_148) ; 
  r_10 = A_149; 
  A_151 = wrapper:UTDScalarB::orBBB( BM304_0, BM304_0) ; 
  A_153 = wrapper:UTDScalarB::sameBBB( A_151, BM304_0) ; 
  A_154 = wrapper:UTDScalarB::comaBBB( r_10, A_153) ; 
  r_11 = A_154; 
  A_156 = wrapper:UTDScalarB::rhoXBI( BM230_0) ; 
  _flat_1129 = true; 
  A_157 = wrapper:UTDScalarB::rhoIBB( A_156, _flat_1129) ; 
  A_158 = wrapper:UTDScalarB::orBBB( BM230_0, BS1_0) ; 
  A_160 = wrapper:UTDScalarB::sameBBB( A_158, A_157) ; 
  A_161 = wrapper:UTDScalarB::comaBBB( r_11, A_160) ; 
  r_12 = A_161; 
  A_163 = wrapper:UTDScalarB::orBBB( BM230_0, BM230_0) ; 
  A_165 = wrapper:UTDScalarB::sameBBB( A_163, BM230_0) ; 
  A_166 = wrapper:UTDScalarB::comaBBB( r_12, A_165) ; 
  r_13 = A_166; 
  r_13__SSA0_1 = _type_conv_( bool[.], r_13); 
  return( r_13__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::UTDScalarB_mainXXI(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile *, int UTDScalarB::UTDScalarB_mainXXI( Terminal::Terminal *_rso_1143_TheTerminal { ,NN } , TermFile::TermFile *_rso_1142_stdout { ,NN } )
/*
 *  UTDScalarB_mainXXI ::  ---
 */
{ 
  int r_10__SSA0_1 { , NN } ; 
  TermFile::TermFile _rso_1142_stdout__SSA0_2 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_1143_TheTerminal__SSA0_2 { , NN } ;  /* declared: Terminal::Terminal */
  TermFile::TermFile _rso_1142_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_1143_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */
  int A_94 { , NN } ; 
  int r_10 { , NN } ; 
  int A_90 { , NN } ; 
  bool{1} _flat_1131 { , NN } ; 
  bool A_86 { , NN } ; 
  bool[.] A_85 { , NN } ; 
  bool[.] r_9 { , NN } ; 
  bool[.] A_81 { , NN } ; 
  bool[14] A_80 { , NN } ; 
  bool[126] r_8 { , NN } ; 
  bool[126] A_78 { , NN } ; 
  bool[14] A_77 { , NN } ; 
  bool[112] r_7 { , NN } ; 
  bool[112] A_75 { , NN } ; 
  bool[14] A_74 { , NN } ; 
  bool[98] r_6 { , NN } ; 
  bool[98] A_72 { , NN } ; 
  bool[14] A_71 { , NN } ; 
  bool[84] r_5 { , NN } ; 
  bool[84] A_69 { , NN } ; 
  bool[14] A_68 { , NN } ; 
  bool[70] r_4 { , NN } ; 
  bool[70] A_66 { , NN } ; 
  bool[14] A_65 { , NN } ; 
  bool[56] r_3 { , NN } ; 
  bool[56] A_63 { , NN } ; 
  bool[14] A_62 { , NN } ; 
  bool[42] r_2 { , NN } ; 
  bool[42] A_60 { , NN } ; 
  bool[14] A_59 { , NN } ; 
  bool[28] r_1 { , NN } ; 
  bool[28] A_57 { , NN } ; 
  bool[14] A_56 { , NN } ; 
  bool[14] r_0 { , NN } ; 
  bool[14] A_54 { , NN } ; 
  int{168...} QUADrl_0 { , NN } ; 
  int{80} QUADpw_0 { , NN } ; 
  int{10} QUADpp_0 { , NN } ; 
  double{0.0...} QUADct_0 { , NN } ; 
  int QUADio_0 { , NN } ; 
  bool{0} _flat_1130 { , NN } ; 

  _flat_1130 = false; 
  QUADio_0 = wrapper:UTDScalarB:Array::toi( _flat_1130) ; 
  QUADct_0 = 1.0000000000000000303737455634003709136034716842278413651001756079494953155517578125e-13; 
  QUADpp_0 = 10; 
  QUADpw_0 = 80; 
  QUADrl_0 = 16807; 
  A_54 = wrapper:UTDScalarB::ANDXXB() ; 
  r_0 = A_54; 
  A_56 = wrapper:UTDScalarB::ORXXB() ; 
  A_57 = wrapper:UTDScalarB::comaBBB( r_0, A_56) ; 
  r_1 = A_57; 
  A_59 = wrapper:UTDScalarB::NANDXXB() ; 
  A_60 = wrapper:UTDScalarB::comaBBB( r_1, A_59) ; 
  r_2 = A_60; 
  A_62 = wrapper:UTDScalarB::NORXXB() ; 
  A_63 = wrapper:UTDScalarB::comaBBB( r_2, A_62) ; 
  r_3 = A_63; 
  A_65 = wrapper:UTDScalarB::LTXXB() ; 
  A_66 = wrapper:UTDScalarB::comaBBB( r_3, A_65) ; 
  r_4 = A_66; 
  A_68 = wrapper:UTDScalarB::LEXXB() ; 
  A_69 = wrapper:UTDScalarB::comaBBB( r_4, A_68) ; 
  r_5 = A_69; 
  A_71 = wrapper:UTDScalarB::EQXXB() ; 
  A_72 = wrapper:UTDScalarB::comaBBB( r_5, A_71) ; 
  r_6 = A_72; 
  A_74 = wrapper:UTDScalarB::GEXXB() ; 
  A_75 = wrapper:UTDScalarB::comaBBB( r_6, A_74) ; 
  r_7 = A_75; 
  A_77 = wrapper:UTDScalarB::GTXXB() ; 
  A_78 = wrapper:UTDScalarB::comaBBB( r_7, A_77) ; 
  r_8 = A_78; 
  A_80 = wrapper:UTDScalarB::NEXXB() ; 
  A_81 = wrapper:UTDScalarB::comaBBB( r_8, A_80) ; 
  r_9 = A_81; 
  _rso_1143_TheTerminal__SSA0_1, _rso_1142_stdout__SSA0_1, A_85 = wrapper:UTDScalarB::quadXBB( _rso_1143_TheTerminal, _rso_1142_stdout, r_9, QUADpp_0, QUADpw_0) ; 
  A_86 = wrapper:UTDScalarB::andslXBBQUICKSTOP( r_9) ; 
  _flat_1131 = true; 
  A_90 = wrapper:UTDScalarB::barBBI( _flat_1131, A_86) ; 
  r_10 = A_90; 
  _rso_1143_TheTerminal__SSA0_2, _rso_1142_stdout__SSA0_2, A_94 = wrapper:UTDScalarB::quadXII( _rso_1143_TheTerminal__SSA0_1, _rso_1142_stdout__SSA0_1, A_90, QUADpp_0, QUADpw_0) ; 
  r_10__SSA0_1 = _type_conv_( int, r_10); 
  return( _rso_1143_TheTerminal__SSA0_2, _rso_1142_stdout__SSA0_2, r_10__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::!(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::!( bool[+] A { ,NN } )
/*
 *  ! ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1300 { , NN } ; 
  bool _flat_1301 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1296 { , NN } ; 
  bool{0} _flat_1297 { , NN } ; 
  int[.] _flat_1298 { , NN } ; 
  int{0} _flat_1299 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1299 = 0; 
  _flat_1298 = _mul_SxV_( _flat_1299, shp); 
  _flat_1297 = wrapper:ArrayArith::zero( A) ; 
  _flat_1296 = _not_S_( _flat_1297); 
  res = with {
        /* Partn */
        (_flat_1298 <= iv < shp)
        { 
          _flat_1301 = _sel_VxA_( iv, A); 
          _flat_1300 = _not_S_( _flat_1301); 
        } : _flat_1300 ; 
         } :
      genarray( shp, _flat_1296); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::!(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::!( bool A { ,NN } )
/*
 *  ! ::  ---
 */
{ 
  bool _flat_100__SSA0_1 { , NN } ; 
  bool _flat_100 { , NN } ; 

  _flat_100 = _not_S_( A); 
  _flat_100__SSA0_1 = _type_conv_( bool, _flat_100); 
  return( _flat_100__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::to_bool(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::to_bool( int[+] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1334 { , NN } ; 
  int _flat_1335 { , NN } ; 
  int[.] iv { , NN } ; 
  bool _flat_1330 { , NN } ; 
  int{0} _flat_1331 { , NN } ; 
  int[.] _flat_1332 { , NN } ; 
  int{0} _flat_1333 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1333 = 0; 
  _flat_1332 = _mul_SxV_( _flat_1333, shp); 
  _flat_1331 = wrapper:ArrayArith::zero( A) ; 
  _flat_1330 = wrapper:ArrayArith::to_bool( _flat_1331) ; 
  res = with {
        /* Partn */
        (_flat_1332 <= iv < shp)
        { 
          _flat_1335 = _sel_VxA_( iv, A); 
          _flat_1334 = wrapper:ArrayArith::to_bool( _flat_1335) ; 
        } : _flat_1334 ; 
         } :
      genarray( shp, _flat_1330); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * Bool::to_bool(...) [ body ]
 ****************************************************************************/
inline
bool Bool::to_bool( int i { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_8 { , NN } ; 
  int{1} _flat_9 { , NN } ; 

  _flat_9 = 1; 
  _flat_8 = _eq_SxS_( _flat_9, i); 
  res = Bool::to_bool__Cond_6( _flat_8, i) ; 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::to_bool(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayArith::to_bool( bool[*] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * Bool::to_bool(...) [ body ]
 ****************************************************************************/
inline
bool Bool::to_bool( bool i { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  bool i__SSA0_1 { , NN } ;  /* declared: bool */

  i__SSA0_1 = _type_conv_( bool, i); 
  return( i__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::shape(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayBasics::shape( int[*] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_6__SSA0_1 { , NN } ; 
  int[.] _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::shape(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayBasics::shape( bool[*] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_11__SSA0_1 { , NN } ; 
  int[.] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::sel( int[.] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[.] _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1] _flat_21 { , NN } ; 
  int[.] _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::sel( int idx { ,NN } , int[*] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int[*] _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::sel( int[.] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1] _flat_66 { , NN } ; 
  int[.] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::sel( int idx { ,NN } , bool[*] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] _flat_82 { , NN } ; 
  int[1] _flat_83 { , NN } ; 

  _flat_83 = [ idx ]; 
  _flat_82 = wrapper:ArrayBasics::sel( _flat_83, A) ; 
  return( _flat_82); 
}



/****************************************************************************
 * ArrayArith::&(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::&( bool[+] A { ,NN } , bool[+] B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1285 { , NN } ; 
  bool _flat_1286 { , NN } ; 
  bool _flat_1287 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1280 { , NN } ; 
  bool{1} _flat_1281 { , NN } ; 
  bool{1} _flat_1282 { , NN } ; 
  int[.] _flat_1283 { , NN } ; 
  int{0} _flat_1284 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_1284 = 0; 
  _flat_1283 = _mul_SxV_( _flat_1284, shp); 
  _flat_1282 = wrapper:ArrayArith::one( B) ; 
  _flat_1281 = wrapper:ArrayArith::one( A) ; 
  _flat_1280 = _and_SxS_( _flat_1281, _flat_1282); 
  res = with {
        /* Partn */
        (_flat_1283 <= iv < shp)
        { 
          _flat_1287 = _sel_VxA_( iv, B); 
          _flat_1286 = _sel_VxA_( iv, A); 
          _flat_1285 = _and_SxS_( _flat_1286, _flat_1287); 
        } : _flat_1285 ; 
         } :
      genarray( shp, _flat_1280); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::&(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::&( bool[+] A { ,NN } , bool B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1321 { , NN } ; 
  bool _flat_1322 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1316 { , NN } ; 
  bool{1} _flat_1317 { , NN } ; 
  bool{1} _flat_1318 { , NN } ; 
  int[.] _flat_1319 { , NN } ; 
  int{0} _flat_1320 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1320 = 0; 
  _flat_1319 = _mul_SxV_( _flat_1320, shp); 
  _flat_1318 = wrapper:ArrayArith::one( B) ; 
  _flat_1317 = wrapper:ArrayArith::one( A) ; 
  _flat_1316 = _and_SxS_( _flat_1317, _flat_1318); 
  res = with {
        /* Partn */
        (_flat_1319 <= iv < shp)
        { 
          _flat_1322 = _sel_VxA_( iv, A); 
          _flat_1321 = _and_SxS_( _flat_1322, B); 
        } : _flat_1321 ; 
         } :
      genarray( shp, _flat_1316); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::&(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::&( bool A { ,NN } , bool[+] B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1307 { , NN } ; 
  bool _flat_1308 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1302 { , NN } ; 
  bool{1} _flat_1303 { , NN } ; 
  bool{1} _flat_1304 { , NN } ; 
  int[.] _flat_1305 { , NN } ; 
  int{0} _flat_1306 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_1306 = 0; 
  _flat_1305 = _mul_SxV_( _flat_1306, shp); 
  _flat_1304 = wrapper:ArrayArith::one( B) ; 
  _flat_1303 = wrapper:ArrayArith::one( A) ; 
  _flat_1302 = _and_SxS_( _flat_1303, _flat_1304); 
  res = with {
        /* Partn */
        (_flat_1305 <= iv < shp)
        { 
          _flat_1308 = _sel_VxA_( iv, B); 
          _flat_1307 = _and_SxS_( A, _flat_1308); 
        } : _flat_1307 ; 
         } :
      genarray( shp, _flat_1302); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::&(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::&( bool A { ,NN } , bool B { ,NN } )
/*
 *  & ::  ---
 */
{ 
  bool _flat_98__SSA0_1 { , NN } ; 
  bool _flat_98 { , NN } ; 

  _flat_98 = _and_SxS_( A, B); 
  _flat_98__SSA0_1 = _type_conv_( bool, _flat_98); 
  return( _flat_98__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::==(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::==( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_625 { , NN } ; 
  int _flat_626 { , NN } ; 
  int _flat_627 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_620 { , NN } ; 
  int{1} _flat_621 { , NN } ; 
  int{1} _flat_622 { , NN } ; 
  int[.] _flat_623 { , NN } ; 
  int{0} _flat_624 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_624 = 0; 
  _flat_623 = _mul_SxV_( _flat_624, shp); 
  _flat_622 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_621 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_620 = _eq_SxS_( _flat_621, _flat_622); 
  res = with {
        /* Partn */
        (_flat_623 <= iv < shp)
        { 
          _flat_627 = _sel_VxA_( iv, B); 
          _flat_626 = _sel_VxA_( iv, A); 
          _flat_625 = _eq_SxS_( _flat_626, _flat_627); 
        } : _flat_625 ; 
         } :
      genarray( shp, _flat_620); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::==(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::==( int[+] A { ,NN } , int B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int _flat_716 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_710 { , NN } ; 
  int{1} _flat_711 { , NN } ; 
  int{1} _flat_712 { , NN } ; 
  int[.] _flat_713 { , NN } ; 
  int{0} _flat_714 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_714 = 0; 
  _flat_713 = _mul_SxV_( _flat_714, shp); 
  _flat_712 = wrapper:ArrayArith::one( B) ; 
  _flat_711 = wrapper:ArrayArith::one( A) ; 
  _flat_710 = _eq_SxS_( _flat_711, _flat_712); 
  res = with {
        /* Partn */
        (_flat_713 <= iv < shp)
        { 
          _flat_716 = _sel_VxA_( iv, A); 
          _flat_715 = _eq_SxS_( _flat_716, B); 
        } : _flat_715 ; 
         } :
      genarray( shp, _flat_710); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::==(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::==( int A { ,NN } , int[+] B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_673 { , NN } ; 
  int _flat_674 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_668 { , NN } ; 
  int{1} _flat_669 { , NN } ; 
  int{1} _flat_670 { , NN } ; 
  int[.] _flat_671 { , NN } ; 
  int{0} _flat_672 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_672 = 0; 
  _flat_671 = _mul_SxV_( _flat_672, shp); 
  _flat_670 = wrapper:ArrayArith::one( B) ; 
  _flat_669 = wrapper:ArrayArith::one( A) ; 
  _flat_668 = _eq_SxS_( _flat_669, _flat_670); 
  res = with {
        /* Partn */
        (_flat_671 <= iv < shp)
        { 
          _flat_674 = _sel_VxA_( iv, B); 
          _flat_673 = _eq_SxS_( A, _flat_674); 
        } : _flat_673 ; 
         } :
      genarray( shp, _flat_668); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::==(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::==( int A { ,NN } , int B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  bool _flat_62__SSA0_1 { , NN } ; 
  bool _flat_62 { , NN } ; 

  _flat_62 = _eq_SxS_( A, B); 
  _flat_62__SSA0_1 = _type_conv_( bool, _flat_62); 
  return( _flat_62__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::==(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::==( bool A { ,NN } , bool B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  bool _flat_92__SSA0_1 { , NN } ; 
  bool _flat_92 { , NN } ; 

  _flat_92 = _eq_SxS_( A, B); 
  _flat_92__SSA0_1 = _type_conv_( bool, _flat_92); 
  return( _flat_92__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::|(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::|( bool[+] A { ,NN } , bool[+] B { ,NN } )
/*
 *  | ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1293 { , NN } ; 
  bool _flat_1294 { , NN } ; 
  bool _flat_1295 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1288 { , NN } ; 
  bool{1} _flat_1289 { , NN } ; 
  bool{1} _flat_1290 { , NN } ; 
  int[.] _flat_1291 { , NN } ; 
  int{0} _flat_1292 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_1292 = 0; 
  _flat_1291 = _mul_SxV_( _flat_1292, shp); 
  _flat_1290 = wrapper:ArrayArith::one( B) ; 
  _flat_1289 = wrapper:ArrayArith::one( A) ; 
  _flat_1288 = _or_SxS_( _flat_1289, _flat_1290); 
  res = with {
        /* Partn */
        (_flat_1291 <= iv < shp)
        { 
          _flat_1295 = _sel_VxA_( iv, B); 
          _flat_1294 = _sel_VxA_( iv, A); 
          _flat_1293 = _or_SxS_( _flat_1294, _flat_1295); 
        } : _flat_1293 ; 
         } :
      genarray( shp, _flat_1288); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::|(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::|( bool[+] A { ,NN } , bool B { ,NN } )
/*
 *  | ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1328 { , NN } ; 
  bool _flat_1329 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1323 { , NN } ; 
  bool{1} _flat_1324 { , NN } ; 
  bool{1} _flat_1325 { , NN } ; 
  int[.] _flat_1326 { , NN } ; 
  int{0} _flat_1327 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1327 = 0; 
  _flat_1326 = _mul_SxV_( _flat_1327, shp); 
  _flat_1325 = wrapper:ArrayArith::one( B) ; 
  _flat_1324 = wrapper:ArrayArith::one( A) ; 
  _flat_1323 = _or_SxS_( _flat_1324, _flat_1325); 
  res = with {
        /* Partn */
        (_flat_1326 <= iv < shp)
        { 
          _flat_1329 = _sel_VxA_( iv, A); 
          _flat_1328 = _or_SxS_( _flat_1329, B); 
        } : _flat_1328 ; 
         } :
      genarray( shp, _flat_1323); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::|(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::|( bool A { ,NN } , bool[+] B { ,NN } )
/*
 *  | ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1314 { , NN } ; 
  bool _flat_1315 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1309 { , NN } ; 
  bool{1} _flat_1310 { , NN } ; 
  bool{1} _flat_1311 { , NN } ; 
  int[.] _flat_1312 { , NN } ; 
  int{0} _flat_1313 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_1313 = 0; 
  _flat_1312 = _mul_SxV_( _flat_1313, shp); 
  _flat_1311 = wrapper:ArrayArith::one( B) ; 
  _flat_1310 = wrapper:ArrayArith::one( A) ; 
  _flat_1309 = _or_SxS_( _flat_1310, _flat_1311); 
  res = with {
        /* Partn */
        (_flat_1312 <= iv < shp)
        { 
          _flat_1315 = _sel_VxA_( iv, B); 
          _flat_1314 = _or_SxS_( A, _flat_1315); 
        } : _flat_1314 ; 
         } :
      genarray( shp, _flat_1309); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::|(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::|( bool A { ,NN } , bool B { ,NN } )
/*
 *  | ::  ---
 */
{ 
  bool _flat_99__SSA0_1 { , NN } ; 
  bool _flat_99 { , NN } ; 

  _flat_99 = _or_SxS_( A, B); 
  _flat_99__SSA0_1 = _type_conv_( bool, _flat_99); 
  return( _flat_99__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::!=(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::!=( bool A { ,NN } , bool B { ,NN } )
/*
 *  != ::  ---
 */
{ 
  bool _flat_93__SSA0_1 { , NN } ; 
  bool _flat_93 { , NN } ; 

  _flat_93 = _neq_SxS_( A, B); 
  _flat_93__SSA0_1 = _type_conv_( bool, _flat_93); 
  return( _flat_93__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::-(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::-( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_13 { , NN } ; 
  int _flat_14 { , NN } ; 
  int _flat_15 { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_8 { , NN } ; 
  int{1} _flat_9 { , NN } ; 
  int{1} _flat_10 { , NN } ; 
  int[.] _flat_11 { , NN } ; 
  int{0} _flat_12 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_12 = 0; 
  _flat_11 = _mul_SxV_( _flat_12, shp); 
  _flat_10 = wrapper:ArrayArith::one( B) ; 
  _flat_9 = wrapper:ArrayArith::one( A) ; 
  _flat_8 = _sub_SxS_( _flat_9, _flat_10); 
  res = with {
        /* Partn */
        (_flat_11 <= iv < shp)
        { 
          _flat_15 = _sel_VxA_( iv, B); 
          _flat_14 = _sel_VxA_( iv, A); 
          _flat_13 = _sub_SxS_( _flat_14, _flat_15); 
        } : _flat_13 ; 
         } :
      genarray( shp, _flat_8); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::-(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::-( int[+] A { ,NN } , int B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_114 { , NN } ; 
  int _flat_115 { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_109 { , NN } ; 
  int{1} _flat_110 { , NN } ; 
  int{1} _flat_111 { , NN } ; 
  int[.] _flat_112 { , NN } ; 
  int{0} _flat_113 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_113 = 0; 
  _flat_112 = _mul_SxV_( _flat_113, shp); 
  _flat_111 = wrapper:ArrayArith::one( B) ; 
  _flat_110 = wrapper:ArrayArith::one( A) ; 
  _flat_109 = _sub_SxS_( _flat_110, _flat_111); 
  res = with {
        /* Partn */
        (_flat_112 <= iv < shp)
        { 
          _flat_115 = _sel_VxA_( iv, A); 
          _flat_114 = _sub_SxS_( _flat_115, B); 
        } : _flat_114 ; 
         } :
      genarray( shp, _flat_109); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::-(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::-( int A { ,NN } , int[+] B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_72 { , NN } ; 
  int _flat_73 { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_67 { , NN } ; 
  int{1} _flat_68 { , NN } ; 
  int{1} _flat_69 { , NN } ; 
  int[.] _flat_70 { , NN } ; 
  int{0} _flat_71 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_71 = 0; 
  _flat_70 = _mul_SxV_( _flat_71, shp); 
  _flat_69 = wrapper:ArrayArith::one( B) ; 
  _flat_68 = wrapper:ArrayArith::one( A) ; 
  _flat_67 = _sub_SxS_( _flat_68, _flat_69); 
  res = with {
        /* Partn */
        (_flat_70 <= iv < shp)
        { 
          _flat_73 = _sel_VxA_( iv, B); 
          _flat_72 = _sub_SxS_( A, _flat_73); 
        } : _flat_72 ; 
         } :
      genarray( shp, _flat_67); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::-(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::-( int A { ,NN } , int B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  int _flat_13__SSA0_1 { , NN } ; 
  int _flat_13 { , NN } ; 

  _flat_13 = _sub_SxS_( A, B); 
  _flat_13__SSA0_1 = _type_conv_( int, _flat_13); 
  return( _flat_13__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::-(...) [ body ]
 ****************************************************************************/
inline
double[+] ArrayArith::-( double[+] A { ,NN } , double[+] B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  double[+] res__SSA0_1 { , NN } ; 
  double[*] res { , NN } ; 
  double _flat_445 { , NN } ; 
  double _flat_446 { , NN } ; 
  double _flat_447 { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_440 { , NN } ; 
  double{1.0...} _flat_441 { , NN } ; 
  double{1.0...} _flat_442 { , NN } ; 
  int[.] _flat_443 { , NN } ; 
  int{0} _flat_444 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_444 = 0; 
  _flat_443 = _mul_SxV_( _flat_444, shp); 
  _flat_442 = wrapper:ArrayArith::one( B) ; 
  _flat_441 = wrapper:ArrayArith::one( A) ; 
  _flat_440 = _sub_SxS_( _flat_441, _flat_442); 
  res = with {
        /* Partn */
        (_flat_443 <= iv < shp)
        { 
          _flat_447 = _sel_VxA_( iv, B); 
          _flat_446 = _sel_VxA_( iv, A); 
          _flat_445 = _sub_SxS_( _flat_446, _flat_447); 
        } : _flat_445 ; 
         } :
      genarray( shp, _flat_440); 
  res__SSA0_1 = _type_conv_( double[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::-(...) [ body ]
 ****************************************************************************/
inline
double[+] ArrayArith::-( double[+] A { ,NN } , double B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  double[+] res__SSA0_1 { , NN } ; 
  double[*] res { , NN } ; 
  double _flat_546 { , NN } ; 
  double _flat_547 { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_541 { , NN } ; 
  double{1.0...} _flat_542 { , NN } ; 
  double{1.0...} _flat_543 { , NN } ; 
  int[.] _flat_544 { , NN } ; 
  int{0} _flat_545 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_545 = 0; 
  _flat_544 = _mul_SxV_( _flat_545, shp); 
  _flat_543 = wrapper:ArrayArith::one( B) ; 
  _flat_542 = wrapper:ArrayArith::one( A) ; 
  _flat_541 = _sub_SxS_( _flat_542, _flat_543); 
  res = with {
        /* Partn */
        (_flat_544 <= iv < shp)
        { 
          _flat_547 = _sel_VxA_( iv, A); 
          _flat_546 = _sub_SxS_( _flat_547, B); 
        } : _flat_546 ; 
         } :
      genarray( shp, _flat_541); 
  res__SSA0_1 = _type_conv_( double[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::-(...) [ body ]
 ****************************************************************************/
inline
double[+] ArrayArith::-( double A { ,NN } , double[+] B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  double[+] res__SSA0_1 { , NN } ; 
  double[*] res { , NN } ; 
  double _flat_504 { , NN } ; 
  double _flat_505 { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_499 { , NN } ; 
  double{1.0...} _flat_500 { , NN } ; 
  double{1.0...} _flat_501 { , NN } ; 
  int[.] _flat_502 { , NN } ; 
  int{0} _flat_503 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_503 = 0; 
  _flat_502 = _mul_SxV_( _flat_503, shp); 
  _flat_501 = wrapper:ArrayArith::one( B) ; 
  _flat_500 = wrapper:ArrayArith::one( A) ; 
  _flat_499 = _sub_SxS_( _flat_500, _flat_501); 
  res = with {
        /* Partn */
        (_flat_502 <= iv < shp)
        { 
          _flat_505 = _sel_VxA_( iv, B); 
          _flat_504 = _sub_SxS_( A, _flat_505); 
        } : _flat_504 ; 
         } :
      genarray( shp, _flat_499); 
  res__SSA0_1 = _type_conv_( double[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::-(...) [ body ]
 ****************************************************************************/
inline
double ScalarArith::-( double A { ,NN } , double B { ,NN } )
/*
 *  - ::  ---
 */
{ 
  double _flat_37__SSA0_1 { , NN } ; 
  double _flat_37 { , NN } ; 

  _flat_37 = _sub_SxS_( A, B); 
  _flat_37__SSA0_1 = _type_conv_( double, _flat_37); 
  return( _flat_37__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::toi(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::toi( int[+] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_1370 { , NN } ; 
  int _flat_1371 { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_1366 { , NN } ; 
  int{0} _flat_1367 { , NN } ; 
  int[.] _flat_1368 { , NN } ; 
  int{0} _flat_1369 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1369 = 0; 
  _flat_1368 = _mul_SxV_( _flat_1369, shp); 
  _flat_1367 = wrapper:UTDScalarB:ArrayArith::zero( A) ; 
  _flat_1366 = _toi_S_( _flat_1367); 
  res = with {
        /* Partn */
        (_flat_1368 <= iv < shp)
        { 
          _flat_1371 = _sel_VxA_( iv, A); 
          _flat_1370 = _toi_S_( _flat_1371); 
        } : _flat_1370 ; 
         } :
      genarray( shp, _flat_1366); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::toi(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayArith::toi( int[*] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * ArrayArith::toi(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::toi( bool[+] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_1730 { , NN } ; 
  bool _flat_1731 { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_1726 { , NN } ; 
  bool{0} _flat_1727 { , NN } ; 
  int[.] _flat_1728 { , NN } ; 
  int{0} _flat_1729 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1729 = 0; 
  _flat_1728 = _mul_SxV_( _flat_1729, shp); 
  _flat_1727 = wrapper:ArrayArith::zero( A) ; 
  _flat_1726 = _toi_S_( _flat_1727); 
  res = with {
        /* Partn */
        (_flat_1728 <= iv < shp)
        { 
          _flat_1731 = _sel_VxA_( iv, A); 
          _flat_1730 = _toi_S_( _flat_1731); 
        } : _flat_1730 ; 
         } :
      genarray( shp, _flat_1726); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::toi(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::toi( bool A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int _flat_127__SSA0_1 { , NN } ; 
  int _flat_127 { , NN } ; 

  _flat_127 = _toi_S_( A); 
  _flat_127__SSA0_1 = _type_conv_( int, _flat_127); 
  return( _flat_127__SSA0_1); 
}



/****************************************************************************
 * Bool::toi(...) [ body ]
 ****************************************************************************/
inline
int Bool::toi( bool b { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 

  res = Bool::toi__Cond_0( b) ; 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::genarray(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::genarray( int[.] shp { ,NN } , int[*] val { ,NN } )
/*
 *  genarray ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_84 { , NN } ; 
  int{0} _flat_85 { , NN } ; 

  _flat_85 = 0; 
  _flat_84 = _mul_SxV_( _flat_85, shp); 
  res = with {
        /* Partn */
        (_flat_84 <= iv < shp)
        { 
        } : val ; 
         } :
      genarray( shp, val); 
  return( res); 
}



/****************************************************************************
 * ArrayBasics::genarray(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::genarray( int[.] shp { ,NN } , bool[*] val { ,NN } )
/*
 *  genarray ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_94 { , NN } ; 
  int{0} _flat_95 { , NN } ; 

  _flat_95 = 0; 
  _flat_94 = _mul_SxV_( _flat_95, shp); 
  res = with {
        /* Partn */
        (_flat_94 <= iv < shp)
        { 
        } : val ; 
         } :
      genarray( shp, val); 
  return( res); 
}



/****************************************************************************
 * ArrayTransform::prod(...) [ body ]
 ****************************************************************************/
inline
int ArrayTransform::prod( int[*] arr_a { ,NN } )
/*
 *  prod ::  ---
 */
{ 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 
  int _flat_1721 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_1716 { , NN } ; 
  int[.] _flat_1717 { , NN } ; 
  int{0} _flat_1718 { , NN } ; 
  int[.] _flat_1719 { , NN } ; 
  int[.] _flat_1720 { , NN } ; 

  _flat_1720 = _shape_A_( arr_a); 
  _flat_1719 = _shape_A_( arr_a); 
  _flat_1718 = 0; 
  _flat_1717 = _mul_SxV_( _flat_1718, _flat_1719); 
  _flat_1716 = 1; 
  res = with {
        /* Partn */
        (_flat_1717 <= iv < _flat_1720)
        { 
          _flat_1721 = _sel_VxA_( iv, arr_a); 
        } : _flat_1721 ; 
         } :
      fold( UTDScalarB:ArrayArith::*(), _flat_1716); 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayIO::show(...) [ body ]
 ****************************************************************************/
inline
TermFile::TermFile * ArrayIO::show( TermFile::TermFile *_rso_97_stdout { ,NN } , int[+] arr { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_97_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  int _flat_72 { , NN } ; 
  int[.] _flat_73 { , NN } ; 
  char[+] carr { , NN } ; 

  carr = wrapper:ArrayIO:ArrayFormat::format( arr) ; 
  _flat_73 = wrapper:ArrayIO:Structures::shape( carr) ; 
  _flat_72 = wrapper:ArrayIO:Structures::dim( carr) ; 
  _rso_97_stdout__SSA0_1 = wrapper:ArrayIO::showarray( _rso_97_stdout, _flat_72, _flat_73, carr) ; 
  return( _rso_97_stdout__SSA0_1); 
}



/****************************************************************************
 * StdIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * StdIO::show( Terminal::Terminal *_rso_340_TheTerminal { ,NN } , TermFile::TermFile *_rso_339_stdout { ,NN } , int[+] arr { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_339_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */

  _rso_339_stdout__SSA0_1 = ArrayIO::show( _rso_339_stdout, arr) ; 
  return( _rso_340_TheTerminal, _rso_339_stdout__SSA0_1); 
}



/****************************************************************************
 * ScalarIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * ScalarIO::show( Terminal::Terminal *_rso_981_TheTerminal { ,NN } , TermFile::TermFile *_rso_980_stdout { ,NN } , int n { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_980_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_981_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */
  String::string _flat_222 { , NN } ; 
  char[4]{%,d...} _flat_223 { , NN } ; 
  char{%} _flat_224 { , NN } ; 
  char{d} _flat_225 { , NN } ; 
  char{
} _flat_226 { , NN } ; 
  char{} _flat_227 { , NN } ; 
  int{3} _flat_228 { , NN } ; 

  _flat_228 = 3; 
  _flat_227 = '\0'; 
  _flat_226 = '\n'; 
  _flat_225 = 'd'; 
  _flat_224 = '%'; 
  _flat_223 = [ _flat_224, _flat_225, _flat_226, _flat_227 ]; 
  _flat_222 = wrapper:String::to_string( _flat_223, _flat_228) ; 
  _rso_981_TheTerminal__SSA0_1, _rso_980_stdout__SSA0_1 = wrapper:TermFile::printf( _rso_981_TheTerminal, _rso_980_stdout, _flat_222, n) ; 
  return( _rso_981_TheTerminal__SSA0_1, _rso_980_stdout__SSA0_1); 
}



/****************************************************************************
 * StdIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * StdIO::show( Terminal::Terminal *_rso_338_TheTerminal { ,NN } , TermFile::TermFile *_rso_337_stdout { ,NN } , int n { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_337_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_338_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_338_TheTerminal__SSA0_1, _rso_337_stdout__SSA0_1 = ScalarIO::show( _rso_338_TheTerminal, _rso_337_stdout, n) ; 
  return( _rso_338_TheTerminal__SSA0_1, _rso_337_stdout__SSA0_1); 
}



/****************************************************************************
 * ArrayIO::show(...) [ body ]
 ****************************************************************************/
inline
TermFile::TermFile * ArrayIO::show( TermFile::TermFile *_rso_100_stdout { ,NN } , bool[+] arr { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_100_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  int _flat_78 { , NN } ; 
  int[.] _flat_79 { , NN } ; 
  char[+] carr { , NN } ; 

  carr = wrapper:ArrayIO:ArrayFormat::format( arr) ; 
  _flat_79 = wrapper:ArrayIO:Structures::shape( carr) ; 
  _flat_78 = wrapper:ArrayIO:Structures::dim( carr) ; 
  _rso_100_stdout__SSA0_1 = wrapper:ArrayIO::showarray( _rso_100_stdout, _flat_78, _flat_79, carr) ; 
  return( _rso_100_stdout__SSA0_1); 
}



/****************************************************************************
 * StdIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * StdIO::show( Terminal::Terminal *_rso_322_TheTerminal { ,NN } , TermFile::TermFile *_rso_321_stdout { ,NN } , bool[+] arr { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_321_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */

  _rso_321_stdout__SSA0_1 = ArrayIO::show( _rso_321_stdout, arr) ; 
  return( _rso_322_TheTerminal, _rso_321_stdout__SSA0_1); 
}



/****************************************************************************
 * ScalarIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * ScalarIO::show( Terminal::Terminal *_rso_991_TheTerminal { ,NN } , TermFile::TermFile *_rso_990_stdout { ,NN } , bool n { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_990_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_991_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */
  String::string _flat_258 { , NN } ; 
  char[4]{%,d...} _flat_259 { , NN } ; 
  char{%} _flat_260 { , NN } ; 
  char{d} _flat_261 { , NN } ; 
  char{
} _flat_262 { , NN } ; 
  char{} _flat_263 { , NN } ; 
  int{3} _flat_264 { , NN } ; 

  _flat_264 = 3; 
  _flat_263 = '\0'; 
  _flat_262 = '\n'; 
  _flat_261 = 'd'; 
  _flat_260 = '%'; 
  _flat_259 = [ _flat_260, _flat_261, _flat_262, _flat_263 ]; 
  _flat_258 = wrapper:String::to_string( _flat_259, _flat_264) ; 
  _rso_991_TheTerminal__SSA0_1, _rso_990_stdout__SSA0_1 = wrapper:TermFile::printf( _rso_991_TheTerminal, _rso_990_stdout, _flat_258, n) ; 
  return( _rso_991_TheTerminal__SSA0_1, _rso_990_stdout__SSA0_1); 
}



/****************************************************************************
 * StdIO::show(...) [ body ]
 ****************************************************************************/
inline
Terminal::Terminal *, TermFile::TermFile * StdIO::show( Terminal::Terminal *_rso_320_TheTerminal { ,NN } , TermFile::TermFile *_rso_319_stdout { ,NN } , bool n { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_319_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_320_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_320_TheTerminal__SSA0_1, _rso_319_stdout__SSA0_1 = ScalarIO::show( _rso_320_TheTerminal, _rso_319_stdout, n) ; 
  return( _rso_320_TheTerminal__SSA0_1, _rso_319_stdout__SSA0_1); 
}



/****************************************************************************
 * ArrayTransform::++(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayTransform::++( bool[+] arr_a { ,NN } , bool[+] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  bool[+] res__SSA0_2 { , NN } ; 
  bool[*] res__SSA0_1 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[.] _flat_725 { , NN } ; 
  int[.] _flat_723 { , NN } ; 
  int[.] offset { , NN } ; 
  int[.] _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[.] _flat_722 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[.] _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[.] _flat_714 { , NN } ; 
  int[.] new_shp { , NN } ; 
  int[.] _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int _flat_702 { , NN } ; 
  int _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[.] _flat_706 { , NN } ; 
  int _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[.] _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1 < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * ArrayTransform::++(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayTransform::++( bool[+] arr_a { ,NN } , bool arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  bool[+] res__SSA0_2 { , NN } ; 
  bool[*] res__SSA0_1 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  int[.] _flat_746 { , NN } ; 
  int[.] offset { , NN } ; 
  int[.] _flat_739 { , NN } ; 
  int{0} _flat_740 { , NN } ; 
  int{0} _flat_741 { , NN } ; 
  int _flat_742 { , NN } ; 
  int[1]{0} _flat_743 { , NN } ; 
  int{0} _flat_744 { , NN } ; 
  int[.] _flat_745 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_738 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_734 { , NN } ; 
  int[.] _flat_735 { , NN } ; 
  int{0} _flat_736 { , NN } ; 
  int[.] _flat_737 { , NN } ; 
  int[.] new_shp { , NN } ; 
  int[.] _flat_726 { , NN } ; 
  int{0} _flat_727 { , NN } ; 
  int _flat_728 { , NN } ; 
  int _flat_729 { , NN } ; 
  int[1]{0} _flat_730 { , NN } ; 
  int{0} _flat_731 { , NN } ; 
  int[.] _flat_732 { , NN } ; 
  int{1} _flat_733 { , NN } ; 

  _flat_733 = 1; 
  _flat_732 = _shape_A_( arr_a); 
  _flat_731 = 0; 
  _flat_730 = [ _flat_731 ]; 
  _flat_729 = _sel_VxA_( _flat_730, _flat_732); 
  _flat_728 = _add_SxS_( _flat_729, _flat_733); 
  _flat_727 = 0; 
  _flat_726 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_726, _flat_727, _flat_728); 
  _flat_737 = _shape_A_( arr_a); 
  _flat_736 = 0; 
  _flat_735 = _mul_SxV_( _flat_736, new_shp); 
  _flat_734 = false; 
  res = with {
        /* Partn */
        (_flat_735 <= iv < _flat_737)
        { 
          _flat_738 = _sel_VxA_( iv, arr_a); 
        } : _flat_738 ; 
         } :
      genarray( new_shp, _flat_734); 
  _flat_745 = _shape_A_( arr_a); 
  _flat_744 = 0; 
  _flat_743 = [ _flat_744 ]; 
  _flat_742 = _sel_VxA_( _flat_743, _flat_745); 
  _flat_741 = 0; 
  _flat_740 = 0; 
  _flat_739 = _mul_SxV_( _flat_740, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_739, _flat_741, _flat_742); 
  _flat_746 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1 < _flat_746)
        { 
        } : arr_b ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * ArrayTransform::++(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayTransform::++( bool arr_a { ,NN } , bool[+] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  bool[+] res__SSA0_2 { , NN } ; 
  bool[*] res__SSA0_1 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  int[.] _flat_767 { , NN } ; 
  int[.] offset { , NN } ; 
  int[.] _flat_760 { , NN } ; 
  int{0} _flat_761 { , NN } ; 
  int{0} _flat_762 { , NN } ; 
  int _flat_763 { , NN } ; 
  int[1]{0} _flat_764 { , NN } ; 
  int{0} _flat_765 { , NN } ; 
  int[.] _flat_766 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_759 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_755 { , NN } ; 
  int[.] _flat_756 { , NN } ; 
  int{0} _flat_757 { , NN } ; 
  int[.] _flat_758 { , NN } ; 
  int[.] new_shp { , NN } ; 
  int[.] _flat_747 { , NN } ; 
  int{0} _flat_748 { , NN } ; 
  int _flat_749 { , NN } ; 
  int{1} _flat_750 { , NN } ; 
  int _flat_751 { , NN } ; 
  int[1]{0} _flat_752 { , NN } ; 
  int{0} _flat_753 { , NN } ; 
  int[.] _flat_754 { , NN } ; 

  _flat_754 = _shape_A_( arr_b); 
  _flat_753 = 0; 
  _flat_752 = [ _flat_753 ]; 
  _flat_751 = _sel_VxA_( _flat_752, _flat_754); 
  _flat_750 = 1; 
  _flat_749 = _add_SxS_( _flat_750, _flat_751); 
  _flat_748 = 0; 
  _flat_747 = _shape_A_( arr_b); 
  new_shp = _idx_modarray_AxSxS_( _flat_747, _flat_748, _flat_749); 
  _flat_758 = _shape_A_( arr_b); 
  _flat_757 = 0; 
  _flat_756 = _mul_SxV_( _flat_757, new_shp); 
  _flat_755 = false; 
  res = with {
        /* Partn */
        (_flat_756 <= iv < _flat_758)
        { 
          _flat_759 = _sel_VxA_( iv, arr_b); 
        } : _flat_759 ; 
         } :
      genarray( new_shp, _flat_755); 
  _flat_766 = _shape_A_( arr_b); 
  _flat_765 = 0; 
  _flat_764 = [ _flat_765 ]; 
  _flat_763 = _sel_VxA_( _flat_764, _flat_766); 
  _flat_762 = 0; 
  _flat_761 = 0; 
  _flat_760 = _mul_SxV_( _flat_761, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_760, _flat_762, _flat_763); 
  _flat_767 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1 < _flat_767)
        { 
        } : arr_a ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * ArrayTransform::++(...) [ body ]
 ****************************************************************************/
inline
bool[2] ArrayTransform::++( bool arr_a { ,NN } , bool arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  bool[2] res__SSA0_1 { , NN } ; 
  bool[2] res { , NN } ; 

  res = [ arr_a, arr_b ]; 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayTransform::all(...) [ body ]
 ****************************************************************************/
inline
bool ArrayTransform::all( bool[*] arr_a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1793 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1788 { , NN } ; 
  int[.] _flat_1789 { , NN } ; 
  int{0} _flat_1790 { , NN } ; 
  int[.] _flat_1791 { , NN } ; 
  int[.] _flat_1792 { , NN } ; 

  _flat_1792 = _shape_A_( arr_a); 
  _flat_1791 = _shape_A_( arr_a); 
  _flat_1790 = 0; 
  _flat_1789 = _mul_SxV_( _flat_1790, _flat_1791); 
  _flat_1788 = true; 
  res = with {
        /* Partn */
        (_flat_1789 <= iv < _flat_1792)
        { 
          _flat_1793 = _sel_VxA_( iv, arr_a); 
        } : _flat_1793 ; 
         } :
      fold( ArrayArith::&(), _flat_1788); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::all(...) [ body ]
 ****************************************************************************/
inline
bool ArrayArith::all( bool[*] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool[*] _flat_1797 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[.] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[.] _flat_1795 { , NN } ; 
  int[.] _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::*( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_21 { , NN } ; 
  int _flat_22 { , NN } ; 
  int _flat_23 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_16 { , NN } ; 
  int{1} _flat_17 { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[.] _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_20 = 0; 
  _flat_19 = _mul_SxV_( _flat_20, shp); 
  _flat_18 = wrapper:ArrayArith::one( B) ; 
  _flat_17 = wrapper:ArrayArith::one( A) ; 
  _flat_16 = _mul_SxS_( _flat_17, _flat_18); 
  res = with {
        /* Partn */
        (_flat_19 <= iv < shp)
        { 
          _flat_23 = _sel_VxA_( iv, B); 
          _flat_22 = _sel_VxA_( iv, A); 
          _flat_21 = _mul_SxS_( _flat_22, _flat_23); 
        } : _flat_21 ; 
         } :
      genarray( shp, _flat_16); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::*( int[+] A { ,NN } , int B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_121 { , NN } ; 
  int _flat_122 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_116 { , NN } ; 
  int{1} _flat_117 { , NN } ; 
  int{1} _flat_118 { , NN } ; 
  int[.] _flat_119 { , NN } ; 
  int{0} _flat_120 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_120 = 0; 
  _flat_119 = _mul_SxV_( _flat_120, shp); 
  _flat_118 = wrapper:ArrayArith::one( B) ; 
  _flat_117 = wrapper:ArrayArith::one( A) ; 
  _flat_116 = _mul_SxS_( _flat_117, _flat_118); 
  res = with {
        /* Partn */
        (_flat_119 <= iv < shp)
        { 
          _flat_122 = _sel_VxA_( iv, A); 
          _flat_121 = _mul_SxS_( _flat_122, B); 
        } : _flat_121 ; 
         } :
      genarray( shp, _flat_116); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::*( int A { ,NN } , int[+] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[.] _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::*(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::*( int A { ,NN } , int B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _flat_14__SSA0_1 { , NN } ; 
  int _flat_14 { , NN } ; 

  _flat_14 = _mul_SxS_( A, B); 
  _flat_14__SSA0_1 = _type_conv_( int, _flat_14); 
  return( _flat_14__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
double[+] ArrayArith::*( double[+] A { ,NN } , double[+] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  double[+] res__SSA0_1 { , NN } ; 
  double[*] res { , NN } ; 
  double _flat_453 { , NN } ; 
  double _flat_454 { , NN } ; 
  double _flat_455 { , NN } ; 
  int[.] iv { , NN } ; 
  double{1.0...} _flat_448 { , NN } ; 
  double{1.0...} _flat_449 { , NN } ; 
  double{1.0...} _flat_450 { , NN } ; 
  int[.] _flat_451 { , NN } ; 
  int{0} _flat_452 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_452 = 0; 
  _flat_451 = _mul_SxV_( _flat_452, shp); 
  _flat_450 = wrapper:ArrayArith::one( B) ; 
  _flat_449 = wrapper:ArrayArith::one( A) ; 
  _flat_448 = _mul_SxS_( _flat_449, _flat_450); 
  res = with {
        /* Partn */
        (_flat_451 <= iv < shp)
        { 
          _flat_455 = _sel_VxA_( iv, B); 
          _flat_454 = _sel_VxA_( iv, A); 
          _flat_453 = _mul_SxS_( _flat_454, _flat_455); 
        } : _flat_453 ; 
         } :
      genarray( shp, _flat_448); 
  res__SSA0_1 = _type_conv_( double[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
double[+] ArrayArith::*( double[+] A { ,NN } , double B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  double[+] res__SSA0_1 { , NN } ; 
  double[*] res { , NN } ; 
  double _flat_553 { , NN } ; 
  double _flat_554 { , NN } ; 
  int[.] iv { , NN } ; 
  double{1.0...} _flat_548 { , NN } ; 
  double{1.0...} _flat_549 { , NN } ; 
  double{1.0...} _flat_550 { , NN } ; 
  int[.] _flat_551 { , NN } ; 
  int{0} _flat_552 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_552 = 0; 
  _flat_551 = _mul_SxV_( _flat_552, shp); 
  _flat_550 = wrapper:ArrayArith::one( B) ; 
  _flat_549 = wrapper:ArrayArith::one( A) ; 
  _flat_548 = _mul_SxS_( _flat_549, _flat_550); 
  res = with {
        /* Partn */
        (_flat_551 <= iv < shp)
        { 
          _flat_554 = _sel_VxA_( iv, A); 
          _flat_553 = _mul_SxS_( _flat_554, B); 
        } : _flat_553 ; 
         } :
      genarray( shp, _flat_548); 
  res__SSA0_1 = _type_conv_( double[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
double[+] ArrayArith::*( double A { ,NN } , double[+] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  double[+] res__SSA0_1 { , NN } ; 
  double[*] res { , NN } ; 
  double _flat_511 { , NN } ; 
  double _flat_512 { , NN } ; 
  int[.] iv { , NN } ; 
  double{1.0...} _flat_506 { , NN } ; 
  double{1.0...} _flat_507 { , NN } ; 
  double{1.0...} _flat_508 { , NN } ; 
  int[.] _flat_509 { , NN } ; 
  int{0} _flat_510 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_510 = 0; 
  _flat_509 = _mul_SxV_( _flat_510, shp); 
  _flat_508 = wrapper:ArrayArith::one( B) ; 
  _flat_507 = wrapper:ArrayArith::one( A) ; 
  _flat_506 = _mul_SxS_( _flat_507, _flat_508); 
  res = with {
        /* Partn */
        (_flat_509 <= iv < shp)
        { 
          _flat_512 = _sel_VxA_( iv, B); 
          _flat_511 = _mul_SxS_( A, _flat_512); 
        } : _flat_511 ; 
         } :
      genarray( shp, _flat_506); 
  res__SSA0_1 = _type_conv_( double[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::*(...) [ body ]
 ****************************************************************************/
inline
double ScalarArith::*( double A { ,NN } , double B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  double _flat_38__SSA0_1 { , NN } ; 
  double _flat_38 { , NN } ; 

  _flat_38 = _mul_SxS_( A, B); 
  _flat_38__SSA0_1 = _type_conv_( double, _flat_38); 
  return( _flat_38__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::reshape(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::reshape( int[.] shp { ,NN } , bool[*] A { ,NN } )
/*
 *  reshape ::  ---
 */
{ 
  bool[*] _flat_17 { , NN } ; 

  _flat_17 = _reshape_VxA_( shp, A); 
  return( _flat_17); 
}



/****************************************************************************
 * ArrayArith::>=(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::>=( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  >= ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_665 { , NN } ; 
  int _flat_666 { , NN } ; 
  int _flat_667 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_660 { , NN } ; 
  int{1} _flat_661 { , NN } ; 
  int{1} _flat_662 { , NN } ; 
  int[.] _flat_663 { , NN } ; 
  int{0} _flat_664 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_664 = 0; 
  _flat_663 = _mul_SxV_( _flat_664, shp); 
  _flat_662 = wrapper:ArrayArith::one( B) ; 
  _flat_661 = wrapper:ArrayArith::one( A) ; 
  _flat_660 = _ge_SxS_( _flat_661, _flat_662); 
  res = with {
        /* Partn */
        (_flat_663 <= iv < shp)
        { 
          _flat_667 = _sel_VxA_( iv, B); 
          _flat_666 = _sel_VxA_( iv, A); 
          _flat_665 = _ge_SxS_( _flat_666, _flat_667); 
        } : _flat_665 ; 
         } :
      genarray( shp, _flat_660); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::>=(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::>=( int[+] A { ,NN } , int B { ,NN } )
/*
 *  >= ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_750 { , NN } ; 
  int _flat_751 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_745 { , NN } ; 
  int{1} _flat_746 { , NN } ; 
  int{1} _flat_747 { , NN } ; 
  int[.] _flat_748 { , NN } ; 
  int{0} _flat_749 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_749 = 0; 
  _flat_748 = _mul_SxV_( _flat_749, shp); 
  _flat_747 = wrapper:ArrayArith::one( B) ; 
  _flat_746 = wrapper:ArrayArith::one( A) ; 
  _flat_745 = _ge_SxS_( _flat_746, _flat_747); 
  res = with {
        /* Partn */
        (_flat_748 <= iv < shp)
        { 
          _flat_751 = _sel_VxA_( iv, A); 
          _flat_750 = _ge_SxS_( _flat_751, B); 
        } : _flat_750 ; 
         } :
      genarray( shp, _flat_745); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::>=(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::>=( int A { ,NN } , int[+] B { ,NN } )
/*
 *  >= ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_708 { , NN } ; 
  int _flat_709 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_703 { , NN } ; 
  int{1} _flat_704 { , NN } ; 
  int{1} _flat_705 { , NN } ; 
  int[.] _flat_706 { , NN } ; 
  int{0} _flat_707 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_707 = 0; 
  _flat_706 = _mul_SxV_( _flat_707, shp); 
  _flat_705 = wrapper:ArrayArith::one( B) ; 
  _flat_704 = wrapper:ArrayArith::one( A) ; 
  _flat_703 = _ge_SxS_( _flat_704, _flat_705); 
  res = with {
        /* Partn */
        (_flat_706 <= iv < shp)
        { 
          _flat_709 = _sel_VxA_( iv, B); 
          _flat_708 = _ge_SxS_( A, _flat_709); 
        } : _flat_708 ; 
         } :
      genarray( shp, _flat_703); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::>=(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::>=( int A { ,NN } , int B { ,NN } )
/*
 *  >= ::  ---
 */
{ 
  bool _flat_67__SSA0_1 { , NN } ; 
  bool _flat_67 { , NN } ; 

  _flat_67 = _ge_SxS_( A, B); 
  _flat_67__SSA0_1 = _type_conv_( bool, _flat_67); 
  return( _flat_67__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::+(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::+( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  + ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_5 { , NN } ; 
  int _flat_6 { , NN } ; 
  int _flat_7 { , NN } ; 
  int[.] iv { , NN } ; 
  int{2} _flat_0 { , NN } ; 
  int{1} _flat_1 { , NN } ; 
  int{1} _flat_2 { , NN } ; 
  int[.] _flat_3 { , NN } ; 
  int{0} _flat_4 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_4 = 0; 
  _flat_3 = _mul_SxV_( _flat_4, shp); 
  _flat_2 = wrapper:ArrayArith::one( B) ; 
  _flat_1 = wrapper:ArrayArith::one( A) ; 
  _flat_0 = _add_SxS_( _flat_1, _flat_2); 
  res = with {
        /* Partn */
        (_flat_3 <= iv < shp)
        { 
          _flat_7 = _sel_VxA_( iv, B); 
          _flat_6 = _sel_VxA_( iv, A); 
          _flat_5 = _add_SxS_( _flat_6, _flat_7); 
        } : _flat_5 ; 
         } :
      genarray( shp, _flat_0); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::+(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::+( int[+] A { ,NN } , int B { ,NN } )
/*
 *  + ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_107 { , NN } ; 
  int _flat_108 { , NN } ; 
  int[.] iv { , NN } ; 
  int{2} _flat_102 { , NN } ; 
  int{1} _flat_103 { , NN } ; 
  int{1} _flat_104 { , NN } ; 
  int[.] _flat_105 { , NN } ; 
  int{0} _flat_106 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_106 = 0; 
  _flat_105 = _mul_SxV_( _flat_106, shp); 
  _flat_104 = wrapper:ArrayArith::one( B) ; 
  _flat_103 = wrapper:ArrayArith::one( A) ; 
  _flat_102 = _add_SxS_( _flat_103, _flat_104); 
  res = with {
        /* Partn */
        (_flat_105 <= iv < shp)
        { 
          _flat_108 = _sel_VxA_( iv, A); 
          _flat_107 = _add_SxS_( _flat_108, B); 
        } : _flat_107 ; 
         } :
      genarray( shp, _flat_102); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::+(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::+( int A { ,NN } , int[+] B { ,NN } )
/*
 *  + ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_65 { , NN } ; 
  int _flat_66 { , NN } ; 
  int[.] iv { , NN } ; 
  int{2} _flat_60 { , NN } ; 
  int{1} _flat_61 { , NN } ; 
  int{1} _flat_62 { , NN } ; 
  int[.] _flat_63 { , NN } ; 
  int{0} _flat_64 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_64 = 0; 
  _flat_63 = _mul_SxV_( _flat_64, shp); 
  _flat_62 = wrapper:ArrayArith::one( B) ; 
  _flat_61 = wrapper:ArrayArith::one( A) ; 
  _flat_60 = _add_SxS_( _flat_61, _flat_62); 
  res = with {
        /* Partn */
        (_flat_63 <= iv < shp)
        { 
          _flat_66 = _sel_VxA_( iv, B); 
          _flat_65 = _add_SxS_( A, _flat_66); 
        } : _flat_65 ; 
         } :
      genarray( shp, _flat_60); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::+(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::+( int A { ,NN } , int B { ,NN } )
/*
 *  + ::  ---
 */
{ 
  int _flat_12__SSA0_1 { , NN } ; 
  int _flat_12 { , NN } ; 

  _flat_12 = _add_SxS_( A, B); 
  _flat_12__SSA0_1 = _type_conv_( int, _flat_12); 
  return( _flat_12__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::--(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::--( int A { ,NN } )
/*
 *  -- ::  ---
 */
{ 
  int _flat_48__SSA0_1 { , NN } ; 
  int _flat_48 { , NN } ; 
  int{1} _flat_49 { , NN } ; 

  _flat_49 = wrapper:ScalarArith::one( A) ; 
  _flat_48 = _sub_SxS_( A, _flat_49); 
  _flat_48__SSA0_1 = _type_conv_( int, _flat_48); 
  return( _flat_48__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::modarray(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayBasics::modarray( int[*] array { ,NN } , int[.] v { ,NN } , int[+] val { ,NN } )
/*
 *  modarray ::  ---
 */
{ 
  int[+] res { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_99 { , NN } ; 
  int{1} _flat_100 { , NN } ; 

  _flat_100 = 1; 
  _flat_99 = _add_VxS_( v, _flat_100); 
  res = with {
        /* Partn */
        (v <= iv < _flat_99)
        { 
        } : val ; 
         } :
      modarray( array); 
  return( res); 
}



/****************************************************************************
 * ArrayBasics::modarray(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::modarray( int[*] array { ,NN } , int[.] v { ,NN } , int val { ,NN } )
/*
 *  modarray ::  ---
 */
{ 
  int[*] _flat_96 { , NN } ; 

  _flat_96 = _modarray_AxVxS_( array, v, val); 
  return( _flat_96); 
}



/****************************************************************************
 * ArrayBasics::modarray(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::modarray( int[*] array { ,NN } , int v { ,NN } , int[*] val { ,NN } )
/*
 *  modarray ::  ---
 */
{ 
  int[*] _flat_97 { , NN } ; 
  int[1] _flat_98 { , NN } ; 

  _flat_98 = [ v ]; 
  _flat_97 = wrapper:UTDScalarB:ArrayBasics::modarray( array, _flat_98, val) ; 
  return( _flat_97); 
}



/****************************************************************************
 * ArrayArith::/(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::/( int[+] A { ,NN } , int[+] B { ,NN } )
/*
 *  / ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_29 { , NN } ; 
  int _flat_30 { , NN } ; 
  int _flat_31 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_24 { , NN } ; 
  int{1} _flat_25 { , NN } ; 
  int{1} _flat_26 { , NN } ; 
  int[.] _flat_27 { , NN } ; 
  int{0} _flat_28 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_28 = 0; 
  _flat_27 = _mul_SxV_( _flat_28, shp); 
  _flat_26 = wrapper:ArrayArith::one( B) ; 
  _flat_25 = wrapper:ArrayArith::one( A) ; 
  _flat_24 = _div_SxS_( _flat_25, _flat_26); 
  res = with {
        /* Partn */
        (_flat_27 <= iv < shp)
        { 
          _flat_31 = _sel_VxA_( iv, B); 
          _flat_30 = _sel_VxA_( iv, A); 
          _flat_29 = _div_SxS_( _flat_30, _flat_31); 
        } : _flat_29 ; 
         } :
      genarray( shp, _flat_24); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::/(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::/( int[+] A { ,NN } , int B { ,NN } )
/*
 *  / ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_128 { , NN } ; 
  int _flat_129 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_123 { , NN } ; 
  int{1} _flat_124 { , NN } ; 
  int{1} _flat_125 { , NN } ; 
  int[.] _flat_126 { , NN } ; 
  int{0} _flat_127 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_127 = 0; 
  _flat_126 = _mul_SxV_( _flat_127, shp); 
  _flat_125 = wrapper:ArrayArith::one( B) ; 
  _flat_124 = wrapper:ArrayArith::one( A) ; 
  _flat_123 = _div_SxS_( _flat_124, _flat_125); 
  res = with {
        /* Partn */
        (_flat_126 <= iv < shp)
        { 
          _flat_129 = _sel_VxA_( iv, A); 
          _flat_128 = _div_SxS_( _flat_129, B); 
        } : _flat_128 ; 
         } :
      genarray( shp, _flat_123); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::/(...) [ body ]
 ****************************************************************************/
inline
int[+] ArrayArith::/( int A { ,NN } , int[+] B { ,NN } )
/*
 *  / ::  ---
 */
{ 
  int[+] res__SSA0_1 { , NN } ; 
  int[*] res { , NN } ; 
  int _flat_86 { , NN } ; 
  int _flat_87 { , NN } ; 
  int[.] iv { , NN } ; 
  int{1} _flat_81 { , NN } ; 
  int{1} _flat_82 { , NN } ; 
  int{1} _flat_83 { , NN } ; 
  int[.] _flat_84 { , NN } ; 
  int{0} _flat_85 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_85 = 0; 
  _flat_84 = _mul_SxV_( _flat_85, shp); 
  _flat_83 = wrapper:ArrayArith::one( B) ; 
  _flat_82 = wrapper:ArrayArith::one( A) ; 
  _flat_81 = _div_SxS_( _flat_82, _flat_83); 
  res = with {
        /* Partn */
        (_flat_84 <= iv < shp)
        { 
          _flat_87 = _sel_VxA_( iv, B); 
          _flat_86 = _div_SxS_( A, _flat_87); 
        } : _flat_86 ; 
         } :
      genarray( shp, _flat_81); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::/(...) [ body ]
 ****************************************************************************/
inline
int ScalarArith::/( int A { ,NN } , int B { ,NN } )
/*
 *  / ::  ---
 */
{ 
  int _flat_15__SSA0_1 { , NN } ; 
  int _flat_15 { , NN } ; 

  _flat_15 = _div_SxS_( A, B); 
  _flat_15__SSA0_1 = _type_conv_( int, _flat_15); 
  return( _flat_15__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::abs(...) [ body ]
 ****************************************************************************/
inline
double[+] ArrayArith::abs( double[+] A { ,NN } )
/*
 *  abs ::  ---
 */
{ 
  double[+] res__SSA0_1 { , NN } ; 
  double[*] res { , NN } ; 
  double _flat_490 { , NN } ; 
  double _flat_491 { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_486 { , NN } ; 
  double{0.0...} _flat_487 { , NN } ; 
  int[.] _flat_488 { , NN } ; 
  int{0} _flat_489 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_489 = 0; 
  _flat_488 = _mul_SxV_( _flat_489, shp); 
  _flat_487 = wrapper:ArrayArith::zero( A) ; 
  _flat_486 = _abs_S_( _flat_487); 
  res = with {
        /* Partn */
        (_flat_488 <= iv < shp)
        { 
          _flat_491 = _sel_VxA_( iv, A); 
          _flat_490 = _abs_S_( _flat_491); 
        } : _flat_490 ; 
         } :
      genarray( shp, _flat_486); 
  res__SSA0_1 = _type_conv_( double[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::abs(...) [ body ]
 ****************************************************************************/
inline
double ScalarArith::abs( double A { ,NN } )
/*
 *  abs ::  ---
 */
{ 
  double _flat_43__SSA0_1 { , NN } ; 
  double _flat_43 { , NN } ; 

  _flat_43 = _abs_S_( A); 
  _flat_43__SSA0_1 = _type_conv_( double, _flat_43); 
  return( _flat_43__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::max(...) [ body ]
 ****************************************************************************/
inline
double[+] ArrayArith::max( double[+] A { ,NN } , double[+] B { ,NN } )
/*
 *  max ::  ---
 */
{ 
  double[+] res__SSA0_1 { , NN } ; 
  double[*] res { , NN } ; 
  double _flat_477 { , NN } ; 
  double _flat_478 { , NN } ; 
  double _flat_479 { , NN } ; 
  int[.] iv { , NN } ; 
  double{1.0...} _flat_472 { , NN } ; 
  double{1.0...} _flat_473 { , NN } ; 
  double{1.0...} _flat_474 { , NN } ; 
  int[.] _flat_475 { , NN } ; 
  int{0} _flat_476 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_476 = 0; 
  _flat_475 = _mul_SxV_( _flat_476, shp); 
  _flat_474 = wrapper:ArrayArith::one( B) ; 
  _flat_473 = wrapper:ArrayArith::one( A) ; 
  _flat_472 = _max_SxS_( _flat_473, _flat_474); 
  res = with {
        /* Partn */
        (_flat_475 <= iv < shp)
        { 
          _flat_479 = _sel_VxA_( iv, B); 
          _flat_478 = _sel_VxA_( iv, A); 
          _flat_477 = _max_SxS_( _flat_478, _flat_479); 
        } : _flat_477 ; 
         } :
      genarray( shp, _flat_472); 
  res__SSA0_1 = _type_conv_( double[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::max(...) [ body ]
 ****************************************************************************/
inline
double[+] ArrayArith::max( double[+] A { ,NN } , double B { ,NN } )
/*
 *  max ::  ---
 */
{ 
  double[+] res__SSA0_1 { , NN } ; 
  double[*] res { , NN } ; 
  double _flat_574 { , NN } ; 
  double _flat_575 { , NN } ; 
  int[.] iv { , NN } ; 
  double{1.0...} _flat_569 { , NN } ; 
  double{1.0...} _flat_570 { , NN } ; 
  double{1.0...} _flat_571 { , NN } ; 
  int[.] _flat_572 { , NN } ; 
  int{0} _flat_573 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_573 = 0; 
  _flat_572 = _mul_SxV_( _flat_573, shp); 
  _flat_571 = wrapper:ArrayArith::one( B) ; 
  _flat_570 = wrapper:ArrayArith::one( A) ; 
  _flat_569 = _max_SxS_( _flat_570, _flat_571); 
  res = with {
        /* Partn */
        (_flat_572 <= iv < shp)
        { 
          _flat_575 = _sel_VxA_( iv, A); 
          _flat_574 = _max_SxS_( _flat_575, B); 
        } : _flat_574 ; 
         } :
      genarray( shp, _flat_569); 
  res__SSA0_1 = _type_conv_( double[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::max(...) [ body ]
 ****************************************************************************/
inline
double[+] ArrayArith::max( double A { ,NN } , double[+] B { ,NN } )
/*
 *  max ::  ---
 */
{ 
  double[+] res__SSA0_1 { , NN } ; 
  double[*] res { , NN } ; 
  double _flat_532 { , NN } ; 
  double _flat_533 { , NN } ; 
  int[.] iv { , NN } ; 
  double{1.0...} _flat_527 { , NN } ; 
  double{1.0...} _flat_528 { , NN } ; 
  double{1.0...} _flat_529 { , NN } ; 
  int[.] _flat_530 { , NN } ; 
  int{0} _flat_531 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_531 = 0; 
  _flat_530 = _mul_SxV_( _flat_531, shp); 
  _flat_529 = wrapper:ArrayArith::one( B) ; 
  _flat_528 = wrapper:ArrayArith::one( A) ; 
  _flat_527 = _max_SxS_( _flat_528, _flat_529); 
  res = with {
        /* Partn */
        (_flat_530 <= iv < shp)
        { 
          _flat_533 = _sel_VxA_( iv, B); 
          _flat_532 = _max_SxS_( A, _flat_533); 
        } : _flat_532 ; 
         } :
      genarray( shp, _flat_527); 
  res__SSA0_1 = _type_conv_( double[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::max(...) [ body ]
 ****************************************************************************/
inline
double ScalarArith::max( double A { ,NN } , double B { ,NN } )
/*
 *  max ::  ---
 */
{ 
  double _flat_41__SSA0_1 { , NN } ; 
  double _flat_41 { , NN } ; 

  _flat_41 = _max_SxS_( A, B); 
  _flat_41__SSA0_1 = _type_conv_( double, _flat_41); 
  return( _flat_41__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::<=(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::<=( double[+] A { ,NN } , double[+] B { ,NN } )
/*
 *  <= ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1045 { , NN } ; 
  double _flat_1046 { , NN } ; 
  double _flat_1047 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1040 { , NN } ; 
  double{1.0...} _flat_1041 { , NN } ; 
  double{1.0...} _flat_1042 { , NN } ; 
  int[.] _flat_1043 { , NN } ; 
  int{0} _flat_1044 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_1044 = 0; 
  _flat_1043 = _mul_SxV_( _flat_1044, shp); 
  _flat_1042 = wrapper:ArrayArith::one( B) ; 
  _flat_1041 = wrapper:ArrayArith::one( A) ; 
  _flat_1040 = _le_SxS_( _flat_1041, _flat_1042); 
  res = with {
        /* Partn */
        (_flat_1043 <= iv < shp)
        { 
          _flat_1047 = _sel_VxA_( iv, B); 
          _flat_1046 = _sel_VxA_( iv, A); 
          _flat_1045 = _le_SxS_( _flat_1046, _flat_1047); 
        } : _flat_1045 ; 
         } :
      genarray( shp, _flat_1040); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::<=(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::<=( double[+] A { ,NN } , double B { ,NN } )
/*
 *  <= ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1132 { , NN } ; 
  double _flat_1133 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1127 { , NN } ; 
  double{1.0...} _flat_1128 { , NN } ; 
  double{1.0...} _flat_1129 { , NN } ; 
  int[.] _flat_1130 { , NN } ; 
  int{0} _flat_1131 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1131 = 0; 
  _flat_1130 = _mul_SxV_( _flat_1131, shp); 
  _flat_1129 = wrapper:ArrayArith::one( B) ; 
  _flat_1128 = wrapper:ArrayArith::one( A) ; 
  _flat_1127 = _le_SxS_( _flat_1128, _flat_1129); 
  res = with {
        /* Partn */
        (_flat_1130 <= iv < shp)
        { 
          _flat_1133 = _sel_VxA_( iv, A); 
          _flat_1132 = _le_SxS_( _flat_1133, B); 
        } : _flat_1132 ; 
         } :
      genarray( shp, _flat_1127); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::<=(...) [ body ]
 ****************************************************************************/
inline
bool[+] ArrayArith::<=( double A { ,NN } , double[+] B { ,NN } )
/*
 *  <= ::  ---
 */
{ 
  bool[+] res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool _flat_1090 { , NN } ; 
  double _flat_1091 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1085 { , NN } ; 
  double{1.0...} _flat_1086 { , NN } ; 
  double{1.0...} _flat_1087 { , NN } ; 
  int[.] _flat_1088 { , NN } ; 
  int{0} _flat_1089 { , NN } ; 
  int[.] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_1089 = 0; 
  _flat_1088 = _mul_SxV_( _flat_1089, shp); 
  _flat_1087 = wrapper:ArrayArith::one( B) ; 
  _flat_1086 = wrapper:ArrayArith::one( A) ; 
  _flat_1085 = _le_SxS_( _flat_1086, _flat_1087); 
  res = with {
        /* Partn */
        (_flat_1088 <= iv < shp)
        { 
          _flat_1091 = _sel_VxA_( iv, B); 
          _flat_1090 = _le_SxS_( A, _flat_1091); 
        } : _flat_1090 ; 
         } :
      genarray( shp, _flat_1085); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::<=(...) [ body ]
 ****************************************************************************/
inline
bool ScalarArith::<=( double A { ,NN } , double B { ,NN } )
/*
 *  <= ::  ---
 */
{ 
  bool _flat_83__SSA0_1 { , NN } ; 
  bool _flat_83 { , NN } ; 

  _flat_83 = _le_SxS_( A, B); 
  _flat_83__SSA0_1 = _type_conv_( bool, _flat_83); 
  return( _flat_83__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_p::sel( int[.] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ulonglong[*] res { , NN } ; 
  ulonglong _flat_127 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulonglong{0} _flat_124 { , NN } ; 
  int[.] _flat_125 { , NN } ; 
  int{0} _flat_126 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_119 { , NN } ; 
  int[1]{0} _flat_120 { , NN } ; 
  int{0} _flat_121 { , NN } ; 
  int[1] _flat_122 { , NN } ; 
  int[.] _flat_123 { , NN } ; 

  _flat_123 = _shape_A_( array); 
  _flat_122 = _shape_A_( idx); 
  _flat_121 = 0; 
  _flat_120 = [ _flat_121 ]; 
  _flat_119 = _sel_VxA_( _flat_120, _flat_122); 
  new_shape = _drop_SxV_( _flat_119, _flat_123); 
  _flat_126 = 0; 
  _flat_125 = _mul_SxV_( _flat_126, new_shape); 
  _flat_124 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_125 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_127 = _sel_VxA_( new_idx, array); 
        } : _flat_127 ; 
         } :
      genarray( new_shape, _flat_124); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_p::sel( int[.] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ulong[*] res { , NN } ; 
  ulong _flat_118 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulong{0} _flat_115 { , NN } ; 
  int[.] _flat_116 { , NN } ; 
  int{0} _flat_117 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_110 { , NN } ; 
  int[1]{0} _flat_111 { , NN } ; 
  int{0} _flat_112 { , NN } ; 
  int[1] _flat_113 { , NN } ; 
  int[.] _flat_114 { , NN } ; 

  _flat_114 = _shape_A_( array); 
  _flat_113 = _shape_A_( idx); 
  _flat_112 = 0; 
  _flat_111 = [ _flat_112 ]; 
  _flat_110 = _sel_VxA_( _flat_111, _flat_113); 
  new_shape = _drop_SxV_( _flat_110, _flat_114); 
  _flat_117 = 0; 
  _flat_116 = _mul_SxV_( _flat_117, new_shape); 
  _flat_115 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_116 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_118 = _sel_VxA_( new_idx, array); 
        } : _flat_118 ; 
         } :
      genarray( new_shape, _flat_115); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_p::sel( int[.] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  uint[*] res { , NN } ; 
  uint _flat_109 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  uint{0} _flat_106 { , NN } ; 
  int[.] _flat_107 { , NN } ; 
  int{0} _flat_108 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_101 { , NN } ; 
  int[1]{0} _flat_102 { , NN } ; 
  int{0} _flat_103 { , NN } ; 
  int[1] _flat_104 { , NN } ; 
  int[.] _flat_105 { , NN } ; 

  _flat_105 = _shape_A_( array); 
  _flat_104 = _shape_A_( idx); 
  _flat_103 = 0; 
  _flat_102 = [ _flat_103 ]; 
  _flat_101 = _sel_VxA_( _flat_102, _flat_104); 
  new_shape = _drop_SxV_( _flat_101, _flat_105); 
  _flat_108 = 0; 
  _flat_107 = _mul_SxV_( _flat_108, new_shape); 
  _flat_106 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_107 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_109 = _sel_VxA_( new_idx, array); 
        } : _flat_109 ; 
         } :
      genarray( new_shape, _flat_106); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_p::sel( int[.] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ushort[*] res { , NN } ; 
  ushort _flat_100 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ushort{0} _flat_97 { , NN } ; 
  int[.] _flat_98 { , NN } ; 
  int{0} _flat_99 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_92 { , NN } ; 
  int[1]{0} _flat_93 { , NN } ; 
  int{0} _flat_94 { , NN } ; 
  int[1] _flat_95 { , NN } ; 
  int[.] _flat_96 { , NN } ; 

  _flat_96 = _shape_A_( array); 
  _flat_95 = _shape_A_( idx); 
  _flat_94 = 0; 
  _flat_93 = [ _flat_94 ]; 
  _flat_92 = _sel_VxA_( _flat_93, _flat_95); 
  new_shape = _drop_SxV_( _flat_92, _flat_96); 
  _flat_99 = 0; 
  _flat_98 = _mul_SxV_( _flat_99, new_shape); 
  _flat_97 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_98 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_100 = _sel_VxA_( new_idx, array); 
        } : _flat_100 ; 
         } :
      genarray( new_shape, _flat_97); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_p::sel( int[.] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  ubyte[*] res { , NN } ; 
  ubyte _flat_91 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ubyte{} _flat_88 { , NN } ; 
  int[.] _flat_89 { , NN } ; 
  int{0} _flat_90 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_83 { , NN } ; 
  int[1]{0} _flat_84 { , NN } ; 
  int{0} _flat_85 { , NN } ; 
  int[1] _flat_86 { , NN } ; 
  int[.] _flat_87 { , NN } ; 

  _flat_87 = _shape_A_( array); 
  _flat_86 = _shape_A_( idx); 
  _flat_85 = 0; 
  _flat_84 = [ _flat_85 ]; 
  _flat_83 = _sel_VxA_( _flat_84, _flat_86); 
  new_shape = _drop_SxV_( _flat_83, _flat_87); 
  _flat_90 = 0; 
  _flat_89 = _mul_SxV_( _flat_90, new_shape); 
  _flat_88 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_89 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_91 = _sel_VxA_( new_idx, array); 
        } : _flat_91 ; 
         } :
      genarray( new_shape, _flat_88); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_p::sel( int[.] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  longlong[*] res { , NN } ; 
  longlong _flat_82 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  longlong{0} _flat_79 { , NN } ; 
  int[.] _flat_80 { , NN } ; 
  int{0} _flat_81 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_74 { , NN } ; 
  int[1]{0} _flat_75 { , NN } ; 
  int{0} _flat_76 { , NN } ; 
  int[1] _flat_77 { , NN } ; 
  int[.] _flat_78 { , NN } ; 

  _flat_78 = _shape_A_( array); 
  _flat_77 = _shape_A_( idx); 
  _flat_76 = 0; 
  _flat_75 = [ _flat_76 ]; 
  _flat_74 = _sel_VxA_( _flat_75, _flat_77); 
  new_shape = _drop_SxV_( _flat_74, _flat_78); 
  _flat_81 = 0; 
  _flat_80 = _mul_SxV_( _flat_81, new_shape); 
  _flat_79 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_80 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_82 = _sel_VxA_( new_idx, array); 
        } : _flat_82 ; 
         } :
      genarray( new_shape, _flat_79); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_p::sel( int[.] idx { ,NN } , long[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  long[*] res { , NN } ; 
  long _flat_73 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  long{0} _flat_70 { , NN } ; 
  int[.] _flat_71 { , NN } ; 
  int{0} _flat_72 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_65 { , NN } ; 
  int[1]{0} _flat_66 { , NN } ; 
  int{0} _flat_67 { , NN } ; 
  int[1] _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 

  _flat_69 = _shape_A_( array); 
  _flat_68 = _shape_A_( idx); 
  _flat_67 = 0; 
  _flat_66 = [ _flat_67 ]; 
  _flat_65 = _sel_VxA_( _flat_66, _flat_68); 
  new_shape = _drop_SxV_( _flat_65, _flat_69); 
  _flat_72 = 0; 
  _flat_71 = _mul_SxV_( _flat_72, new_shape); 
  _flat_70 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_71 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_73 = _sel_VxA_( new_idx, array); 
        } : _flat_73 ; 
         } :
      genarray( new_shape, _flat_70); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_p::sel( int[.] idx { ,NN } , short[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  short[*] res { , NN } ; 
  short _flat_64 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  short{0} _flat_61 { , NN } ; 
  int[.] _flat_62 { , NN } ; 
  int{0} _flat_63 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_56 { , NN } ; 
  int[1]{0} _flat_57 { , NN } ; 
  int{0} _flat_58 { , NN } ; 
  int[1] _flat_59 { , NN } ; 
  int[.] _flat_60 { , NN } ; 

  _flat_60 = _shape_A_( array); 
  _flat_59 = _shape_A_( idx); 
  _flat_58 = 0; 
  _flat_57 = [ _flat_58 ]; 
  _flat_56 = _sel_VxA_( _flat_57, _flat_59); 
  new_shape = _drop_SxV_( _flat_56, _flat_60); 
  _flat_63 = 0; 
  _flat_62 = _mul_SxV_( _flat_63, new_shape); 
  _flat_61 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_62 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_64 = _sel_VxA_( new_idx, array); 
        } : _flat_64 ; 
         } :
      genarray( new_shape, _flat_61); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_p::sel( int[.] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  byte[*] res { , NN } ; 
  byte _flat_55 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  byte{} _flat_52 { , NN } ; 
  int[.] _flat_53 { , NN } ; 
  int{0} _flat_54 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_47 { , NN } ; 
  int[1]{0} _flat_48 { , NN } ; 
  int{0} _flat_49 { , NN } ; 
  int[1] _flat_50 { , NN } ; 
  int[.] _flat_51 { , NN } ; 

  _flat_51 = _shape_A_( array); 
  _flat_50 = _shape_A_( idx); 
  _flat_49 = 0; 
  _flat_48 = [ _flat_49 ]; 
  _flat_47 = _sel_VxA_( _flat_48, _flat_50); 
  new_shape = _drop_SxV_( _flat_47, _flat_51); 
  _flat_54 = 0; 
  _flat_53 = _mul_SxV_( _flat_54, new_shape); 
  _flat_52 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_53 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_55 = _sel_VxA_( new_idx, array); 
        } : _flat_55 ; 
         } :
      genarray( new_shape, _flat_52); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_p::sel( int[.] idx { ,NN } , char[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  char[*] res { , NN } ; 
  char _flat_46 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  char{ } _flat_43 { , NN } ; 
  int[.] _flat_44 { , NN } ; 
  int{0} _flat_45 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_38 { , NN } ; 
  int[1]{0} _flat_39 { , NN } ; 
  int{0} _flat_40 { , NN } ; 
  int[1] _flat_41 { , NN } ; 
  int[.] _flat_42 { , NN } ; 

  _flat_42 = _shape_A_( array); 
  _flat_41 = _shape_A_( idx); 
  _flat_40 = 0; 
  _flat_39 = [ _flat_40 ]; 
  _flat_38 = _sel_VxA_( _flat_39, _flat_41); 
  new_shape = _drop_SxV_( _flat_38, _flat_42); 
  _flat_45 = 0; 
  _flat_44 = _mul_SxV_( _flat_45, new_shape); 
  _flat_43 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_44 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_46 = _sel_VxA_( new_idx, array); 
        } : _flat_46 ; 
         } :
      genarray( new_shape, _flat_43); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_p::sel( int[.] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_37 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_34 { , NN } ; 
  int[.] _flat_35 { , NN } ; 
  int{0} _flat_36 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_29 { , NN } ; 
  int[1]{0} _flat_30 { , NN } ; 
  int{0} _flat_31 { , NN } ; 
  int[1] _flat_32 { , NN } ; 
  int[.] _flat_33 { , NN } ; 

  _flat_33 = _shape_A_( array); 
  _flat_32 = _shape_A_( idx); 
  _flat_31 = 0; 
  _flat_30 = [ _flat_31 ]; 
  _flat_29 = _sel_VxA_( _flat_30, _flat_32); 
  new_shape = _drop_SxV_( _flat_29, _flat_33); 
  _flat_36 = 0; 
  _flat_35 = _mul_SxV_( _flat_36, new_shape); 
  _flat_34 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_35 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_37 = _sel_VxA_( new_idx, array); 
        } : _flat_37 ; 
         } :
      genarray( new_shape, _flat_34); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_p::sel( int[.] idx { ,NN } , double[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  double[*] res { , NN } ; 
  double _flat_28 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_25 { , NN } ; 
  int[.] _flat_26 { , NN } ; 
  int{0} _flat_27 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_20 { , NN } ; 
  int[1]{0} _flat_21 { , NN } ; 
  int{0} _flat_22 { , NN } ; 
  int[1] _flat_23 { , NN } ; 
  int[.] _flat_24 { , NN } ; 

  _flat_24 = _shape_A_( array); 
  _flat_23 = _shape_A_( idx); 
  _flat_22 = 0; 
  _flat_21 = [ _flat_22 ]; 
  _flat_20 = _sel_VxA_( _flat_21, _flat_23); 
  new_shape = _drop_SxV_( _flat_20, _flat_24); 
  _flat_27 = 0; 
  _flat_26 = _mul_SxV_( _flat_27, new_shape); 
  _flat_25 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_26 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_28 = _sel_VxA_( new_idx, array); 
        } : _flat_28 ; 
         } :
      genarray( new_shape, _flat_25); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_p::sel( int[.] idx { ,NN } , float[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  float[*] res { , NN } ; 
  float _flat_19 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  float{0.0...} _flat_16 { , NN } ; 
  int[.] _flat_17 { , NN } ; 
  int{0} _flat_18 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_11 { , NN } ; 
  int[1]{0} _flat_12 { , NN } ; 
  int{0} _flat_13 { , NN } ; 
  int[1] _flat_14 { , NN } ; 
  int[.] _flat_15 { , NN } ; 

  _flat_15 = _shape_A_( array); 
  _flat_14 = _shape_A_( idx); 
  _flat_13 = 0; 
  _flat_12 = [ _flat_13 ]; 
  _flat_11 = _sel_VxA_( _flat_12, _flat_14); 
  new_shape = _drop_SxV_( _flat_11, _flat_15); 
  _flat_18 = 0; 
  _flat_17 = _mul_SxV_( _flat_18, new_shape); 
  _flat_16 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_17 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_19 = _sel_VxA_( new_idx, array); 
        } : _flat_19 ; 
         } :
      genarray( new_shape, _flat_16); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_p::sel( int[.] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_10 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_7 { , NN } ; 
  int[.] _flat_8 { , NN } ; 
  int{0} _flat_9 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_2 { , NN } ; 
  int[1]{0} _flat_3 { , NN } ; 
  int{0} _flat_4 { , NN } ; 
  int[1] _flat_5 { , NN } ; 
  int[.] _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_5 = _shape_A_( idx); 
  _flat_4 = 0; 
  _flat_3 = [ _flat_4 ]; 
  _flat_2 = _sel_VxA_( _flat_3, _flat_5); 
  new_shape = _drop_SxV_( _flat_2, _flat_6); 
  _flat_9 = 0; 
  _flat_8 = _mul_SxV_( _flat_9, new_shape); 
  _flat_7 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_8 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_10 = _sel_VxA_( new_idx, array); 
        } : _flat_10 ; 
         } :
      genarray( new_shape, _flat_7); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulonglong[*] res { , NN } ; 
  ulonglong _flat_253 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulonglong{0} _flat_250 { , NN } ; 
  int[.] _flat_251 { , NN } ; 
  int{0} _flat_252 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_245 { , NN } ; 
  int[1]{0} _flat_246 { , NN } ; 
  int{0} _flat_247 { , NN } ; 
  int[1]{1} _flat_248 { , NN } ; 
  int[.] _flat_249 { , NN } ; 

  _flat_249 = _shape_A_( array); 
  _flat_248 = _shape_A_( idx); 
  _flat_247 = 0; 
  _flat_246 = [ _flat_247 ]; 
  _flat_245 = _sel_VxA_( _flat_246, _flat_248); 
  new_shape = _drop_SxV_( _flat_245, _flat_249); 
  _flat_252 = 0; 
  _flat_251 = _mul_SxV_( _flat_252, new_shape); 
  _flat_250 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_251 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_253 = _sel_VxA_( new_idx, array); 
        } : _flat_253 ; 
         } :
      genarray( new_shape, _flat_250); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulonglong[*] res { , NN } ; 
  ulonglong _flat_253 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulonglong{0} _flat_250 { , NN } ; 
  int[.] _flat_251 { , NN } ; 
  int{0} _flat_252 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_245 { , NN } ; 
  int[1]{0} _flat_246 { , NN } ; 
  int{0} _flat_247 { , NN } ; 
  int[1] _flat_248 { , NN } ; 
  int[.] _flat_249 { , NN } ; 

  _flat_249 = _shape_A_( array); 
  _flat_248 = _shape_A_( idx); 
  _flat_247 = 0; 
  _flat_246 = [ _flat_247 ]; 
  _flat_245 = _sel_VxA_( _flat_246, _flat_248); 
  new_shape = _drop_SxV_( _flat_245, _flat_249); 
  _flat_252 = 0; 
  _flat_251 = _mul_SxV_( _flat_252, new_shape); 
  _flat_250 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_251 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_253 = _sel_VxA_( new_idx, array); 
        } : _flat_253 ; 
         } :
      genarray( new_shape, _flat_250); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulong[*] res { , NN } ; 
  ulong _flat_244 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulong{0} _flat_241 { , NN } ; 
  int[.] _flat_242 { , NN } ; 
  int{0} _flat_243 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_236 { , NN } ; 
  int[1]{0} _flat_237 { , NN } ; 
  int{0} _flat_238 { , NN } ; 
  int[1]{1} _flat_239 { , NN } ; 
  int[.] _flat_240 { , NN } ; 

  _flat_240 = _shape_A_( array); 
  _flat_239 = _shape_A_( idx); 
  _flat_238 = 0; 
  _flat_237 = [ _flat_238 ]; 
  _flat_236 = _sel_VxA_( _flat_237, _flat_239); 
  new_shape = _drop_SxV_( _flat_236, _flat_240); 
  _flat_243 = 0; 
  _flat_242 = _mul_SxV_( _flat_243, new_shape); 
  _flat_241 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_242 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_244 = _sel_VxA_( new_idx, array); 
        } : _flat_244 ; 
         } :
      genarray( new_shape, _flat_241); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ulong[*] res { , NN } ; 
  ulong _flat_244 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ulong{0} _flat_241 { , NN } ; 
  int[.] _flat_242 { , NN } ; 
  int{0} _flat_243 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_236 { , NN } ; 
  int[1]{0} _flat_237 { , NN } ; 
  int{0} _flat_238 { , NN } ; 
  int[1] _flat_239 { , NN } ; 
  int[.] _flat_240 { , NN } ; 

  _flat_240 = _shape_A_( array); 
  _flat_239 = _shape_A_( idx); 
  _flat_238 = 0; 
  _flat_237 = [ _flat_238 ]; 
  _flat_236 = _sel_VxA_( _flat_237, _flat_239); 
  new_shape = _drop_SxV_( _flat_236, _flat_240); 
  _flat_243 = 0; 
  _flat_242 = _mul_SxV_( _flat_243, new_shape); 
  _flat_241 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_242 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_244 = _sel_VxA_( new_idx, array); 
        } : _flat_244 ; 
         } :
      genarray( new_shape, _flat_241); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  uint[*] res { , NN } ; 
  uint _flat_235 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  uint{0} _flat_232 { , NN } ; 
  int[.] _flat_233 { , NN } ; 
  int{0} _flat_234 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_227 { , NN } ; 
  int[1]{0} _flat_228 { , NN } ; 
  int{0} _flat_229 { , NN } ; 
  int[1]{1} _flat_230 { , NN } ; 
  int[.] _flat_231 { , NN } ; 

  _flat_231 = _shape_A_( array); 
  _flat_230 = _shape_A_( idx); 
  _flat_229 = 0; 
  _flat_228 = [ _flat_229 ]; 
  _flat_227 = _sel_VxA_( _flat_228, _flat_230); 
  new_shape = _drop_SxV_( _flat_227, _flat_231); 
  _flat_234 = 0; 
  _flat_233 = _mul_SxV_( _flat_234, new_shape); 
  _flat_232 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_233 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_235 = _sel_VxA_( new_idx, array); 
        } : _flat_235 ; 
         } :
      genarray( new_shape, _flat_232); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  uint[*] res { , NN } ; 
  uint _flat_235 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  uint{0} _flat_232 { , NN } ; 
  int[.] _flat_233 { , NN } ; 
  int{0} _flat_234 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_227 { , NN } ; 
  int[1]{0} _flat_228 { , NN } ; 
  int{0} _flat_229 { , NN } ; 
  int[1] _flat_230 { , NN } ; 
  int[.] _flat_231 { , NN } ; 

  _flat_231 = _shape_A_( array); 
  _flat_230 = _shape_A_( idx); 
  _flat_229 = 0; 
  _flat_228 = [ _flat_229 ]; 
  _flat_227 = _sel_VxA_( _flat_228, _flat_230); 
  new_shape = _drop_SxV_( _flat_227, _flat_231); 
  _flat_234 = 0; 
  _flat_233 = _mul_SxV_( _flat_234, new_shape); 
  _flat_232 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_233 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_235 = _sel_VxA_( new_idx, array); 
        } : _flat_235 ; 
         } :
      genarray( new_shape, _flat_232); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ushort[*] res { , NN } ; 
  ushort _flat_226 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ushort{0} _flat_223 { , NN } ; 
  int[.] _flat_224 { , NN } ; 
  int{0} _flat_225 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_218 { , NN } ; 
  int[1]{0} _flat_219 { , NN } ; 
  int{0} _flat_220 { , NN } ; 
  int[1]{1} _flat_221 { , NN } ; 
  int[.] _flat_222 { , NN } ; 

  _flat_222 = _shape_A_( array); 
  _flat_221 = _shape_A_( idx); 
  _flat_220 = 0; 
  _flat_219 = [ _flat_220 ]; 
  _flat_218 = _sel_VxA_( _flat_219, _flat_221); 
  new_shape = _drop_SxV_( _flat_218, _flat_222); 
  _flat_225 = 0; 
  _flat_224 = _mul_SxV_( _flat_225, new_shape); 
  _flat_223 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_224 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_226 = _sel_VxA_( new_idx, array); 
        } : _flat_226 ; 
         } :
      genarray( new_shape, _flat_223); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ushort[*] res { , NN } ; 
  ushort _flat_226 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ushort{0} _flat_223 { , NN } ; 
  int[.] _flat_224 { , NN } ; 
  int{0} _flat_225 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_218 { , NN } ; 
  int[1]{0} _flat_219 { , NN } ; 
  int{0} _flat_220 { , NN } ; 
  int[1] _flat_221 { , NN } ; 
  int[.] _flat_222 { , NN } ; 

  _flat_222 = _shape_A_( array); 
  _flat_221 = _shape_A_( idx); 
  _flat_220 = 0; 
  _flat_219 = [ _flat_220 ]; 
  _flat_218 = _sel_VxA_( _flat_219, _flat_221); 
  new_shape = _drop_SxV_( _flat_218, _flat_222); 
  _flat_225 = 0; 
  _flat_224 = _mul_SxV_( _flat_225, new_shape); 
  _flat_223 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_224 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_226 = _sel_VxA_( new_idx, array); 
        } : _flat_226 ; 
         } :
      genarray( new_shape, _flat_223); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ubyte[*] res { , NN } ; 
  ubyte _flat_217 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ubyte{} _flat_214 { , NN } ; 
  int[.] _flat_215 { , NN } ; 
  int{0} _flat_216 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_209 { , NN } ; 
  int[1]{0} _flat_210 { , NN } ; 
  int{0} _flat_211 { , NN } ; 
  int[1]{1} _flat_212 { , NN } ; 
  int[.] _flat_213 { , NN } ; 

  _flat_213 = _shape_A_( array); 
  _flat_212 = _shape_A_( idx); 
  _flat_211 = 0; 
  _flat_210 = [ _flat_211 ]; 
  _flat_209 = _sel_VxA_( _flat_210, _flat_212); 
  new_shape = _drop_SxV_( _flat_209, _flat_213); 
  _flat_216 = 0; 
  _flat_215 = _mul_SxV_( _flat_216, new_shape); 
  _flat_214 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_215 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_217 = _sel_VxA_( new_idx, array); 
        } : _flat_217 ; 
         } :
      genarray( new_shape, _flat_214); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  ubyte[*] res { , NN } ; 
  ubyte _flat_217 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  ubyte{} _flat_214 { , NN } ; 
  int[.] _flat_215 { , NN } ; 
  int{0} _flat_216 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_209 { , NN } ; 
  int[1]{0} _flat_210 { , NN } ; 
  int{0} _flat_211 { , NN } ; 
  int[1] _flat_212 { , NN } ; 
  int[.] _flat_213 { , NN } ; 

  _flat_213 = _shape_A_( array); 
  _flat_212 = _shape_A_( idx); 
  _flat_211 = 0; 
  _flat_210 = [ _flat_211 ]; 
  _flat_209 = _sel_VxA_( _flat_210, _flat_212); 
  new_shape = _drop_SxV_( _flat_209, _flat_213); 
  _flat_216 = 0; 
  _flat_215 = _mul_SxV_( _flat_216, new_shape); 
  _flat_214 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_215 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_217 = _sel_VxA_( new_idx, array); 
        } : _flat_217 ; 
         } :
      genarray( new_shape, _flat_214); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  longlong[*] res { , NN } ; 
  longlong _flat_208 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  longlong{0} _flat_205 { , NN } ; 
  int[.] _flat_206 { , NN } ; 
  int{0} _flat_207 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_200 { , NN } ; 
  int[1]{0} _flat_201 { , NN } ; 
  int{0} _flat_202 { , NN } ; 
  int[1]{1} _flat_203 { , NN } ; 
  int[.] _flat_204 { , NN } ; 

  _flat_204 = _shape_A_( array); 
  _flat_203 = _shape_A_( idx); 
  _flat_202 = 0; 
  _flat_201 = [ _flat_202 ]; 
  _flat_200 = _sel_VxA_( _flat_201, _flat_203); 
  new_shape = _drop_SxV_( _flat_200, _flat_204); 
  _flat_207 = 0; 
  _flat_206 = _mul_SxV_( _flat_207, new_shape); 
  _flat_205 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_206 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_208 = _sel_VxA_( new_idx, array); 
        } : _flat_208 ; 
         } :
      genarray( new_shape, _flat_205); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  longlong[*] res { , NN } ; 
  longlong _flat_208 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  longlong{0} _flat_205 { , NN } ; 
  int[.] _flat_206 { , NN } ; 
  int{0} _flat_207 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_200 { , NN } ; 
  int[1]{0} _flat_201 { , NN } ; 
  int{0} _flat_202 { , NN } ; 
  int[1] _flat_203 { , NN } ; 
  int[.] _flat_204 { , NN } ; 

  _flat_204 = _shape_A_( array); 
  _flat_203 = _shape_A_( idx); 
  _flat_202 = 0; 
  _flat_201 = [ _flat_202 ]; 
  _flat_200 = _sel_VxA_( _flat_201, _flat_203); 
  new_shape = _drop_SxV_( _flat_200, _flat_204); 
  _flat_207 = 0; 
  _flat_206 = _mul_SxV_( _flat_207, new_shape); 
  _flat_205 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_206 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_208 = _sel_VxA_( new_idx, array); 
        } : _flat_208 ; 
         } :
      genarray( new_shape, _flat_205); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  long[*] res { , NN } ; 
  long _flat_199 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  long{0} _flat_196 { , NN } ; 
  int[.] _flat_197 { , NN } ; 
  int{0} _flat_198 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_191 { , NN } ; 
  int[1]{0} _flat_192 { , NN } ; 
  int{0} _flat_193 { , NN } ; 
  int[1]{1} _flat_194 { , NN } ; 
  int[.] _flat_195 { , NN } ; 

  _flat_195 = _shape_A_( array); 
  _flat_194 = _shape_A_( idx); 
  _flat_193 = 0; 
  _flat_192 = [ _flat_193 ]; 
  _flat_191 = _sel_VxA_( _flat_192, _flat_194); 
  new_shape = _drop_SxV_( _flat_191, _flat_195); 
  _flat_198 = 0; 
  _flat_197 = _mul_SxV_( _flat_198, new_shape); 
  _flat_196 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_197 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_199 = _sel_VxA_( new_idx, array); 
        } : _flat_199 ; 
         } :
      genarray( new_shape, _flat_196); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  long[*] res { , NN } ; 
  long _flat_199 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  long{0} _flat_196 { , NN } ; 
  int[.] _flat_197 { , NN } ; 
  int{0} _flat_198 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_191 { , NN } ; 
  int[1]{0} _flat_192 { , NN } ; 
  int{0} _flat_193 { , NN } ; 
  int[1] _flat_194 { , NN } ; 
  int[.] _flat_195 { , NN } ; 

  _flat_195 = _shape_A_( array); 
  _flat_194 = _shape_A_( idx); 
  _flat_193 = 0; 
  _flat_192 = [ _flat_193 ]; 
  _flat_191 = _sel_VxA_( _flat_192, _flat_194); 
  new_shape = _drop_SxV_( _flat_191, _flat_195); 
  _flat_198 = 0; 
  _flat_197 = _mul_SxV_( _flat_198, new_shape); 
  _flat_196 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_197 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_199 = _sel_VxA_( new_idx, array); 
        } : _flat_199 ; 
         } :
      genarray( new_shape, _flat_196); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  short[*] res { , NN } ; 
  short _flat_190 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  short{0} _flat_187 { , NN } ; 
  int[.] _flat_188 { , NN } ; 
  int{0} _flat_189 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_182 { , NN } ; 
  int[1]{0} _flat_183 { , NN } ; 
  int{0} _flat_184 { , NN } ; 
  int[1]{1} _flat_185 { , NN } ; 
  int[.] _flat_186 { , NN } ; 

  _flat_186 = _shape_A_( array); 
  _flat_185 = _shape_A_( idx); 
  _flat_184 = 0; 
  _flat_183 = [ _flat_184 ]; 
  _flat_182 = _sel_VxA_( _flat_183, _flat_185); 
  new_shape = _drop_SxV_( _flat_182, _flat_186); 
  _flat_189 = 0; 
  _flat_188 = _mul_SxV_( _flat_189, new_shape); 
  _flat_187 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_188 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_190 = _sel_VxA_( new_idx, array); 
        } : _flat_190 ; 
         } :
      genarray( new_shape, _flat_187); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  short[*] res { , NN } ; 
  short _flat_190 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  short{0} _flat_187 { , NN } ; 
  int[.] _flat_188 { , NN } ; 
  int{0} _flat_189 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_182 { , NN } ; 
  int[1]{0} _flat_183 { , NN } ; 
  int{0} _flat_184 { , NN } ; 
  int[1] _flat_185 { , NN } ; 
  int[.] _flat_186 { , NN } ; 

  _flat_186 = _shape_A_( array); 
  _flat_185 = _shape_A_( idx); 
  _flat_184 = 0; 
  _flat_183 = [ _flat_184 ]; 
  _flat_182 = _sel_VxA_( _flat_183, _flat_185); 
  new_shape = _drop_SxV_( _flat_182, _flat_186); 
  _flat_189 = 0; 
  _flat_188 = _mul_SxV_( _flat_189, new_shape); 
  _flat_187 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_188 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_190 = _sel_VxA_( new_idx, array); 
        } : _flat_190 ; 
         } :
      genarray( new_shape, _flat_187); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  byte[*] res { , NN } ; 
  byte _flat_181 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  byte{} _flat_178 { , NN } ; 
  int[.] _flat_179 { , NN } ; 
  int{0} _flat_180 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_173 { , NN } ; 
  int[1]{0} _flat_174 { , NN } ; 
  int{0} _flat_175 { , NN } ; 
  int[1]{1} _flat_176 { , NN } ; 
  int[.] _flat_177 { , NN } ; 

  _flat_177 = _shape_A_( array); 
  _flat_176 = _shape_A_( idx); 
  _flat_175 = 0; 
  _flat_174 = [ _flat_175 ]; 
  _flat_173 = _sel_VxA_( _flat_174, _flat_176); 
  new_shape = _drop_SxV_( _flat_173, _flat_177); 
  _flat_180 = 0; 
  _flat_179 = _mul_SxV_( _flat_180, new_shape); 
  _flat_178 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_179 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_181 = _sel_VxA_( new_idx, array); 
        } : _flat_181 ; 
         } :
      genarray( new_shape, _flat_178); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  byte[*] res { , NN } ; 
  byte _flat_181 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  byte{} _flat_178 { , NN } ; 
  int[.] _flat_179 { , NN } ; 
  int{0} _flat_180 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_173 { , NN } ; 
  int[1]{0} _flat_174 { , NN } ; 
  int{0} _flat_175 { , NN } ; 
  int[1] _flat_176 { , NN } ; 
  int[.] _flat_177 { , NN } ; 

  _flat_177 = _shape_A_( array); 
  _flat_176 = _shape_A_( idx); 
  _flat_175 = 0; 
  _flat_174 = [ _flat_175 ]; 
  _flat_173 = _sel_VxA_( _flat_174, _flat_176); 
  new_shape = _drop_SxV_( _flat_173, _flat_177); 
  _flat_180 = 0; 
  _flat_179 = _mul_SxV_( _flat_180, new_shape); 
  _flat_178 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_179 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_181 = _sel_VxA_( new_idx, array); 
        } : _flat_181 ; 
         } :
      genarray( new_shape, _flat_178); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  char[*] res { , NN } ; 
  char _flat_172 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  char{ } _flat_169 { , NN } ; 
  int[.] _flat_170 { , NN } ; 
  int{0} _flat_171 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_164 { , NN } ; 
  int[1]{0} _flat_165 { , NN } ; 
  int{0} _flat_166 { , NN } ; 
  int[1]{1} _flat_167 { , NN } ; 
  int[.] _flat_168 { , NN } ; 

  _flat_168 = _shape_A_( array); 
  _flat_167 = _shape_A_( idx); 
  _flat_166 = 0; 
  _flat_165 = [ _flat_166 ]; 
  _flat_164 = _sel_VxA_( _flat_165, _flat_167); 
  new_shape = _drop_SxV_( _flat_164, _flat_168); 
  _flat_171 = 0; 
  _flat_170 = _mul_SxV_( _flat_171, new_shape); 
  _flat_169 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_170 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_172 = _sel_VxA_( new_idx, array); 
        } : _flat_172 ; 
         } :
      genarray( new_shape, _flat_169); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  char[*] res { , NN } ; 
  char _flat_172 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  char{ } _flat_169 { , NN } ; 
  int[.] _flat_170 { , NN } ; 
  int{0} _flat_171 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_164 { , NN } ; 
  int[1]{0} _flat_165 { , NN } ; 
  int{0} _flat_166 { , NN } ; 
  int[1] _flat_167 { , NN } ; 
  int[.] _flat_168 { , NN } ; 

  _flat_168 = _shape_A_( array); 
  _flat_167 = _shape_A_( idx); 
  _flat_166 = 0; 
  _flat_165 = [ _flat_166 ]; 
  _flat_164 = _sel_VxA_( _flat_165, _flat_167); 
  new_shape = _drop_SxV_( _flat_164, _flat_168); 
  _flat_171 = 0; 
  _flat_170 = _mul_SxV_( _flat_171, new_shape); 
  _flat_169 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_170 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_172 = _sel_VxA_( new_idx, array); 
        } : _flat_172 ; 
         } :
      genarray( new_shape, _flat_169); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_163 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_160 { , NN } ; 
  int[.] _flat_161 { , NN } ; 
  int{0} _flat_162 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_155 { , NN } ; 
  int[1]{0} _flat_156 { , NN } ; 
  int{0} _flat_157 { , NN } ; 
  int[1]{1} _flat_158 { , NN } ; 
  int[.] _flat_159 { , NN } ; 

  _flat_159 = _shape_A_( array); 
  _flat_158 = _shape_A_( idx); 
  _flat_157 = 0; 
  _flat_156 = [ _flat_157 ]; 
  _flat_155 = _sel_VxA_( _flat_156, _flat_158); 
  new_shape = _drop_SxV_( _flat_155, _flat_159); 
  _flat_162 = 0; 
  _flat_161 = _mul_SxV_( _flat_162, new_shape); 
  _flat_160 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_161 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_163 = _sel_VxA_( new_idx, array); 
        } : _flat_163 ; 
         } :
      genarray( new_shape, _flat_160); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_163 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_160 { , NN } ; 
  int[.] _flat_161 { , NN } ; 
  int{0} _flat_162 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_155 { , NN } ; 
  int[1]{0} _flat_156 { , NN } ; 
  int{0} _flat_157 { , NN } ; 
  int[1] _flat_158 { , NN } ; 
  int[.] _flat_159 { , NN } ; 

  _flat_159 = _shape_A_( array); 
  _flat_158 = _shape_A_( idx); 
  _flat_157 = 0; 
  _flat_156 = [ _flat_157 ]; 
  _flat_155 = _sel_VxA_( _flat_156, _flat_158); 
  new_shape = _drop_SxV_( _flat_155, _flat_159); 
  _flat_162 = 0; 
  _flat_161 = _mul_SxV_( _flat_162, new_shape); 
  _flat_160 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_161 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_163 = _sel_VxA_( new_idx, array); 
        } : _flat_163 ; 
         } :
      genarray( new_shape, _flat_160); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  double[*] res { , NN } ; 
  double _flat_154 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_151 { , NN } ; 
  int[.] _flat_152 { , NN } ; 
  int{0} _flat_153 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_146 { , NN } ; 
  int[1]{0} _flat_147 { , NN } ; 
  int{0} _flat_148 { , NN } ; 
  int[1]{1} _flat_149 { , NN } ; 
  int[.] _flat_150 { , NN } ; 

  _flat_150 = _shape_A_( array); 
  _flat_149 = _shape_A_( idx); 
  _flat_148 = 0; 
  _flat_147 = [ _flat_148 ]; 
  _flat_146 = _sel_VxA_( _flat_147, _flat_149); 
  new_shape = _drop_SxV_( _flat_146, _flat_150); 
  _flat_153 = 0; 
  _flat_152 = _mul_SxV_( _flat_153, new_shape); 
  _flat_151 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_152 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_154 = _sel_VxA_( new_idx, array); 
        } : _flat_154 ; 
         } :
      genarray( new_shape, _flat_151); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  double[*] res { , NN } ; 
  double _flat_154 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  double{0.0...} _flat_151 { , NN } ; 
  int[.] _flat_152 { , NN } ; 
  int{0} _flat_153 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_146 { , NN } ; 
  int[1]{0} _flat_147 { , NN } ; 
  int{0} _flat_148 { , NN } ; 
  int[1] _flat_149 { , NN } ; 
  int[.] _flat_150 { , NN } ; 

  _flat_150 = _shape_A_( array); 
  _flat_149 = _shape_A_( idx); 
  _flat_148 = 0; 
  _flat_147 = [ _flat_148 ]; 
  _flat_146 = _sel_VxA_( _flat_147, _flat_149); 
  new_shape = _drop_SxV_( _flat_146, _flat_150); 
  _flat_153 = 0; 
  _flat_152 = _mul_SxV_( _flat_153, new_shape); 
  _flat_151 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_152 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_154 = _sel_VxA_( new_idx, array); 
        } : _flat_154 ; 
         } :
      genarray( new_shape, _flat_151); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  float[*] res { , NN } ; 
  float _flat_145 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  float{0.0...} _flat_142 { , NN } ; 
  int[.] _flat_143 { , NN } ; 
  int{0} _flat_144 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_137 { , NN } ; 
  int[1]{0} _flat_138 { , NN } ; 
  int{0} _flat_139 { , NN } ; 
  int[1]{1} _flat_140 { , NN } ; 
  int[.] _flat_141 { , NN } ; 

  _flat_141 = _shape_A_( array); 
  _flat_140 = _shape_A_( idx); 
  _flat_139 = 0; 
  _flat_138 = [ _flat_139 ]; 
  _flat_137 = _sel_VxA_( _flat_138, _flat_140); 
  new_shape = _drop_SxV_( _flat_137, _flat_141); 
  _flat_144 = 0; 
  _flat_143 = _mul_SxV_( _flat_144, new_shape); 
  _flat_142 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_143 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_145 = _sel_VxA_( new_idx, array); 
        } : _flat_145 ; 
         } :
      genarray( new_shape, _flat_142); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  float[*] res { , NN } ; 
  float _flat_145 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  float{0.0...} _flat_142 { , NN } ; 
  int[.] _flat_143 { , NN } ; 
  int{0} _flat_144 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_137 { , NN } ; 
  int[1]{0} _flat_138 { , NN } ; 
  int{0} _flat_139 { , NN } ; 
  int[1] _flat_140 { , NN } ; 
  int[.] _flat_141 { , NN } ; 

  _flat_141 = _shape_A_( array); 
  _flat_140 = _shape_A_( idx); 
  _flat_139 = 0; 
  _flat_138 = [ _flat_139 ]; 
  _flat_137 = _sel_VxA_( _flat_138, _flat_140); 
  new_shape = _drop_SxV_( _flat_137, _flat_141); 
  _flat_144 = 0; 
  _flat_143 = _mul_SxV_( _flat_144, new_shape); 
  _flat_142 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_143 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_145 = _sel_VxA_( new_idx, array); 
        } : _flat_145 ; 
         } :
      genarray( new_shape, _flat_142); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_p::_selVxADistmemLocal( int[1] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_136 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_133 { , NN } ; 
  int[.] _flat_134 { , NN } ; 
  int{0} _flat_135 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_128 { , NN } ; 
  int[1]{0} _flat_129 { , NN } ; 
  int{0} _flat_130 { , NN } ; 
  int[1]{1} _flat_131 { , NN } ; 
  int[.] _flat_132 { , NN } ; 

  _flat_132 = _shape_A_( array); 
  _flat_131 = _shape_A_( idx); 
  _flat_130 = 0; 
  _flat_129 = [ _flat_130 ]; 
  _flat_128 = _sel_VxA_( _flat_129, _flat_131); 
  new_shape = _drop_SxV_( _flat_128, _flat_132); 
  _flat_135 = 0; 
  _flat_134 = _mul_SxV_( _flat_135, new_shape); 
  _flat_133 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_134 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_136 = _sel_VxA_( new_idx, array); 
        } : _flat_136 ; 
         } :
      genarray( new_shape, _flat_133); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selVxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_p::_selVxADistmemLocal( int[.] idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selVxADistmemLocal ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_136 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_133 { , NN } ; 
  int[.] _flat_134 { , NN } ; 
  int{0} _flat_135 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_128 { , NN } ; 
  int[1]{0} _flat_129 { , NN } ; 
  int{0} _flat_130 { , NN } ; 
  int[1] _flat_131 { , NN } ; 
  int[.] _flat_132 { , NN } ; 

  _flat_132 = _shape_A_( array); 
  _flat_131 = _shape_A_( idx); 
  _flat_130 = 0; 
  _flat_129 = [ _flat_130 ]; 
  _flat_128 = _sel_VxA_( _flat_129, _flat_131); 
  new_shape = _drop_SxV_( _flat_128, _flat_132); 
  _flat_135 = 0; 
  _flat_134 = _mul_SxV_( _flat_135, new_shape); 
  _flat_133 = wrapper:sacprelude_p::zero( array) ; 
  res = with {
        /* Partn */
        (_flat_134 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_136 = _sel_VxA_( new_idx, array); 
        } : _flat_136 ; 
         } :
      genarray( new_shape, _flat_133); 
  return( res); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , ulonglong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ulonglong[*] _flat_280 { , NN } ; 
  int[1] _flat_281 { , NN } ; 

  _flat_281 = [ idx ]; 
  _flat_280 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_281, array) ; 
  return( _flat_280); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , ulong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ulong[*] _flat_278 { , NN } ; 
  int[1] _flat_279 { , NN } ; 

  _flat_279 = [ idx ]; 
  _flat_278 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_279, array) ; 
  return( _flat_278); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , uint[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  uint[*] _flat_276 { , NN } ; 
  int[1] _flat_277 { , NN } ; 

  _flat_277 = [ idx ]; 
  _flat_276 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_277, array) ; 
  return( _flat_276); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , ushort[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ushort[*] _flat_274 { , NN } ; 
  int[1] _flat_275 { , NN } ; 

  _flat_275 = [ idx ]; 
  _flat_274 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_275, array) ; 
  return( _flat_274); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , ubyte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  ubyte[*] _flat_272 { , NN } ; 
  int[1] _flat_273 { , NN } ; 

  _flat_273 = [ idx ]; 
  _flat_272 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_273, array) ; 
  return( _flat_272); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , longlong[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  longlong[*] _flat_270 { , NN } ; 
  int[1] _flat_271 { , NN } ; 

  _flat_271 = [ idx ]; 
  _flat_270 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_271, array) ; 
  return( _flat_270); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , long[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  long[*] _flat_268 { , NN } ; 
  int[1] _flat_269 { , NN } ; 

  _flat_269 = [ idx ]; 
  _flat_268 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_269, array) ; 
  return( _flat_268); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , short[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  short[*] _flat_266 { , NN } ; 
  int[1] _flat_267 { , NN } ; 

  _flat_267 = [ idx ]; 
  _flat_266 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_267, array) ; 
  return( _flat_266); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , byte[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  byte[*] _flat_264 { , NN } ; 
  int[1] _flat_265 { , NN } ; 

  _flat_265 = [ idx ]; 
  _flat_264 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_265, array) ; 
  return( _flat_264); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , char[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  char[*] _flat_262 { , NN } ; 
  int[1] _flat_263 { , NN } ; 

  _flat_263 = [ idx ]; 
  _flat_262 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_263, array) ; 
  return( _flat_262); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , bool[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  bool[*] _flat_260 { , NN } ; 
  int[1] _flat_261 { , NN } ; 

  _flat_261 = [ idx ]; 
  _flat_260 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_261, array) ; 
  return( _flat_260); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , double[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  double[*] _flat_258 { , NN } ; 
  int[1] _flat_259 { , NN } ; 

  _flat_259 = [ idx ]; 
  _flat_258 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_259, array) ; 
  return( _flat_258); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , float[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  float[*] _flat_256 { , NN } ; 
  int[1] _flat_257 { , NN } ; 

  _flat_257 = [ idx ]; 
  _flat_256 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_257, array) ; 
  return( _flat_256); 
}



/****************************************************************************
 * sacprelude_p::_selSxADistmemLocal(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[*] sacprelude_p::_selSxADistmemLocal( int idx { ,NN } , int[*] array { ,NN } )
/*
 *  _selSxADistmemLocal ::  ---
 */
{ 
  int[*] _flat_254 { , NN } ; 
  int[1] _flat_255 { , NN } ; 

  _flat_255 = [ idx ]; 
  _flat_254 = wrapper:sacprelude_p::_selVxADistmemLocal( _flat_255, array) ; 
  return( _flat_254); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulonglong{0} sacprelude_p::zero( ulonglong[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ulonglong{0} _flat_295__SSA0_1 { , NN } ; 
  ulonglong{0} _flat_295 { , NN } ; 

  _flat_295 = 0ULL; 
  _flat_295__SSA0_1 = _type_conv_( ulonglong, _flat_295); 
  return( _flat_295__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ulong{0} sacprelude_p::zero( ulong[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ulong{0} _flat_294__SSA0_1 { , NN } ; 
  ulong{0} _flat_294 { , NN } ; 

  _flat_294 = 0ul; 
  _flat_294__SSA0_1 = _type_conv_( ulong, _flat_294); 
  return( _flat_294__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
uint{0} sacprelude_p::zero( uint[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  uint{0} _flat_293__SSA0_1 { , NN } ; 
  uint{0} _flat_293 { , NN } ; 

  _flat_293 = 0ui; 
  _flat_293__SSA0_1 = _type_conv_( uint, _flat_293); 
  return( _flat_293__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ushort{0} sacprelude_p::zero( ushort[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ushort{0} _flat_292__SSA0_1 { , NN } ; 
  ushort{0} _flat_292 { , NN } ; 

  _flat_292 = 0us; 
  _flat_292__SSA0_1 = _type_conv_( ushort, _flat_292); 
  return( _flat_292__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
ubyte{} sacprelude_p::zero( ubyte[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  ubyte{} _flat_291__SSA0_1 { , NN } ; 
  ubyte{} _flat_291 { , NN } ; 

  _flat_291 = 0ub; 
  _flat_291__SSA0_1 = _type_conv_( ubyte, _flat_291); 
  return( _flat_291__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
longlong{0} sacprelude_p::zero( longlong[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  longlong{0} _flat_290__SSA0_1 { , NN } ; 
  longlong{0} _flat_290 { , NN } ; 

  _flat_290 = 0LL; 
  _flat_290__SSA0_1 = _type_conv_( longlong, _flat_290); 
  return( _flat_290__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
long{0} sacprelude_p::zero( long[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  long{0} _flat_289__SSA0_1 { , NN } ; 
  long{0} _flat_289 { , NN } ; 

  _flat_289 = 0l; 
  _flat_289__SSA0_1 = _type_conv_( long, _flat_289); 
  return( _flat_289__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
short{0} sacprelude_p::zero( short[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  short{0} _flat_288__SSA0_1 { , NN } ; 
  short{0} _flat_288 { , NN } ; 

  _flat_288 = 0s; 
  _flat_288__SSA0_1 = _type_conv_( short, _flat_288); 
  return( _flat_288__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
byte{} sacprelude_p::zero( byte[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  byte{} _flat_287__SSA0_1 { , NN } ; 
  byte{} _flat_287 { , NN } ; 

  _flat_287 = 0b; 
  _flat_287__SSA0_1 = _type_conv_( byte, _flat_287); 
  return( _flat_287__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool{0} sacprelude_p::zero( bool[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  bool{0} _flat_286__SSA0_1 { , NN } ; 
  bool{0} _flat_286 { , NN } ; 

  _flat_286 = false; 
  _flat_286__SSA0_1 = _type_conv_( bool, _flat_286); 
  return( _flat_286__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
char{ } sacprelude_p::zero( char[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  char{ } _flat_285__SSA0_1 { , NN } ; 
  char{ } _flat_285 { , NN } ; 

  _flat_285 = ' '; 
  _flat_285__SSA0_1 = _type_conv_( char, _flat_285); 
  return( _flat_285__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
float{0.0...} sacprelude_p::zero( float[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  float{0.0...} _flat_284__SSA0_1 { , NN } ; 
  float{0.0...} _flat_284 { , NN } ; 

  _flat_284 = 0.0f; 
  _flat_284__SSA0_1 = _type_conv_( float, _flat_284); 
  return( _flat_284__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
double{0.0...} sacprelude_p::zero( double[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  double{0.0...} _flat_283__SSA0_1 { , NN } ; 
  double{0.0...} _flat_283 { , NN } ; 

  _flat_283 = 0.0; 
  _flat_283__SSA0_1 = _type_conv_( double, _flat_283); 
  return( _flat_283__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{0} sacprelude_p::zero( int[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_282__SSA0_1 { , NN } ; 
  int{0} _flat_282 { , NN } ; 

  _flat_282 = 0; 
  _flat_282__SSA0_1 = _type_conv_( int, _flat_282); 
  return( _flat_282__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( ulonglong[*] A { ,NN } , ulonglong[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_408 { , NN } ; 
  ulonglong _flat_409 { , NN } ; 
  ulonglong _flat_410 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_403 { , NN } ; 
  int[.] _flat_404 { , NN } ; 
  int{0} _flat_405 { , NN } ; 
  int[.] _flat_406 { , NN } ; 
  int[.] _flat_407 { , NN } ; 

  _flat_407 = _shape_A_( A); 
  _flat_406 = _shape_A_( A); 
  _flat_405 = 0; 
  _flat_404 = _mul_SxV_( _flat_405, _flat_406); 
  _flat_403 = true; 
  res = with {
        /* Partn */
        (_flat_404 <= iv < _flat_407)
        { 
          _flat_410 = _sel_VxA_( iv, B); 
          _flat_409 = _sel_VxA_( iv, A); 
          _flat_408 = _eq_SxS_( _flat_409, _flat_410); 
        } : _flat_408 ; 
         } :
      fold( sacprelude_p::and(), _flat_403); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( ulong[*] A { ,NN } , ulong[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_400 { , NN } ; 
  ulong _flat_401 { , NN } ; 
  ulong _flat_402 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_395 { , NN } ; 
  int[.] _flat_396 { , NN } ; 
  int{0} _flat_397 { , NN } ; 
  int[.] _flat_398 { , NN } ; 
  int[.] _flat_399 { , NN } ; 

  _flat_399 = _shape_A_( A); 
  _flat_398 = _shape_A_( A); 
  _flat_397 = 0; 
  _flat_396 = _mul_SxV_( _flat_397, _flat_398); 
  _flat_395 = true; 
  res = with {
        /* Partn */
        (_flat_396 <= iv < _flat_399)
        { 
          _flat_402 = _sel_VxA_( iv, B); 
          _flat_401 = _sel_VxA_( iv, A); 
          _flat_400 = _eq_SxS_( _flat_401, _flat_402); 
        } : _flat_400 ; 
         } :
      fold( sacprelude_p::and(), _flat_395); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( uint[*] A { ,NN } , uint[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_392 { , NN } ; 
  uint _flat_393 { , NN } ; 
  uint _flat_394 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_387 { , NN } ; 
  int[.] _flat_388 { , NN } ; 
  int{0} _flat_389 { , NN } ; 
  int[.] _flat_390 { , NN } ; 
  int[.] _flat_391 { , NN } ; 

  _flat_391 = _shape_A_( A); 
  _flat_390 = _shape_A_( A); 
  _flat_389 = 0; 
  _flat_388 = _mul_SxV_( _flat_389, _flat_390); 
  _flat_387 = true; 
  res = with {
        /* Partn */
        (_flat_388 <= iv < _flat_391)
        { 
          _flat_394 = _sel_VxA_( iv, B); 
          _flat_393 = _sel_VxA_( iv, A); 
          _flat_392 = _eq_SxS_( _flat_393, _flat_394); 
        } : _flat_392 ; 
         } :
      fold( sacprelude_p::and(), _flat_387); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( ushort[*] A { ,NN } , ushort[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_384 { , NN } ; 
  ushort _flat_385 { , NN } ; 
  ushort _flat_386 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_379 { , NN } ; 
  int[.] _flat_380 { , NN } ; 
  int{0} _flat_381 { , NN } ; 
  int[.] _flat_382 { , NN } ; 
  int[.] _flat_383 { , NN } ; 

  _flat_383 = _shape_A_( A); 
  _flat_382 = _shape_A_( A); 
  _flat_381 = 0; 
  _flat_380 = _mul_SxV_( _flat_381, _flat_382); 
  _flat_379 = true; 
  res = with {
        /* Partn */
        (_flat_380 <= iv < _flat_383)
        { 
          _flat_386 = _sel_VxA_( iv, B); 
          _flat_385 = _sel_VxA_( iv, A); 
          _flat_384 = _eq_SxS_( _flat_385, _flat_386); 
        } : _flat_384 ; 
         } :
      fold( sacprelude_p::and(), _flat_379); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( ubyte[*] A { ,NN } , ubyte[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_376 { , NN } ; 
  ubyte _flat_377 { , NN } ; 
  ubyte _flat_378 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_371 { , NN } ; 
  int[.] _flat_372 { , NN } ; 
  int{0} _flat_373 { , NN } ; 
  int[.] _flat_374 { , NN } ; 
  int[.] _flat_375 { , NN } ; 

  _flat_375 = _shape_A_( A); 
  _flat_374 = _shape_A_( A); 
  _flat_373 = 0; 
  _flat_372 = _mul_SxV_( _flat_373, _flat_374); 
  _flat_371 = true; 
  res = with {
        /* Partn */
        (_flat_372 <= iv < _flat_375)
        { 
          _flat_378 = _sel_VxA_( iv, B); 
          _flat_377 = _sel_VxA_( iv, A); 
          _flat_376 = _eq_SxS_( _flat_377, _flat_378); 
        } : _flat_376 ; 
         } :
      fold( sacprelude_p::and(), _flat_371); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( longlong[*] A { ,NN } , longlong[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_368 { , NN } ; 
  longlong _flat_369 { , NN } ; 
  longlong _flat_370 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_363 { , NN } ; 
  int[.] _flat_364 { , NN } ; 
  int{0} _flat_365 { , NN } ; 
  int[.] _flat_366 { , NN } ; 
  int[.] _flat_367 { , NN } ; 

  _flat_367 = _shape_A_( A); 
  _flat_366 = _shape_A_( A); 
  _flat_365 = 0; 
  _flat_364 = _mul_SxV_( _flat_365, _flat_366); 
  _flat_363 = true; 
  res = with {
        /* Partn */
        (_flat_364 <= iv < _flat_367)
        { 
          _flat_370 = _sel_VxA_( iv, B); 
          _flat_369 = _sel_VxA_( iv, A); 
          _flat_368 = _eq_SxS_( _flat_369, _flat_370); 
        } : _flat_368 ; 
         } :
      fold( sacprelude_p::and(), _flat_363); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( long[*] A { ,NN } , long[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_360 { , NN } ; 
  long _flat_361 { , NN } ; 
  long _flat_362 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_355 { , NN } ; 
  int[.] _flat_356 { , NN } ; 
  int{0} _flat_357 { , NN } ; 
  int[.] _flat_358 { , NN } ; 
  int[.] _flat_359 { , NN } ; 

  _flat_359 = _shape_A_( A); 
  _flat_358 = _shape_A_( A); 
  _flat_357 = 0; 
  _flat_356 = _mul_SxV_( _flat_357, _flat_358); 
  _flat_355 = true; 
  res = with {
        /* Partn */
        (_flat_356 <= iv < _flat_359)
        { 
          _flat_362 = _sel_VxA_( iv, B); 
          _flat_361 = _sel_VxA_( iv, A); 
          _flat_360 = _eq_SxS_( _flat_361, _flat_362); 
        } : _flat_360 ; 
         } :
      fold( sacprelude_p::and(), _flat_355); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( short[*] A { ,NN } , short[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_352 { , NN } ; 
  short _flat_353 { , NN } ; 
  short _flat_354 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_347 { , NN } ; 
  int[.] _flat_348 { , NN } ; 
  int{0} _flat_349 { , NN } ; 
  int[.] _flat_350 { , NN } ; 
  int[.] _flat_351 { , NN } ; 

  _flat_351 = _shape_A_( A); 
  _flat_350 = _shape_A_( A); 
  _flat_349 = 0; 
  _flat_348 = _mul_SxV_( _flat_349, _flat_350); 
  _flat_347 = true; 
  res = with {
        /* Partn */
        (_flat_348 <= iv < _flat_351)
        { 
          _flat_354 = _sel_VxA_( iv, B); 
          _flat_353 = _sel_VxA_( iv, A); 
          _flat_352 = _eq_SxS_( _flat_353, _flat_354); 
        } : _flat_352 ; 
         } :
      fold( sacprelude_p::and(), _flat_347); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( byte[*] A { ,NN } , byte[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_344 { , NN } ; 
  byte _flat_345 { , NN } ; 
  byte _flat_346 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_339 { , NN } ; 
  int[.] _flat_340 { , NN } ; 
  int{0} _flat_341 { , NN } ; 
  int[.] _flat_342 { , NN } ; 
  int[.] _flat_343 { , NN } ; 

  _flat_343 = _shape_A_( A); 
  _flat_342 = _shape_A_( A); 
  _flat_341 = 0; 
  _flat_340 = _mul_SxV_( _flat_341, _flat_342); 
  _flat_339 = true; 
  res = with {
        /* Partn */
        (_flat_340 <= iv < _flat_343)
        { 
          _flat_346 = _sel_VxA_( iv, B); 
          _flat_345 = _sel_VxA_( iv, A); 
          _flat_344 = _eq_SxS_( _flat_345, _flat_346); 
        } : _flat_344 ; 
         } :
      fold( sacprelude_p::and(), _flat_339); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( char[*] A { ,NN } , char[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_336 { , NN } ; 
  char _flat_337 { , NN } ; 
  char _flat_338 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_331 { , NN } ; 
  int[.] _flat_332 { , NN } ; 
  int{0} _flat_333 { , NN } ; 
  int[.] _flat_334 { , NN } ; 
  int[.] _flat_335 { , NN } ; 

  _flat_335 = _shape_A_( A); 
  _flat_334 = _shape_A_( A); 
  _flat_333 = 0; 
  _flat_332 = _mul_SxV_( _flat_333, _flat_334); 
  _flat_331 = true; 
  res = with {
        /* Partn */
        (_flat_332 <= iv < _flat_335)
        { 
          _flat_338 = _sel_VxA_( iv, B); 
          _flat_337 = _sel_VxA_( iv, A); 
          _flat_336 = _eq_SxS_( _flat_337, _flat_338); 
        } : _flat_336 ; 
         } :
      fold( sacprelude_p::and(), _flat_331); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( bool[*] A { ,NN } , bool[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_328 { , NN } ; 
  bool _flat_329 { , NN } ; 
  bool _flat_330 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_323 { , NN } ; 
  int[.] _flat_324 { , NN } ; 
  int{0} _flat_325 { , NN } ; 
  int[.] _flat_326 { , NN } ; 
  int[.] _flat_327 { , NN } ; 

  _flat_327 = _shape_A_( A); 
  _flat_326 = _shape_A_( A); 
  _flat_325 = 0; 
  _flat_324 = _mul_SxV_( _flat_325, _flat_326); 
  _flat_323 = true; 
  res = with {
        /* Partn */
        (_flat_324 <= iv < _flat_327)
        { 
          _flat_330 = _sel_VxA_( iv, B); 
          _flat_329 = _sel_VxA_( iv, A); 
          _flat_328 = _eq_SxS_( _flat_329, _flat_330); 
        } : _flat_328 ; 
         } :
      fold( sacprelude_p::and(), _flat_323); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( double[*] A { ,NN } , double[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_320 { , NN } ; 
  double _flat_321 { , NN } ; 
  double _flat_322 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_315 { , NN } ; 
  int[.] _flat_316 { , NN } ; 
  int{0} _flat_317 { , NN } ; 
  int[.] _flat_318 { , NN } ; 
  int[.] _flat_319 { , NN } ; 

  _flat_319 = _shape_A_( A); 
  _flat_318 = _shape_A_( A); 
  _flat_317 = 0; 
  _flat_316 = _mul_SxV_( _flat_317, _flat_318); 
  _flat_315 = true; 
  res = with {
        /* Partn */
        (_flat_316 <= iv < _flat_319)
        { 
          _flat_322 = _sel_VxA_( iv, B); 
          _flat_321 = _sel_VxA_( iv, A); 
          _flat_320 = _eq_SxS_( _flat_321, _flat_322); 
        } : _flat_320 ; 
         } :
      fold( sacprelude_p::and(), _flat_315); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( float[*] A { ,NN } , float[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_312 { , NN } ; 
  float _flat_313 { , NN } ; 
  float _flat_314 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_307 { , NN } ; 
  int[.] _flat_308 { , NN } ; 
  int{0} _flat_309 { , NN } ; 
  int[.] _flat_310 { , NN } ; 
  int[.] _flat_311 { , NN } ; 

  _flat_311 = _shape_A_( A); 
  _flat_310 = _shape_A_( A); 
  _flat_309 = 0; 
  _flat_308 = _mul_SxV_( _flat_309, _flat_310); 
  _flat_307 = true; 
  res = with {
        /* Partn */
        (_flat_308 <= iv < _flat_311)
        { 
          _flat_314 = _sel_VxA_( iv, B); 
          _flat_313 = _sel_VxA_( iv, A); 
          _flat_312 = _eq_SxS_( _flat_313, _flat_314); 
        } : _flat_312 ; 
         } :
      fold( sacprelude_p::and(), _flat_307); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::eq(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool sacprelude_p::eq( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  eq ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_304 { , NN } ; 
  int _flat_305 { , NN } ; 
  int _flat_306 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_299 { , NN } ; 
  int[.] _flat_300 { , NN } ; 
  int{0} _flat_301 { , NN } ; 
  int[.] _flat_302 { , NN } ; 
  int[.] _flat_303 { , NN } ; 

  _flat_303 = _shape_A_( A); 
  _flat_302 = _shape_A_( A); 
  _flat_301 = 0; 
  _flat_300 = _mul_SxV_( _flat_301, _flat_302); 
  _flat_299 = true; 
  res = with {
        /* Partn */
        (_flat_300 <= iv < _flat_303)
        { 
          _flat_306 = _sel_VxA_( iv, B); 
          _flat_305 = _sel_VxA_( iv, A); 
          _flat_304 = _eq_SxS_( _flat_305, _flat_306); 
        } : _flat_304 ; 
         } :
      fold( sacprelude_p::and(), _flat_299); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::isPartitionIntersectNull(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_p::isPartitionIntersectNull( int[.] idxmin { ,NN } , int[.] idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersectNull ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_459 { , NN } ; 
  bool[.] _flat_460 { , NN } ; 

  _flat_460 = _ge_VxV_( idxmin, bound2); 
  _flat_459 = _lt_VxV_( idxmax, bound1); 
  z = _or_VxV_( _flat_459, _flat_460); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::isPartitionIntersectNull(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_p::isPartitionIntersectNull( int idxmin { ,NN } , int idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersectNull ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_461 { , NN } ; 
  bool[.] _flat_462 { , NN } ; 

  _flat_462 = _ge_SxV_( idxmin, bound2); 
  _flat_461 = _lt_SxV_( idxmax, bound1); 
  z = _or_VxV_( _flat_461, _flat_462); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::partitionMin(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int sacprelude_p::partitionMin( int x { ,NN } , int y { ,NN } )
/*
 *  partitionMin ::  ---
 */
{ 
  int z__SSA0_1 { , NN } ; 
  int z { , NN } ; 

  z = _min_SxS_( x, y); 
  z__SSA0_1 = _type_conv_( int, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::partitionMax(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int sacprelude_p::partitionMax( int x { ,NN } , int y { ,NN } )
/*
 *  partitionMax ::  ---
 */
{ 
  int z__SSA0_1 { , NN } ; 
  int z { , NN } ; 

  z = _max_SxS_( x, y); 
  z__SSA0_1 = _type_conv_( int, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::isPartitionIntersect1Part(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_p::isPartitionIntersect1Part( int[.] idxmin { ,NN } , int[.] idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersect1Part ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_463 { , NN } ; 
  bool[.] _flat_464 { , NN } ; 

  _flat_464 = _le_VxV_( idxmax, bound2); 
  _flat_463 = _ge_VxV_( idxmin, bound1); 
  z = _and_VxV_( _flat_463, _flat_464); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::isPartitionIntersect1Part(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] sacprelude_p::isPartitionIntersect1Part( int idxmin { ,NN } , int idxmax { ,NN } , int[.] bound1 { ,NN } , int[.] bound2 { ,NN } )
/*
 *  isPartitionIntersect1Part ::  ---
 */
{ 
  bool[.] z__SSA0_1 { , NN } ; 
  bool[.] z { , NN } ; 
  bool[.] _flat_465 { , NN } ; 
  bool[.] _flat_466 { , NN } ; 

  _flat_466 = _le_SxV_( idxmax, bound2); 
  _flat_465 = _ge_SxV_( idxmin, bound1); 
  z = _and_VxV_( _flat_465, _flat_466); 
  z__SSA0_1 = _type_conv_( bool[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::partitionIntersectMax(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_p::partitionIntersectMax( int[.] PWLbound1 { ,NN } , int[.] ivmin { ,NN } )
/*
 *  partitionIntersectMax ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _max_VxV_( PWLbound1, ivmin); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::partitionIntersectMax(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_p::partitionIntersectMax( int[.] PWLbound1 { ,NN } , int ivmin { ,NN } )
/*
 *  partitionIntersectMax ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _max_VxS_( PWLbound1, ivmin); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::partitionIntersectMin(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_p::partitionIntersectMin( int[.] PWLbound2 { ,NN } , int[.] ivmax { ,NN } )
/*
 *  partitionIntersectMin ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _min_VxV_( PWLbound2, ivmax); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::partitionIntersectMin(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] sacprelude_p::partitionIntersectMin( int[.] PWLbound2 { ,NN } , int ivmax { ,NN } )
/*
 *  partitionIntersectMin ::  ---
 */
{ 
  int[.] z__SSA0_1 { , NN } ; 
  int[.] z { , NN } ; 

  z = _min_VxS_( PWLbound2, ivmax); 
  z__SSA0_1 = _type_conv_( int[.], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::prod(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int sacprelude_p::prod( int[.] v { ,NN } )
/*
 *  prod ::  ---
 */
{ 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 
  int _flat_417 { , NN } ; 
  int[1] _flat_418 { , NN } ; 
  int i { , NN } ; 
  int[1] _flat_416 { , NN } ; 
  int{1} _flat_412 { , NN } ; 
  int[1]{0} _flat_413 { , NN } ; 
  int{0} _flat_414 { , NN } ; 
  int[1] _flat_415 { , NN } ; 

  _flat_415 = _shape_A_( v); 
  _flat_414 = 0; 
  _flat_413 = [ _flat_414 ]; 
  _flat_412 = 1; 
  res = with {
        /* Partn */
        (_flat_413 <= _flat_416=[i] < _flat_415)
        { 
          _flat_418 = [ i ]; 
          _flat_417 = _sel_VxA_( _flat_418, v); 
        } : _flat_417 ; 
         } :
      fold( sacprelude_p::*(), _flat_412); 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::partitionSlicer(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.], int[.], int[.], int[.] sacprelude_p::partitionSlicer( int[.] min { ,NN } , int[.] max { ,NN } , int axis { ,NN } , int[.] lb { ,NN } , int[.] ub { ,NN } )
/*
 *  partitionSlicer ::  ---
 */
{ 
  int[.] max_lower__SSA0_1 { , NN } ; 
  int[.] min_upper__SSA0_1 { , NN } ; 
  int[.] new_min__SSA0_1 { , NN } ; 
  int[.] new_max__SSA0_1 { , NN } ; 
  int[.] new_max { , NN } ; 
  int[1] _flat_440 { , NN } ; 
  int[.] new_min { , NN } ; 
  int[1] _flat_439 { , NN } ; 
  int[.] min_upper { , NN } ; 
  int[1] _flat_438 { , NN } ; 
  int[.] max_lower { , NN } ; 
  int[1] _flat_437 { , NN } ; 
  int ub_i { , NN } ; 
  int _flat_435 { , NN } ; 
  int[1] _flat_436 { , NN } ; 
  int lb_i { , NN } ; 
  int[1] _flat_434 { , NN } ; 

  _flat_434 = [ axis ]; 
  lb_i = _sel_VxA_( _flat_434, lb); 
  _flat_436 = [ axis ]; 
  _flat_435 = _sel_VxA_( _flat_436, ub); 
  ub_i = wrapper:sacprelude_p::partitionMax( lb_i, _flat_435) ; 
  _flat_437 = [ axis ]; 
  max_lower = _modarray_AxVxS_( max, _flat_437, lb_i); 
  _flat_438 = [ axis ]; 
  min_upper = _modarray_AxVxS_( min, _flat_438, ub_i); 
  _flat_439 = [ axis ]; 
  new_min = _modarray_AxVxS_( min, _flat_439, lb_i); 
  _flat_440 = [ axis ]; 
  new_max = _modarray_AxVxS_( max, _flat_440, ub_i); 
  new_max__SSA0_1 = _type_conv_( int[.], new_max); 
  new_min__SSA0_1 = _type_conv_( int[.], new_min); 
  min_upper__SSA0_1 = _type_conv_( int[.], min_upper); 
  max_lower__SSA0_1 = _type_conv_( int[.], max_lower); 
  return( max_lower__SSA0_1, min_upper__SSA0_1, new_min__SSA0_1, new_max__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::gridFiller(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.], int[.], int[.] sacprelude_p::gridFiller( int[.] lb { ,NN } , int[.] ub { ,NN } , int[.] wdth { ,NN } , int dim { ,NN } , int[.] maxwidth { ,NN } )
/*
 *  gridFiller ::  ---
 */
{ 
  int[.] nlb__SSA0_1 { , NN } ; 
  int[.] nwidth__SSA0_1 { , NN } ; 
  int[.] nmaxwidth__SSA0_1 { , NN } ; 
  int[.] nmaxwidth { , NN } ; 
  int[1] _flat_456 { , NN } ; 
  int _flat_457 { , NN } ; 
  int[1] _flat_458 { , NN } ; 
  int[.] nwidth { , NN } ; 
  int[1] _flat_455 { , NN } ; 
  int[.] nlb { , NN } ; 
  int[1] _flat_454 { , NN } ; 
  int w_dim { , NN } ; 
  int _flat_448 { , NN } ; 
  int _flat_449 { , NN } ; 
  int[1] _flat_450 { , NN } ; 
  int _flat_451 { , NN } ; 
  int[1] _flat_452 { , NN } ; 
  int{0} _flat_453 { , NN } ; 
  int l_dim { , NN } ; 
  int _flat_441 { , NN } ; 
  int _flat_442 { , NN } ; 
  int[1] _flat_443 { , NN } ; 
  int _flat_444 { , NN } ; 
  int[1] _flat_445 { , NN } ; 
  int _flat_446 { , NN } ; 
  int[1] _flat_447 { , NN } ; 

  _flat_447 = [ dim ]; 
  _flat_446 = _sel_VxA_( _flat_447, ub); 
  _flat_445 = [ dim ]; 
  _flat_444 = _sel_VxA_( _flat_445, wdth); 
  _flat_443 = [ dim ]; 
  _flat_442 = _sel_VxA_( _flat_443, lb); 
  _flat_441 = _add_SxS_( _flat_442, _flat_444); 
  l_dim = wrapper:sacprelude_p::partitionMin( _flat_441, _flat_446) ; 
  _flat_453 = 0; 
  _flat_452 = [ dim ]; 
  _flat_451 = _sel_VxA_( _flat_452, wdth); 
  _flat_450 = [ dim ]; 
  _flat_449 = _sel_VxA_( _flat_450, maxwidth); 
  _flat_448 = _sub_SxS_( _flat_449, _flat_451); 
  w_dim = wrapper:sacprelude_p::partitionMax( _flat_448, _flat_453) ; 
  _flat_454 = [ dim ]; 
  nlb = _modarray_AxVxS_( lb, _flat_454, l_dim); 
  _flat_455 = [ dim ]; 
  nwidth = _modarray_AxVxS_( maxwidth, _flat_455, w_dim); 
  _flat_458 = [ dim ]; 
  _flat_457 = _sel_VxA_( _flat_458, wdth); 
  _flat_456 = [ dim ]; 
  nmaxwidth = _modarray_AxVxS_( maxwidth, _flat_456, _flat_457); 
  nmaxwidth__SSA0_1 = _type_conv_( int[.], nmaxwidth); 
  nwidth__SSA0_1 = _type_conv_( int[.], nwidth); 
  nlb__SSA0_1 = _type_conv_( int[.], nlb); 
  return( nlb__SSA0_1, nwidth__SSA0_1, nmaxwidth__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::quadXII(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile *, int UTDScalarB::quadXII( Terminal::Terminal *_rso_1141_TheTerminal { ,NN } , TermFile::TermFile *_rso_1140_stdout { ,NN } , int y { ,NN } , int QUADpp { ,NN } , int QUADpw { ,NN } )
/*
 *  quadXII ::  ---
 */
{ 
  TermFile::TermFile _rso_1140_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_1141_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_1141_TheTerminal__SSA0_1, _rso_1140_stdout__SSA0_1 = wrapper:UTDScalarB:StdIO::show( _rso_1141_TheTerminal, _rso_1140_stdout, y) ; 
  return( _rso_1141_TheTerminal__SSA0_1, _rso_1140_stdout__SSA0_1, y); 
}



/****************************************************************************
 * UTDScalarB:StdIO::show(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile * UTDScalarB:StdIO::show( Terminal::Terminal *_rso_322_TheTerminal { ,NN } , TermFile::TermFile *_rso_321_stdout { ,NN } , bool[.] arr { ,NN } )
/*
 *  show ::  ---
 */
{ 
  TermFile::TermFile _rso_321_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */

  _rso_321_stdout__SSA0_1 = ArrayIO::show( _rso_321_stdout, arr) ; 
  return( _rso_322_TheTerminal, _rso_321_stdout__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::quadXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
Terminal::Terminal *, TermFile::TermFile *, bool[.] UTDScalarB::quadXBB( Terminal::Terminal *_rso_1139_TheTerminal { ,NN } , TermFile::TermFile *_rso_1138_stdout { ,NN } , bool[.] y { ,NN } , int QUADpp { ,NN } , int QUADpw { ,NN } )
/*
 *  quadXBB ::  ---
 */
{ 
  TermFile::TermFile _rso_1138_stdout__SSA0_1 { , NN } ;  /* declared: TermFile::TermFile */
  Terminal::Terminal _rso_1139_TheTerminal__SSA0_1 { , NN } ;  /* declared: Terminal::Terminal */

  _rso_1139_TheTerminal__SSA0_1, _rso_1138_stdout__SSA0_1 = wrapper:UTDScalarB:StdIO::show( _rso_1139_TheTerminal, _rso_1138_stdout, y) ; 
  return( _rso_1139_TheTerminal__SSA0_1, _rso_1138_stdout__SSA0_1, y); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::++( bool[.] arr_a { ,NN } , bool[14] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1165 { , NN } ; 
  int _eat_1164 { , NN } ; 
  bool[.] res__SSA0_2 { , NN } ; 
  bool[.] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1] _flat_723 { , NN } ; 
  int[1] offset { , NN } ; 
  int[1] _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1] _flat_722 { , NN } ; 
  bool[.] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1] _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1] _flat_714 { , NN } ; 
  int[1] new_shp { , NN } ; 
  int[1] _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int _flat_702 { , NN } ; 
  int _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1] _flat_706 { , NN } ; 
  int{14} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{14} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1164] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1165] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB::comaBBB( bool[126] x { ,NN } , bool[14] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[.] _flat_165__SSA0_1 { , NN } ; 
  bool[.] _flat_165 { , NN } ; 
  bool[.] _flat_166 { , NN } ; 
  bool[14] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[126] UTDScalarB:Array::++( bool[112] arr_a { ,NN } , bool[14] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1167 { , NN } ; 
  int _eat_1166 { , NN } ; 
  bool[126] res__SSA0_2 { , NN } ; 
  bool[126] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{126} _flat_723 { , NN } ; 
  int[1]{112} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{112} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{112} _flat_722 { , NN } ; 
  bool[126] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{112} _flat_714 { , NN } ; 
  int[1]{126} new_shp { , NN } ; 
  int[1]{112} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{126} _flat_702 { , NN } ; 
  int{112} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{112} _flat_706 { , NN } ; 
  int{14} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{14} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1166] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1167] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[112] UTDScalarB:Array::to_bool( bool[112] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[126] UTDScalarB::comaBBB( bool[112] x { ,NN } , bool[14] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[126] _flat_165__SSA0_1 { , NN } ; 
  bool[126] _flat_165 { , NN } ; 
  bool[112] _flat_166 { , NN } ; 
  bool[14] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[112] UTDScalarB:Array::++( bool[98] arr_a { ,NN } , bool[14] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1169 { , NN } ; 
  int _eat_1168 { , NN } ; 
  bool[112] res__SSA0_2 { , NN } ; 
  bool[112] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{112} _flat_723 { , NN } ; 
  int[1]{98} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{98} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{98} _flat_722 { , NN } ; 
  bool[112] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{98} _flat_714 { , NN } ; 
  int[1]{112} new_shp { , NN } ; 
  int[1]{98} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{112} _flat_702 { , NN } ; 
  int{98} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{98} _flat_706 { , NN } ; 
  int{14} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{14} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1168] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1169] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[98] UTDScalarB:Array::to_bool( bool[98] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[112] UTDScalarB::comaBBB( bool[98] x { ,NN } , bool[14] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[112] _flat_165__SSA0_1 { , NN } ; 
  bool[112] _flat_165 { , NN } ; 
  bool[98] _flat_166 { , NN } ; 
  bool[14] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[98] UTDScalarB:Array::++( bool[84] arr_a { ,NN } , bool[14] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1171 { , NN } ; 
  int _eat_1170 { , NN } ; 
  bool[98] res__SSA0_2 { , NN } ; 
  bool[98] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{98} _flat_723 { , NN } ; 
  int[1]{84} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{84} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{84} _flat_722 { , NN } ; 
  bool[98] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{84} _flat_714 { , NN } ; 
  int[1]{98} new_shp { , NN } ; 
  int[1]{84} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{98} _flat_702 { , NN } ; 
  int{84} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{84} _flat_706 { , NN } ; 
  int{14} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{14} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1170] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1171] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[84] UTDScalarB:Array::to_bool( bool[84] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[98] UTDScalarB::comaBBB( bool[84] x { ,NN } , bool[14] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[98] _flat_165__SSA0_1 { , NN } ; 
  bool[98] _flat_165 { , NN } ; 
  bool[84] _flat_166 { , NN } ; 
  bool[14] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[84] UTDScalarB:Array::++( bool[70] arr_a { ,NN } , bool[14] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1173 { , NN } ; 
  int _eat_1172 { , NN } ; 
  bool[84] res__SSA0_2 { , NN } ; 
  bool[84] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{84} _flat_723 { , NN } ; 
  int[1]{70} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{70} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{70} _flat_722 { , NN } ; 
  bool[84] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{70} _flat_714 { , NN } ; 
  int[1]{84} new_shp { , NN } ; 
  int[1]{70} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{84} _flat_702 { , NN } ; 
  int{70} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{70} _flat_706 { , NN } ; 
  int{14} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{14} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1172] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1173] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[70] UTDScalarB:Array::to_bool( bool[70] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[84] UTDScalarB::comaBBB( bool[70] x { ,NN } , bool[14] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[84] _flat_165__SSA0_1 { , NN } ; 
  bool[84] _flat_165 { , NN } ; 
  bool[70] _flat_166 { , NN } ; 
  bool[14] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[70] UTDScalarB:Array::++( bool[56] arr_a { ,NN } , bool[14] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1175 { , NN } ; 
  int _eat_1174 { , NN } ; 
  bool[70] res__SSA0_2 { , NN } ; 
  bool[70] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{70} _flat_723 { , NN } ; 
  int[1]{56} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{56} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{56} _flat_722 { , NN } ; 
  bool[70] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{56} _flat_714 { , NN } ; 
  int[1]{70} new_shp { , NN } ; 
  int[1]{56} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{70} _flat_702 { , NN } ; 
  int{56} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{56} _flat_706 { , NN } ; 
  int{14} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{14} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1174] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1175] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[56] UTDScalarB:Array::to_bool( bool[56] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[70] UTDScalarB::comaBBB( bool[56] x { ,NN } , bool[14] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[70] _flat_165__SSA0_1 { , NN } ; 
  bool[70] _flat_165 { , NN } ; 
  bool[56] _flat_166 { , NN } ; 
  bool[14] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[56] UTDScalarB:Array::++( bool[42] arr_a { ,NN } , bool[14] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1177 { , NN } ; 
  int _eat_1176 { , NN } ; 
  bool[56] res__SSA0_2 { , NN } ; 
  bool[56] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{56} _flat_723 { , NN } ; 
  int[1]{42} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{42} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{42} _flat_722 { , NN } ; 
  bool[56] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{42} _flat_714 { , NN } ; 
  int[1]{56} new_shp { , NN } ; 
  int[1]{42} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{56} _flat_702 { , NN } ; 
  int{42} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{42} _flat_706 { , NN } ; 
  int{14} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{14} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1176] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1177] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[42] UTDScalarB:Array::to_bool( bool[42] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[56] UTDScalarB::comaBBB( bool[42] x { ,NN } , bool[14] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[56] _flat_165__SSA0_1 { , NN } ; 
  bool[56] _flat_165 { , NN } ; 
  bool[42] _flat_166 { , NN } ; 
  bool[14] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[42] UTDScalarB:Array::++( bool[28] arr_a { ,NN } , bool[14] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1179 { , NN } ; 
  int _eat_1178 { , NN } ; 
  bool[42] res__SSA0_2 { , NN } ; 
  bool[42] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{42} _flat_723 { , NN } ; 
  int[1]{28} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{28} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{28} _flat_722 { , NN } ; 
  bool[42] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{28} _flat_714 { , NN } ; 
  int[1]{42} new_shp { , NN } ; 
  int[1]{28} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{42} _flat_702 { , NN } ; 
  int{28} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{28} _flat_706 { , NN } ; 
  int{14} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{14} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1178] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1179] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[28] UTDScalarB:Array::to_bool( bool[28] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[42] UTDScalarB::comaBBB( bool[28] x { ,NN } , bool[14] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[42] _flat_165__SSA0_1 { , NN } ; 
  bool[42] _flat_165 { , NN } ; 
  bool[28] _flat_166 { , NN } ; 
  bool[14] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[28] UTDScalarB:Array::++( bool[14] arr_a { ,NN } , bool[14] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1181 { , NN } ; 
  int _eat_1180 { , NN } ; 
  bool[28] res__SSA0_2 { , NN } ; 
  bool[28] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{28} _flat_723 { , NN } ; 
  int[1]{14} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{14} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{14} _flat_722 { , NN } ; 
  bool[28] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{14} _flat_714 { , NN } ; 
  int[1]{28} new_shp { , NN } ; 
  int[1]{14} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{28} _flat_702 { , NN } ; 
  int{14} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{14} _flat_706 { , NN } ; 
  int{14} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{14} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1180] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1181] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB:Array::to_bool( bool[14] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[28] UTDScalarB::comaBBB( bool[14] x { ,NN } , bool[14] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[28] _flat_165__SSA0_1 { , NN } ; 
  bool[28] _flat_165 { , NN } ; 
  bool[14] _flat_166 { , NN } ; 
  bool[14] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::orBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::orBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  orBBB ::  ---
 */
{ 
  int _eat_1184 { , NN } ; 
  int _eat_1183 { , NN } ; 
  int _eat_1182 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_141 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_138 { , NN } ; 
  int[3] _flat_139 { , NN } ; 
  int{0} _flat_140 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_140 = 0; 
  _flat_139 = _mul_SxV_( _flat_140, sy); 
  _flat_138 = false; 
  z = with {
        /* Partn */
        (_flat_139 <= iv=[_eat_1184, _eat_1183, _eat_1182] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_141 = wrapper:UTDScalarB::orBBB( xel, yel) ; 
        } : _flat_141 ; 
         } :
      genarray( sy, _flat_138); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::orBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::orBBB( bool[.,.,.] x { ,NN } , bool y { ,NN } )
/*
 *  orBBB ::  ---
 */
{ 
  int _eat_1187 { , NN } ; 
  int _eat_1186 { , NN } ; 
  int _eat_1185 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_137 { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_131 { , NN } ; 
  bool{0} _flat_132 { , NN } ; 
  int[3] _flat_133 { , NN } ; 
  int{0} _flat_134 { , NN } ; 
  int[3] _flat_135 { , NN } ; 
  int[3] _flat_136 { , NN } ; 

  _flat_136 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_135 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_134 = 0; 
  _flat_133 = _mul_SxV_( _flat_134, _flat_135); 
  _flat_132 = false; 
  _flat_131 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_133 <= iv=[_eat_1187, _eat_1186, _eat_1185] < _flat_136)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_137 = wrapper:UTDScalarB::orBBB( xel, y) ; 
        } : _flat_137 ; 
         } :
      genarray( _flat_131, _flat_132); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::orBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::orBBB( bool x { ,NN } , bool[4] y { ,NN } )
/*
 *  orBBB ::  ---
 */
{ 
  int _eat_1188 { , NN } ; 
  bool[4] z__SSA0_1 { , NN } ; 
  bool[4] z { , NN } ; 
  bool _flat_367 { , NN } ; 
  bool yel { , NN } ; 
  bool _flat_366 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_360 { , NN } ; 
  bool{0} _flat_361 { , NN } ; 
  int[1]{0} _flat_362 { , NN } ; 
  int{0} _flat_363 { , NN } ; 
  int[1]{4} _flat_364 { , NN } ; 
  int[1]{4} _flat_365 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_365 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_364 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_363 = 0; 
  _flat_362 = _mul_SxV_( _flat_363, _flat_364); 
  _flat_361 = false; 
  _flat_360 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_362 <= iv=[_eat_1188] < _flat_365)
        { 
          _flat_366 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_366) ; 
          _flat_367 = wrapper:UTDScalarB::orBBB( xel, yel) ; 
        } : _flat_367 ; 
         } :
      genarray( _flat_360, _flat_361); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotorBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB::jotdotorBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  jotdotorBBB ::  ---
 */
{ 
  int _eat_1189 { , NN } ; 
  bool[4,4] z { , NN } ; 
  bool[4] _flat_277 { , NN } ; 
  bool[4] _flat_278 { , NN } ; 
  bool xitem { , NN } ; 
  bool _flat_276 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_271 { , NN } ; 
  int[1]{0} _flat_272 { , NN } ; 
  int{0} _flat_273 { , NN } ; 
  int[1]{4} _flat_274 { , NN } ; 
  int[1]{4} _flat_275 { , NN } ; 
  bool[.] cell { , NN } ; 
  int[1]{4} _flat_269 { , NN } ; 
  bool{0} _flat_270 { , NN } ; 

  _flat_270 = false; 
  _flat_269 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_269, _flat_270) ; 
  _flat_275 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_274 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_273 = 0; 
  _flat_272 = _mul_SxV_( _flat_273, _flat_274); 
  _flat_271 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_272 <= iv=[_eat_1189] < _flat_275)
        { 
          _flat_276 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_276) ; 
          _flat_278 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_277 = wrapper:UTDScalarB::orBBB( xitem, _flat_278) ; 
        } : _flat_277 ; 
         } :
      genarray( _flat_271, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::norBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::norBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  norBBB ::  ---
 */
{ 
  int _eat_1192 { , NN } ; 
  int _eat_1191 { , NN } ; 
  int _eat_1190 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_130 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_127 { , NN } ; 
  int[3] _flat_128 { , NN } ; 
  int{0} _flat_129 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_129 = 0; 
  _flat_128 = _mul_SxV_( _flat_129, sy); 
  _flat_127 = false; 
  z = with {
        /* Partn */
        (_flat_128 <= iv=[_eat_1192, _eat_1191, _eat_1190] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_130 = wrapper:UTDScalarB::norBBB( xel, yel) ; 
        } : _flat_130 ; 
         } :
      genarray( sy, _flat_127); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::norBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::norBBB( bool[.,.,.] x { ,NN } , bool y { ,NN } )
/*
 *  norBBB ::  ---
 */
{ 
  int _eat_1195 { , NN } ; 
  int _eat_1194 { , NN } ; 
  int _eat_1193 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_126 { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_120 { , NN } ; 
  bool{0} _flat_121 { , NN } ; 
  int[3] _flat_122 { , NN } ; 
  int{0} _flat_123 { , NN } ; 
  int[3] _flat_124 { , NN } ; 
  int[3] _flat_125 { , NN } ; 

  _flat_125 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_124 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_123 = 0; 
  _flat_122 = _mul_SxV_( _flat_123, _flat_124); 
  _flat_121 = false; 
  _flat_120 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_122 <= iv=[_eat_1195, _eat_1194, _eat_1193] < _flat_125)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_126 = wrapper:UTDScalarB::norBBB( xel, y) ; 
        } : _flat_126 ; 
         } :
      genarray( _flat_120, _flat_121); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::norBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::norBBB( bool x { ,NN } , bool[4] y { ,NN } )
/*
 *  norBBB ::  ---
 */
{ 
  int _eat_1196 { , NN } ; 
  bool[4] z__SSA0_1 { , NN } ; 
  bool[4] z { , NN } ; 
  bool _flat_359 { , NN } ; 
  bool yel { , NN } ; 
  bool _flat_358 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_352 { , NN } ; 
  bool{0} _flat_353 { , NN } ; 
  int[1]{0} _flat_354 { , NN } ; 
  int{0} _flat_355 { , NN } ; 
  int[1]{4} _flat_356 { , NN } ; 
  int[1]{4} _flat_357 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_357 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_356 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_355 = 0; 
  _flat_354 = _mul_SxV_( _flat_355, _flat_356); 
  _flat_353 = false; 
  _flat_352 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_354 <= iv=[_eat_1196] < _flat_357)
        { 
          _flat_358 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_358) ; 
          _flat_359 = wrapper:UTDScalarB::norBBB( xel, yel) ; 
        } : _flat_359 ; 
         } :
      genarray( _flat_352, _flat_353); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotnorBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB::jotdotnorBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  jotdotnorBBB ::  ---
 */
{ 
  int _eat_1197 { , NN } ; 
  bool[4,4] z { , NN } ; 
  bool[4] _flat_267 { , NN } ; 
  bool[4] _flat_268 { , NN } ; 
  bool xitem { , NN } ; 
  bool _flat_266 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_261 { , NN } ; 
  int[1]{0} _flat_262 { , NN } ; 
  int{0} _flat_263 { , NN } ; 
  int[1]{4} _flat_264 { , NN } ; 
  int[1]{4} _flat_265 { , NN } ; 
  bool[.] cell { , NN } ; 
  int[1]{4} _flat_259 { , NN } ; 
  bool{0} _flat_260 { , NN } ; 

  _flat_260 = false; 
  _flat_259 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_259, _flat_260) ; 
  _flat_265 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_264 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_263 = 0; 
  _flat_262 = _mul_SxV_( _flat_263, _flat_264); 
  _flat_261 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_262 <= iv=[_eat_1197] < _flat_265)
        { 
          _flat_266 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_266) ; 
          _flat_268 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_267 = wrapper:UTDScalarB::norBBB( xitem, _flat_268) ; 
        } : _flat_267 ; 
         } :
      genarray( _flat_261, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::neBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  int _eat_1200 { , NN } ; 
  int _eat_1199 { , NN } ; 
  int _eat_1198 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_119 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_116 { , NN } ; 
  int[3] _flat_117 { , NN } ; 
  int{0} _flat_118 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_118 = 0; 
  _flat_117 = _mul_SxV_( _flat_118, sy); 
  _flat_116 = false; 
  z = with {
        /* Partn */
        (_flat_117 <= iv=[_eat_1200, _eat_1199, _eat_1198] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_119 = wrapper:UTDScalarB::neBBB( xel, yel) ; 
        } : _flat_119 ; 
         } :
      genarray( sy, _flat_116); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::neBBB( bool[.,.,.] x { ,NN } , bool y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  int _eat_1203 { , NN } ; 
  int _eat_1202 { , NN } ; 
  int _eat_1201 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_115 { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_109 { , NN } ; 
  bool{0} _flat_110 { , NN } ; 
  int[3] _flat_111 { , NN } ; 
  int{0} _flat_112 { , NN } ; 
  int[3] _flat_113 { , NN } ; 
  int[3] _flat_114 { , NN } ; 

  _flat_114 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_113 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_112 = 0; 
  _flat_111 = _mul_SxV_( _flat_112, _flat_113); 
  _flat_110 = false; 
  _flat_109 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_111 <= iv=[_eat_1203, _eat_1202, _eat_1201] < _flat_114)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_115 = wrapper:UTDScalarB::neBBB( xel, y) ; 
        } : _flat_115 ; 
         } :
      genarray( _flat_109, _flat_110); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::neBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::neBBB( bool x { ,NN } , bool[4] y { ,NN } )
/*
 *  neBBB ::  ---
 */
{ 
  int _eat_1204 { , NN } ; 
  bool[4] z__SSA0_1 { , NN } ; 
  bool[4] z { , NN } ; 
  bool _flat_351 { , NN } ; 
  bool yel { , NN } ; 
  bool _flat_350 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_344 { , NN } ; 
  bool{0} _flat_345 { , NN } ; 
  int[1]{0} _flat_346 { , NN } ; 
  int{0} _flat_347 { , NN } ; 
  int[1]{4} _flat_348 { , NN } ; 
  int[1]{4} _flat_349 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_349 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_348 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_347 = 0; 
  _flat_346 = _mul_SxV_( _flat_347, _flat_348); 
  _flat_345 = false; 
  _flat_344 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_346 <= iv=[_eat_1204] < _flat_349)
        { 
          _flat_350 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_350) ; 
          _flat_351 = wrapper:UTDScalarB::neBBB( xel, yel) ; 
        } : _flat_351 ; 
         } :
      genarray( _flat_344, _flat_345); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotneBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB::jotdotneBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  jotdotneBBB ::  ---
 */
{ 
  int _eat_1205 { , NN } ; 
  bool[4,4] z { , NN } ; 
  bool[4] _flat_257 { , NN } ; 
  bool[4] _flat_258 { , NN } ; 
  bool xitem { , NN } ; 
  bool _flat_256 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_251 { , NN } ; 
  int[1]{0} _flat_252 { , NN } ; 
  int{0} _flat_253 { , NN } ; 
  int[1]{4} _flat_254 { , NN } ; 
  int[1]{4} _flat_255 { , NN } ; 
  bool[.] cell { , NN } ; 
  int[1]{4} _flat_249 { , NN } ; 
  bool{0} _flat_250 { , NN } ; 

  _flat_250 = false; 
  _flat_249 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_249, _flat_250) ; 
  _flat_255 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_254 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_253 = 0; 
  _flat_252 = _mul_SxV_( _flat_253, _flat_254); 
  _flat_251 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_252 <= iv=[_eat_1205] < _flat_255)
        { 
          _flat_256 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_256) ; 
          _flat_258 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_257 = wrapper:UTDScalarB::neBBB( xitem, _flat_258) ; 
        } : _flat_257 ; 
         } :
      genarray( _flat_251, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::nandBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::nandBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  nandBBB ::  ---
 */
{ 
  int _eat_1208 { , NN } ; 
  int _eat_1207 { , NN } ; 
  int _eat_1206 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_108 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_105 { , NN } ; 
  int[3] _flat_106 { , NN } ; 
  int{0} _flat_107 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_107 = 0; 
  _flat_106 = _mul_SxV_( _flat_107, sy); 
  _flat_105 = false; 
  z = with {
        /* Partn */
        (_flat_106 <= iv=[_eat_1208, _eat_1207, _eat_1206] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_108 = wrapper:UTDScalarB::nandBBB( xel, yel) ; 
        } : _flat_108 ; 
         } :
      genarray( sy, _flat_105); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::nandBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::nandBBB( bool[.,.,.] x { ,NN } , bool y { ,NN } )
/*
 *  nandBBB ::  ---
 */
{ 
  int _eat_1211 { , NN } ; 
  int _eat_1210 { , NN } ; 
  int _eat_1209 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_104 { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_98 { , NN } ; 
  bool{0} _flat_99 { , NN } ; 
  int[3] _flat_100 { , NN } ; 
  int{0} _flat_101 { , NN } ; 
  int[3] _flat_102 { , NN } ; 
  int[3] _flat_103 { , NN } ; 

  _flat_103 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_102 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_101 = 0; 
  _flat_100 = _mul_SxV_( _flat_101, _flat_102); 
  _flat_99 = false; 
  _flat_98 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_100 <= iv=[_eat_1211, _eat_1210, _eat_1209] < _flat_103)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_104 = wrapper:UTDScalarB::nandBBB( xel, y) ; 
        } : _flat_104 ; 
         } :
      genarray( _flat_98, _flat_99); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::nandBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::nandBBB( bool x { ,NN } , bool[4] y { ,NN } )
/*
 *  nandBBB ::  ---
 */
{ 
  int _eat_1212 { , NN } ; 
  bool[4] z__SSA0_1 { , NN } ; 
  bool[4] z { , NN } ; 
  bool _flat_343 { , NN } ; 
  bool yel { , NN } ; 
  bool _flat_342 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_336 { , NN } ; 
  bool{0} _flat_337 { , NN } ; 
  int[1]{0} _flat_338 { , NN } ; 
  int{0} _flat_339 { , NN } ; 
  int[1]{4} _flat_340 { , NN } ; 
  int[1]{4} _flat_341 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_341 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_340 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_339 = 0; 
  _flat_338 = _mul_SxV_( _flat_339, _flat_340); 
  _flat_337 = false; 
  _flat_336 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_338 <= iv=[_eat_1212] < _flat_341)
        { 
          _flat_342 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_342) ; 
          _flat_343 = wrapper:UTDScalarB::nandBBB( xel, yel) ; 
        } : _flat_343 ; 
         } :
      genarray( _flat_336, _flat_337); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotnandBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB::jotdotnandBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  jotdotnandBBB ::  ---
 */
{ 
  int _eat_1213 { , NN } ; 
  bool[4,4] z { , NN } ; 
  bool[4] _flat_247 { , NN } ; 
  bool[4] _flat_248 { , NN } ; 
  bool xitem { , NN } ; 
  bool _flat_246 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_241 { , NN } ; 
  int[1]{0} _flat_242 { , NN } ; 
  int{0} _flat_243 { , NN } ; 
  int[1]{4} _flat_244 { , NN } ; 
  int[1]{4} _flat_245 { , NN } ; 
  bool[.] cell { , NN } ; 
  int[1]{4} _flat_239 { , NN } ; 
  bool{0} _flat_240 { , NN } ; 

  _flat_240 = false; 
  _flat_239 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_239, _flat_240) ; 
  _flat_245 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_244 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_243 = 0; 
  _flat_242 = _mul_SxV_( _flat_243, _flat_244); 
  _flat_241 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_242 <= iv=[_eat_1213] < _flat_245)
        { 
          _flat_246 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_246) ; 
          _flat_248 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_247 = wrapper:UTDScalarB::nandBBB( xitem, _flat_248) ; 
        } : _flat_247 ; 
         } :
      genarray( _flat_241, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::notXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.] UTDScalarB::notXBB( bool[.,.] y { ,NN } )
/*
 *  notXBB ::  ---
 */
{ 
  int _eat_1215 { , NN } ; 
  int _eat_1214 { , NN } ; 
  bool[.,.] z__SSA0_1 { , NN } ; 
  bool[.,.] z { , NN } ; 
  bool _flat_10 { , NN } ; 
  bool _flat_11 { , NN } ; 
  bool _flat_12 { , NN } ; 
  int[2] iv { , NN } ; 
  int[2] _flat_4 { , NN } ; 
  bool{0} _flat_5 { , NN } ; 
  int[2] _flat_6 { , NN } ; 
  int{0} _flat_7 { , NN } ; 
  int[2] _flat_8 { , NN } ; 
  int[2] _flat_9 { , NN } ; 

  _flat_9 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_8 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_7 = 0; 
  _flat_6 = _mul_SxV_( _flat_7, _flat_8); 
  _flat_5 = false; 
  _flat_4 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_6 <= iv=[_eat_1215, _eat_1214] < _flat_9)
        { 
          _flat_12 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_11 = wrapper:UTDScalarB:Array::to_bool( _flat_12) ; 
          _flat_10 = wrapper:UTDScalarB::notXBB( _flat_11) ; 
        } : _flat_10 ; 
         } :
      genarray( _flat_4, _flat_5); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::ltBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::ltBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  ltBBB ::  ---
 */
{ 
  int _eat_1218 { , NN } ; 
  int _eat_1217 { , NN } ; 
  int _eat_1216 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_97 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_94 { , NN } ; 
  int[3] _flat_95 { , NN } ; 
  int{0} _flat_96 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_96 = 0; 
  _flat_95 = _mul_SxV_( _flat_96, sy); 
  _flat_94 = false; 
  z = with {
        /* Partn */
        (_flat_95 <= iv=[_eat_1218, _eat_1217, _eat_1216] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_97 = wrapper:UTDScalarB::ltBBB( xel, yel) ; 
        } : _flat_97 ; 
         } :
      genarray( sy, _flat_94); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::ltBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::ltBBB( bool[.,.,.] x { ,NN } , bool y { ,NN } )
/*
 *  ltBBB ::  ---
 */
{ 
  int _eat_1221 { , NN } ; 
  int _eat_1220 { , NN } ; 
  int _eat_1219 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_93 { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_87 { , NN } ; 
  bool{0} _flat_88 { , NN } ; 
  int[3] _flat_89 { , NN } ; 
  int{0} _flat_90 { , NN } ; 
  int[3] _flat_91 { , NN } ; 
  int[3] _flat_92 { , NN } ; 

  _flat_92 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_91 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_90 = 0; 
  _flat_89 = _mul_SxV_( _flat_90, _flat_91); 
  _flat_88 = false; 
  _flat_87 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_89 <= iv=[_eat_1221, _eat_1220, _eat_1219] < _flat_92)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_93 = wrapper:UTDScalarB::ltBBB( xel, y) ; 
        } : _flat_93 ; 
         } :
      genarray( _flat_87, _flat_88); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::ltBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::ltBBB( bool x { ,NN } , bool[4] y { ,NN } )
/*
 *  ltBBB ::  ---
 */
{ 
  int _eat_1222 { , NN } ; 
  bool[4] z__SSA0_1 { , NN } ; 
  bool[4] z { , NN } ; 
  bool _flat_335 { , NN } ; 
  bool yel { , NN } ; 
  bool _flat_334 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_328 { , NN } ; 
  bool{0} _flat_329 { , NN } ; 
  int[1]{0} _flat_330 { , NN } ; 
  int{0} _flat_331 { , NN } ; 
  int[1]{4} _flat_332 { , NN } ; 
  int[1]{4} _flat_333 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_333 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_332 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_331 = 0; 
  _flat_330 = _mul_SxV_( _flat_331, _flat_332); 
  _flat_329 = false; 
  _flat_328 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_330 <= iv=[_eat_1222] < _flat_333)
        { 
          _flat_334 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_334) ; 
          _flat_335 = wrapper:UTDScalarB::ltBBB( xel, yel) ; 
        } : _flat_335 ; 
         } :
      genarray( _flat_328, _flat_329); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotltBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB::jotdotltBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  jotdotltBBB ::  ---
 */
{ 
  int _eat_1223 { , NN } ; 
  bool[4,4] z { , NN } ; 
  bool[4] _flat_237 { , NN } ; 
  bool[4] _flat_238 { , NN } ; 
  bool xitem { , NN } ; 
  bool _flat_236 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_231 { , NN } ; 
  int[1]{0} _flat_232 { , NN } ; 
  int{0} _flat_233 { , NN } ; 
  int[1]{4} _flat_234 { , NN } ; 
  int[1]{4} _flat_235 { , NN } ; 
  bool[.] cell { , NN } ; 
  int[1]{4} _flat_229 { , NN } ; 
  bool{0} _flat_230 { , NN } ; 

  _flat_230 = false; 
  _flat_229 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_229, _flat_230) ; 
  _flat_235 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_234 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_233 = 0; 
  _flat_232 = _mul_SxV_( _flat_233, _flat_234); 
  _flat_231 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_232 <= iv=[_eat_1223] < _flat_235)
        { 
          _flat_236 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_236) ; 
          _flat_238 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_237 = wrapper:UTDScalarB::ltBBB( xitem, _flat_238) ; 
        } : _flat_237 ; 
         } :
      genarray( _flat_231, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::leBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::leBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  leBBB ::  ---
 */
{ 
  int _eat_1226 { , NN } ; 
  int _eat_1225 { , NN } ; 
  int _eat_1224 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_86 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_83 { , NN } ; 
  int[3] _flat_84 { , NN } ; 
  int{0} _flat_85 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_85 = 0; 
  _flat_84 = _mul_SxV_( _flat_85, sy); 
  _flat_83 = false; 
  z = with {
        /* Partn */
        (_flat_84 <= iv=[_eat_1226, _eat_1225, _eat_1224] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_86 = wrapper:UTDScalarB::leBBB( xel, yel) ; 
        } : _flat_86 ; 
         } :
      genarray( sy, _flat_83); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::leBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::leBBB( bool[.,.,.] x { ,NN } , bool y { ,NN } )
/*
 *  leBBB ::  ---
 */
{ 
  int _eat_1229 { , NN } ; 
  int _eat_1228 { , NN } ; 
  int _eat_1227 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_82 { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_76 { , NN } ; 
  bool{0} _flat_77 { , NN } ; 
  int[3] _flat_78 { , NN } ; 
  int{0} _flat_79 { , NN } ; 
  int[3] _flat_80 { , NN } ; 
  int[3] _flat_81 { , NN } ; 

  _flat_81 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_80 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_79 = 0; 
  _flat_78 = _mul_SxV_( _flat_79, _flat_80); 
  _flat_77 = false; 
  _flat_76 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_78 <= iv=[_eat_1229, _eat_1228, _eat_1227] < _flat_81)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_82 = wrapper:UTDScalarB::leBBB( xel, y) ; 
        } : _flat_82 ; 
         } :
      genarray( _flat_76, _flat_77); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::leBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::leBBB( bool x { ,NN } , bool[4] y { ,NN } )
/*
 *  leBBB ::  ---
 */
{ 
  int _eat_1230 { , NN } ; 
  bool[4] z__SSA0_1 { , NN } ; 
  bool[4] z { , NN } ; 
  bool _flat_327 { , NN } ; 
  bool yel { , NN } ; 
  bool _flat_326 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_320 { , NN } ; 
  bool{0} _flat_321 { , NN } ; 
  int[1]{0} _flat_322 { , NN } ; 
  int{0} _flat_323 { , NN } ; 
  int[1]{4} _flat_324 { , NN } ; 
  int[1]{4} _flat_325 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_325 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_324 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_323 = 0; 
  _flat_322 = _mul_SxV_( _flat_323, _flat_324); 
  _flat_321 = false; 
  _flat_320 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_322 <= iv=[_eat_1230] < _flat_325)
        { 
          _flat_326 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_326) ; 
          _flat_327 = wrapper:UTDScalarB::leBBB( xel, yel) ; 
        } : _flat_327 ; 
         } :
      genarray( _flat_320, _flat_321); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotleBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB::jotdotleBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  jotdotleBBB ::  ---
 */
{ 
  int _eat_1231 { , NN } ; 
  bool[4,4] z { , NN } ; 
  bool[4] _flat_227 { , NN } ; 
  bool[4] _flat_228 { , NN } ; 
  bool xitem { , NN } ; 
  bool _flat_226 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_221 { , NN } ; 
  int[1]{0} _flat_222 { , NN } ; 
  int{0} _flat_223 { , NN } ; 
  int[1]{4} _flat_224 { , NN } ; 
  int[1]{4} _flat_225 { , NN } ; 
  bool[.] cell { , NN } ; 
  int[1]{4} _flat_219 { , NN } ; 
  bool{0} _flat_220 { , NN } ; 

  _flat_220 = false; 
  _flat_219 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_219, _flat_220) ; 
  _flat_225 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_224 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_223 = 0; 
  _flat_222 = _mul_SxV_( _flat_223, _flat_224); 
  _flat_221 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_222 <= iv=[_eat_1231] < _flat_225)
        { 
          _flat_226 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_226) ; 
          _flat_228 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_227 = wrapper:UTDScalarB::leBBB( xitem, _flat_228) ; 
        } : _flat_227 ; 
         } :
      genarray( _flat_221, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::gtBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::gtBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  gtBBB ::  ---
 */
{ 
  int _eat_1234 { , NN } ; 
  int _eat_1233 { , NN } ; 
  int _eat_1232 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_75 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_72 { , NN } ; 
  int[3] _flat_73 { , NN } ; 
  int{0} _flat_74 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_74 = 0; 
  _flat_73 = _mul_SxV_( _flat_74, sy); 
  _flat_72 = false; 
  z = with {
        /* Partn */
        (_flat_73 <= iv=[_eat_1234, _eat_1233, _eat_1232] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_75 = wrapper:UTDScalarB::gtBBB( xel, yel) ; 
        } : _flat_75 ; 
         } :
      genarray( sy, _flat_72); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::gtBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::gtBBB( bool[.,.,.] x { ,NN } , bool y { ,NN } )
/*
 *  gtBBB ::  ---
 */
{ 
  int _eat_1237 { , NN } ; 
  int _eat_1236 { , NN } ; 
  int _eat_1235 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_71 { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_65 { , NN } ; 
  bool{0} _flat_66 { , NN } ; 
  int[3] _flat_67 { , NN } ; 
  int{0} _flat_68 { , NN } ; 
  int[3] _flat_69 { , NN } ; 
  int[3] _flat_70 { , NN } ; 

  _flat_70 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_69 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_68 = 0; 
  _flat_67 = _mul_SxV_( _flat_68, _flat_69); 
  _flat_66 = false; 
  _flat_65 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_67 <= iv=[_eat_1237, _eat_1236, _eat_1235] < _flat_70)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_71 = wrapper:UTDScalarB::gtBBB( xel, y) ; 
        } : _flat_71 ; 
         } :
      genarray( _flat_65, _flat_66); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::gtBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::gtBBB( bool x { ,NN } , bool[4] y { ,NN } )
/*
 *  gtBBB ::  ---
 */
{ 
  int _eat_1238 { , NN } ; 
  bool[4] z__SSA0_1 { , NN } ; 
  bool[4] z { , NN } ; 
  bool _flat_319 { , NN } ; 
  bool yel { , NN } ; 
  bool _flat_318 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_312 { , NN } ; 
  bool{0} _flat_313 { , NN } ; 
  int[1]{0} _flat_314 { , NN } ; 
  int{0} _flat_315 { , NN } ; 
  int[1]{4} _flat_316 { , NN } ; 
  int[1]{4} _flat_317 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_317 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_316 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_315 = 0; 
  _flat_314 = _mul_SxV_( _flat_315, _flat_316); 
  _flat_313 = false; 
  _flat_312 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_314 <= iv=[_eat_1238] < _flat_317)
        { 
          _flat_318 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_318) ; 
          _flat_319 = wrapper:UTDScalarB::gtBBB( xel, yel) ; 
        } : _flat_319 ; 
         } :
      genarray( _flat_312, _flat_313); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotgtBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB::jotdotgtBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  jotdotgtBBB ::  ---
 */
{ 
  int _eat_1239 { , NN } ; 
  bool[4,4] z { , NN } ; 
  bool[4] _flat_217 { , NN } ; 
  bool[4] _flat_218 { , NN } ; 
  bool xitem { , NN } ; 
  bool _flat_216 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_211 { , NN } ; 
  int[1]{0} _flat_212 { , NN } ; 
  int{0} _flat_213 { , NN } ; 
  int[1]{4} _flat_214 { , NN } ; 
  int[1]{4} _flat_215 { , NN } ; 
  bool[.] cell { , NN } ; 
  int[1]{4} _flat_209 { , NN } ; 
  bool{0} _flat_210 { , NN } ; 

  _flat_210 = false; 
  _flat_209 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_209, _flat_210) ; 
  _flat_215 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_214 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_213 = 0; 
  _flat_212 = _mul_SxV_( _flat_213, _flat_214); 
  _flat_211 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_212 <= iv=[_eat_1239] < _flat_215)
        { 
          _flat_216 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_216) ; 
          _flat_218 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_217 = wrapper:UTDScalarB::gtBBB( xitem, _flat_218) ; 
        } : _flat_217 ; 
         } :
      genarray( _flat_211, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::geBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::geBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  geBBB ::  ---
 */
{ 
  int _eat_1242 { , NN } ; 
  int _eat_1241 { , NN } ; 
  int _eat_1240 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_64 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_61 { , NN } ; 
  int[3] _flat_62 { , NN } ; 
  int{0} _flat_63 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_63 = 0; 
  _flat_62 = _mul_SxV_( _flat_63, sy); 
  _flat_61 = false; 
  z = with {
        /* Partn */
        (_flat_62 <= iv=[_eat_1242, _eat_1241, _eat_1240] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_64 = wrapper:UTDScalarB::geBBB( xel, yel) ; 
        } : _flat_64 ; 
         } :
      genarray( sy, _flat_61); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::geBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::geBBB( bool[.,.,.] x { ,NN } , bool y { ,NN } )
/*
 *  geBBB ::  ---
 */
{ 
  int _eat_1245 { , NN } ; 
  int _eat_1244 { , NN } ; 
  int _eat_1243 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_60 { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_54 { , NN } ; 
  bool{0} _flat_55 { , NN } ; 
  int[3] _flat_56 { , NN } ; 
  int{0} _flat_57 { , NN } ; 
  int[3] _flat_58 { , NN } ; 
  int[3] _flat_59 { , NN } ; 

  _flat_59 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_58 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_57 = 0; 
  _flat_56 = _mul_SxV_( _flat_57, _flat_58); 
  _flat_55 = false; 
  _flat_54 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_56 <= iv=[_eat_1245, _eat_1244, _eat_1243] < _flat_59)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_60 = wrapper:UTDScalarB::geBBB( xel, y) ; 
        } : _flat_60 ; 
         } :
      genarray( _flat_54, _flat_55); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::geBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::geBBB( bool x { ,NN } , bool[4] y { ,NN } )
/*
 *  geBBB ::  ---
 */
{ 
  int _eat_1246 { , NN } ; 
  bool[4] z__SSA0_1 { , NN } ; 
  bool[4] z { , NN } ; 
  bool _flat_311 { , NN } ; 
  bool yel { , NN } ; 
  bool _flat_310 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_304 { , NN } ; 
  bool{0} _flat_305 { , NN } ; 
  int[1]{0} _flat_306 { , NN } ; 
  int{0} _flat_307 { , NN } ; 
  int[1]{4} _flat_308 { , NN } ; 
  int[1]{4} _flat_309 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_309 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_308 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_307 = 0; 
  _flat_306 = _mul_SxV_( _flat_307, _flat_308); 
  _flat_305 = false; 
  _flat_304 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_306 <= iv=[_eat_1246] < _flat_309)
        { 
          _flat_310 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_310) ; 
          _flat_311 = wrapper:UTDScalarB::geBBB( xel, yel) ; 
        } : _flat_311 ; 
         } :
      genarray( _flat_304, _flat_305); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotgeBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB::jotdotgeBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  jotdotgeBBB ::  ---
 */
{ 
  int _eat_1247 { , NN } ; 
  bool[4,4] z { , NN } ; 
  bool[4] _flat_207 { , NN } ; 
  bool[4] _flat_208 { , NN } ; 
  bool xitem { , NN } ; 
  bool _flat_206 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_201 { , NN } ; 
  int[1]{0} _flat_202 { , NN } ; 
  int{0} _flat_203 { , NN } ; 
  int[1]{4} _flat_204 { , NN } ; 
  int[1]{4} _flat_205 { , NN } ; 
  bool[.] cell { , NN } ; 
  int[1]{4} _flat_199 { , NN } ; 
  bool{0} _flat_200 { , NN } ; 

  _flat_200 = false; 
  _flat_199 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_199, _flat_200) ; 
  _flat_205 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_204 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_203 = 0; 
  _flat_202 = _mul_SxV_( _flat_203, _flat_204); 
  _flat_201 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_202 <= iv=[_eat_1247] < _flat_205)
        { 
          _flat_206 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_206) ; 
          _flat_208 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_207 = wrapper:UTDScalarB::geBBB( xitem, _flat_208) ; 
        } : _flat_207 ; 
         } :
      genarray( _flat_201, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB::rhoXBI(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[3] UTDScalarB::rhoXBI( bool[.,.,.] y { ,NN } )
/*
 *  rhoXBI ::  ---
 */
{ 
  int[3] _flat_155__SSA0_1 { , NN } ; 
  int[3] _flat_155 { , NN } ; 

  _flat_155 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_155__SSA0_1 = _type_conv_( int[.], _flat_155); 
  return( _flat_155__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::eqBBB( bool[.,.,.] x { ,NN } , bool y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  int _eat_1250 { , NN } ; 
  int _eat_1249 { , NN } ; 
  int _eat_1248 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_49 { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_43 { , NN } ; 
  bool{0} _flat_44 { , NN } ; 
  int[3] _flat_45 { , NN } ; 
  int{0} _flat_46 { , NN } ; 
  int[3] _flat_47 { , NN } ; 
  int[3] _flat_48 { , NN } ; 

  _flat_48 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_47 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_46 = 0; 
  _flat_45 = _mul_SxV_( _flat_46, _flat_47); 
  _flat_44 = false; 
  _flat_43 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_45 <= iv=[_eat_1250, _eat_1249, _eat_1248] < _flat_48)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_49 = wrapper:UTDScalarB::eqBBB( xel, y) ; 
        } : _flat_49 ; 
         } :
      genarray( _flat_43, _flat_44); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::eqBBB( bool x { ,NN } , bool[4] y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  int _eat_1251 { , NN } ; 
  bool[4] z__SSA0_1 { , NN } ; 
  bool[4] z { , NN } ; 
  bool _flat_303 { , NN } ; 
  bool yel { , NN } ; 
  bool _flat_302 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_296 { , NN } ; 
  bool{0} _flat_297 { , NN } ; 
  int[1]{0} _flat_298 { , NN } ; 
  int{0} _flat_299 { , NN } ; 
  int[1]{4} _flat_300 { , NN } ; 
  int[1]{4} _flat_301 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_301 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_300 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_299 = 0; 
  _flat_298 = _mul_SxV_( _flat_299, _flat_300); 
  _flat_297 = false; 
  _flat_296 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_298 <= iv=[_eat_1251] < _flat_301)
        { 
          _flat_302 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_302) ; 
          _flat_303 = wrapper:UTDScalarB::eqBBB( xel, yel) ; 
        } : _flat_303 ; 
         } :
      genarray( _flat_296, _flat_297); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdoteqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB::jotdoteqBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  jotdoteqBBB ::  ---
 */
{ 
  int _eat_1252 { , NN } ; 
  bool[4,4] z { , NN } ; 
  bool[4] _flat_197 { , NN } ; 
  bool[4] _flat_198 { , NN } ; 
  bool xitem { , NN } ; 
  bool _flat_196 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_191 { , NN } ; 
  int[1]{0} _flat_192 { , NN } ; 
  int{0} _flat_193 { , NN } ; 
  int[1]{4} _flat_194 { , NN } ; 
  int[1]{4} _flat_195 { , NN } ; 
  bool[.] cell { , NN } ; 
  int[1]{4} _flat_189 { , NN } ; 
  bool{0} _flat_190 { , NN } ; 

  _flat_190 = false; 
  _flat_189 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_189, _flat_190) ; 
  _flat_195 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_194 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_193 = 0; 
  _flat_192 = _mul_SxV_( _flat_193, _flat_194); 
  _flat_191 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_192 <= iv=[_eat_1252] < _flat_195)
        { 
          _flat_196 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_196) ; 
          _flat_198 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_197 = wrapper:UTDScalarB::eqBBB( xitem, _flat_198) ; 
        } : _flat_197 ; 
         } :
      genarray( _flat_191, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB:Array::++( bool[13] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1254 { , NN } ; 
  int _eat_1253 { , NN } ; 
  bool[14] res__SSA0_2 { , NN } ; 
  bool[14] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{14} _flat_723 { , NN } ; 
  int[1]{13} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{13} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{13} _flat_722 { , NN } ; 
  bool[14] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{13} _flat_714 { , NN } ; 
  int[1]{14} new_shp { , NN } ; 
  int[1]{13} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{14} _flat_702 { , NN } ; 
  int{13} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{13} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1253] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1254] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[13] UTDScalarB:Array::to_bool( bool[13] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[14] UTDScalarB::comaBBB( bool[13] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[14] _flat_161__SSA0_1 { , NN } ; 
  bool[14] _flat_161 { , NN } ; 
  bool[13] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[13] UTDScalarB:Array::++( bool[12] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1256 { , NN } ; 
  int _eat_1255 { , NN } ; 
  bool[13] res__SSA0_2 { , NN } ; 
  bool[13] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{13} _flat_723 { , NN } ; 
  int[1]{12} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{12} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{12} _flat_722 { , NN } ; 
  bool[13] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{12} _flat_714 { , NN } ; 
  int[1]{13} new_shp { , NN } ; 
  int[1]{12} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{13} _flat_702 { , NN } ; 
  int{12} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{12} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1255] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1256] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[13] UTDScalarB::comaBBB( bool[12] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[13] _flat_161__SSA0_1 { , NN } ; 
  bool[13] _flat_161 { , NN } ; 
  bool[12] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[12] UTDScalarB:Array::++( bool[11] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1258 { , NN } ; 
  int _eat_1257 { , NN } ; 
  bool[12] res__SSA0_2 { , NN } ; 
  bool[12] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{12} _flat_723 { , NN } ; 
  int[1]{11} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{11} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{11} _flat_722 { , NN } ; 
  bool[12] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{11} _flat_714 { , NN } ; 
  int[1]{12} new_shp { , NN } ; 
  int[1]{11} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{12} _flat_702 { , NN } ; 
  int{11} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{11} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1257] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1258] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[11] UTDScalarB:Array::to_bool( bool[11] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[12] UTDScalarB::comaBBB( bool[11] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[12] _flat_161__SSA0_1 { , NN } ; 
  bool[12] _flat_161 { , NN } ; 
  bool[11] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[11] UTDScalarB:Array::++( bool[10] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1260 { , NN } ; 
  int _eat_1259 { , NN } ; 
  bool[11] res__SSA0_2 { , NN } ; 
  bool[11] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{11} _flat_723 { , NN } ; 
  int[1]{10} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{10} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{10} _flat_722 { , NN } ; 
  bool[11] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{10} _flat_714 { , NN } ; 
  int[1]{11} new_shp { , NN } ; 
  int[1]{10} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{11} _flat_702 { , NN } ; 
  int{10} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{10} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1259] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1260] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[10] UTDScalarB:Array::to_bool( bool[10] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[11] UTDScalarB::comaBBB( bool[10] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[11] _flat_161__SSA0_1 { , NN } ; 
  bool[11] _flat_161 { , NN } ; 
  bool[10] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[10] UTDScalarB:Array::++( bool[9] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1262 { , NN } ; 
  int _eat_1261 { , NN } ; 
  bool[10] res__SSA0_2 { , NN } ; 
  bool[10] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{10} _flat_723 { , NN } ; 
  int[1]{9} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{9} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{9} _flat_722 { , NN } ; 
  bool[10] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{9} _flat_714 { , NN } ; 
  int[1]{10} new_shp { , NN } ; 
  int[1]{9} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{10} _flat_702 { , NN } ; 
  int{9} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{9} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1261] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1262] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[9] UTDScalarB:Array::to_bool( bool[9] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[10] UTDScalarB::comaBBB( bool[9] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[10] _flat_161__SSA0_1 { , NN } ; 
  bool[10] _flat_161 { , NN } ; 
  bool[9] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[9] UTDScalarB:Array::++( bool[8] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1264 { , NN } ; 
  int _eat_1263 { , NN } ; 
  bool[9] res__SSA0_2 { , NN } ; 
  bool[9] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{9} _flat_723 { , NN } ; 
  int[1]{8} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{8} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{8} _flat_722 { , NN } ; 
  bool[9] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{8} _flat_714 { , NN } ; 
  int[1]{9} new_shp { , NN } ; 
  int[1]{8} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{9} _flat_702 { , NN } ; 
  int{8} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{8} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1263] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1264] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[9] UTDScalarB::comaBBB( bool[8] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[9] _flat_161__SSA0_1 { , NN } ; 
  bool[9] _flat_161 { , NN } ; 
  bool[8] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[8] UTDScalarB:Array::++( bool[7] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1266 { , NN } ; 
  int _eat_1265 { , NN } ; 
  bool[8] res__SSA0_2 { , NN } ; 
  bool[8] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{8} _flat_723 { , NN } ; 
  int[1]{7} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{7} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{7} _flat_722 { , NN } ; 
  bool[8] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{7} _flat_714 { , NN } ; 
  int[1]{8} new_shp { , NN } ; 
  int[1]{7} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{8} _flat_702 { , NN } ; 
  int{7} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{7} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1265] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1266] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[7] UTDScalarB:Array::to_bool( bool[7] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[8] UTDScalarB::comaBBB( bool[7] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[8] _flat_161__SSA0_1 { , NN } ; 
  bool[8] _flat_161 { , NN } ; 
  bool[7] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::andBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  andBBB ::  ---
 */
{ 
  int _eat_1269 { , NN } ; 
  int _eat_1268 { , NN } ; 
  int _eat_1267 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_42 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_39 { , NN } ; 
  int[3] _flat_40 { , NN } ; 
  int{0} _flat_41 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_41 = 0; 
  _flat_40 = _mul_SxV_( _flat_41, sy); 
  _flat_39 = false; 
  z = with {
        /* Partn */
        (_flat_40 <= iv=[_eat_1269, _eat_1268, _eat_1267] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_42 = wrapper:UTDScalarB::andBBB( xel, yel) ; 
        } : _flat_42 ; 
         } :
      genarray( sy, _flat_39); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::notXBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::notXBB( bool[.,.,.] y { ,NN } )
/*
 *  notXBB ::  ---
 */
{ 
  int _eat_1272 { , NN } ; 
  int _eat_1271 { , NN } ; 
  int _eat_1270 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_10 { , NN } ; 
  bool _flat_11 { , NN } ; 
  bool _flat_12 { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_4 { , NN } ; 
  bool{0} _flat_5 { , NN } ; 
  int[3] _flat_6 { , NN } ; 
  int{0} _flat_7 { , NN } ; 
  int[3] _flat_8 { , NN } ; 
  int[3] _flat_9 { , NN } ; 

  _flat_9 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_8 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_7 = 0; 
  _flat_6 = _mul_SxV_( _flat_7, _flat_8); 
  _flat_5 = false; 
  _flat_4 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_6 <= iv=[_eat_1272, _eat_1271, _eat_1270] < _flat_9)
        { 
          _flat_12 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_11 = wrapper:UTDScalarB:Array::to_bool( _flat_12) ; 
          _flat_10 = wrapper:UTDScalarB::notXBB( _flat_11) ; 
        } : _flat_10 ; 
         } :
      genarray( _flat_4, _flat_5); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[7] UTDScalarB:Array::++( bool[6] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1274 { , NN } ; 
  int _eat_1273 { , NN } ; 
  bool[7] res__SSA0_2 { , NN } ; 
  bool[7] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{7} _flat_723 { , NN } ; 
  int[1]{6} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{6} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{6} _flat_722 { , NN } ; 
  bool[7] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{6} _flat_714 { , NN } ; 
  int[1]{7} new_shp { , NN } ; 
  int[1]{6} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{7} _flat_702 { , NN } ; 
  int{6} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{6} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1273] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1274] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[6] UTDScalarB:Array::to_bool( bool[6] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[7] UTDScalarB::comaBBB( bool[6] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[7] _flat_161__SSA0_1 { , NN } ; 
  bool[7] _flat_161 { , NN } ; 
  bool[6] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[6] UTDScalarB:Array::++( bool[5] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1276 { , NN } ; 
  int _eat_1275 { , NN } ; 
  bool[6] res__SSA0_2 { , NN } ; 
  bool[6] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{6} _flat_723 { , NN } ; 
  int[1]{5} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{5} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{5} _flat_722 { , NN } ; 
  bool[6] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{5} _flat_714 { , NN } ; 
  int[1]{6} new_shp { , NN } ; 
  int[1]{5} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{6} _flat_702 { , NN } ; 
  int{5} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{5} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1275] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1276] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[5] UTDScalarB:Array::to_bool( bool[5] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[6] UTDScalarB::comaBBB( bool[5] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[6] _flat_161__SSA0_1 { , NN } ; 
  bool[6] _flat_161 { , NN } ; 
  bool[5] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:ArrayArith::sel( int[3] idx { ,NN } , bool[.,.,.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[3] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{3} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{3} _flat_66 { , NN } ; 
  int[3] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::*(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[3] UTDScalarB:ArrayArith::*( int A { ,NN } , int[3] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_1821 { , NN } ; 
  int[3] res__SSA0_1 { , NN } ; 
  int[3] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1]{0} _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1]{3} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_1821] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[3] UTDScalarB:ArrayArith::shape( bool[.,.,.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[3] _flat_11__SSA0_1 { , NN } ; 
  int[3] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[.,.,.] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  int _eat_1279 { , NN } ; 
  int _eat_1278 { , NN } ; 
  int _eat_1277 { , NN } ; 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1797 { , NN } ; 
  int[3] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[3] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[3] _flat_1795 { , NN } ; 
  int[3] _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv=[_eat_1279, _eat_1278, _eat_1277] < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::eqBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  int _eat_1282 { , NN } ; 
  int _eat_1281 { , NN } ; 
  int _eat_1280 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_53 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  bool{0} _flat_50 { , NN } ; 
  int[3] _flat_51 { , NN } ; 
  int{0} _flat_52 { , NN } ; 
  int[3] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_52 = 0; 
  _flat_51 = _mul_SxV_( _flat_52, sy); 
  _flat_50 = false; 
  z = with {
        /* Partn */
        (_flat_51 <= iv=[_eat_1282, _eat_1281, _eat_1280] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_53 = wrapper:UTDScalarB::eqBBB( xel, yel) ; 
        } : _flat_53 ; 
         } :
      genarray( sy, _flat_50); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB:Array::to_bool( bool[.,.,.] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:ArrayArith::sel( int[1] idx { ,NN } , bool[3] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0]{} _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[1]{3} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{3} UTDScalarB:ArrayArith::shape( bool[3] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{3} _flat_11__SSA0_1 { , NN } ; 
  int[1]{3} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[3] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  int _eat_1283 { , NN } ; 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1797 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[1] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[1]{3} _flat_1795 { , NN } ; 
  int[1]{3} _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv=[_eat_1283] < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::one(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{1} UTDScalarB:ArrayArith::one( int[3] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::==(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[3] UTDScalarB:Array::==( int[3] A { ,NN } , int[3] B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  int _eat_1284 { , NN } ; 
  bool[3] res__SSA0_1 { , NN } ; 
  bool[3] res { , NN } ; 
  bool _flat_625 { , NN } ; 
  int _flat_626 { , NN } ; 
  int _flat_627 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_620 { , NN } ; 
  int{1} _flat_621 { , NN } ; 
  int{1} _flat_622 { , NN } ; 
  int[1]{0} _flat_623 { , NN } ; 
  int{0} _flat_624 { , NN } ; 
  int[1]{3} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_624 = 0; 
  _flat_623 = _mul_SxV_( _flat_624, shp); 
  _flat_622 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_621 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_620 = _eq_SxS_( _flat_621, _flat_622); 
  res = with {
        /* Partn */
        (_flat_623 <= iv=[_eat_1284] < shp)
        { 
          _flat_627 = _sel_VxA_( iv, B); 
          _flat_626 = _sel_VxA_( iv, A); 
          _flat_625 = _eq_SxS_( _flat_626, _flat_627); 
        } : _flat_625 ; 
         } :
      genarray( shp, _flat_620); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::sameBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::sameBBB( bool[.,.,.] x { ,NN } , bool[.,.,.] y { ,NN } )
/*
 *  sameBBB ::  ---
 */
{ 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  bool _hce_0 { , NN } ; 
  bool _hce_1 { , NN } ; 
  bool _flat_170 { , NN } ; 
  int{3} _flat_171 { , NN } ; 
  int{3} _flat_172 { , NN } ; 

  _flat_172 = _dim_A_( y); 
  _flat_171 = _dim_A_( x); 
  _flat_170 = ( _flat_171 wrapper:UTDScalarB:Array::==_flat_172) ; 
  _hce_1 = UTDScalarB::_dup_1161_sameBBB__Cond_1( _flat_170, y, x) ; 
  _hce_0 = UTDScalarB::_dup_1162_sameBBB__Cond_0( _hce_1, y, x) ; 
  z = _hce_0; 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::sel( int[3] idx { ,NN } , bool[.,.,.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[3] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{3} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{3} _flat_66 { , NN } ; 
  int[3] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[3] UTDScalarB:Array::shape( bool[.,.,.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[3] _flat_11__SSA0_1 { , NN } ; 
  int[3] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::andBBB( bool[.,.,.] x { ,NN } , bool y { ,NN } )
/*
 *  andBBB ::  ---
 */
{ 
  int _eat_1287 { , NN } ; 
  int _eat_1286 { , NN } ; 
  int _eat_1285 { , NN } ; 
  bool[.,.,.] z__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool _flat_38 { , NN } ; 
  bool xel { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_32 { , NN } ; 
  bool{0} _flat_33 { , NN } ; 
  int[3] _flat_34 { , NN } ; 
  int{0} _flat_35 { , NN } ; 
  int[3] _flat_36 { , NN } ; 
  int[3] _flat_37 { , NN } ; 

  _flat_37 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_36 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_35 = 0; 
  _flat_34 = _mul_SxV_( _flat_35, _flat_36); 
  _flat_33 = false; 
  _flat_32 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_34 <= iv=[_eat_1287, _eat_1286, _eat_1285] < _flat_37)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          _flat_38 = wrapper:UTDScalarB::andBBB( xel, y) ; 
        } : _flat_38 ; 
         } :
      genarray( _flat_32, _flat_33); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] UTDScalarB:Array::sel( int[.] idx { ,NN } , bool array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1] _flat_66 { , NN } ; 
  int[0]{} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:ArrayBasics::sel( int[1] idx { ,NN } , int[0] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[0]{} _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[1]{0} _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::sel( int idx { ,NN } , int[0] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{0} UTDScalarB:Array::shape( int[0] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{0} _flat_6__SSA0_1 { , NN } ; 
  int[1]{0} _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::O2V(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB::O2V( int[0] shp { ,NN } , int offset { ,NN } )
/*
 *  O2V ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  bool _flat_403 { , NN } ; 
  int{0} _flat_404 { , NN } ; 
  int _flat_399 { , NN } ; 
  int{0} _flat_400 { , NN } ; 
  int[1]{0} _flat_401 { , NN } ; 
  int{1} _flat_402 { , NN } ; 
  bool _flat_388 { , NN } ; 
  int{0} _flat_389 { , NN } ; 
  int i { , NN } ; 
  int _flat_384 { , NN } ; 
  int{0} _flat_385 { , NN } ; 
  int[1]{0} _flat_386 { , NN } ; 
  int{2} _flat_387 { , NN } ; 
  int[.] wts { , NN } ; 
  int[.] iv { , NN } ; 
  int[1]{0} _flat_382 { , NN } ; 
  int{1} _flat_383 { , NN } ; 

  _flat_383 = 1; 
  _flat_382 = wrapper:UTDScalarB:Array::shape( shp) ; 
  iv = wrapper:UTDScalarB:Array::genarray( _flat_382, _flat_383) ; 
  wts = iv; 
  _flat_387 = 2; 
  _flat_386 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_385 = 0; 
  _flat_384 = wrapper:UTDScalarB:Array::sel( _flat_385, _flat_386) ; 
  i = ( _flat_384 wrapper:Array::-_flat_387) ; 
  _flat_389 = 0; 
  _flat_388 = ( i wrapper:Array::>=_flat_389) ; 
  wts__SSA0_1 = UTDScalarB::_dup_1158_O2V__Cond_7( wts, i, _flat_388, shp) ; 
  _flat_402 = 1; 
  _flat_401 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_400 = 0; 
  _flat_399 = wrapper:UTDScalarB:Array::sel( _flat_400, _flat_401) ; 
  i__SSA0_1 = ( _flat_399 wrapper:Array::-_flat_402) ; 
  _flat_404 = 0; 
  _flat_403 = ( i__SSA0_1 wrapper:Array::>=_flat_404) ; 
  iv__SSA0_1 = UTDScalarB::_dup_1160_O2V__Cond_5( iv, wts__SSA0_1, i__SSA0_1, _flat_403, offset, shp) ; 
  iv__SSA0_2 = _type_conv_( int[.], iv__SSA0_1); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::prod(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::prod( int[0] arr_a { ,NN } )
/*
 *  prod ::  ---
 */
{ 
  int _eat_1288 { , NN } ; 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 
  int _flat_1721 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_1716 { , NN } ; 
  int[1]{0} _flat_1717 { , NN } ; 
  int{0} _flat_1718 { , NN } ; 
  int[1]{0} _flat_1719 { , NN } ; 
  int[1]{0} _flat_1720 { , NN } ; 

  _flat_1720 = _shape_A_( arr_a); 
  _flat_1719 = _shape_A_( arr_a); 
  _flat_1718 = 0; 
  _flat_1717 = _mul_SxV_( _flat_1718, _flat_1719); 
  _flat_1716 = 1; 
  res = with {
        /* Partn */
        (_flat_1717 <= iv=[_eat_1288] < _flat_1720)
        { 
          _flat_1721 = _sel_VxA_( iv, arr_a); 
        } : _flat_1721 ; 
         } :
      fold( UTDScalarB:ArrayArith::*(), _flat_1716); 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[0]{} UTDScalarB:Array::shape( bool array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[0]{} _flat_11__SSA0_1 { , NN } ; 
  int[0]{} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoIBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::rhoIBB( int[3] x { ,NN } , bool y { ,NN } )
/*
 *  rhoIBB ::  ---
 */
{ 
  int _eat_1291 { , NN } ; 
  int _eat_1290 { , NN } ; 
  int _eat_1289 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool[*] el { , NN } ; 
  int[.] _flat_153 { , NN } ; 
  int[0]{} _flat_154 { , NN } ; 
  int _flat_151 { , NN } ; 
  int[0]{} _flat_152 { , NN } ; 
  int offset { , NN } ; 
  int[3] _flat_150 { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_144 { , NN } ; 
  bool{0} _flat_145 { , NN } ; 
  int[3] _flat_146 { , NN } ; 
  int{0} _flat_147 { , NN } ; 
  int[3] _flat_148 { , NN } ; 
  int[3] _flat_149 { , NN } ; 

  _flat_149 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_148 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_147 = 0; 
  _flat_146 = _mul_SxV_( _flat_147, _flat_148); 
  _flat_145 = false; 
  _flat_144 = wrapper:UTDScalarB:Array::toi( x) ; 
  z = with {
        /* Partn */
        (_flat_146 <= iv=[_eat_1291, _eat_1290, _eat_1289] < _flat_149)
        { 
          _flat_150 = wrapper:UTDScalarB:Array::toi( x) ; 
          offset = wrapper:UTDScalarB::V2O( _flat_150, iv) ; 
          _flat_152 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_151 = wrapper:UTDScalarB:Array::prod( _flat_152) ; 
          offset__SSA0_1 = _aplmod_SxS_( offset, _flat_151); 
          _flat_154 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_153 = wrapper:UTDScalarB::O2V( _flat_154, offset__SSA0_1) ; 
          el = wrapper:UTDScalarB:Array::sel( _flat_153, y) ; 
        } : el ; 
         } :
      genarray( _flat_144, _flat_145); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[5] UTDScalarB:Array::++( bool[4] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1293 { , NN } ; 
  int _eat_1292 { , NN } ; 
  bool[5] res__SSA0_2 { , NN } ; 
  bool[5] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{5} _flat_723 { , NN } ; 
  int[1]{4} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{4} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{4} _flat_722 { , NN } ; 
  bool[5] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{4} _flat_714 { , NN } ; 
  int[1]{5} new_shp { , NN } ; 
  int[1]{4} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{5} _flat_702 { , NN } ; 
  int{4} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{4} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1292] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1293] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[5] UTDScalarB::comaBBB( bool[4] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[5] _flat_161__SSA0_1 { , NN } ; 
  bool[5] _flat_161 { , NN } ; 
  bool[4] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:ArrayArith::sel( int[2] idx { ,NN } , bool[.,.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[2] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{2} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{2} _flat_66 { , NN } ; 
  int[2] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::*(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[2] UTDScalarB:ArrayArith::*( int A { ,NN } , int[2] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_1821 { , NN } ; 
  int[2] res__SSA0_1 { , NN } ; 
  int[2] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1]{0} _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1]{2} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_1821] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[2] UTDScalarB:ArrayArith::shape( bool[.,.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[2] _flat_11__SSA0_1 { , NN } ; 
  int[2] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[.,.] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  int _eat_1295 { , NN } ; 
  int _eat_1294 { , NN } ; 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1797 { , NN } ; 
  int[2] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[2] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[2] _flat_1795 { , NN } ; 
  int[2] _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv=[_eat_1295, _eat_1294] < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::sel( int[2] idx { ,NN } , bool[.,.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[2] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{2} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{2} _flat_66 { , NN } ; 
  int[2] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::sel( int[2] idx { ,NN } , bool[4,4] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[2] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0]{} _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{2} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{2} _flat_66 { , NN } ; 
  int[2]{4,4} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[2] UTDScalarB:Array::shape( bool[.,.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[2] _flat_11__SSA0_1 { , NN } ; 
  int[2] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::eqBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.] UTDScalarB::eqBBB( bool[4,4] x { ,NN } , bool[.,.] y { ,NN } )
/*
 *  eqBBB ::  ---
 */
{ 
  int _eat_1297 { , NN } ; 
  int _eat_1296 { , NN } ; 
  bool[.,.] z__SSA0_1 { , NN } ; 
  bool[.,.] z { , NN } ; 
  bool _flat_53 { , NN } ; 
  bool yel { , NN } ; 
  bool xel { , NN } ; 
  int[2] iv { , NN } ; 
  bool{0} _flat_50 { , NN } ; 
  int[2] _flat_51 { , NN } ; 
  int{0} _flat_52 { , NN } ; 
  int[2] sy { , NN } ; 

  sy = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_52 = 0; 
  _flat_51 = _mul_SxV_( _flat_52, sy); 
  _flat_50 = false; 
  z = with {
        /* Partn */
        (_flat_51 <= iv=[_eat_1297, _eat_1296] < sy)
        { 
          xel = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          yel = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          _flat_53 = wrapper:UTDScalarB::eqBBB( xel, yel) ; 
        } : _flat_53 ; 
         } :
      genarray( sy, _flat_50); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB:Array::to_bool( bool[4,4] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.] UTDScalarB:Array::to_bool( bool[.,.] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:ArrayArith::sel( int[1] idx { ,NN } , bool[2] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0]{} _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[1]{2} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{2} UTDScalarB:ArrayArith::shape( bool[2] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{2} _flat_11__SSA0_1 { , NN } ; 
  int[1]{2} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[2] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  int _eat_1298 { , NN } ; 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1797 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[1] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[1]{2} _flat_1795 { , NN } ; 
  int[1]{2} _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv=[_eat_1298] < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::one(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{1} UTDScalarB:ArrayArith::one( int[2] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::==(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[2] UTDScalarB:Array::==( int[2] A { ,NN } , int[2] B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  int _eat_1299 { , NN } ; 
  bool[2] res__SSA0_1 { , NN } ; 
  bool[2] res { , NN } ; 
  bool _flat_625 { , NN } ; 
  int _flat_626 { , NN } ; 
  int _flat_627 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_620 { , NN } ; 
  int{1} _flat_621 { , NN } ; 
  int{1} _flat_622 { , NN } ; 
  int[1]{0} _flat_623 { , NN } ; 
  int{0} _flat_624 { , NN } ; 
  int[1]{2} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_624 = 0; 
  _flat_623 = _mul_SxV_( _flat_624, shp); 
  _flat_622 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_621 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_620 = _eq_SxS_( _flat_621, _flat_622); 
  res = with {
        /* Partn */
        (_flat_623 <= iv=[_eat_1299] < shp)
        { 
          _flat_627 = _sel_VxA_( iv, B); 
          _flat_626 = _sel_VxA_( iv, A); 
          _flat_625 = _eq_SxS_( _flat_626, _flat_627); 
        } : _flat_625 ; 
         } :
      genarray( shp, _flat_620); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::sameBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB::sameBBB( bool[4,4] x { ,NN } , bool[.,.] y { ,NN } )
/*
 *  sameBBB ::  ---
 */
{ 
  bool z__SSA0_1 { , NN } ; 
  bool z { , NN } ; 
  bool _hce_0 { , NN } ; 
  bool _hce_1 { , NN } ; 
  bool _flat_170 { , NN } ; 
  int{2} _flat_171 { , NN } ; 
  int{2} _flat_172 { , NN } ; 

  _flat_172 = _dim_A_( y); 
  _flat_171 = _dim_A_( x); 
  _flat_170 = ( _flat_171 wrapper:UTDScalarB:Array::==_flat_172) ; 
  _hce_1 = UTDScalarB::_dup_1155_sameBBB__Cond_1( _flat_170, y, x) ; 
  _hce_0 = UTDScalarB::_dup_1156_sameBBB__Cond_0( _hce_1, y, x) ; 
  z = _hce_0; 
  z__SSA0_1 = _type_conv_( bool, z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::andBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::andBBB( bool x { ,NN } , bool[4] y { ,NN } )
/*
 *  andBBB ::  ---
 */
{ 
  int _eat_1300 { , NN } ; 
  bool[4] z__SSA0_1 { , NN } ; 
  bool[4] z { , NN } ; 
  bool _flat_295 { , NN } ; 
  bool yel { , NN } ; 
  bool _flat_294 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_288 { , NN } ; 
  bool{0} _flat_289 { , NN } ; 
  int[1]{0} _flat_290 { , NN } ; 
  int{0} _flat_291 { , NN } ; 
  int[1]{4} _flat_292 { , NN } ; 
  int[1]{4} _flat_293 { , NN } ; 
  bool xel { , NN } ; 

  xel = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_293 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_292 = wrapper:UTDScalarB:Array::shape( y) ; 
  _flat_291 = 0; 
  _flat_290 = _mul_SxV_( _flat_291, _flat_292); 
  _flat_289 = false; 
  _flat_288 = wrapper:UTDScalarB:Array::shape( y) ; 
  z = with {
        /* Partn */
        (_flat_290 <= iv=[_eat_1300] < _flat_293)
        { 
          _flat_294 = wrapper:UTDScalarB:Array::sel( iv, y) ; 
          yel = wrapper:UTDScalarB:Array::to_bool( _flat_294) ; 
          _flat_295 = wrapper:UTDScalarB::andBBB( xel, yel) ; 
        } : _flat_295 ; 
         } :
      genarray( _flat_288, _flat_289); 
  z__SSA0_1 = _type_conv_( bool[+], z); 
  return( z__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::sel( int[1] idx { ,NN } , bool[4] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0]{} _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[1]{4} _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{4} UTDScalarB:Array::shape( bool[4] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{4} _flat_11__SSA0_1 { , NN } ; 
  int[1]{4} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::jotdotandBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4,4] UTDScalarB::jotdotandBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  jotdotandBBB ::  ---
 */
{ 
  int _eat_1301 { , NN } ; 
  bool[4,4] z { , NN } ; 
  bool[4] _flat_187 { , NN } ; 
  bool[4] _flat_188 { , NN } ; 
  bool xitem { , NN } ; 
  bool _flat_186 { , NN } ; 
  int[1] iv { , NN } ; 
  int[1]{4} _flat_181 { , NN } ; 
  int[1]{0} _flat_182 { , NN } ; 
  int{0} _flat_183 { , NN } ; 
  int[1]{4} _flat_184 { , NN } ; 
  int[1]{4} _flat_185 { , NN } ; 
  bool[.] cell { , NN } ; 
  int[1]{4} _flat_179 { , NN } ; 
  bool{0} _flat_180 { , NN } ; 

  _flat_180 = false; 
  _flat_179 = wrapper:UTDScalarB:Array::shape( y) ; 
  cell = wrapper:UTDScalarB:Array::genarray( _flat_179, _flat_180) ; 
  _flat_185 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_184 = wrapper:UTDScalarB:Array::shape( x) ; 
  _flat_183 = 0; 
  _flat_182 = _mul_SxV_( _flat_183, _flat_184); 
  _flat_181 = wrapper:UTDScalarB:Array::shape( x) ; 
  z = with {
        /* Partn */
        (_flat_182 <= iv=[_eat_1301] < _flat_185)
        { 
          _flat_186 = wrapper:UTDScalarB:Array::sel( iv, x) ; 
          xitem = wrapper:UTDScalarB:Array::to_bool( _flat_186) ; 
          _flat_188 = wrapper:UTDScalarB:Array::to_bool( y) ; 
          _flat_187 = wrapper:UTDScalarB::andBBB( xitem, _flat_188) ; 
        } : _flat_187 ; 
         } :
      genarray( _flat_181, cell); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{16} UTDScalarB:Array::shape( bool[16] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{16} _flat_11__SSA0_1 { , NN } ; 
  int[1]{16} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:ArrayBasics::sel( int[1] idx { ,NN } , int[2] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[0]{} _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[1]{2} _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::sel( int idx { ,NN } , int[2] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{2} UTDScalarB:Array::shape( int[2] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{2} _flat_6__SSA0_1 { , NN } ; 
  int[1]{2} _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::V2O(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB::V2O( int[2] shp { ,NN } , int[2] iv { ,NN } )
/*
 *  V2O ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool _flat_375 { , NN } ; 
  int{0} _flat_376 { , NN } ; 
  int i { , NN } ; 
  int _flat_371 { , NN } ; 
  int{0} _flat_372 { , NN } ; 
  int[1]{2} _flat_373 { , NN } ; 
  int{1} _flat_374 { , NN } ; 
  int{1} wt { , NN } ; 
  int{0} offset { , NN } ; 

  offset = 0; 
  wt = 1; 
  _flat_374 = 1; 
  _flat_373 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_372 = 0; 
  _flat_371 = wrapper:UTDScalarB:Array::sel( _flat_372, _flat_373) ; 
  i = ( _flat_371 wrapper:Array::-_flat_374) ; 
  _flat_376 = 0; 
  _flat_375 = ( i wrapper:Array::>=_flat_376) ; 
  offset__SSA0_1 = UTDScalarB::_dup_1154_V2O__Cond_3( offset, wt, i, _flat_375, iv, shp) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{0} UTDScalarB:ArrayArith::zero( int[2] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_0__SSA0_1 { , NN } ; 
  int{0} _flat_0 { , NN } ; 

  _flat_0 = 0; 
  _flat_0__SSA0_1 = _type_conv_( int, _flat_0); 
  return( _flat_0__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::toi(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[2] UTDScalarB:Array::toi( int[2] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int _eat_1302 { , NN } ; 
  int[2] res__SSA0_1 { , NN } ; 
  int[2] res { , NN } ; 
  int _flat_1370 { , NN } ; 
  int _flat_1371 { , NN } ; 
  int[1] iv { , NN } ; 
  int{0} _flat_1366 { , NN } ; 
  int{0} _flat_1367 { , NN } ; 
  int[1]{0} _flat_1368 { , NN } ; 
  int{0} _flat_1369 { , NN } ; 
  int[1]{2} shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1369 = 0; 
  _flat_1368 = _mul_SxV_( _flat_1369, shp); 
  _flat_1367 = wrapper:UTDScalarB:ArrayArith::zero( A) ; 
  _flat_1366 = _toi_S_( _flat_1367); 
  res = with {
        /* Partn */
        (_flat_1368 <= iv=[_eat_1302] < shp)
        { 
          _flat_1371 = _sel_VxA_( iv, A); 
          _flat_1370 = _toi_S_( _flat_1371); 
        } : _flat_1370 ; 
         } :
      genarray( shp, _flat_1366); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoIBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.] UTDScalarB::rhoIBB( int[2] x { ,NN } , bool[16] y { ,NN } )
/*
 *  rhoIBB ::  ---
 */
{ 
  int _eat_1304 { , NN } ; 
  int _eat_1303 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool[.,.] z { , NN } ; 
  bool[*] el { , NN } ; 
  int[.] _flat_153 { , NN } ; 
  int[1]{16} _flat_154 { , NN } ; 
  int _flat_151 { , NN } ; 
  int[1]{16} _flat_152 { , NN } ; 
  int offset { , NN } ; 
  int[2] _flat_150 { , NN } ; 
  int[2] iv { , NN } ; 
  int[2] _flat_144 { , NN } ; 
  bool{0} _flat_145 { , NN } ; 
  int[2] _flat_146 { , NN } ; 
  int{0} _flat_147 { , NN } ; 
  int[2] _flat_148 { , NN } ; 
  int[2] _flat_149 { , NN } ; 

  _flat_149 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_148 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_147 = 0; 
  _flat_146 = _mul_SxV_( _flat_147, _flat_148); 
  _flat_145 = false; 
  _flat_144 = wrapper:UTDScalarB:Array::toi( x) ; 
  z = with {
        /* Partn */
        (_flat_146 <= iv=[_eat_1304, _eat_1303] < _flat_149)
        { 
          _flat_150 = wrapper:UTDScalarB:Array::toi( x) ; 
          offset = wrapper:UTDScalarB::V2O( _flat_150, iv) ; 
          _flat_152 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_151 = wrapper:UTDScalarB:Array::prod( _flat_152) ; 
          offset__SSA0_1 = _aplmod_SxS_( offset, _flat_151); 
          _flat_154 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_153 = wrapper:UTDScalarB::O2V( _flat_154, offset__SSA0_1) ; 
          el = wrapper:UTDScalarB:Array::sel( _flat_153, y) ; 
        } : el ; 
         } :
      genarray( _flat_144, _flat_145); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[16] UTDScalarB:Array::++( bool[4] arr_a { ,NN } , bool[12] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1306 { , NN } ; 
  int _eat_1305 { , NN } ; 
  bool[16] res__SSA0_2 { , NN } ; 
  bool[16] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{16} _flat_723 { , NN } ; 
  int[1]{4} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{4} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{4} _flat_722 { , NN } ; 
  bool[16] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{4} _flat_714 { , NN } ; 
  int[1]{16} new_shp { , NN } ; 
  int[1]{4} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{16} _flat_702 { , NN } ; 
  int{4} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{4} _flat_706 { , NN } ; 
  int{12} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{12} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1305] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1306] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[12] UTDScalarB:Array::to_bool( bool[12] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[16] UTDScalarB::comaBBB( bool[4] x { ,NN } , bool[12] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[16] _flat_165__SSA0_1 { , NN } ; 
  bool[16] _flat_165 { , NN } ; 
  bool[4] _flat_166 { , NN } ; 
  bool[12] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[12] UTDScalarB:Array::++( bool[4] arr_a { ,NN } , bool[8] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1308 { , NN } ; 
  int _eat_1307 { , NN } ; 
  bool[12] res__SSA0_2 { , NN } ; 
  bool[12] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{12} _flat_723 { , NN } ; 
  int[1]{4} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{4} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{4} _flat_722 { , NN } ; 
  bool[12] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{4} _flat_714 { , NN } ; 
  int[1]{12} new_shp { , NN } ; 
  int[1]{4} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{12} _flat_702 { , NN } ; 
  int{4} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{4} _flat_706 { , NN } ; 
  int{8} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{8} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1307] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1308] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[8] UTDScalarB:Array::to_bool( bool[8] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[12] UTDScalarB::comaBBB( bool[4] x { ,NN } , bool[8] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[12] _flat_165__SSA0_1 { , NN } ; 
  bool[12] _flat_165 { , NN } ; 
  bool[4] _flat_166 { , NN } ; 
  bool[8] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[8] UTDScalarB:Array::++( bool[4] arr_a { ,NN } , bool[4] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1310 { , NN } ; 
  int _eat_1309 { , NN } ; 
  bool[8] res__SSA0_2 { , NN } ; 
  bool[8] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{8} _flat_723 { , NN } ; 
  int[1]{4} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{4} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{4} _flat_722 { , NN } ; 
  bool[8] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{4} _flat_714 { , NN } ; 
  int[1]{8} new_shp { , NN } ; 
  int[1]{4} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{8} _flat_702 { , NN } ; 
  int{4} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{4} _flat_706 { , NN } ; 
  int{4} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{4} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1309] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1310] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB:Array::to_bool( bool[4] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[8] UTDScalarB::comaBBB( bool[4] x { ,NN } , bool[4] y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[8] _flat_165__SSA0_1 { , NN } ; 
  bool[8] _flat_165 { , NN } ; 
  bool[4] _flat_166 { , NN } ; 
  bool[4] _flat_167 { , NN } ; 

  _flat_167 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_166 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_165 = ( _flat_166 wrapper:UTDScalarB:Array::++_flat_167) ; 
  _flat_165__SSA0_1 = _type_conv_( bool[.], _flat_165); 
  return( _flat_165__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB:Array::++( bool[3] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1312 { , NN } ; 
  int _eat_1311 { , NN } ; 
  bool[4] res__SSA0_2 { , NN } ; 
  bool[4] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{4} _flat_723 { , NN } ; 
  int[1]{3} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{3} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{3} _flat_722 { , NN } ; 
  bool[4] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{3} _flat_714 { , NN } ; 
  int[1]{4} new_shp { , NN } ; 
  int[1]{3} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{4} _flat_702 { , NN } ; 
  int{3} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{3} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1311] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1312] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[3] UTDScalarB:Array::to_bool( bool[3] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[4] UTDScalarB::comaBBB( bool[3] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[4] _flat_161__SSA0_1 { , NN } ; 
  bool[4] _flat_161 { , NN } ; 
  bool[3] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[3] UTDScalarB:Array::++( bool[2] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1314 { , NN } ; 
  int _eat_1313 { , NN } ; 
  bool[3] res__SSA0_2 { , NN } ; 
  bool[3] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{3} _flat_723 { , NN } ; 
  int[1]{2} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{2} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{2} _flat_722 { , NN } ; 
  bool[3] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{2} _flat_714 { , NN } ; 
  int[1]{3} new_shp { , NN } ; 
  int[1]{2} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{3} _flat_702 { , NN } ; 
  int{2} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{2} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1313] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1314] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[2] UTDScalarB:Array::to_bool( bool[2] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB::comaBBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[3] UTDScalarB::comaBBB( bool[2] x { ,NN } , bool y { ,NN } )
/*
 *  comaBBB ::  ---
 */
{ 
  bool[3] _flat_161__SSA0_1 { , NN } ; 
  bool[3] _flat_161 { , NN } ; 
  bool[2] _flat_162 { , NN } ; 
  bool[1] _flat_163 { , NN } ; 
  bool _flat_164 { , NN } ; 

  _flat_164 = wrapper:UTDScalarB:Array::to_bool( y) ; 
  _flat_163 = [ _flat_164 ]; 
  _flat_162 = wrapper:UTDScalarB:Array::to_bool( x) ; 
  _flat_161 = ( _flat_162 wrapper:UTDScalarB:Array::++_flat_163) ; 
  _flat_161__SSA0_1 = _type_conv_( bool[.], _flat_161); 
  return( _flat_161__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{2} UTDScalarB:Array::shape( bool[2] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{2} _flat_11__SSA0_1 { , NN } ; 
  int[1]{2} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoIBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::rhoIBB( int[3] x { ,NN } , bool[2] y { ,NN } )
/*
 *  rhoIBB ::  ---
 */
{ 
  int _eat_1317 { , NN } ; 
  int _eat_1316 { , NN } ; 
  int _eat_1315 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool[*] el { , NN } ; 
  int[.] _flat_153 { , NN } ; 
  int[1]{2} _flat_154 { , NN } ; 
  int _flat_151 { , NN } ; 
  int[1]{2} _flat_152 { , NN } ; 
  int offset { , NN } ; 
  int[3] _flat_150 { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_144 { , NN } ; 
  bool{0} _flat_145 { , NN } ; 
  int[3] _flat_146 { , NN } ; 
  int{0} _flat_147 { , NN } ; 
  int[3] _flat_148 { , NN } ; 
  int[3] _flat_149 { , NN } ; 

  _flat_149 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_148 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_147 = 0; 
  _flat_146 = _mul_SxV_( _flat_147, _flat_148); 
  _flat_145 = false; 
  _flat_144 = wrapper:UTDScalarB:Array::toi( x) ; 
  z = with {
        /* Partn */
        (_flat_146 <= iv=[_eat_1317, _eat_1316, _eat_1315] < _flat_149)
        { 
          _flat_150 = wrapper:UTDScalarB:Array::toi( x) ; 
          offset = wrapper:UTDScalarB::V2O( _flat_150, iv) ; 
          _flat_152 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_151 = wrapper:UTDScalarB:Array::prod( _flat_152) ; 
          offset__SSA0_1 = _aplmod_SxS_( offset, _flat_151); 
          _flat_154 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_153 = wrapper:UTDScalarB::O2V( _flat_154, offset__SSA0_1) ; 
          el = wrapper:UTDScalarB:Array::sel( _flat_153, y) ; 
        } : el ; 
         } :
      genarray( _flat_144, _flat_145); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{1} UTDScalarB:Array::shape( int[1] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{1} _flat_6__SSA0_1 { , NN } ; 
  int[1]{1} _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::O2V(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB::O2V( int[1] shp { ,NN } , int offset { ,NN } )
/*
 *  O2V ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  bool _flat_403 { , NN } ; 
  int{0} _flat_404 { , NN } ; 
  int _flat_399 { , NN } ; 
  int{0} _flat_400 { , NN } ; 
  int[1]{1} _flat_401 { , NN } ; 
  int{1} _flat_402 { , NN } ; 
  bool _flat_388 { , NN } ; 
  int{0} _flat_389 { , NN } ; 
  int i { , NN } ; 
  int _flat_384 { , NN } ; 
  int{0} _flat_385 { , NN } ; 
  int[1]{1} _flat_386 { , NN } ; 
  int{2} _flat_387 { , NN } ; 
  int[.] wts { , NN } ; 
  int[.] iv { , NN } ; 
  int[1]{1} _flat_382 { , NN } ; 
  int{1} _flat_383 { , NN } ; 

  _flat_383 = 1; 
  _flat_382 = wrapper:UTDScalarB:Array::shape( shp) ; 
  iv = wrapper:UTDScalarB:Array::genarray( _flat_382, _flat_383) ; 
  wts = iv; 
  _flat_387 = 2; 
  _flat_386 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_385 = 0; 
  _flat_384 = wrapper:UTDScalarB:Array::sel( _flat_385, _flat_386) ; 
  i = ( _flat_384 wrapper:Array::-_flat_387) ; 
  _flat_389 = 0; 
  _flat_388 = ( i wrapper:Array::>=_flat_389) ; 
  wts__SSA0_1 = UTDScalarB::_dup_1150_O2V__Cond_7( wts, i, _flat_388, shp) ; 
  _flat_402 = 1; 
  _flat_401 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_400 = 0; 
  _flat_399 = wrapper:UTDScalarB:Array::sel( _flat_400, _flat_401) ; 
  i__SSA0_1 = ( _flat_399 wrapper:Array::-_flat_402) ; 
  _flat_404 = 0; 
  _flat_403 = ( i__SSA0_1 wrapper:Array::>=_flat_404) ; 
  iv__SSA0_1 = UTDScalarB::_dup_1152_O2V__Cond_5( iv, wts__SSA0_1, i__SSA0_1, _flat_403, offset, shp) ; 
  iv__SSA0_2 = _type_conv_( int[.], iv__SSA0_1); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::prod(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::prod( int[1] arr_a { ,NN } )
/*
 *  prod ::  ---
 */
{ 
  int _eat_1318 { , NN } ; 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 
  int _flat_1721 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_1716 { , NN } ; 
  int[1]{0} _flat_1717 { , NN } ; 
  int{0} _flat_1718 { , NN } ; 
  int[1]{1} _flat_1719 { , NN } ; 
  int[1]{1} _flat_1720 { , NN } ; 

  _flat_1720 = _shape_A_( arr_a); 
  _flat_1719 = _shape_A_( arr_a); 
  _flat_1718 = 0; 
  _flat_1717 = _mul_SxV_( _flat_1718, _flat_1719); 
  _flat_1716 = 1; 
  res = with {
        /* Partn */
        (_flat_1717 <= iv=[_eat_1318] < _flat_1720)
        { 
          _flat_1721 = _sel_VxA_( iv, arr_a); 
        } : _flat_1721 ; 
         } :
      fold( UTDScalarB:ArrayArith::*(), _flat_1716); 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{3} UTDScalarB:Array::shape( bool[3] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{3} _flat_11__SSA0_1 { , NN } ; 
  int[1]{3} _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:ArrayBasics::sel( int[1] idx { ,NN } , int[3] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[0]{} _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[1]{3} _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::sel( int idx { ,NN } , int[3] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1]{3} UTDScalarB:Array::shape( int[3] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1]{3} _flat_6__SSA0_1 { , NN } ; 
  int[1]{3} _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::V2O(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB::V2O( int[3] shp { ,NN } , int[3] iv { ,NN } )
/*
 *  V2O ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool _flat_375 { , NN } ; 
  int{0} _flat_376 { , NN } ; 
  int i { , NN } ; 
  int _flat_371 { , NN } ; 
  int{0} _flat_372 { , NN } ; 
  int[1]{3} _flat_373 { , NN } ; 
  int{1} _flat_374 { , NN } ; 
  int{1} wt { , NN } ; 
  int{0} offset { , NN } ; 

  offset = 0; 
  wt = 1; 
  _flat_374 = 1; 
  _flat_373 = wrapper:UTDScalarB:Array::shape( shp) ; 
  _flat_372 = 0; 
  _flat_371 = wrapper:UTDScalarB:Array::sel( _flat_372, _flat_373) ; 
  i = ( _flat_371 wrapper:Array::-_flat_374) ; 
  _flat_376 = 0; 
  _flat_375 = ( i wrapper:Array::>=_flat_376) ; 
  offset__SSA0_1 = UTDScalarB::_dup_1148_V2O__Cond_3( offset, wt, i, _flat_375, iv, shp) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{0} UTDScalarB:ArrayArith::zero( int[3] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_0__SSA0_1 { , NN } ; 
  int{0} _flat_0 { , NN } ; 

  _flat_0 = 0; 
  _flat_0__SSA0_1 = _type_conv_( int, _flat_0); 
  return( _flat_0__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::toi(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[3] UTDScalarB:Array::toi( int[3] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int _eat_1319 { , NN } ; 
  int[3] res__SSA0_1 { , NN } ; 
  int[3] res { , NN } ; 
  int _flat_1370 { , NN } ; 
  int _flat_1371 { , NN } ; 
  int[1] iv { , NN } ; 
  int{0} _flat_1366 { , NN } ; 
  int{0} _flat_1367 { , NN } ; 
  int[1]{0} _flat_1368 { , NN } ; 
  int{0} _flat_1369 { , NN } ; 
  int[1]{3} shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1369 = 0; 
  _flat_1368 = _mul_SxV_( _flat_1369, shp); 
  _flat_1367 = wrapper:UTDScalarB:ArrayArith::zero( A) ; 
  _flat_1366 = _toi_S_( _flat_1367); 
  res = with {
        /* Partn */
        (_flat_1368 <= iv=[_eat_1319] < shp)
        { 
          _flat_1371 = _sel_VxA_( iv, A); 
          _flat_1370 = _toi_S_( _flat_1371); 
        } : _flat_1370 ; 
         } :
      genarray( shp, _flat_1366); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB::rhoIBB(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.,.,.] UTDScalarB::rhoIBB( int[3] x { ,NN } , bool[3] y { ,NN } )
/*
 *  rhoIBB ::  ---
 */
{ 
  int _eat_1322 { , NN } ; 
  int _eat_1321 { , NN } ; 
  int _eat_1320 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  bool[.,.,.] z { , NN } ; 
  bool[*] el { , NN } ; 
  int[.] _flat_153 { , NN } ; 
  int[1]{3} _flat_154 { , NN } ; 
  int _flat_151 { , NN } ; 
  int[1]{3} _flat_152 { , NN } ; 
  int offset { , NN } ; 
  int[3] _flat_150 { , NN } ; 
  int[3] iv { , NN } ; 
  int[3] _flat_144 { , NN } ; 
  bool{0} _flat_145 { , NN } ; 
  int[3] _flat_146 { , NN } ; 
  int{0} _flat_147 { , NN } ; 
  int[3] _flat_148 { , NN } ; 
  int[3] _flat_149 { , NN } ; 

  _flat_149 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_148 = wrapper:UTDScalarB:Array::toi( x) ; 
  _flat_147 = 0; 
  _flat_146 = _mul_SxV_( _flat_147, _flat_148); 
  _flat_145 = false; 
  _flat_144 = wrapper:UTDScalarB:Array::toi( x) ; 
  z = with {
        /* Partn */
        (_flat_146 <= iv=[_eat_1322, _eat_1321, _eat_1320] < _flat_149)
        { 
          _flat_150 = wrapper:UTDScalarB:Array::toi( x) ; 
          offset = wrapper:UTDScalarB::V2O( _flat_150, iv) ; 
          _flat_152 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_151 = wrapper:UTDScalarB:Array::prod( _flat_152) ; 
          offset__SSA0_1 = _aplmod_SxS_( offset, _flat_151); 
          _flat_154 = wrapper:UTDScalarB:Array::shape( y) ; 
          _flat_153 = wrapper:UTDScalarB::O2V( _flat_154, offset__SSA0_1) ; 
          el = wrapper:UTDScalarB:Array::sel( _flat_153, y) ; 
        } : el ; 
         } :
      genarray( _flat_144, _flat_145); 
  return( z); 
}



/****************************************************************************
 * UTDScalarB:Array::reshape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::reshape( int[1] shp { ,NN } , bool[+] A { ,NN } )
/*
 *  reshape ::  ---
 */
{ 
  bool[.] _flat_17 { , NN } ; 

  _flat_17 = _reshape_VxA_( shp, A); 
  return( _flat_17); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::sel( int[1] idx { ,NN } , bool[.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[1] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::*(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1] UTDScalarB:Array::*( int A { ,NN } , int[1] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_1323 { , NN } ; 
  int[1] res__SSA0_1 { , NN } ; 
  int[1] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1]{0} _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1]{1} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_1323] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1] UTDScalarB:Array::shape( bool[.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1] _flat_11__SSA0_1 { , NN } ; 
  int[1] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::genarray(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] UTDScalarB:Array::genarray( int[.] shp { ,NN } , bool val { ,NN } )
/*
 *  genarray ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  int[.] iv { , NN } ; 
  int[.] _flat_94 { , NN } ; 
  int{0} _flat_95 { , NN } ; 

  _flat_95 = 0; 
  _flat_94 = _mul_SxV_( _flat_95, shp); 
  res = with {
        /* Partn */
        (_flat_94 <= iv < shp)
        { 
        } : val ; 
         } :
      genarray( shp, val); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] UTDScalarB:ArrayArith::sel( int[.] idx { ,NN } , bool[+] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1] _flat_66 { , NN } ; 
  int[.] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:ArrayArith::shape( bool[+] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_11__SSA0_1 { , NN } ; 
  int[.] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[+] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  bool res__SSA0_1 { , NN } ; 
  bool[*] res { , NN } ; 
  bool[*] _flat_1797 { , NN } ; 
  int[.] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[.] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[.] _flat_1795 { , NN } ; 
  int[.] _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[+] UTDScalarB:Array::to_bool( bool[+] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:ArrayArith::sel( int[1] idx { ,NN } , bool[.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[0] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[1] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::one(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{1} UTDScalarB:ArrayArith::one( int[1] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::*(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1] UTDScalarB:ArrayArith::*( int A { ,NN } , int[1] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_1821 { , NN } ; 
  int[1] res__SSA0_1 { , NN } ; 
  int[1] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1]{0} _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1]{1} shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_1821] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1] UTDScalarB:ArrayArith::shape( bool[.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1] _flat_11__SSA0_1 { , NN } ; 
  int[1] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::all(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool UTDScalarB:Array::all( bool[.] a { ,NN } )
/*
 *  all ::  ---
 */
{ 
  int _eat_1324 { , NN } ; 
  bool res__SSA0_1 { , NN } ; 
  bool res { , NN } ; 
  bool _flat_1797 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_1792 { , NN } ; 
  int[1] _flat_1793 { , NN } ; 
  int{0} _flat_1794 { , NN } ; 
  int[1] _flat_1795 { , NN } ; 
  int[1] _flat_1796 { , NN } ; 

  _flat_1796 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1795 = wrapper:UTDScalarB:ArrayArith::shape( a) ; 
  _flat_1794 = 0; 
  _flat_1793 = ( _flat_1794 wrapper:UTDScalarB:ArrayArith::*_flat_1795) ; 
  _flat_1792 = true; 
  res = with {
        /* Partn */
        (_flat_1793 <= iv=[_eat_1324] < _flat_1796)
        { 
          _flat_1797 = wrapper:UTDScalarB:ArrayArith::sel( iv, a) ; 
        } : _flat_1797 ; 
         } :
      fold( ArrayArith::&(), _flat_1792); 
  res__SSA0_1 = _type_conv_( bool, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::==(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::==( int[.] A { ,NN } , int[.] B { ,NN } )
/*
 *  == ::  ---
 */
{ 
  int _eat_1325 { , NN } ; 
  bool[.] res__SSA0_1 { , NN } ; 
  bool[.] res { , NN } ; 
  bool _flat_625 { , NN } ; 
  int _flat_626 { , NN } ; 
  int _flat_627 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{1} _flat_620 { , NN } ; 
  int{1} _flat_621 { , NN } ; 
  int{1} _flat_622 { , NN } ; 
  int[1] _flat_623 { , NN } ; 
  int{0} _flat_624 { , NN } ; 
  int[1] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_624 = 0; 
  _flat_623 = _mul_SxV_( _flat_624, shp); 
  _flat_622 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_621 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_620 = _eq_SxS_( _flat_621, _flat_622); 
  res = with {
        /* Partn */
        (_flat_623 <= iv=[_eat_1325] < shp)
        { 
          _flat_627 = _sel_VxA_( iv, B); 
          _flat_626 = _sel_VxA_( iv, A); 
          _flat_625 = _eq_SxS_( _flat_626, _flat_627); 
        } : _flat_625 ; 
         } :
      genarray( shp, _flat_620); 
  res__SSA0_1 = _type_conv_( bool[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::++( bool[.] arr_a { ,NN } , bool[.] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1327 { , NN } ; 
  int _eat_1326 { , NN } ; 
  bool[.] res__SSA0_2 { , NN } ; 
  bool[.] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1] _flat_723 { , NN } ; 
  int[1] offset { , NN } ; 
  int[1] _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1] _flat_722 { , NN } ; 
  bool[.] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1] _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1] _flat_714 { , NN } ; 
  int[1] new_shp { , NN } ; 
  int[1] _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int _flat_702 { , NN } ; 
  int _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1] _flat_706 { , NN } ; 
  int _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1] _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1326] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1327] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::++( bool[.] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1329 { , NN } ; 
  int _eat_1328 { , NN } ; 
  bool[.] res__SSA0_2 { , NN } ; 
  bool[.] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1] _flat_723 { , NN } ; 
  int[1] offset { , NN } ; 
  int[1] _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1] _flat_722 { , NN } ; 
  bool[.] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1] _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1] _flat_714 { , NN } ; 
  int[1] new_shp { , NN } ; 
  int[1] _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int _flat_702 { , NN } ; 
  int _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1] _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1328] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1329] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:Array::to_bool(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::to_bool( bool[.] A { ,NN } )
/*
 *  to_bool ::  ---
 */
{ 
  return( A); 
}



/****************************************************************************
 * UTDScalarB:Array::++(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[2] UTDScalarB:Array::++( bool[1] arr_a { ,NN } , bool[1] arr_b { ,NN } )
/*
 *  ++ ::  ---
 */
{ 
  int _eat_1331 { , NN } ; 
  int _eat_1330 { , NN } ; 
  bool[2] res__SSA0_2 { , NN } ; 
  bool[2] res__SSA0_1 { , NN } ; 
  int[1] iv__SSA0_1 { , NN } ; 
  bool _flat_724 { , NN } ; 
  int[1] _flat_725 { , NN } ; 
  int[1]{2} _flat_723 { , NN } ; 
  int[1]{1} offset { , NN } ; 
  int[1]{0} _flat_716 { , NN } ; 
  int{0} _flat_717 { , NN } ; 
  int{0} _flat_718 { , NN } ; 
  int{1} _flat_719 { , NN } ; 
  int[1]{0} _flat_720 { , NN } ; 
  int{0} _flat_721 { , NN } ; 
  int[1]{1} _flat_722 { , NN } ; 
  bool[2] res { , NN } ; 
  bool _flat_715 { , NN } ; 
  int[1] iv { , NN } ; 
  bool{0} _flat_711 { , NN } ; 
  int[1]{0} _flat_712 { , NN } ; 
  int{0} _flat_713 { , NN } ; 
  int[1]{1} _flat_714 { , NN } ; 
  int[1]{2} new_shp { , NN } ; 
  int[1]{1} _flat_700 { , NN } ; 
  int{0} _flat_701 { , NN } ; 
  int{2} _flat_702 { , NN } ; 
  int{1} _flat_703 { , NN } ; 
  int[1]{0} _flat_704 { , NN } ; 
  int{0} _flat_705 { , NN } ; 
  int[1]{1} _flat_706 { , NN } ; 
  int{1} _flat_707 { , NN } ; 
  int[1]{0} _flat_708 { , NN } ; 
  int{0} _flat_709 { , NN } ; 
  int[1]{1} _flat_710 { , NN } ; 

  _flat_710 = _shape_A_( arr_b); 
  _flat_709 = 0; 
  _flat_708 = [ _flat_709 ]; 
  _flat_707 = _sel_VxA_( _flat_708, _flat_710); 
  _flat_706 = _shape_A_( arr_a); 
  _flat_705 = 0; 
  _flat_704 = [ _flat_705 ]; 
  _flat_703 = _sel_VxA_( _flat_704, _flat_706); 
  _flat_702 = _add_SxS_( _flat_703, _flat_707); 
  _flat_701 = 0; 
  _flat_700 = _shape_A_( arr_a); 
  new_shp = _idx_modarray_AxSxS_( _flat_700, _flat_701, _flat_702); 
  _flat_714 = _shape_A_( arr_a); 
  _flat_713 = 0; 
  _flat_712 = _mul_SxV_( _flat_713, new_shp); 
  _flat_711 = false; 
  res = with {
        /* Partn */
        (_flat_712 <= iv=[_eat_1330] < _flat_714)
        { 
          _flat_715 = _sel_VxA_( iv, arr_a); 
        } : _flat_715 ; 
         } :
      genarray( new_shp, _flat_711); 
  _flat_722 = _shape_A_( arr_a); 
  _flat_721 = 0; 
  _flat_720 = [ _flat_721 ]; 
  _flat_719 = _sel_VxA_( _flat_720, _flat_722); 
  _flat_718 = 0; 
  _flat_717 = 0; 
  _flat_716 = _mul_SxV_( _flat_717, new_shp); 
  offset = _idx_modarray_AxSxS_( _flat_716, _flat_718, _flat_719); 
  _flat_723 = _shape_A_( res); 
  res__SSA0_1 = with {
        /* Partn */
        (offset <= iv__SSA0_1=[_eat_1331] < _flat_723)
        { 
          _flat_725 = _sub_VxV_( iv__SSA0_1, offset); 
          _flat_724 = _sel_VxA_( _flat_725, arr_b); 
        } : _flat_724 ; 
         } :
      modarray( res); 
  res__SSA0_2 = _type_conv_( bool[+], res__SSA0_1); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::modarray(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:ArrayBasics::modarray( int[.] array { ,NN } , int[1] v { ,NN } , int val { ,NN } )
/*
 *  modarray ::  ---
 */
{ 
  int[.] _flat_96 { , NN } ; 

  _flat_96 = _modarray_AxVxS_( array, v, val); 
  return( _flat_96); 
}



/****************************************************************************
 * UTDScalarB:Array::modarray(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:Array::modarray( int[.] array { ,NN } , int v { ,NN } , int val { ,NN } )
/*
 *  modarray ::  ---
 */
{ 
  int[.] _flat_97 { , NN } ; 
  int[1] _flat_98 { , NN } ; 

  _flat_98 = [ v ]; 
  _flat_97 = wrapper:UTDScalarB:ArrayBasics::modarray( array, _flat_98, val) ; 
  return( _flat_97); 
}



/****************************************************************************
 * UTDScalarB:Array::genarray(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:Array::genarray( int[1] shp { ,NN } , int val { ,NN } )
/*
 *  genarray ::  ---
 */
{ 
  int _eat_1332 { , NN } ; 
  int[.] res { , NN } ; 
  int[1] iv { , NN } ; 
  int[1] _flat_84 { , NN } ; 
  int{0} _flat_85 { , NN } ; 

  _flat_85 = 0; 
  _flat_84 = _mul_SxV_( _flat_85, shp); 
  res = with {
        /* Partn */
        (_flat_84 <= iv=[_eat_1332] < shp)
        { 
        } : val ; 
         } :
      genarray( shp, val); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::prod(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::prod( int[.] arr_a { ,NN } )
/*
 *  prod ::  ---
 */
{ 
  int _eat_1333 { , NN } ; 
  int res__SSA0_1 { , NN } ; 
  int res { , NN } ; 
  int _flat_1721 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_1716 { , NN } ; 
  int[1] _flat_1717 { , NN } ; 
  int{0} _flat_1718 { , NN } ; 
  int[1] _flat_1719 { , NN } ; 
  int[1] _flat_1720 { , NN } ; 

  _flat_1720 = _shape_A_( arr_a); 
  _flat_1719 = _shape_A_( arr_a); 
  _flat_1718 = 0; 
  _flat_1717 = _mul_SxV_( _flat_1718, _flat_1719); 
  _flat_1716 = 1; 
  res = with {
        /* Partn */
        (_flat_1717 <= iv=[_eat_1333] < _flat_1720)
        { 
          _flat_1721 = _sel_VxA_( iv, arr_a); 
        } : _flat_1721 ; 
         } :
      fold( UTDScalarB:ArrayArith::*(), _flat_1716); 
  res__SSA0_1 = _type_conv_( int, res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:ArrayBasics::sel( int[1] idx { ,NN } , int[.] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[0] _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[0] new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[1] _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::sel( int idx { ,NN } , int[.] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * UTDScalarB:ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:ArrayBasics::sel( int[1] idx { ,NN } , int[1] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[1] new_idx { , NN } ; 
  int[0] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[0]{} _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[0]{} new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[1]{1} _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int UTDScalarB:Array::sel( int idx { ,NN } , int[1] A { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int _flat_72 { , NN } ; 
  int[1] _flat_73 { , NN } ; 

  _flat_73 = [ idx ]; 
  _flat_72 = wrapper:UTDScalarB:ArrayBasics::sel( _flat_73, A) ; 
  return( _flat_72); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[1] UTDScalarB:Array::shape( int[.] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[1] _flat_6__SSA0_1 { , NN } ; 
  int[1] _flat_6 { , NN } ; 

  _flat_6 = _shape_A_( array); 
  _flat_6__SSA0_1 = _type_conv_( int[.], _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:ArrayArith::zero(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int{0} UTDScalarB:ArrayArith::zero( int[.] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_0__SSA0_1 { , NN } ; 
  int{0} _flat_0 { , NN } ; 

  _flat_0 = 0; 
  _flat_0__SSA0_1 = _type_conv_( int, _flat_0); 
  return( _flat_0__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::toi(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:Array::toi( int[.] A { ,NN } )
/*
 *  toi ::  ---
 */
{ 
  int _eat_1334 { , NN } ; 
  int[.] res__SSA0_1 { , NN } ; 
  int[.] res { , NN } ; 
  int _flat_1370 { , NN } ; 
  int _flat_1371 { , NN } ; 
  int[1] iv { , NN } ; 
  int{0} _flat_1366 { , NN } ; 
  int{0} _flat_1367 { , NN } ; 
  int[1] _flat_1368 { , NN } ; 
  int{0} _flat_1369 { , NN } ; 
  int[1] shp { , NN } ; 

  shp = _shape_A_( A); 
  _flat_1369 = 0; 
  _flat_1368 = _mul_SxV_( _flat_1369, shp); 
  _flat_1367 = wrapper:UTDScalarB:ArrayArith::zero( A) ; 
  _flat_1366 = _toi_S_( _flat_1367); 
  res = with {
        /* Partn */
        (_flat_1368 <= iv=[_eat_1334] < shp)
        { 
          _flat_1371 = _sel_VxA_( iv, A); 
          _flat_1370 = _toi_S_( _flat_1371); 
        } : _flat_1370 ; 
         } :
      genarray( shp, _flat_1366); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * UTDScalarB:Array::genarray(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[.] UTDScalarB:Array::genarray( int[1] shp { ,NN } , bool val { ,NN } )
/*
 *  genarray ::  ---
 */
{ 
  int _eat_1335 { , NN } ; 
  bool[.] res { , NN } ; 
  int[1] iv { , NN } ; 
  int[1] _flat_94 { , NN } ; 
  int{0} _flat_95 { , NN } ; 

  _flat_95 = 0; 
  _flat_94 = _mul_SxV_( _flat_95, shp); 
  res = with {
        /* Partn */
        (_flat_94 <= iv=[_eat_1335] < shp)
        { 
        } : val ; 
         } :
      genarray( shp, val); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::sel(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
bool[*] UTDScalarB:Array::sel( int[.] idx { ,NN } , bool[+] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1] _flat_66 { , NN } ; 
  int[.] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * UTDScalarB:Array::shape(...) [ body ]
 ****************************************************************************/
/* sticky */
inline
int[.] UTDScalarB:Array::shape( bool[+] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_11__SSA0_1 { , NN } ; 
  int[.] _flat_11 { , NN } ; 

  _flat_11 = _shape_A_( array); 
  _flat_11__SSA0_1 = _type_conv_( int[.], _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_1162_sameBBB__Cond_0(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::_dup_1162_sameBBB__Cond_0( bool _hce_1 { ,NN } , bool[.,.,.] y { ,NN } , bool[.,.,.] x { ,NN } )
/*
 *  _dup_1162_sameBBB__Cond_0 ::  ---
 */
{ 
  bool _hce_0__SSA0_2 { , NN } ; 
  bool{0} _hce_0__SSA0_1 { , NN } ; 
  bool[.,.,.] _flat_178 { , NN } ; 
  bool[.,.,.] _flat_177 { , NN } ; 
  bool[.,.,.] _flat_176 { , NN } ; 
  bool _hce_0 { , NN } ; 

  if (_hce_1) 
  { 
    _flat_178 = wrapper:UTDScalarB:Array::to_bool( y) ; 
    _flat_177 = wrapper:UTDScalarB:Array::to_bool( x) ; 
    _flat_176 = wrapper:UTDScalarB::eqBBB( _flat_177, _flat_178) ; 
    _hce_0 = wrapper:UTDScalarB:Array::all( _flat_176) ; 
  }
  else
  { 
    _hce_0__SSA0_1 = false; 
  }
  _hce_0__SSA0_2 = ( _hce_1 ? _hce_0 : _hce_0__SSA0_1 ); 
  return( _hce_0__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_1161_sameBBB__Cond_1(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::_dup_1161_sameBBB__Cond_1( bool _flat_170 { ,NN } , bool[.,.,.] y { ,NN } , bool[.,.,.] x { ,NN } )
/*
 *  _dup_1161_sameBBB__Cond_1 ::  ---
 */
{ 
  bool _hce_1__SSA0_2 { , NN } ; 
  bool{0} _hce_1__SSA0_1 { , NN } ; 
  int[3] _flat_175 { , NN } ; 
  int[3] _flat_174 { , NN } ; 
  bool[3] _flat_173 { , NN } ; 
  bool _hce_1 { , NN } ; 

  if (_flat_170) 
  { 
    _flat_175 = _shape_A_( y); 
    _flat_174 = _shape_A_( x); 
    _flat_173 = ( _flat_174 wrapper:UTDScalarB:Array::==_flat_175) ; 
    _hce_1 = wrapper:UTDScalarB:Array::all( _flat_173) ; 
  }
  else
  { 
    _hce_1__SSA0_1 = false; 
  }
  _hce_1__SSA0_2 = ( _flat_170 ? _hce_1 : _hce_1__SSA0_1 ); 
  return( _hce_1__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_1160_O2V__Cond_5(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_1160_O2V__Cond_5( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , bool _flat_403 { ,NN } , int offset { ,NN } , int[0] shp { ,NN } )
/*
 *  _dup_1160_O2V__Cond_5 ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 

  if (_flat_403) 
  { 
    iv__SSA0_1 = UTDScalarB::_dup_1159_O2V__Loop_4( iv, wts, i, offset, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_2 = ( _flat_403 ? iv__SSA0_1 : iv ); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_1159_O2V__Loop_4(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_1159_O2V__Loop_4( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , int offset { ,NN } , int[0] shp { ,NN } )
/*
 *  _dup_1159_O2V__Loop_4 ::  ---
 */
{ 
  int[.] iv__SSA0_3 { , NN } ; 
  int[.] iv__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int offset__SSA0_2 { , NN } ;  /* declared: int */
  int offset__SSA0_1 { , NN } ;  /* declared: int */
  int[.] iv__SSA0_1 { , NN } ; 
  int _flat_408 { , NN } ; 
  int _flat_407 { , NN } ; 
  int _flat_406 { , NN } ; 
  int _flat_405 { , NN } ; 
  int _flat_411 { , NN } ; 
  int _flat_410 { , NN } ; 
  int _flat_409 { , NN } ; 
  int{0} _flat_413 { , NN } ; 
  bool _flat_412 { , NN } ; 

  _flat_408 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  _flat_407 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_406 = ( offset wrapper:Array::/_flat_407) ; 
  _flat_405 = _aplmod_SxS_( _flat_406, _flat_408); 
  iv__SSA0_1 = wrapper:UTDScalarB:Array::modarray( iv, i, _flat_405) ; 
  _flat_411 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_410 = wrapper:UTDScalarB:Array::sel( i, iv__SSA0_1) ; 
  _flat_409 = ( _flat_410 wrapper:UTDScalarB:Array::*_flat_411) ; 
  offset__SSA0_1 = ( offset wrapper:Array::-_flat_409) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_413 = 0; 
  _flat_412 = ( i__SSA0_1 wrapper:Array::>=_flat_413) ; 
  if (_flat_412) 
  { 
    iv__SSA0_2 = UTDScalarB::_dup_1159_O2V__Loop_4( iv__SSA0_1, wts, i__SSA0_1, offset__SSA0_2, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_3 = ( _flat_412 ? iv__SSA0_2 : iv__SSA0_1 ); 
  return( iv__SSA0_3); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_1158_O2V__Cond_7(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_1158_O2V__Cond_7( int[.] wts { ,NN } , int i { ,NN } , bool _flat_388 { ,NN } , int[0] shp { ,NN } )
/*
 *  _dup_1158_O2V__Cond_7 ::  ---
 */
{ 
  int[.] wts__SSA0_2 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 

  if (_flat_388) 
  { 
    wts__SSA0_1 = UTDScalarB::_dup_1157_O2V__Loop_6( wts, i, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_2 = ( _flat_388 ? wts__SSA0_1 : wts ); 
  return( wts__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_1157_O2V__Loop_6(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_1157_O2V__Loop_6( int[.] wts { ,NN } , int i { ,NN } , int[0] shp { ,NN } )
/*
 *  _dup_1157_O2V__Loop_6 ::  ---
 */
{ 
  int[.] wts__SSA0_3 { , NN } ; 
  int[.] wts__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  int{1} _flat_396 { , NN } ; 
  int _flat_395 { , NN } ; 
  int _flat_394 { , NN } ; 
  int{1} _flat_393 { , NN } ; 
  int _flat_392 { , NN } ; 
  int _flat_391 { , NN } ; 
  int _flat_390 { , NN } ; 
  int{0} _flat_398 { , NN } ; 
  bool _flat_397 { , NN } ; 

  _flat_396 = 1; 
  _flat_395 = ( i wrapper:Array::+_flat_396) ; 
  _flat_394 = wrapper:UTDScalarB:Array::sel( _flat_395, shp) ; 
  _flat_393 = 1; 
  _flat_392 = ( i wrapper:Array::+_flat_393) ; 
  _flat_391 = wrapper:UTDScalarB:Array::sel( _flat_392, wts) ; 
  _flat_390 = ( _flat_391 wrapper:UTDScalarB:Array::*_flat_394) ; 
  wts__SSA0_1 = wrapper:UTDScalarB:Array::modarray( wts, i, _flat_390) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_398 = 0; 
  _flat_397 = ( i__SSA0_1 wrapper:Array::>=_flat_398) ; 
  if (_flat_397) 
  { 
    wts__SSA0_2 = UTDScalarB::_dup_1157_O2V__Loop_6( wts__SSA0_1, i__SSA0_1, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_3 = ( _flat_397 ? wts__SSA0_2 : wts__SSA0_1 ); 
  return( wts__SSA0_3); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_1156_sameBBB__Cond_0(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::_dup_1156_sameBBB__Cond_0( bool _hce_1 { ,NN } , bool[.,.] y { ,NN } , bool[4,4] x { ,NN } )
/*
 *  _dup_1156_sameBBB__Cond_0 ::  ---
 */
{ 
  bool _hce_0__SSA0_2 { , NN } ; 
  bool{0} _hce_0__SSA0_1 { , NN } ; 
  bool[.,.] _flat_178 { , NN } ; 
  bool[4,4] _flat_177 { , NN } ; 
  bool[.,.] _flat_176 { , NN } ; 
  bool _hce_0 { , NN } ; 

  if (_hce_1) 
  { 
    _flat_178 = wrapper:UTDScalarB:Array::to_bool( y) ; 
    _flat_177 = wrapper:UTDScalarB:Array::to_bool( x) ; 
    _flat_176 = wrapper:UTDScalarB::eqBBB( _flat_177, _flat_178) ; 
    _hce_0 = wrapper:UTDScalarB:Array::all( _flat_176) ; 
  }
  else
  { 
    _hce_0__SSA0_1 = false; 
  }
  _hce_0__SSA0_2 = ( _hce_1 ? _hce_0 : _hce_0__SSA0_1 ); 
  return( _hce_0__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_1155_sameBBB__Cond_1(...) [ body ]
 ****************************************************************************/
bool UTDScalarB::_dup_1155_sameBBB__Cond_1( bool _flat_170 { ,NN } , bool[.,.] y { ,NN } , bool[4,4] x { ,NN } )
/*
 *  _dup_1155_sameBBB__Cond_1 ::  ---
 */
{ 
  bool _hce_1__SSA0_2 { , NN } ; 
  bool{0} _hce_1__SSA0_1 { , NN } ; 
  int[2] _flat_175 { , NN } ; 
  int[2]{4,4} _flat_174 { , NN } ; 
  bool[2] _flat_173 { , NN } ; 
  bool _hce_1 { , NN } ; 

  if (_flat_170) 
  { 
    _flat_175 = _shape_A_( y); 
    _flat_174 = _shape_A_( x); 
    _flat_173 = ( _flat_174 wrapper:UTDScalarB:Array::==_flat_175) ; 
    _hce_1 = wrapper:UTDScalarB:Array::all( _flat_173) ; 
  }
  else
  { 
    _hce_1__SSA0_1 = false; 
  }
  _hce_1__SSA0_2 = ( _flat_170 ? _hce_1 : _hce_1__SSA0_1 ); 
  return( _hce_1__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_1154_V2O__Cond_3(...) [ body ]
 ****************************************************************************/
int UTDScalarB::_dup_1154_V2O__Cond_3( int{0} offset { ,NN } , int{1} wt { ,NN } , int i { ,NN } , bool _flat_375 { ,NN } , int[2] iv { ,NN } , int[2] shp { ,NN } )
/*
 *  _dup_1154_V2O__Cond_3 ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 

  if (_flat_375) 
  { 
    offset__SSA0_1 = UTDScalarB::_dup_1153_V2O__Loop_2( offset, wt, i, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_2 = ( _flat_375 ? offset__SSA0_1 : offset ); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_1153_V2O__Loop_2(...) [ body ]
 ****************************************************************************/
int UTDScalarB::_dup_1153_V2O__Loop_2( int offset { ,NN } , int wt { ,NN } , int i { ,NN } , int[2] iv { ,NN } , int[2] shp { ,NN } )
/*
 *  _dup_1153_V2O__Loop_2 ::  ---
 */
{ 
  int offset__SSA0_3 { , NN } ; 
  int offset__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int wt__SSA0_1 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  int _flat_378 { , NN } ; 
  int _flat_377 { , NN } ; 
  int _flat_379 { , NN } ; 
  int{0} _flat_381 { , NN } ; 
  bool _flat_380 { , NN } ; 

  _flat_378 = wrapper:UTDScalarB:Array::sel( i, iv) ; 
  _flat_377 = ( wt wrapper:UTDScalarB:Array::*_flat_378) ; 
  offset__SSA0_1 = ( offset wrapper:Array::+_flat_377) ; 
  _flat_379 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  wt__SSA0_1 = ( wt wrapper:UTDScalarB:Array::*_flat_379) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_381 = 0; 
  _flat_380 = ( i__SSA0_1 wrapper:Array::>=_flat_381) ; 
  if (_flat_380) 
  { 
    offset__SSA0_2 = UTDScalarB::_dup_1153_V2O__Loop_2( offset__SSA0_1, wt__SSA0_1, i__SSA0_1, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_3 = ( _flat_380 ? offset__SSA0_2 : offset__SSA0_1 ); 
  return( offset__SSA0_3); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_1152_O2V__Cond_5(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_1152_O2V__Cond_5( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , bool _flat_403 { ,NN } , int offset { ,NN } , int[1] shp { ,NN } )
/*
 *  _dup_1152_O2V__Cond_5 ::  ---
 */
{ 
  int[.] iv__SSA0_2 { , NN } ; 
  int[.] iv__SSA0_1 { , NN } ; 

  if (_flat_403) 
  { 
    iv__SSA0_1 = UTDScalarB::_dup_1151_O2V__Loop_4( iv, wts, i, offset, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_2 = ( _flat_403 ? iv__SSA0_1 : iv ); 
  return( iv__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_1151_O2V__Loop_4(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_1151_O2V__Loop_4( int[.] iv { ,NN } , int[.] wts { ,NN } , int i { ,NN } , int offset { ,NN } , int[1] shp { ,NN } )
/*
 *  _dup_1151_O2V__Loop_4 ::  ---
 */
{ 
  int[.] iv__SSA0_3 { , NN } ; 
  int[.] iv__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int offset__SSA0_2 { , NN } ;  /* declared: int */
  int offset__SSA0_1 { , NN } ;  /* declared: int */
  int[.] iv__SSA0_1 { , NN } ; 
  int _flat_408 { , NN } ; 
  int _flat_407 { , NN } ; 
  int _flat_406 { , NN } ; 
  int _flat_405 { , NN } ; 
  int _flat_411 { , NN } ; 
  int _flat_410 { , NN } ; 
  int _flat_409 { , NN } ; 
  int{0} _flat_413 { , NN } ; 
  bool _flat_412 { , NN } ; 

  _flat_408 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  _flat_407 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_406 = ( offset wrapper:Array::/_flat_407) ; 
  _flat_405 = _aplmod_SxS_( _flat_406, _flat_408); 
  iv__SSA0_1 = wrapper:UTDScalarB:Array::modarray( iv, i, _flat_405) ; 
  _flat_411 = wrapper:UTDScalarB:Array::sel( i, wts) ; 
  _flat_410 = wrapper:UTDScalarB:Array::sel( i, iv__SSA0_1) ; 
  _flat_409 = ( _flat_410 wrapper:UTDScalarB:Array::*_flat_411) ; 
  offset__SSA0_1 = ( offset wrapper:Array::-_flat_409) ; 
  offset__SSA0_2 = _type_conv_( int, offset__SSA0_1); 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_413 = 0; 
  _flat_412 = ( i__SSA0_1 wrapper:Array::>=_flat_413) ; 
  if (_flat_412) 
  { 
    iv__SSA0_2 = UTDScalarB::_dup_1151_O2V__Loop_4( iv__SSA0_1, wts, i__SSA0_1, offset__SSA0_2, shp) ; 
  }
  else
  { 
  }
  iv__SSA0_3 = ( _flat_412 ? iv__SSA0_2 : iv__SSA0_1 ); 
  return( iv__SSA0_3); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_1150_O2V__Cond_7(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_1150_O2V__Cond_7( int[.] wts { ,NN } , int i { ,NN } , bool _flat_388 { ,NN } , int[1] shp { ,NN } )
/*
 *  _dup_1150_O2V__Cond_7 ::  ---
 */
{ 
  int[.] wts__SSA0_2 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 

  if (_flat_388) 
  { 
    wts__SSA0_1 = UTDScalarB::_dup_1149_O2V__Loop_6( wts, i, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_2 = ( _flat_388 ? wts__SSA0_1 : wts ); 
  return( wts__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_1149_O2V__Loop_6(...) [ body ]
 ****************************************************************************/
int[.] UTDScalarB::_dup_1149_O2V__Loop_6( int[.] wts { ,NN } , int i { ,NN } , int[1] shp { ,NN } )
/*
 *  _dup_1149_O2V__Loop_6 ::  ---
 */
{ 
  int[.] wts__SSA0_3 { , NN } ; 
  int[.] wts__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int[.] wts__SSA0_1 { , NN } ; 
  int{1} _flat_396 { , NN } ; 
  int _flat_395 { , NN } ; 
  int _flat_394 { , NN } ; 
  int{1} _flat_393 { , NN } ; 
  int _flat_392 { , NN } ; 
  int _flat_391 { , NN } ; 
  int _flat_390 { , NN } ; 
  int{0} _flat_398 { , NN } ; 
  bool _flat_397 { , NN } ; 

  _flat_396 = 1; 
  _flat_395 = ( i wrapper:Array::+_flat_396) ; 
  _flat_394 = wrapper:UTDScalarB:Array::sel( _flat_395, shp) ; 
  _flat_393 = 1; 
  _flat_392 = ( i wrapper:Array::+_flat_393) ; 
  _flat_391 = wrapper:UTDScalarB:Array::sel( _flat_392, wts) ; 
  _flat_390 = ( _flat_391 wrapper:UTDScalarB:Array::*_flat_394) ; 
  wts__SSA0_1 = wrapper:UTDScalarB:Array::modarray( wts, i, _flat_390) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_398 = 0; 
  _flat_397 = ( i__SSA0_1 wrapper:Array::>=_flat_398) ; 
  if (_flat_397) 
  { 
    wts__SSA0_2 = UTDScalarB::_dup_1149_O2V__Loop_6( wts__SSA0_1, i__SSA0_1, shp) ; 
  }
  else
  { 
  }
  wts__SSA0_3 = ( _flat_397 ? wts__SSA0_2 : wts__SSA0_1 ); 
  return( wts__SSA0_3); 
}



/****************************************************************************
 * Cond function:
 * UTDScalarB::_dup_1148_V2O__Cond_3(...) [ body ]
 ****************************************************************************/
int UTDScalarB::_dup_1148_V2O__Cond_3( int{0} offset { ,NN } , int{1} wt { ,NN } , int i { ,NN } , bool _flat_375 { ,NN } , int[3] iv { ,NN } , int[3] shp { ,NN } )
/*
 *  _dup_1148_V2O__Cond_3 ::  ---
 */
{ 
  int offset__SSA0_2 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 

  if (_flat_375) 
  { 
    offset__SSA0_1 = UTDScalarB::_dup_1147_V2O__Loop_2( offset, wt, i, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_2 = ( _flat_375 ? offset__SSA0_1 : offset ); 
  return( offset__SSA0_2); 
}



/****************************************************************************
 * Loop function with Loop Count -1:
 * UTDScalarB::_dup_1147_V2O__Loop_2(...) [ body ]
 ****************************************************************************/
int UTDScalarB::_dup_1147_V2O__Loop_2( int offset { ,NN } , int wt { ,NN } , int i { ,NN } , int[3] iv { ,NN } , int[3] shp { ,NN } )
/*
 *  _dup_1147_V2O__Loop_2 ::  ---
 */
{ 
  int offset__SSA0_3 { , NN } ; 
  int offset__SSA0_2 { , NN } ; 
  int i__SSA0_1 { , NN } ; 
  int wt__SSA0_1 { , NN } ; 
  int offset__SSA0_1 { , NN } ; 
  int _flat_378 { , NN } ; 
  int _flat_377 { , NN } ; 
  int _flat_379 { , NN } ; 
  int{0} _flat_381 { , NN } ; 
  bool _flat_380 { , NN } ; 

  _flat_378 = wrapper:UTDScalarB:Array::sel( i, iv) ; 
  _flat_377 = ( wt wrapper:UTDScalarB:Array::*_flat_378) ; 
  offset__SSA0_1 = ( offset wrapper:Array::+_flat_377) ; 
  _flat_379 = wrapper:UTDScalarB:Array::sel( i, shp) ; 
  wt__SSA0_1 = ( wt wrapper:UTDScalarB:Array::*_flat_379) ; 
  i__SSA0_1 = ( wrapper:Array::--i) ; 
  _flat_381 = 0; 
  _flat_380 = ( i__SSA0_1 wrapper:Array::>=_flat_381) ; 
  if (_flat_380) 
  { 
    offset__SSA0_2 = UTDScalarB::_dup_1147_V2O__Loop_2( offset__SSA0_1, wt__SSA0_1, i__SSA0_1, iv, shp) ; 
  }
  else
  { 
  }
  offset__SSA0_3 = ( _flat_380 ? offset__SSA0_2 : offset__SSA0_1 ); 
  return( offset__SSA0_3); 
}



/****************************************************************************
 * ArrayArith::zero(...) [ body ]
 ****************************************************************************/
inline
int{0} ArrayArith::zero( int[+] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_0__SSA0_1 { , NN } ; 
  int{0} _flat_0 { , NN } ; 

  _flat_0 = 0; 
  _flat_0__SSA0_1 = _type_conv_( int, _flat_0); 
  return( _flat_0__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::zero(...) [ body ]
 ****************************************************************************/
inline
int{0} ScalarArith::zero( int[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  int{0} _flat_0__SSA0_1 { , NN } ; 
  int{0} _flat_0 { , NN } ; 

  _flat_0 = 0; 
  _flat_0__SSA0_1 = _type_conv_( int, _flat_0); 
  return( _flat_0__SSA0_1); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayArith::zero(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int{0} UTDScalarB:ArrayArith::zero( int[*] A { ,NN } )
/*
 *  zero :: { int[*] -> ( int{0}),
              int[+] -> ( int{0}),
              int[.] -> ( int{0}),
              int[3] -> ( int{0}),
              int[2] -> ( int{0})}
 *  dispatching to: ScalarArith::zero,
 *                  ArrayArith::zero,
 *                  UTDScalarB:ArrayArith::zero,
 *                  UTDScalarB:ArrayArith::zero,
 *                  UTDScalarB:ArrayArith::zero
 */
{ 
  int{0} _cwc_5839 { , NN } ; 
  bool _cwc_5863 { , NN } ; 
  int _cwc_5862 { , NN } ; 
  int{0} _cwc_5861 { , NN } ; 
  int _cwc_5860 { , NN } ; 
  bool _cwc_5859 { , NN } ; 
  int _cwc_5858 { , NN } ; 
  bool _cwc_5857 { , NN } ; 
  bool _cwc_5856 { , NN } ; 
  int{3} _cwc_5855 { , NN } ; 
  int _cwc_5854 { , NN } ; 
  int[1]{0} _cwc_5853 { , NN } ; 
  bool _cwc_5852 { , NN } ; 
  int{0} _cwc_5851 { , NN } ; 
  bool _cwc_5850 { , NN } ; 
  bool _cwc_5849 { , NN } ; 
  int{2} _cwc_5848 { , NN } ; 
  int _cwc_5847 { , NN } ; 
  int[1]{0} _cwc_5846 { , NN } ; 
  bool _cwc_5845 { , NN } ; 
  int{0} _cwc_5844 { , NN } ; 
  int[+] _cwc_5843 { , NN } ; 
  int{0} _cwc_5842 { , NN } ; 
  int _cwc_5841 { , NN } ; 
  int{0} _cwc_5840 { , NN } ; 

  _cwc_5860 = _dim_A_( A); 
  _cwc_5862 = 0; 
  _cwc_5863 = _gt_SxS_( _cwc_5860, _cwc_5862); 
  if (_cwc_5863) 
  { 
    _cwc_5841 = _dim_A_( A); 
    _cwc_5858 = 1; 
    _cwc_5859 = _eq_SxS_( _cwc_5841, _cwc_5858); 
    if (_cwc_5859) 
    { 
      _cwc_5843 = _shape_A_( A); 
      _cwc_5852 = true; 
      _cwc_5855 = 3; 
      _cwc_5853 = [ 0 ]; 
      _cwc_5854 = _sel_VxA_( _cwc_5853, _cwc_5843); 
      _cwc_5856 = _eq_SxS_( _cwc_5854, _cwc_5855); 
      _cwc_5857 = _and_SxS_( _cwc_5856, _cwc_5852); 
      if (_cwc_5857) 
      { 
        _cwc_5851 = UTDScalarB:ArrayArith::zero( A) ; 
        _cwc_5839 = _cwc_5851; 
      }
      else
      { 
        _cwc_5845 = true; 
        _cwc_5848 = 2; 
        _cwc_5846 = [ 0 ]; 
        _cwc_5847 = _sel_VxA_( _cwc_5846, _cwc_5843); 
        _cwc_5849 = _eq_SxS_( _cwc_5847, _cwc_5848); 
        _cwc_5850 = _and_SxS_( _cwc_5849, _cwc_5845); 
        if (_cwc_5850) 
        { 
          _cwc_5844 = UTDScalarB:ArrayArith::zero( A) ; 
          _cwc_5839 = _cwc_5844; 
        }
        else
        { 
          _cwc_5842 = UTDScalarB:ArrayArith::zero( A) ; 
          _cwc_5839 = _cwc_5842; 
        }
      }
    }
    else
    { 
      _cwc_5840 = ArrayArith::zero( A) ; 
      _cwc_5839 = _cwc_5840; 
    }
  }
  else
  { 
    _cwc_5861 = ScalarArith::zero( A) ; 
    _cwc_5839 = _cwc_5861; 
  }
  return( _cwc_5839); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
int[*] ArrayBasics::sel( int[1] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  int[*] res { , NN } ; 
  int _flat_26 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  int{0} _flat_23 { , NN } ; 
  int[.] _flat_24 { , NN } ; 
  int{0} _flat_25 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_18 { , NN } ; 
  int[1]{0} _flat_19 { , NN } ; 
  int{0} _flat_20 { , NN } ; 
  int[1]{1} _flat_21 { , NN } ; 
  int[.] _flat_22 { , NN } ; 

  _flat_22 = _shape_A_( array); 
  _flat_21 = _shape_A_( idx); 
  _flat_20 = 0; 
  _flat_19 = [ _flat_20 ]; 
  _flat_18 = _sel_VxA_( _flat_19, _flat_21); 
  new_shape = _drop_SxV_( _flat_18, _flat_22); 
  _flat_25 = 0; 
  _flat_24 = _mul_SxV_( _flat_25, new_shape); 
  _flat_23 = 0; 
  res = with {
        /* Partn */
        (_flat_24 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_26 = _sel_VxA_( new_idx, array); 
        } : _flat_26 ; 
         } :
      genarray( new_shape, _flat_23); 
  return( res); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayBasics::sel(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:ArrayBasics::sel( int[*] idx { ,NN } , int[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { int[*] -> ( int[*]),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[1] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int),
                         int[0] -> ( int)},
             int -> { int[*] -> ( int[*])},
             int[+] -> { int[*] -> ( int[*]),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[1] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int),
                         int[0] -> ( int)},
             int[.] -> { int[*] -> ( int[*]),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[1] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int),
                         int[0] -> ( int)},
             int[1] -> { int[*] -> ( int[*]),
                         int[+] -> ( int),
                         int[.] -> ( int),
                         int[1] -> ( int),
                         int[3] -> ( int),
                         int[2] -> ( int),
                         int[0] -> ( int)}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  UTDScalarB:ArrayBasics::sel,
 *                  UTDScalarB:ArrayBasics::sel,
 *                  UTDScalarB:ArrayBasics::sel,
 *                  UTDScalarB:ArrayBasics::sel,
 *                  UTDScalarB:ArrayBasics::sel
 */
{ 
  int[*] _cwc_5864 { , NN } ; 
  bool _cwc_5946 { , NN } ; 
  int _cwc_5945 { , NN } ; 
  int[*] _cwc_5944 { , NN } ; 
  int _cwc_5943 { , NN } ; 
  bool _cwc_5942 { , NN } ; 
  int _cwc_5941 { , NN } ; 
  bool _cwc_5940 { , NN } ; 
  bool _cwc_5939 { , NN } ; 
  int{1} _cwc_5938 { , NN } ; 
  int _cwc_5937 { , NN } ; 
  int[1]{0} _cwc_5936 { , NN } ; 
  bool _cwc_5935 { , NN } ; 
  bool _cwc_5934 { , NN } ; 
  int _cwc_5933 { , NN } ; 
  bool _cwc_5932 { , NN } ; 
  bool _cwc_5931 { , NN } ; 
  int{1} _cwc_5930 { , NN } ; 
  int _cwc_5929 { , NN } ; 
  int[1]{0} _cwc_5928 { , NN } ; 
  bool _cwc_5927 { , NN } ; 
  int _cwc_5926 { , NN } ; 
  bool _cwc_5925 { , NN } ; 
  bool _cwc_5924 { , NN } ; 
  int{3} _cwc_5923 { , NN } ; 
  int _cwc_5922 { , NN } ; 
  int[1]{0} _cwc_5921 { , NN } ; 
  bool _cwc_5920 { , NN } ; 
  int _cwc_5919 { , NN } ; 
  bool _cwc_5918 { , NN } ; 
  bool _cwc_5917 { , NN } ; 
  int{2} _cwc_5916 { , NN } ; 
  int _cwc_5915 { , NN } ; 
  int[1]{0} _cwc_5914 { , NN } ; 
  bool _cwc_5913 { , NN } ; 
  int _cwc_5912 { , NN } ; 
  bool _cwc_5911 { , NN } ; 
  bool _cwc_5910 { , NN } ; 
  int{0} _cwc_5909 { , NN } ; 
  int _cwc_5908 { , NN } ; 
  int[1]{0} _cwc_5907 { , NN } ; 
  bool _cwc_5906 { , NN } ; 
  int _cwc_5905 { , NN } ; 
  int[+] _cwc_5904 { , NN } ; 
  int _cwc_5903 { , NN } ; 
  int _cwc_5902 { , NN } ; 
  int[*] _cwc_5901 { , NN } ; 
  int[+] _cwc_5900 { , NN } ; 
  bool _cwc_5899 { , NN } ; 
  int _cwc_5898 { , NN } ; 
  bool _cwc_5897 { , NN } ; 
  bool _cwc_5896 { , NN } ; 
  int{1} _cwc_5895 { , NN } ; 
  int _cwc_5894 { , NN } ; 
  int[1]{0} _cwc_5893 { , NN } ; 
  bool _cwc_5892 { , NN } ; 
  int[*] _cwc_5891 { , NN } ; 
  bool _cwc_5890 { , NN } ; 
  bool _cwc_5889 { , NN } ; 
  int{3} _cwc_5888 { , NN } ; 
  int _cwc_5887 { , NN } ; 
  int[1]{0} _cwc_5886 { , NN } ; 
  bool _cwc_5885 { , NN } ; 
  int[*] _cwc_5884 { , NN } ; 
  bool _cwc_5883 { , NN } ; 
  bool _cwc_5882 { , NN } ; 
  int{2} _cwc_5881 { , NN } ; 
  int _cwc_5880 { , NN } ; 
  int[1]{0} _cwc_5879 { , NN } ; 
  bool _cwc_5878 { , NN } ; 
  int[*] _cwc_5877 { , NN } ; 
  bool _cwc_5876 { , NN } ; 
  bool _cwc_5875 { , NN } ; 
  int{0} _cwc_5874 { , NN } ; 
  int _cwc_5873 { , NN } ; 
  int[1]{0} _cwc_5872 { , NN } ; 
  bool _cwc_5871 { , NN } ; 
  int[*] _cwc_5870 { , NN } ; 
  int[+] _cwc_5869 { , NN } ; 
  int[*] _cwc_5868 { , NN } ; 
  int _cwc_5867 { , NN } ; 
  int[*] _cwc_5866 { , NN } ; 
  int _cwc_5865 { , NN } ; 

  _cwc_5943 = _dim_A_( idx); 
  _cwc_5945 = 0; 
  _cwc_5946 = _eq_SxS_( _cwc_5943, _cwc_5945); 
  if (_cwc_5946) 
  { 
    _cwc_5944 = ArrayBasics::sel( idx, array) ; 
    _cwc_5864 = _cwc_5944; 
  }
  else
  { 
    _cwc_5865 = _dim_A_( idx); 
    _cwc_5941 = 1; 
    _cwc_5942 = _eq_SxS_( _cwc_5865, _cwc_5941); 
    if (_cwc_5942) 
    { 
      _cwc_5900 = _shape_A_( idx); 
      _cwc_5935 = true; 
      _cwc_5938 = 1; 
      _cwc_5936 = [ 0 ]; 
      _cwc_5937 = _sel_VxA_( _cwc_5936, _cwc_5900); 
      _cwc_5939 = _eq_SxS_( _cwc_5937, _cwc_5938); 
      _cwc_5940 = _and_SxS_( _cwc_5939, _cwc_5935); 
      if (_cwc_5940) 
      { 
        _cwc_5902 = _dim_A_( array); 
        _cwc_5933 = 1; 
        _cwc_5934 = _eq_SxS_( _cwc_5902, _cwc_5933); 
        if (_cwc_5934) 
        { 
          _cwc_5904 = _shape_A_( array); 
          _cwc_5927 = true; 
          _cwc_5930 = 1; 
          _cwc_5928 = [ 0 ]; 
          _cwc_5929 = _sel_VxA_( _cwc_5928, _cwc_5904); 
          _cwc_5931 = _eq_SxS_( _cwc_5929, _cwc_5930); 
          _cwc_5932 = _and_SxS_( _cwc_5931, _cwc_5927); 
          if (_cwc_5932) 
          { 
            _cwc_5926 = UTDScalarB:ArrayBasics::sel( idx, array) ; 
            _cwc_5864 = _cwc_5926; 
          }
          else
          { 
            _cwc_5920 = true; 
            _cwc_5923 = 3; 
            _cwc_5921 = [ 0 ]; 
            _cwc_5922 = _sel_VxA_( _cwc_5921, _cwc_5904); 
            _cwc_5924 = _eq_SxS_( _cwc_5922, _cwc_5923); 
            _cwc_5925 = _and_SxS_( _cwc_5924, _cwc_5920); 
            if (_cwc_5925) 
            { 
              _cwc_5919 = UTDScalarB:ArrayBasics::sel( idx, array) ; 
              _cwc_5864 = _cwc_5919; 
            }
            else
            { 
              _cwc_5913 = true; 
              _cwc_5916 = 2; 
              _cwc_5914 = [ 0 ]; 
              _cwc_5915 = _sel_VxA_( _cwc_5914, _cwc_5904); 
              _cwc_5917 = _eq_SxS_( _cwc_5915, _cwc_5916); 
              _cwc_5918 = _and_SxS_( _cwc_5917, _cwc_5913); 
              if (_cwc_5918) 
              { 
                _cwc_5912 = UTDScalarB:ArrayBasics::sel( idx, array) ; 
                _cwc_5864 = _cwc_5912; 
              }
              else
              { 
                _cwc_5906 = true; 
                _cwc_5909 = 0; 
                _cwc_5907 = [ 0 ]; 
                _cwc_5908 = _sel_VxA_( _cwc_5907, _cwc_5904); 
                _cwc_5910 = _eq_SxS_( _cwc_5908, _cwc_5909); 
                _cwc_5911 = _and_SxS_( _cwc_5910, _cwc_5906); 
                if (_cwc_5911) 
                { 
                  _cwc_5905 = UTDScalarB:ArrayBasics::sel( idx, array) ; 
                  _cwc_5864 = _cwc_5905; 
                }
                else
                { 
                  _cwc_5903 = UTDScalarB:ArrayBasics::sel( idx, array) ; 
                  _cwc_5864 = _cwc_5903; 
                }
              }
            }
          }
        }
        else
        { 
          _cwc_5901 = ArrayBasics::sel( idx, array) ; 
          _cwc_5864 = _cwc_5901; 
        }
      }
      else
      { 
        _cwc_5867 = _dim_A_( array); 
        _cwc_5898 = 1; 
        _cwc_5899 = _eq_SxS_( _cwc_5867, _cwc_5898); 
        if (_cwc_5899) 
        { 
          _cwc_5869 = _shape_A_( array); 
          _cwc_5892 = true; 
          _cwc_5895 = 1; 
          _cwc_5893 = [ 0 ]; 
          _cwc_5894 = _sel_VxA_( _cwc_5893, _cwc_5869); 
          _cwc_5896 = _eq_SxS_( _cwc_5894, _cwc_5895); 
          _cwc_5897 = _and_SxS_( _cwc_5896, _cwc_5892); 
          if (_cwc_5897) 
          { 
            _cwc_5891 = ArrayBasics::sel( idx, array) ; 
            _cwc_5864 = _cwc_5891; 
          }
          else
          { 
            _cwc_5885 = true; 
            _cwc_5888 = 3; 
            _cwc_5886 = [ 0 ]; 
            _cwc_5887 = _sel_VxA_( _cwc_5886, _cwc_5869); 
            _cwc_5889 = _eq_SxS_( _cwc_5887, _cwc_5888); 
            _cwc_5890 = _and_SxS_( _cwc_5889, _cwc_5885); 
            if (_cwc_5890) 
            { 
              _cwc_5884 = ArrayBasics::sel( idx, array) ; 
              _cwc_5864 = _cwc_5884; 
            }
            else
            { 
              _cwc_5878 = true; 
              _cwc_5881 = 2; 
              _cwc_5879 = [ 0 ]; 
              _cwc_5880 = _sel_VxA_( _cwc_5879, _cwc_5869); 
              _cwc_5882 = _eq_SxS_( _cwc_5880, _cwc_5881); 
              _cwc_5883 = _and_SxS_( _cwc_5882, _cwc_5878); 
              if (_cwc_5883) 
              { 
                _cwc_5877 = ArrayBasics::sel( idx, array) ; 
                _cwc_5864 = _cwc_5877; 
              }
              else
              { 
                _cwc_5871 = true; 
                _cwc_5874 = 0; 
                _cwc_5872 = [ 0 ]; 
                _cwc_5873 = _sel_VxA_( _cwc_5872, _cwc_5869); 
                _cwc_5875 = _eq_SxS_( _cwc_5873, _cwc_5874); 
                _cwc_5876 = _and_SxS_( _cwc_5875, _cwc_5871); 
                if (_cwc_5876) 
                { 
                  _cwc_5870 = ArrayBasics::sel( idx, array) ; 
                  _cwc_5864 = _cwc_5870; 
                }
                else
                { 
                  _cwc_5868 = ArrayBasics::sel( idx, array) ; 
                  _cwc_5864 = _cwc_5868; 
                }
              }
            }
          }
        }
        else
        { 
          _cwc_5866 = ArrayBasics::sel( idx, array) ; 
          _cwc_5864 = _cwc_5866; 
        }
      }
    }
    else
    { 
      _cwc_5864 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::sel :: int[*] int[*] -> int[*] ", idx, array); 
    }
  }
  return( _cwc_5864); 
}



/****************************************************************************
 * ArrayArith::*(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayArith::*( int A { ,NN } , int[.] B { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _eat_1821 { , NN } ; 
  int[.] res__SSA0_1 { , NN } ; 
  int[.] res { , NN } ; 
  int _flat_79 { , NN } ; 
  int _flat_80 { , NN } ; 
  int[1] iv { , NN } ; 
  int{1} _flat_74 { , NN } ; 
  int{1} _flat_75 { , NN } ; 
  int{1} _flat_76 { , NN } ; 
  int[1] _flat_77 { , NN } ; 
  int{0} _flat_78 { , NN } ; 
  int[1] shp { , NN } ; 

  shp = _shape_A_( B); 
  _flat_78 = 0; 
  _flat_77 = _mul_SxV_( _flat_78, shp); 
  _flat_76 = wrapper:UTDScalarB:ArrayArith::one( B) ; 
  _flat_75 = wrapper:UTDScalarB:ArrayArith::one( A) ; 
  _flat_74 = _mul_SxS_( _flat_75, _flat_76); 
  res = with {
        /* Partn */
        (_flat_77 <= iv=[_eat_1821] < shp)
        { 
          _flat_80 = _sel_VxA_( iv, B); 
          _flat_79 = _mul_SxS_( A, _flat_80); 
        } : _flat_79 ; 
         } :
      genarray( shp, _flat_74); 
  res__SSA0_1 = _type_conv_( int[+], res); 
  return( res__SSA0_1); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayArith::*(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:ArrayArith::*( int[*] A { ,NN } , int[*] B { ,NN } )
/*
 *  * :: { int[*] -> { int[*] -> ( int[*]),
                       int -> ( int[*]),
                       int[+] -> ( int[+]),
                       int[.] -> ( int[.]),
                       int[1] -> ( int[1]),
                       int[2] -> ( int[2]),
                       int[3] -> ( int[3])},
           int -> { int[*] -> ( int[*]),
                    int -> ( int),
                    int[+] -> ( int[+]),
                    int[.] -> ( int[.]),
                    int[1] -> ( int[1]),
                    int[2] -> ( int[2]),
                    int[3] -> ( int[3])},
           int[+] -> { int[*] -> ( int[+]),
                       int -> ( int[+]),
                       int[+] -> ( int[+])}}
 *  dispatching to: ArrayArith::*,
 *                  ArrayArith::*,
 *                  ArrayArith::*,
 *                  ScalarArith::*,
 *                  ArrayArith::*,
 *                  UTDScalarB:ArrayArith::*,
 *                  UTDScalarB:ArrayArith::*,
 *                  UTDScalarB:ArrayArith::*
 */
{ 
  int[*] _cwc_5947 { , NN } ; 
  bool _cwc_5995 { , NN } ; 
  int _cwc_5994 { , NN } ; 
  bool _cwc_5993 { , NN } ; 
  int _cwc_5992 { , NN } ; 
  int _cwc_5991 { , NN } ; 
  int _cwc_5990 { , NN } ; 
  bool _cwc_5989 { , NN } ; 
  int _cwc_5988 { , NN } ; 
  int _cwc_5987 { , NN } ; 
  bool _cwc_5986 { , NN } ; 
  int _cwc_5985 { , NN } ; 
  bool _cwc_5984 { , NN } ; 
  bool _cwc_5983 { , NN } ; 
  int{1} _cwc_5982 { , NN } ; 
  int _cwc_5981 { , NN } ; 
  int[1]{0} _cwc_5980 { , NN } ; 
  bool _cwc_5979 { , NN } ; 
  int[1] _cwc_5978 { , NN } ; 
  bool _cwc_5977 { , NN } ; 
  bool _cwc_5976 { , NN } ; 
  int{2} _cwc_5975 { , NN } ; 
  int _cwc_5974 { , NN } ; 
  int[1]{0} _cwc_5973 { , NN } ; 
  bool _cwc_5972 { , NN } ; 
  int[2] _cwc_5971 { , NN } ; 
  bool _cwc_5970 { , NN } ; 
  bool _cwc_5969 { , NN } ; 
  int{3} _cwc_5968 { , NN } ; 
  int _cwc_5967 { , NN } ; 
  int[1]{0} _cwc_5966 { , NN } ; 
  bool _cwc_5965 { , NN } ; 
  int[3] _cwc_5964 { , NN } ; 
  int[+] _cwc_5963 { , NN } ; 
  int[.] _cwc_5962 { , NN } ; 
  int _cwc_5961 { , NN } ; 
  int[+] _cwc_5960 { , NN } ; 
  int _cwc_5959 { , NN } ; 
  bool _cwc_5958 { , NN } ; 
  int _cwc_5957 { , NN } ; 
  int _cwc_5956 { , NN } ; 
  bool _cwc_5955 { , NN } ; 
  int _cwc_5954 { , NN } ; 
  int[+] _cwc_5953 { , NN } ; 
  int _cwc_5952 { , NN } ; 
  bool _cwc_5951 { , NN } ; 
  int _cwc_5950 { , NN } ; 
  int _cwc_5949 { , NN } ; 
  int[+] _cwc_5948 { , NN } ; 

  _cwc_5959 = _dim_A_( A); 
  _cwc_5994 = 0; 
  _cwc_5995 = _eq_SxS_( _cwc_5959, _cwc_5994); 
  if (_cwc_5995) 
  { 
    _cwc_5990 = _dim_A_( B); 
    _cwc_5992 = 0; 
    _cwc_5993 = _eq_SxS_( _cwc_5990, _cwc_5992); 
    if (_cwc_5993) 
    { 
      _cwc_5991 = ( A ScalarArith::*B) ; 
      _cwc_5947 = _cwc_5991; 
    }
    else
    { 
      _cwc_5987 = _dim_A_( B); 
      _cwc_5988 = 0; 
      _cwc_5989 = _gt_SxS_( _cwc_5987, _cwc_5988); 
      if (_cwc_5989) 
      { 
        _cwc_5961 = _dim_A_( B); 
        _cwc_5985 = 1; 
        _cwc_5986 = _eq_SxS_( _cwc_5961, _cwc_5985); 
        if (_cwc_5986) 
        { 
          _cwc_5963 = _shape_A_( B); 
          _cwc_5979 = true; 
          _cwc_5982 = 1; 
          _cwc_5980 = [ 0 ]; 
          _cwc_5981 = _sel_VxA_( _cwc_5980, _cwc_5963); 
          _cwc_5983 = _eq_SxS_( _cwc_5981, _cwc_5982); 
          _cwc_5984 = _and_SxS_( _cwc_5983, _cwc_5979); 
          if (_cwc_5984) 
          { 
            _cwc_5978 = ( A UTDScalarB:ArrayArith::*B) ; 
            _cwc_5947 = _cwc_5978; 
          }
          else
          { 
            _cwc_5972 = true; 
            _cwc_5975 = 2; 
            _cwc_5973 = [ 0 ]; 
            _cwc_5974 = _sel_VxA_( _cwc_5973, _cwc_5963); 
            _cwc_5976 = _eq_SxS_( _cwc_5974, _cwc_5975); 
            _cwc_5977 = _and_SxS_( _cwc_5976, _cwc_5972); 
            if (_cwc_5977) 
            { 
              _cwc_5971 = ( A UTDScalarB:ArrayArith::*B) ; 
              _cwc_5947 = _cwc_5971; 
            }
            else
            { 
              _cwc_5965 = true; 
              _cwc_5968 = 3; 
              _cwc_5966 = [ 0 ]; 
              _cwc_5967 = _sel_VxA_( _cwc_5966, _cwc_5963); 
              _cwc_5969 = _eq_SxS_( _cwc_5967, _cwc_5968); 
              _cwc_5970 = _and_SxS_( _cwc_5969, _cwc_5965); 
              if (_cwc_5970) 
              { 
                _cwc_5964 = ( A UTDScalarB:ArrayArith::*B) ; 
                _cwc_5947 = _cwc_5964; 
              }
              else
              { 
                _cwc_5962 = ( A ArrayArith::*B) ; 
                _cwc_5947 = _cwc_5962; 
              }
            }
          }
        }
        else
        { 
          _cwc_5960 = ( A ArrayArith::*B) ; 
          _cwc_5947 = _cwc_5960; 
        }
      }
      else
      { 
        _cwc_5947 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayArith::* :: int[*] int[*] -> int[*] ", A, B); 
      }
    }
  }
  else
  { 
    _cwc_5956 = _dim_A_( A); 
    _cwc_5957 = 0; 
    _cwc_5958 = _gt_SxS_( _cwc_5956, _cwc_5957); 
    if (_cwc_5958) 
    { 
      _cwc_5952 = _dim_A_( B); 
      _cwc_5954 = 0; 
      _cwc_5955 = _eq_SxS_( _cwc_5952, _cwc_5954); 
      if (_cwc_5955) 
      { 
        _cwc_5953 = ( A ArrayArith::*B) ; 
        _cwc_5947 = _cwc_5953; 
      }
      else
      { 
        _cwc_5949 = _dim_A_( B); 
        _cwc_5950 = 0; 
        _cwc_5951 = _gt_SxS_( _cwc_5949, _cwc_5950); 
        if (_cwc_5951) 
        { 
          _cwc_5948 = ( A ArrayArith::*B) ; 
          _cwc_5947 = _cwc_5948; 
        }
        else
        { 
          _cwc_5947 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayArith::* :: int[*] int[*] -> int[*] ", A, B); 
        }
      }
    }
    else
    { 
      _cwc_5947 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayArith::* :: int[*] int[*] -> int[*] ", A, B); 
    }
  }
  return( _cwc_5947); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayBasics::modarray(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[*] UTDScalarB:ArrayBasics::modarray( int[*] array { ,NN } , int[*] v { ,NN } , int[*] val { ,NN } )
/*
 *  modarray :: { int[*] -> { int[*] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])},
                              int -> { int[*] -> ( int[*])},
                              int[+] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])},
                              int[.] -> { int[*] -> ( int[*]),
                                          int -> ( int[*]),
                                          int[+] -> ( int[+])},
                              int[1] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)}},
                  int[+] -> { int[*] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int -> { int[*] -> ( --)},
                              int[+] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int[.] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int[1] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)}},
                  int[.] -> { int[*] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int -> { int[*] -> ( --)},
                              int[+] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int[.] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)},
                              int[1] -> { int[*] -> ( int[.]),
                                          int -> ( int[.]),
                                          int[+] -> ( --)}}}
 *  dispatching to: ArrayBasics::modarray,
 *                  ArrayBasics::modarray,
 *                  ArrayBasics::modarray,
 *                  UTDScalarB:ArrayBasics::modarray
 */
{ 
  int[*] _cwc_5996 { , NN } ; 
  bool _cwc_6059 { , NN } ; 
  int _cwc_6058 { , NN } ; 
  bool _cwc_6057 { , NN } ; 
  int _cwc_6056 { , NN } ; 
  int[*] _cwc_6055 { , NN } ; 
  int _cwc_6054 { , NN } ; 
  bool _cwc_6053 { , NN } ; 
  int _cwc_6052 { , NN } ; 
  bool _cwc_6051 { , NN } ; 
  bool _cwc_6050 { , NN } ; 
  int{1} _cwc_6049 { , NN } ; 
  int _cwc_6048 { , NN } ; 
  int[1]{0} _cwc_6047 { , NN } ; 
  bool _cwc_6046 { , NN } ; 
  bool _cwc_6045 { , NN } ; 
  int _cwc_6044 { , NN } ; 
  int[.] _cwc_6043 { , NN } ; 
  int _cwc_6042 { , NN } ; 
  bool _cwc_6041 { , NN } ; 
  int _cwc_6040 { , NN } ; 
  int _cwc_6039 { , NN } ; 
  int[+] _cwc_6038 { , NN } ; 
  int[+] _cwc_6037 { , NN } ; 
  bool _cwc_6036 { , NN } ; 
  int _cwc_6035 { , NN } ; 
  int[*] _cwc_6034 { , NN } ; 
  int _cwc_6033 { , NN } ; 
  bool _cwc_6032 { , NN } ; 
  int _cwc_6031 { , NN } ; 
  int _cwc_6030 { , NN } ; 
  int[+] _cwc_6029 { , NN } ; 
  int _cwc_6028 { , NN } ; 
  int _cwc_6027 { , NN } ; 
  bool _cwc_6026 { , NN } ; 
  int _cwc_6025 { , NN } ; 
  int[*] _cwc_6024 { , NN } ; 
  int _cwc_6023 { , NN } ; 
  bool _cwc_6022 { , NN } ; 
  int _cwc_6021 { , NN } ; 
  bool _cwc_6020 { , NN } ; 
  bool _cwc_6019 { , NN } ; 
  int{1} _cwc_6018 { , NN } ; 
  int _cwc_6017 { , NN } ; 
  int[1]{0} _cwc_6016 { , NN } ; 
  bool _cwc_6015 { , NN } ; 
  bool _cwc_6014 { , NN } ; 
  int _cwc_6013 { , NN } ; 
  int[*] _cwc_6012 { , NN } ; 
  int _cwc_6011 { , NN } ; 
  bool _cwc_6010 { , NN } ; 
  int _cwc_6009 { , NN } ; 
  int _cwc_6008 { , NN } ; 
  int[+] _cwc_6007 { , NN } ; 
  int[+] _cwc_6006 { , NN } ; 
  bool _cwc_6005 { , NN } ; 
  int _cwc_6004 { , NN } ; 
  int[*] _cwc_6003 { , NN } ; 
  int _cwc_6002 { , NN } ; 
  bool _cwc_6001 { , NN } ; 
  int _cwc_6000 { , NN } ; 
  int _cwc_5999 { , NN } ; 
  int[+] _cwc_5998 { , NN } ; 
  int _cwc_5997 { , NN } ; 

  _cwc_6027 = _dim_A_( array); 
  _cwc_6058 = 1; 
  _cwc_6059 = _eq_SxS_( _cwc_6027, _cwc_6058); 
  if (_cwc_6059) 
  { 
    _cwc_6054 = _dim_A_( v); 
    _cwc_6056 = 0; 
    _cwc_6057 = _eq_SxS_( _cwc_6054, _cwc_6056); 
    if (_cwc_6057) 
    { 
      _cwc_6055 = ArrayBasics::modarray( array, v, val) ; 
      _cwc_5996 = _cwc_6055; 
    }
    else
    { 
      _cwc_6028 = _dim_A_( v); 
      _cwc_6052 = 1; 
      _cwc_6053 = _eq_SxS_( _cwc_6028, _cwc_6052); 
      if (_cwc_6053) 
      { 
        _cwc_6037 = _shape_A_( v); 
        _cwc_6046 = true; 
        _cwc_6049 = 1; 
        _cwc_6047 = [ 0 ]; 
        _cwc_6048 = _sel_VxA_( _cwc_6047, _cwc_6037); 
        _cwc_6050 = _eq_SxS_( _cwc_6048, _cwc_6049); 
        _cwc_6051 = _and_SxS_( _cwc_6050, _cwc_6046); 
        if (_cwc_6051) 
        { 
          _cwc_6042 = _dim_A_( val); 
          _cwc_6044 = 0; 
          _cwc_6045 = _eq_SxS_( _cwc_6042, _cwc_6044); 
          if (_cwc_6045) 
          { 
            _cwc_6043 = UTDScalarB:ArrayBasics::modarray( array, v, val) ; 
            _cwc_5996 = _cwc_6043; 
          }
          else
          { 
            _cwc_6039 = _dim_A_( val); 
            _cwc_6040 = 0; 
            _cwc_6041 = _gt_SxS_( _cwc_6039, _cwc_6040); 
            if (_cwc_6041) 
            { 
              _cwc_6038 = ArrayBasics::modarray( array, v, val) ; 
              _cwc_5996 = _cwc_6038; 
            }
            else
            { 
              _cwc_5996 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
            }
          }
        }
        else
        { 
          _cwc_6033 = _dim_A_( val); 
          _cwc_6035 = 0; 
          _cwc_6036 = _eq_SxS_( _cwc_6033, _cwc_6035); 
          if (_cwc_6036) 
          { 
            _cwc_6034 = ArrayBasics::modarray( array, v, val) ; 
            _cwc_5996 = _cwc_6034; 
          }
          else
          { 
            _cwc_6030 = _dim_A_( val); 
            _cwc_6031 = 0; 
            _cwc_6032 = _gt_SxS_( _cwc_6030, _cwc_6031); 
            if (_cwc_6032) 
            { 
              _cwc_6029 = ArrayBasics::modarray( array, v, val) ; 
              _cwc_5996 = _cwc_6029; 
            }
            else
            { 
              _cwc_5996 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
            }
          }
        }
      }
      else
      { 
        _cwc_5996 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
      }
    }
  }
  else
  { 
    _cwc_6023 = _dim_A_( v); 
    _cwc_6025 = 0; 
    _cwc_6026 = _eq_SxS_( _cwc_6023, _cwc_6025); 
    if (_cwc_6026) 
    { 
      _cwc_6024 = ArrayBasics::modarray( array, v, val) ; 
      _cwc_5996 = _cwc_6024; 
    }
    else
    { 
      _cwc_5997 = _dim_A_( v); 
      _cwc_6021 = 1; 
      _cwc_6022 = _eq_SxS_( _cwc_5997, _cwc_6021); 
      if (_cwc_6022) 
      { 
        _cwc_6006 = _shape_A_( v); 
        _cwc_6015 = true; 
        _cwc_6018 = 1; 
        _cwc_6016 = [ 0 ]; 
        _cwc_6017 = _sel_VxA_( _cwc_6016, _cwc_6006); 
        _cwc_6019 = _eq_SxS_( _cwc_6017, _cwc_6018); 
        _cwc_6020 = _and_SxS_( _cwc_6019, _cwc_6015); 
        if (_cwc_6020) 
        { 
          _cwc_6011 = _dim_A_( val); 
          _cwc_6013 = 0; 
          _cwc_6014 = _eq_SxS_( _cwc_6011, _cwc_6013); 
          if (_cwc_6014) 
          { 
            _cwc_6012 = ArrayBasics::modarray( array, v, val) ; 
            _cwc_5996 = _cwc_6012; 
          }
          else
          { 
            _cwc_6008 = _dim_A_( val); 
            _cwc_6009 = 0; 
            _cwc_6010 = _gt_SxS_( _cwc_6008, _cwc_6009); 
            if (_cwc_6010) 
            { 
              _cwc_6007 = ArrayBasics::modarray( array, v, val) ; 
              _cwc_5996 = _cwc_6007; 
            }
            else
            { 
              _cwc_5996 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
            }
          }
        }
        else
        { 
          _cwc_6002 = _dim_A_( val); 
          _cwc_6004 = 0; 
          _cwc_6005 = _eq_SxS_( _cwc_6002, _cwc_6004); 
          if (_cwc_6005) 
          { 
            _cwc_6003 = ArrayBasics::modarray( array, v, val) ; 
            _cwc_5996 = _cwc_6003; 
          }
          else
          { 
            _cwc_5999 = _dim_A_( val); 
            _cwc_6000 = 0; 
            _cwc_6001 = _gt_SxS_( _cwc_5999, _cwc_6000); 
            if (_cwc_6001) 
            { 
              _cwc_5998 = ArrayBasics::modarray( array, v, val) ; 
              _cwc_5996 = _cwc_5998; 
            }
            else
            { 
              _cwc_5996 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
            }
          }
        }
      }
      else
      { 
        _cwc_5996 = _dispatch_error_( 1, int[*], "UTDScalarB:ArrayBasics::modarray :: int[*] int[*] int[*] -> int[*] ", array, v, val); 
      }
    }
  }
  return( _cwc_5996); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ArrayArith::one( int[.] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ArrayArith::one( int[+] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ScalarArith::one( int[*] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ArrayArith::one( int A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayArith::one(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int{1} UTDScalarB:ArrayArith::one( int[*] A { ,NN } )
/*
 *  one :: { int[*] -> ( int{1}),
             int -> ( int{1}),
             int[+] -> ( int{1}),
             int[.] -> ( int{1}),
             int[1] -> ( int{1}),
             int[2] -> ( int{1}),
             int[3] -> ( int{1})}
 *  dispatching to: ScalarArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one,
 *                  ArrayArith::one,
 *                  UTDScalarB:ArrayArith::one,
 *                  UTDScalarB:ArrayArith::one,
 *                  UTDScalarB:ArrayArith::one
 */
{ 
  int{1} _cwc_6060 { , NN } ; 
  bool _cwc_6095 { , NN } ; 
  int _cwc_6094 { , NN } ; 
  int{1} _cwc_6093 { , NN } ; 
  int _cwc_6092 { , NN } ; 
  bool _cwc_6091 { , NN } ; 
  int _cwc_6090 { , NN } ; 
  int{1} _cwc_6089 { , NN } ; 
  int _cwc_6088 { , NN } ; 
  bool _cwc_6087 { , NN } ; 
  int _cwc_6086 { , NN } ; 
  bool _cwc_6085 { , NN } ; 
  bool _cwc_6084 { , NN } ; 
  int{1} _cwc_6083 { , NN } ; 
  int _cwc_6082 { , NN } ; 
  int[1]{0} _cwc_6081 { , NN } ; 
  bool _cwc_6080 { , NN } ; 
  int{1} _cwc_6079 { , NN } ; 
  bool _cwc_6078 { , NN } ; 
  bool _cwc_6077 { , NN } ; 
  int{2} _cwc_6076 { , NN } ; 
  int _cwc_6075 { , NN } ; 
  int[1]{0} _cwc_6074 { , NN } ; 
  bool _cwc_6073 { , NN } ; 
  int{1} _cwc_6072 { , NN } ; 
  bool _cwc_6071 { , NN } ; 
  bool _cwc_6070 { , NN } ; 
  int{3} _cwc_6069 { , NN } ; 
  int _cwc_6068 { , NN } ; 
  int[1]{0} _cwc_6067 { , NN } ; 
  bool _cwc_6066 { , NN } ; 
  int{1} _cwc_6065 { , NN } ; 
  int[+] _cwc_6064 { , NN } ; 
  int{1} _cwc_6063 { , NN } ; 
  int _cwc_6062 { , NN } ; 
  int{1} _cwc_6061 { , NN } ; 

  _cwc_6092 = _dim_A_( A); 
  _cwc_6094 = 0; 
  _cwc_6095 = _eq_SxS_( _cwc_6092, _cwc_6094); 
  if (_cwc_6095) 
  { 
    _cwc_6093 = ArrayArith::one( A) ; 
    _cwc_6060 = _cwc_6093; 
  }
  else
  { 
    _cwc_6088 = _dim_A_( A); 
    _cwc_6090 = 0; 
    _cwc_6091 = _gt_SxS_( _cwc_6088, _cwc_6090); 
    if (_cwc_6091) 
    { 
      _cwc_6062 = _dim_A_( A); 
      _cwc_6086 = 1; 
      _cwc_6087 = _eq_SxS_( _cwc_6062, _cwc_6086); 
      if (_cwc_6087) 
      { 
        _cwc_6064 = _shape_A_( A); 
        _cwc_6080 = true; 
        _cwc_6083 = 1; 
        _cwc_6081 = [ 0 ]; 
        _cwc_6082 = _sel_VxA_( _cwc_6081, _cwc_6064); 
        _cwc_6084 = _eq_SxS_( _cwc_6082, _cwc_6083); 
        _cwc_6085 = _and_SxS_( _cwc_6084, _cwc_6080); 
        if (_cwc_6085) 
        { 
          _cwc_6079 = UTDScalarB:ArrayArith::one( A) ; 
          _cwc_6060 = _cwc_6079; 
        }
        else
        { 
          _cwc_6073 = true; 
          _cwc_6076 = 2; 
          _cwc_6074 = [ 0 ]; 
          _cwc_6075 = _sel_VxA_( _cwc_6074, _cwc_6064); 
          _cwc_6077 = _eq_SxS_( _cwc_6075, _cwc_6076); 
          _cwc_6078 = _and_SxS_( _cwc_6077, _cwc_6073); 
          if (_cwc_6078) 
          { 
            _cwc_6072 = UTDScalarB:ArrayArith::one( A) ; 
            _cwc_6060 = _cwc_6072; 
          }
          else
          { 
            _cwc_6066 = true; 
            _cwc_6069 = 3; 
            _cwc_6067 = [ 0 ]; 
            _cwc_6068 = _sel_VxA_( _cwc_6067, _cwc_6064); 
            _cwc_6070 = _eq_SxS_( _cwc_6068, _cwc_6069); 
            _cwc_6071 = _and_SxS_( _cwc_6070, _cwc_6066); 
            if (_cwc_6071) 
            { 
              _cwc_6065 = UTDScalarB:ArrayArith::one( A) ; 
              _cwc_6060 = _cwc_6065; 
            }
            else
            { 
              _cwc_6063 = ArrayArith::one( A) ; 
              _cwc_6060 = _cwc_6063; 
            }
          }
        }
      }
      else
      { 
        _cwc_6061 = ArrayArith::one( A) ; 
        _cwc_6060 = _cwc_6061; 
      }
    }
    else
    { 
      _cwc_6089 = ScalarArith::one( A) ; 
      _cwc_6060 = _cwc_6089; 
    }
  }
  return( _cwc_6060); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayArith::sel(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
bool[*] UTDScalarB:ArrayArith::sel( int[*] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel :: { int[*] -> { bool[*] -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[2] -> ( bool),
                         bool[3] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int -> { bool[*] -> ( bool[*])},
             int[+] -> { bool[*] -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[2] -> ( bool),
                         bool[3] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int[.] -> { bool[*] -> ( bool[*]),
                         bool[+] -> ( bool[*]),
                         bool[.] -> ( bool),
                         bool[2] -> ( bool),
                         bool[3] -> ( bool),
                         bool[.,.] -> ( bool),
                         bool[.,.,.] -> ( bool)},
             int[1] -> { bool[*] -> ( bool),
                         bool[+] -> ( bool),
                         bool[.] -> ( bool),
                         bool[2] -> ( bool),
                         bool[3] -> ( bool)},
             int[2] -> { bool[*] -> ( bool),
                         bool[+] -> ( bool),
                         bool[.] -> ( --),
                         bool[2] -> ( --),
                         bool[.,.] -> ( bool)},
             int[3] -> { bool[*] -> ( bool),
                         bool[+] -> ( bool),
                         bool[.] -> ( --),
                         bool[2] -> ( --),
                         bool[3] -> ( --),
                         bool[.,.] -> ( --),
                         bool[.,.,.] -> ( bool)}}
 *  dispatching to: ArrayBasics::sel,
 *                  ArrayBasics::sel,
 *                  UTDScalarB:ArrayArith::sel,
 *                  UTDScalarB:ArrayArith::sel,
 *                  UTDScalarB:ArrayArith::sel,
 *                  UTDScalarB:ArrayArith::sel,
 *                  UTDScalarB:ArrayArith::sel,
 *                  UTDScalarB:ArrayArith::sel
 */
{ 
  bool[*] _cwc_6096 { , NN } ; 
  bool _cwc_6226 { , NN } ; 
  int _cwc_6225 { , NN } ; 
  bool[*] _cwc_6224 { , NN } ; 
  int _cwc_6223 { , NN } ; 
  bool _cwc_6222 { , NN } ; 
  int _cwc_6221 { , NN } ; 
  bool _cwc_6220 { , NN } ; 
  bool _cwc_6219 { , NN } ; 
  int{1} _cwc_6218 { , NN } ; 
  int _cwc_6217 { , NN } ; 
  int[1]{0} _cwc_6216 { , NN } ; 
  bool _cwc_6215 { , NN } ; 
  bool _cwc_6214 { , NN } ; 
  int _cwc_6213 { , NN } ; 
  bool[*] _cwc_6212 { , NN } ; 
  int _cwc_6211 { , NN } ; 
  bool _cwc_6210 { , NN } ; 
  int _cwc_6209 { , NN } ; 
  bool _cwc_6208 { , NN } ; 
  bool _cwc_6207 { , NN } ; 
  int{2} _cwc_6206 { , NN } ; 
  int _cwc_6205 { , NN } ; 
  int[1]{0} _cwc_6204 { , NN } ; 
  bool _cwc_6203 { , NN } ; 
  bool _cwc_6202 { , NN } ; 
  bool _cwc_6201 { , NN } ; 
  bool _cwc_6200 { , NN } ; 
  int{3} _cwc_6199 { , NN } ; 
  int _cwc_6198 { , NN } ; 
  int[1]{0} _cwc_6197 { , NN } ; 
  bool _cwc_6196 { , NN } ; 
  bool _cwc_6195 { , NN } ; 
  int[+] _cwc_6194 { , NN } ; 
  bool _cwc_6193 { , NN } ; 
  int _cwc_6192 { , NN } ; 
  bool[*] _cwc_6191 { , NN } ; 
  bool _cwc_6190 { , NN } ; 
  bool _cwc_6189 { , NN } ; 
  int{2} _cwc_6188 { , NN } ; 
  int _cwc_6187 { , NN } ; 
  int[1]{0} _cwc_6186 { , NN } ; 
  bool _cwc_6185 { , NN } ; 
  bool _cwc_6184 { , NN } ; 
  int _cwc_6183 { , NN } ; 
  bool[*] _cwc_6182 { , NN } ; 
  int _cwc_6181 { , NN } ; 
  bool _cwc_6180 { , NN } ; 
  int _cwc_6179 { , NN } ; 
  bool _cwc_6178 { , NN } ; 
  bool _cwc_6177 { , NN } ; 
  int{2} _cwc_6176 { , NN } ; 
  int _cwc_6175 { , NN } ; 
  int[1]{0} _cwc_6174 { , NN } ; 
  bool _cwc_6173 { , NN } ; 
  bool[*] _cwc_6172 { , NN } ; 
  int[+] _cwc_6171 { , NN } ; 
  bool[*] _cwc_6170 { , NN } ; 
  bool _cwc_6169 { , NN } ; 
  int _cwc_6168 { , NN } ; 
  bool _cwc_6167 { , NN } ; 
  int _cwc_6166 { , NN } ; 
  bool[*] _cwc_6165 { , NN } ; 
  bool _cwc_6164 { , NN } ; 
  bool _cwc_6163 { , NN } ; 
  int{3} _cwc_6162 { , NN } ; 
  int _cwc_6161 { , NN } ; 
  int[1]{0} _cwc_6160 { , NN } ; 
  bool _cwc_6159 { , NN } ; 
  bool _cwc_6158 { , NN } ; 
  int _cwc_6157 { , NN } ; 
  bool[*] _cwc_6156 { , NN } ; 
  int _cwc_6155 { , NN } ; 
  bool _cwc_6154 { , NN } ; 
  int _cwc_6153 { , NN } ; 
  bool _cwc_6152 { , NN } ; 
  bool _cwc_6151 { , NN } ; 
  int{2} _cwc_6150 { , NN } ; 
  int _cwc_6149 { , NN } ; 
  int[1]{0} _cwc_6148 { , NN } ; 
  bool _cwc_6147 { , NN } ; 
  bool[*] _cwc_6146 { , NN } ; 
  bool _cwc_6145 { , NN } ; 
  bool _cwc_6144 { , NN } ; 
  int{3} _cwc_6143 { , NN } ; 
  int _cwc_6142 { , NN } ; 
  int[1]{0} _cwc_6141 { , NN } ; 
  bool _cwc_6140 { , NN } ; 
  bool[*] _cwc_6139 { , NN } ; 
  int[+] _cwc_6138 { , NN } ; 
  bool[*] _cwc_6137 { , NN } ; 
  bool _cwc_6136 { , NN } ; 
  int _cwc_6135 { , NN } ; 
  bool[*] _cwc_6134 { , NN } ; 
  bool _cwc_6133 { , NN } ; 
  int _cwc_6132 { , NN } ; 
  bool _cwc_6131 { , NN } ; 
  int _cwc_6130 { , NN } ; 
  bool[*] _cwc_6129 { , NN } ; 
  int[+] _cwc_6128 { , NN } ; 
  bool _cwc_6127 { , NN } ; 
  int _cwc_6126 { , NN } ; 
  bool[*] _cwc_6125 { , NN } ; 
  int _cwc_6124 { , NN } ; 
  bool _cwc_6123 { , NN } ; 
  int _cwc_6122 { , NN } ; 
  bool _cwc_6121 { , NN } ; 
  bool _cwc_6120 { , NN } ; 
  int{2} _cwc_6119 { , NN } ; 
  int _cwc_6118 { , NN } ; 
  int[1]{0} _cwc_6117 { , NN } ; 
  bool _cwc_6116 { , NN } ; 
  bool[*] _cwc_6115 { , NN } ; 
  bool _cwc_6114 { , NN } ; 
  bool _cwc_6113 { , NN } ; 
  int{3} _cwc_6112 { , NN } ; 
  int _cwc_6111 { , NN } ; 
  int[1]{0} _cwc_6110 { , NN } ; 
  bool _cwc_6109 { , NN } ; 
  bool[*] _cwc_6108 { , NN } ; 
  int[+] _cwc_6107 { , NN } ; 
  bool[*] _cwc_6106 { , NN } ; 
  bool _cwc_6105 { , NN } ; 
  int _cwc_6104 { , NN } ; 
  bool[*] _cwc_6103 { , NN } ; 
  bool _cwc_6102 { , NN } ; 
  int _cwc_6101 { , NN } ; 
  bool[*] _cwc_6100 { , NN } ; 
  int _cwc_6099 { , NN } ; 
  bool[*] _cwc_6098 { , NN } ; 
  int _cwc_6097 { , NN } ; 

  _cwc_6223 = _dim_A_( idx); 
  _cwc_6225 = 0; 
  _cwc_6226 = _eq_SxS_( _cwc_6223, _cwc_6225); 
  if (_cwc_6226) 
  { 
    _cwc_6224 = ArrayBasics::sel( idx, array) ; 
    _cwc_6096 = _cwc_6224; 
  }
  else
  { 
    _cwc_6097 = _dim_A_( idx); 
    _cwc_6221 = 1; 
    _cwc_6222 = _eq_SxS_( _cwc_6097, _cwc_6221); 
    if (_cwc_6222) 
    { 
      _cwc_6128 = _shape_A_( idx); 
      _cwc_6215 = true; 
      _cwc_6218 = 1; 
      _cwc_6216 = [ 0 ]; 
      _cwc_6217 = _sel_VxA_( _cwc_6216, _cwc_6128); 
      _cwc_6219 = _eq_SxS_( _cwc_6217, _cwc_6218); 
      _cwc_6220 = _and_SxS_( _cwc_6219, _cwc_6215); 
      if (_cwc_6220) 
      { 
        _cwc_6211 = _dim_A_( array); 
        _cwc_6213 = 0; 
        _cwc_6214 = _gt_SxS_( _cwc_6211, _cwc_6213); 
        if (_cwc_6214) 
        { 
          _cwc_6192 = _dim_A_( array); 
          _cwc_6209 = 1; 
          _cwc_6210 = _eq_SxS_( _cwc_6192, _cwc_6209); 
          if (_cwc_6210) 
          { 
            _cwc_6194 = _shape_A_( array); 
            _cwc_6203 = true; 
            _cwc_6206 = 2; 
            _cwc_6204 = [ 0 ]; 
            _cwc_6205 = _sel_VxA_( _cwc_6204, _cwc_6194); 
            _cwc_6207 = _eq_SxS_( _cwc_6205, _cwc_6206); 
            _cwc_6208 = _and_SxS_( _cwc_6207, _cwc_6203); 
            if (_cwc_6208) 
            { 
              _cwc_6202 = UTDScalarB:ArrayArith::sel( idx, array) ; 
              _cwc_6096 = _cwc_6202; 
            }
            else
            { 
              _cwc_6196 = true; 
              _cwc_6199 = 3; 
              _cwc_6197 = [ 0 ]; 
              _cwc_6198 = _sel_VxA_( _cwc_6197, _cwc_6194); 
              _cwc_6200 = _eq_SxS_( _cwc_6198, _cwc_6199); 
              _cwc_6201 = _and_SxS_( _cwc_6200, _cwc_6196); 
              if (_cwc_6201) 
              { 
                _cwc_6195 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_6096 = _cwc_6195; 
              }
              else
              { 
                _cwc_6193 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_6096 = _cwc_6193; 
              }
            }
          }
          else
          { 
            _cwc_6191 = UTDScalarB:ArrayArith::sel( idx, array) ; 
            _cwc_6096 = _cwc_6191; 
          }
        }
        else
        { 
          _cwc_6212 = ArrayBasics::sel( idx, array) ; 
          _cwc_6096 = _cwc_6212; 
        }
      }
      else
      { 
        _cwc_6185 = true; 
        _cwc_6188 = 2; 
        _cwc_6186 = [ 0 ]; 
        _cwc_6187 = _sel_VxA_( _cwc_6186, _cwc_6128); 
        _cwc_6189 = _eq_SxS_( _cwc_6187, _cwc_6188); 
        _cwc_6190 = _and_SxS_( _cwc_6189, _cwc_6185); 
        if (_cwc_6190) 
        { 
          _cwc_6181 = _dim_A_( array); 
          _cwc_6183 = 0; 
          _cwc_6184 = _gt_SxS_( _cwc_6181, _cwc_6183); 
          if (_cwc_6184) 
          { 
            _cwc_6166 = _dim_A_( array); 
            _cwc_6179 = 1; 
            _cwc_6180 = _eq_SxS_( _cwc_6166, _cwc_6179); 
            if (_cwc_6180) 
            { 
              _cwc_6171 = _shape_A_( array); 
              _cwc_6173 = true; 
              _cwc_6176 = 2; 
              _cwc_6174 = [ 0 ]; 
              _cwc_6175 = _sel_VxA_( _cwc_6174, _cwc_6171); 
              _cwc_6177 = _eq_SxS_( _cwc_6175, _cwc_6176); 
              _cwc_6178 = _and_SxS_( _cwc_6177, _cwc_6173); 
              if (_cwc_6178) 
              { 
                _cwc_6172 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_6096 = _cwc_6172; 
              }
              else
              { 
                _cwc_6170 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_6096 = _cwc_6170; 
              }
            }
            else
            { 
              _cwc_6168 = 2; 
              _cwc_6169 = _eq_SxS_( _cwc_6166, _cwc_6168); 
              if (_cwc_6169) 
              { 
                _cwc_6167 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_6096 = _cwc_6167; 
              }
              else
              { 
                _cwc_6165 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                _cwc_6096 = _cwc_6165; 
              }
            }
          }
          else
          { 
            _cwc_6182 = ArrayBasics::sel( idx, array) ; 
            _cwc_6096 = _cwc_6182; 
          }
        }
        else
        { 
          _cwc_6159 = true; 
          _cwc_6162 = 3; 
          _cwc_6160 = [ 0 ]; 
          _cwc_6161 = _sel_VxA_( _cwc_6160, _cwc_6128); 
          _cwc_6163 = _eq_SxS_( _cwc_6161, _cwc_6162); 
          _cwc_6164 = _and_SxS_( _cwc_6163, _cwc_6159); 
          if (_cwc_6164) 
          { 
            _cwc_6155 = _dim_A_( array); 
            _cwc_6157 = 0; 
            _cwc_6158 = _gt_SxS_( _cwc_6155, _cwc_6157); 
            if (_cwc_6158) 
            { 
              _cwc_6130 = _dim_A_( array); 
              _cwc_6153 = 1; 
              _cwc_6154 = _eq_SxS_( _cwc_6130, _cwc_6153); 
              if (_cwc_6154) 
              { 
                _cwc_6138 = _shape_A_( array); 
                _cwc_6147 = true; 
                _cwc_6150 = 2; 
                _cwc_6148 = [ 0 ]; 
                _cwc_6149 = _sel_VxA_( _cwc_6148, _cwc_6138); 
                _cwc_6151 = _eq_SxS_( _cwc_6149, _cwc_6150); 
                _cwc_6152 = _and_SxS_( _cwc_6151, _cwc_6147); 
                if (_cwc_6152) 
                { 
                  _cwc_6146 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                  _cwc_6096 = _cwc_6146; 
                }
                else
                { 
                  _cwc_6140 = true; 
                  _cwc_6143 = 3; 
                  _cwc_6141 = [ 0 ]; 
                  _cwc_6142 = _sel_VxA_( _cwc_6141, _cwc_6138); 
                  _cwc_6144 = _eq_SxS_( _cwc_6142, _cwc_6143); 
                  _cwc_6145 = _and_SxS_( _cwc_6144, _cwc_6140); 
                  if (_cwc_6145) 
                  { 
                    _cwc_6139 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_6096 = _cwc_6139; 
                  }
                  else
                  { 
                    _cwc_6137 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_6096 = _cwc_6137; 
                  }
                }
              }
              else
              { 
                _cwc_6135 = 2; 
                _cwc_6136 = _eq_SxS_( _cwc_6130, _cwc_6135); 
                if (_cwc_6136) 
                { 
                  _cwc_6134 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                  _cwc_6096 = _cwc_6134; 
                }
                else
                { 
                  _cwc_6132 = 3; 
                  _cwc_6133 = _eq_SxS_( _cwc_6130, _cwc_6132); 
                  if (_cwc_6133) 
                  { 
                    _cwc_6131 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_6096 = _cwc_6131; 
                  }
                  else
                  { 
                    _cwc_6129 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_6096 = _cwc_6129; 
                  }
                }
              }
            }
            else
            { 
              _cwc_6156 = ArrayBasics::sel( idx, array) ; 
              _cwc_6096 = _cwc_6156; 
            }
          }
          else
          { 
            _cwc_6124 = _dim_A_( array); 
            _cwc_6126 = 0; 
            _cwc_6127 = _gt_SxS_( _cwc_6124, _cwc_6126); 
            if (_cwc_6127) 
            { 
              _cwc_6099 = _dim_A_( array); 
              _cwc_6122 = 1; 
              _cwc_6123 = _eq_SxS_( _cwc_6099, _cwc_6122); 
              if (_cwc_6123) 
              { 
                _cwc_6107 = _shape_A_( array); 
                _cwc_6116 = true; 
                _cwc_6119 = 2; 
                _cwc_6117 = [ 0 ]; 
                _cwc_6118 = _sel_VxA_( _cwc_6117, _cwc_6107); 
                _cwc_6120 = _eq_SxS_( _cwc_6118, _cwc_6119); 
                _cwc_6121 = _and_SxS_( _cwc_6120, _cwc_6116); 
                if (_cwc_6121) 
                { 
                  _cwc_6115 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                  _cwc_6096 = _cwc_6115; 
                }
                else
                { 
                  _cwc_6109 = true; 
                  _cwc_6112 = 3; 
                  _cwc_6110 = [ 0 ]; 
                  _cwc_6111 = _sel_VxA_( _cwc_6110, _cwc_6107); 
                  _cwc_6113 = _eq_SxS_( _cwc_6111, _cwc_6112); 
                  _cwc_6114 = _and_SxS_( _cwc_6113, _cwc_6109); 
                  if (_cwc_6114) 
                  { 
                    _cwc_6108 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_6096 = _cwc_6108; 
                  }
                  else
                  { 
                    _cwc_6106 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_6096 = _cwc_6106; 
                  }
                }
              }
              else
              { 
                _cwc_6104 = 2; 
                _cwc_6105 = _eq_SxS_( _cwc_6099, _cwc_6104); 
                if (_cwc_6105) 
                { 
                  _cwc_6103 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                  _cwc_6096 = _cwc_6103; 
                }
                else
                { 
                  _cwc_6101 = 3; 
                  _cwc_6102 = _eq_SxS_( _cwc_6099, _cwc_6101); 
                  if (_cwc_6102) 
                  { 
                    _cwc_6100 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_6096 = _cwc_6100; 
                  }
                  else
                  { 
                    _cwc_6098 = UTDScalarB:ArrayArith::sel( idx, array) ; 
                    _cwc_6096 = _cwc_6098; 
                  }
                }
              }
            }
            else
            { 
              _cwc_6125 = ArrayBasics::sel( idx, array) ; 
              _cwc_6096 = _cwc_6125; 
            }
          }
        }
      }
    }
    else
    { 
      _cwc_6096 = _dispatch_error_( 1, bool[*], "UTDScalarB:ArrayArith::sel :: int[*] bool[*] -> bool[*] ", idx, array); 
    }
  }
  return( _cwc_6096); 
}



/****************************************************************************
 * Wrapper function:
 * UTDScalarB:ArrayArith::shape(...) [ wrapper ]
 ****************************************************************************/
/* sticky */
int[.] UTDScalarB:ArrayArith::shape( bool[*] array { ,NN } )
/*
 *  shape :: { bool[*] -> ( int[.]),
               bool[+] -> ( int[.]),
               bool[.] -> ( int[1]),
               bool[2] -> ( int[1]{2}),
               bool[3] -> ( int[1]{3}),
               bool[.,.] -> ( int[2]),
               bool[.,.,.] -> ( int[3])}
 *  dispatching to: ArrayBasics::shape,
 *                  UTDScalarB:ArrayArith::shape,
 *                  UTDScalarB:ArrayArith::shape,
 *                  UTDScalarB:ArrayArith::shape,
 *                  UTDScalarB:ArrayArith::shape,
 *                  UTDScalarB:ArrayArith::shape,
 *                  UTDScalarB:ArrayArith::shape
 */
{ 
  int[.] _cwc_6227 { , NN } ; 
  bool _cwc_6257 { , NN } ; 
  int _cwc_6256 { , NN } ; 
  int[.] _cwc_6255 { , NN } ; 
  int _cwc_6254 { , NN } ; 
  bool _cwc_6253 { , NN } ; 
  int _cwc_6252 { , NN } ; 
  bool _cwc_6251 { , NN } ; 
  bool _cwc_6250 { , NN } ; 
  int{2} _cwc_6249 { , NN } ; 
  int _cwc_6248 { , NN } ; 
  int[1]{0} _cwc_6247 { , NN } ; 
  bool _cwc_6246 { , NN } ; 
  int[1]{2} _cwc_6245 { , NN } ; 
  bool _cwc_6244 { , NN } ; 
  bool _cwc_6243 { , NN } ; 
  int{3} _cwc_6242 { , NN } ; 
  int _cwc_6241 { , NN } ; 
  int[1]{0} _cwc_6240 { , NN } ; 
  bool _cwc_6239 { , NN } ; 
  int[1]{3} _cwc_6238 { , NN } ; 
  int[+] _cwc_6237 { , NN } ; 
  int[1] _cwc_6236 { , NN } ; 
  bool _cwc_6235 { , NN } ; 
  int _cwc_6234 { , NN } ; 
  int[2] _cwc_6233 { , NN } ; 
  bool _cwc_6232 { , NN } ; 
  int _cwc_6231 { , NN } ; 
  int[3] _cwc_6230 { , NN } ; 
  int _cwc_6229 { , NN } ; 
  int[.] _cwc_6228 { , NN } ; 

  _cwc_6254 = _dim_A_( array); 
  _cwc_6256 = 0; 
  _cwc_6257 = _gt_SxS_( _cwc_6254, _cwc_6256); 
  if (_cwc_6257) 
  { 
    _cwc_6229 = _dim_A_( array); 
    _cwc_6252 = 1; 
    _cwc_6253 = _eq_SxS_( _cwc_6229, _cwc_6252); 
    if (_cwc_6253) 
    { 
      _cwc_6237 = _shape_A_( array); 
      _cwc_6246 = true; 
      _cwc_6249 = 2; 
      _cwc_6247 = [ 0 ]; 
      _cwc_6248 = _sel_VxA_( _cwc_6247, _cwc_6237); 
      _cwc_6250 = _eq_SxS_( _cwc_6248, _cwc_6249); 
      _cwc_6251 = _and_SxS_( _cwc_6250, _cwc_6246); 
      if (_cwc_6251) 
      { 
        _cwc_6245 = UTDScalarB:ArrayArith::shape( array) ; 
        _cwc_6227 = _cwc_6245; 
      }
      else
      { 
        _cwc_6239 = true; 
        _cwc_6242 = 3; 
        _cwc_6240 = [ 0 ]; 
        _cwc_6241 = _sel_VxA_( _cwc_6240, _cwc_6237); 
        _cwc_6243 = _eq_SxS_( _cwc_6241, _cwc_6242); 
        _cwc_6244 = _and_SxS_( _cwc_6243, _cwc_6239); 
        if (_cwc_6244) 
        { 
          _cwc_6238 = UTDScalarB:ArrayArith::shape( array) ; 
          _cwc_6227 = _cwc_6238; 
        }
        else
        { 
          _cwc_6236 = UTDScalarB:ArrayArith::shape( array) ; 
          _cwc_6227 = _cwc_6236; 
        }
      }
    }
    else
    { 
      _cwc_6234 = 2; 
      _cwc_6235 = _eq_SxS_( _cwc_6229, _cwc_6234); 
      if (_cwc_6235) 
      { 
        _cwc_6233 = UTDScalarB:ArrayArith::shape( array) ; 
        _cwc_6227 = _cwc_6233; 
      }
      else
      { 
        _cwc_6231 = 3; 
        _cwc_6232 = _eq_SxS_( _cwc_6229, _cwc_6231); 
        if (_cwc_6232) 
        { 
          _cwc_6230 = UTDScalarB:ArrayArith::shape( array) ; 
          _cwc_6227 = _cwc_6230; 
        }
        else
        { 
          _cwc_6228 = UTDScalarB:ArrayArith::shape( array) ; 
          _cwc_6227 = _cwc_6228; 
        }
      }
    }
  }
  else
  { 
    _cwc_6255 = ArrayBasics::shape( array) ; 
    _cwc_6227 = _cwc_6255; 
  }
  return( _cwc_6227); 
}



/****************************************************************************
 * sacprelude_p::*(...) [ body ]
 ****************************************************************************/
inline
int sacprelude_p::*( int a { ,NN } , int b { ,NN } )
/*
 *  * ::  ---
 */
{ 
  int _flat_411__SSA0_1 { , NN } ; 
  int _flat_411 { , NN } ; 

  _flat_411 = _mul_SxS_( a, b); 
  _flat_411__SSA0_1 = _type_conv_( int, _flat_411); 
  return( _flat_411__SSA0_1); 
}



/****************************************************************************
 * sacprelude_p::and(...) [ body ]
 ****************************************************************************/
inline
bool sacprelude_p::and( bool a { ,NN } , bool b { ,NN } )
/*
 *  and ::  ---
 */
{ 
  bool _flat_298__SSA0_1 { , NN } ; 
  bool _flat_298 { , NN } ; 

  _flat_298 = _and_SxS_( a, b); 
  _flat_298__SSA0_1 = _type_conv_( bool, _flat_298); 
  return( _flat_298__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
double{1.0...} ArrayArith::one( double[+] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  double{1.0...} _flat_9__SSA0_1 { , NN } ; 
  double{1.0...} _flat_9 { , NN } ; 

  _flat_9 = 1.0; 
  _flat_9__SSA0_1 = _type_conv_( double, _flat_9); 
  return( _flat_9__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::one(...) [ body ]
 ****************************************************************************/
inline
double{1.0...} ScalarArith::one( double[*] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  double{1.0...} _flat_9__SSA0_1 { , NN } ; 
  double{1.0...} _flat_9 { , NN } ; 

  _flat_9 = 1.0; 
  _flat_9__SSA0_1 = _type_conv_( double, _flat_9); 
  return( _flat_9__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
double{1.0...} ArrayArith::one( double A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  double{1.0...} _flat_9__SSA0_1 { , NN } ; 
  double{1.0...} _flat_9 { , NN } ; 

  _flat_9 = 1.0; 
  _flat_9__SSA0_1 = _type_conv_( double, _flat_9); 
  return( _flat_9__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::zero(...) [ body ]
 ****************************************************************************/
inline
double{0.0...} ArrayArith::zero( double[+] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  double{0.0...} _flat_3__SSA0_1 { , NN } ; 
  double{0.0...} _flat_3 { , NN } ; 

  _flat_3 = 0.0; 
  _flat_3__SSA0_1 = _type_conv_( double, _flat_3); 
  return( _flat_3__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::zero(...) [ body ]
 ****************************************************************************/
inline
double{0.0...} ScalarArith::zero( double[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  double{0.0...} _flat_3__SSA0_1 { , NN } ; 
  double{0.0...} _flat_3 { , NN } ; 

  _flat_3 = 0.0; 
  _flat_3__SSA0_1 = _type_conv_( double, _flat_3); 
  return( _flat_3__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::one(...) [ body ]
 ****************************************************************************/
inline
int{1} ScalarArith::one( int A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  int{1} _flat_6__SSA0_1 { , NN } ; 
  int{1} _flat_6 { , NN } ; 

  _flat_6 = 1; 
  _flat_6__SSA0_1 = _type_conv_( int, _flat_6); 
  return( _flat_6__SSA0_1); 
}



/****************************************************************************
 * ArrayIO:Structures::dim(...) [ body ]
 ****************************************************************************/
inline
int ArrayIO:Structures::dim( char[+] array { ,NN } )
/*
 *  dim ::  ---
 */
{ 
  int _flat_4__SSA0_1 { , NN } ; 
  int _flat_4 { , NN } ; 

  _flat_4 = _dim_A_( array); 
  _flat_4__SSA0_1 = _type_conv_( int, _flat_4); 
  return( _flat_4__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::dim(...) [ body ]
 ****************************************************************************/
inline
int ArrayBasics::dim( char[*] array { ,NN } )
/*
 *  dim ::  ---
 */
{ 
  int _flat_4__SSA0_1 { , NN } ; 
  int _flat_4 { , NN } ; 

  _flat_4 = _dim_A_( array); 
  _flat_4__SSA0_1 = _type_conv_( int, _flat_4); 
  return( _flat_4__SSA0_1); 
}



/****************************************************************************
 * ArrayIO:Structures::shape(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayIO:Structures::shape( char[+] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_10__SSA0_1 { , NN } ; 
  int[.] _flat_10 { , NN } ; 

  _flat_10 = _shape_A_( array); 
  _flat_10__SSA0_1 = _type_conv_( int[.], _flat_10); 
  return( _flat_10__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::shape(...) [ body ]
 ****************************************************************************/
inline
int[.] ArrayBasics::shape( char[*] array { ,NN } )
/*
 *  shape ::  ---
 */
{ 
  int[.] _flat_10__SSA0_1 { , NN } ; 
  int[.] _flat_10 { , NN } ; 

  _flat_10 = _shape_A_( array); 
  _flat_10__SSA0_1 = _type_conv_( int[.], _flat_10); 
  return( _flat_10__SSA0_1); 
}



/****************************************************************************
 * Cond function:
 * Bool::toi__Cond_0(...) [ body ]
 ****************************************************************************/
int Bool::toi__Cond_0( bool b { ,NN } )
/*
 *  toi__Cond_0 ::  ---
 */
{ 
  int res__SSA0_2 { , NN } ; 
  int{0} res__SSA0_1 { , NN } ; 
  int{1} res { , NN } ; 

  if (b) 
  { 
    res = 1; 
  }
  else
  { 
    res__SSA0_1 = 0; 
  }
  res__SSA0_2 = ( b ? res : res__SSA0_1 ); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * ArrayArith::zero(...) [ body ]
 ****************************************************************************/
inline
bool{0} ArrayArith::zero( bool[+] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  bool{0} _flat_5__SSA0_1 { , NN } ; 
  bool{0} _flat_5 { , NN } ; 

  _flat_5 = false; 
  _flat_5__SSA0_1 = _type_conv_( bool, _flat_5); 
  return( _flat_5__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::zero(...) [ body ]
 ****************************************************************************/
inline
bool{0} ScalarArith::zero( bool[*] A { ,NN } )
/*
 *  zero ::  ---
 */
{ 
  bool{0} _flat_5__SSA0_1 { , NN } ; 
  bool{0} _flat_5 { , NN } ; 

  _flat_5 = false; 
  _flat_5__SSA0_1 = _type_conv_( bool, _flat_5); 
  return( _flat_5__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
bool{1} ArrayArith::one( bool[+] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  bool{1} _flat_11__SSA0_1 { , NN } ; 
  bool{1} _flat_11 { , NN } ; 

  _flat_11 = true; 
  _flat_11__SSA0_1 = _type_conv_( bool, _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ScalarArith::one(...) [ body ]
 ****************************************************************************/
inline
bool{1} ScalarArith::one( bool[*] A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  bool{1} _flat_11__SSA0_1 { , NN } ; 
  bool{1} _flat_11 { , NN } ; 

  _flat_11 = true; 
  _flat_11__SSA0_1 = _type_conv_( bool, _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ArrayArith::one(...) [ body ]
 ****************************************************************************/
inline
bool{1} ArrayArith::one( bool A { ,NN } )
/*
 *  one ::  ---
 */
{ 
  bool{1} _flat_11__SSA0_1 { , NN } ; 
  bool{1} _flat_11 { , NN } ; 

  _flat_11 = true; 
  _flat_11__SSA0_1 = _type_conv_( bool, _flat_11); 
  return( _flat_11__SSA0_1); 
}



/****************************************************************************
 * ArrayBasics::sel(...) [ body ]
 ****************************************************************************/
inline
bool[*] ArrayBasics::sel( int[1] idx { ,NN } , bool[*] array { ,NN } )
/*
 *  sel ::  ---
 */
{ 
  bool[*] res { , NN } ; 
  bool _flat_71 { , NN } ; 
  int[.] new_idx { , NN } ; 
  int[.] iv { , NN } ; 
  bool{0} _flat_68 { , NN } ; 
  int[.] _flat_69 { , NN } ; 
  int{0} _flat_70 { , NN } ; 
  int[.] new_shape { , NN } ; 
  int{1} _flat_63 { , NN } ; 
  int[1]{0} _flat_64 { , NN } ; 
  int{0} _flat_65 { , NN } ; 
  int[1]{1} _flat_66 { , NN } ; 
  int[.] _flat_67 { , NN } ; 

  _flat_67 = _shape_A_( array); 
  _flat_66 = _shape_A_( idx); 
  _flat_65 = 0; 
  _flat_64 = [ _flat_65 ]; 
  _flat_63 = _sel_VxA_( _flat_64, _flat_66); 
  new_shape = _drop_SxV_( _flat_63, _flat_67); 
  _flat_70 = 0; 
  _flat_69 = _mul_SxV_( _flat_70, new_shape); 
  _flat_68 = false; 
  res = with {
        /* Partn */
        (_flat_69 <= iv < new_shape)
        { 
          new_idx = _cat_VxV_( idx, iv); 
          _flat_71 = _sel_VxA_( new_idx, array); 
        } : _flat_71 ; 
         } :
      genarray( new_shape, _flat_68); 
  return( res); 
}



/****************************************************************************
 * Cond function:
 * Bool::to_bool__Cond_6(...) [ body ]
 ****************************************************************************/
bool Bool::to_bool__Cond_6( bool _flat_8 { ,NN } , int i { ,NN } )
/*
 *  to_bool__Cond_6 ::  ---
 */
{ 
  bool res__SSA0_2 { , NN } ; 
  bool{0} res__SSA0_1 { , NN } ; 
  bool{1} res { , NN } ; 
  int{0} _flat_11 { , NN } ; 
  bool _flat_10 { , NN } ; 

  if (_flat_8) 
  { 
    res = true; 
  }
  else
  { 
    _flat_11 = 0; 
    _flat_10 = _eq_SxS_( _flat_11, i); 
    res__SSA0_1 = Bool::_dup_50_to_bool__Cond_5( _flat_10) ; 
  }
  res__SSA0_2 = ( _flat_8 ? res : res__SSA0_1 ); 
  return( res__SSA0_2); 
}



/****************************************************************************
 * Cond function:
 * Bool::_dup_50_to_bool__Cond_5(...) [ body ]
 ****************************************************************************/
bool{0} Bool::_dup_50_to_bool__Cond_5( bool _flat_10 { ,NN } )
/*
 *  _dup_50_to_bool__Cond_5 ::  ---
 */
{ 
  bool{0} res__SSA0_2 { , NN } ; 
  bool{0} res__SSA0_1 { , NN } ; 
  bool{0} res { , NN } ; 

  if (_flat_10) 
  { 
    res = false; 
  }
  else
  { 
    res__SSA0_1 = false; 
  }
  res__SSA0_2 = ( _flat_10 ? res : res__SSA0_1 ); 
  return( res__SSA0_2); 
}


/*-----------------------------------------------*/

use Array: all;
use StdIO : all;
use Numerical : all;
use CommandLine: all;
use String: {to_string,tochar,sscanf};
use ArrayFormat: all;
use Bits: all;

/* Compiled by APEX Version: /home/apex/apex3/wss/sac3014.dws2013-07-29 16:24:22.964 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] mpyIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : mpyIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : plusIII(xel,yel);
  } : genarray(shape(y), 0);
  return(z);
}


inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[*] dropIII(int[.] x, int[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline char[*] quadXCC(char[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline char[.] comaCCC(char[.] x, char[.] y)
{ /* VxV catenate first or last axis */
 return(toC(x)++toC(y));
}

inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameIIB(int x, int y)
{ /* Scalar match scalar */
  z = eqIIB(toI(x), toI(y));
 return(z);
}



inline char[*] indr(char[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[*] indr(int[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}




inline int[*] indr(int[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),0);
 z = with {
        (. <= iv <= .)
                : X[[I[iv]]];
        } : genarray(shape(I), defcell);
 return(z);
}





inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[*] jotdotplusIII(int [+] x, int [+] y)
{ /* AxA outer product */
 cell = genarray(shape(y), 0);
 z = with {
        (. <= iv <= .) {
         xitem = toI(x[iv]);
        } : plusIII(xitem, toI(y));
        } : genarray(shape(x), cell);
 return(z);
}

inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
         sy = shape(y);
         z = with {
             ( . <= iv <= .) {
                      xel = x[iv];
                   yel = y[iv];
           } : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
     ( . <= iv <= .) {
              yel = toI(y[iv]);
                    } : eqIIB(xel,yel);
  } : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
  ( . <= iv <= .) {
              xel = x[iv];
   } : eqIIB(xel,y);
  } : genarray( shape(x), false);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] okXBC(bool k ,int QUADio)
{ 
/*
 ?
*/
A_22=rhoICC([2, 3],['U','G','H','O','K',' ']);
 A_21= ABC(toi(k)-QUADio,shape(A_22)[0]);
A_24=A_22[[A_21]];
r_0=( A_24);
 return(r_0);
}

inline bool[.] testirXXB(int QUADio,int QUADpp,int QUADpw)
{ 
/*
 ?
*/
A_138=iotaXII( 6,QUADio);
 A_139=rhoIII([2, 3],A_138);
 M2_0=( A_139);
 A_144=M2_0;
 A_146=sameIIB(M2_0,A_144);
 k_0=( A_146);
 r_0=( A_146);
 A_150=okXBC( k_0,QUADio);
 A_151=comaCCC(['Z','[',';',']',':',' '],A_150);
 A_154=quadXCC( A_151,QUADpp,QUADpw);
 A_156=iotaXII( 4,QUADio);
 v_0=( A_156);
 A_160=v_0;
 A_162=sameIIB(v_0,A_160);
 k_1=( A_162);
 A_164=comaBBB(r_0,A_162);
 r_1=( A_164);
 A_167=okXBC( k_1,QUADio);
 A_168=comaCCC(['V','[',']',':',' '],A_167);
 A_171=quadXCC( A_168,QUADpp,QUADpw);
 A_172= ABC(toi([3, 2, 1, 0])-QUADio,shape(v_0)[0]);
A_174=indr(v_0,A_172);
 A_175=rotrXII( v_0);
 A_177=sameIIB(A_175,A_174);
 k_2=( A_177);
 A_179=comaBBB(r_1,A_177);
 r_2=( A_179);
 A_182=okXBC( k_2,QUADio);
 A_183=comaCCC(['V','[','3',' ','2',' ','1',' ','0',']',':',' '],A_182);
 A_186=quadXCC( A_183,QUADpp,QUADpw);
 A_190=M2_0;
 A_192=sameIIB(M2_0,A_190);
 k_3=( A_192);
 A_194=comaBBB(r_2,A_192);
 r_3=( A_194);
 A_197=okXBC( k_3,QUADio);
 A_198=comaCCC(['M','2','[',';',']',':'],A_197);
 A_201=quadXCC( A_198,QUADpp,QUADpw);
 A_203= ABC(toi(false)-QUADio,shape(M2_0)[0]);
A_205=M2_0[[A_203]];
 A_207=sameIIB(A_205,[0, 1, 2]);
 k_4=( A_207);
 A_209=comaBBB(r_3,A_207);
 r_4=( A_209);
 A_212=okXBC( k_4,QUADio);
 A_213=comaCCC(['M','2','[','0',';',']',':',' '],A_212);
 A_216=quadXCC( A_213,QUADpp,QUADpw);
 A_217= ABC(toi(true)-QUADio,shape(M2_0)[1]);
A_220=indrfr(1,M2_0,A_217);
 A_222=sameIIB(A_220,[1, 4]);
 k_5=( A_222);
 A_224=comaBBB(r_4,A_222);
 r_5=( A_224);
 A_227=okXBC( k_5,QUADio);
 A_228=comaCCC(['M','2','[',';','1',']',':',' '],A_227);
 A_231=quadXCC( A_228,QUADpp,QUADpw);
 A_232=rhoIII([2, 3],[3, 4, 5, 0, 1, 2]);
 A_234= ABC(toi([true,false])-QUADio,shape(M2_0)[0]);
A_236=indr(M2_0,A_234);
 A_238=sameIIB(A_236,A_232);
 k_6=( A_238);
 A_240=comaBBB(r_5,A_238);
 r_6=( A_240);
 A_243=okXBC( k_6,QUADio);
 A_244=comaCCC(['M','2','[','1',' ','0',';',']',':',' '],A_243);
 A_247=quadXCC( A_244,QUADpp,QUADpw);
 A_248=rhoIII([2, 3],[2, 0, 1, 5, 3, 4]);
 A_249= ABC(toi([2, 0, 1])-QUADio,shape(M2_0)[1]);
A_252=indrfr(1,M2_0,A_249);
 A_254=sameIIB(A_252,A_248);
 k_7=( A_254);
 A_256=comaBBB(r_6,A_254);
 r_7=( A_256);
 A_259=okXBC( k_7,QUADio);
 A_260=comaCCC(['M','2','[',';','2',' ','0',' ','1',']',':',' '],A_259);
 A_263=quadXCC( A_260,QUADpp,QUADpw);
 A_265= ABC(toi(false)-QUADio,shape(M2_0)[0]);
A_264= ABC(toi(2)-QUADio,shape(M2_0)[1]);
A_267=M2_0[[A_265,A_264]];
 A_269=sameIIB(A_267,2);
 k_8=( A_269);
 A_271=comaBBB(r_7,A_269);
 r_8=( A_271);
 A_274=okXBC( k_8,QUADio);
 A_275=comaCCC(['M','2','[','0',';','2',']',':',' '],A_274);
 A_278=quadXCC( A_275,QUADpp,QUADpw);
 A_280= ABC(toi([true,false])-QUADio,shape(M2_0)[0]);
A_279= ABC(toi(2)-QUADio,shape(M2_0)[1]);
A_282=indr(indrfr(1,M2_0,A_279),A_280);
 A_284=sameIIB(A_282,[5, 2]);
 k_9=( A_284);
 A_286=comaBBB(r_8,A_284);
 r_9=( A_286);
 A_289=okXBC( k_9,QUADio);
 A_290=comaCCC(['M','2','[','1',' ','0',';','2',']',':',' '],A_289);
 A_293=quadXCC( A_290,QUADpp,QUADpw);
 A_295= ABC(toi(true)-QUADio,shape(M2_0)[0]);
A_294= ABC(toi([2, 0])-QUADio,shape(M2_0)[1]);
A_297=indr(indrfr(1,M2_0,A_294),A_295);
 A_299=sameIIB(A_297,[5, 3]);
 k_10=( A_299);
 A_301=comaBBB(r_9,A_299);
 r_10=( A_301);
 A_304=okXBC( k_10,QUADio);
 A_305=comaCCC(['M','2','[','1',';','2',' ','0',']',':'],A_304);
 A_308=quadXCC( A_305,QUADpp,QUADpw);
 A_309=rhoIII([2, 2],[5, 4, 2, 1]);
 A_311= ABC(toi([true,false])-QUADio,shape(M2_0)[0]);
A_310= ABC(toi([2, 1])-QUADio,shape(M2_0)[1]);
A_313=indr(indrfr(1,M2_0,A_310),A_311);
 A_315=sameIIB(A_313,A_309);
 k_11=( A_315);
 A_317=comaBBB(r_10,A_315);
 r_11=( A_317);
 A_320=okXBC( k_11,QUADio);
 A_321=comaCCC(['M','2','[','1',' ','0',';','2',' ','1',']',':',' '],A_320);
 A_324=quadXCC( A_321,QUADpp,QUADpw);
 A_326=iotaXII( 120,QUADio);
 A_327=rhoIII([3, 4, 5],A_326);
 M3_0=( A_327);
 A_330=iotaXII( 5,QUADio);
 A_331=jotdotplusIII([10, 30, 50],A_330);
 A_339= ABC(toi(2)-QUADio,shape(M3_0)[1]);
A_342=indrfr(1,M3_0,A_339);
 A_344=sameIIB(A_342,A_331);
 k_12=( A_344);
 A_346=comaBBB(r_11,A_344);
 r_12=( A_346);
 A_349=okXBC( k_12,QUADio);
 A_350=comaCCC(['M','3','[',';','2',';',']',':',' '],A_349);
 A_353=quadXCC( A_350,QUADpp,QUADpw);
 A_356= ABC(toi(false)-QUADio,shape(M3_0)[0]);
A_355= ABC(toi(true)-QUADio,shape(M3_0)[1]);
A_354= ABC(toi(2)-QUADio,shape(M3_0)[2]);
A_358=M3_0[[A_356,A_355,A_354]];
 A_360=sameIIB(A_358,7);
 k_13=( A_360);
 A_362=comaBBB(r_12,A_360);
 r_13=( A_362);
 A_365=okXBC( k_13,QUADio);
 A_366=comaCCC(['M','3','[','0',';','1',';','2',']',':',' '],A_365);
 A_369=quadXCC( A_366,QUADpp,QUADpw);
 A_372= ABC(toi(false)-QUADio,shape(M3_0)[0]);
A_371= ABC(toi(true)-QUADio,shape(M3_0)[1]);
A_374=M3_0[[A_372,A_371]];
 A_376=sameIIB(A_374,[5, 6, 7, 8, 9]);
 k_14=( A_376);
 A_378=comaBBB(r_13,A_376);
 r_14=( A_378);
 A_381=okXBC( k_14,QUADio);
 A_382=comaCCC(['M','3','[','0',';','1',';',']',':',' '],A_381);
 A_385=quadXCC( A_382,QUADpp,QUADpw);
 A_387= ABC(toi(false)-QUADio,shape(M3_0)[1]);
A_386= ABC(toi(true)-QUADio,shape(M3_0)[2]);
A_390=indrfr(1,indrfr(2,M3_0,A_386),A_387);
 A_392=sameIIB(A_390,[1, 21, 41]);
 k_15=( A_392);
 A_394=comaBBB(r_14,A_392);
 r_15=( A_394);
 A_397=okXBC( k_15,QUADio);
 A_398=comaCCC(['M','3','[',';','0',';','1',']',':',' '],A_397);
 A_401=quadXCC( A_398,QUADpp,QUADpw);
 A_404= ABC(toi([2, 1])-QUADio,shape(M3_0)[0]);
A_403= ABC(toi(false)-QUADio,shape(M3_0)[1]);
A_402= ABC(toi(3)-QUADio,shape(M3_0)[2]);
A_406=indr(indrfr(1,indrfr(2,M3_0,A_402),A_403),A_404);
 A_408=sameIIB(A_406,[43, 23]);
 k_16=( A_408);
 A_410=comaBBB(r_15,A_408);
 r_16=( A_410);
 A_413=okXBC( k_16,QUADio);
 A_414=comaCCC(['M','3','[','2',' ','1',';','4',';','3',']',':',' '],A_413);
 A_417=quadXCC( A_414,QUADpp,QUADpw);
 A_419=iotaXII( 5,QUADio);
 A_421=iotaXII( 4,QUADio);
 /* dsf scalar(s) */
A_422=mpyIII(5,A_421);
 /* dsf scalar(s) */
A_423=plusIII(40,A_422);
 A_424=jotdotplusIII(A_423,A_419);
 A_433= ABC(toi(2)-QUADio,shape(M3_0)[0]);
A_435=M3_0[[A_433]];
 A_437=sameIIB(A_435,A_424);
 k_17=( A_437);
 A_439=comaBBB(r_16,A_437);
 r_17=( A_439);
 A_442=okXBC( k_17,QUADio);
 A_443=comaCCC(['M','3','[','2',';',';',']',':',' '],A_442);
 A_446=quadXCC( A_443,QUADpp,QUADpw);
 A_447=jotdotplusIII([0, 20, 40],[2, 7, 12, 17]);
 A_454= ABC(toi(2)-QUADio,shape(M3_0)[2]);
A_458=indrfr(2,M3_0,A_454);
 A_460=sameIIB(A_458,A_447);
 k_18=( A_460);
 A_462=comaBBB(r_17,A_460);
 r_18=( A_462);
 A_465=okXBC( k_18,QUADio);
 A_466=comaCCC(['M','3','[',';',';','2',']',':',' '],A_465);
 A_469=quadXCC( A_466,QUADpp,QUADpw);
 A_470=dropIII([0, 0, -1],M3_0);
 A_471=dropIII([0, 0, 2],A_470);
 A_472= ABC(toi([2, 3])-QUADio,shape(M3_0)[2]);
A_476=indrfr(2,M3_0,A_472);
 A_478=sameIIB(A_476,A_471);
 k_19=( A_478);
 A_480=comaBBB(r_18,A_478);
 r_19=( A_480);
 A_483=iotaXII( 5,QUADio);
 A_484=jotdotplusIII([0, -5],A_483);
 A_491=jotdotplusIII([10, 30, 50],A_484);
 z_0=( A_491);
 A_500= ABC(toi([2, 1])-QUADio,shape(M3_0)[1]);
A_503=indrfr(1,M3_0,A_500);
 A_505=sameIIB(A_503,z_0);
 k_20=( A_505);
 A_507=comaBBB(r_19,A_505);
 r_20=( A_507);
 A_510=iotaXII( 20,QUADio);
 /* dsf scalar(s) */
A_511=plusIII(20,A_510);
 A_513=iotaXII( 20,QUADio);
 /* dsf scalar(s) */
A_514=plusIII(40,A_513);
 A_515=comaIII(A_514,A_511);
 A_516=rhoIII([2, 4, 5],A_515);
 A_519= ABC(toi([2, 1])-QUADio,shape(M3_0)[0]);
A_521=indr(M3_0,A_519);
 A_523=sameIIB(A_521,A_516);
 k_21=( A_523);
 A_525=comaBBB(r_20,A_523);
 r_21=( A_525);
 A_528=okXBC( k_21,QUADio);
 A_529=comaCCC(['M','3','[','2',' ','1',';',';',']',':',' '],A_528);
 A_532=quadXCC( A_529,QUADpp,QUADpw);
 return(r_21);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_54=testirXXB( QUADio_1,QUADpp_1,QUADpw_1);
r_0=( A_54);
 A_58=quadXBB( r_0,QUADpp_1,QUADpw_1);
 A_59=andslXBBQUICKSTOP( r_0);
 /* dsf scalar(s) */
A_63=barBBI(true,A_59);
 r_1=( A_63);
 A_67=quadXII( r_1,QUADpp_1,QUADpw_1);
 return(r_1);
}


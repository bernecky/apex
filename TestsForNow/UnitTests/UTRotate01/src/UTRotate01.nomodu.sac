use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// Compiled by APEX Version: CLEAR WS 2021-04-21 12:49:39.748
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline double[+] plusDID(double x, int[+] y)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
	( . <= iv <= .) {
        	yel = toD(y[iv]);
      		} : plusDDD(xel,yel);
	} : genarray(shape(y), 0.0d);
  return(z);
}


inline bool[.] comaXBB(bool y)
{ /* Ravel of scalar */
  return([y]);
}

inline int[.] comaXII(int y)
{ /* Ravel of scalar */
  return([y]);
}

inline double[.] comaXDD(double y)
{ /* Ravel of scalar */
  return([y]);
}

inline char[.] comaXCC(char y)
{ /* Ravel of scalar */
  return([y]);
}

inline int rotrBII(bool x, int y)
{ /* Scalar rotate scalar, any axis */
 return(y);
}

inline int rotrIII(int x, int y)
{ /* Scalar rotate scalar, any axis */
 return(y);
}

inline int rot1III(int x, int y)
{ /* Scalar rotate scalar, any axis */
 return(y);
}

inline char rotrICC(int x, char y)
{ /* Scalar rotate scalar, any axis */
 return(y);
}

inline char rot1ICC(int x, char y)
{ /* Scalar rotate scalar, any axis */
 return(y);
}

inline bool rotrIBB(int x, bool y)
{ /* Scalar rotate scalar, any axis */
 return(y);
}

inline bool rot1IBB(int x, bool y)
{ /* Scalar rotate scalar, any axis */
 return(y);
}

inline double rotrIDD(int x, double y)
{ /* Scalar rotate scalar, any axis */
 return(y);
}

inline double rot1IDD(int x, double y)
{ /* Scalar rotate scalar, any axis */
 return(y);
}

inline bool[.] rotrIBB(int x, bool[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline bool[.] rot1IBB(int x, bool[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline int[.] rotrBII(bool x, int[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline int[.] rot1III(int x, int[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline double[.] rotrIDD(int x, double[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline double[.] rot1IDD(int x, double[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline char[.] rotrICC(int x, char[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline char[.] rot1ICC(int x, char[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline int[.] rotrIII(int x, int[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline double[.] rot1BDD(bool x, double[.] y)
{ /* Scalar rotate first/last axis vector */
 ix = toi(x);
 rows = shape(y)[0];
 k = VectorRotateAmount(ix,rows); /* Normalize rotate count */
 z = drop( [k], y) ++ take( [k], y);
 return(z);
}


inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline bool sameIIB(int x, int y)
{ /* Scalar match scalar */
  z = eqIIB(toI(x), toI(y));
 return(z);
}



inline bool sameCCB(char x, char y)
{ /* Scalar match scalar */
  z = eqCCB(toC(x), toC(y));
 return(z);
}



inline bool sameBBB(bool x, bool y)
{ /* Scalar match scalar */
  z = eqBBB(toB(x), toB(y));
 return(z);
}



inline bool sameDDB(double x, double y,double QUADct)
{ /* Scalar match scalar */
  z = eqDDB(toD(x), toD(y), QUADct);
 return(z);
}



inline bool sameBBB(bool[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqBBB(toB( x),  toB( y)))));
  return(z);
}



inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameDDB(double[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline bool sameCCB(char[+] x, char[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqCCB(toC( x),  toC( y)))));
  return(z);
}



inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline double plusDDD(double x, double y)
{ return(DtoD(x)+DtoD(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool eqCCB(char x, char y)
{ /* A=B on non-doubles */
 return(CtoC(x) == CtoC(y));
}

inline bool eqBBB(bool x, bool y)
{ /* A=B on non-doubles */
 return(BtoB(x) == BtoB(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqDDB(double[+] x, double[+] y,double QUADct)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqDDB(xel,yel, QUADct);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqCCB(char[+] x, char[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqCCB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline int VectorRotateAmount(int x, int y)
{ /* Normalize x rotate for array of shape y on selected axis */
 /* normalize rotation count */

if ((0==x) || (0==y))
  z = 0;
else if (x>0)
        z = _aplmod_SxS_(x,y);
     else
        z = y - _aplmod_SxS_(abs(x),y);
 return(z);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline bool[+] eqBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
	( . <= iv <= .) {
        	yel = toB(y[iv]);
      		} : eqBBB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqBBB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : eqIIB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqIIB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqDDB(double x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
	( . <= iv <= .) {
        	yel = toD(y[iv]);
      		} : eqDDB(xel,yel, QUADct);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqDDB(double[+] x, double y,double QUADct)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqDDB(xel,y, QUADct);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqCCB(char x, char[+] y)
{ /* SxA scalar function */
  xel = toC(x);
  z = with {
	( . <= iv <= .) {
        	yel = toC(y[iv]);
      		} : eqCCB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqCCB(char[+] x, char y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqCCB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] comaXCC(char[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline bool[.] UTRotateXXB(int QUADio,double QUADct)
{ 
/*
 ?
*/
A_66=rotrBII(false,5);
 A_68=sameIIB(5,A_66);
 r_0=( A_68);
 A_70=rotrIII(23,5);
 A_72=sameIIB(5,A_70);
 A_73=comaBBB(r_0,A_72);
 r_1=( A_73);
 A_75=rot1III(-42,5);
 A_77=sameIIB(5,A_75);
 A_78=comaBBB(r_1,A_77);
 r_2=( A_78);
 A_80=rotrICC(2,'x');
 A_82=sameCCB('x',A_80);
 A_83=comaBBB(r_2,A_82);
 r_3=( A_83);
 A_85=rot1ICC(-2,'x');
 A_87=sameCCB('x',A_85);
 A_88=comaBBB(r_3,A_87);
 r_4=( A_88);
 A_90=rotrIBB(2,false);
 A_92=sameBBB(false,A_90);
 A_93=comaBBB(r_4,A_92);
 r_5=( A_93);
 A_95=rot1IBB(-33,false);
 A_97=sameBBB(false,A_95);
 A_98=comaBBB(r_5,A_97);
 r_6=( A_98);
 A_100=rotrIDD(2,0.5);
 A_102=sameDDB(0.5,A_100,QUADct);
 A_103=comaBBB(r_6,A_102);
 r_7=( A_103);
 A_105=rot1IDD(-33,0.5);
 A_107=sameDDB(0.5,A_105,QUADct);
 A_108=comaBBB(r_7,A_107);
 r_8=( A_108);
 A_110=comaXBB( true);
 A_111=rotrIBB(2,A_110);
 A_112=comaXBB( true);
 A_114=sameBBB(A_112,A_111);
 A_115=comaBBB(r_8,A_114);
 r_9=( A_115);
 A_117=comaXBB( true);
 A_118=rot1IBB(-33,A_117);
 A_119=comaXBB( true);
 A_121=sameBBB(A_119,A_118);
 A_122=comaBBB(r_9,A_121);
 r_10=( A_122);
 A_124=comaXII( 2);
 A_125=rotrBII(false,A_124);
 A_126=comaXII( 2);
 A_128=sameIIB(A_126,A_125);
 A_129=comaBBB(r_10,A_128);
 r_11=( A_129);
 A_131=comaXII( 2);
 A_132=rot1III(33,A_131);
 A_133=comaXII( 2);
 A_135=sameIIB(A_133,A_132);
 A_136=comaBBB(r_11,A_135);
 r_12=( A_136);
 A_138=comaXDD( 2.5);
 A_139=rotrIDD(23,A_138);
 A_140=comaXDD( 2.5);
 A_142=sameDDB(A_140,A_139,QUADct);
 A_143=comaBBB(r_12,A_142);
 r_13=( A_143);
 A_145=comaXDD( 2.5);
 A_146=rot1IDD(-333,A_145);
 A_147=comaXDD( 2.5);
 A_149=sameDDB(A_147,A_146,QUADct);
 A_150=comaBBB(r_13,A_149);
 r_14=( A_150);
 A_152=comaXCC( 'x');
 A_153=rotrICC(12,A_152);
 A_154=comaXCC( 'x');
 A_156=sameCCB(A_154,A_153);
 A_157=comaBBB(r_14,A_156);
 r_15=( A_157);
 A_159=comaXCC( 'x');
 A_160=rot1ICC(-10,A_159);
 A_161=comaXCC( 'x');
 A_163=sameCCB(A_161,A_160);
 A_164=comaBBB(r_15,A_163);
 r_16=( A_164);
 A_166=rotrIBB(2,[false,true,false,false]);
 A_168=sameBBB([false,false,false,true],A_166);
A_169=comaBBB(r_16,A_168);
 r_17=( A_169);
 A_171=rot1IBB(-4,[false,true,false,false]);
 A_173=sameBBB([false,true,false,false],A_171);
A_174=comaBBB(r_17,A_173);
 r_18=( A_174);
 A_177=iotaXII( 5,QUADio);
 A_178=rotrIII(-20,A_177);
 A_179=rotrIII(10,A_178);
 A_181=iotaXII( 5,QUADio);
 A_183=sameIIB(A_181,A_179);
 A_184=comaBBB(r_18,A_183);
 r_19=( A_184);
 A_187=iotaXII( 5,QUADio);
 A_188=rot1III(30,A_187);
 A_190=iotaXII( 5,QUADio);
 A_192=sameIIB(A_190,A_188);
 A_193=comaBBB(r_19,A_192);
 r_20=( A_193);
 A_196=iotaXII( 20,QUADio);
 // dsf scalar(s)
A_197=plusDID(0.5,A_196);
 A_198=rotrIDD(-40,A_197);
 A_200=iotaXII( 20,QUADio);
 // dsf scalar(s)
A_201=plusDID(0.5,A_200);
 A_203=sameDDB(A_201,A_198,QUADct);
 A_204=comaBBB(r_20,A_203);
 r_21=( A_204);
 A_207=iotaXII( 20,QUADio);
 // dsf scalar(s)
A_208=plusDID(0.5,A_207);
 A_209=rot1BDD(false,A_208);
 A_211=iotaXII( 20,QUADio);
 // dsf scalar(s)
A_212=plusDID(0.5,A_211);
 A_214=sameDDB(A_212,A_209,QUADct);
 A_215=comaBBB(r_21,A_214);
 r_22=( A_215);
 A_217=rotrICC(5,['a','b','c','d','e']);
 A_219=sameCCB(['a','b','c','d','e'],A_217);
 A_220=comaBBB(r_22,A_219);
 r_23=( A_220);
 A_222=rot1ICC(-5,['a','b','c','d','e']);
 A_224=sameCCB(['a','b','c','d','e'],A_222);
 A_225=comaBBB(r_23,A_224);
 r_24=( A_225);
 return(r_24);
}

int main()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 A_38=UTRotateXXB( QUADio_0,QUADct_0);
 r_0=( A_38);
 A_42=quadXBB( r_0,QUADpp_0,QUADpw_0);
 A_43=andslXBBQUICKSTOP( r_0);
 // dsf scalar(s)
A_47=barBBI(true,A_43);
r_1=( A_47);
 A_51=quadXII( A_47,QUADpp_0,QUADpw_0);
 return(r_1);
}


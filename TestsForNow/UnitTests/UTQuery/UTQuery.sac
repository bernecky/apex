module UTQuery;

use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

/* Compiled by APEX Version: CLEAR WS 2021-02-24 18:57:43.876 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


export all;

inline int minXDI(double y,double QUADct)
{ return(DFLOOR(y,QUADct));
}



inline int minXII(int y)
{ return(y);
}

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline int starIII(int x, int y)
{  /* number to integer power */
  z = ItoI( 1);
  for( i=0; i<ItoI( y); i++) {
    z = z * ItoI(x);
  }
  return( z);
}

inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline int modIII(int x, int y)
{ /* SxS residue (aka modulo) */
  /* (x residue y) <-->   y-x times floor y divide x + 0 = x  */
  /* See model residueI in workspace UTDScalarI.dws */
  x = ItoI(x);
  y = ItoI(y);
  if( 0 != x) {
    q = y / x;
    z = y - ( x * q);
  } else {
    z = y;
  }

  if( z != 0) {
    if( mpyXII( x) != mpyXII( y)) {
      z = z + x;
    }
  }
 return(z);
}


inline double divIID(int x, int y)
{ dx = ItoD(x);
  dy = ItoD(y);
  z = (dx == dy) ? 1.0  : dx/dy;
  return(z);
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline int barIII(int x, int y)
{ return(ItoI(x)-ItoI(y));
}

inline int barIBI(int x, bool y)
{ return(ItoI(x)-BtoI(y));
}

inline int plusBBI(bool x, bool y)
{ return(BtoI(x)+BtoI(y));
}

inline int[+] plusBII(bool x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : plusIII(xel,yel);
	} : genarray(shape(y), 0);
  return(z);
}


inline int[+] barIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : barIII(xel,yel);
	} : genarray(shape(y), 0);
  return(z);
}


inline int[.] comaXII(int[.] y)
{ /* Ravel of vector is NOP */
        return(y);
}


inline int[.] comaXII(int y)
{ /* Ravel of scalar */
  return([y]);
}

inline int[.] rhoIII(int x, int y)
{ // [Scalar reshape scalar]
  z = genarray( [toi(x)],y);
  return(z);
}

inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline int[.] takeIII(int x, int[.] y)
{ /* Scalar take vector */
  return(take([toi(x)], y));
}

inline int[.]  rhoXII(int[+] y)
{ /* Shape of non-scalar */
 return(shape(y));
}

inline int[.] iotaXII(int[1] y, int QUADio)
{ /* Index generator on 1-element vector */
 /* HELP! Needs length error check */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y[[0]]));
  return( z);
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline int[+], int querXII(int[+] y, int QUADio, int QUADrl)
{ /* Monadic query (roll) - non=scalar */
 zxrho = prod(shape(y));
 ravely = reshape([zxrho], y);
 inty = toi(y);
 if (any(inty <= 0)) print(tochar("roll domain error"));
 /* The following presumes ordering, so we use FOR loop. Sorry */
 z = genarray([zxrho], -1);
 for (i=0; i<zxrho; i++) {
        QUADrl = Lehmer(QUADrl);
        val = (tod(QUADrl) * tod(ravely[[i]])) / tod(2147483647);
        z[[i]] =  QUADio + toi(val);
 }
 z = reshape(shape(y), z);
 return(z, QUADrl);
}



inline int[.], int querIII(int x, int y, int QUADio, int QUADrl)
{ /* Dyadic query (deal) - scalar */
  /* This allocates an array of shape y. If this
   * causes you memory grief, use the algorithm in workspace 42 query,
   * or use smaller y!
   */
 intx = toi(x);
 inty = toi(y);
 shpz = toi(x);
 z = iota (inty);

 for( i=0; i<intx; i++) {
        /* Interchange z[i] with z[i + ? y - i] */
        rand, QUADrl = querXII(inty -i, 0, QUADrl);
        c = i + rand;
        if ( c < shpz) {
                tmp    = z[[c]];
                z[[c]] = z[[i]];
                z[[i]] = tmp;
        }
 }
 z = take([intx], z);
 return(z + QUADio, QUADrl);
}


inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[0] rhoXII(int y)
{ /* Shape of scalar */
 return(shape(y));
}

inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool[.] y)
{ /* VxV catenate first or last axis */
 return(toB(x)++toB(y));
}

inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline int[*] indr(int[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[+] inds0(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline int mpyslXIIQUICKSTOP(int[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : ItoI(y[iv]);
        } : foldfix( mpyIII, ItoI(1), ItoI(0));
  return(z);
}


inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int mpyXII(int y)
{ /* signum int/double */
   if( toI(0) == y) {
    z = 0;
  } else {
    if( toI(0) < y) {
      z = 1;
    } else {
      z = -1;
    }
  }
  return(z);
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline int, int querXII(int y, int QUADio, int QUADrl)
{ /* Monadic query (roll) -  scalar */
 inty = toi(y);
 if (inty <= 0) print(tochar("roll domain error"));
 QUADrl = Lehmer(QUADrl);
 z = (tod(QUADrl) * tod(inty)) / tod(2147483647);
 return(toi(z) + QUADio, QUADrl);
}



inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int DFLOOR(double y, double QUADct)
{ /* Fuzzy floor */
  /* Definition taken from SHARP APL Refman May 1991, p.6-23
   * floor:  n <- (signum y) times nofuzzfloor 0.5+abs y)
   *         z <- n-(QUADct times 1 max abs y)<(n-y)
   * If you want a double result,  write: "y - 1| y".
   */
   n = tod(floor(0.5+fabs(y)));
   if (y < 0.0)
        n = -n;
   else if (0.0 == y)
        n = 0.0;
   range = fabs(y);
   if (1.0 > range)
        range = 1.0;
   fuzzlim = QUADct*range;
   ny = n-y;
   if (fuzzlim < ny)
        z = n - 1.0;
   else
        z = n;
   return(toi(z));
}

inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline int Lehmer(int qrl)
{ /* Lehmer's random number generator
   * CACM 1966-06, p. 432
   */
  val = tod(qrl)*16807.0;
  z = toi(sacmod(val, 2147483647.0));
 return(z);
}


inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : eqIIB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqIIB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline double sacmod(double x, double y)
{ /* SAC _mod_ for floats */
 if ( 0.0 == y) {
        t = 1.0;
 } else {
        t = y;
 }
 t2 = floor(x/t);
 z = x - (y*t2);
 return(z);
}

inline int STSCfloorXDI(double y ,double QUADct)
{ 
/*
 ?
*/
A_16=minXDI( y,QUADct);
r_0=( A_16);
 return(r_0);
}

inline int lehmerXXI(int QUADRL)
{ 
/*
 ?
*/
/* dsf scalar(s) */
A_21=mpyIII(16807,QUADRL);
/* dsf scalar(s) */
A_22=starIII(2,31);
 /* dsf scalar(s) */
A_23=plusIII(-1,A_22);
 /* dsf scalar(s) */
A_25=modIII(A_23,A_21);
 A_26=STSCfloorCLONE9XII( A_25);
 QUADRL_0=( A_26);
 r_0=( A_26);
 return(r_0);
}

inline int rollScalarXII(int y ,int QUADRL,double QUADct,int QUADio)
{ 
/*
 ?
*/
A_22=lehmerXXI( QUADRL);
 r_0=( A_22);
 /* dsf scalar(s) */
A_24=starIII(2,31);
 /* dsf scalar(s) */
A_25=plusIII(-1,A_24);
 /* dsf scalar(s) */
A_26=mpyIII(r_0,y);
 /* dsf scalar(s) */
A_27=divIID(A_26,A_25);
 A_29=minXDI( A_27,QUADct);
 /* dsf scalar(s) */
A_30=plusIII(QUADio,A_29);
r_1=( A_30);
 return(r_1);
}

inline int[.] rollXII(int[.] y ,int QUADRL,double QUADct,int QUADio)
{ 
/*
 ?
*/
A_28=rhoXII( y);
 A_29=mpyslXIIQUICKSTOP( A_28);
 A_33=rhoIII(A_29,-1);
 r_0=( A_33);
 A_35=comaXII( y);
 ry_0=( A_35);
 A_37=rhoXII( ry_0);
 A_39=iotaXII( A_37,QUADio);
 A_CTR40_= 0;
A_CTR40z_ = (shape(A_39)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR40_ <= A_CTR40z_; A_CTR40_++){
i_0 = A_39[[A_CTR40_]];
 A_42= ABC(toi(i_0)-QUADio,shape(ry_0)[0]);
A_44=ry_0[[A_42]];
 A_48=rollScalarXII( A_44,QUADRL,QUADct,QUADio);
 A_49= ABC(toi(i_0)-QUADio,shape(r_2)[0]);
A_51=inds0(r_2,A_49,A_48);
 r_2=( A_51);
 }
 A_54=rhoXII( y);
 A_55=rhoIII(A_54,r_2);
 r_3=( A_55);
 return(r_3);
}

inline bool[.] UTRollXIB(int n ,double QUADct,int QUADio)
{ 
/*
 ?
*/
QUADrl_0=( 16807);
 QUADRL_0=( QUADrl_0);
 A_37=iotaXII( n,QUADio);
 /* dsf scalar(s) */
A_38=plusBII(true,A_37);
 d_0=( A_38);
 A_43,QUADrl_2=querXII( d_0,QUADio,QUADrl_0);
 r1_0=( A_43);
 A_49=rollXII( d_0,QUADRL_0,QUADct,QUADio);
 r2_0=( A_49);
 /* dsf scalar(s) */
A_52=eqIIB(QUADrl_2,QUADRL_0);
 A_54=sameIIB(r1_0,r2_0);
 A_55=comaBBB(A_54,A_52);
 r_0=( A_55);
 return(r_0);
}

inline int[.] dealIII(int a, int b,int QUADRL,double QUADct,int QUADio)
{ 
/*
 ?
*/
A_37=iotaXII( b,QUADio);
 L_0=( A_37);
 A_40=iotaXII( a,QUADio);
 A_CTR41_= 0;
A_CTR41z_ = (shape(A_40)[[0]])-1;
L_3=toI(L_0);
for(; A_CTR41_ <= A_CTR41z_; A_CTR41_++){
i_0 = A_40[[A_CTR41_]];
 /* dsf scalar(s) */
A_43=barIII(b,i_0);
 A_47=rollCLONE8XII( A_43,QUADRL,QUADct,QUADio);
 /* dsf scalar(s) */
A_48=plusIII(i_0,A_47);
 loc_0=( A_48);
 A_50= ABC(toi(i_0)-QUADio,shape(L_3)[0]);
A_52=L_3[[A_50]];
 c_0=( A_52);
 A_54= ABC(toi(loc_0)-QUADio,shape(L_3)[0]);
A_56=L_3[[A_54]];
 A_57= ABC(toi(i_0)-QUADio,shape(L_3)[0]);
A_59=inds0(L_3,A_57,A_56);
 L_2=( A_59);
 A_61= ABC(toi(loc_0)-QUADio,shape(L_2)[0]);
A_63=inds0(L_2,A_61,c_0);
 L_3=( A_63);
 }
 A_66=takeIII(a,L_3);
 /* dsf scalar(s) */
A_67=barIBI(b,true);
 /* dsf scalar(s) */
A_68=barIII(A_67,A_66);
 z_0=( A_68);
 return(z_0);
}

inline bool[.] UTDealXIB(int n ,double QUADct,int QUADio)
{ 
/*
 ?
*/
QUADrl_0=( 16807);
 QUADRL_0=( QUADrl_0);
 /* dsf scalar(s) */
A_34=divIID(n,2);
 A_36=STSCfloorXDI( A_34,QUADct);
 A_40,QUADrl_2=querIII(A_36,n,QUADio,QUADrl_0);
 r1_0=( A_40);
 /* dsf scalar(s) */
A_43=divIID(n,2);
 A_45=STSCfloorXDI( A_43,QUADct);
 A_49=dealIII(A_45,n,QUADRL_0,QUADct,QUADio);
 r2_0=( A_49);
 /* dsf scalar(s) */
A_52=eqIIB(QUADrl_2,QUADRL_0);
 A_54=sameIIB(r1_0,r2_0);
 A_55=comaBBB(A_54,A_52);
 r_0=( A_55);
 return(r_0);
}

inline int UTQuery_mainXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 A_42=UTRollXIB( 1000,QUADct_0,QUADio_0);
 r_0=( A_42);
 A_46=UTDealXIB( 1000,QUADct_0,QUADio_0);
 A_47=comaBBB(r_0,A_46);
 r_1=( A_47);
 A_51=quadXBB( r_1,QUADpp_0,QUADpw_0);
 A_52=andslXBBQUICKSTOP( r_1);
 /* dsf scalar(s) */
A_56=plusBBI(true,A_52);
r_2=( A_56);
 A_60=quadXII( A_56,QUADpp_0,QUADpw_0);
 return(r_2);
}

inline int rollCLONE8XII(int y ,int QUADRL,double QUADct,int QUADio)
{ 
/*
 ?
*/
A_28=rhoXII( y);
 A_29=mpyslXIIQUICKSTOP( A_28);
 A_33=rhoIII(A_29,-1);
 r_0=( A_33);
 A_35=comaXII( y);
 ry_0=( A_35);
 A_37=rhoXII( ry_0);
 A_39=iotaXII( A_37,QUADio);
 A_CTR40_= 0;
A_CTR40z_ = (shape(A_39)[[0]])-1;
r_2=toI(r_0);
for(; A_CTR40_ <= A_CTR40z_; A_CTR40_++){
i_0 = A_39[[A_CTR40_]];
 A_42= ABC(toi(i_0)-QUADio,shape(ry_0)[0]);
A_44=ry_0[[A_42]];
 A_48=rollScalarXII( A_44,QUADRL,QUADct,QUADio);
 A_49= ABC(toi(i_0)-QUADio,shape(r_2)[0]);
A_51=inds0(r_2,A_49,A_48);
 r_2=( A_51);
 }
 A_54=rhoXII( y);
 A_55=rhoIII(A_54,r_2);
 r_3=( A_55);
 return(r_3);
}

inline int STSCfloorCLONE9XII(int y )
{ 
/*
 ?
*/
A_16=minXII( y);
r_0=( A_16);
 return(r_0);
}


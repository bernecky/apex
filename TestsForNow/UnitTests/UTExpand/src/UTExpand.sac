module UTExpand;

use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

// Compiled by APEX Version: CLEAR WS 2021-05-03 16:34:15.263
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


export all;

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline bool[.] comaXBB(bool y)
{ /* Ravel of scalar */
  return([y]);
}

inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline bool[.] rhoIBB(int x, bool[*] y)
{ /* [Scalar reshape non-scalar] (to vector) */
 z = rhoIBB( [toi(x)],y);
 return(z);
}


inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline int[+] comaIBI(int[+] x, bool y)
{ /* A,S last-axis catenate */
 frame = drop([-1],shape(x));
 cell = genarray([1+shape(x)[dim(x)-1]],0);
 z = with {
        (. <= iv <= .)
                : toI(x[iv])++[toI(y)];
        }: genarray(frame, cell);
 return(z);
}


inline int[+] comaBII(bool x, int[+] y)
{ /* S,A last-axis catenate */
 frame = drop([-1],shape(y));
 cell = genarray([1+shape(y)[dim(y)-1]],0);
 z = with {
        (. <= iv <= .)
                : [toI(x)]++toI(y[iv]);
        }: genarray ( frame, cell);
 return(z);
}

inline int[+] combIBI(int[+] x, bool y)
{ /* AxS first-axis catenate */
  cell = genarray([1]++drop([1],shape(x)),toI(y));
  return(toI(x)++cell);
}

inline int[+] combBII(bool x, int[+] y)
{ /* SxA first-axis catenate */
  cell = genarray([1]++drop([1],shape(y)),toI(x));
  return(cell++toI(y));
}

inline int[+] combIII(int[+] x, int[+] y)
{/* AxA first axis catenate. Ranks match */
 return(toI(x)++toI(y));
}

inline bool sameBBB(bool[+] x, bool[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqBBB(toB( x),  toB( y)))));
  return(z);
}



inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline int[*] indr(int[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}




inline int[*] indr(int[+] X, int[+] I)
{ /* X[nonscalarI;;;] */
 defcell = genarray(drop([1],shape(X)),0);
 z = with {
        (. <= iv <= .)
                : X[[I[iv]]];
        } : genarray(shape(I), defcell);
 return(z);
}





inline bool[.] bslBBB(bool[.] x, bool[.] y)
{ /* Vector-vector expand */
 /* Stupid with-loops won't work here. */
 /* FIXME: Needs check that (+/x)= shape(y)[0] and x^.GE 0 */
 yi=0;
 z= genarray(shape(x),false);
 for (xi=0; xi<shape(x)[[0]]; xi++){
   if (toB(x[[xi]])) {
        z[[xi]]=y[[yi]];
        yi++;
   }
 }
 return(z);
}


inline bool[.] bslBBB(bool x, bool y)
{/* Scalar expand scalar (first or last axis) */
 /* In practice, one-element left arguments to expand
  * are nearly useless...
  */
  z = (true == toB(x))  ?  [y]  :  [false];
  return(z);
}

inline bool[.] bslBBB(bool[.] x, bool y)
{/* Vector expand scalar (first or last axis) */
 v = [false,y];
 z = with {
        (. <= iv <= .)
                : v[[toi(x[iv])]];
        } : genarray( shape(x), false );
 return(z);
}

inline int[+] bslBII(bool[.] x, int[+] y)
{ /* vector expand matrix last axis */
 yt = TRANSPOSE(y);
 bx = toB(x);
 bx = (1 == shape(bx)[[0]]) ?   genarray(take([1],shape(yt)), bx[[0]]) :  bx;
 z = genarray(shape(bx)++drop([1],shape(yt)),0);
 yi = 0;
 for(i=0; i<shape(bx)[[0]]; i++)
        if (bx[[i]]){
                z[[i]] = yt[[yi]];
                yi++;
        }
 z = TRANSPOSE(z);
 return(z);
}


inline int[.] bslBII(bool[.] x, int[.] y)
{ /* Vector-vector expand */
 /* Stupid with-loops won't work here. */
 /* FIXME: Needs check that (+/x)= shape(y)[0] and x^.GE 0 */
 yi=0;
 z= genarray(shape(x),0);
 for (xi=0; xi<shape(x)[[0]]; xi++){
   if (toB(x[[xi]])) {
        z[[xi]]=y[[yi]];
        yi++;
   }
 }
 return(z);
}


inline bool[.] bsl1BBB(bool x, bool y)
{/* Scalar expand scalar (first or last axis) */
 /* In practice, one-element left arguments to expand
  * are nearly useless...
  */
  z = (true == toB(x))  ?  [y]  :  [false];
  return(z);
}

inline bool[.] bsl1BBB(bool[.] x, bool y)
{/* Vector expand scalar (first or last axis) */
 v = [false,y];
 z = with {
        (. <= iv <= .)
                : v[[toi(x[iv])]];
        } : genarray( shape(x), false );
 return(z);
}

inline int[+] bsl1BII(bool[.] x, int[+] y)
{ /* vector expand matrix first axis */
 bx = toB(x);
 bx = (1 == shape(bx)[[0]]) ?  genarray(take([1],shape(y)), bx[[0]]) : bx;
 shpz = shape(y);
 shpz[[0]] = shape(bx)[[0]];
 z = genarray(shpz,0);
 yi = 0;
 for(i=0; i<shape(bx)[[0]]; i++)
        if (bx[[i]]){
                z[[i]] = y[[yi]];
                yi++;
        }
 return(z);
}
inline bool[+] bsl1BBB(bool[.] x, bool[+] y)
{ /* vector expand matrix first axis */
 bx = toB(x);
 bx = (1 == shape(bx)[[0]]) ?  genarray(take([1],shape(y)), bx[[0]]) : bx;
 shpz = shape(y);
 shpz[[0]] = shape(bx)[[0]];
 z = genarray(shpz,false);
 yi = 0;
 for(i=0; i<shape(bx)[[0]]; i++)
        if (bx[[i]]){
                z[[i]] = y[[yi]];
                yi++;
        }
 return(z);
}
inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqBBB(bool[+] x, bool[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqBBB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _aplmod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _aplmod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] TRANSPOSE(int[+] y)
{ /* Generic monadic transpose */
  z = with {
        ( . <= iv <= .)
                : y[reverse( iv)];
        }: genarray( reverse( shape(y)), 0);
  return(z);
}

inline bool eqBBB(bool x, bool y)
{ /* A=B on non-doubles */
 return(BtoB(x) == BtoB(y));
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool[+] eqBBB(bool x, bool[+] y)
{ /* SxA scalar function */
  xel = toB(x);
  z = with {
	( . <= iv <= .) {
        	yel = toB(y[iv]);
      		} : eqBBB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqBBB(bool[+] x, bool y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqBBB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : eqIIB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqIIB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[.] comaXBB(bool[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline int UTExpand_mainXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 S0_0=( false);
 S1_0=( true);
 A_88=comaXBB( true);
 V1_0=( A_88);
 A_90=comaXBB( false);
 V0_0=( A_90);
 V10100_0=( [true,false,true,false,false]);
 V101011_0=( [true,false,true,false,true,true]);
 A_95=iotaXII( 24,QUADio_0);
 A_96=rhoIII([2, 3, 4],A_95);
 M234_0=( A_96);
 A_98=rhoIBB(20,[false,false,false,true]);
 A_99=rhoIBB(10,[false,true]);
 A_100=rhoIBB(20,[false,true]);
 A_101=bslBBB(A_100,A_99);
 A_103=sameBBB(A_101,A_98);
 r_0=( A_103);
 A_105=comaXBB( S0_0);
 A_106=bslBBB(S0_0,S0_0);
 A_108=sameBBB(A_106,A_105);
 A_109=comaBBB(r_0,A_108);
 r_1=( A_109);
 A_111=comaXBB( S0_0);
 A_112=bslBBB(S1_0,S0_0);
 A_114=sameBBB(A_112,A_111);
 A_115=comaBBB(r_1,A_114);
 r_2=( A_115);
 A_117=comaXBB( S1_0);
 A_118=bslBBB(S1_0,S1_0);
 A_120=sameBBB(A_118,A_117);
 A_121=comaBBB(r_2,A_120);
 r_3=( A_121);
 A_123=comaXBB( S0_0);
 A_124=bslBBB(V0_0,S0_0);
 A_126=sameBBB(A_124,A_123);
 A_127=comaBBB(r_3,A_126);
 r_4=( A_127);
 A_129=comaXBB( S0_0);
 A_130=bslBBB(V1_0,S0_0);
 A_132=sameBBB(A_130,A_129);
 A_133=comaBBB(r_4,A_132);
 r_5=( A_133);
 A_135=comaIBI(M234_0,false);
 A_136=comaBII(false,A_135);
 z_0=( A_136);
 A_138= ABC(toi([1, 0, 2, 0, 3, 4])-QUADio_0,shape(z_0)[2]);
A_142=indrfr(2,z_0,A_138);
z_1=( A_142);
 A_144=bslBII(V101011_0,M234_0);
 A_146=sameIIB(A_144,z_1);
 A_147=comaBBB(r_5,A_146);
 r_6=( A_147);
 A_150=iotaXII( 4,QUADio_0);
 A_151=bslBII(V101011_0,A_150);
 A_153=sameIIB(A_151,[0, 0, 1, 0, 2, 3]);
 A_154=comaBBB(r_6,A_153);
 r_7=( A_154);
 A_156=comaXBB( S0_0);
 A_157=bsl1BBB(S0_0,S0_0);
 A_159=sameBBB(A_157,A_156);
 A_160=comaBBB(r_7,A_159);
 r_8=( A_160);
 A_162=comaXBB( S0_0);
 A_163=bsl1BBB(S1_0,S0_0);
 A_165=sameBBB(A_163,A_162);
 A_166=comaBBB(r_8,A_165);
 r_9=( A_166);
 A_168=comaXBB( S1_0);
 A_169=bsl1BBB(S1_0,S1_0);
 A_171=sameBBB(A_169,A_168);
 A_172=comaBBB(r_9,A_171);
 r_10=( A_172);
 A_174=comaXBB( S0_0);
 A_175=bsl1BBB(V0_0,S0_0);
 A_177=sameBBB(A_175,A_174);
 A_178=comaBBB(r_10,A_177);
 r_11=( A_178);
 A_180=comaXBB( S0_0);
 A_181=bsl1BBB(V1_0,S0_0);
 A_183=sameBBB(A_181,A_180);
 A_184=comaBBB(r_11,A_183);
 r_12=( A_184);
 A_186=comaXBB( true);
 A_189= ABC(toi(A_186)-QUADio_0,shape(M234_0)[0]);
A_191=indr(M234_0,A_189);
 A_192=combIBI(A_191,false);
 A_193=combIBI(A_192,false);
 A_194=combBII(false,A_193);
 A_195=comaXBB( false);
 A_198= ABC(toi(A_195)-QUADio_0,shape(M234_0)[0]);
A_200=indr(M234_0,A_198);
 A_201=combIII(A_200,A_194);
 z_2=( A_201);
 A_203=bsl1BII(V10100_0,M234_0);
 A_205=sameIIB(A_203,z_2);
 A_206=comaBBB(r_12,A_205);
 r_13=( A_206);
 A_208=rhoIBB(20,[false,false,false,true]);
 A_209=rhoIBB(10,[false,true]);
 A_210=rhoIBB(20,[false,true]);
 A_211=bsl1BBB(A_210,A_209);
 A_213=sameBBB(A_211,A_208);
 A_214=comaBBB(r_13,A_213);
 r_14=( A_214);
 A_218=quadXBB( r_14,QUADpp_0,QUADpw_0);
 A_219=andslXBBQUICKSTOP( r_14);
 // dsf scalar(s)
A_223=barBBI(true,A_219);
 r_15=( A_223);
 A_227=quadXII( A_223,QUADpp_0,QUADpw_0);
 return(r_15);
}


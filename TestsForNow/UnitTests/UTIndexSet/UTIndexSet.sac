module UTIndexSet;

use Array: all;
use ArrayFormat: all;
use Bits: all;
use Clock: {clock,mday,mon,year,to_time};
use CommandLine: all;
use Numerical : all;
use RTClock: all;
use StdIO : all;
use String: {to_string,tochar,sscanf};

/* Compiled by APEX Version: CLEAR WS 2021-02-25 17:10:39.227 */
/*
% This is the APEX stdlib.sis include file.
% Standard equates and constants for APL compiler
% Also standard coercion functions
*/

#define toB(x) to_bool((x))
#define toI(x) toi((x))
#define toD(x) tod((x))
#define toC(x) (x)
#define toc(x) ((x))

#define BtoB(x) ((x))
#define ItoI(x) ((x))
#define DtoD(x) ((x))
#define CtoC(x) ((x))

#define BtoI(x) toi((x))
#define BtoD(x) tod((x))
#define ItoB(x) to_bool((x))
#define ItoD(x) tod((x))
#define DtoB(x) to_bool((x))
#define DtoI(x) toi((x))


export all;

inline int mpyIII(int x, int y)
{ return(ItoI(x)*ItoI(y));
}

inline int barBBI(bool x, bool y)
{ return(BtoI(x)-BtoI(y));
}

inline int[+] plusIII(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : plusIII(xel,yel);
	} : genarray(shape(y), 0);
  return(z);
}


inline int[.] rotrXII(int[.] y)
{ /* Vector reverse */
  z = Array::reverse( 0, y);
  return( z);
}

inline int[+] rotrXII(int[+] y)
{/* Last axis reverse on rank>1 */
  axis = _dim_A_( y) - 1;
  z = Array::reverse( axis, y);
  return( z);
}

inline int[.] comaXII(int[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[*] rhoICC(int[.] x, char[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), ' ');
   return( z);
}



inline int[*] rhoIII(int[.] x, int[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), 0);
   return( z);
}



inline bool[*] rhoIBB(int[.] x, bool[*] y)
{  /* APEX vector x reshape, with potential item reuse */
   z = with {
         ( . <= iv <= .) {
           offset = V2O( toi( x), iv);
           offset = _mod_SxS_( offset, prod( shape(y)));
           el = y[ O2V( shape( y), offset)];
          } : el;
       } : genarray( toi(x), false);
   return( z);
}



inline int[*] dropBII(bool[.] x, int[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[*] dropIII(int[.] x, int[*] y)
{ /* Vector drop non-scalar */
  /* FIXME: Assert  dim(y)  == shape(x)[0]; */
  /* e.g, (,5)drop iota 5  */
  return(drop(toi(x), y));
}

inline int[*] dropIII(int x, int[*] y)
{ /* Scalar drop non-scalar */
  return(drop([toi(x)], y));
}

inline int[.] iotaXII(int y, int QUADio)
{ /* Index generator on scalar */
/* HELP! Needs domain check for negative shp */
  z = QUADio+iota(toi(y));
  return( z);
}

inline char[*] quadXCC(char[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline bool[*] quadXBB(bool[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[*] quadXII(int[*] y, int QUADpp, int QUADpw)
{ /* {quad}{<-} anything */
        show(y);
        return(y);
}
inline int[2] comaIII(int x, int y)
{/* SxS catenate first (or last) axis */
 return([toI(x)]++[toI(y)]);
}

inline int[.] comaIII(int x, int[.] y)
{/* SxV catenate first (or last) axis */
 return([toI(x)]++toI(y));
}

inline bool[2] comaBBB(bool x, bool y)
{/* SxS catenate first (or last) axis */
 return([toB(x)]++[toB(y)]);
}

inline char[.] comaCCC(char[.] x, char[.] y)
{ /* VxV catenate first or last axis */
 return(toC(x)++toC(y));
}

inline bool[.] comaBBB(bool[.] x, bool y)
{/* VxS catenate first (or last) axis */
 return(toB(x)++[toB(y)]);
}

inline double[+] combDID(double x, int[+] y)
{ /* SxA first-axis catenate */
  cell = genarray([1]++drop([1],shape(y)),toD(x));
  return(cell++toD(y));
}

inline int[+] combIII(int x, int[+] y)
{ /* SxA first-axis catenate */
  cell = genarray([1]++drop([1],shape(y)),toI(x));
  return(cell++toI(y));
}

inline int[+] comaIII(int[+] x, int y)
{ /* A,S last-axis catenate */
 frame = drop([-1],shape(x));
 cell = genarray([1+shape(x)[dim(x)-1]],0);
 z = with {
        (. <= iv <= .)
                : toI(x[iv])++[toI(y)];
        }: genarray(frame, cell);
 return(z);
}


inline int[.] comaIII(int[.] x, int[.] y)
{ /* VxV catenate first or last axis */
 return(toI(x)++toI(y));
}

inline int[+] comaIII(int[+] x, int[+] y)
{/* AxA last axis catenate. Ranks match */
 cellshape = (take([-1],shape(x)))+take([-1],shape(y));
 cell = genarray(cellshape, 0);
 z = with {
         (. <= iv <= .)
                : toI(x[iv])++toI(y[iv]);
        } : genarray(drop([-1], shape(x)), cell);
 return(z);
}


inline bool sameIIB(int[+] x, int[+] y)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqIIB(toI( x),  toI( y)))));
  return(z);
}



inline bool sameDDB(double[+] x, double[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline bool sameDIB(double[+] x, int[+] y,double QUADct)
{ /* Non-scalar match non-scalar */
   z = (( _dim_A_( x) == _dim_A_( y))          &&
       ( all( _shape_A_( x) == _shape_A_( y))) &&
       ( all( eqDDB(toD( x),  toD( y), QUADct))));
  return(z);
}



inline char[*] indr(char[+] X, int I)
{ /* X[scalarI;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[scalarI;;j;]
   */
 z = X[[I]];
 return(z);
}




inline int[*] indr(int[+] X)
{ /* X[;;;] */
  /* Used only in conjunction with other indexing, e.g.,
   * X[;;j;]
   */
 return(X);
}




inline int[+] inds0(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline int[+] inds1(int[+] X, int [+] I0, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=ItoI((Y[[i0]]));

 }

 return(z);
}



inline int[+] inds1(int[+] X, int [+] I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=ItoI((Y));

 }

 return(z);
}



inline int[+] indsx(int[+] X,  int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 
 z[[]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsx(int[+] X,  int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-1],shape(X)),Yin);

 
 z[[]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsxx(int[+] X,  int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-2],shape(X)),Yin);

 
 z[[]]=ItoI((Y));

 
 return(z);
}



inline int[+] inds0x(int[+] X, int  I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-1],shape(X)),Yin);

 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsxx(int[+] X,  int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 
 z[[]]=ItoI((Y));

 
 return(z);
}



inline int[+] inds0x(int[+] X, int  I0, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 
 z[[I0]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsx0(int[+] X, int  I1, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){

 z[[i0,I1]]=ItoI((Y[[i0]]));

 }

 return(z);
}



inline int[+] inds1x(int[+] X, int [+] I0, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=ItoI((Y[[i0]]));

 }

 return(z);
}



inline int[+] inds00(int[+] X, int  I0,int  I1, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 
 z[[I0,I1]]=ItoI((Y));

 
 return(z);
}



inline int[+] inds11(int[+] X, int [+] I0,int [+] I1, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 for(i0=0; i0<shape(I0)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[I0[[i0]],I1[[i1]]]]=ItoI((Y));

 }
 }

 return(z);
}



inline int[+] inds11(int[+] X, int [+] I0,int [+] I1, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(I0)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[I0[[i0]],I1[[i1]]]]=ItoI((Y[[i0,i1]]));

 }
 }

 return(z);
}



inline double[+] inds0xx(int[+] X, int  I0, double Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoD(X);
 Y = genarray(take([-2],shape(X)),Yin);

 
 z[[I0]]=DtoD((Y));

 
 return(z);
}



inline double[+] inds0xx(double[+] X, int  I0, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = DtoD(X);
 
 z[[I0]]=ItoD((Y));

 
 return(z);
}



inline double[+] inds1xx(double[+] X, int [+] I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = DtoD(X);
 Y = genarray(take([-2],shape(X)),Yin);

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=ItoD((Y));

 }

 return(z);
}



inline int[+] inds2xx(int[+] X, int [+] I0, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 I0=reshape([prod(shape(I0))],I0);

 z = ItoI(X);
 Y = genarray(take([-2],shape(X)),Yin);

 for(i0=0; i0<shape(I0)[[0]]; i0++){

 z[[I0[[i0]]]]=ItoI((Y));

 }

 return(z);
}



inline int[+] inds00x(int[+] X, int  I0,int  I1, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-1],shape(X)),Yin);

 
 z[[I0,I1]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsx0x(int[+] X, int  I1, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = genarray(take([-1],shape(X)),Yin);

 for(i0=0; i0<shape(X)[[0]]; i0++){

 z[[i0,I1]]=ItoI((Y));

 }

 return(z);
}



inline int[+] indsxx0(int[+] X, int  I2, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 for(i0=0; i0<shape(X)[[0]]; i0++){
 for(i1=0; i1<shape(X)[[1]]; i1++){

 z[[i0,i1,I2]]=ItoI((Y));

 }
 }

 return(z);
}



inline int[+] inds000(int[+] X, int  I0,int  I1,int  I2, int Yin)
{ /* X[;;nonscalarI;;;]<- scalarY */
 
 z = ItoI(X);
 Y = Yin;

 
 z[[I0,I1,I2]]=ItoI((Y));

 
 return(z);
}



inline int[+] indsx1(int[+] X, int [+] I1, int[+] Y)
{ /* X[;;nonscalarI;;;]<- nonscalarY */
  /* In function name indsXXX, XXX are ranks of various Is, or x if axis elided */
 
 z = ItoI(X);
 for(i0=0; i0<shape(X)[[0]]; i0++){
 for(i1=0; i1<shape(I1)[[0]]; i1++){

 z[[i0,I1[[i1]]]]=ItoI((Y[[i0,i1]]));

 }
 }

 return(z);
}



inline bool andslXBBQUICKSTOP(bool[.] y)
{ /* First/last axis reduction of vector with quick stop*/
  z = with {
         (0*shape(y) <= iv < shape(y))
                : BtoB(y[iv]);
        } : foldfix( andBBB, ItoB(1), ItoB(0));
  return(z);
}


inline int plusIII(int x, int y)
{ return(ItoI(x)+ItoI(y));
}

inline bool andBBB(bool x, bool y)
{ return(BtoB(x)&BtoB(y));
}

inline bool[+] eqIIB(int[+] x, int[+] y)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqIIB(xel,yel);
        } : genarray(sy, false);
  return(z);
}






inline bool[+] eqDDB(double[+] x, double[+] y,double QUADct)
{ /* AxA Dyadic scalar fn, shapes may or may not match */
	sy = shape(y);
	z = with {
		( . <= iv <= .) {
			xel = x[iv];
			yel = y[iv];
		} : eqDDB(xel,yel, QUADct);
        } : genarray(sy, false);
  return(z);
}






inline char[*] indrfr(int fr, char[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline char[*] indrfr0(char[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, ' ');
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline char[*] indrfr(int fr, char[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,' ');
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int[*] indrfr(int fr, int[+] X, int[+] I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
  frameshape = take([fr], shape(X));
  cellshape =  shape(I)++drop([fr+1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : indrfr0(X[iv], I);
        } : genarray(frameshape, cell);
 return(z);
}

inline int[*] indrfr0(int[+] X, int[+] I)
{ /* X[I;;;] or    I from X */
  cellshape =  drop([1], shape(X));
  cell = genarray(cellshape, 0);
 z = with {
        (. <= iv <= .)
                : sel( I[iv], X);
        } : genarray(shape(I), cell);
 return(z);
}



inline int[*] indrfr(int fr, int[+] X, int I)
{ /* X[;;;I;;;], where I has fr (framerank) semicolons to its left */
  /* This is actually "I from"fr X" */
 frameshape = take([fr], shape(X));
 cellshape = drop([1+fr],shape(X));
 cell = genarray(cellshape,0);
 z = with {
        (. <= iv <= .)
                : sel( I, X[iv]);
        } : genarray(frameshape, cell);
 return(z);
}


inline int V2O( int[.] shp, int[.] iv)
{ /* Vector iv to offset into array of shape shp */
  /* See V2O.dws workspace */
  offset = 0;
  wt = 1;
  for( i=shape(shp)[0]-1; i>=0; i--) {
    offset = offset + ( wt * iv[i]);
    wt = wt * shp[i];
  }
  return( offset);
}

inline int[.] O2V( int[.] shp, int offset)
{ /* Offset into array of shape shp to index vector */
  /* See V2O.dws workspace */
  iv = genarray( shape(shp), 1);
  wts = iv;
  for( i=shape(shp)[0]-2; i>=0; i--) {
    wts[i] = wts[i+1] * shp[i+1];
  }

  for( i=shape(shp)[0]-1; i>=0; i--) {
    iv[i] = _mod_SxS_( offset/wts[i], shp[i]);
    offset = offset - (iv[i]*wts[i]);
  }
  return( iv);
}

inline bool APEXFUZZEQ(double x, double y, double QUADct)
{ /* ISO APL Tolerant equality predicate */
 absx = abs(x);
 absy = abs(y);
 tolerance = QUADct * max(absx,absy);
 z = abs(x-y) <= tolerance;
 return(z);
}

inline int ABC(int I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[scalarI] & indexed assign */
 z = I;
 return(z);
}

inline int[+] ABC(int[+] I, int Xshape)
{ /* (OLD) Array bounds check for indexed ref X[nonscalarI] & indexed assign */
 z = I;
 return(z);
}

inline bool eqIIB(int x, int y)
{ /* A=B on non-doubles */
 return(ItoI(x) == ItoI(y));
}

inline bool eqDDB(double x, double y, double QUADct)
{ /* A=B on doubles */
  /* We use | instead of || on the assumption that
   * the zero-fuzz case will eliminate the second leg,
   * and it also eliminate a CONDFUN.
   */
 return((DtoD(x) == DtoD(y)) | APEXFUZZEQ(DtoD(x),DtoD(y),QUADct));
}


inline bool[+] eqIIB(int x, int[+] y)
{ /* SxA scalar function */
  xel = toI(x);
  z = with {
	( . <= iv <= .) {
        	yel = toI(y[iv]);
      		} : eqIIB(xel,yel);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqIIB(int[+] x, int y)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqIIB(xel,y);
	} : genarray( shape(x), false);
  return(z);
}


inline bool[+] eqDDB(double x, double[+] y,double QUADct)
{ /* SxA scalar function */
  xel = toD(x);
  z = with {
	( . <= iv <= .) {
        	yel = toD(y[iv]);
      		} : eqDDB(xel,yel, QUADct);
	} : genarray(shape(y), false);
  return(z);
}


inline bool[+] eqDDB(double[+] x, double y,double QUADct)
{ /* AxS scalar function */
  z = with {
	( . <= iv <= .) {
		xel = x[iv];
	} : eqDDB(xel,y, QUADct);
	} : genarray( shape(x), false);
  return(z);
}


inline double[.] comaXDD(double[+] y)
{ /* Ravel of anything with rank>1 */
  z = reshape([prod(shape(y))],y);
  return(z);
}

inline char[.] okXBC(bool k ,int QUADio)
{ 
/*
 ?
*/
A_19=rhoICC([2, 3],['U','G','H','O','K',' ']);
 A_18= ABC(toi(k)-QUADio,shape(A_19)[0]);
A_21=A_19[[A_18]];
r_0=( A_21);
 return(r_0);
}

inline bool[.] testisXIB(int n ,double QUADct,int QUADio,int QUADpp,int QUADpw)
{ 
/*
 ?
*/
/* dsf Scalar & clique */
A_190=mpyIII(n,n);
 /* dsf Scalar & clique */
A_191=mpyIII(n,A_190);
 A_193=iotaXII( A_191,QUADio);
 A_194=comaIII(n,n);
 A_195=comaIII(n,A_194);
 A_196=rhoIII(A_195,A_193);
 r_0=( A_196);
 A_202=r_0;
 A_204=sameIIB(r_0,A_202);
 r_1=( A_204);
 A_207=iotaXII( 4,QUADio);
 v_0=( A_207);
 A_209= ABC(toi(false)-QUADio,shape(v_0)[0]);
A_211=inds0(v_0,A_209,23);
 v_1=( A_211);
 A_215=v_1;
 A_217=sameIIB(v_1,A_215);
 k_0=( A_217);
 A_219=comaBBB(r_1,A_217);
 r_2=( A_219);
 A_222=okXBC( k_0,QUADio);
 A_223=comaCCC(['V','[',']',':',' '],A_222);
 A_226=quadXCC( A_223,QUADpp,QUADpw);
 A_228=sameIIB(v_1,[23, 1, 2, 3]);
 k_1=( A_228);
 A_230=comaBBB(r_2,A_228);
 r_3=( A_230);
 A_233=okXBC( k_1,QUADio);
 A_234=comaCCC(['V','[','S',']','<','-','S',':',' '],A_233);
 A_237=quadXCC( A_234,QUADpp,QUADpw);
 A_238= ABC(toi([1, 2, 2, 3])-QUADio,shape(v_1)[0]);
A_240=inds1(v_1,A_238,[9, 8, 7, 6]);
 v_2=( A_240);
 A_243=sameIIB(v_2,[23, 9, 7, 6]);
 k_2=( A_243);
 A_245=comaBBB(r_3,A_243);
 r_4=( A_245);
 A_248=okXBC( k_2,QUADio);
 A_249=comaCCC(['V','[','V','d','u','p','s',']','<','-','V',':',' '],A_248);
 A_252=quadXCC( A_249,QUADpp,QUADpw);
 A_253= ABC(toi([1, 2])-QUADio,shape(v_2)[0]);
A_255=inds1(v_2,A_253,10);
 v_3=( A_255);
 A_258=sameIIB(v_3,[23, 10, 10, 6]);
 k_3=( A_258);
 A_260=comaBBB(r_4,A_258);
 r_5=( A_260);
 A_263=okXBC( k_3,QUADio);
 A_264=comaCCC(['V','[','V',']','<','-','S',':',' '],A_263);
 A_267=quadXCC( A_264,QUADpp,QUADpw);
 A_269=iotaXII( 4,QUADio);
 A_270=rotrXII( A_269);
 A_273=indsx(v_3,A_270);
 v_4=( A_273);
 A_276=sameIIB(v_4,[3, 2, 1, 0]);
 k_4=( A_276);
 A_278=comaBBB(r_5,A_276);
 r_6=( A_278);
 A_281=okXBC( k_4,QUADio);
 A_282=comaCCC(['V','[',']','<','-','V',':',' '],A_281);
 A_285=quadXCC( A_282,QUADpp,QUADpw);
 A_288=indsx(v_4,11);
 v_5=( A_288);
 A_291=sameIIB(v_5,[11, 11, 11, 11]);
 k_5=( A_291);
 A_293=comaBBB(r_6,A_291);
 r_7=( A_293);
 A_296=okXBC( k_5,QUADio);
 A_297=comaCCC(['V','[',']','<','-','S',':',' '],A_296);
 A_300=quadXCC( A_297,QUADpp,QUADpw);
 A_302=iotaXII( 6,QUADio);
 A_303=rhoIII([2, 3],A_302);
 M2_0=( A_303);
 A_308=indsxx(M2_0,42);
 M2_1=( A_308);
 A_310=rhoIII([2, 3],42);
 A_312=sameIIB(M2_1,A_310);
 k_6=( A_312);
 A_314=comaBBB(r_7,A_312);
 r_8=( A_314);
 A_317=okXBC( k_6,QUADio);
 A_318=comaCCC(['M','[',']','<','-','S',':',' '],A_317);
 A_321=quadXCC( A_318,QUADpp,QUADpw);
 A_323=iotaXII( 6,QUADio);
 A_324=rhoIII([2, 3],A_323);
 M2_2=( A_324);
 A_327= ABC(toi(false)-QUADio,shape(M2_2)[0]);
A_329=inds0x(M2_2,A_327,55);
 M2_3=( A_329);
 A_331=rhoIII([2, 3],[55, 55, 55, 3, 4, 5]);
 A_333=sameIIB(M2_3,A_331);
 k_7=( A_333);
 A_335=comaBBB(r_8,A_333);
 r_9=( A_335);
 A_338=okXBC( k_7,QUADio);
 A_339=comaCCC(['M','[','S',';',']','<','-','S',':',' '],A_338);
 A_342=quadXCC( A_339,QUADpp,QUADpw);
 A_344=iotaXII( 6,QUADio);
 A_345=rhoIII([2, 3],A_344);
 M2_4=( A_345);
 A_347=rotrXII( M2_4);
 A_351=indsxx(M2_4,A_347);
 M2_5=( A_351);
 A_353=rhoIII([2, 3],[2, 1, 0, 5, 4, 3]);
 A_355=sameIIB(M2_5,A_353);
 k_8=( A_355);
 A_357=comaBBB(r_9,A_355);
 r_10=( A_357);
 A_360=okXBC( k_8,QUADio);
 A_361=comaCCC(['M','[',';',']','<','-','M',':',' '],A_360);
 A_364=quadXCC( A_361,QUADpp,QUADpw);
 A_366=iotaXII( 6,QUADio);
 A_367=rhoIII([2, 3],A_366);
 M2_6=( A_367);
 A_370= ABC(toi(false)-QUADio,shape(M2_6)[0]);
A_372=inds0x(M2_6,A_370,[7, 8, 9]);
 M2_7=( A_372);
 A_374=rhoIII([2, 3],[7, 8, 9, 3, 4, 5]);
 A_376=sameIIB(M2_7,A_374);
 k_9=( A_376);
 A_378=comaBBB(r_10,A_376);
 r_11=( A_378);
 A_381=okXBC( k_9,QUADio);
 A_382=comaCCC(['M','[','S',';',']','<','-','V',':',' '],A_381);
 A_385=quadXCC( A_382,QUADpp,QUADpw);
 A_387=iotaXII( 6,QUADio);
 A_388=rhoIII([2, 3],A_387);
 M2_8=( A_388);
 A_390= ABC(toi(false)-QUADio,shape(M2_8)[1]);
A_393=indsx0(M2_8,A_390,[10, 20]);
 M2_9=( A_393);
 A_395=rhoIII([2, 3],[10, 1, 2, 20, 4, 5]);
 A_397=sameIIB(M2_9,A_395);
 k_10=( A_397);
 A_399=comaBBB(r_11,A_397);
 r_12=( A_399);
 A_402=okXBC( k_10,QUADio);
 A_403=comaCCC(['M','[',';','S',']','<','-','V',':',' '],A_402);
 A_406=quadXCC( A_403,QUADpp,QUADpw);
 A_408=iotaXII( 6,QUADio);
 A_409=rhoIII([2, 3],A_408);
 M2_10=( A_409);
 A_411=rhoIII([2, 3],[10, 20, 30, 40, 50, 60]);
 A_413= ABC(toi([true,false])-QUADio,shape(M2_10)[0]);
A_415=inds1x(M2_10,A_413,A_411);
 M2_11=( A_415);
 A_417=rhoIII([2, 3],[40, 50, 60, 10, 20, 30]);
 A_419=sameIIB(M2_11,A_417);
 k_11=( A_419);
 A_421=comaBBB(r_12,A_419);
 r_13=( A_421);
 A_424=okXBC( k_11,QUADio);
 A_425=comaCCC(['M','[','V',';',']','<','-','M',':',' '],A_424);
 A_428=quadXCC( A_425,QUADpp,QUADpw);
 A_430=iotaXII( 6,QUADio);
 A_431=rhoIII([2, 3],A_430);
 M2_12=( A_431);
 A_434= ABC(toi(false)-QUADio,shape(M2_12)[0]);
A_433= ABC(toi(true)-QUADio,shape(M2_12)[1]);
A_436=inds00(M2_12,A_434,A_433,666);
 M2_13=( A_436);
 A_438=rhoIII([2, 3],[0, 666, 2, 3, 4, 5]);
 A_440=sameIIB(M2_13,A_438);
 k_12=( A_440);
 A_442=comaBBB(r_13,A_440);
 r_14=( A_442);
 A_445=okXBC( k_12,QUADio);
 A_446=comaCCC(['M','[','S',';','S',']','<','-','S',':',' '],A_445);
 A_449=quadXCC( A_446,QUADpp,QUADpw);
 A_451= ABC(toi([true,false])-QUADio,shape(M2_13)[0]);
A_450= ABC(toi([2, 1])-QUADio,shape(M2_13)[1]);
A_453=inds11(M2_13,A_451,A_450,42);
 M2_14=( A_453);
 A_455=rhoIII([2, 3],[0, 42, 42, 3, 42, 42]);
 A_457=sameIIB(M2_14,A_455);
 A_458=comaBBB(r_14,A_457);
 r_15=( A_458);
 A_461=okXBC( k_12,QUADio);
 A_462=comaCCC(['M','[','V',';','V',']','<','-','S',':',' '],A_461);
 A_465=quadXCC( A_462,QUADpp,QUADpw);
 A_466=rhoIII([2, 2],[9, 8, 7, 6]);
 A_468= ABC(toi([true,false])-QUADio,shape(M2_14)[0]);
A_467= ABC(toi([2, 0])-QUADio,shape(M2_14)[1]);
A_470=inds11(M2_14,A_468,A_467,A_466);
 M2_15=( A_470);
 A_472=rhoIII([2, 3],[6, 42, 7, 8, 42, 9]);
 A_474=sameIIB(M2_15,A_472);
 k_13=( A_474);
 A_476=comaBBB(r_15,A_474);
 r_16=( A_476);
 A_479=okXBC( k_13,QUADio);
 A_480=comaCCC(['M','[','V',';','V',']','<','-','M',':',' '],A_479);
 A_483=quadXCC( A_480,QUADpp,QUADpw);
 A_485=iotaXII( 24,QUADio);
 A_486=rhoIII([2, 3, 4],A_485);
 M234_0=( A_486);
 A_490= ABC(toi(false)-QUADio,shape(M234_0)[0]);
A_492=inds0xx(M234_0,A_490,3.5);
 M234_1=( A_492);
 A_495=iotaXII( 24,QUADio);
 A_496=rhoIII([2, 3, 4],A_495);
 A_497=dropBII([true,false,false],A_496);
 A_498=combDID(3.5,A_497);
 A_500=sameDDB(M234_1,A_498,QUADct);
 k_14=( A_500);
 A_502=comaBBB(r_16,A_500);
 r_17=( A_502);
 A_505=okXBC( k_14,QUADio);
 A_506=comaCCC(['M','[','S',';',';',']','<','-','S',':',' '],A_505);
 A_509=quadXCC( A_506,QUADpp,QUADpw);
 A_510=rhoIII([3, 4],12);
 A_513= ABC(toi(false)-QUADio,shape(M234_1)[0]);
A_515=inds0xx(M234_1,A_513,A_510);
 M234_2=( A_515);
 A_518=iotaXII( 12,QUADio);
 /* dsf scalar(s) */
A_519=plusIII(12,A_518);
 A_520=rhoIII([1, 3, 4],A_519);
 A_521=combIII(12,A_520);
 A_523=sameDIB(M234_2,A_521,QUADct);
 k_15=( A_523);
 A_525=comaBBB(r_17,A_523);
 r_18=( A_525);
 A_528=okXBC( k_15,QUADio);
 A_529=comaCCC(['M','[','S',';',';',']','<','-','M',':',' '],A_528);
 A_532=quadXCC( A_529,QUADpp,QUADpw);
 A_535= ABC(toi([true,false])-QUADio,shape(M234_2)[0]);
A_537=inds1xx(M234_2,A_535,42);
 M234_3=( A_537);
 A_539=rhoIII([2, 3, 4],42);
 A_541=sameDIB(M234_3,A_539,QUADct);
 k_16=( A_541);
 A_543=comaBBB(r_18,A_541);
 r_19=( A_543);
 A_546=okXBC( k_16,QUADio);
 A_547=comaCCC(['M','[','V',';',';',']','<','-','S',':',' '],A_546);
 A_550=quadXCC( A_547,QUADpp,QUADpw);
 A_552=iotaXII( 24,QUADio);
 A_553=rhoIII([2, 3, 4],A_552);
 M234_4=( A_553);
 A_555=rhoIBB([2, 1],[true,false]);
 A_558= ABC(toi(A_555)-QUADio,shape(M234_4)[0]);
A_560=inds2xx(M234_4,A_558,42);
 M234_5=( A_560);
 A_562=rhoIII([2, 3, 4],42);
 A_564=sameIIB(M234_5,A_562);
 k_17=( A_564);
 A_566=comaBBB(r_19,A_564);
 r_20=( A_566);
 A_569=okXBC( k_17,QUADio);
 A_570=comaCCC(['M','[','M',';',';',']','<','-','S',':',' '],A_569);
 A_573=quadXCC( A_570,QUADpp,QUADpw);
 A_575=iotaXII( 24,QUADio);
 A_576=rhoIII([2, 3, 4],A_575);
 M234_6=( A_576);
 v_6=( M234_6);
 A_581= ABC(toi(false)-QUADio,shape(v_6)[0]);
A_580= ABC(toi(2)-QUADio,shape(v_6)[1]);
A_583=inds00x(v_6,A_581,A_580,42);
 v_7=( A_583);
 A_587= ABC(toi(true)-QUADio,shape(v_7)[0]);
A_586= ABC(toi(2)-QUADio,shape(v_7)[1]);
A_589=inds00x(v_7,A_587,A_586,42);
 v_8=( A_589);
 A_592= ABC(toi(2)-QUADio,shape(M234_6)[1]);
A_595=indsx0x(M234_6,A_592,42);
 M234_7=( A_595);
 A_598=sameIIB(M234_7,v_8);
 A_599=comaBBB(r_20,A_598);
 r_21=( A_599);
 A_602=okXBC( k_17,QUADio);
 A_603=comaCCC(['M','[',';','S',';',']','<','-','S',':',' '],A_602);
 A_606=quadXCC( A_603,QUADpp,QUADpw);
 A_608=iotaXII( 24,QUADio);
 A_609=rhoIII([2, 3, 4],A_608);
 M234_8=( A_609);
 A_611= ABC(toi(3)-QUADio,shape(M234_8)[2]);
A_615=indsxx0(M234_8,A_611,42);
 M234_9=( A_615);
 A_618=iotaXII( 24,QUADio);
 A_619=rhoIII([2, 3, 4],A_618);
 A_620=dropIII([0, 0, -1],A_619);
 A_621=comaIII(A_620,42);
 A_623=sameIIB(M234_9,A_621);
 k_18=( A_623);
 A_625=comaBBB(r_21,A_623);
 r_22=( A_625);
 A_628=okXBC( k_18,QUADio);
 A_629=comaCCC(['M','[',';',';','S',']','<','-','S',':',' '],A_628);
 A_632=quadXCC( A_629,QUADpp,QUADpw);
 A_634=iotaXII( 24,QUADio);
 A_635=rhoIII([2, 3, 4],A_634);
 M234_10=( A_635);
 A_639= ABC(toi(false)-QUADio,shape(M234_10)[0]);
A_638= ABC(toi(false)-QUADio,shape(M234_10)[1]);
A_637= ABC(toi(2)-QUADio,shape(M234_10)[2]);
A_641=inds000(M234_10,A_639,A_638,A_637,42);
M234_11=( A_641);
 A_644=iotaXII( 24,QUADio);
 A_645=rhoIII([2, 3, 4],A_644);
 A_646=comaXII( A_645);
 A_647=dropIII(3,A_646);
 A_648=comaIII([0, 1, 42],A_647);
 A_649=comaXII( M234_11);
 A_651=sameIIB(A_649,A_648);
 k_19=( A_651);
 A_653=comaBBB(r_22,A_651);
 r_23=( A_653);
 A_656=okXBC( k_19,QUADio);
 A_657=comaCCC(['M','[','S',';','S',';','S',']','<','-','S',':',' '],A_656);
 A_660=quadXCC( A_657,QUADpp,QUADpw);
 A_662=iotaXII( 99,QUADio);
 A_663=rhoIII([3, 6],A_662);
 M2_16=( A_663);
 A_666=iotaXII( 9,QUADio);
 /* dsf scalar(s) */
A_667=plusIII(100,A_666);
 A_668=rhoIII([3, 3],A_667);
 A_669= ABC(toi([3, 4, 5])-QUADio,shape(M2_16)[1]);
A_672=indsx1(M2_16,A_669,A_668);
 M2_17=( A_672);
 A_675=iotaXII( 9,QUADio);
 /* dsf scalar(s) */
A_676=plusIII(100,A_675);
 A_677=rhoIII([3, 3],A_676);
 A_678=rhoIII([3, 3],[0, 1, 2, 6, 7, 8, 12, 13, 14]);
 A_679=comaIII(A_678,A_677);
 A_681=sameIIB(M2_17,A_679);
 k_20=( A_681);
 A_683=comaBBB(r_23,A_681);
 r_24=( A_683);
 A_686=okXBC( k_20,QUADio);
 A_687=comaCCC(['M','[',';','V',']','<','-','M',':',' '],A_686);
 A_690=quadXCC( A_687,QUADpp,QUADpw);
 return(r_24);
}

inline int UTIndexSet_mainXXI()
{ 
/*
 ?
*/
QUADio_0=toI(( false));
 QUADct_0=( 1.0e-13);
 QUADpp_0=( 10);
 QUADpw_0=( 80);
 QUADrl_0=( 16807);
 QUADio_1=toI(( false));
 n_0=( 5);
 QUADrl_1=( 16807);
 QUADpp_1=( 16);
 QUADpw_1=( 80);
 A_55=testisXIB( n_0,QUADct_0,QUADio_1,QUADpp_1,QUADpw_1);
r_0=( A_55);
 A_59=quadXBB( r_0,QUADpp_1,QUADpw_1);
 A_60=andslXBBQUICKSTOP( r_0);
 /* dsf scalar(s) */
A_64=barBBI(true,A_60);
 r_1=( A_64);
 A_68=quadXII( r_1,QUADpp_1,QUADpw_1);
 return(r_1);
}

